/// 
/// Qt provides four classes for handling image data: QImage, QPixmap,
/// QBitmap and QPicture. QImage is designed and optimized for I/O,
/// and for direct pixel access and manipulation, while QPixmap is
/// designed and optimized for showing images on screen. QBitmap is
/// only a convenience class that inherits QPixmap, ensuring a
/// depth of 1. Finally, the QPicture class is a paint device that
/// records and replays QPainter commands.
/// 
/// Because QImage is a QPaintDevice subclass, QPainter can be used to
/// draw directly onto images. When using QPainter on a QImage, the
/// painting can be performed in another thread than the current GUI
/// thread.
/// 
/// The QImage class supports several image formats described by the
/// [Format](Format)
/// enum. These include monochrome, 8-bit, 32-bit and
/// alpha-blended images which are available in all versions of Qt
/// 4.x.
/// 
/// QImage provides a collection of functions that can be used to
/// obtain a variety of information about the image. There are also
/// several functions that enables transformation of the image.
/// 
/// QImage objects can be passed around by value since the QImage
/// class uses [implicit data
/// sharing](Implicit%20Data%20Sharing)
/// . QImage objects can also be streamed and compared.
/// 
/// **Note**: If you would like to load QImage objects in a static build of Qt,
/// refer to the [Plugin HowTo](How%20to%20Create%20Qt%20Plugins)
/// 
/// 
/// **Warning**: Painting on a QImage with the format
/// QImage::Format_Indexed8 is not supported.
/// 
/// # Reading and Writing Image Files
/// 
/// QImage provides several ways of loading an image file: The file
/// can be loaded when constructing the QImage object, or by using the
/// load() or loadFromData() functions later on. QImage also provides
/// the static fromData() function, constructing a QImage from the
/// given data. When loading an image, the file name can either refer
/// to an actual file on disk or to one of the application's embedded
/// resources. See [The Qt Resource System](The%20Qt%20Resource%20System)
/// overview for details
/// on how to embed images and other resource files in the
/// application's executable.
/// 
/// Simply call the save() function to save a QImage object.
/// 
/// The complete list of supported file formats are available through
/// the QImageReader::supportedImageFormats() and
/// QImageWriter::supportedImageFormats() functions. New file formats
/// can be added as plugins. By default, Qt supports the following
/// formats:
/// 
/// * Format
/// * Description
/// * Qt's support
/// * BMP
/// * Windows Bitmap
/// * Read/write
/// * GIF
/// * Graphic Interchange Format (optional)
/// * Read
/// * JPG
/// * Joint Photographic Experts Group
/// * Read/write
/// * JPEG
/// * Joint Photographic Experts Group
/// * Read/write
/// * PNG
/// * Portable Network Graphics
/// * Read/write
/// * PBM
/// * Portable Bitmap
/// * Read
/// * PGM
/// * Portable Graymap
/// * Read
/// * PPM
/// * Portable Pixmap
/// * Read/write
/// * XBM
/// * X11 Bitmap
/// * Read/write
/// * XPM
/// * X11 Pixmap
/// * Read/write
/// 
/// # Image Information
/// 
/// QImage provides a collection of functions that can be used to
/// obtain a variety of information about the image:
/// 
/// 
/// * Available Functions
/// 
/// * Geometry
/// * The size(), width(), height(), dotsPerMeterX(), and dotsPerMeterY() functions provide information about the image size and aspect ratio. The rect() function returns the image's enclosing rectangle. The valid() function tells if a given pair of coordinates is within this rectangle. The offset() function returns the number of pixels by which the image is intended to be offset by when positioned relative to other images, which also can be manipulated using the setOffset() function.
/// 
/// * Colors
/// * The color of a pixel can be retrieved by passing its coordinates to the pixel() function. The pixel() function returns the color as a QRgb value indepedent of the image's format. In case of monochrome and 8-bit images, the colorCount() and colorTable() functions provide information about the color components used to store the image data: The colorTable() function returns the image's entire color table. To obtain a single entry, use the pixelIndex() function to retrieve the pixel index for a given pair of coordinates, then use the color() function to retrieve the color. Note that if you create an 8-bit image manually, you have to set a valid color table on the image as well. The hasAlphaChannel() function tells if the image's format respects the alpha channel, or not. The allGray() and isGrayscale() functions tell whether an image's colors are all shades of gray. See also the [Pixel Manipulation](QImage%23Pixel%20Manipulation)
/// and [Image Transformations](QImage%23Image%20Transformations)
/// sections.
/// 
/// * Text
/// * The text() function returns the image text associated with the given text key. An image's text keys can be retrieved using the textKeys() function. Use the setText() function to alter an image's text.
/// 
/// * Low-level information
/// * The depth() function returns the depth of the image. The supported depths are 1 (monochrome), 8, 16, 24 and 32 bits. The bitPlaneCount() function tells how many of those bits that are used. For more information see the [Image Formats](QImage%23Image%20Formats)
/// section. The format(), bytesPerLine(), and sizeInBytes() functions provide low-level information about the data stored in the image. The cacheKey() function returns a number that uniquely identifies the contents of this QImage object.
/// 
/// # Pixel Manipulation
/// 
/// The functions used to manipulate an image's pixels depend on the
/// image format. The reason is that monochrome and 8-bit images are
/// index-based and use a color lookup table, while 32-bit images
/// store ARGB values directly. For more information on image formats,
/// see the [Image Formats](Image%20Formats)
/// section.
/// 
/// In case of a 32-bit image, the setPixel() function can be used to
/// alter the color of the pixel at the given coordinates to any other
/// color specified as an ARGB quadruplet. To make a suitable QRgb
/// value, use the qRgb() (adding a default alpha component to the
/// given RGB values, i.e. creating an opaque color) or qRgba()
/// function. For example:
/// 
/// * {2,1}32-bit
/// 
/// * ![qimage-32bit_scaled.png](qimage-32bit_scaled.png)
/// 
/// 
/// 
/// In case of a 8-bit and monchrome images, the pixel value is only
/// an index from the image's color table. So the setPixel() function
/// can only be used to alter the color of the pixel at the given
/// coordinates to a predefined color from the image's color table,
/// i.e. it can only change the pixel's index value. To alter or add a
/// color to an image's color table, use the setColor() function.
/// 
/// An entry in the color table is an ARGB quadruplet encoded as an
/// QRgb value. Use the qRgb() and qRgba() functions to make a
/// suitable QRgb value for use with the setColor() function. For
/// example:
/// 
/// * {2,1} 8-bit
/// 
/// * ![qimage-8bit_scaled.png](qimage-8bit_scaled.png)
/// 
/// 
/// 
/// For images with more than 8-bit per color-channel. The methods
/// setPixelColor() and pixelColor() can be used to set and get
/// with QColor values.
/// 
/// QImage also provide the scanLine() function which returns a
/// pointer to the pixel data at the scanline with the given index,
/// and the bits() function which returns a pointer to the first pixel
/// data (this is equivalent to `scanLine(0)).`
/// 
/// # Image Formats
/// 
/// Each pixel stored in a QImage is represented by an integer. The
/// size of the integer varies depending on the format. QImage
/// supports several image formats described by the [Format](Format)
/// 
/// enum.
/// 
/// Monochrome images are stored using 1-bit indexes into a color table
/// with at most two colors. There are two different types of
/// monochrome images: big endian (MSB first) or little endian (LSB
/// first) bit order.
/// 
/// 8-bit images are stored using 8-bit indexes into a color table,
/// i.e. they have a single byte per pixel. The color table is a
/// QVector<QRgb>, and the QRgb typedef is equivalent to an unsigned
/// int containing an ARGB quadruplet on the format 0xAARRGGBB.
/// 
/// 32-bit images have no color table; instead, each pixel contains an
/// QRgb value. There are three different types of 32-bit images
/// storing RGB (i.e. 0xffRRGGBB), ARGB and premultiplied ARGB
/// values respectively. In the premultiplied format the red, green,
/// and blue channels are multiplied by the alpha component divided by
/// 255.
/// 
/// An image's format can be retrieved using the format()
/// function. Use the convertToFormat() functions to convert an image
/// into another format. The allGray() and isGrayscale() functions
/// tell whether a color image can safely be converted to a grayscale
/// image.
/// 
/// # Image Transformations
/// 
/// QImage supports a number of functions for creating a new image
/// that is a transformed version of the original: The
/// createAlphaMask() function builds and returns a 1-bpp mask from
/// the alpha buffer in this image, and the createHeuristicMask()
/// function creates and returns a 1-bpp heuristic mask for this
/// image. The latter function works by selecting a color from one of
/// the corners, then chipping away pixels of that color starting at
/// all the edges.
/// 
/// The mirrored() function returns a mirror of the image in the
/// desired direction, the scaled() returns a copy of the image scaled
/// to a rectangle of the desired measures, and the rgbSwapped() function
/// constructs a BGR image from a RGB image.
/// 
/// The scaledToWidth() and scaledToHeight() functions return scaled
/// copies of the image.
/// 
/// The transformed() function returns a copy of the image that is
/// transformed with the given transformation matrix and
/// transformation mode: Internally, the transformation matrix is
/// adjusted to compensate for unwanted translation,
/// i.e. transformed() returns the smallest image containing all
/// transformed points of the original image. The static trueMatrix()
/// function returns the actual matrix used for transforming the
/// image.
/// 
/// There are also functions for changing attributes of an image
/// in-place:
/// 
/// * Function
/// * Description
/// 
/// * setDotsPerMeterX()
/// * Defines the aspect ratio by setting the number of pixels that fit horizontally in a physical meter.
/// 
/// * setDotsPerMeterY()
/// * Defines the aspect ratio by setting the number of pixels that fit vertically in a physical meter.
/// 
/// * fill()
/// * Fills the entire image with the given pixel value.
/// 
/// * invertPixels()
/// * Inverts all pixel values in the image using the given InvertMode value.
/// 
/// * setColorTable()
/// * Sets the color table used to translate color indexes. Only monochrome and 8-bit formats.
/// 
/// * setColorCount()
/// * Resizes the color table. Only monochrome and 8-bit formats.
/// 
/// **See also:** QImageReader
/// QImageWriter
/// QPixmap
/// QSvgRenderer
/// {Image Composition Example}
/// {Image Viewer Example}
/// {Scribble Example}
/// {Pixelator Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QImage)]
enum InvertMode {
    InvertRgb,
    InvertRgba,
}

[org_name(QImage)]
enum Format {
    Format_Invalid,
    Format_Mono,
    Format_MonoLSB,
    Format_Indexed8,
    Format_RGB32,
    Format_ARGB32,
    Format_ARGB32_Premultiplied,
    Format_RGB16,
    Format_ARGB8565_Premultiplied,
    Format_RGB666,
    Format_ARGB6666_Premultiplied,
    Format_RGB555,
    Format_ARGB8555_Premultiplied,
    Format_RGB888,
    Format_RGB444,
    Format_ARGB4444_Premultiplied,
    Format_RGBX8888,
    Format_RGBA8888,
    Format_RGBA8888_Premultiplied,
    Format_BGR30,
    Format_A2BGR30_Premultiplied,
    Format_RGB30,
    Format_A2RGB30_Premultiplied,
    Format_Alpha8,
    Format_Grayscale8,
    NImageFormats,
}

struct Image : PaintDevice {
    /// 
    /// Swaps image *other* with this image. This operation is very
    /// fast and never fails.
    swap(other: &ImageType),
    /// 
    /// Returns `true` if it is a null image, otherwise returns `false.`
    /// 
    /// A null image has all parameters set to zero and no allocated data.
    is_null() -> bool,
    [event] dev_type() -> i32,
    detach(),
    is_detached() -> bool,
    /// 
    /// **Overloads**
    /// The returned image is copied from the position ( *x,* *y)* in
    /// this image, and will always have the given *width* and *height.*
    /// In areas beyond this image, pixels are set to 0.
    /// 
    /// 
    /// Returns a sub-area of the image as a new image.
    /// 
    /// The returned image is copied from the position ( *rectangle* .x(), *rectangle* .y()) in this image, and will always
    /// have the size of the given *rectangle.*
    /// 
    /// In areas beyond this image, pixels are set to 0. For 32-bit RGB
    /// images, this means black; for 32-bit ARGB images, this means
    /// transparent black; for 8-bit images, this means the color with
    /// index 0 in the color table which can be anything; for 1-bit
    /// images, this means Qt::color0.
    /// 
    /// If the given *rectangle* is a null rectangle the entire image is
    /// copied.
    /// 
    /// **See also:** QImage()
    copy_by_rect(rect: &RectType) -> Image,
    /// 
    /// **Overloads**
    /// The returned image is copied from the position ( *x,* *y)* in
    /// this image, and will always have the given *width* and *height.*
    /// In areas beyond this image, pixels are set to 0.
    /// 
    /// 
    /// Returns a sub-area of the image as a new image.
    /// 
    /// The returned image is copied from the position ( *rectangle* .x(), *rectangle* .y()) in this image, and will always
    /// have the size of the given *rectangle.*
    /// 
    /// In areas beyond this image, pixels are set to 0. For 32-bit RGB
    /// images, this means black; for 32-bit ARGB images, this means
    /// transparent black; for 8-bit images, this means the color with
    /// index 0 in the color table which can be anything; for 1-bit
    /// images, this means Qt::color0.
    /// 
    /// If the given *rectangle* is a null rectangle the entire image is
    /// copied.
    /// 
    /// **See also:** QImage()
    copy(x: i32, y: i32, w: i32, h: i32) -> Image,
    /// 
    /// Returns the format of the image.
    /// 
    /// **See also:** {QImage#Image Formats}{Image Formats}
    format() -> Image::Format,
    /// 
    /// Returns a copy of the image in the given *format.*
    /// 
    /// The specified image conversion *flags* control how the image data
    /// is handled during the conversion process.
    /// 
    /// **See also:** {Image Formats}
    /// 
    /// **Overloads**
    /// Returns a copy of the image converted to the given *format,*
    /// using the specified *colorTable.*
    /// 
    /// Conversion from RGB formats to indexed formats is a slow operation
    /// and will use a straightforward nearest color approach, with no
    /// dithering.
    convert_to_format(f: Image::Format, flags: Rute::ImageConversionFlags) -> Image,
    /// 
    /// Changes the format of the image to *format* without changing the
    /// data. Only works between formats of the same depth.
    /// 
    /// Returns `true` if successful.
    /// 
    /// This function can be used to change images with alpha-channels to
    /// their corresponding opaque formats if the data is known to be opaque-only,
    /// or to change the format of a given image buffer before overwriting
    /// it with new data.
    /// 
    /// **Warning**: The function does not check if the image data is valid in the
    /// new format and will still return `true` if the depths are compatible.
    /// Operations on an image with invalid data are undefined.
    /// 
    /// **Warning**: If the image is not detached, this will cause the data to be
    /// copied.
    /// 
    /// **See also:** hasAlphaChannel()
    /// convertToFormat()
    reinterpret_as_format(f: Image::Format) -> bool,
    /// 
    /// Returns the width of the image.
    /// 
    /// **See also:** {QImage#Image Information}{Image Information}
    width() -> i32,
    /// 
    /// Returns the height of the image.
    /// 
    /// **See also:** {QImage#Image Information}{Image Information}
    height() -> i32,
    /// 
    /// Returns the size of the image, i.e. its width() and height().
    /// 
    /// **See also:** {QImage#Image Information}{Image Information}
    /// 
    /// Returns the image data size in bytes.
    /// 
    /// **See also:** byteCount()
    /// bytesPerLine()
    /// bits()
    /// {QImage#Image Information}{Image
    /// Information}
    size() -> Size,
    /// 
    /// Returns the enclosing rectangle (0, 0, width(), height()) of the
    /// image.
    /// 
    /// **See also:** {QImage#Image Information}{Image Information}
    rect() -> Rect,
    /// 
    /// Returns the depth of the image.
    /// 
    /// The image depth is the number of bits used to store a single
    /// pixel, also called bits per pixel (bpp).
    /// 
    /// The supported depths are 1, 8, 16, 24 and 32.
    /// 
    /// **See also:** bitPlaneCount()
    /// convertToFormat()
    /// {QImage#Image Formats}{Image Formats}
    /// {QImage#Image Information}{Image Information}
    /// 
    depth() -> i32,
    /// 
    /// Returns the size of the color table for the image.
    /// 
    /// Notice that colorCount() returns 0 for 32-bpp images because these
    /// images do not use color tables, but instead encode pixel values as
    /// ARGB quadruplets.
    /// 
    /// **See also:** setColorCount()
    /// {QImage#Image Information}{Image Information}
    color_count() -> i32,
    /// 
    /// Returns the number of bit planes in the image.
    /// 
    /// The number of bit planes is the number of bits of color and
    /// transparency information for each pixel. This is different from
    /// (i.e. smaller than) the depth when the image format contains
    /// unused bits.
    /// 
    /// **See also:** depth()
    /// format()
    /// {QImage#Image Formats}{Image Formats}
    bit_plane_count() -> i32,
    /// 
    /// Returns the size of the color table for the image.
    /// 
    /// Notice that colorCount() returns 0 for 32-bpp images because these
    /// images do not use color tables, but instead encode pixel values as
    /// ARGB quadruplets.
    /// 
    /// **See also:** setColorCount()
    /// {QImage#Image Information}{Image Information}
    /// 
    /// Returns a list of the colors contained in the image's color table,
    /// or an empty list if the image does not have a color table
    /// 
    /// **See also:** setColorTable()
    /// colorCount()
    /// color()
    /// 
    /// Returns the color in the color table at index *i.* The first
    /// color is at index 0.
    /// 
    /// The colors in an image's color table are specified as ARGB
    /// quadruplets (QRgb). Use the qAlpha(), qRed(), qGreen(), and
    /// qBlue() functions to get the color value components.
    /// 
    /// **See also:** setColor()
    /// pixelIndex()
    /// {QImage#Pixel Manipulation}{Pixel
    /// Manipulation}
    color(i: i32) -> u32,
    /// 
    /// Sets the color at the given *index* in the color table, to the
    /// given to *colorValue.* The color value is an ARGB quadruplet.
    /// 
    /// If *index* is outside the current size of the color table, it is
    /// expanded with setColorCount().
    /// 
    /// **See also:** color()
    /// colorCount()
    /// setColorTable()
    /// {QImage#Pixel Manipulation}{Pixel
    /// Manipulation}
    /// 
    /// Resizes the color table to contain *colorCount* entries.
    /// 
    /// If the color table is expanded, all the extra colors will be set to
    /// transparent (i.e qRgba(0, 0, 0, 0)).
    /// 
    /// When the image is used, the color table must be large enough to
    /// have entries for all the pixel/index values present in the image,
    /// otherwise the results are undefined.
    /// 
    /// **See also:** colorCount()
    /// colorTable()
    /// setColor()
    /// {QImage#Image
    /// Transformations}{Image Transformations}
    set_color(i: i32, c: u32),
    /// 
    /// Resizes the color table to contain *colorCount* entries.
    /// 
    /// If the color table is expanded, all the extra colors will be set to
    /// transparent (i.e qRgba(0, 0, 0, 0)).
    /// 
    /// When the image is used, the color table must be large enough to
    /// have entries for all the pixel/index values present in the image,
    /// otherwise the results are undefined.
    /// 
    /// **See also:** colorCount()
    /// colorTable()
    /// setColor()
    /// {QImage#Image
    /// Transformations}{Image Transformations}
    set_color_count(arg0: i32),
    /// 
    /// Returns `true` if all the colors in the image are shades of gray
    /// (i.e. their red, green and blue components are equal); otherwise
    /// false.
    /// 
    /// Note that this function is slow for images without color table.
    /// 
    /// **See also:** isGrayscale()
    all_gray() -> bool,
    /// 
    /// For 32-bit images, this function is equivalent to allGray().
    /// 
    /// For color indexed images, this function returns `true` if
    /// color(i) is QRgb(i, i, i) for all indexes of the color table;
    /// otherwise returns `false.`
    /// 
    /// **See also:** allGray()
    /// {QImage#Image Formats}{Image Formats}
    is_grayscale() -> bool,
    /// 
    /// Returns a pointer to the first pixel data. This is equivalent to
    /// scanLine(0).
    /// 
    /// Note that QImage uses [implicit data
    /// sharing](Implicit%20Data%20Sharing)
    /// . This function performs a deep copy of the shared pixel
    /// data, thus ensuring that this QImage is the only one using the
    /// current return value.
    /// 
    /// **See also:** scanLine()
    /// sizeInBytes()
    /// constBits()
    /// 
    /// **Overloads**
    /// Note that QImage uses [implicit data
    /// sharing](Implicit%20Data%20Sharing)
    /// , but this function does *not* perform a deep copy of the
    /// shared pixel data, because the returned data is const.
    bits() -> u8?,
    /// 
    /// Returns a pointer to the first pixel data.
    /// 
    /// Note that QImage uses [implicit data
    /// sharing](Implicit%20Data%20Sharing)
    /// , but this function does *not* perform a deep copy of the
    /// shared pixel data, because the returned data is const.
    /// 
    /// **See also:** bits()
    /// constScanLine()
    const_bits() -> u8?,
    /// 
    /// Returns the number of bytes occupied by the image data.
    /// 
    /// Note this method should never be called on an image larger than 2 gigabytes.
    /// Instead use sizeInBytes().
    /// 
    /// **See also:** sizeInBytes()
    /// bytesPerLine()
    /// bits()
    /// {QImage#Image Information}{Image
    /// Information}
    byte_count() -> i32,
    /// 
    /// Returns the image data size in bytes.
    /// 
    /// **See also:** byteCount()
    /// bytesPerLine()
    /// bits()
    /// {QImage#Image Information}{Image
    /// Information}
    size_in_bytes() -> i32,
    /// 
    /// Returns a pointer to the pixel data at the scanline with index *i.* The first scanline is at index 0.
    /// 
    /// The scanline data is aligned on a 32-bit boundary.
    /// 
    /// **Warning**: If you are accessing 32-bpp image data, cast the returned
    /// pointer to `QRgb*` (QRgb has a 32-bit size) and use it to
    /// read/write the pixel value. You cannot use the `u8*` pointer
    /// directly, because the pixel format depends on the byte order on
    /// the underlying platform. Use qRed(), qGreen(), qBlue(), and
    /// qAlpha() to access the pixels.
    /// 
    /// **See also:** bytesPerLine()
    /// bits()
    /// {QImage#Pixel Manipulation}{Pixel
    /// Manipulation}, constScanLine()
    /// 
    /// **Overloads**
    scan_line(arg0: i32) -> u8?,
    /// 
    /// Returns a pointer to the pixel data at the scanline with index *i.* The first scanline is at index 0.
    /// 
    /// The scanline data is aligned on a 32-bit boundary.
    /// 
    /// Note that QImage uses [implicit data
    /// sharing](Implicit%20Data%20Sharing)
    /// , but this function does *not* perform a deep copy of the
    /// shared pixel data, because the returned data is const.
    /// 
    /// **See also:** scanLine()
    /// constBits()
    const_scan_line(arg0: i32) -> u8?,
    /// 
    /// Returns the number of bytes per image scanline.
    /// 
    /// This is equivalent to sizeInBytes() / height() if height() is non-zero.
    /// 
    /// **See also:** scanLine()
    bytes_per_line() -> i32,
    /// 
    /// Returns `true` if *pos* is a valid coordinate pair within the
    /// image; otherwise returns `false.`
    /// 
    /// **See also:** rect()
    /// QRect::contains()
    /// 
    /// **Overloads**
    /// Returns `true` if QPoint( *x,* *y)* is a valid coordinate pair
    /// within the image; otherwise returns `false.`
    valid(x: i32, y: i32) -> bool,
    /// 
    /// Returns `true` if *pos* is a valid coordinate pair within the
    /// image; otherwise returns `false.`
    /// 
    /// **See also:** rect()
    /// QRect::contains()
    /// 
    /// **Overloads**
    /// Returns `true` if QPoint( *x,* *y)* is a valid coordinate pair
    /// within the image; otherwise returns `false.`
    valid_by_point(pt: &PointType) -> bool,
    /// 
    /// Returns the pixel index at the given *position.*
    /// 
    /// If *position* is not valid, or if the image is not a paletted
    /// image (depth() > 8), the results are undefined.
    /// 
    /// **See also:** valid()
    /// depth()
    /// {QImage#Pixel Manipulation}{Pixel Manipulation}
    /// 
    /// **Overloads**
    /// Returns the pixel index at ( *x,* *y).*
    pixel_index(x: i32, y: i32) -> i32,
    /// 
    /// Returns the pixel index at the given *position.*
    /// 
    /// If *position* is not valid, or if the image is not a paletted
    /// image (depth() > 8), the results are undefined.
    /// 
    /// **See also:** valid()
    /// depth()
    /// {QImage#Pixel Manipulation}{Pixel Manipulation}
    /// 
    /// **Overloads**
    /// Returns the pixel index at ( *x,* *y).*
    pixel_index_by_point(pt: &PointType) -> i32,
    /// 
    /// Returns the pixel index at the given *position.*
    /// 
    /// If *position* is not valid, or if the image is not a paletted
    /// image (depth() > 8), the results are undefined.
    /// 
    /// **See also:** valid()
    /// depth()
    /// {QImage#Pixel Manipulation}{Pixel Manipulation}
    /// 
    /// **Overloads**
    /// Returns the pixel index at ( *x,* *y).*
    /// 
    /// Returns the color of the pixel at the given *position.*
    /// 
    /// If the *position* is not valid, the results are undefined.
    /// 
    /// **Warning**: This function is expensive when used for massive pixel
    /// manipulations. Use constBits() or constScanLine() when many
    /// pixels needs to be read.
    /// 
    /// **See also:** setPixel()
    /// valid()
    /// constBits()
    /// constScanLine()
    /// {QImage#Pixel Manipulation}{Pixel
    /// Manipulation}
    /// 
    /// **Overloads**
    /// Returns the color of the pixel at coordinates ( *x,* *y).*
    /// 
    /// Returns the color of the pixel at the given *position* as a QColor.
    /// 
    /// If the *position* is not valid, an invalid QColor is returned.
    /// 
    /// **Warning**: This function is expensive when used for massive pixel
    /// manipulations. Use constBits() or constScanLine() when many
    /// pixels needs to be read.
    /// 
    /// **See also:** setPixel()
    /// valid()
    /// constBits()
    /// constScanLine()
    /// {QImage#Pixel Manipulation}{Pixel
    /// Manipulation}
    /// 
    /// **Overloads**
    /// Returns the color of the pixel at coordinates ( *x,* *y)* as a QColor.
    /// 
    /// Returns the QImage::Format as a QPixelFormat
    pixel(x: i32, y: i32) -> u32,
    /// 
    /// Returns the pixel index at the given *position.*
    /// 
    /// If *position* is not valid, or if the image is not a paletted
    /// image (depth() > 8), the results are undefined.
    /// 
    /// **See also:** valid()
    /// depth()
    /// {QImage#Pixel Manipulation}{Pixel Manipulation}
    /// 
    /// **Overloads**
    /// Returns the pixel index at ( *x,* *y).*
    /// 
    /// Returns the color of the pixel at the given *position.*
    /// 
    /// If the *position* is not valid, the results are undefined.
    /// 
    /// **Warning**: This function is expensive when used for massive pixel
    /// manipulations. Use constBits() or constScanLine() when many
    /// pixels needs to be read.
    /// 
    /// **See also:** setPixel()
    /// valid()
    /// constBits()
    /// constScanLine()
    /// {QImage#Pixel Manipulation}{Pixel
    /// Manipulation}
    /// 
    /// **Overloads**
    /// Returns the color of the pixel at coordinates ( *x,* *y).*
    /// 
    /// Returns the color of the pixel at the given *position* as a QColor.
    /// 
    /// If the *position* is not valid, an invalid QColor is returned.
    /// 
    /// **Warning**: This function is expensive when used for massive pixel
    /// manipulations. Use constBits() or constScanLine() when many
    /// pixels needs to be read.
    /// 
    /// **See also:** setPixel()
    /// valid()
    /// constBits()
    /// constScanLine()
    /// {QImage#Pixel Manipulation}{Pixel
    /// Manipulation}
    /// 
    /// **Overloads**
    /// Returns the color of the pixel at coordinates ( *x,* *y)* as a QColor.
    /// 
    /// Returns the QImage::Format as a QPixelFormat
    pixel_by_point(pt: &PointType) -> u32,
    /// 
    /// Sets the pixel index or color at the given *position* to *index_or_rgb.*
    /// 
    /// If the image's format is either monochrome or paletted, the given *index_or_rgb* value must be an index in the image's color table,
    /// otherwise the parameter must be a QRgb value.
    /// 
    /// If *position* is not a valid coordinate pair in the image, or if
    /// *index_or_rgb* >= colorCount() in the case of monochrome and
    /// paletted images, the result is undefined.
    /// 
    /// **Warning**: This function is expensive due to the call of the internal
    /// `detach()` function called within; if performance is a concern, we
    /// recommend the use of scanLine() or bits() to access pixel data directly.
    /// 
    /// **See also:** pixel()
    /// {QImage#Pixel Manipulation}{Pixel Manipulation}
    /// 
    /// **Overloads**
    /// Sets the pixel index or color at ( *x,* *y)* to *index_or_rgb.*
    /// 
    /// Sets the color at the given *position* to *color.*
    /// 
    /// If *position* is not a valid coordinate pair in the image, or
    /// the image's format is either monochrome or paletted, the result is undefined.
    /// 
    /// **Warning**: This function is expensive due to the call of the internal
    /// `detach()` function called within; if performance is a concern, we
    /// recommend the use of scanLine() or bits() to access pixel data directly.
    /// 
    /// **See also:** pixel()
    /// bits()
    /// scanLine()
    /// {QImage#Pixel Manipulation}{Pixel Manipulation}
    /// 
    /// **Overloads**
    /// Sets the pixel color at ( *x,* *y)* to *color.*
    set_pixel(x: i32, y: i32, index_or_rgb: uint),
    /// 
    /// Sets the pixel index or color at the given *position* to *index_or_rgb.*
    /// 
    /// If the image's format is either monochrome or paletted, the given *index_or_rgb* value must be an index in the image's color table,
    /// otherwise the parameter must be a QRgb value.
    /// 
    /// If *position* is not a valid coordinate pair in the image, or if
    /// *index_or_rgb* >= colorCount() in the case of monochrome and
    /// paletted images, the result is undefined.
    /// 
    /// **Warning**: This function is expensive due to the call of the internal
    /// `detach()` function called within; if performance is a concern, we
    /// recommend the use of scanLine() or bits() to access pixel data directly.
    /// 
    /// **See also:** pixel()
    /// {QImage#Pixel Manipulation}{Pixel Manipulation}
    /// 
    /// **Overloads**
    /// Sets the pixel index or color at ( *x,* *y)* to *index_or_rgb.*
    /// 
    /// Sets the color at the given *position* to *color.*
    /// 
    /// If *position* is not a valid coordinate pair in the image, or
    /// the image's format is either monochrome or paletted, the result is undefined.
    /// 
    /// **Warning**: This function is expensive due to the call of the internal
    /// `detach()` function called within; if performance is a concern, we
    /// recommend the use of scanLine() or bits() to access pixel data directly.
    /// 
    /// **See also:** pixel()
    /// bits()
    /// scanLine()
    /// {QImage#Pixel Manipulation}{Pixel Manipulation}
    /// 
    /// **Overloads**
    /// Sets the pixel color at ( *x,* *y)* to *color.*
    set_pixel_by_point(pt: &PointType, index_or_rgb: uint),
    /// 
    /// Returns the color of the pixel at the given *position* as a QColor.
    /// 
    /// If the *position* is not valid, an invalid QColor is returned.
    /// 
    /// **Warning**: This function is expensive when used for massive pixel
    /// manipulations. Use constBits() or constScanLine() when many
    /// pixels needs to be read.
    /// 
    /// **See also:** setPixel()
    /// valid()
    /// constBits()
    /// constScanLine()
    /// {QImage#Pixel Manipulation}{Pixel
    /// Manipulation}
    /// 
    /// **Overloads**
    /// Returns the color of the pixel at coordinates ( *x,* *y)* as a QColor.
    pixel_color(x: i32, y: i32) -> Color,
    /// 
    /// Returns the color of the pixel at the given *position* as a QColor.
    /// 
    /// If the *position* is not valid, an invalid QColor is returned.
    /// 
    /// **Warning**: This function is expensive when used for massive pixel
    /// manipulations. Use constBits() or constScanLine() when many
    /// pixels needs to be read.
    /// 
    /// **See also:** setPixel()
    /// valid()
    /// constBits()
    /// constScanLine()
    /// {QImage#Pixel Manipulation}{Pixel
    /// Manipulation}
    /// 
    /// **Overloads**
    /// Returns the color of the pixel at coordinates ( *x,* *y)* as a QColor.
    pixel_color_by_point(pt: &PointType) -> Color,
    /// 
    /// Sets the color at the given *position* to *color.*
    /// 
    /// If *position* is not a valid coordinate pair in the image, or
    /// the image's format is either monochrome or paletted, the result is undefined.
    /// 
    /// **Warning**: This function is expensive due to the call of the internal
    /// `detach()` function called within; if performance is a concern, we
    /// recommend the use of scanLine() or bits() to access pixel data directly.
    /// 
    /// **See also:** pixel()
    /// bits()
    /// scanLine()
    /// {QImage#Pixel Manipulation}{Pixel Manipulation}
    /// 
    /// **Overloads**
    /// Sets the pixel color at ( *x,* *y)* to *color.*
    set_pixel_color(x: i32, y: i32, c: &ColorType),
    /// 
    /// Sets the color at the given *position* to *color.*
    /// 
    /// If *position* is not a valid coordinate pair in the image, or
    /// the image's format is either monochrome or paletted, the result is undefined.
    /// 
    /// **Warning**: This function is expensive due to the call of the internal
    /// `detach()` function called within; if performance is a concern, we
    /// recommend the use of scanLine() or bits() to access pixel data directly.
    /// 
    /// **See also:** pixel()
    /// bits()
    /// scanLine()
    /// {QImage#Pixel Manipulation}{Pixel Manipulation}
    /// 
    /// **Overloads**
    /// Sets the pixel color at ( *x,* *y)* to *color.*
    set_pixel_color_by_point(pt: &PointType, c: &ColorType),
    /// 
    /// Returns the device pixel ratio for the image. This is the
    /// ratio between *device pixels* and *device independent pixels* .
    /// 
    /// Use this function when calculating layout geometry based on
    /// the image size: QSize layoutSize = image.size() / image.devicePixelRatio()
    /// 
    /// The default value is 1.0.
    /// 
    /// **See also:** setDevicePixelRatio()
    /// QImageReader
    device_pixel_ratio() -> f32,
    /// 
    /// Sets the device pixel ratio for the image. This is the
    /// ratio between image pixels and device-independent pixels.
    /// 
    /// The default *scaleFactor* is 1.0. Setting it to something else has
    /// two effects:
    /// 
    /// QPainters that are opened on the image will be scaled. For
    /// example, painting on a 200x200 image if with a ratio of 2.0
    /// will result in effective (device-independent) painting bounds
    /// of 100x100.
    /// 
    /// Code paths in Qt that calculate layout geometry based on the
    /// image size will take the ratio into account:
    /// QSize layoutSize = image.size() / image.devicePixelRatio()
    /// The net effect of this is that the image is displayed as
    /// high-DPI image rather than a large image
    /// (see [Drawing High Resolution Versions of Pixmaps and Images](Drawing%20High%20Resolution%20Versions%20of%20Pixmaps%20and%20Images)
    /// ).
    /// 
    /// **See also:** devicePixelRatio()
    set_device_pixel_ratio(scale_factor: f32),
    /// 
    /// Fills the entire image with the given *pixelValue.*
    /// 
    /// If the depth of this image is 1, only the lowest bit is used. If
    /// you say fill(0), fill(2), etc., the image is filled with 0s. If
    /// you say fill(1), fill(3), etc., the image is filled with 1s. If
    /// the depth is 8, the lowest 8 bits are used and if the depth is 16
    /// the lowest 16 bits are used.
    /// 
    /// Note: QImage::pixel() returns the color of the pixel at the given
    /// coordinates while QColor::pixel() returns the pixel value of the
    /// underlying window system (essentially an index value), so normally
    /// you will want to use QImage::pixel() to use a color from an
    /// existing image or QColor::rgb() to use a specific color.
    /// 
    /// **See also:** depth()
    /// {QImage#Image Transformations}{Image Transformations}
    /// 
    /// **Overloads**
    /// Fills the image with the given *color,* described as a standard global
    /// color.
    /// 
    /// **Overloads**
    /// Fills the entire image with the given *color.*
    /// 
    /// If the depth of the image is 1, the image will be filled with 1 if
    /// *color* equals Qt::color1; it will otherwise be filled with 0.
    /// 
    /// If the depth of the image is 8, the image will be filled with the
    /// index corresponding the *color* in the color table if present; it
    /// will otherwise be filled with 0.
    /// 
    fill(pixel: u32),
    /// 
    /// Fills the entire image with the given *pixelValue.*
    /// 
    /// If the depth of this image is 1, only the lowest bit is used. If
    /// you say fill(0), fill(2), etc., the image is filled with 0s. If
    /// you say fill(1), fill(3), etc., the image is filled with 1s. If
    /// the depth is 8, the lowest 8 bits are used and if the depth is 16
    /// the lowest 16 bits are used.
    /// 
    /// Note: QImage::pixel() returns the color of the pixel at the given
    /// coordinates while QColor::pixel() returns the pixel value of the
    /// underlying window system (essentially an index value), so normally
    /// you will want to use QImage::pixel() to use a color from an
    /// existing image or QColor::rgb() to use a specific color.
    /// 
    /// **See also:** depth()
    /// {QImage#Image Transformations}{Image Transformations}
    /// 
    /// **Overloads**
    /// Fills the image with the given *color,* described as a standard global
    /// color.
    /// 
    /// **Overloads**
    /// Fills the entire image with the given *color.*
    /// 
    /// If the depth of the image is 1, the image will be filled with 1 if
    /// *color* equals Qt::color1; it will otherwise be filled with 0.
    /// 
    /// If the depth of the image is 8, the image will be filled with the
    /// index corresponding the *color* in the color table if present; it
    /// will otherwise be filled with 0.
    /// 
    fill_by_type(color: &ColorType),
    /// 
    /// Fills the entire image with the given *pixelValue.*
    /// 
    /// If the depth of this image is 1, only the lowest bit is used. If
    /// you say fill(0), fill(2), etc., the image is filled with 0s. If
    /// you say fill(1), fill(3), etc., the image is filled with 1s. If
    /// the depth is 8, the lowest 8 bits are used and if the depth is 16
    /// the lowest 16 bits are used.
    /// 
    /// Note: QImage::pixel() returns the color of the pixel at the given
    /// coordinates while QColor::pixel() returns the pixel value of the
    /// underlying window system (essentially an index value), so normally
    /// you will want to use QImage::pixel() to use a color from an
    /// existing image or QColor::rgb() to use a specific color.
    /// 
    /// **See also:** depth()
    /// {QImage#Image Transformations}{Image Transformations}
    /// 
    /// **Overloads**
    /// Fills the image with the given *color,* described as a standard global
    /// color.
    /// 
    /// **Overloads**
    /// Fills the entire image with the given *color.*
    /// 
    /// If the depth of the image is 1, the image will be filled with 1 if
    /// *color* equals Qt::color1; it will otherwise be filled with 0.
    /// 
    /// If the depth of the image is 8, the image will be filled with the
    /// index corresponding the *color* in the color table if present; it
    /// will otherwise be filled with 0.
    /// 
    [org_name(fill)]
    fill_by_color(color: Rute::GlobalColor),
    ///
    /// Returns `true` if the image has a format that respects the alpha
    /// channel, otherwise returns `false.`
    ///
    /// **See also:** {QImage#Image Information}{Image Information}
    has_alpha_channel() -> bool,
    /// 
    /// Sets the alpha channel of this image to the given *alphaChannel.*
    /// 
    /// If *alphaChannel* is an 8 bit grayscale image, the intensity values are
    /// written into this buffer directly. Otherwise, *alphaChannel* is converted
    /// to 32 bit and the intensity of the RGB pixel values is used.
    /// 
    /// Note that the image will be converted to the Format_ARGB32_Premultiplied
    /// format if the function succeeds.
    /// 
    /// Use one of the composition modes in QPainter::CompositionMode instead.
    /// 
    /// **Warning**: This function is expensive.
    /// 
    /// **See also:** alphaChannel()
    /// {QImage#Image Transformations}{Image
    /// Transformations}, {QImage#Image Formats}{Image Formats}
    set_alpha_channel(alpha_channel: &ImageType),
    /// 
    /// Returns the alpha channel of the image as a new grayscale QImage in which
    /// each pixel's red, green, and blue values are given the alpha value of the
    /// original image. The color depth of the returned image is 8-bit.
    /// 
    /// You can see an example of use of this function in QPixmap's
    /// [alphaChannel()](QPixmap::)
    /// , which works in the same way as
    /// this function on QPixmaps.
    /// 
    /// Most usecases for this function can be replaced with QPainter and
    /// using composition modes.
    /// 
    /// Note this returns a color-indexed image if you want the alpha channel in
    /// the alpha8 format instead use convertToFormat(Format_Alpha8) on the source
    /// image.
    /// 
    /// **Warning**: This is an expensive function.
    /// 
    /// **See also:** setAlphaChannel()
    /// hasAlphaChannel()
    /// convertToFormat()
    /// {QPixmap#Pixmap Information}{Pixmap}
    /// {QImage#Image Transformations}{Image Transformations}
    alpha_channel() -> Image,
    /// 
    /// Builds and returns a 1-bpp mask from the alpha buffer in this
    /// image. Returns a null image if the image's format is
    /// QImage::Format_RGB32.
    /// 
    /// The *flags* argument is a bitwise-OR of the
    /// Qt::ImageConversionFlags, and controls the conversion
    /// process. Passing 0 for flags sets all the default options.
    /// 
    /// The returned image has little-endian bit order (i.e. the image's
    /// format is QImage::Format_MonoLSB), which you can convert to
    /// big-endian (QImage::Format_Mono) using the convertToFormat()
    /// function.
    /// 
    /// **See also:** createHeuristicMask()
    /// {QImage#Image Transformations}{Image
    /// Transformations}
    create_alpha_mask(flags: Rute::ImageConversionFlags) -> Image,
    /// 
    /// Creates and returns a 1-bpp heuristic mask for this image.
    /// 
    /// The function works by selecting a color from one of the corners,
    /// then chipping away pixels of that color starting at all the edges.
    /// The four corners vote for which color is to be masked away. In
    /// case of a draw (this generally means that this function is not
    /// applicable to the image), the result is arbitrary.
    /// 
    /// The returned image has little-endian bit order (i.e. the image's
    /// format is QImage::Format_MonoLSB), which you can convert to
    /// big-endian (QImage::Format_Mono) using the convertToFormat()
    /// function.
    /// 
    /// If *clipTight* is true (the default) the mask is just large
    /// enough to cover the pixels; otherwise, the mask is larger than the
    /// data pixels.
    /// 
    /// Note that this function disregards the alpha buffer.
    /// 
    /// **See also:** createAlphaMask()
    /// {QImage#Image Transformations}{Image
    /// Transformations}
    create_heuristic_mask(clip_tight: bool) -> Image,
    /// 
    /// Creates and returns a mask for this image based on the given *color* value. If the *mode* is MaskInColor (the default value),
    /// all pixels matching *color* will be opaque pixels in the mask. If
    /// *mode* is MaskOutColor, all pixels matching the given color will
    /// be transparent.
    /// 
    /// **See also:** createAlphaMask()
    /// createHeuristicMask()
    create_mask_from_color(color: RgbType, mode: Rute::MaskMode) -> Image,
    /// 
    /// Qt::TransformationMode transformMode) const
    /// **Overloads**
    /// Returns a copy of the image scaled to a rectangle with the given
    /// *width* and *height* according to the given *aspectRatioMode*
    /// and *transformMode.*
    /// 
    /// If either the *width* or the *height* is zero or negative, this
    /// function returns a null image.
    /// 
    /// Qt::TransformationMode transformMode) const
    /// 
    /// Returns a copy of the image scaled to a rectangle defined by the
    /// given *size* according to the given *aspectRatioMode* and *transformMode.*
    /// 
    /// ![qimage-scaling.png](qimage-scaling.png)
    /// 
    /// * If *aspectRatioMode* is Qt::IgnoreAspectRatio, the image is scaled to *size.*
    /// * If *aspectRatioMode* is Qt::KeepAspectRatio, the image is scaled to a rectangle as large as possible inside *size,* preserving the aspect ratio.
    /// * If *aspectRatioMode* is Qt::KeepAspectRatioByExpanding, the image is scaled to a rectangle as small as possible outside *size,* preserving the aspect ratio.
    /// 
    /// If the given *size* is empty, this function returns a null image.
    /// 
    /// **See also:** isNull()
    /// {QImage#Image Transformations}{Image
    /// Transformations}
    /// 
    /// Returns a scaled copy of the image. The returned image is scaled
    /// to the given *width* using the specified transformation *mode.*
    /// 
    /// This function automatically calculates the height of the image so
    /// that its aspect ratio is preserved.
    /// 
    /// If the given *width* is 0 or negative, a null image is returned.
    /// 
    /// **See also:** {QImage#Image Transformations}{Image Transformations}
    /// 
    /// Returns a scaled copy of the image. The returned image is scaled
    /// to the given *height* using the specified transformation *mode.*
    /// 
    /// This function automatically calculates the width of the image so that
    /// the ratio of the image is preserved.
    /// 
    /// If the given *height* is 0 or negative, a null image is returned.
    /// 
    /// **See also:** {QImage#Image Transformations}{Image Transformations}
    scaled(w: i32, h: i32, aspect_mode: Rute::AspectRatioMode, mode: Rute::TransformationMode) -> Image,
    /// 
    /// Qt::TransformationMode transformMode) const
    /// **Overloads**
    /// Returns a copy of the image scaled to a rectangle with the given
    /// *width* and *height* according to the given *aspectRatioMode*
    /// and *transformMode.*
    /// 
    /// If either the *width* or the *height* is zero or negative, this
    /// function returns a null image.
    /// 
    /// Qt::TransformationMode transformMode) const
    /// 
    /// Returns a copy of the image scaled to a rectangle defined by the
    /// given *size* according to the given *aspectRatioMode* and *transformMode.*
    /// 
    /// ![qimage-scaling.png](qimage-scaling.png)
    /// 
    /// * If *aspectRatioMode* is Qt::IgnoreAspectRatio, the image is scaled to *size.*
    /// * If *aspectRatioMode* is Qt::KeepAspectRatio, the image is scaled to a rectangle as large as possible inside *size,* preserving the aspect ratio.
    /// * If *aspectRatioMode* is Qt::KeepAspectRatioByExpanding, the image is scaled to a rectangle as small as possible outside *size,* preserving the aspect ratio.
    /// 
    /// If the given *size* is empty, this function returns a null image.
    /// 
    /// **See also:** isNull()
    /// {QImage#Image Transformations}{Image
    /// Transformations}
    /// 
    /// Returns a scaled copy of the image. The returned image is scaled
    /// to the given *width* using the specified transformation *mode.*
    /// 
    /// This function automatically calculates the height of the image so
    /// that its aspect ratio is preserved.
    /// 
    /// If the given *width* is 0 or negative, a null image is returned.
    /// 
    /// **See also:** {QImage#Image Transformations}{Image Transformations}
    /// 
    /// Returns a scaled copy of the image. The returned image is scaled
    /// to the given *height* using the specified transformation *mode.*
    /// 
    /// This function automatically calculates the width of the image so that
    /// the ratio of the image is preserved.
    /// 
    /// If the given *height* is 0 or negative, a null image is returned.
    /// 
    /// **See also:** {QImage#Image Transformations}{Image Transformations}
    scaled_by_size(s: &SizeType, aspect_mode: Rute::AspectRatioMode, mode: Rute::TransformationMode) -> Image,
    /// 
    /// Returns a scaled copy of the image. The returned image is scaled
    /// to the given *width* using the specified transformation *mode.*
    /// 
    /// This function automatically calculates the height of the image so
    /// that its aspect ratio is preserved.
    /// 
    /// If the given *width* is 0 or negative, a null image is returned.
    /// 
    /// **See also:** {QImage#Image Transformations}{Image Transformations}
    scaled_to_width(w: i32, mode: Rute::TransformationMode) -> Image,
    /// 
    /// Returns a scaled copy of the image. The returned image is scaled
    /// to the given *height* using the specified transformation *mode.*
    /// 
    /// This function automatically calculates the width of the image so that
    /// the ratio of the image is preserved.
    /// 
    /// If the given *height* is 0 or negative, a null image is returned.
    /// 
    /// **See also:** {QImage#Image Transformations}{Image Transformations}
    scaled_to_height(h: i32, mode: Rute::TransformationMode) -> Image,
    /// 
    /// Returns a mirror of the image, mirrored in the horizontal and/or
    /// the vertical direction depending on whether *horizontal* and *vertical* are set to true or false.
    /// 
    /// Note that the original image is not changed.
    /// 
    /// **See also:** {QImage#Image Transformations}{Image Transformations}
    mirrored(horizontally: bool, vertically: bool) -> Image?,
    /// 
    /// Returns a QImage in which the values of the red and blue
    /// components of all pixels have been swapped, effectively converting
    /// an RGB image to an BGR image.
    /// 
    /// The original QImage is not changed.
    /// 
    /// **See also:** {QImage#Image Transformations}{Image Transformations}
    rgb_swapped() -> Image?,
    /// 
    /// Inverts all pixel values in the image.
    /// 
    /// The given invert *mode* only have a meaning when the image's
    /// depth is 32. The default *mode* is InvertRgb, which leaves the
    /// alpha channel unchanged. If the *mode* is InvertRgba, the alpha
    /// bits are also inverted.
    /// 
    /// Inverting an 8-bit image means to replace all pixels using color
    /// index *i* with a pixel using color index 255 minus *i.* The same
    /// is the case for a 1-bit image. Note that the color table is *not*
    /// changed.
    /// 
    /// If the image has a premultiplied alpha channel, the image is first
    /// converted to ARGB32 to be inverted and then converted back.
    /// 
    /// **See also:** {QImage#Image Transformations}{Image Transformations}
    invert_pixels(arg0: Image::InvertMode),
    /// 
    /// Loads an image from the file with the given *fileName.* Returns `true` if
    /// the image was successfully loaded; otherwise invalidates the image
    /// and returns `false.`
    /// 
    /// The loader attempts to read the image using the specified *format,* e.g.,
    /// PNG or JPG. If *format* is not specified (which is the default), it is
    /// auto-detected based on the file's suffix and header. For details, see
    /// {QImageReader::setAutoDetectImageFormat()}{QImageReader}.
    /// 
    /// The file name can either refer to an actual file on disk or to one
    /// of the application's embedded resources. See the
    /// [Resource System](resources.html)
    /// overview for details on how to
    /// embed images and other resource files in the application's
    /// executable.
    /// 
    /// **See also:** {QImage#Reading and Writing Image Files}{Reading and Writing Image Files}
    /// 
    /// **Overloads**
    /// This function reads a QImage from the given *device.* This can,
    /// for example, be used to load an image directly into a QByteArray.
    /// 
    /// Loads an image from the first *len* bytes of the given binary *data.* Returns `true` if the image was successfully loaded; otherwise
    /// invalidates the image and returns `false.`
    /// 
    /// The loader attempts to read the image using the specified *format,* e.g.,
    /// PNG or JPG. If *format* is not specified (which is the default), the
    /// loader probes the file for a header to guess the file format.
    /// 
    /// **See also:** {QImage#Reading and Writing Image Files}{Reading and Writing Image Files}
    /// 
    /// **Overloads**
    /// Loads an image from the given QByteArray *data.*
    [org_name(load)]
    load_by_io_device(device: *IODeviceType, format: *char) -> bool,
    /// 
    /// Loads an image from the file with the given *fileName.* Returns `true` if
    /// the image was successfully loaded; otherwise invalidates the image
    /// and returns `false.`
    /// 
    /// The loader attempts to read the image using the specified *format,* e.g.,
    /// PNG or JPG. If *format* is not specified (which is the default), it is
    /// auto-detected based on the file's suffix and header. For details, see
    /// {QImageReader::setAutoDetectImageFormat()}{QImageReader}.
    /// 
    /// The file name can either refer to an actual file on disk or to one
    /// of the application's embedded resources. See the
    /// [Resource System](resources.html)
    /// overview for details on how to
    /// embed images and other resource files in the application's
    /// executable.
    /// 
    /// **See also:** {QImage#Reading and Writing Image Files}{Reading and Writing Image Files}
    /// 
    /// **Overloads**
    /// This function reads a QImage from the given *device.* This can,
    /// for example, be used to load an image directly into a QByteArray.
    /// 
    /// Loads an image from the first *len* bytes of the given binary *data.* Returns `true` if the image was successfully loaded; otherwise
    /// invalidates the image and returns `false.`
    /// 
    /// The loader attempts to read the image using the specified *format,* e.g.,
    /// PNG or JPG. If *format* is not specified (which is the default), the
    /// loader probes the file for a header to guess the file format.
    /// 
    /// **See also:** {QImage#Reading and Writing Image Files}{Reading and Writing Image Files}
    /// 
    /// **Overloads**
    /// Loads an image from the given QByteArray *data.*
    load(file_name: String, format: *char) -> bool,
    // 
    // Loads an image from the first *len* bytes of the given binary *data.* Returns `true` if the image was successfully loaded; otherwise
    // invalidates the image and returns `false.`
    // 
    // The loader attempts to read the image using the specified *format,* e.g.,
    // PNG or JPG. If *format* is not specified (which is the default), the
    // loader probes the file for a header to guess the file format.
    // 
    // **See also:** {QImage#Reading and Writing Image Files}{Reading and Writing Image Files}
    // 
    // **Overloads**
    // Loads an image from the given QByteArray *data.*
    //load_from_data(buf: *u8, len: i32, format: *char) -> bool,
    /// 
    /// Loads an image from the first *len* bytes of the given binary *data.* Returns `true` if the image was successfully loaded; otherwise
    /// invalidates the image and returns `false.`
    /// 
    /// The loader attempts to read the image using the specified *format,* e.g.,
    /// PNG or JPG. If *format* is not specified (which is the default), the
    /// loader probes the file for a header to guess the file format.
    /// 
    /// **See also:** {QImage#Reading and Writing Image Files}{Reading and Writing Image Files}
    /// 
    /// **Overloads**
    /// Loads an image from the given QByteArray *data.*
    load_from_data(data: &ByteArrayType, aformat: *char) -> bool,
    /// 
    /// Saves the image to the file with the given *fileName,* using the
    /// given image file *format* and *quality* factor. If *format* is
    /// 0, QImage will attempt to guess the format by looking at *fileName's*
    /// suffix.
    /// 
    /// The *quality* factor must be in the range 0 to 100 or -1. Specify
    /// 0 to obtain small compressed files, 100 for large uncompressed
    /// files, and -1 (the default) to use the default settings.
    /// 
    /// Returns `true` if the image was successfully saved; otherwise
    /// returns `false.`
    /// 
    /// **See also:** {QImage#Reading and Writing Image Files}{Reading and Writing
    /// Image Files}
    /// 
    /// **Overloads**
    /// This function writes a QImage to the given *device.*
    /// 
    /// This can, for example, be used to save an image directly into a
    /// QByteArray:
    /// 
    save(file_name: String, format: *char, quality: i32) -> bool,
    // 
    // Saves the image to the file with the given *fileName,* using the
    // given image file *format* and *quality* factor. If *format* is
    // 0, QImage will attempt to guess the format by looking at *fileName's*
    // suffix.
    // 
    // The *quality* factor must be in the range 0 to 100 or -1. Specify
    // 0 to obtain small compressed files, 100 for large uncompressed
    // files, and -1 (the default) to use the default settings.
    // 
    // Returns `true` if the image was successfully saved; otherwise
    // returns `false.`
    // 
    // **See also:** {QImage#Reading and Writing Image Files}{Reading and Writing
    // Image Files}
    // 
    // **Overloads**
    // This function writes a QImage to the given *device.*
    // 
    // This can, for example, be used to save an image directly into a
    // QByteArray:
    // 
    //save(device: *IODeviceType, format: *char, quality: i32) -> bool,
    // 
    // Constructs a QImage from the first *size* bytes of the given
    // binary *data.* The loader attempts to read the image using the
    // specified *format.* If *format* is not specified (which is the default),
    // the loader probes the data for a header to guess the file format.
    // 
    // If *format* is specified, it must be one of the values returned by
    // QImageReader::supportedImageFormats().
    // 
    // If the loading of the image fails, the image returned will be a null image.
    // 
    // **See also:** load()
    // save()
    // {QImage#Reading and Writing Image Files}{Reading and Writing Image Files}
    // 
    // **Overloads**
    // Loads an image from the given QByteArray *data.*
    //[static] from_data(data: *u8, size: i32, format: *char) -> Image,
    // 
    // Constructs a QImage from the first *size* bytes of the given
    // binary *data.* The loader attempts to read the image using the
    // specified *format.* If *format* is not specified (which is the default),
    // the loader probes the data for a header to guess the file format.
    // 
    // If *format* is specified, it must be one of the values returned by
    // QImageReader::supportedImageFormats().
    // 
    // If the loading of the image fails, the image returned will be a null image.
    // 
    // **See also:** load()
    // save()
    // {QImage#Reading and Writing Image Files}{Reading and Writing Image Files}
    // 
    // **Overloads**
    // Loads an image from the given QByteArray *data.*
    //[static] from_data(data: &ByteArrayType, format: *char) -> Image,
    /// 
    /// Returns a number that identifies the contents of this QImage
    /// object. Distinct QImage objects can only have the same key if they
    /// refer to the same contents.
    /// 
    /// The key will change when the image is altered.
    cache_key() -> i64,
    [event] paint_engine() -> PaintEngine?,
    /// 
    /// Returns the number of pixels that fit horizontally in a physical
    /// meter. Together with dotsPerMeterY(), this number defines the
    /// intended scale and aspect ratio of the image.
    /// 
    /// **See also:** setDotsPerMeterX()
    /// {QImage#Image Information}{Image
    /// Information}
    dots_per_meter_x() -> i32,
    /// 
    /// Returns the number of pixels that fit vertically in a physical
    /// meter. Together with dotsPerMeterX(), this number defines the
    /// intended scale and aspect ratio of the image.
    /// 
    /// **See also:** setDotsPerMeterY()
    /// {QImage#Image Information}{Image
    /// Information}
    dots_per_meter_y() -> i32,
    /// 
    /// Sets the number of pixels that fit horizontally in a physical
    /// meter, to *x.*
    /// 
    /// Together with dotsPerMeterY(), this number defines the intended
    /// scale and aspect ratio of the image, and determines the scale
    /// at which QPainter will draw graphics on the image. It does not
    /// change the scale or aspect ratio of the image when it is rendered
    /// on other paint devices.
    /// 
    /// **See also:** dotsPerMeterX()
    /// {QImage#Image Information}{Image Information}
    set_dots_per_meter_x(arg0: i32),
    /// 
    /// Sets the number of pixels that fit vertically in a physical meter,
    /// to *y.*
    /// 
    /// Together with dotsPerMeterX(), this number defines the intended
    /// scale and aspect ratio of the image, and determines the scale
    /// at which QPainter will draw graphics on the image. It does not
    /// change the scale or aspect ratio of the image when it is rendered
    /// on other paint devices.
    /// 
    /// **See also:** dotsPerMeterY()
    /// {QImage#Image Information}{Image Information}
    set_dots_per_meter_y(arg0: i32),
    /// 
    /// Returns the number of pixels by which the image is intended to be
    /// offset by when positioning relative to other images.
    /// 
    /// **See also:** setOffset()
    /// {QImage#Image Information}{Image Information}
    offset() -> Point,
    /// 
    /// Sets the number of pixels by which the image is intended to be
    /// offset by when positioning relative to other images, to *offset.*
    /// 
    /// **See also:** offset()
    /// {QImage#Image Information}{Image Information}
    set_offset(arg0: &PointType),
    /// 
    /// Returns the text keys for this image.
    /// 
    /// You can use these keys with text() to list the image text for a
    /// certain key.
    /// 
    /// **See also:** text()
    text_keys() -> [String],
    /// 
    /// Returns the text keys for this image.
    /// 
    /// You can use these keys with text() to list the image text for a
    /// certain key.
    /// 
    /// **See also:** text()
    /// 
    /// Returns the image text associated with the given *key.* If the
    /// specified *key* is an empty string, the whole image text is
    /// returned, with each key-text pair separated by a newline.
    /// 
    /// **See also:** setText()
    /// textKeys()
    /// 
    /// Returns the text recorded for the given *key* in the given *language,* or in a default language if *language* is 0.
    /// 
    /// Use text() instead.
    /// 
    /// The language the text is recorded in is no longer relevant since
    /// the text is always set using QString and UTF-8 representation.
    /// 
    /// **Overloads**
    /// Returns the text recorded for the given *keywordAndLanguage.*
    /// 
    /// Use text() instead.
    /// 
    /// The language the text is recorded in is no longer relevant since
    /// the text is always set using QString and UTF-8 representation.
    /// 
    /// Returns the language identifiers for which some texts are recorded.
    /// Note that if you want to iterate over the list, you should iterate over a copy.
    /// 
    /// The language the text is recorded in is no longer relevant since the text is
    /// always set using QString and UTF-8 representation.
    /// 
    /// **See also:** textKeys()
    /// 
    /// Returns a list of QImageTextKeyLang objects that enumerate all the texts
    /// key/language pairs set for this image.
    /// 
    /// The language the text is recorded in is no longer relevant since the text
    /// is always set using QString and UTF-8 representation.
    /// 
    /// **See also:** textKeys()
    text(key: String) -> String,
    /// 
    /// Sets the image text to the given *text* and associate it with the
    /// given *key.*
    /// 
    /// If you just want to store a single text block (i.e., a
    /// or just a description), you can either pass an empty key, or use a
    /// generic key like .
    /// 
    /// The image text is embedded into the image data when you
    /// call save() or QImageWriter::write().
    /// 
    /// Not all image formats support embedded text. You can find out
    /// if a specific image or format supports embedding text
    /// by using QImageWriter::supportsOption(). We give an example:
    /// 
    /// You can use QImageWriter::supportedImageFormats() to find out
    /// which image formats are available to you.
    /// 
    /// **See also:** text()
    /// textKeys()
    /// 
    /// Sets the image text to the given *text* and associate it with the
    /// given *key.* The text is recorded in the specified *language,*
    /// or in a default language if *language* is 0.
    /// 
    /// Use setText() instead.
    /// 
    /// The language the text is recorded in is no longer relevant since
    /// the text is always set using QString and UTF-8 representation.
    /// 
    set_text(key: String, value: String),
    /// 
    /// Returns the QImage::Format as a QPixelFormat
    pixel_format() -> PixelFormat,
    /// 
    /// Converts *format* into a QPixelFormat
    [static] to_pixel_format(format: Image::Format) -> PixelFormat,
    /// 
    /// Converts *format* into a QImage::Format
    [static] to_image_format(format: PixelFormatType) -> Image::Format,
    mirrored_helper(horizontal: bool, vertical: bool) -> Image,
    rgb_swapped_helper() -> Image,
    mirrored_inplace(horizontal: bool, vertical: bool),
    rgb_swapped_inplace(),
    convert_to_format_helper(format: Image::Format, flags: Rute::ImageConversionFlags) -> Image,
    convert_to_format_inplace(format: Image::Format, flags: Rute::ImageConversionFlags) -> bool,
    /// 
    /// Returns a smoothly scaled copy of the image. The returned image has a size
    /// of width *w* by height *h* pixels.
    smooth_scaled(w: i32, h: i32) -> Image,
}

// vim: syntax=rust expandtab ts=4 sw=4
