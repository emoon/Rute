///
/// A QPolygon object is a QVector<QPoint>. The easiest way to add
/// points to a QPolygon is to use QVector's streaming operator, as
/// illustrated below:
///
/// In addition to the functions provided by QVector, QPolygon
/// provides some point-specific functions.
///
/// Each point in a polygon can be retrieved by passing its index to
/// the point() function. To populate the polygon, QPolygon provides
/// the setPoint() function to set the point at a given index, the
/// setPoints() function to set all the points in the polygon
/// (resizing it to the given number of points), and the putPoints()
/// function which copies a number of given points into the polygon
/// from a specified index (resizing the polygon if necessary).
///
/// QPolygon provides the boundingRect() and translate() functions for
/// geometry functions. Use the QMatrix::map() function for more
/// general transformations of QPolygons.
///
/// The QPolygon class is [implicitly
/// shared](Implicit%20Data%20Sharing)
///
///
/// **See also:** [`Vector`]
/// [`PolygonF`]
/// [`Line`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Polygon : Point {
    ///
    /// Swaps polygon *other* with this polygon. This operation is very
    /// fast and never fails.
    swap(other: &PolygonType),
    ///
    /// Returns the bounding rectangle of the polygon, or QRect(0, 0, 0,
    /// 0) if the polygon is empty.
    ///
    /// **See also:** [`Vector::is_empty`]
    bounding_rect() -> Rect,
    //
    // Extracts the coordinates of the point at the given *index* to
    // * *x* and * *y* (if they are valid pointers).
    //
    // **See also:** [`set_point()`]
    //
    // **Overloads**
    // Returns the point at the given *index.*
    //point(i: i32, x: *i32, y: *i32),
    ///
    /// Extracts the coordinates of the point at the given *index* to
    /// * *x* and * *y* (if they are valid pointers).
    ///
    /// **See also:** [`set_point()`]
    ///
    /// **Overloads**
    /// Returns the point at the given *index.*
    [org_name(point)]
    point_2(i: i32) -> Point,
    ///
    /// **Overloads**
    /// Sets the point at the given *index* to the given *point.*
    ///
    /// Sets the point at the given *index* to the point specified by
    /// ( *x* , *y* ).
    ///
    /// **See also:** [`point()`]
    /// [`put_points()`]
    /// [`set_points()`]
    /// */
    ///
    /// /*!
    /// Resizes the polygon to *nPoints* and populates it with the given
    /// *points.*
    ///
    /// The example code creates a polygon with two points (10, 20) and
    /// (30, 40):
    ///
    /// **See also:** [`set_point()`]
    /// [`put_points()`]
    ///
    /// **Overloads**
    /// Resizes the polygon to *nPoints* and populates it with the points
    /// specified by the variable argument list. The points are given as a
    /// sequence of integers, starting with *firstx* then *firsty,* and
    /// so on.
    ///
    /// The example code creates a polygon with two points (10, 20) and
    /// (30, 40):
    ///
    set_point(index: i32, x: i32, y: i32),
    ///
    /// **Overloads**
    /// Sets the point at the given *index* to the given *point.*
    ///
    /// Sets the point at the given *index* to the point specified by
    /// ( *x* , *y* ).
    ///
    /// **See also:** [`point()`]
    /// [`put_points()`]
    /// [`set_points()`]
    /// */
    ///
    /// /*!
    /// Resizes the polygon to *nPoints* and populates it with the given
    /// *points.*
    ///
    /// The example code creates a polygon with two points (10, 20) and
    /// (30, 40):
    ///
    /// **See also:** [`set_point()`]
    /// [`put_points()`]
    ///
    /// **Overloads**
    /// Resizes the polygon to *nPoints* and populates it with the points
    /// specified by the variable argument list. The points are given as a
    /// sequence of integers, starting with *firstx* then *firsty,* and
    /// so on.
    ///
    /// The example code creates a polygon with two points (10, 20) and
    /// (30, 40):
    ///
    [org_name(setPoint)]
    set_point_2(index: i32, p: &PointType),
    //
    // **Overloads**
    // Resizes the polygon to *nPoints* and populates it with the points
    // specified by the variable argument list. The points are given as a
    // sequence of integers, starting with *firstx* then *firsty,* and
    // so on.
    //
    // The example code creates a polygon with two points (10, 20) and
    // (30, 40):
    //
    //set_points(n_points: i32, points: *i32),
    ///
    /// **Overloads**
    /// Resizes the polygon to *nPoints* and populates it with the points
    /// specified by the variable argument list. The points are given as a
    /// sequence of integers, starting with *firstx* then *firsty,* and
    /// so on.
    ///
    /// The example code creates a polygon with two points (10, 20) and
    /// (30, 40):
    ///
    [org_name(setPoints)]
    set_points_2(n_points: i32, firstx: i32, firsty: i32),
    //
    // Copies *nPoints* points from the variable argument list into this
    // polygon from the given *index.*
    //
    // The points are given as a sequence of integers, starting with *firstx* then *firsty,* and so on. The polygon is resized if
    // `index+nPoints` exceeds its current size.
    //
    // The example code creates a polygon with three points (4,5), (6,7)
    // and (8,9), by expanding the polygon from 1 to 3 points:
    //
    // The following code has the same result, but here the putPoints()
    // function overwrites rather than extends:
    //
    // **See also:** [`set_points()`]
    //
    // **Overloads**
    // Copies *nPoints* points from the given *fromIndex* ( 0 by
    // default) in *fromPolygon* into this polygon, starting at the
    // specified *index.* For example:
    //
    //put_points(index: i32, n_points: i32, points: *i32),
    ///
    /// Copies *nPoints* points from the variable argument list into this
    /// polygon from the given *index.*
    ///
    /// The points are given as a sequence of integers, starting with *firstx* then *firsty,* and so on. The polygon is resized if
    /// `index+nPoints` exceeds its current size.
    ///
    /// The example code creates a polygon with three points (4,5), (6,7)
    /// and (8,9), by expanding the polygon from 1 to 3 points:
    ///
    /// The following code has the same result, but here the putPoints()
    /// function overwrites rather than extends:
    ///
    /// **See also:** [`set_points()`]
    ///
    /// **Overloads**
    /// Copies *nPoints* points from the given *fromIndex* ( 0 by
    /// default) in *fromPolygon* into this polygon, starting at the
    /// specified *index.* For example:
    ///
    [org_name(putPoints)]
    put_points_2(index: i32, n_points: i32, firstx: i32, firsty: i32),
    ///
    /// Copies *nPoints* points from the variable argument list into this
    /// polygon from the given *index.*
    ///
    /// The points are given as a sequence of integers, starting with *firstx* then *firsty,* and so on. The polygon is resized if
    /// `index+nPoints` exceeds its current size.
    ///
    /// The example code creates a polygon with three points (4,5), (6,7)
    /// and (8,9), by expanding the polygon from 1 to 3 points:
    ///
    /// The following code has the same result, but here the putPoints()
    /// function overwrites rather than extends:
    ///
    /// **See also:** [`set_points()`]
    ///
    /// **Overloads**
    /// Copies *nPoints* points from the given *fromIndex* ( 0 by
    /// default) in *fromPolygon* into this polygon, starting at the
    /// specified *index.* For example:
    ///
    [org_name(putPoints)]
    put_points_3(index: i32, n_points: i32, from: &PolygonType, from_index: i32),
    ///
    /// Returns `true` if the given *point* is inside the polygon according to
    /// the specified *fillRule;* otherwise returns `false.`
    contains_point(pt: &PointType, fill_rule: Rute::FillRule) -> bool,
    ///
    /// Returns a polygon which is the union of this polygon and *r.*
    ///
    /// Set operations on polygons, will treat the polygons as areas, and
    /// implicitly close the polygon.
    ///
    /// **See also:** [`intersected()`]
    /// [`subtracted()`]
    united(r: &PolygonType) -> Polygon,
    ///
    /// Returns a polygon which is the intersection of this polygon and *r.*
    ///
    /// Set operations on polygons will treat the polygons as
    /// areas. Non-closed polygons will be treated as implicitly closed.
    ///
    /// **See also:** [`intersects()`]
    intersected(r: &PolygonType) -> Polygon,
    ///
    /// Returns `true` if the current polygon intersects at any point the given polygon *p.*
    /// Also returns `true` if the current polygon contains or is contained by any part of *p.*
    ///
    /// Set operations on polygons will treat the polygons as
    /// areas. Non-closed polygons will be treated as implicitly closed.
    ///
    /// **See also:** [`intersected()`]
    intersects(r: &PolygonType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
