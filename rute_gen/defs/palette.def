///
/// A palette consists of three color groups: *Active,* *Disabled,*
/// and *Inactive.* All widgets in Qt contain a palette and
/// use their palette to draw themselves. This makes the user
/// interface easily configurable and easier to keep consistent.
///
/// If you create a new widget we strongly recommend that you use the
/// colors in the palette rather than hard-coding specific colors.
///
/// The color groups:
/// * The Active group is used for the window that has keyboard focus.
/// * The Inactive group is used for other windows.
/// * The Disabled group is used for widgets (not windows) that are disabled for some reason.
///
/// Both active and inactive windows can contain disabled widgets.
/// (Disabled widgets are often called *inaccessible* or *grayed
/// out* .)
///
/// In most styles, Active and Inactive look the same.
///
/// Colors and brushes can be set for particular roles in any of a palette's
/// color groups with setColor() and setBrush(). A color group contains a
/// group of colors used by widgets for drawing themselves. We recommend that
/// widgets use color group roles from the palette such as and
/// rather than literal colors like or . The color
/// roles are enumerated and defined in the [ColorRole](ColorRole)
/// documentation.
///
/// We strongly recommend that you use the default palette of the
/// current style (returned by QGuiApplication::palette()) and
/// modify that as necessary. This is done by Qt's widgets when they
/// are drawn.
///
/// To modify a color group you call the functions
/// setColor() and setBrush(), depending on whether you want a pure
/// color or a pixmap pattern.
///
/// There are also corresponding color() and brush() getters, and a
/// commonly used convenience function to get the ColorRole for the current ColorGroup:
/// window(), windowText(), base(), etc.
///
/// You can copy a palette using the copy constructor and test to see
/// if two palettes are *identical* using isCopyOf().
///
/// QPalette is optimized by the use of [implicit sharing](implicit%20sharing)
///
/// so it is very efficient to pass QPalette objects as arguments.
///
/// **Warning**: Some styles do not use the palette for all drawing, for
/// instance, if they make use of native theme engines. This is the
/// case for both the Windows Vista and the MacOS
/// styles.
///
/// **See also:** [`Application::set_palette`]
/// [`Widget::set_palette`]
/// [`Color`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Palette {
    ///
    /// Swaps this palette instance with *other.* This function is very
    /// fast and never fails.
    swap(other: &PaletteType),
    ///
    /// Returns the palette's current color group.
    current_color_group() -> Palette::ColorGroup,
    ///
    /// Set the palette's current color group to *cg.*
    set_current_color_group(cg: Palette::ColorGroup),
    ///
    /// **Overloads**
    /// Returns the color that has been set for the given color *role* in
    /// the current ColorGroup.
    ///
    /// **See also:** [`brush()`]
    /// ColorRole
    ///
    /// Returns the color in the specified color *group,* used for the
    /// given color *role.*
    ///
    /// **See also:** [`brush()`]
    /// [`set_color()`]
    /// ColorRole
    color(cg: Palette::ColorGroup, cr: Palette::ColorRole) -> Color?,
    ///
    /// **Overloads**
    /// Returns the brush that has been set for the given color *role* in
    /// the current ColorGroup.
    ///
    /// **See also:** [`color()`]
    /// [`set_brush()`]
    /// ColorRole
    ///
    /// Returns the brush in the specified color *group,* used for the
    /// given color *role.*
    ///
    /// **See also:** [`color()`]
    /// [`set_brush()`]
    /// ColorRole
    brush(cg: Palette::ColorGroup, cr: Palette::ColorRole) -> Brush?,
    ///
    /// **Overloads**
    /// Sets the color used for the given color *role,* in all color
    /// groups, to the specified solid *color.*
    ///
    /// **See also:** [`brush()`]
    /// [`set_color()`]
    /// ColorRole
    ///
    /// Sets the color in the specified color *group,* used for the given
    /// color *role,* to the specified solid *color.*
    ///
    /// **See also:** [`set_brush()`]
    /// [`color()`]
    /// ColorRole
    ///
    /// Sets a the group at *cg.* You can pass either brushes, pixmaps or
    /// plain colors for *windowText,* *button,* *light,* *dark,* *mid,* *text,* *bright_text,* *base* and *window.*
    ///
    /// **See also:** [`Brush`]
    set_color(cg: Palette::ColorGroup, cr: Palette::ColorRole, color: &ColorType),
    ///
    /// **Overloads**
    /// Sets the color used for the given color *role,* in all color
    /// groups, to the specified solid *color.*
    ///
    /// **See also:** [`brush()`]
    /// [`set_color()`]
    /// ColorRole
    ///
    /// Sets the color in the specified color *group,* used for the given
    /// color *role,* to the specified solid *color.*
    ///
    /// **See also:** [`set_brush()`]
    /// [`color()`]
    /// ColorRole
    ///
    /// Sets a the group at *cg.* You can pass either brushes, pixmaps or
    /// plain colors for *windowText,* *button,* *light,* *dark,* *mid,* *text,* *bright_text,* *base* and *window.*
    ///
    /// **See also:** [`Brush`]
    [org_name(setColor)]
    set_color_2(cr: Palette::ColorRole, color: &ColorType),
    ///
    /// Sets the brush for the given color *role* to the specified *brush* for all groups in the palette.
    ///
    /// **See also:** [`brush()`]
    /// [`set_color()`]
    /// ColorRole
    ///
    /// **Overloads**
    /// Sets the brush in the specified color *group,* used for the given
    /// color *role,* to *brush.*
    ///
    /// **See also:** [`brush()`]
    /// [`set_color()`]
    /// ColorRole
    set_brush(cr: Palette::ColorRole, brush: &BrushType),
    ///
    /// Returns `true` if the ColorGroup *cg* and ColorRole *cr* has been
    /// set previously on this palette; otherwise returns `false.`
    ///
    /// **See also:** [`set_brush()`]
    is_brush_set(cg: Palette::ColorGroup, cr: Palette::ColorRole) -> bool,
    ///
    /// Sets the brush for the given color *role* to the specified *brush* for all groups in the palette.
    ///
    /// **See also:** [`brush()`]
    /// [`set_color()`]
    /// ColorRole
    ///
    /// **Overloads**
    /// Sets the brush in the specified color *group,* used for the given
    /// color *role,* to *brush.*
    ///
    /// **See also:** [`brush()`]
    /// [`set_color()`]
    /// ColorRole
    [org_name(setBrush)]
    set_brush_2(cg: Palette::ColorGroup, cr: Palette::ColorRole, brush: &BrushType),
    ///
    /// Sets a the group at *cg.* You can pass either brushes, pixmaps or
    /// plain colors for *windowText,* *button,* *light,* *dark,* *mid,* *text,* *bright_text,* *base* and *window.*
    ///
    /// **See also:** [`Brush`]
    set_color_group(cr: Palette::ColorGroup, window_text: &BrushType, button: &BrushType, light: &BrushType, dark: &BrushType, mid: &BrushType, text: &BrushType, bright_text: &BrushType, base: &BrushType, window: &BrushType),
    ///
    /// Returns `true` (usually quickly) if color group *cg1* is equal to
    /// *cg2;* otherwise returns `false.`
    is_equal(cr1: Palette::ColorGroup, cr2: Palette::ColorGroup) -> bool,
    ///
    /// **Overloads**
    /// Returns the color that has been set for the given color *role* in
    /// the current ColorGroup.
    ///
    /// **See also:** [`brush()`]
    /// ColorRole
    ///
    /// Returns the color in the specified color *group,* used for the
    /// given color *role.*
    ///
    /// **See also:** [`brush()`]
    /// [`set_color()`]
    /// ColorRole
    [org_name(color)]
    color_2(cr: Palette::ColorRole) -> Color?,
    ///
    /// **Overloads**
    /// Returns the brush that has been set for the given color *role* in
    /// the current ColorGroup.
    ///
    /// **See also:** [`color()`]
    /// [`set_brush()`]
    /// ColorRole
    ///
    /// Returns the brush in the specified color *group,* used for the
    /// given color *role.*
    ///
    /// **See also:** [`color()`]
    /// [`set_brush()`]
    /// ColorRole
    [org_name(brush)]
    brush_2(cr: Palette::ColorRole) -> Brush?,
    ///
    /// Use windowText() instead.
    foreground() -> Brush?,
    ///
    /// Returns the window text (general foreground) brush of the
    /// current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    window_text() -> Brush?,
    ///
    /// Returns the button brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    ///
    /// Returns the button text foreground brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    button() -> Brush?,
    ///
    /// Returns the light brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    light() -> Brush?,
    ///
    /// Returns the dark brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    dark() -> Brush?,
    ///
    /// Returns the midlight brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    ///
    /// Returns the mid brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    mid() -> Brush?,
    ///
    /// Returns the text foreground brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    text() -> Brush?,
    ///
    /// Returns the base brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    base() -> Brush?,
    ///
    /// Returns the alternate base brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    alternate_base() -> Brush?,
    ///
    /// Returns the tool tip base brush of the current color group. This brush is
    /// used by QToolTip and QWhatsThis.
    ///
    /// **Note**: Tool tips use the Inactive color group of QPalette, because tool
    /// tips are not active windows.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    tool_tip_base() -> Brush?,
    ///
    /// Returns the tool tip text brush of the current color group. This brush is
    /// used by QToolTip and QWhatsThis.
    ///
    /// **Note**: Tool tips use the Inactive color group of QPalette, because tool
    /// tips are not active windows.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    tool_tip_text() -> Brush?,
    ///
    /// Use window() instead.
    background() -> Brush?,
    ///
    /// Returns the window text (general foreground) brush of the
    /// current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    ///
    /// Returns the window (general background) brush of the current
    /// color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    window() -> Brush?,
    ///
    /// Returns the midlight brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    midlight() -> Brush?,
    ///
    /// Returns the bright text foreground brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    bright_text() -> Brush?,
    ///
    /// Returns the button text foreground brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    button_text() -> Brush?,
    ///
    /// Returns the shadow brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    shadow() -> Brush?,
    ///
    /// Returns the highlight brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    ///
    /// Returns the highlighted text brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    highlight() -> Brush?,
    ///
    /// Returns the highlighted text brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    highlighted_text() -> Brush?,
    ///
    /// Returns the unvisited link text brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    ///
    /// Returns the visited link text brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    link() -> Brush?,
    ///
    /// Returns the visited link text brush of the current color group.
    ///
    /// **See also:** ColorRole
    /// [`brush()`]
    link_visited() -> Brush?,
    ///
    /// Returns `true` if this palette and *p* are copies of each other,
    /// i.e. one of them was created as a copy of the other and neither
    /// was subsequently modified; otherwise returns `false.` This is much
    /// stricter than equality.
    ///
    /// **See also:** [`operator()`]
    /// [`operator()`]
    is_copy_of(p: &PaletteType) -> bool,
    ///
    /// Returns a number that identifies the contents of this QPalette
    /// object. Distinct QPalette objects can have the same key if
    /// they refer to the same contents.
    ///
    /// The cacheKey() will change when the palette is altered.
    cache_key() -> i64,
    ///
    /// Returns a new QPalette that has attributes copied from *other.*
    resolve(arg0: &PaletteType) -> Palette,
    ///
    /// Returns a new QPalette that has attributes copied from *other.*
    [org_name(resolve)]
    resolve_2() -> u32,
    ///
    /// Returns a new QPalette that has attributes copied from *other.*
    [org_name(resolve)]
    resolve_3(mask: u32),
}

[org_name(QPalette)]
enum ColorGroup {
    ///
    Active = 0,
    ///
    Disabled = 1,
    ///
    Inactive = 2,
    NColorGroups = 3,
    Current = 4,
    All = 5,
    /// synonym for Active
    Normal = 0,
}

[org_name(QPalette)]
enum ColorRole {
    /// A general foreground color.
    WindowText = 0,
    /// The general button background color. This background can be different from `Window` as some styles require a different background color for buttons.
    Button = 1,
    /// Lighter than `Button` color.
    Light = 2,
    /// Between `Button` and `Light.`
    Midlight = 3,
    /// Darker than `Button.`
    Dark = 4,
    /// Between `Button` and `Dark.`
    Mid = 5,
    /// The foreground color used with `Base.` This is usually the same as the `WindowText,` in which case it must provide good contrast with `Window` and `Base.`
    Text = 6,
    /// A text color that is very different from `WindowText,` and contrasts well with e.g. `Dark.` Typically used for text that needs to be drawn where `Text` or `WindowText` would give poor contrast, such as on pressed push buttons. Note that text colors can be used for things other than just words; text colors are *usually* used for text, but it's quite common to use the text color roles for lines, icons, etc. There are some color roles used mostly for 3D bevel and shadow effects. All of these are normally derived from `Window,` and used in ways that depend on that relationship. For example, buttons depend on it to make the bevels look attractive, and Motif scroll bars depend on `Mid` to be slightly different from `Window.`
    BrightText = 7,
    /// A foreground color used with the `Button` color.
    ButtonText = 8,
    /// Used mostly as the background color for text entry widgets, but can also be used for other painting - such as the background of combobox drop down lists and toolbar handles. It is usually white or another light color.
    Base = 9,
    /// A general background color.
    Window = 10,
    /// A very dark color. By default, the shadow color is Qt::black. Selected (marked) items have two roles:
    Shadow = 11,
    /// A color to indicate a selected item or the current item. By default, the highlight color is Qt::darkBlue.
    Highlight = 12,
    /// A text color that contrasts with `Highlight.` By default, the highlighted text color is Qt::white. There are two color roles related to hyperlinks:
    HighlightedText = 13,
    /// A text color used for unvisited hyperlinks. By default, the link color is Qt::blue.
    Link = 14,
    /// A text color used for already visited hyperlinks. By default, the linkvisited color is Qt::magenta. Note that we do not use the `Link` and `LinkVisited` roles when rendering rich text in Qt, and that we recommend that you use CSS and the QTextDocument::setDefaultStyleSheet() function to alter the appearance of links. For example:
    LinkVisited = 15,
    /// Used as the alternate background color in views with alternating row colors (see QAbstractItemView::setAlternatingRowColors()).
    AlternateBase = 16,
    /// No role; this special role is often used to indicate that a role has not been assigned.
    NoRole = 17,
    /// Used as the background color for QToolTip and QWhatsThis. Tool tips use the Inactive color group of QPalette, because tool tips are not active windows.
    ToolTipBase = 18,
    /// Used as the foreground color for QToolTip and QWhatsThis. Tool tips use the Inactive color group of QPalette, because tool tips are not active windows.
    ToolTipText = 19,
    NColorRoles = 20,
    /// This value is obsolete. Use WindowText instead.
    Foreground = 0,
    /// This value is obsolete. Use Window instead.
    Background = 10,
}

// vim: syntax=rust expandtab ts=4 sw=4

