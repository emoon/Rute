/// 
/// A QLine describes a finite length line (or a line segment) on a
/// two-dimensional surface. The start and end points of the line are
/// specified using integer point accuracy for coordinates. Use the
/// QLineF constructor to retrieve a floating point copy.
/// 
/// * ![qline-point.png](qline-point.png)
/// 
/// * ![qline-coordinates.png](qline-coordinates.png)
/// 
/// The positions of the line's start and end points can be retrieved
/// using the p1(), x1(), y1(), p2(), x2(), and y2() functions. The
/// dx() and dy() functions return the horizontal and vertical
/// components of the line. Use isNull() to determine whether the
/// QLine represents a valid line or a null line.
/// 
/// Finally, the line can be translated a given offset using the
/// translate() function.
/// 
/// **See also:** [`LineF`]
/// [`Polygon`]
/// [`Rect`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Line {
    /// 
    /// Returns `true` if the line is not set up with valid start and end point;
    /// otherwise returns `false.`
    is_null() -> bool,
    /// 
    /// Returns the line's start point.
    /// 
    /// **See also:** [`x1()`]
    /// [`y1()`]
    /// [`p2()`]
    p1() -> Point,
    /// 
    /// Returns the line's end point.
    /// 
    /// **See also:** [`x2()`]
    /// [`y2()`]
    /// [`p1()`]
    p2() -> Point,
    /// 
    /// Returns the x-coordinate of the line's start point.
    /// 
    /// **See also:** [`p1()`]
    x1() -> i32,
    /// 
    /// Returns the y-coordinate of the line's start point.
    /// 
    /// **See also:** [`p1()`]
    y1() -> i32,
    /// 
    /// Returns the x-coordinate of the line's end point.
    /// 
    /// **See also:** [`p2()`]
    x2() -> i32,
    /// 
    /// Returns the y-coordinate of the line's end point.
    /// 
    /// **See also:** [`p2()`]
    y2() -> i32,
    /// 
    /// Returns the horizontal component of the line's vector.
    /// 
    /// **See also:** [`dy()`]
    dx() -> i32,
    /// 
    /// Returns the vertical component of the line's vector.
    /// 
    /// **See also:** [`dx()`]
    dy() -> i32,
    /// 
    /// Returns the center point of this line. This is equivalent to
    /// (p1() + p2()) / 2, except it will never overflow.
    center() -> Point,
    /// 
    /// Sets the starting point of this line to *p1.*
    /// 
    /// **See also:** [`set_p2()`]
    /// [`p1()`]
    set_p1(p1: &PointType),
    /// 
    /// Sets the end point of this line to *p2.*
    /// 
    /// **See also:** [`set_p1()`]
    /// [`p2()`]
    set_p2(p2: &PointType),
    /// 
    /// Sets the start point of this line to *p1* and the end point of this line to *p2.*
    /// 
    /// **See also:** [`set_p1()`]
    /// [`set_p2()`]
    /// [`p1()`]
    /// [`p2()`]
    set_points(p1: &PointType, p2: &PointType),
    /// 
    /// Sets this line to the start in *x1,* *y1* and end in *x2,* *y2.*
    /// 
    /// **See also:** [`set_p1()`]
    /// [`set_p2()`]
    /// [`p1()`]
    /// [`p2()`]
    set_line(x1: i32, y1: i32, x2: i32, y2: i32),
}

// vim: syntax=rust expandtab ts=4 sw=4
