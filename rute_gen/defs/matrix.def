///
/// A matrix specifies how to translate, scale, shear or rotate the
/// coordinate system, and is typically used when rendering graphics.
/// QMatrix, in contrast to QTransform, does not allow perspective
/// transformations. QTransform is the recommended transformation
/// class in Qt.
///
/// A QMatrix object can be built using the setMatrix(), scale(),
/// rotate(), translate() and shear() functions. Alternatively, it
/// can be built by applying [basic matrix operations](QMatrix%23Basic%20Matrix%0A%20%20%20%20Operations)
/// . The matrix can also be
/// defined when constructed, and it can be reset to the identity
/// matrix (the default) using the reset() function.
///
/// The QMatrix class supports mapping of graphic primitives: A given
/// point, line, polygon, region, or painter path can be mapped to the
/// coordinate system defined by *this* matrix using the map()
/// function. In case of a rectangle, its coordinates can be
/// transformed using the mapRect() function. A rectangle can also be
/// transformed into a *polygon* (mapped to the coordinate system
/// defined by *this* matrix), using the mapToPolygon() function.
///
/// QMatrix provides the isIdentity() function which returns `true` if
/// the matrix is the identity matrix, and the isInvertible() function
/// which returns `true` if the matrix is non-singular (i.e. AB = BA =
/// I). The inverted() function returns an inverted copy of *this*
/// matrix if it is invertible (otherwise it returns the identity
/// matrix). In addition, QMatrix provides the determinant() function
/// returning the matrix's determinant.
///
/// Finally, the QMatrix class supports matrix multiplication, and
/// objects of the class can be streamed as well as compared.
///
/// # Rendering Graphics
///
/// When rendering graphics, the matrix defines the transformations
/// but the actual transformation is performed by the drawing routines
/// in QPainter.
///
/// By default, QPainter operates on the associated device's own
/// coordinate system. The standard coordinate system of a
/// QPaintDevice has its origin located at the top-left position. The
/// *x* values increase to the right; *y* values increase
/// downward. For a complete description, see the [coordinate system](Coordinate%0A%20%20%20%20System)
/// documentation.
///
/// QPainter has functions to translate, scale, shear and rotate the
/// coordinate system without using a QMatrix. For example:
///
/// * ![qmatrix-simpletransformation.png](qmatrix-simpletransformation.png)
///
///
///
/// Although these functions are very convenient, it can be more
/// efficient to build a QMatrix and call QPainter::setMatrix() if you
/// want to perform more than a single transform operation. For
/// example:
///
/// * ![qmatrix-combinedtransformation.png](qmatrix-combinedtransformation.png)
///
///
///
/// # Basic Matrix Operations
///
/// ![qmatrix-representation.png](qmatrix-representation.png)
///
/// A QMatrix object contains a 3 x 3 matrix. The `dx` and `dy`
/// elements specify horizontal and vertical translation. The `m11`
/// and `m22` elements specify horizontal and vertical scaling. And
/// finally, the `m21` and `m12` elements specify horizontal and
/// vertical *shearing.*
///
/// QMatrix transforms a point in the plane to another point using the
/// following formulas:
///
/// The point *(x,* y) is the original point, and *(x',* y') is the
/// transformed point. *(x',* y') can be transformed back to *(x,*
/// y) by performing the same operation on the inverted() matrix.
///
/// The various matrix elements can be set when constructing the
/// matrix, or by using the setMatrix() function later on. They can also
/// be manipulated using the translate(), rotate(), scale() and
/// shear() convenience functions, The currently set values can be
/// retrieved using the m11(), m12(), m21(), m22(), dx() and dy()
/// functions.
///
/// Translation is the simplest transformation. Setting `dx` and `dy` will move the coordinate system `dx` units along the X axis
/// and `dy` units along the Y axis. Scaling can be done by setting
/// `m11` and `m22.` For example, setting `m11` to 2 and `m22` to
/// 1.5 will double the height and increase the width by 50%. The
/// identity matrix has `m11` and `m22` set to 1 (all others are set
/// to 0) mapping a point to itself. Shearing is controlled by `m12`
/// and `m21.` Setting these elements to values different from zero
/// will twist the coordinate system. Rotation is achieved by
/// carefully setting both the shearing factors and the scaling
/// factors.
///
/// Here's the combined transformations example using basic matrix
/// operations:
///
/// * ![qmatrix-combinedtransformation.png](qmatrix-combinedtransformation.png)
///
///
///
/// **See also:** QPainter
/// QTransform
/// {Coordinate System}
/// {painting/affine}{Affine Transformations Example}
/// {Transformations Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct Matrix {
    ///
    /// Returns the horizontal scaling factor.
    ///
    /// **See also:** scale()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    m11() -> f32,
    ///
    /// Returns the vertical shearing factor.
    ///
    /// **See also:** shear()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    m12() -> f32,
    ///
    /// Returns the horizontal shearing factor.
    ///
    /// **See also:** shear()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    m21() -> f32,
    ///
    /// Returns the vertical scaling factor.
    ///
    /// **See also:** scale()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    m22() -> f32,
    ///
    /// Returns the horizontal translation factor.
    ///
    /// **See also:** translate()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    dx() -> f32,
    ///
    /// Returns the vertical translation factor.
    ///
    /// **See also:** translate()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    dy() -> f32,
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** mapToPolygon()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** mapRect()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    map(x: i32, y: i32, tx: *i32, ty: *i32),
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** mapToPolygon()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** mapRect()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    map_2(x: f32, y: f32, tx: *f32, ty: *f32),
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** mapToPolygon()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    map_rect(arg0: &RectType) -> Rect,
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** mapToPolygon()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    map_rect_2(arg0: &RectFType) -> RectF,
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** mapToPolygon()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** mapRect()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    map_3(p: &PointType) -> Point,
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** mapToPolygon()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** mapRect()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    map_4(p: &PointFType) -> PointF,
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** mapToPolygon()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** mapRect()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    map_5(l: &LineType) -> Line,
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** mapToPolygon()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** mapRect()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    map_6(l: &LineFType) -> LineF,
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** mapToPolygon()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** mapRect()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    map_7(a: &PolygonFType) -> PolygonF,
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** mapToPolygon()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** mapRect()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    map_8(a: &PolygonType) -> Polygon,
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** mapToPolygon()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** mapRect()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    map_9(r: &RegionType) -> Region,
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** mapToPolygon()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** mapRect()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    //map_10(p: &PainterPathType) -> PainterPath,
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** mapRect()
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    map_to_polygon(r: &RectType) -> Polygon,
    ///
    /// Resets the matrix to an identity matrix, i.e. all elements are set
    /// to zero, except `m11` and `m22` (specifying the scale) which are
    /// set to 1.
    ///
    /// **See also:** QMatrix()
    /// isIdentity()
    /// {QMatrix#Basic Matrix
    /// Operations}{Basic Matrix Operations}
    reset(),
    ///
    /// Returns `true` if the matrix is the identity matrix, otherwise
    /// returns `false.`
    ///
    /// **See also:** reset()
    is_identity() -> bool,
    ///
    /// Scales the coordinate system by *sx* horizontally and *sy*
    /// vertically, and returns a reference to the matrix.
    ///
    /// **See also:** setMatrix()
    scale(sx: f32, sy: f32) -> Matrix?,
    ///
    /// Shears the coordinate system by *sh* horizontally and *sv*
    /// vertically, and returns a reference to the matrix.
    ///
    /// **See also:** setMatrix()
    shear(sh: f32, sv: f32) -> Matrix?,
    ///
    /// Rotates the coordinate system the given *degrees*
    /// counterclockwise.
    ///
    /// Note that if you apply a QMatrix to a point defined in widget
    /// coordinates, the direction of the rotation will be clockwise
    /// because the y-axis points downwards.
    ///
    /// Returns a reference to the matrix.
    ///
    /// **See also:** setMatrix()
    rotate(a: f32) -> Matrix?,
    ///
    /// Returns `true` if the matrix is invertible, otherwise returns `false.`
    ///
    /// **See also:** inverted()
    is_invertible() -> bool,
    ///
    /// Returns the matrix's determinant.
    determinant() -> f32,
    ///
    /// Returns an inverted copy of this matrix.
    ///
    /// If the matrix is singular (not invertible), the returned matrix is
    /// the identity matrix. If *invertible* is valid (i.e. not 0), its
    /// value is set to true if the matrix is invertible, otherwise it is
    /// set to false.
    ///
    /// **See also:** isInvertible()
    inverted(invertible: *bool) -> Matrix,
}

// vim: syntax=rust expandtab ts=4 sw=4
