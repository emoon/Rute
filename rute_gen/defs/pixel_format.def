///
/// In Qt there is a often a need to represent the layout of the pixels in a
/// graphics buffer. Internally QPixelFormat stores everything in a 64 bit
/// datastructure. This gives performance but also some limitations.
///
/// QPixelFormat can describe 5 color channels and 1 alpha channel, each can use
/// 6 bits to describe the size of the color channel.
///
/// The position of the alpha channel is described with a separate enum. This is
/// to make it possible to describe QImage formats like ARGB32, and also
/// describe typical OpenGL formats like RBGA8888.
///
/// How pixels are suppose to be read is determined by the TypeInterpretation
/// enum. It describes if color values are suppose to be read byte per byte,
/// or if a pixel is suppose to be read as a complete int and then masked.
/// **See also:** TypeInterpretation
///
/// There is no support for describing YUV's macro pixels. Instead a list of YUV
/// formats has been made. When a QPixelFormat is describing a YUV format, the
/// bitsPerPixel value has been deduced by the YUV Layout enum. Also, the color
/// channels should all be set to zero except the fifth color channel that
/// should store the bitsPerPixel value.
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct PixelFormat {
    ///
    /// Accessor function for getting the colorModel.
    color_model() -> PixelFormat::ColorModel,
    ///
    /// Accessor function for getting the channelCount. Channel Count is deduced
    /// by color channels with a size > 0 and if the size of the alpha channel is > 0.
    channel_count() -> u8,
    ///
    /// Accessor function for the size of the red color channel.
    red_size() -> u8,
    ///
    /// Accessor function for the size of the green color channel.
    green_size() -> u8,
    ///
    /// Accessor function for the size of the blue color channel.
    blue_size() -> u8,
    ///
    /// Accessor function for the cyan color channel.
    cyan_size() -> u8,
    ///
    /// Accessor function for the megenta color channel.
    magenta_size() -> u8,
    ///
    /// Accessor function for the yellow color channel.
    yellow_size() -> u8,
    ///
    /// Accessor function for the black/key color channel.
    black_size() -> u8,
    ///
    /// Accessor function for the hue channel size.
    hue_size() -> u8,
    ///
    /// Accessor function for the saturation channel size.
    saturation_size() -> u8,
    ///
    /// Accessor function for the lightness channel size.
    lightness_size() -> u8,
    ///
    /// Accessor function for the brightness channel size.
    brightness_size() -> u8,
    ///
    /// Accessor function for the alpha channel size.
    alpha_size() -> u8,
    ///
    /// Accessor function for the bits used per pixel. This function returns the
    /// sum of the color channels + the size of the alpha channel.
    bits_per_pixel() -> u8,
    ///
    /// Accessor function for alphaUsage.
    alpha_usage() -> PixelFormat::AlphaUsage,
    ///
    /// Accessor function for alphaPosition.
    alpha_position() -> PixelFormat::AlphaPosition,
    ///
    /// Accessor function for the AlphaPremultiplied enum. This indicates if the
    /// alpha channel is multiplied in to the color channels.
    ///
    premultiplied() -> PixelFormat::AlphaPremultiplied,
    ///
    /// Accessor function for the type representation of a color channel or a pixel.
    ///
    /// **See also:** TypeInterpretation
    type_interpretation() -> PixelFormat::TypeInterpretation,
    ///
    /// The byte order is almost always set the the byte order of the current
    /// system. However, it can be useful to describe some YUV formats. This
    /// function should never return QPixelFormat::CurrentSystemEndian as this
    /// value is translated to a endian value in the constructor.
    byte_order() -> PixelFormat::ByteOrder,
    ///
    /// Accessor function for the YUVLayout. It is difficult to describe the color
    /// channels of a YUV pixel format since YUV color model uses macro pixels.
    /// Instead the layout of the pixels are stored as an enum.
    yuv_layout() -> PixelFormat::YUVLayout,
    sub_enum() -> u8,
}

[org_name(QPixelFormat)]
enum ColorModel {
    /// The color model is RGB.
    RGB,
    /// This is logically the opposite endian version of RGB. However, for ease of use it has its own model.
    BGR,
    /// The color model uses a color palette.
    Indexed,
    /// The color model is Grayscale.
    Grayscale,
    /// The color model is CMYK.
    CMYK,
    /// The color model is HSL.
    HSL,
    /// The color model is HSV.
    HSV,
    /// The color model is YUV.
    YUV,
    /// There is no color model, only alpha is used.
    Alpha,
}

[org_name(QPixelFormat)]
enum AlphaUsage {
    /// The alpha channel is used.
    UsesAlpha,
    /// The alpha channel is not used.
    IgnoresAlpha,
}

[org_name(QPixelFormat)]
enum AlphaPosition {
    /// The alpha channel will be put in front of the color channels . E.g. ARGB.
    AtBeginning,
    /// The alpha channel will be put in the back of the color channels. E.g. RGBA.
    AtEnd,
}

[org_name(QPixelFormat)]
enum AlphaPremultiplied {
    /// The alpha channel is not multiplied into the color channels.
    NotPremultiplied,
    /// The alpha channel is multiplied into the color channels.
    Premultiplied,
}

[org_name(QPixelFormat)]
enum TypeInterpretation {
    ///
    UnsignedInteger,
    ///
    UnsignedShort,
    ///
    UnsignedByte,
    ///
    FloatingPoint,
}

[org_name(QPixelFormat)]
enum YUVLayout {
    ///
    YUV444,
    ///
    YUV422,
    ///
    YUV411,
    ///
    YUV420P,
    ///
    YUV420SP,
    ///
    YV12,
    ///
    UYVY,
    ///
    YUYV,
    ///
    NV12,
    ///
    NV21,
    ///
    IMC1,
    ///
    IMC2,
    ///
    IMC3,
    ///
    IMC4,
    ///
    Y8,
    ///
    Y16,
}

[org_name(QPixelFormat)]
enum ByteOrder {
    /// The byte order is little endian.
    LittleEndian,
    /// The byte order is big endian.
    BigEndian,
    /// This enum will not be stored, but is converted in the constructor to the endian enum that matches the enum of the current system.
    CurrentSystemEndian,
}

// vim: syntax=rust expandtab ts=4 sw=4
