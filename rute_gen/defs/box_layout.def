///
/// QBoxLayout takes the space it gets (from its parent layout or from
/// the parentWidget()), divides it up into a row of boxes, and makes
/// each managed widget fill one box.
///
/// ![Horizontal box layout with five child widgets](qhboxlayout-with-5-children.png)
///
/// If the QBoxLayout's orientation is Qt::Horizontal the boxes are
/// placed in a row, with suitable sizes. Each widget (or other box)
/// will get at least its minimum size and at most its maximum size.
/// Any excess space is shared according to the stretch factors (more
/// about that below).
///
/// ![Vertical box layout with five child widgets](qvboxlayout-with-5-children.png)
///
/// If the QBoxLayout's orientation is Qt::Vertical, the boxes are
/// placed in a column, again with suitable sizes.
///
/// The easiest way to create a QBoxLayout is to use one of the
/// convenience classes, e.g. QHBoxLayout (for Qt::Horizontal boxes)
/// or QVBoxLayout (for Qt::Vertical boxes). You can also use the
/// QBoxLayout constructor directly, specifying its direction as
/// LeftToRight, RightToLeft, TopToBottom, or BottomToTop.
///
/// If the QBoxLayout is not the top-level layout (i.e. it is not
/// managing all of the widget's area and children), you must add it
/// to its parent layout before you can do anything with it. The
/// normal way to add a layout is by calling
/// parentLayout-\>addLayout().
///
/// Once you have done this, you can add boxes to the QBoxLayout using
/// one of four functions:
///
/// * addWidget() to add a widget to the QBoxLayout and set the widget's stretch factor. (The stretch factor is along the row of boxes.)
/// * addSpacing() to create an empty box; this is one of the functions you use to create nice and spacious dialogs. See below for ways to set margins.
/// * addStretch() to create an empty, stretchable box.
/// * addLayout() to add a box containing another QLayout to the row and set that layout's stretch factor.
///
/// Use insertWidget(), insertSpacing(), insertStretch() or
/// insertLayout() to insert a box at a specified position in the
/// layout.
///
/// QBoxLayout also includes two margin widths:
///
/// * setContentsMargins() sets the width of the outer border on each side of the widget. This is the width of the reserved space along each of the QBoxLayout's four sides.
/// * setSpacing() sets the width between neighboring boxes. (You can use addSpacing() to get more space at a particular spot.)
///
/// The margin default is provided by the style. The default margin
/// most Qt styles specify is 9 for child widgets and 11 for windows.
/// The spacing defaults to the same as the margin width for a
/// top-level layout, or to the same as the parent layout.
///
/// To remove a widget from a layout, call removeWidget(). Calling
/// QWidget::hide() on a widget also effectively removes the widget
/// from the layout until QWidget::show() is called.
///
/// You will almost always want to use QVBoxLayout and QHBoxLayout
/// rather than QBoxLayout because of their convenient constructors.
///
/// **See also:** [`GridLayout`]
/// [`StackedLayout`]
/// {Layout Management}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[attributes(NoWrapClass, NoCreate)]
struct BoxLayout : Layout {
    ///
    /// Returns the direction of the box. addWidget() and addSpacing()
    /// work in this direction; the stretch stretches in this direction.
    ///
    /// **See also:** [`BoxLayout::direction()`]
    /// [`add_widget()`]
    /// [`add_spacing()`]
    direction() -> BoxLayout::Direction,
    ///
    /// Sets the direction of this layout to *direction.*
    set_direction(arg0: BoxLayout::Direction),
    ///
    /// Adds a non-stretchable space (a QSpacerItem) with size *size*
    /// to the end of this box layout. QBoxLayout provides default margin
    /// and spacing. This function adds additional space.
    ///
    /// **See also:** [`insert_spacing()`]
    /// [`add_item()`]
    /// [`SpacerItem`]
    add_spacing(size: i32),
    ///
    /// Adds *spacerItem* to the end of this box layout.
    ///
    /// **See also:** [`add_spacing()`]
    /// [`add_stretch()`]
    add_spacer_item(spacer_item: *SpacerItemType),
    ///
    /// Adds *widget* to the end of this box layout, with a stretch
    /// factor of *stretch* and alignment *alignment.*
    ///
    /// The stretch factor applies only in the [direction](direction())
    ///
    /// of the QBoxLayout, and is relative to the other boxes and widgets
    /// in this QBoxLayout. Widgets and boxes with higher stretch factors
    /// grow more.
    ///
    /// If the stretch factor is 0 and nothing else in the QBoxLayout has
    /// a stretch factor greater than zero, the space is distributed
    /// according to the QWidget:sizePolicy() of each widget that's
    /// involved.
    ///
    /// The alignment is specified by *alignment.* The default
    /// alignment is 0, which means that the widget fills the entire cell.
    ///
    /// **See also:** [`insert_widget()`]
    /// [`add_item()`]
    /// [`add_layout()`]
    /// [`add_stretch()`]
    /// [`add_spacing()`]
    /// [`add_strut()`]
    add_widget(arg0: *WidgetType, stretch: i32, alignment: Rute::Alignment),
    ///
    /// Adds *layout* to the end of the box, with serial stretch factor
    /// *stretch.*
    ///
    /// **See also:** [`insert_layout()`]
    /// [`add_item()`]
    /// [`add_widget()`]
    add_layout(layout: *LayoutType, stretch: i32),
    ///
    //[event] add_item(arg0: *LayoutItemType),
    ///
    /// Inserts a non-stretchable space (a QSpacerItem) at position *index,* with
    /// size *size.* If *index* is negative the space is added at the end.
    ///
    /// The box layout has default margin and spacing. This function adds
    /// additional space.
    ///
    /// **See also:** [`add_spacing()`]
    /// [`insert_item()`]
    /// [`SpacerItem`]
    insert_spacing(index: i32, size: i32),
    ///
    /// Inserts *spacerItem* at position *index,* with zero minimum
    /// size and stretch factor. If *index* is negative the
    /// space is added at the end.
    ///
    /// **See also:** [`add_spacer_item()`]
    /// [`insert_stretch()`]
    /// [`insert_spacing()`]
    //insert_spacer_item(index: i32, spacer_item: *SpacerItemType),
    ///
    /// Inserts *widget* at position *index,* with stretch factor *stretch* and alignment *alignment.* If *index* is negative, the
    /// widget is added at the end.
    ///
    /// The stretch factor applies only in the [direction](direction())
    ///
    /// of the QBoxLayout, and is relative to the other boxes and widgets
    /// in this QBoxLayout. Widgets and boxes with higher stretch factors
    /// grow more.
    ///
    /// If the stretch factor is 0 and nothing else in the QBoxLayout has
    /// a stretch factor greater than zero, the space is distributed
    /// according to the QWidget:sizePolicy() of each widget that's
    /// involved.
    ///
    /// The alignment is specified by *alignment.* The default alignment
    /// is 0, which means that the widget fills the entire cell.
    ///
    /// **See also:** [`add_widget()`]
    /// [`insert_item()`]
    insert_widget(index: i32, widget: *WidgetType, stretch: i32, alignment: Rute::Alignment),
    ///
    /// Inserts *layout* at position *index,* with stretch factor *stretch.* If *index* is negative, the layout is added at the end.
    ///
    /// *layout* becomes a child of the box layout.
    ///
    /// **See also:** [`add_layout()`]
    /// [`insert_item()`]
    insert_layout(index: i32, layout: *LayoutType, stretch: i32),
    ///
    /// Inserts *item* into this box layout at position *index.* If *index* is negative, the item is added at the end.
    ///
    /// **See also:** [`add_item()`]
    /// [`insert_widget()`]
    /// [`insert_layout()`]
    /// [`insert_stretch()`]
    /// [`insert_spacing()`]
    insert_item(index: i32, arg0: *LayoutItemType),
    ///
    /// Reimplements QLayout::spacing(). If the spacing property is
    /// valid, that value is returned. Otherwise, a value for the spacing
    /// property is computed and returned. Since layout spacing in a widget
    /// is style dependent, if the parent is a widget, it queries the style
    /// for the (horizontal or vertical) spacing of the layout. Otherwise,
    /// the parent is a layout, and it queries the parent layout for the
    /// spacing().
    ///
    /// **See also:** [`Layout::spacing`]
    /// [`set_spacing()`]
    spacing() -> i32,
    ///
    /// Reimplements QLayout::setSpacing(). Sets the spacing
    /// property to *spacing.*
    ///
    /// **See also:** [`Layout::set_spacing`]
    /// [`spacing()`]
    set_spacing(spacing: i32),
    ///
    //[event] size_hint() -> Size,
    ///
    //[event] minimum_size() -> Size,
    ///
    //[event] maximum_size() -> Size,
    ///
    //[event] has_height_for_width() -> bool,
    ///
    //[event] height_for_width(arg0: i32) -> i32,
    ///
    //[event] minimum_height_for_width(arg0: i32) -> i32,
    ///
    //[event] expanding_directions() -> Rute::Orientations,
    ///
    /// Resets cached information.
    //[event] invalidate(),
    ///
    //[event] item_at(arg0: i32) -> LayoutItem?,
    ///
    //[event] take_at(arg0: i32) -> LayoutItem?,
    ///
    //[event] count() -> i32,
}

[org_name(QBoxLayout)]
enum Direction {
    /// Horizontal from left to right.
    LeftToRight = 0,
    /// Horizontal from right to left.
    RightToLeft = 1,
    /// Vertical from top to bottom.
    TopToBottom = 2,
    /// Vertical from bottom to top.
    BottomToTop = 3,
    Down = 2,
    Up = 3,
}

// vim: syntax=rust expandtab ts=4 sw=4
