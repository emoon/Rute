///
/// This class implements an *abstract* button.
/// Subclasses of this class handle user actions, and specify how the button
/// is drawn.
///
/// QAbstractButton provides support for both push buttons and checkable
/// (toggle) buttons. Checkable buttons are implemented in the QRadioButton
/// and QCheckBox classes. Push buttons are implemented in the
/// QPushButton and QToolButton classes; these also provide toggle
/// behavior if required.
///
/// Any button can display a label containing text and an icon. setText()
/// sets the text; setIcon() sets the icon. If a button is disabled, its label
/// is changed to give the button a appearance.
///
/// If the button is a text button with a string containing an
/// ampersand ('&'), QAbstractButton automatically creates a shortcut
/// key. For example:
///
/// The **Alt+C** shortcut is assigned to the button, i.e., when the
/// user presses **Alt+C** the button will call animateClick(). See
/// the [QShortcut](QShortcut%23mnemonic)
/// documentation for details. To
/// display an actual ampersand, use '&&'.
///
/// You can also set a custom shortcut key using the setShortcut()
/// function. This is useful mostly for buttons that do not have any
/// text, and therefore can't have any automatic shortcut.
///
/// All the buttons provided by Qt (QPushButton, QToolButton,
/// QCheckBox, and QRadioButton) can display both [text](text)
/// and [icons](icon)
///
///
/// A button can be made the default button in a dialog by means of
/// QPushButton::setDefault() and QPushButton::setAutoDefault().
///
/// QAbstractButton provides most of the states used for buttons:
///
/// * isDown() indicates whether the button is *pressed* down.
/// * isChecked() indicates whether the button is *checked.* Only checkable buttons can be checked and unchecked (see below).
/// * isEnabled() indicates whether the button can be pressed by the user. **Note**: As opposed to other widgets, buttons derived from QAbstractButton accept mouse and context menu events when disabled.
/// * setAutoRepeat() sets whether the button will auto-repeat if the user holds it down. [autoRepeatDelay](autoRepeatDelay)
/// and [autoRepeatInterval](autoRepeatInterval)
/// define how auto-repetition is done.
/// * setCheckable() sets whether the button is a toggle button or not.
///
/// The difference between isDown() and isChecked() is as follows.
/// When the user clicks a toggle button to check it, the button is first
/// *pressed* then released into the *checked* state. When the user
/// clicks it again (to uncheck it), the button moves first to the
/// *pressed* state, then to the *unchecked* state (isChecked() and
/// isDown() are both false).
///
/// QAbstractButton provides four signals:
///
/// * pressed() is emitted when the left mouse button is pressed while the mouse cursor is inside the button.
/// * released() is emitted when the left mouse button is released.
/// * clicked() is emitted when the button is first pressed and then released, when the shortcut key is typed, or when click() or animateClick() is called.
/// * toggled() is emitted when the state of a toggle button changes.
///
/// To subclass QAbstractButton, you must reimplement at least
/// paintEvent() to draw the button's outline and its text or pixmap. It
/// is generally advisable to reimplement sizeHint() as well, and
/// sometimes hitButton() (to determine whether a button press is within
/// the button). For buttons with more than two states (like tri-state
/// buttons), you will also have to reimplement checkStateSet() and
/// nextCheckState().
///
/// **See also:** [`ButtonGroup`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[attributes(NoCreate)]
struct AbstractButton : Widget {
    set_text(text: String),
    ///
    /// If the button has no text, the text() function will return an empty
    /// string.
    ///
    /// If the text contains an ampersand character ('&'), a shortcut is
    /// automatically created for it. The character that follows the '&' will
    /// be used as the shortcut key. Any previous shortcut will be
    /// overwritten or cleared if no shortcut is defined by the text. See the
    /// [QShortcut](QShortcut%23mnemonic)
    /// documentation for details. To
    /// display an actual ampersand, use '&&'.
    ///
    /// There is no default text.
    text() -> String,
    set_icon(icon: &IconType),
    ///
    /// The icon's default size is defined by the GUI style, but can be
    /// adjusted by setting the [iconSize](iconSize)
    /// property.
    ///
    /// The default size is defined by the GUI style. This is a maximum
    /// size for the icons. Smaller icons will not be scaled up.
    icon() -> Icon,
    ///
    /// The default size is defined by the GUI style. This is a maximum
    /// size for the icons. Smaller icons will not be scaled up.
    icon_size() -> Size,
    set_shortcut(key: &KeySequenceType),
    ///
    shortcut() -> KeySequence,
    set_checkable(arg0: bool),
    is_checkable() -> bool,
    is_checked() -> bool,
    set_down(arg0: bool),
    is_down() -> bool,
    set_auto_repeat(arg0: bool),
    ///
    /// If autoRepeat is enabled, then the pressed(), released(), and clicked() signals are emitted at
    /// regular intervals when the button is down. autoRepeat is off by default.
    /// The initial delay and the repetition interval are defined in milliseconds by [autoRepeatDelay](autoRepeatDelay)
    /// and [autoRepeatInterval.](autoRepeatInterval.)
    ///
    /// Note: If a button is pressed down by a shortcut key, then auto-repeat is enabled and timed by the
    /// system and not by this class. The pressed(), released(), and clicked() signals will be emitted
    /// like in the normal case.
    ///
    /// If [autoRepeat](autoRepeat)
    /// is enabled, then autoRepeatDelay defines the initial
    /// delay in milliseconds before auto-repetition kicks in.
    ///
    /// **See also:** autoRepeat
    /// autoRepeatInterval
    ///
    /// If [autoRepeat](autoRepeat)
    /// is enabled, then autoRepeatInterval defines the
    /// length of the auto-repetition interval in millisecons.
    ///
    /// **See also:** autoRepeat
    /// autoRepeatDelay
    auto_repeat() -> bool,
    set_auto_repeat_delay(arg0: i32),
    ///
    /// If [autoRepeat](autoRepeat)
    /// is enabled, then autoRepeatDelay defines the initial
    /// delay in milliseconds before auto-repetition kicks in.
    ///
    /// **See also:** autoRepeat
    /// autoRepeatInterval
    auto_repeat_delay() -> i32,
    set_auto_repeat_interval(arg0: i32),
    ///
    /// If [autoRepeat](autoRepeat)
    /// is enabled, then autoRepeatInterval defines the
    /// length of the auto-repetition interval in millisecons.
    ///
    /// **See also:** autoRepeat
    /// autoRepeatDelay
    auto_repeat_interval() -> i32,
    set_auto_exclusive(arg0: bool),
    ///
    /// If auto-exclusivity is enabled, checkable buttons that belong to the
    /// same parent widget behave as if they were part of the same
    /// exclusive button group. In an exclusive button group, only one button
    /// can be checked at any time; checking another button automatically
    /// unchecks the previously checked one.
    ///
    /// The property has no effect on buttons that belong to a button
    /// group.
    ///
    /// autoExclusive is off by default, except for radio buttons.
    ///
    /// **See also:** [`RadioButton`]
    auto_exclusive() -> bool,
    ///
    /// Returns the group that this button belongs to.
    ///
    /// If the button is not a member of any QButtonGroup, this function
    /// returns 0.
    ///
    /// **See also:** [`ButtonGroup`]
    group() -> *ButtonGroup?,
    set_icon_size(size: &SizeType),
    ///
    /// Performs an animated click: the button is pressed immediately, and
    /// released *msec* milliseconds later (the default is 100 ms).
    ///
    /// Calling this function again before the button is released resets
    /// the release timer.
    ///
    /// All signals associated with a click are emitted as appropriate.
    ///
    /// This function does nothing if the button is [disabled.](setEnabled())
    ///
    /// **See also:** [`click()`]
    animate_click(msec: i32),
    ///
    /// Performs a click.
    ///
    /// All the usual signals associated with a click are emitted as
    /// appropriate. If the button is checkable, the state of the button is
    /// toggled.
    ///
    /// This function does nothing if the button is [disabled.](setEnabled())
    ///
    /// **See also:** [`animate_click()`]
    ///
    /// This signal is emitted when the button is activated (i.e., pressed down
    /// then released while the mouse cursor is inside the button), when the
    /// shortcut key is typed, or when click() or animateClick() is called.
    /// Notably, this signal is *not* emitted if you call setDown(),
    /// setChecked() or toggle().
    ///
    /// If the button is checkable, *checked* is true if the button is
    /// checked, or false if the button is unchecked.
    ///
    /// **See also:** [`pressed()`]
    /// [`released()`]
    /// [`toggled()`]
    click(),
    ///
    /// Toggles the state of a checkable button.
    ///
    /// **See also:** checked
    ///
    /// This signal is emitted whenever a checkable button changes its state.
    /// *checked* is true if the button is checked, or false if the button is
    /// unchecked.
    ///
    /// This may be the result of a user action, click() slot activation,
    /// or because setChecked() is called.
    ///
    /// The states of buttons in exclusive button groups are updated before this
    /// signal is emitted. This means that slots can act on either the
    /// signal or the signal emitted by the buttons in the group whose
    /// states have changed.
    ///
    /// For example, a slot that reacts to signals emitted by newly checked
    /// buttons but which ignores signals from buttons that have been unchecked
    /// can be implemented using the following pattern:
    ///
    /// Button groups can be created using the QButtonGroup class, and
    /// updates to the button states monitored with the
    /// [QButtonGroup::buttonClicked()](QButtonGroup::buttonClicked())
    /// signal.
    ///
    /// **See also:** checked
    /// [`clicked()`]
    toggle(),
    set_checked(arg0: bool),
    ///
    /// This signal is emitted when the button is pressed down.
    ///
    /// **See also:** [`released()`]
    /// [`clicked()`]
    [signal] pressed(),
    ///
    /// This signal is emitted when the button is released.
    ///
    /// **See also:** [`pressed()`]
    /// [`clicked()`]
    /// [`toggled()`]
    [signal] released(),
    ///
    /// This signal is emitted when the button is activated (i.e., pressed down
    /// then released while the mouse cursor is inside the button), when the
    /// shortcut key is typed, or when click() or animateClick() is called.
    /// Notably, this signal is *not* emitted if you call setDown(),
    /// setChecked() or toggle().
    ///
    /// If the button is checkable, *checked* is true if the button is
    /// checked, or false if the button is unchecked.
    ///
    /// **See also:** [`pressed()`]
    /// [`released()`]
    /// [`toggled()`]
    [signal] clicked(checked: bool),
    ///
    /// This signal is emitted whenever a checkable button changes its state.
    /// *checked* is true if the button is checked, or false if the button is
    /// unchecked.
    ///
    /// This may be the result of a user action, click() slot activation,
    /// or because setChecked() is called.
    ///
    /// The states of buttons in exclusive button groups are updated before this
    /// signal is emitted. This means that slots can act on either the
    /// signal or the signal emitted by the buttons in the group whose
    /// states have changed.
    ///
    /// For example, a slot that reacts to signals emitted by newly checked
    /// buttons but which ignores signals from buttons that have been unchecked
    /// can be implemented using the following pattern:
    ///
    /// Button groups can be created using the QButtonGroup class, and
    /// updates to the button states monitored with the
    /// [QButtonGroup::buttonClicked()](QButtonGroup::buttonClicked())
    /// signal.
    ///
    /// **See also:** checked
    /// [`clicked()`]
    [signal] toggled(checked: bool),
    ///
    [event] paint_event(e: *PaintEventType),
    //
    // Returns `true` if *pos* is inside the clickable button rectangle;
    // otherwise returns `false.`
    //
    // By default, the clickable area is the entire widget. Subclasses
    // may reimplement this function to provide support for clickable
    // areas of different shapes and sizes.
    //[event] hit_button(pos: &PointType) -> bool,
    // This virtual handler is called when setChecked() is used,
    // unless it is called from within nextCheckState(). It allows
    // subclasses to reset their intermediate button states.
    //
    // **See also:** [`next_check_state()`]
    //[event] check_state_set(),
    // This virtual handler is called when a button is clicked. The
    // default implementation calls setChecked(!isChecked()) if the button
    // isCheckable(). It allows subclasses to implement intermediate button
    // states.
    //
    // **See also:** [`check_state_set()`]
    //[event] next_check_state(),
    //
    //[event] event(e: *EventType) -> bool,
    ///
    [event] key_press_event(e: *KeyEventType),
    ///
    [event] key_release_event(e: *KeyEventType),
    ///
    [event] mouse_press_event(e: *MouseEventType),
    ///
    [event] mouse_release_event(e: *MouseEventType),
    ///
    [event] mouse_move_event(e: *MouseEventType),
    ///
    [event] focus_in_event(e: *FocusEventType),
    ///
    [event] focus_out_event(e: *FocusEventType),
    ///
    [event] change_event(e: *EventType),
    //
    //[event] timer_event(e: *TimerEventType),
}

// vim: syntax=rust expandtab ts=4 sw=4
