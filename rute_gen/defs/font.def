///
/// When you create a QFont object you specify various attributes that
/// you want the font to have. Qt will use the font with the specified
/// attributes, or if no matching font exists, Qt will use the closest
/// matching installed font. The attributes of the font that is
/// actually used are retrievable from a QFontInfo object. If the
/// window system provides an exact match exactMatch() returns `true.`
/// Use QFontMetrics to get measurements, e.g. the pixel length of a
/// string using QFontMetrics::width().
///
/// Note that a QGuiApplication instance must exist before a QFont can be
/// used. You can set the application's default font with
/// QGuiApplication::setFont().
///
/// If a chosen font does not include all the characters that
/// need to be displayed, QFont will try to find the characters in the
/// nearest equivalent fonts. When a QPainter draws a character from a
/// font the QFont will report whether or not it has the character; if
/// it does not, QPainter will draw an unfilled square.
///
/// Create QFonts like this:
///
/// The attributes set in the constructor can also be set later, e.g.
/// setFamily(), setPointSize(), setPointSizeF(), setWeight() and
/// setItalic(). The remaining attributes must be set after
/// contstruction, e.g. setBold(), setUnderline(), setOverline(),
/// setStrikeOut() and setFixedPitch(). QFontInfo objects should be
/// created *after* the font's attributes have been set. A QFontInfo
/// object will not change, even if you change the font's
/// attributes. The corresponding functions, e.g. family(),
/// pointSize(), etc., return the values that were set, even though
/// the values used may differ. The actual values are available from a
/// QFontInfo object.
///
/// If the requested font family is unavailable you can influence the
/// [font matching algorithm](%23fontmatching)
/// by choosing a
/// particular [QFont::StyleHint](QFont::StyleHint)
/// and [QFont::StyleStrategy](QFont::StyleStrategy)
/// with
/// setStyleHint(). The default family (corresponding to the current
/// style hint) is returned by defaultFamily().
///
/// The font-matching algorithm has a lastResortFamily() and
/// lastResortFont() in cases where a suitable match cannot be found.
/// You can provide substitutions for font family names using
/// insertSubstitution() and insertSubstitutions(). Substitutions can
/// be removed with removeSubstitutions(). Use substitute() to retrieve
/// a family's first substitute, or the family name itself if it has
/// no substitutes. Use substitutes() to retrieve a list of a family's
/// substitutes (which may be empty).
///
/// Every QFont has a key() which you can use, for example, as the key
/// in a cache or dictionary. If you want to store a user's font
/// preferences you could use QSettings, writing the font information
/// with toString() and reading it back with fromString(). The
/// operator<<() and operator>>() functions are also available, but
/// they work on a data stream.
///
/// It is possible to set the height of characters shown on the screen
/// to a specified number of pixels with setPixelSize(); however using
/// setPointSize() has a similar effect and provides device
/// independence.
///
/// Loading fonts can be expensive, especially on X11. QFont contains
/// extensive optimizations to make the copying of QFont objects fast,
/// and to cache the results of the slow window system functions it
/// depends upon.
///
/// The font matching algorithm works as follows:
/// * The specified font family is searched for.
/// * If not found, the styleHint() is used to select a replacement family.
/// * Each replacement font family is searched for.
/// * If none of these are found or there was no styleHint(), "helvetica" will be searched for.
/// * If "helvetica" isn't found Qt will try the lastResortFamily().
/// * If the lastResortFamily() isn't found Qt will try the lastResortFont() which will always return a name of some kind.
///
/// Note that the actual font matching algorithm varies from platform to platform.
///
/// In Windows a request for the font is automatically changed to
/// , an improved version of Courier that allows for smooth scaling.
/// The older bitmap font can be selected by setting the PreferBitmap
/// style strategy (see setStyleStrategy()).
///
/// Once a font is found, the remaining attributes are matched in order of
/// priority:
/// * fixedPitch()
/// * pointSize() (see below)
/// * weight()
/// * style()
///
/// If you have a font which matches on family, even if none of the
/// other attributes match, this font will be chosen in preference to
/// a font which doesn't match on family but which does match on the
/// other attributes. This is because font family is the dominant
/// search criteria.
///
/// The point size is defined to match if it is within 20% of the
/// requested point size. When several fonts match and are only
/// distinguished by point size, the font with the closest point size
/// to the one requested will be chosen.
///
/// The actual family, font size, weight and other font attributes
/// used for drawing text will depend on what's available for the
/// chosen family under the window system. A QFontInfo object can be
/// used to determine the actual values used for drawing the text.
///
/// Examples:
///
/// If you had both an Adobe and a Cronyx Helvetica, you might get
/// either.
///
/// You can specify the foundry you want in the family name. The font f
/// in the above example will be set to .
///
/// To determine the attributes of the font actually used in the window
/// system, use a QFontInfo object, e.g.
///
/// To find out font metrics use a QFontMetrics object, e.g.
///
/// For more general information on fonts, see the
/// [comp.fonts FAQ](comp.fonts%20FAQ)
///
/// Information on encodings can be found from
/// [Roman Czyborra's](Roman%20Czyborra's)
/// page.
///
/// **See also:** [`FontMetrics`]
/// [`FontInfo`]
/// [`FontDatabase`]
/// {Character Map Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Font {
    ///
    /// Swaps this font instance with *other.* This function is very fast
    /// and never fails.
    swap(other: &FontType),
    ///
    /// Returns the requested font family name, i.e. the name set in the
    /// constructor or the last setFont() call.
    ///
    /// **See also:** [`set_family()`]
    /// [`substitutes()`]
    /// [`substitute()`]
    family() -> String,
    ///
    /// Sets the family name of the font. The name is case insensitive and
    /// may include a foundry name.
    ///
    /// The *family* name may optionally also include a foundry name,
    /// e.g. . If the *family* is
    /// available from more than one foundry and the foundry isn't
    /// specified, an arbitrary foundry is chosen. If the family isn't
    /// available a family will be set using the [font matching](QFont)
    ///
    /// algorithm.
    ///
    /// **See also:** [`family()`]
    /// [`set_style_hint()`]
    /// [`FontInfo`]
    set_family(arg0: String),
    ///
    /// Returns the requested font style name. This can be used to match the
    /// font with irregular styles (that can't be normalized in other style
    /// properties).
    ///
    /// **See also:** [`set_family()`]
    /// [`set_style()`]
    style_name() -> String,
    ///
    /// Sets the style name of the font to *styleName.* When set, other style properties
    /// like [style()](style())
    /// and [weight()](weight())
    /// will be ignored for font matching, though they may be
    /// simulated afterwards if supported by the platform's font engine.
    ///
    /// Due to the lower quality of artificially simulated styles, and the lack of full cross
    /// platform support, it is not recommended to use matching by style name together with
    /// matching by style properties
    ///
    /// **See also:** [`style_name()`]
    set_style_name(arg0: String),
    ///
    /// Returns the point size of the font. Returns -1 if the font size
    /// was specified in pixels.
    ///
    /// **See also:** [`set_point_size()`]
    /// [`point_size_f()`]
    ///
    /// Returns the point size of the font. Returns -1 if the font size was
    /// specified in pixels.
    ///
    /// **See also:** [`point_size()`]
    /// [`set_point_size_f()`]
    /// [`pixel_size()`]
    /// [`FontInfo::point_size`]
    /// [`FontInfo::pixel_size`]
    point_size() -> i32,
    ///
    /// Sets the point size to *pointSize.* The point size must be
    /// greater than zero.
    ///
    /// **See also:** [`point_size()`]
    /// [`set_point_size_f()`]
    ///
    /// Sets the point size to *pointSize.* The point size must be
    /// greater than zero. The requested precision may not be achieved on
    /// all platforms.
    ///
    /// **See also:** [`point_size_f()`]
    /// [`set_point_size()`]
    /// [`set_pixel_size()`]
    set_point_size(arg0: i32),
    ///
    /// Returns the point size of the font. Returns -1 if the font size was
    /// specified in pixels.
    ///
    /// **See also:** [`point_size()`]
    /// [`set_point_size_f()`]
    /// [`pixel_size()`]
    /// [`FontInfo::point_size`]
    /// [`FontInfo::pixel_size`]
    point_size_f() -> f32,
    ///
    /// Sets the point size to *pointSize.* The point size must be
    /// greater than zero. The requested precision may not be achieved on
    /// all platforms.
    ///
    /// **See also:** [`point_size_f()`]
    /// [`set_point_size()`]
    /// [`set_pixel_size()`]
    set_point_size_f(arg0: f32),
    ///
    /// Returns the pixel size of the font if it was set with
    /// setPixelSize(). Returns -1 if the size was set with setPointSize()
    /// or setPointSizeF().
    ///
    /// **See also:** [`set_pixel_size()`]
    /// [`point_size()`]
    /// [`FontInfo::point_size`]
    /// [`FontInfo::pixel_size`]
    pixel_size() -> i32,
    ///
    /// Sets the font size to *pixelSize* pixels.
    ///
    /// Using this function makes the font device dependent. Use
    /// setPointSize() or setPointSizeF() to set the size of the font
    /// in a device independent manner.
    ///
    /// **See also:** [`pixel_size()`]
    set_pixel_size(arg0: i32),
    ///
    /// Returns the weight of the font, using the same scale as the
    /// [QFont::Weight](QFont::Weight)
    /// enumeration.
    ///
    /// **See also:** [`set_weight()`]
    /// Weight
    /// [`FontInfo`]
    weight() -> i32,
    ///
    /// Sets the weight of the font to *weight,* using the scale defined by
    /// [QFont::Weight](QFont::Weight)
    /// enumeration.
    ///
    /// **Note**: If styleName() is set, this value may be ignored for font selection.
    ///
    /// **See also:** [`weight()`]
    /// [`FontInfo`]
    set_weight(arg0: i32),
    ///
    /// Returns `true` if weight() is a value greater than
    /// [QFont::Medium](Weight)
    /// ; otherwise returns `false.`
    ///
    /// **See also:** [`weight()`]
    /// [`set_bold()`]
    /// [`FontInfo::bold`]
    bold() -> bool,
    ///
    /// If *enable* is true sets the font's weight to
    /// [QFont::Bold](Weight)
    ///
    /// otherwise sets the weight to [QFont::Normal](Weight)
    ///
    ///
    /// For finer boldness control use setWeight().
    ///
    /// **Note**: If styleName() is set, this value may be ignored, or if supported
    /// on the platform, the font artificially embolded.
    ///
    /// **See also:** [`bold()`]
    /// [`set_weight()`]
    set_bold(arg0: bool),
    ///
    /// Sets the style name of the font to *styleName.* When set, other style properties
    /// like [style()](style())
    /// and [weight()](weight())
    /// will be ignored for font matching, though they may be
    /// simulated afterwards if supported by the platform's font engine.
    ///
    /// Due to the lower quality of artificially simulated styles, and the lack of full cross
    /// platform support, it is not recommended to use matching by style name together with
    /// matching by style properties
    ///
    /// **See also:** [`style_name()`]
    ///
    /// Sets the style of the font to *style.*
    ///
    /// **See also:** [`italic()`]
    /// [`FontInfo`]
    ///
    /// Sets the style hint and strategy to *hint* and *strategy,*
    /// respectively.
    ///
    /// If these aren't set explicitly the style hint will default to
    /// `AnyStyle` and the style strategy to `PreferDefault.`
    ///
    /// Qt does not support style hints on X11 since this information
    /// is not provided by the window system.
    ///
    /// **See also:** StyleHint
    /// [`style_hint()`]
    /// StyleStrategy
    /// [`style_strategy()`]
    /// [`FontInfo`]
    ///
    /// Sets the style strategy for the font to *s.*
    ///
    /// **See also:** [`Font::style_strategy()`]
    //set_style(style: Font::Style),
    ///
    /// Returns the requested font style name. This can be used to match the
    /// font with irregular styles (that can't be normalized in other style
    /// properties).
    ///
    /// **See also:** [`set_family()`]
    /// [`set_style()`]
    ///
    /// Returns the style of the font.
    ///
    /// **See also:** [`set_style()`]
    ///
    /// Returns the StyleStrategy.
    ///
    /// The style strategy affects the [font matching](QFont)
    /// algorithm.
    /// See [QFont::StyleStrategy](QFont::StyleStrategy)
    /// for the list of available strategies.
    ///
    /// **See also:** [`set_style_hint()`]
    /// [`Font::style_hint()`]
    ///
    /// Returns the StyleHint.
    ///
    /// The style hint affects the [font matching algorithm](%23fontmatching)
    ///
    /// See [QFont::StyleHint](QFont::StyleHint)
    /// for the list of available hints.
    ///
    /// **See also:** [`set_style_hint()`]
    /// [`Font::style_strategy()`]
    /// [`FontInfo::style_hint`]
    //style() -> Font::Style,
    ///
    /// Returns `true` if the style() of the font is not QFont::StyleNormal
    ///
    /// **See also:** [`set_italic()`]
    /// [`style()`]
    italic() -> bool,
    ///
    /// Sets the style() of the font to QFont::StyleItalic if *enable* is true;
    /// otherwise the style is set to QFont::StyleNormal.
    ///
    /// **Note**: If styleName() is set, this value may be ignored, or if supported
    /// on the platform, the font may be rendered tilted instead of picking a
    /// designed italic font-variant.
    ///
    /// **See also:** [`italic()`]
    /// [`FontInfo`]
    set_italic(b: bool),
    ///
    /// Returns `true` if underline has been set; otherwise returns `false.`
    ///
    /// **See also:** [`set_underline()`]
    underline() -> bool,
    ///
    /// If *enable* is true, sets underline on; otherwise sets underline
    /// off.
    ///
    /// **See also:** [`underline()`]
    /// [`FontInfo`]
    set_underline(arg0: bool),
    ///
    /// Returns `true` if overline has been set; otherwise returns `false.`
    ///
    /// **See also:** [`set_overline()`]
    overline() -> bool,
    ///
    /// If *enable* is true, sets overline on; otherwise sets overline off.
    ///
    /// **See also:** [`overline()`]
    /// [`FontInfo`]
    set_overline(arg0: bool),
    ///
    /// Returns `true` if fixed pitch has been set; otherwise returns `false.`
    ///
    /// **See also:** [`set_fixed_pitch()`]
    /// [`FontInfo::fixed_pitch`]
    fixed_pitch() -> bool,
    ///
    /// If *enable* is true, sets fixed pitch on; otherwise sets fixed
    /// pitch off.
    ///
    /// **See also:** [`fixed_pitch()`]
    /// [`FontInfo`]
    set_fixed_pitch(arg0: bool),
    ///
    /// Returns `true` if kerning should be used when drawing text with this font.
    ///
    /// **See also:** [`set_kerning()`]
    kerning() -> bool,
    ///
    /// Enables kerning for this font if *enable* is true; otherwise
    /// disables it. By default, kerning is enabled.
    ///
    /// When kerning is enabled, glyph metrics do not add up anymore,
    /// even for Latin text. In other words, the assumption that
    /// width('a') + width('b') is equal to width("ab") is not
    /// necessarily true.
    ///
    /// **See also:** [`kerning()`]
    /// [`FontMetrics`]
    set_kerning(arg0: bool),
    ///
    /// Returns the StyleHint.
    ///
    /// The style hint affects the [font matching algorithm](%23fontmatching)
    ///
    /// See [QFont::StyleHint](QFont::StyleHint)
    /// for the list of available hints.
    ///
    /// **See also:** [`set_style_hint()`]
    /// [`Font::style_strategy()`]
    /// [`FontInfo::style_hint`]
    style_hint() -> Font::StyleHint,
    ///
    /// Sets the style hint and strategy to *hint* and *strategy,*
    /// respectively.
    ///
    /// If these aren't set explicitly the style hint will default to
    /// `AnyStyle` and the style strategy to `PreferDefault.`
    ///
    /// Qt does not support style hints on X11 since this information
    /// is not provided by the window system.
    ///
    /// **See also:** StyleHint
    /// [`style_hint()`]
    /// StyleStrategy
    /// [`style_strategy()`]
    /// [`FontInfo`]
    set_style_hint(arg0: Font::StyleHint, arg1: Font::StyleStrategy),
    ///
    /// Returns the letter spacing for the font.
    ///
    /// **See also:** [`set_letter_spacing()`]
    /// [`letter_spacing_type()`]
    /// [`set_word_spacing()`]
    ///
    /// Returns the spacing type used for letter spacing.
    ///
    /// **See also:** [`letter_spacing()`]
    /// [`set_letter_spacing()`]
    /// [`set_word_spacing()`]
    letter_spacing() -> f32,
    ///
    /// Returns the spacing type used for letter spacing.
    ///
    /// **See also:** [`letter_spacing()`]
    /// [`set_letter_spacing()`]
    /// [`set_word_spacing()`]
    letter_spacing_type() -> Font::SpacingType,
    ///
    /// Sets the letter spacing for the font to *spacing* and the type
    /// of spacing to *type.*
    ///
    /// Letter spacing changes the default spacing between individual
    /// letters in the font. The spacing between the letters can be
    /// made smaller as well as larger either in percentage of the
    /// character width or in pixels, depending on the selected spacing type.
    ///
    /// **See also:** [`letter_spacing()`]
    /// [`letter_spacing_type()`]
    /// [`set_word_spacing()`]
    set_letter_spacing(stype: Font::SpacingType, spacing: f32),
    ///
    /// Returns the word spacing for the font.
    ///
    /// **See also:** [`set_word_spacing()`]
    /// [`set_letter_spacing()`]
    word_spacing() -> f32,
    ///
    /// Sets the word spacing for the font to *spacing.*
    ///
    /// Word spacing changes the default spacing between individual
    /// words. A positive value increases the word spacing
    /// by a corresponding amount of pixels, while a negative value
    /// decreases the inter-word spacing accordingly.
    ///
    /// Word spacing will not apply to writing systems, where indiviaul
    /// words are not separated by white space.
    ///
    /// **See also:** [`word_spacing()`]
    /// [`set_letter_spacing()`]
    set_word_spacing(spacing: f32),
    ///
    /// Sets the capitalization of the text in this font to *caps.*
    ///
    /// A font's capitalization makes the text appear in the selected capitalization mode.
    ///
    /// **See also:** [`capitalization()`]
    set_capitalization(arg0: Font::Capitalization),
    ///
    /// Returns the current capitalization type of the font.
    ///
    /// **See also:** [`set_capitalization()`]
    capitalization() -> Font::Capitalization,
    ///
    /// Set the preference for the hinting level of the glyphs to *hintingPreference.* This is a hint
    /// to the underlying font rendering system to use a certain level of hinting, and has varying
    /// support across platforms. See the table in the documentation for QFont::HintingPreference for
    /// more details.
    ///
    /// The default hinting preference is QFont::PreferDefaultHinting.
    set_hinting_preference(hinting_preference: Font::HintingPreference),
    ///
    /// Returns the currently preferred hinting level for glyphs rendered with this font.
    hinting_preference() -> Font::HintingPreference,
    ///
    /// Returns `true` if raw mode is used for font name matching; otherwise
    /// returns `false.`
    ///
    /// **See also:** [`set_raw_mode()`]
    raw_mode() -> bool,
    ///
    /// If *enable* is true, turns raw mode on; otherwise turns raw mode
    /// off. This function only has an effect under X11.
    ///
    /// If raw mode is enabled, Qt will search for an X font with a
    /// complete font name matching the family name, ignoring all other
    /// values set for the QFont. If the font name matches several fonts,
    /// Qt will use the first font returned by X. QFontInfo *cannot* be
    /// used to fetch information about a QFont using raw mode (it will
    /// return the values set in the QFont for all parameters, including
    /// the family name).
    ///
    /// **Warning**: Enabling raw mode has no effect since Qt 5.0.
    ///
    /// **See also:** [`raw_mode()`]
    set_raw_mode(arg0: bool),
    ///
    /// Returns `true` if a window system font exactly matching the settings
    /// of this font is available.
    ///
    /// **See also:** [`FontInfo`]
    exact_match() -> bool,
    ///
    /// Returns `true` if this font and *f* are copies of each other, i.e.
    /// one of them was created as a copy of the other and neither has
    /// been modified since. This is much stricter than equality.
    ///
    /// **See also:** [`operator()`]
    /// [`operator()`]
    is_copy_of(arg0: &FontType) -> bool,
    ///
    /// Sets a font by its system specific name.
    ///
    /// A font set with setRawName() is still a full-featured QFont. It can
    /// be queried (for example with italic()) or modified (for example with
    /// setItalic()) and is therefore also suitable for rendering rich text.
    ///
    /// If Qt's internal font database cannot resolve the raw name, the
    /// font becomes a raw font with *name* as its family.
    ///
    /// **See also:** [`raw_name()`]
    /// [`set_family()`]
    set_raw_name(arg0: String),
    ///
    /// Returns the name of the font within the underlying window system.
    ///
    /// On X11, this function will return an empty string.
    ///
    /// Using the return value of this function is usually *not* *portable.*
    ///
    /// **See also:** [`set_raw_name()`]
    raw_name() -> String,
    ///
    /// Returns the font's key, a textual representation of a font. It is
    /// typically used as the key for a cache or dictionary of fonts.
    ///
    /// **See also:** [`Map`]
    key() -> String,
    ///
    /// Returns the first family name to be used whenever *familyName* is
    /// specified. The lookup is case insensitive.
    ///
    /// If there is no substitution for *familyName,* *familyName* is
    /// returned.
    ///
    /// To obtain a list of substitutions use substitutes().
    ///
    /// **See also:** [`set_family()`]
    /// [`insert_substitutions()`]
    /// [`insert_substitution()`]
    /// [`remove_substitutions()`]
    ///
    /// Returns a list of family names to be used whenever *familyName*
    /// is specified. The lookup is case insensitive.
    ///
    /// If there is no substitution for *familyName,* an empty list is
    /// returned.
    ///
    /// **See also:** [`substitute()`]
    /// [`insert_substitutions()`]
    /// [`insert_substitution()`]
    /// [`remove_substitutions()`]
    [static] substitute(arg0: String) -> String,
    //
    // Returns a list of family names to be used whenever *familyName*
    // is specified. The lookup is case insensitive.
    //
    // If there is no substitution for *familyName,* an empty list is
    // returned.
    //
    // **See also:** [`substitute()`]
    // [`insert_substitutions()`]
    // [`insert_substitution()`]
    // [`remove_substitutions()`]
    //[static] substitutes(arg0: String) -> [String],
    //
    // Returns a sorted list of substituted family names.
    //
    // **See also:** [`insert_substitution()`]
    // [`remove_substitution()`]
    // [`substitute()`]
    //[static] substitutions() -> [String],
    ///
    /// Inserts *substituteName* into the substitution
    /// table for the family *familyName.*
    ///
    /// **See also:** [`insert_substitutions()`]
    /// [`remove_substitutions()`]
    /// [`substitutions()`]
    /// [`substitute()`]
    /// [`substitutes()`]
    ///
    /// Inserts the list of families *substituteNames* into the
    /// substitution list for *familyName.*
    ///
    /// **See also:** [`insert_substitution()`]
    /// [`remove_substitutions()`]
    /// [`substitutions()`]
    /// [`substitute()`]
    [static] insert_substitution(arg0: String, arg1: String),
    //
    // Inserts the list of families *substituteNames* into the
    // substitution list for *familyName.*
    //
    // **See also:** [`insert_substitution()`]
    // [`remove_substitutions()`]
    // [`substitutions()`]
    // [`substitute()`]
    //[static] insert_substitutions(arg0: String, arg1: &[String]),
    ///
    /// Removes all the substitutions for *familyName.*
    ///
    /// **See also:** [`insert_substitutions()`]
    /// [`insert_substitution()`]
    /// [`substitutions()`]
    /// [`substitute()`]
    [static] remove_substitutions(arg0: String),
    [static] initialize(),
    [static] cleanup(),
    [static] cache_statistics(),
    ///
    /// Returns the family name that corresponds to the current style
    /// hint.
    ///
    /// **See also:** StyleHint
    /// [`style_hint()`]
    /// [`set_style_hint()`]
    default_family() -> String,
    ///
    /// Returns the font family name.
    ///
    /// The current implementation tries a wide variety of common fonts,
    /// returning the first one it finds. Is is possible that no family is
    /// found in which case an empty string is returned.
    ///
    /// **See also:** [`last_resort_font()`]
    last_resort_family() -> String,
    ///
    /// Returns a font name for the font matching algorithm.
    /// This is used if the last resort family is not available. It will
    /// always return a name, if necessary returning something like
    /// or .
    ///
    /// The current implementation tries a wide variety of common fonts,
    /// returning the first one it finds. The implementation may change
    /// at any time, but this function will always return a string
    /// containing something.
    ///
    /// It is theoretically possible that there really isn't a
    /// lastResortFont() in which case Qt will abort with an error
    /// message. We have not been able to identify a case where this
    /// happens. Please [report it as a bug](bughowto.html)
    /// if
    /// it does, preferably with a list of the fonts you have installed.
    ///
    /// **See also:** [`last_resort_family()`]
    last_resort_font() -> String,
    ///
    /// Returns a new QFont that has attributes copied from *other* that
    /// have not been previously set on this font.
    resolve(arg0: &FontType) -> Font,
    ///
    /// Returns a new QFont that has attributes copied from *other* that
    /// have not been previously set on this font.
    [org_name(resolve)]
    resolve_2() -> u64,
    ///
    /// Returns a new QFont that has attributes copied from *other* that
    /// have not been previously set on this font.
    [org_name(resolve)]
    resolve_3(mask: u64),
}

[org_name(QFont)]
enum StyleHint {
    /// is a synonym for `SansSerif.`
    Helvetica = 0,
    /// the font matcher prefer sans serif fonts.
    SansSerif = 0,
    /// is a synonym for `Serif.`
    Times = 1,
    /// the font matcher prefers serif fonts.
    Serif = 1,
    /// a synonym for `TypeWriter.`
    Courier = 2,
    /// the font matcher prefers fixed pitch fonts.
    TypeWriter = 2,
    /// the font matcher prefers decorative fonts.
    OldEnglish = 3,
    /// is a synonym for `OldEnglish.`
    Decorative = 3,
    /// the font matcher prefers system fonts.
    System = 4,
    /// leaves the font matching algorithm to choose the family. This is the default.
    AnyStyle = 5,
    /// the font matcher prefers fonts that map to the CSS generic font-family 'cursive'.
    Cursive = 6,
    /// the font matcher prefers fonts that map to the CSS generic font-family 'monospace'.
    Monospace = 7,
    /// the font matcher prefers fonts that map to the CSS generic font-family 'fantasy'.
    Fantasy = 8,
}

[org_name(QFont)]
enum StyleStrategy {
    /// the default style strategy. It does not prefer any type of font.
    PreferDefault = 1,
    /// prefers bitmap fonts (as opposed to outline fonts).
    PreferBitmap = 2,
    /// prefers device fonts.
    PreferDevice = 4,
    /// prefers outline fonts (as opposed to bitmap fonts).
    PreferOutline = 8,
    /// forces the use of outline fonts.
    ForceOutline = 16,
    /// prefer an exact match. The font matcher will try to use the exact font size that has been specified.
    PreferMatch = 32,
    /// prefer the best quality font. The font matcher will use the nearest standard point size that the font supports.
    PreferQuality = 64,
    /// antialias if possible.
    PreferAntialias = 128,
    /// don't antialias the fonts.
    NoAntialias = 256,
    /// forces the use of OpenGL compatible fonts.
    OpenGLCompatible = 512,
    /// forces the use of integer values in font engines that support fractional font metrics.
    ForceIntegerMetrics = 1024,
    /// avoid subpixel antialiasing on the fonts if possible.
    NoSubpixelAntialias = 2048,
    /// Sometimes, a font will apply complex rules to a set of characters in order to display them correctly. In some writing systems, such as Brahmic scripts, this is required in order for the text to be legible, but in e.g. Latin script, it is merely a cosmetic feature. The PreferNoShaping flag will disable all such features when they are not required, which will improve performance in most cases (since Qt 5.10). Any of these may be OR-ed with one of these flags:
    PreferNoShaping = 4096,
    /// If the font selected for a certain writing system does not contain a character requested to draw, then Qt automatically chooses a similar looking font that contains the character. The NoFontMerging flag disables this feature. Please note that enabling this flag will not prevent Qt from automatically picking a suitable font when the selected font does not support the writing system of the text.
    NoFontMerging = 32768,
}

[org_name(QFont)]
enum HintingPreference {
    /// Use the default hinting level for the target platform.
    PreferDefaultHinting = 0,
    /// If possible, render text without hinting the outlines of the glyphs. The text layout will be typographically accurate and scalable, using the same metrics as are used e.g. when printing.
    PreferNoHinting = 1,
    /// If possible, render text with no horizontal hinting, but align glyphs to the pixel grid in the vertical direction. The text will appear crisper on displays where the density is too low to give an accurate rendering of the glyphs. But since the horizontal metrics of the glyphs are unhinted, the text's layout will be scalable to higher density devices (such as printers) without impacting details such as line breaks.
    PreferVerticalHinting = 2,
    /// If possible, render text with hinting in both horizontal and vertical directions. The text will be altered to optimize legibility on the target device, but since the metrics will depend on the target size of the text, the positions of glyphs, line breaks, and other typographical detail will not scale, meaning that a text layout may look different on devices with different pixel densities. Please note that this enum only describes a preference, as the full range of hinting levels are not supported on all of Qt's supported platforms. The following table details the effect of a given hinting preference on a selected set of target platforms. *
    PreferFullHinting = 3,
}

[org_name(QFont)]
enum Weight {
    /// 0
    Thin = 0,
    /// 12
    ExtraLight = 12,
    /// 25
    Light = 25,
    /// 50
    Normal = 50,
    /// 57
    Medium = 57,
    /// 63
    DemiBold = 63,
    /// 75
    Bold = 75,
    /// 81
    ExtraBold = 81,
    /// 87
    Black = 87,
}

[org_name(QFont)]
enum FontStyle {
    /// Normal glyphs used in unstyled text.
    StyleNormal = 0,
    /// Italic glyphs that are specifically designed for the purpose of representing italicized text.
    StyleItalic = 1,
    /// Glyphs with an italic appearance that are typically based on the unstyled glyphs, but are not fine-tuned for the purpose of representing italicized text.
    StyleOblique = 2,
}

[org_name(QFont)]
enum Stretch {
    /// 0 Accept any stretch matched using the other QFont properties (added in Qt 5.8)
    AnyStretch = 0,
    /// 50
    UltraCondensed = 50,
    /// 62
    ExtraCondensed = 62,
    /// 75
    Condensed = 75,
    /// 87
    SemiCondensed = 87,
    /// 100
    Unstretched = 100,
    /// 112
    SemiExpanded = 112,
    /// 125
    Expanded = 125,
    /// 150
    ExtraExpanded = 150,
    /// 200
    UltraExpanded = 200,
}

[org_name(QFont)]
enum Capitalization {
    /// This is the normal text rendering option where no capitalization change is applied.
    MixedCase = 0,
    /// This alters the text to be rendered in all uppercase type.
    AllUppercase = 1,
    /// This alters the text to be rendered in all lowercase type.
    AllLowercase = 2,
    /// This alters the text to be rendered in small-caps type.
    SmallCaps = 3,
    /// This alters the text to be rendered with the first character of each word as an uppercase character.
    Capitalize = 4,
}

[org_name(QFont)]
enum SpacingType {
    /// A value of 100 will keep the spacing unchanged; a value of 200 will enlarge the spacing after a character by the width of the character itself.
    PercentageSpacing = 0,
    /// A positive value increases the letter spacing by the corresponding pixels; a negative value decreases the spacing.
    AbsoluteSpacing = 1,
}

// vim: syntax=rust expandtab ts=4 sw=4
