///
/// A rectangle is normally expressed as a top-left corner and a
/// size. The size (width and height) of a QRectF is always equivalent
/// to the mathematical rectangle that forms the basis for its
/// rendering.
///
/// A QRectF can be constructed with a set of left, top, width and
/// height coordinates, or from a QPointF and a QSizeF. The following
/// code creates two identical rectangles.
///
/// There is also a third constructor creating a QRectF from a QRect,
/// and a corresponding toRect() function that returns a QRect object
/// based on the values of this rectangle (note that the coordinates
/// in the returned rectangle are rounded to the nearest integer).
///
/// The QRectF class provides a collection of functions that return
/// the various rectangle coordinates, and enable manipulation of
/// these. QRectF also provides functions to move the rectangle
/// relative to the various coordinates. In addition there is a
/// moveTo() function that moves the rectangle, leaving its top left
/// corner at the given coordinates. Alternatively, the translate()
/// function moves the rectangle the given offset relative to the
/// current position, and the translated() function returns a
/// translated copy of this rectangle.
///
/// The size() function returns the rectange's dimensions as a
/// QSizeF. The dimensions can also be retrieved separately using the
/// width() and height() functions. To manipulate the dimensions use
/// the setSize(), setWidth() or setHeight() functions. Alternatively,
/// the size can be changed by applying either of the functions
/// setting the rectangle coordinates, for example, setBottom() or
/// setRight().
///
/// The contains() function tells whether a given point is inside the
/// rectangle or not, and the intersects() function returns `true` if
/// this rectangle intersects with a given rectangle (otherwise
/// false). The QRectF class also provides the intersected() function
/// which returns the intersection rectangle, and the united() function
/// which returns the rectangle that encloses the given rectangle and
/// this:
///
/// * ![qrect-intersect.png](qrect-intersect.png)
///
/// * ![qrect-unite.png](qrect-unite.png)
///
/// * intersected()
/// * united()
///
/// The isEmpty() function returns `true` if the rectangle's width or
/// height is less than, or equal to, 0. Note that an empty rectangle
/// is not valid: The isValid() function returns `true` if both width
/// and height is larger than 0. A null rectangle (isNull() == true)
/// on the other hand, has both width and height set to 0.
///
/// Note that due to the way QRect and QRectF are defined, an
/// empty QRectF is defined in essentially the same way as QRect.
///
/// Finally, QRectF objects can be streamed as well as compared.
///
/// # Rendering
///
/// When using an [anti-aliased](QPainter::Antialiasing)
/// painter,
/// the boundary line of a QRectF will be rendered symmetrically on both
/// sides of the mathematical rectangle's boundary line. But when
/// using an aliased painter (the default) other rules apply.
///
/// Then, when rendering with a one pixel wide pen the QRectF's boundary
/// line will be rendered to the right and below the mathematical
/// rectangle's boundary line.
///
/// When rendering with a two pixels wide pen the boundary line will
/// be split in the middle by the mathematical rectangle. This will be
/// the case whenever the pen is set to an even number of pixels,
/// while rendering with a pen with an odd number of pixels, the spare
/// pixel will be rendered to the right and below the mathematical
/// rectangle as in the one pixel case.
///
/// * ![qrect-diagram-zero.png](qrect-diagram-zero.png)
///
/// * ![qrectf-diagram-one.png](qrectf-diagram-one.png)
///
/// * Logical representation
/// * One pixel wide pen
///
/// * ![qrectf-diagram-two.png](qrectf-diagram-two.png)
///
/// * ![qrectf-diagram-three.png](qrectf-diagram-three.png)
///
/// * Two pixel wide pen
/// * Three pixel wide pen
///
/// # Coordinates
///
/// The QRectF class provides a collection of functions that return
/// the various rectangle coordinates, and enable manipulation of
/// these. QRectF also provides functions to move the rectangle
/// relative to the various coordinates.
///
/// For example: the bottom(), setBottom() and moveBottom() functions:
/// bottom() returns the y-coordinate of the rectangle's bottom edge,
/// setBottom() sets the bottom edge of the rectangle to the given y
/// coordinate (it may change the height, but will never change the
/// rectangle's top edge) and moveBottom() moves the entire rectangle
/// vertically, leaving the rectangle's bottom edge at the given y
/// coordinate and its size unchanged.
///
/// ![qrectf-coordinates.png](qrectf-coordinates.png)
///
/// It is also possible to add offsets to this rectangle's coordinates
/// using the adjust() function, as well as retrieve a new rectangle
/// based on adjustments of the original one using the adjusted()
/// function. If either of the width and height is negative, use the
/// normalized() function to retrieve a rectangle where the corners
/// are swapped.
///
/// In addition, QRectF provides the getCoords() function which extracts
/// the position of the rectangle's top-left and bottom-right corner,
/// and the getRect() function which extracts the rectangle's top-left
/// corner, width and height. Use the setCoords() and setRect()
/// function to manipulate the rectangle's coordinates and dimensions
/// in one go.
///
/// **See also:** [`Rect`]
/// [`Region`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct RectF {
    ///
    /// Returns `true` if the rectangle is a null rectangle, otherwise returns `false.`
    ///
    /// A null rectangle has both the width and the height set to 0. A
    /// null rectangle is also empty, and hence not valid.
    ///
    /// **See also:** [`is_empty()`]
    /// [`is_valid()`]
    is_null() -> bool,
    ///
    /// Returns `true` if the rectangle is empty, otherwise returns `false.`
    ///
    /// An empty rectangle has width() <= 0 or height() <= 0. An empty
    /// rectangle is not valid (i.e., isEmpty() == !isValid()).
    ///
    /// Use the normalized() function to retrieve a rectangle where the
    /// corners are swapped.
    ///
    /// **See also:** [`is_null()`]
    /// [`is_valid()`]
    /// [`normalized()`]
    is_empty() -> bool,
    ///
    /// Returns `true` if the rectangle is valid, otherwise returns `false.`
    ///
    /// A valid rectangle has a width() > 0 and height() > 0. Note that
    /// non-trivial operations like intersections are not defined for
    /// invalid rectangles. A valid rectangle is not empty (i.e., isValid()
    /// == !isEmpty()).
    ///
    /// **See also:** [`is_null()`]
    /// [`is_empty()`]
    /// [`normalized()`]
    is_valid() -> bool,
    ///
    /// Returns a normalized rectangle; i.e., a rectangle that has a
    /// non-negative width and height.
    ///
    /// If width() < 0 the function swaps the left and right corners, and
    /// it swaps the top and bottom corners if height() < 0.
    ///
    /// **See also:** [`is_valid()`]
    /// [`is_empty()`]
    normalized() -> RectF,
    ///
    /// Returns the x-coordinate of the rectangle's left edge. Equivalent
    /// to x().
    ///
    /// **See also:** [`set_left()`]
    /// [`top_left()`]
    /// [`bottom_left()`]
    left() -> f32,
    ///
    /// Returns the y-coordinate of the rectangle's top edge. Equivalent
    /// to y().
    ///
    /// **See also:** [`set_top()`]
    /// [`top_left()`]
    /// [`top_right()`]
    ///
    /// Returns the position of the rectangle's top-left corner.
    ///
    /// **See also:** [`set_top_left()`]
    /// [`top()`]
    /// [`left()`]
    ///
    /// Returns the position of the rectangle's top-right corner.
    ///
    /// **See also:** [`set_top_right()`]
    /// [`top()`]
    /// [`right()`]
    top() -> f32,
    ///
    /// Returns the x-coordinate of the rectangle's right edge.
    ///
    /// **See also:** [`set_right()`]
    /// [`top_right()`]
    /// [`bottom_right()`]
    right() -> f32,
    ///
    /// Returns the y-coordinate of the rectangle's bottom edge.
    ///
    /// **See also:** [`set_bottom()`]
    /// [`bottom_left()`]
    /// [`bottom_right()`]
    ///
    /// Returns the position of the rectangle's bottom-right corner.
    ///
    /// **See also:** [`set_bottom_right()`]
    /// [`bottom()`]
    /// [`right()`]
    ///
    /// Returns the position of the rectangle's bottom-left corner.
    ///
    /// **See also:** [`set_bottom_left()`]
    /// [`bottom()`]
    /// [`left()`]
    bottom() -> f32,
    ///
    /// Returns the x-coordinate of the rectangle's left edge. Equivalent
    /// to left().
    ///
    /// **See also:** [`set_x()`]
    /// [`y()`]
    /// [`top_left()`]
    x() -> f32,
    ///
    /// Returns the y-coordinate of the rectangle's top edge. Equivalent
    /// to top().
    ///
    /// **See also:** [`set_y()`]
    /// [`x()`]
    /// [`top_left()`]
    y() -> f32,
    ///
    /// Sets the left edge of the rectangle to the given *x*
    /// coordinate. May change the width, but will never change the right
    /// edge of the rectangle.
    ///
    /// Equivalent to setX().
    ///
    /// **See also:** [`left()`]
    /// [`move_left()`]
    set_left(pos: f32),
    ///
    /// Sets the top edge of the rectangle to the given *y* coordinate. May
    /// change the height, but will never change the bottom edge of the
    /// rectangle.
    ///
    /// Equivalent to setY().
    ///
    /// **See also:** [`top()`]
    /// [`move_top()`]
    ///
    /// Set the top-left corner of the rectangle to the given *position.* May change the size, but will never change the
    /// bottom-right corner of the rectangle.
    ///
    /// **See also:** [`top_left()`]
    /// [`move_top_left()`]
    ///
    /// Set the top-right corner of the rectangle to the given *position.* May change the size, but will never change the
    /// bottom-left corner of the rectangle.
    ///
    /// **See also:** [`top_right()`]
    /// [`move_top_right()`]
    set_top(pos: f32),
    ///
    /// Sets the right edge of the rectangle to the given *x*
    /// coordinate. May change the width, but will never change the left
    /// edge of the rectangle.
    ///
    /// **See also:** [`right()`]
    /// [`move_right()`]
    set_right(pos: f32),
    ///
    /// Sets the bottom edge of the rectangle to the given *y*
    /// coordinate. May change the height, but will never change the top
    /// edge of the rectangle.
    ///
    /// **See also:** [`bottom()`]
    /// [`move_bottom()`]
    ///
    /// Set the bottom-right corner of the rectangle to the given *position.* May change the size, but will never change the
    /// top-left corner of the rectangle.
    ///
    /// **See also:** [`bottom_right()`]
    /// [`move_bottom_right()`]
    ///
    /// Set the bottom-left corner of the rectangle to the given *position.* May change the size, but will never change the
    /// top-right corner of the rectangle.
    ///
    /// **See also:** [`bottom_left()`]
    /// [`move_bottom_left()`]
    set_bottom(pos: f32),
    ///
    /// Sets the left edge of the rectangle to the given *x*
    /// coordinate. May change the width, but will never change the right
    /// edge of the rectangle.
    ///
    /// Equivalent to setLeft().
    ///
    /// **See also:** [`x()`]
    /// [`set_y()`]
    /// [`set_top_left()`]
    set_x(pos: f32),
    ///
    /// Sets the top edge of the rectangle to the given *y*
    /// coordinate. May change the height, but will never change the
    /// bottom edge of the rectangle.
    ///
    /// Equivalent to setTop().
    ///
    /// **See also:** [`y()`]
    /// [`set_x()`]
    /// [`set_top_left()`]
    set_y(pos: f32),
    ///
    /// Returns the position of the rectangle's top-left corner.
    ///
    /// **See also:** [`set_top_left()`]
    /// [`top()`]
    /// [`left()`]
    top_left() -> PointF,
    ///
    /// Returns the position of the rectangle's bottom-right corner.
    ///
    /// **See also:** [`set_bottom_right()`]
    /// [`bottom()`]
    /// [`right()`]
    bottom_right() -> PointF,
    ///
    /// Returns the position of the rectangle's top-right corner.
    ///
    /// **See also:** [`set_top_right()`]
    /// [`top()`]
    /// [`right()`]
    top_right() -> PointF,
    ///
    /// Returns the position of the rectangle's bottom-left corner.
    ///
    /// **See also:** [`set_bottom_left()`]
    /// [`bottom()`]
    /// [`left()`]
    bottom_left() -> PointF,
    ///
    /// Returns the center point of the rectangle.
    ///
    /// **See also:** [`move_center()`]
    center() -> PointF,
    ///
    /// Set the top-left corner of the rectangle to the given *position.* May change the size, but will never change the
    /// bottom-right corner of the rectangle.
    ///
    /// **See also:** [`top_left()`]
    /// [`move_top_left()`]
    set_top_left(p: &PointFType),
    ///
    /// Set the bottom-right corner of the rectangle to the given *position.* May change the size, but will never change the
    /// top-left corner of the rectangle.
    ///
    /// **See also:** [`bottom_right()`]
    /// [`move_bottom_right()`]
    set_bottom_right(p: &PointFType),
    ///
    /// Set the top-right corner of the rectangle to the given *position.* May change the size, but will never change the
    /// bottom-left corner of the rectangle.
    ///
    /// **See also:** [`top_right()`]
    /// [`move_top_right()`]
    set_top_right(p: &PointFType),
    ///
    /// Set the bottom-left corner of the rectangle to the given *position.* May change the size, but will never change the
    /// top-right corner of the rectangle.
    ///
    /// **See also:** [`bottom_left()`]
    /// [`move_bottom_left()`]
    set_bottom_left(p: &PointFType),
    ///
    /// Moves the rectangle horizontally, leaving the rectangle's left
    /// edge at the given *x* coordinate. The rectangle's size is
    /// unchanged.
    ///
    /// **See also:** [`left()`]
    /// [`set_left()`]
    /// [`move_right()`]
    move_left(pos: f32),
    ///
    /// Moves the rectangle vertically, leaving the rectangle's top line
    /// at the given *y* coordinate. The rectangle's size is unchanged.
    ///
    /// **See also:** [`top()`]
    /// [`set_top()`]
    /// [`move_bottom()`]
    ///
    /// Moves the rectangle, leaving the top-left corner at the given *position.* The rectangle's size is unchanged.
    ///
    /// **See also:** [`set_top_left()`]
    /// [`move_top()`]
    /// [`move_left()`]
    ///
    /// Moves the rectangle, leaving the top-right corner at the given
    /// *position.* The rectangle's size is unchanged.
    ///
    /// **See also:** [`set_top_right()`]
    /// [`move_top()`]
    /// [`move_right()`]
    move_top(pos: f32),
    ///
    /// Moves the rectangle horizontally, leaving the rectangle's right
    /// edge at the given *x* coordinate. The rectangle's size is
    /// unchanged.
    ///
    /// **See also:** [`right()`]
    /// [`set_right()`]
    /// [`move_left()`]
    move_right(pos: f32),
    ///
    /// Moves the rectangle vertically, leaving the rectangle's bottom
    /// edge at the given *y* coordinate. The rectangle's size is
    /// unchanged.
    ///
    /// **See also:** [`bottom()`]
    /// [`set_bottom()`]
    /// [`move_top()`]
    ///
    /// Moves the rectangle, leaving the bottom-right corner at the given
    /// *position.* The rectangle's size is unchanged.
    ///
    /// **See also:** [`set_bottom_right()`]
    /// [`move_bottom()`]
    /// [`move_right()`]
    ///
    /// Moves the rectangle, leaving the bottom-left corner at the given
    /// *position.* The rectangle's size is unchanged.
    ///
    /// **See also:** [`set_bottom_left()`]
    /// [`move_bottom()`]
    /// [`move_left()`]
    move_bottom(pos: f32),
    ///
    /// Moves the rectangle, leaving the top-left corner at the given *position.* The rectangle's size is unchanged.
    ///
    /// **See also:** [`set_top_left()`]
    /// [`move_top()`]
    /// [`move_left()`]
    move_top_left(p: &PointFType),
    ///
    /// Moves the rectangle, leaving the bottom-right corner at the given
    /// *position.* The rectangle's size is unchanged.
    ///
    /// **See also:** [`set_bottom_right()`]
    /// [`move_bottom()`]
    /// [`move_right()`]
    move_bottom_right(p: &PointFType),
    ///
    /// Moves the rectangle, leaving the top-right corner at the given
    /// *position.* The rectangle's size is unchanged.
    ///
    /// **See also:** [`set_top_right()`]
    /// [`move_top()`]
    /// [`move_right()`]
    move_top_right(p: &PointFType),
    ///
    /// Moves the rectangle, leaving the bottom-left corner at the given
    /// *position.* The rectangle's size is unchanged.
    ///
    /// **See also:** [`set_bottom_left()`]
    /// [`move_bottom()`]
    /// [`move_left()`]
    move_bottom_left(p: &PointFType),
    ///
    /// Moves the rectangle, leaving the center point at the given *position.* The rectangle's size is unchanged.
    ///
    /// **See also:** [`center()`]
    move_center(p: &PointFType),
    ///
    /// Moves the rectangle vertically, leaving the rectangle's top line
    /// at the given *y* coordinate. The rectangle's size is unchanged.
    ///
    /// **See also:** [`top()`]
    /// [`set_top()`]
    /// [`move_bottom()`]
    ///
    /// Moves the rectangle, leaving the top-left corner at the given *position.* The rectangle's size is unchanged.
    ///
    /// **See also:** [`set_top_left()`]
    /// [`move_top()`]
    /// [`move_left()`]
    ///
    /// Moves the rectangle, leaving the top-right corner at the given
    /// *position.* The rectangle's size is unchanged.
    ///
    /// **See also:** [`set_top_right()`]
    /// [`move_top()`]
    /// [`move_right()`]
    ///
    /// Moves the rectangle, leaving the top-left corner at the given
    /// position ( *x,* *y).* The rectangle's size is unchanged.
    ///
    /// **See also:** [`translate()`]
    /// [`move_top_left()`]
    ///
    /// **Overloads**
    /// Moves the rectangle, leaving the top-left corner at the given *position.*
    move_to(x: f32, y: f32),
    ///
    /// Moves the rectangle vertically, leaving the rectangle's top line
    /// at the given *y* coordinate. The rectangle's size is unchanged.
    ///
    /// **See also:** [`top()`]
    /// [`set_top()`]
    /// [`move_bottom()`]
    ///
    /// Moves the rectangle, leaving the top-left corner at the given *position.* The rectangle's size is unchanged.
    ///
    /// **See also:** [`set_top_left()`]
    /// [`move_top()`]
    /// [`move_left()`]
    ///
    /// Moves the rectangle, leaving the top-right corner at the given
    /// *position.* The rectangle's size is unchanged.
    ///
    /// **See also:** [`set_top_right()`]
    /// [`move_top()`]
    /// [`move_right()`]
    ///
    /// Moves the rectangle, leaving the top-left corner at the given
    /// position ( *x,* *y).* The rectangle's size is unchanged.
    ///
    /// **See also:** [`translate()`]
    /// [`move_top_left()`]
    ///
    /// **Overloads**
    /// Moves the rectangle, leaving the top-left corner at the given *position.*
    [org_name(moveTo)]
    move_to_2(p: &PointFType),
    ///
    /// Sets the coordinates of the rectangle's top-left corner to ( *x,*
    /// *y),* and its size to the given *width* and *height.*
    ///
    /// **See also:** [`get_rect()`]
    /// [`set_coords()`]
    set_rect(x: f32, y: f32, w: f32, h: f32),
    //
    // Extracts the position of the rectangle's top-left corner to * *x* and
    // * *y,* and its dimensions to * *width* and * *height.*
    //
    // **See also:** [`set_rect()`]
    // [`get_coords()`]
    //get_rect(x: *f32, y: *f32, w: *f32, h: *f32),
    ///
    /// Sets the coordinates of the rectangle's top-left corner to ( *x1,*
    /// *y1),* and the coordinates of its bottom-right corner to ( *x2,*
    /// *y2).*
    ///
    /// **See also:** [`get_coords()`]
    /// [`set_rect()`]
    set_coords(x1: f32, y1: f32, x2: f32, y2: f32),
    //
    // Extracts the position of the rectangle's top-left corner to * *x1*
    // and * *y1,* and the position of the bottom-right corner to * *x2* and
    // * *y2.*
    //
    // **See also:** [`set_coords()`]
    // [`get_rect()`]
    //get_coords(x1: *f32, y1: *f32, x2: *f32, y2: *f32),
    ///
    /// Returns a new rectangle with *dx1,* *dy1,* *dx2* and *dy2*
    /// added respectively to the existing coordinates of this rectangle.
    ///
    /// **See also:** [`adjust()`]
    ///
    /// Adds *dx1,* *dy1,* *dx2* and *dy2* respectively to the
    /// existing coordinates of the rectangle.
    ///
    /// **See also:** [`adjusted()`]
    /// [`set_rect()`]
    adjust(x1: f32, y1: f32, x2: f32, y2: f32),
    ///
    /// Returns a new rectangle with *dx1,* *dy1,* *dx2* and *dy2*
    /// added respectively to the existing coordinates of this rectangle.
    ///
    /// **See also:** [`adjust()`]
    adjusted(x1: f32, y1: f32, x2: f32, y2: f32) -> RectF,
    ///
    /// Returns the size of the rectangle.
    ///
    /// **See also:** [`set_size()`]
    /// [`width()`]
    /// [`height()`]
    size() -> SizeF,
    ///
    /// Returns the width of the rectangle.
    ///
    /// **See also:** [`set_width()`]
    /// [`height()`]
    /// [`size()`]
    width() -> f32,
    ///
    /// Returns the height of the rectangle.
    ///
    /// **See also:** [`set_height()`]
    /// [`width()`]
    /// [`size()`]
    height() -> f32,
    ///
    /// Sets the width of the rectangle to the given *width.* The right
    /// edge is changed, but not the left one.
    ///
    /// **See also:** [`width()`]
    /// [`set_size()`]
    set_width(w: f32),
    ///
    /// Sets the height of the rectangle to the given *height.* The bottom
    /// edge is changed, but not the top one.
    ///
    /// **See also:** [`height()`]
    /// [`set_size()`]
    set_height(h: f32),
    ///
    /// Sets the size of the rectangle to the given *size.* The top-left
    /// corner is not moved.
    ///
    /// **See also:** [`size()`]
    /// [`set_width()`]
    /// [`set_height()`]
    set_size(s: &SizeFType),
    ///
    /// Returns `true` if the given *point* is inside or on the edge of the
    /// rectangle; otherwise returns `false.`
    ///
    /// **See also:** [`intersects()`]
    ///
    /// **Overloads**
    /// Returns `true` if the point ( *x,* *y)* is inside or on the edge of
    /// the rectangle; otherwise returns `false.`
    ///
    /// **Overloads**
    /// Returns `true` if the given *rectangle* is inside this rectangle;
    /// otherwise returns `false.`
    contains(r: &RectFType) -> bool,
    ///
    /// Returns `true` if the given *point* is inside or on the edge of the
    /// rectangle; otherwise returns `false.`
    ///
    /// **See also:** [`intersects()`]
    ///
    /// **Overloads**
    /// Returns `true` if the point ( *x,* *y)* is inside or on the edge of
    /// the rectangle; otherwise returns `false.`
    ///
    /// **Overloads**
    /// Returns `true` if the given *rectangle* is inside this rectangle;
    /// otherwise returns `false.`
    [org_name(contains)]
    contains_2(p: &PointFType) -> bool,
    ///
    /// Returns `true` if the given *point* is inside or on the edge of the
    /// rectangle; otherwise returns `false.`
    ///
    /// **See also:** [`intersects()`]
    ///
    /// **Overloads**
    /// Returns `true` if the point ( *x,* *y)* is inside or on the edge of
    /// the rectangle; otherwise returns `false.`
    ///
    /// **Overloads**
    /// Returns `true` if the given *rectangle* is inside this rectangle;
    /// otherwise returns `false.`
    [org_name(contains)]
    contains_3(x: f32, y: f32) -> bool,
    ///
    /// Returns the bounding rectangle of this rectangle and the given *rectangle.*
    ///
    /// ![qrect-unite.png](qrect-unite.png)
    ///
    /// **See also:** [`intersected()`]
    united(other: &RectFType) -> RectF,
    ///
    /// Returns the intersection of this rectangle and the given *rectangle.* Note that `r.intersected(s)` is equivalent to `r & s` .
    ///
    /// ![qrect-intersect.png](qrect-intersect.png)
    ///
    /// **See also:** [`intersects()`]
    /// [`united()`]
    /// [`operator()`]
    intersected(other: &RectFType) -> RectF,
    ///
    /// Returns `true` if this rectangle intersects with the given *rectangle* (i.e. there is a non-empty area of overlap between
    /// them), otherwise returns `false.`
    ///
    /// The intersection rectangle can be retrieved using the intersected()
    /// function.
    ///
    /// **See also:** [`contains()`]
    intersects(r: &RectFType) -> bool,
    ///
    /// Returns a rectangle grown by the *margins.*
    ///
    /// **See also:** [`operator()`]
    /// [`margins_removed()`]
    /// [`operator()`]
    //margins_added(margins: &MarginsFType) -> RectF,
    ///
    /// Removes the *margins* from the rectangle, shrinking it.
    ///
    /// **See also:** [`margins_added()`]
    /// [`operator()`]
    //margins_removed(margins: &MarginsFType) -> RectF,
    ///
    /// Returns a QRect based on the values of this rectangle. Note that the
    /// coordinates in the returned rectangle are rounded to the nearest integer.
    ///
    /// **See also:** [`q_rect_f()`]
    /// [`to_aligned_rect()`]
    to_rect() -> Rect,
    ///
    /// Returns a QRect based on the values of this rectangle that is the
    /// smallest possible integer rectangle that completely contains this
    /// rectangle.
    ///
    /// **See also:** [`to_rect()`]
    to_aligned_rect() -> Rect,
}

// vim: syntax=rust expandtab ts=4 sw=4
