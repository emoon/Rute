// This file is auto-generated by rute_gen. DO NOT EDIT.
use std::cell::Cell;
use std::rc::Rc;

#[allow(unused_imports)]
use std::marker::PhantomData;

#[allow(unused_imports)]
use std::os::raw::c_void;

#[allow(unused_imports)]
use std::mem::transmute;

#[allow(unused_imports)]
use std::ffi::{CStr, CString};

use rute_ffi_base::*;

#[allow(unused_imports)]
use auto::*;

#[derive(Clone)]
pub struct Rect<'a> {
    pub data: Rc<Cell<Option<*const RUBase>>>,
    pub all_funcs: *const RURectAllFuncs,
    pub owned: bool,
    pub _marker: PhantomData<::std::cell::Cell<&'a ()>>,
}

impl<'a> Rect<'a> {
    pub fn new() -> Rect<'a> {
        let data = Rc::new(Cell::new(None));

        let ffi_data = unsafe {
            ((*rute_ffi_get()).create_rect)(
                ::std::ptr::null(),
                transmute(rute_object_delete_callback as usize),
                Rc::into_raw(data.clone()) as *const c_void,
            )
        };

        data.set(Some(ffi_data.qt_data));

        Rect {
            data,
            all_funcs: ffi_data.all_funcs,
            owned: true,
            _marker: PhantomData,
        }
    }
    pub fn new_from_rc(ffi_data: RURect) -> Rect<'a> {
        Rect {
            data: unsafe { Rc::from_raw(ffi_data.host_data as *const Cell<Option<*const RUBase>>) },
            all_funcs: ffi_data.all_funcs,
            owned: false,
            _marker: PhantomData,
        }
    }

    pub fn new_from_owned(ffi_data: RURect) -> Rect<'a> {
        Rect {
            data: Rc::new(Cell::new(Some(ffi_data.qt_data as *const RUBase))),
            all_funcs: ffi_data.all_funcs,
            owned: true,
            _marker: PhantomData,
        }
    }
}
pub trait RectType<'a> {
    fn is_null(&self) -> bool {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).is_null)(obj_data);
            ret_val
        }
    }

    fn is_empty(&self) -> bool {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).is_empty)(obj_data);
            ret_val
        }
    }

    fn is_valid(&self) -> bool {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).is_valid)(obj_data);
            ret_val
        }
    }

    fn left(&self) -> i32 {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).left)(obj_data);
            ret_val
        }
    }

    fn top(&self) -> i32 {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).top)(obj_data);
            ret_val
        }
    }

    fn right(&self) -> i32 {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).right)(obj_data);
            ret_val
        }
    }

    fn bottom(&self) -> i32 {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).bottom)(obj_data);
            ret_val
        }
    }

    fn x(&self) -> i32 {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).x)(obj_data);
            ret_val
        }
    }

    fn y(&self) -> i32 {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).y)(obj_data);
            ret_val
        }
    }

    fn set_left(&self, pos: i32) -> &Self {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            ((*funcs).set_left)(obj_data, pos);
        }
        self
    }

    fn set_top(&self, pos: i32) -> &Self {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            ((*funcs).set_top)(obj_data, pos);
        }
        self
    }

    fn set_right(&self, pos: i32) -> &Self {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            ((*funcs).set_right)(obj_data, pos);
        }
        self
    }

    fn set_bottom(&self, pos: i32) -> &Self {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            ((*funcs).set_bottom)(obj_data, pos);
        }
        self
    }

    fn set_x(&self, x: i32) -> &Self {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            ((*funcs).set_x)(obj_data, x);
        }
        self
    }

    fn set_y(&self, y: i32) -> &Self {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            ((*funcs).set_y)(obj_data, y);
        }
        self
    }

    fn move_left(&self, pos: i32) -> &Self {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            ((*funcs).move_left)(obj_data, pos);
        }
        self
    }

    fn move_top(&self, pos: i32) -> &Self {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            ((*funcs).move_top)(obj_data, pos);
        }
        self
    }

    fn move_right(&self, pos: i32) -> &Self {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            ((*funcs).move_right)(obj_data, pos);
        }
        self
    }

    fn move_bottom(&self, pos: i32) -> &Self {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            ((*funcs).move_bottom)(obj_data, pos);
        }
        self
    }

    fn move_to(&self, x: i32, t: i32) -> &Self {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            ((*funcs).move_to)(obj_data, x, t);
        }
        self
    }

    fn width(&self) -> i32 {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).width)(obj_data);
            ret_val
        }
    }

    fn height(&self) -> i32 {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).height)(obj_data);
            ret_val
        }
    }

    fn set_width(&self, w: i32) -> &Self {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            ((*funcs).set_width)(obj_data, w);
        }
        self
    }

    fn set_height(&self, h: i32) -> &Self {
        let (obj_data, funcs) = self.get_rect_obj_funcs();
        unsafe {
            ((*funcs).set_height)(obj_data, h);
        }
        self
    }

    fn get_rect_obj_funcs(&self) -> (*const RUBase, *const RURectFuncs);
}

impl<'a> RectType<'a> for Rect<'a> {
    fn get_rect_obj_funcs(&self) -> (*const RUBase, *const RURectFuncs) {
        let obj = self.data.get().unwrap();
        unsafe { (obj, (*self.all_funcs).rect_funcs) }
    }
}
