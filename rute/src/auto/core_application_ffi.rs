// This file is auto-generated by rute_gen. DO NOT EDIT.
use rute_ffi_base::*;

#[allow(unused_imports)]
use auto::object_ffi::*;
#[allow(unused_imports)]
use std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUCoreApplicationFuncs {
    pub set_organization_domain:
        extern "C" fn(self_c: *const RUBase, org_domain: *const ::std::os::raw::c_char),
    pub organization_domain: extern "C" fn(self_c: *const RUBase) -> *const ::std::os::raw::c_char,
    pub set_organization_name:
        extern "C" fn(self_c: *const RUBase, org_name: *const ::std::os::raw::c_char),
    pub organization_name: extern "C" fn(self_c: *const RUBase) -> *const ::std::os::raw::c_char,
    pub set_application_name:
        extern "C" fn(self_c: *const RUBase, application: *const ::std::os::raw::c_char),
    pub application_name: extern "C" fn(self_c: *const RUBase) -> *const ::std::os::raw::c_char,
    pub set_application_version:
        extern "C" fn(self_c: *const RUBase, version: *const ::std::os::raw::c_char),
    pub application_version: extern "C" fn(self_c: *const RUBase) -> *const ::std::os::raw::c_char,
    pub set_setuid_allowed: extern "C" fn(self_c: *const RUBase, allow: bool),
    pub is_setuid_allowed: extern "C" fn(self_c: *const RUBase) -> bool,
    pub instance: extern "C" fn(self_c: *const RUBase) -> RUCoreApplication,
    pub exec: extern "C" fn(self_c: *const RUBase) -> i32,
    pub exit: extern "C" fn(self_c: *const RUBase, retcode: i32),
    pub send_event:
        extern "C" fn(self_c: *const RUBase, receiver: *const RUBase, event: *const RUBase) -> bool,
    pub post_event: extern "C" fn(
        self_c: *const RUBase,
        receiver: *const RUBase,
        event: *const RUBase,
        priority: i32,
    ),
    pub send_posted_events:
        extern "C" fn(self_c: *const RUBase, receiver: *const RUBase, event_type: i32),
    pub remove_posted_events:
        extern "C" fn(self_c: *const RUBase, receiver: *const RUBase, event_type: i32),
    pub has_pending_events: extern "C" fn(self_c: *const RUBase) -> bool,
    pub starting_up: extern "C" fn(self_c: *const RUBase) -> bool,
    pub closing_down: extern "C" fn(self_c: *const RUBase) -> bool,
    pub application_dir_path: extern "C" fn(self_c: *const RUBase) -> *const ::std::os::raw::c_char,
    pub application_file_path:
        extern "C" fn(self_c: *const RUBase) -> *const ::std::os::raw::c_char,
    pub application_pid: extern "C" fn(self_c: *const RUBase) -> i64,
    pub add_library_path: extern "C" fn(self_c: *const RUBase, arg0: *const ::std::os::raw::c_char),
    pub remove_library_path:
        extern "C" fn(self_c: *const RUBase, arg0: *const ::std::os::raw::c_char),
    pub flush: extern "C" fn(self_c: *const RUBase),
    pub is_quit_lock_enabled: extern "C" fn(self_c: *const RUBase) -> bool,
    pub set_quit_lock_enabled: extern "C" fn(self_c: *const RUBase, enabled: bool),
    pub quit: extern "C" fn(self_c: *const RUBase),
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUCoreApplicationAllFuncs {
    pub object_funcs: *const RUObjectFuncs,
    pub core_application_funcs: *const RUCoreApplicationFuncs,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUCoreApplication {
    pub qt_data: *const RUBase,
    pub host_data: *const RUBase,
    pub all_funcs: *const RUCoreApplicationAllFuncs,
}
