// This file is auto-generated by rute_gen. DO NOT EDIT.
use rute_ffi_base::*;

use auto::line_ffi::RULine;
use auto::line_f_ffi::RULineF;
use auto::matrix_ffi::RUMatrix;
use auto::painter_path_ffi::RUPainterPath;
use auto::point_ffi::RUPoint;
use auto::point_f_ffi::RUPointF;
use auto::polygon_ffi::RUPolygon;
use auto::polygon_f_ffi::RUPolygonF;
use auto::rect_ffi::RURect;
use auto::rect_f_ffi::RURectF;
use auto::region_ffi::RURegion;
#[allow(unused_imports)]
use std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUTransformFuncs {
    pub destroy: extern "C" fn(self_c: *const RUBase),
    pub is_affine: extern "C" fn(self_c: *const RUBase) -> bool,
    pub is_identity: extern "C" fn(self_c: *const RUBase) -> bool,
    pub is_invertible: extern "C" fn(self_c: *const RUBase) -> bool,
    pub is_scaling: extern "C" fn(self_c: *const RUBase) -> bool,
    pub is_rotating: extern "C" fn(self_c: *const RUBase) -> bool,
    pub is_translating: extern "C" fn(self_c: *const RUBase) -> bool,
    pub type: extern "C" fn(self_c: *const RUBase) -> i32,
    pub determinant: extern "C" fn(self_c: *const RUBase) -> f32,
    pub det: extern "C" fn(self_c: *const RUBase) -> f32,
    pub m11: extern "C" fn(self_c: *const RUBase) -> f32,
    pub m12: extern "C" fn(self_c: *const RUBase) -> f32,
    pub m13: extern "C" fn(self_c: *const RUBase) -> f32,
    pub m21: extern "C" fn(self_c: *const RUBase) -> f32,
    pub m22: extern "C" fn(self_c: *const RUBase) -> f32,
    pub m23: extern "C" fn(self_c: *const RUBase) -> f32,
    pub m31: extern "C" fn(self_c: *const RUBase) -> f32,
    pub m32: extern "C" fn(self_c: *const RUBase) -> f32,
    pub m33: extern "C" fn(self_c: *const RUBase) -> f32,
    pub dx: extern "C" fn(self_c: *const RUBase) -> f32,
    pub dy: extern "C" fn(self_c: *const RUBase) -> f32,
    pub inverted: extern "C" fn(self_c: *const RUBase, invertible: *const RUBase) ->  RUTransform,
    pub adjoint: extern "C" fn(self_c: *const RUBase) ->  RUTransform,
    pub scale: extern "C" fn(self_c: *const RUBase, sx: f32, sy: f32) ->  RUTransform,
    pub shear: extern "C" fn(self_c: *const RUBase, sh: f32, sv: f32) ->  RUTransform,
    pub rotate: extern "C" fn(self_c: *const RUBase, a: f32, axis: i32) ->  RUTransform,
    pub rotate_radians: extern "C" fn(self_c: *const RUBase, a: f32, axis: i32) ->  RUTransform,
    pub square_to_quad: extern "C" fn(self_c: *const RUBase, square: *const RUBase, result: *const RUBase) -> bool,
    pub quad_to_square: extern "C" fn(self_c: *const RUBase, quad: *const RUBase, result: *const RUBase) -> bool,
    pub quad_to_quad: extern "C" fn(self_c: *const RUBase, one: *const RUBase, two: *const RUBase, result: *const RUBase) -> bool,
    pub reset: extern "C" fn(self_c: *const RUBase),
    pub map: extern "C" fn(self_c: *const RUBase, p: *const RUBase) ->  RUPoint,
    pub map: extern "C" fn(self_c: *const RUBase, p: *const RUBase) ->  RUPointF,
    pub map: extern "C" fn(self_c: *const RUBase, l: *const RUBase) ->  RULine,
    pub map: extern "C" fn(self_c: *const RUBase, l: *const RUBase) ->  RULineF,
    pub map: extern "C" fn(self_c: *const RUBase, a: *const RUBase) ->  RUPolygonF,
    pub map: extern "C" fn(self_c: *const RUBase, a: *const RUBase) ->  RUPolygon,
    pub map: extern "C" fn(self_c: *const RUBase, r: *const RUBase) ->  RURegion,
    pub map: extern "C" fn(self_c: *const RUBase, p: *const RUBase) ->  RUPainterPath,
    pub map_to_polygon: extern "C" fn(self_c: *const RUBase, r: *const RUBase) ->  RUPolygon,
    pub map_rect: extern "C" fn(self_c: *const RUBase, arg0: *const RUBase) ->  RURect,
    pub map_rect: extern "C" fn(self_c: *const RUBase, arg0: *const RUBase) ->  RURectF,
    pub map: extern "C" fn(self_c: *const RUBase, x: i32, y: i32, tx: *const RUBase, ty: *const RUBase),
    pub map: extern "C" fn(self_c: *const RUBase, x: f32, y: f32, tx: *const RUBase, ty: *const RUBase),
    pub to_affine: extern "C" fn(self_c: *const RUBase) ->  RUMatrix,
    pub from_translate: extern "C" fn(self_c: *const RUBase, dx: f32, dy: f32) ->  RUTransform,
    pub from_scale: extern "C" fn(self_c: *const RUBase, dx: f32, dy: f32) ->  RUTransform,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUTransformAllFuncs {
    pub transform_funcs: *const RUTransformFuncs,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUTransform {
    pub qt_data: *const RUBase,
    pub host_data: *const RUBase,
    pub all_funcs: *const RUTransformAllFuncs,
}

