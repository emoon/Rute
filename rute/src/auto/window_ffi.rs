// This file is auto-generated by rute_gen. DO NOT EDIT.
use rute_ffi_base::*;

#[allow(unused_imports)]
use auto::cursor_ffi::RUCursor;
#[allow(unused_imports)]
use auto::icon_ffi::RUIcon;
#[allow(unused_imports)]
use auto::margins_ffi::RUMargins;
#[allow(unused_imports)]
use auto::object_ffi::RUObject;
#[allow(unused_imports)]
use auto::object_ffi::*;
#[allow(unused_imports)]
use auto::point_ffi::RUPoint;
#[allow(unused_imports)]
use auto::region_ffi::RURegion;
#[allow(unused_imports)]
use auto::screen_ffi::RUScreen;
#[allow(unused_imports)]
use auto::size_ffi::RUSize;
#[allow(unused_imports)]
use auto::surface_ffi::*;
#[allow(unused_imports)]
use auto::surface_format_ffi::RUSurfaceFormat;
#[allow(unused_imports)]
use std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUWindowFuncs {
    pub destroy: extern "C" fn(self_c: *const RUBase),
    pub set_object_surface_type: extern "C" fn(self_c: *const RUBase, surface_type: i32),
    pub surface_type: extern "C" fn(self_c: *const RUBase) -> i32,
    pub is_visible: extern "C" fn(self_c: *const RUBase) -> bool,
    pub visibility: extern "C" fn(self_c: *const RUBase) -> i32,
    pub set_visibility: extern "C" fn(self_c: *const RUBase, v: i32),
    pub create: extern "C" fn(self_c: *const RUBase),
    pub win_id: extern "C" fn(self_c: *const RUBase) -> u64,
    pub parent: extern "C" fn(self_c: *const RUBase, mode: i32) -> RUWindow,
    pub parent_2: extern "C" fn(self_c: *const RUBase) -> RUWindow,
    pub set_parent: extern "C" fn(self_c: *const RUBase, parent: *const RUBase),
    pub is_top_level: extern "C" fn(self_c: *const RUBase) -> bool,
    pub is_modal: extern "C" fn(self_c: *const RUBase) -> bool,
    pub modality: extern "C" fn(self_c: *const RUBase) -> i32,
    pub set_modality: extern "C" fn(self_c: *const RUBase, modality: i32),
    pub set_object_format: extern "C" fn(self_c: *const RUBase, format: *const RUBase),
    pub format: extern "C" fn(self_c: *const RUBase) -> RUSurfaceFormat,
    pub requested_format: extern "C" fn(self_c: *const RUBase) -> RUSurfaceFormat,
    pub set_flags: extern "C" fn(self_c: *const RUBase, flags: i32),
    pub flags: extern "C" fn(self_c: *const RUBase) -> i32,
    pub title: extern "C" fn(self_c: *const RUBase) -> *const ::std::os::raw::c_char,
    pub set_opacity: extern "C" fn(self_c: *const RUBase, level: f32),
    pub opacity: extern "C" fn(self_c: *const RUBase) -> f32,
    pub set_mask: extern "C" fn(self_c: *const RUBase, region: *const RUBase),
    pub mask: extern "C" fn(self_c: *const RUBase) -> RURegion,
    pub is_active: extern "C" fn(self_c: *const RUBase) -> bool,
    pub report_content_orientation_change: extern "C" fn(self_c: *const RUBase, orientation: i32),
    pub content_orientation: extern "C" fn(self_c: *const RUBase) -> i32,
    pub device_pixel_ratio: extern "C" fn(self_c: *const RUBase) -> f32,
    pub window_state: extern "C" fn(self_c: *const RUBase) -> i32,
    pub window_states: extern "C" fn(self_c: *const RUBase) -> i32,
    pub set_window_state: extern "C" fn(self_c: *const RUBase, state: i32),
    pub set_window_states: extern "C" fn(self_c: *const RUBase, states: i32),
    pub set_transient_parent: extern "C" fn(self_c: *const RUBase, parent: *const RUBase),
    pub is_ancestor_of:
        extern "C" fn(self_c: *const RUBase, child: *const RUBase, mode: i32) -> bool,
    pub is_exposed: extern "C" fn(self_c: *const RUBase) -> bool,
    pub minimum_width: extern "C" fn(self_c: *const RUBase) -> i32,
    pub minimum_height: extern "C" fn(self_c: *const RUBase) -> i32,
    pub maximum_width: extern "C" fn(self_c: *const RUBase) -> i32,
    pub maximum_height: extern "C" fn(self_c: *const RUBase) -> i32,
    pub minimum_size: extern "C" fn(self_c: *const RUBase) -> RUSize,
    pub maximum_size: extern "C" fn(self_c: *const RUBase) -> RUSize,
    pub base_size: extern "C" fn(self_c: *const RUBase) -> RUSize,
    pub size_increment: extern "C" fn(self_c: *const RUBase) -> RUSize,
    pub set_minimum_size: extern "C" fn(self_c: *const RUBase, size: *const RUBase),
    pub set_maximum_size: extern "C" fn(self_c: *const RUBase, size: *const RUBase),
    pub set_base_size: extern "C" fn(self_c: *const RUBase, size: *const RUBase),
    pub set_size_increment: extern "C" fn(self_c: *const RUBase, size: *const RUBase),
    pub frame_margins: extern "C" fn(self_c: *const RUBase) -> RUMargins,
    pub frame_position: extern "C" fn(self_c: *const RUBase) -> RUPoint,
    pub set_frame_position: extern "C" fn(self_c: *const RUBase, point: *const RUBase),
    pub width: extern "C" fn(self_c: *const RUBase) -> i32,
    pub height: extern "C" fn(self_c: *const RUBase) -> i32,
    pub x: extern "C" fn(self_c: *const RUBase) -> i32,
    pub y: extern "C" fn(self_c: *const RUBase) -> i32,
    pub size: extern "C" fn(self_c: *const RUBase) -> RUSize,
    pub position: extern "C" fn(self_c: *const RUBase) -> RUPoint,
    pub set_position: extern "C" fn(self_c: *const RUBase, pt: *const RUBase),
    pub set_position_2: extern "C" fn(self_c: *const RUBase, posx: i32, posy: i32),
    pub resize: extern "C" fn(self_c: *const RUBase, new_size: *const RUBase),
    pub resize_2: extern "C" fn(self_c: *const RUBase, w: i32, h: i32),
    pub set_file_path:
        extern "C" fn(self_c: *const RUBase, file_path: *const ::std::os::raw::c_char),
    pub file_path: extern "C" fn(self_c: *const RUBase) -> *const ::std::os::raw::c_char,
    pub set_icon: extern "C" fn(self_c: *const RUBase, icon: *const RUBase),
    pub icon: extern "C" fn(self_c: *const RUBase) -> RUIcon,
    pub set_keyboard_grab_enabled: extern "C" fn(self_c: *const RUBase, grab: bool) -> bool,
    pub set_mouse_grab_enabled: extern "C" fn(self_c: *const RUBase, grab: bool) -> bool,
    pub screen: extern "C" fn(self_c: *const RUBase) -> RUScreen,
    pub set_screen: extern "C" fn(self_c: *const RUBase, screen: *const RUBase),
    pub focus_object: extern "C" fn(self_c: *const RUBase) -> RUObject,
    pub map_to_global: extern "C" fn(self_c: *const RUBase, pos: *const RUBase) -> RUPoint,
    pub map_from_global: extern "C" fn(self_c: *const RUBase, pos: *const RUBase) -> RUPoint,
    pub cursor: extern "C" fn(self_c: *const RUBase) -> RUCursor,
    pub set_cursor: extern "C" fn(self_c: *const RUBase, arg0: *const RUBase),
    pub unset_cursor: extern "C" fn(self_c: *const RUBase),
    pub from_win_id: extern "C" fn(self_c: *const RUBase, id: u64) -> RUWindow,
    pub request_activate: extern "C" fn(self_c: *const RUBase),
    pub set_visible: extern "C" fn(self_c: *const RUBase, visible: bool),
    pub show: extern "C" fn(self_c: *const RUBase),
    pub hide: extern "C" fn(self_c: *const RUBase),
    pub show_minimized: extern "C" fn(self_c: *const RUBase),
    pub show_maximized: extern "C" fn(self_c: *const RUBase),
    pub show_full_screen: extern "C" fn(self_c: *const RUBase),
    pub show_normal: extern "C" fn(self_c: *const RUBase),
    pub close: extern "C" fn(self_c: *const RUBase) -> bool,
    pub raise: extern "C" fn(self_c: *const RUBase),
    pub lower: extern "C" fn(self_c: *const RUBase),
    pub set_title: extern "C" fn(self_c: *const RUBase, arg0: *const ::std::os::raw::c_char),
    pub set_x: extern "C" fn(self_c: *const RUBase, arg: i32),
    pub set_y: extern "C" fn(self_c: *const RUBase, arg: i32),
    pub set_width: extern "C" fn(self_c: *const RUBase, arg: i32),
    pub set_height: extern "C" fn(self_c: *const RUBase, arg: i32),
    pub set_minimum_width: extern "C" fn(self_c: *const RUBase, w: i32),
    pub set_minimum_height: extern "C" fn(self_c: *const RUBase, h: i32),
    pub set_maximum_width: extern "C" fn(self_c: *const RUBase, w: i32),
    pub set_maximum_height: extern "C" fn(self_c: *const RUBase, h: i32),
    pub alert: extern "C" fn(self_c: *const RUBase, msec: i32),
    pub request_update: extern "C" fn(self_c: *const RUBase),
    pub set_screen_changed_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_window_title_changed_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_x_changed_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_y_changed_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_width_changed_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_height_changed_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_minimum_width_changed_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_minimum_height_changed_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_maximum_width_changed_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_maximum_height_changed_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_visible_changed_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_active_changed_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_focus_object_changed_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_opacity_changed_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_expose_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_expose_event: extern "C" fn(object: *const RUBase),

    pub set_resize_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_resize_event: extern "C" fn(object: *const RUBase),

    pub set_move_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_move_event: extern "C" fn(object: *const RUBase),

    pub set_focus_in_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_focus_in_event: extern "C" fn(object: *const RUBase),

    pub set_focus_out_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_focus_out_event: extern "C" fn(object: *const RUBase),

    pub set_show_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_show_event: extern "C" fn(object: *const RUBase),

    pub set_hide_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_hide_event: extern "C" fn(object: *const RUBase),

    pub set_key_press_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_key_press_event: extern "C" fn(object: *const RUBase),

    pub set_key_release_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_key_release_event: extern "C" fn(object: *const RUBase),

    pub set_mouse_press_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_mouse_press_event: extern "C" fn(object: *const RUBase),

    pub set_mouse_release_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_mouse_release_event: extern "C" fn(object: *const RUBase),

    pub set_mouse_double_click_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_mouse_double_click_event: extern "C" fn(object: *const RUBase),

    pub set_mouse_move_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_mouse_move_event: extern "C" fn(object: *const RUBase),

    pub set_wheel_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_wheel_event: extern "C" fn(object: *const RUBase),

    pub set_touch_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_touch_event: extern "C" fn(object: *const RUBase),

    pub set_tablet_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_tablet_event: extern "C" fn(object: *const RUBase),
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUWindowAllFuncs {
    pub object_funcs: *const RUObjectFuncs,
    pub surface_funcs: *const RUSurfaceFuncs,
    pub window_funcs: *const RUWindowFuncs,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUWindow {
    pub qt_data: *const RUBase,
    pub host_data: *const RUBase,
    pub all_funcs: *const RUWindowAllFuncs,
}
