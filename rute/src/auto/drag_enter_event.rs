// This file is auto-generated by rute_gen. DO NOT EDIT.
use std::cell::Cell;
use std::rc::Rc;

#[allow(unused_imports)]
use std::marker::PhantomData;

#[allow(unused_imports)]
use std::os::raw::c_void;

#[allow(unused_imports)]
use std::mem::transmute;

#[allow(unused_imports)]
use std::ffi::{CStr, CString};

use rute_ffi_base::*;

// Auto-generated imports

#[allow(unused_imports)]
use auto::drag_enter_event_ffi::*;
#[allow(unused_imports)]
use auto::drag_move_event::*;
#[allow(unused_imports)]
use auto::drag_move_event_ffi::*;
#[allow(unused_imports)]
use auto::drop_event::*;
#[allow(unused_imports)]
use auto::drop_event_ffi::*;
#[allow(unused_imports)]
use auto::event::*;
#[allow(unused_imports)]
use auto::event_ffi::*;
#[allow(unused_imports)]
use auto::rute::*;
#[allow(unused_imports)]
use auto::rute_ffi::*;
///
/// A widget must accept this event in order to receive the [drag move events](QDragMoveEvent)
/// that are sent while the drag
/// and drop action is in progress. The drag enter event is always
/// immediately followed by a drag move event.
///
/// QDragEnterEvent inherits most of its functionality from
/// QDragMoveEvent, which in turn inherits most of its functionality
/// from QDropEvent.
///
/// **See also:** [`DragLeaveEvent`]
/// [`DragMoveEvent`]
/// [`DropEvent`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
#[derive(Clone)]
pub struct DragEnterEvent<'a> {
    pub data: Rc<Cell<Option<*const RUBase>>>,
    pub all_funcs: *const RUDragEnterEventAllFuncs,
    pub owned: bool,
    pub _marker: PhantomData<::std::cell::Cell<&'a ()>>,
}

impl<'a> DragEnterEvent<'a> {
    pub fn new_from_rc(ffi_data: RUDragEnterEvent) -> DragEnterEvent<'a> {
        DragEnterEvent {
            data: unsafe { Rc::from_raw(ffi_data.host_data as *const Cell<Option<*const RUBase>>) },
            all_funcs: ffi_data.all_funcs,
            owned: false,
            _marker: PhantomData,
        }
    }

    pub fn new_from_owned(ffi_data: RUDragEnterEvent) -> DragEnterEvent<'a> {
        DragEnterEvent {
            data: Rc::new(Cell::new(Some(ffi_data.qt_data as *const RUBase))),
            all_funcs: ffi_data.all_funcs,
            owned: true,
            _marker: PhantomData,
        }
    }

    pub fn new_from_temporary(ffi_data: RUDragEnterEvent) -> DragEnterEvent<'a> {
        DragEnterEvent {
            data: Rc::new(Cell::new(Some(ffi_data.qt_data as *const RUBase))),
            all_funcs: ffi_data.all_funcs,
            owned: false,
            _marker: PhantomData,
        }
    }
}
pub trait DragEnterEventTrait<'a> {
    #[inline]
    fn get_drag_enter_event_obj_funcs(&self) -> (*const RUBase, *const RUDragEnterEventFuncs);
}

impl<'a> EventTrait<'a> for DragEnterEvent<'a> {
    #[inline]
    fn get_event_obj_funcs(&self) -> (*const RUBase, *const RUEventFuncs) {
        let obj = self.data.get().unwrap();
        unsafe { (obj, (*self.all_funcs).event_funcs) }
    }
}

impl<'a> DropEventTrait<'a> for DragEnterEvent<'a> {
    #[inline]
    fn get_drop_event_obj_funcs(&self) -> (*const RUBase, *const RUDropEventFuncs) {
        let obj = self.data.get().unwrap();
        unsafe { (obj, (*self.all_funcs).drop_event_funcs) }
    }
}

impl<'a> DragMoveEventTrait<'a> for DragEnterEvent<'a> {
    #[inline]
    fn get_drag_move_event_obj_funcs(&self) -> (*const RUBase, *const RUDragMoveEventFuncs) {
        let obj = self.data.get().unwrap();
        unsafe { (obj, (*self.all_funcs).drag_move_event_funcs) }
    }
}

impl<'a> DragEnterEventTrait<'a> for DragEnterEvent<'a> {
    #[inline]
    fn get_drag_enter_event_obj_funcs(&self) -> (*const RUBase, *const RUDragEnterEventFuncs) {
        let obj = self.data.get().unwrap();
        unsafe { (obj, (*self.all_funcs).drag_enter_event_funcs) }
    }
}
