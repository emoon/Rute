// This file is auto-generated by rute_gen. DO NOT EDIT.
use std::cell::Cell;
use std::rc::Rc;

#[allow(unused_imports)]
use std::marker::PhantomData;

#[allow(unused_imports)]
use std::os::raw::c_void;

#[allow(unused_imports)]
use std::mem::transmute;

#[allow(unused_imports)]
use std::ffi::{CStr, CString};

use rute_ffi_base::*;

#[allow(unused_imports)]
use auto::*;

/// **Notice these docs are heavy WIP and not very relevent yet**
///
/// A matrix specifies how to translate, scale, shear or rotate the
/// coordinate system, and is typically used when rendering graphics.
/// QMatrix, in contrast to QTransform, does not allow perspective
/// transformations. QTransform is the recommended transformation
/// class in Qt.
///
/// A QMatrix object can be built using the setMatrix(), scale(),
/// rotate(), translate() and shear() functions. Alternatively, it
/// can be built by applying [basic matrix operations](QMatrix%23Basic%20Matrix%0A%20%20%20%20Operations)
/// . The matrix can also be
/// defined when constructed, and it can be reset to the identity
/// matrix (the default) using the reset() function.
///
/// The QMatrix class supports mapping of graphic primitives: A given
/// point, line, polygon, region, or painter path can be mapped to the
/// coordinate system defined by *this* matrix using the map()
/// function. In case of a rectangle, its coordinates can be
/// transformed using the mapRect() function. A rectangle can also be
/// transformed into a *polygon* (mapped to the coordinate system
/// defined by *this* matrix), using the mapToPolygon() function.
///
/// QMatrix provides the isIdentity() function which returns `true` if
/// the matrix is the identity matrix, and the isInvertible() function
/// which returns `true` if the matrix is non-singular (i.e. AB = BA =
/// I). The inverted() function returns an inverted copy of *this*
/// matrix if it is invertible (otherwise it returns the identity
/// matrix). In addition, QMatrix provides the determinant() function
/// returning the matrix's determinant.
///
/// Finally, the QMatrix class supports matrix multiplication, and
/// objects of the class can be streamed as well as compared.
///
/// # Rendering Graphics
///
/// When rendering graphics, the matrix defines the transformations
/// but the actual transformation is performed by the drawing routines
/// in QPainter.
///
/// By default, QPainter operates on the associated device's own
/// coordinate system. The standard coordinate system of a
/// QPaintDevice has its origin located at the top-left position. The
/// *x* values increase to the right; *y* values increase
/// downward. For a complete description, see the [coordinate system](Coordinate%0A%20%20%20%20System)
/// documentation.
///
/// QPainter has functions to translate, scale, shear and rotate the
/// coordinate system without using a QMatrix. For example:
///
/// * ![qmatrix-simpletransformation.png](qmatrix-simpletransformation.png)
///
///
///
/// Although these functions are very convenient, it can be more
/// efficient to build a QMatrix and call QPainter::setMatrix() if you
/// want to perform more than a single transform operation. For
/// example:
///
/// * ![qmatrix-combinedtransformation.png](qmatrix-combinedtransformation.png)
///
///
///
/// # Basic Matrix Operations
///
/// ![qmatrix-representation.png](qmatrix-representation.png)
///
/// A QMatrix object contains a 3 x 3 matrix. The `dx` and `dy`
/// elements specify horizontal and vertical translation. The `m11`
/// and `m22` elements specify horizontal and vertical scaling. And
/// finally, the `m21` and `m12` elements specify horizontal and
/// vertical *shearing.*
///
/// QMatrix transforms a point in the plane to another point using the
/// following formulas:
///
/// The point *(x,* y) is the original point, and *(x',* y') is the
/// transformed point. *(x',* y') can be transformed back to *(x,*
/// y) by performing the same operation on the inverted() matrix.
///
/// The various matrix elements can be set when constructing the
/// matrix, or by using the setMatrix() function later on. They can also
/// be manipulated using the translate(), rotate(), scale() and
/// shear() convenience functions, The currently set values can be
/// retrieved using the m11(), m12(), m21(), m22(), dx() and dy()
/// functions.
///
/// Translation is the simplest transformation. Setting `dx` and `dy` will move the coordinate system `dx` units along the X axis
/// and `dy` units along the Y axis. Scaling can be done by setting
/// `m11` and `m22.` For example, setting `m11` to 2 and `m22` to
/// 1.5 will double the height and increase the width by 50%. The
/// identity matrix has `m11` and `m22` set to 1 (all others are set
/// to 0) mapping a point to itself. Shearing is controlled by `m12`
/// and `m21.` Setting these elements to values different from zero
/// will twist the coordinate system. Rotation is achieved by
/// carefully setting both the shearing factors and the scaling
/// factors.
///
/// Here's the combined transformations example using basic matrix
/// operations:
///
/// * ![qmatrix-combinedtransformation.png](qmatrix-combinedtransformation.png)
///
///
///
/// **See also:** [`Painter`]
/// [`Transform`]
/// {Coordinate System}
/// {painting/affine}{Affine Transformations Example}
/// {Transformations Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
#[derive(Clone)]
pub struct Matrix<'a> {
    #[doc(hidden)]
    pub data: Rc<Cell<Option<*const RUBase>>>,
    #[doc(hidden)]
    pub all_funcs: *const RUMatrixAllFuncs,
    #[doc(hidden)]
    pub owned: bool,
    #[doc(hidden)]
    pub _marker: PhantomData<::std::cell::Cell<&'a ()>>,
}

impl<'a> Matrix<'a> {
    pub fn new() -> Matrix<'a> {
        let data = Rc::new(Cell::new(None));

        let ffi_data = unsafe {
            ((*rute_ffi_get()).create_matrix)(
                ::std::ptr::null(),
                transmute(rute_object_delete_callback as usize),
                Rc::into_raw(data.clone()) as *const c_void,
            )
        };

        data.set(Some(ffi_data.qt_data));

        Matrix {
            data,
            all_funcs: ffi_data.all_funcs,
            owned: true,
            _marker: PhantomData,
        }
    }
    #[allow(dead_code)]
    pub(crate) fn new_from_rc(ffi_data: RUMatrix) -> Matrix<'a> {
        Matrix {
            data: unsafe { Rc::from_raw(ffi_data.host_data as *const Cell<Option<*const RUBase>>) },
            all_funcs: ffi_data.all_funcs,
            owned: false,
            _marker: PhantomData,
        }
    }

    #[allow(dead_code)]
    pub(crate) fn new_from_owned(ffi_data: RUMatrix) -> Matrix<'a> {
        Matrix {
            data: Rc::new(Cell::new(Some(ffi_data.qt_data as *const RUBase))),
            all_funcs: ffi_data.all_funcs,
            owned: true,
            _marker: PhantomData,
        }
    }

    #[allow(dead_code)]
    pub(crate) fn new_from_temporary(ffi_data: RUMatrix) -> Matrix<'a> {
        Matrix {
            data: Rc::new(Cell::new(Some(ffi_data.qt_data as *const RUBase))),
            all_funcs: ffi_data.all_funcs,
            owned: false,
            _marker: PhantomData,
        }
    }
    ///
    /// Returns the horizontal scaling factor.
    ///
    /// **See also:** [`scale()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    pub fn m11(&self) -> f32 {
        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).m11)(obj_data);
            ret_val
        }
    }
    ///
    /// Returns the vertical shearing factor.
    ///
    /// **See also:** [`shear()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    pub fn m12(&self) -> f32 {
        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).m12)(obj_data);
            ret_val
        }
    }
    ///
    /// Returns the horizontal shearing factor.
    ///
    /// **See also:** [`shear()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    pub fn m21(&self) -> f32 {
        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).m21)(obj_data);
            ret_val
        }
    }
    ///
    /// Returns the vertical scaling factor.
    ///
    /// **See also:** [`scale()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    pub fn m22(&self) -> f32 {
        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).m22)(obj_data);
            ret_val
        }
    }
    ///
    /// Returns the horizontal translation factor.
    ///
    /// **See also:** [`translate()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    pub fn dx(&self) -> f32 {
        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).dx)(obj_data);
            ret_val
        }
    }
    ///
    /// Returns the vertical translation factor.
    ///
    /// **See also:** [`translate()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    pub fn dy(&self) -> f32 {
        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).dy)(obj_data);
            ret_val
        }
    }
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** [`map_to_polygon()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** [`map_rect()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** [`map_to_polygon()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** [`map_rect()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** [`map_to_polygon()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    pub fn map_rect<R: RectTrait<'a>>(&self, arg0: &R) -> Rect {
        let (obj_arg0_1, _funcs) = arg0.get_rect_obj_funcs();

        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).map_rect)(obj_data, obj_arg0_1);
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = Rect::new_from_rc(t);
            } else {
                ret_val = Rect::new_from_owned(t);
            }
            ret_val
        }
    }
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** [`map_to_polygon()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    pub fn map_rect_2<R: RectFTrait<'a>>(&self, arg0: &R) -> RectF {
        let (obj_arg0_1, _funcs) = arg0.get_rect_f_obj_funcs();

        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).map_rect_2)(obj_data, obj_arg0_1);
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = RectF::new_from_rc(t);
            } else {
                ret_val = RectF::new_from_owned(t);
            }
            ret_val
        }
    }
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** [`map_to_polygon()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** [`map_rect()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    pub fn map_3<P: PointTrait<'a>>(&self, p: &P) -> Point {
        let (obj_p_1, _funcs) = p.get_point_obj_funcs();

        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).map_3)(obj_data, obj_p_1);
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = Point::new_from_rc(t);
            } else {
                ret_val = Point::new_from_owned(t);
            }
            ret_val
        }
    }
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** [`map_to_polygon()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** [`map_rect()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    pub fn map_4<P: PointFTrait<'a>>(&self, p: &P) -> PointF {
        let (obj_p_1, _funcs) = p.get_point_f_obj_funcs();

        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).map_4)(obj_data, obj_p_1);
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = PointF::new_from_rc(t);
            } else {
                ret_val = PointF::new_from_owned(t);
            }
            ret_val
        }
    }
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** [`map_to_polygon()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** [`map_rect()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    pub fn map_5<L: LineTrait<'a>>(&self, l: &L) -> Line {
        let (obj_l_1, _funcs) = l.get_line_obj_funcs();

        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).map_5)(obj_data, obj_l_1);
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = Line::new_from_rc(t);
            } else {
                ret_val = Line::new_from_owned(t);
            }
            ret_val
        }
    }
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** [`map_to_polygon()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** [`map_rect()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    pub fn map_6<L: LineFTrait<'a>>(&self, l: &L) -> LineF {
        let (obj_l_1, _funcs) = l.get_line_f_obj_funcs();

        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).map_6)(obj_data, obj_l_1);
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = LineF::new_from_rc(t);
            } else {
                ret_val = LineF::new_from_owned(t);
            }
            ret_val
        }
    }
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** [`map_to_polygon()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** [`map_rect()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    pub fn map_7<P: PolygonFTrait<'a>>(&self, a: &P) -> PolygonF {
        let (obj_a_1, _funcs) = a.get_polygon_f_obj_funcs();

        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).map_7)(obj_data, obj_a_1);
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = PolygonF::new_from_rc(t);
            } else {
                ret_val = PolygonF::new_from_owned(t);
            }
            ret_val
        }
    }
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** [`map_to_polygon()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** [`map_rect()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    pub fn map_8<P: PolygonTrait<'a>>(&self, a: &P) -> Polygon {
        let (obj_a_1, _funcs) = a.get_polygon_obj_funcs();

        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).map_8)(obj_data, obj_a_1);
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = Polygon::new_from_rc(t);
            } else {
                ret_val = Polygon::new_from_owned(t);
            }
            ret_val
        }
    }
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** [`map_to_polygon()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** [`map_rect()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    pub fn map_9<R: RegionTrait<'a>>(&self, r: &R) -> Region {
        let (obj_r_1, _funcs) = r.get_region_obj_funcs();

        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).map_9)(obj_data, obj_r_1);
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = Region::new_from_rc(t);
            } else {
                ret_val = Region::new_from_owned(t);
            }
            ret_val
        }
    }
    ///
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively.
    ///
    /// The coordinates are transformed using the following formulas:
    ///
    /// The point (x, y) is the original point, and (x', y') is the
    /// transformed point.
    ///
    /// **See also:** {QMatrix#Basic Matrix Operations}{Basic Matrix Operations}
    ///
    /// **Overloads**
    /// Maps the given coordinates *x* and *y* into the coordinate
    /// system defined by this matrix. The resulting values are put in * *tx* and * *ty,* respectively. Note that the transformed coordinates
    /// are rounded to the nearest integer.
    ///
    /// Creates and returns a QRectF object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// If rotation or shearing has been specified, this function returns
    /// the *bounding* rectangle. To retrieve the exact region the given
    /// *rectangle* maps to, use the mapToPolygon() function instead.
    ///
    /// **See also:** [`map_to_polygon()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// **Overloads**
    /// Creates and returns a QRect object that is a copy of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPointF object that is a copy of the given
    /// *point,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPoint object that is a copy of the given *point,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QLineF object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QLine object that is a copy of the given *line,* mapped into the coordinate system defined by this matrix.
    /// Note that the transformed coordinates are rounded to the nearest
    /// integer.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygonF object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// **Overloads**
    /// Creates and returns a QPolygon object that is a copy of the given
    /// *polygon,* mapped into the coordinate system defined by this
    /// matrix. Note that the transformed coordinates are rounded to the
    /// nearest integer.
    ///
    /// **Overloads**
    /// Creates and returns a QRegion object that is a copy of the given
    /// *region,* mapped into the coordinate system defined by this matrix.
    ///
    /// Calling this method can be rather expensive if rotations or
    /// shearing are used.
    ///
    /// **Overloads**
    /// Creates and returns a QPainterPath object that is a copy of the
    /// given *path,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** [`map_rect()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    ///
    /// Creates and returns a QPolygon representation of the given *rectangle,* mapped into the coordinate system defined by this
    /// matrix.
    ///
    /// The rectangle's coordinates are transformed using the following
    /// formulas:
    ///
    /// Polygons and rectangles behave slightly differently when
    /// transformed (due to integer rounding), so
    /// `matrix.map(QPolygon(rectangle))` is not always the same as
    /// `matrix.mapToPolygon(rectangle)` .
    ///
    /// **See also:** [`map_rect()`]
    /// {QMatrix#Basic Matrix Operations}{Basic Matrix
    /// Operations}
    pub fn map_to_polygon<R: RectTrait<'a>>(&self, r: &R) -> Polygon {
        let (obj_r_1, _funcs) = r.get_rect_obj_funcs();

        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).map_to_polygon)(obj_data, obj_r_1);
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = Polygon::new_from_rc(t);
            } else {
                ret_val = Polygon::new_from_owned(t);
            }
            ret_val
        }
    }
    ///
    /// Resets the matrix to an identity matrix, i.e. all elements are set
    /// to zero, except `m11` and `m22` (specifying the scale) which are
    /// set to 1.
    ///
    /// **See also:** [`q_matrix()`]
    /// [`is_identity()`]
    /// {QMatrix#Basic Matrix
    /// Operations}{Basic Matrix Operations}
    pub fn reset(&self) -> &Self {
        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            ((*funcs).reset)(obj_data);
        }
        self
    }
    ///
    /// Returns `true` if the matrix is the identity matrix, otherwise
    /// returns `false.`
    ///
    /// **See also:** [`reset()`]
    pub fn is_identity(&self) -> bool {
        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).is_identity)(obj_data);
            ret_val
        }
    }
    ///
    /// Scales the coordinate system by *sx* horizontally and *sy*
    /// vertically, and returns a reference to the matrix.
    ///
    /// **See also:** [`set_matrix()`]
    pub fn scale(&self, sx: f32, sy: f32) -> Option<Matrix> {
        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).scale)(obj_data, sx, sy);
            if ret_val.qt_data == ::std::ptr::null() {
                return None;
            }
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = Matrix::new_from_rc(t);
            } else {
                ret_val = Matrix::new_from_owned(t);
            }
            Some(ret_val)
        }
    }
    ///
    /// Shears the coordinate system by *sh* horizontally and *sv*
    /// vertically, and returns a reference to the matrix.
    ///
    /// **See also:** [`set_matrix()`]
    pub fn shear(&self, sh: f32, sv: f32) -> Option<Matrix> {
        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).shear)(obj_data, sh, sv);
            if ret_val.qt_data == ::std::ptr::null() {
                return None;
            }
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = Matrix::new_from_rc(t);
            } else {
                ret_val = Matrix::new_from_owned(t);
            }
            Some(ret_val)
        }
    }
    ///
    /// Rotates the coordinate system the given *degrees*
    /// counterclockwise.
    ///
    /// Note that if you apply a QMatrix to a point defined in widget
    /// coordinates, the direction of the rotation will be clockwise
    /// because the y-axis points downwards.
    ///
    /// Returns a reference to the matrix.
    ///
    /// **See also:** [`set_matrix()`]
    pub fn rotate(&self, a: f32) -> Option<Matrix> {
        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).rotate)(obj_data, a);
            if ret_val.qt_data == ::std::ptr::null() {
                return None;
            }
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = Matrix::new_from_rc(t);
            } else {
                ret_val = Matrix::new_from_owned(t);
            }
            Some(ret_val)
        }
    }
    ///
    /// Returns `true` if the matrix is invertible, otherwise returns `false.`
    ///
    /// **See also:** [`inverted()`]
    pub fn is_invertible(&self) -> bool {
        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).is_invertible)(obj_data);
            ret_val
        }
    }
    ///
    /// Returns the matrix's determinant.
    pub fn determinant(&self) -> f32 {
        let (obj_data, funcs) = self.get_matrix_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).determinant)(obj_data);
            ret_val
        }
    }

    pub fn build(&self) -> Self {
        self.clone()
    }
}

impl<'a> From<(WrapperRcOwn, bool)> for Matrix<'a> {
    fn from(t: (WrapperRcOwn, bool)) -> Self {
        if t.1 {
            Matrix::new_from_rc(t.0 as *const RUMatrix)
        } else {
            Matrix::new_from_temporary(t.0 as *const RUMatrix)
        }
    }
}

pub trait MatrixTrait<'a> {
    #[inline]
    #[doc(hidden)]
    fn get_matrix_obj_funcs(&self) -> (*const RUBase, *const RUMatrixFuncs);
}

impl<'a> MatrixTrait<'a> for Matrix<'a> {
    #[doc(hidden)]
    fn get_matrix_obj_funcs(&self) -> (*const RUBase, *const RUMatrixFuncs) {
        let obj = self.data.get().unwrap();
        unsafe { (obj, (*self.all_funcs).matrix_funcs) }
    }
}
