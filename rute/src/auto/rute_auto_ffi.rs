
// This file is auto-generated by rute_gen. DO NOT EDIT.
use std::os::raw::c_void;

#[repr(C)]
#[derive(Default, Copy, Clone, Debug)]
pub struct RUBase {
    _unused: [u8; 0],
}

#[repr(C)]
#[derive(Copy, Clone, Debug)]
pub struct RUArray {
    pub priv_data: *const c_void,
    pub elements: *const c_void,
    pub count: i32,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUApplicationFuncs {
    pub destroy: extern "C" fn(self_c: *const RUBase),
    pub style: extern "C" fn(self_c: *const RUBase) ->  RUStyle,
    pub set_style: extern "C" fn(self_c: *const RUBase, arg0: *const RUBase),
    pub set_style: extern "C" fn(self_c: *const RUBase, arg0: *const ::std::os::raw::c_char) ->  RUStyle,
    pub color_spec: extern "C" fn(self_c: *const RUBase) -> i32,
    pub set_color_spec: extern "C" fn(self_c: *const RUBase, arg0: i32),
    pub palette: extern "C" fn(self_c: *const RUBase, arg0: *const RUBase) ->  RUPalette,
    pub palette: extern "C" fn(self_c: *const RUBase, class_name: *const RUBase) ->  RUPalette,
    pub set_palette: extern "C" fn(self_c: *const RUBase, arg0: *const RUBase, class_name: *const RUBase),
    pub font: extern "C" fn(self_c: *const RUBase) ->  RUFont,
    pub font: extern "C" fn(self_c: *const RUBase, arg0: *const RUBase) ->  RUFont,
    pub font: extern "C" fn(self_c: *const RUBase, class_name: *const RUBase) ->  RUFont,
    pub set_font: extern "C" fn(self_c: *const RUBase, arg0: *const RUBase, class_name: *const RUBase),
    pub set_window_icon: extern "C" fn(self_c: *const RUBase, icon: *const RUBase),
    pub window_icon: extern "C" fn(self_c: *const RUBase) ->  RUIcon,
    pub all_widgets: extern "C" fn(self_c: *const RUBase) ->  RUWidgetList,
    pub top_level_widgets: extern "C" fn(self_c: *const RUBase) ->  RUWidgetList,
    pub desktop: extern "C" fn(self_c: *const RUBase) ->  RUDesktopWidget,
    pub active_popup_widget: extern "C" fn(self_c: *const RUBase) ->  RUWidget,
    pub active_modal_widget: extern "C" fn(self_c: *const RUBase) ->  RUWidget,
    pub focus_widget: extern "C" fn(self_c: *const RUBase) ->  RUWidget,
    pub active_window: extern "C" fn(self_c: *const RUBase) ->  RUWidget,
    pub set_active_window: extern "C" fn(self_c: *const RUBase, act: *const RUBase),
    pub widget_at: extern "C" fn(self_c: *const RUBase, p: *const RUBase) ->  RUWidget,
    pub widget_at: extern "C" fn(self_c: *const RUBase, x: i32, y: i32) ->  RUWidget,
    pub top_level_at: extern "C" fn(self_c: *const RUBase, p: *const RUBase) ->  RUWidget,
    pub top_level_at: extern "C" fn(self_c: *const RUBase, x: i32, y: i32) ->  RUWidget,
    pub beep: extern "C" fn(self_c: *const RUBase),
    pub alert: extern "C" fn(self_c: *const RUBase, widget: *const RUBase, duration: i32),
    pub set_cursor_flash_time: extern "C" fn(self_c: *const RUBase, arg0: i32),
    pub cursor_flash_time: extern "C" fn(self_c: *const RUBase) -> i32,
    pub set_double_click_interval: extern "C" fn(self_c: *const RUBase, arg0: i32),
    pub double_click_interval: extern "C" fn(self_c: *const RUBase) -> i32,
    pub set_keyboard_input_interval: extern "C" fn(self_c: *const RUBase, arg0: i32),
    pub keyboard_input_interval: extern "C" fn(self_c: *const RUBase) -> i32,
    pub set_wheel_scroll_lines: extern "C" fn(self_c: *const RUBase, arg0: i32),
    pub wheel_scroll_lines: extern "C" fn(self_c: *const RUBase) -> i32,
    pub set_start_drag_time: extern "C" fn(self_c: *const RUBase, ms: i32),
    pub start_drag_time: extern "C" fn(self_c: *const RUBase) -> i32,
    pub set_start_drag_distance: extern "C" fn(self_c: *const RUBase, l: i32),
    pub start_drag_distance: extern "C" fn(self_c: *const RUBase) -> i32,
    pub is_effect_enabled: extern "C" fn(self_c: *const RUBase, arg0:  RURute::UIEffect) -> bool,
    pub set_effect_enabled: extern "C" fn(self_c: *const RUBase, arg0:  RURute::UIEffect, enable: bool),
    pub exec: extern "C" fn(self_c: *const RUBase) -> i32,
    pub set_focus_changed_event: extern "C" fn(object: *const RUBase, user_data: *const c_void, trampoline_func: *const c_void,
                                            callback: *const c_void),

    pub style_sheet: extern "C" fn(self_c: *const RUBase) -> *const ::std::os::raw::c_char,
    pub set_style_sheet: extern "C" fn(self_c: *const RUBase, sheet: *const ::std::os::raw::c_char),
    pub set_auto_sip_enabled: extern "C" fn(self_c: *const RUBase, enabled: bool),
    pub auto_sip_enabled: extern "C" fn(self_c: *const RUBase) -> bool,
    pub close_all_windows: extern "C" fn(self_c: *const RUBase),
    pub about_qt: extern "C" fn(self_c: *const RUBase),
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUApplication {
    pub qt_data: *const RUBase,
    pub host_data: *const RUBase,
    pub extension: *const RUBase,
    pub application_funcs: *const RUApplicationFuncs,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUWidgetFuncs {
    pub destroy: extern "C" fn(self_c: *const RUBase),
    pub show: extern "C" fn(self_c: *const RUBase),
    pub set_fixed_height: extern "C" fn(self_c: *const RUBase, width: i32),
    pub set_fixed_width: extern "C" fn(self_c: *const RUBase, width: i32),
    pub resize: extern "C" fn(self_c: *const RUBase, width: i32, height: i32),
    pub update: extern "C" fn(self_c: *const RUBase),
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUWidget {
    pub qt_data: *const RUBase,
    pub host_data: *const RUBase,
    pub extension: *const RUBase,
    pub widget_funcs: *const RUWidgetFuncs,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUListWidgetItemFuncs {
    pub destroy: extern "C" fn(self_c: *const RUBase),
    pub set_text: extern "C" fn(self_c: *const RUBase, text: *const ::std::os::raw::c_char),
    pub text: extern "C" fn(self_c: *const RUBase) -> *const ::std::os::raw::c_char,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUListWidgetItem {
    pub qt_data: *const RUBase,
    pub host_data: *const RUBase,
    pub extension: *const RUBase,
    pub list_widget_item_funcs: *const RUListWidgetItemFuncs,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUListWidgetFuncs {
    pub destroy: extern "C" fn(self_c: *const RUBase),
    pub clear: extern "C" fn(self_c: *const RUBase),
    pub current_item: extern "C" fn(self_c: *const RUBase) ->  RUListWidgetItem,
    pub current_row: extern "C" fn(self_c: *const RUBase) -> i32,
    pub set_current_row: extern "C" fn(self_c: *const RUBase, index: i32),
    pub count: extern "C" fn(self_c: *const RUBase) -> i32,
    pub set_drag_enabled: extern "C" fn(self_c: *const RUBase, state: bool),
    pub set_drop_indicator_shown: extern "C" fn(self_c: *const RUBase, state: bool),
    pub set_item_activated_event: extern "C" fn(object: *const RUBase, user_data: *const c_void, trampoline_func: *const c_void,
                                            callback: *const c_void),

    pub set_current_row_changed_event: extern "C" fn(object: *const RUBase, user_data: *const c_void, trampoline_func: *const c_void,
                                            callback: *const c_void),

}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUListWidget {
    pub qt_data: *const RUBase,
    pub host_data: *const RUBase,
    pub extension: *const RUBase,
    pub widget_funcs: *const RUWidgetFuncs,
    pub list_widget_funcs: *const RUListWidgetFuncs,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUFontFuncs {
    pub destroy: extern "C" fn(self_c: *const RUBase),
    pub set_pixel_size: extern "C" fn(self_c: *const RUBase, size: i32),
    pub pixel_size: extern "C" fn(self_c: *const RUBase) -> i32,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUFont {
    pub qt_data: *const RUBase,
    pub host_data: *const RUBase,
    pub extension: *const RUBase,
    pub font_funcs: *const RUFontFuncs,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RuteFFI {
    pub create_application: extern "C" fn(priv_data: *const RUBase) -> RUApplication,

    pub get_application: extern "C" fn(priv_data: *const RUBase) -> RUApplication,

    pub create_widget: extern "C" fn(
        priv_data: *const RUBase,
        callback: unsafe extern "C" fn(),
        host_data: *const c_void) -> RUWidget,
    pub create_list_widget_item: extern "C" fn(
        priv_data: *const RUBase,
        callback: unsafe extern "C" fn(),
        host_data: *const c_void) -> RUListWidgetItem,
    pub create_list_widget: extern "C" fn(
        priv_data: *const RUBase,
        callback: unsafe extern "C" fn(),
        host_data: *const c_void) -> RUListWidget,
    pub create_font: extern "C" fn(priv_data: *const RUBase) -> RUFont,

}


extern "C" {
    pub fn rute_get() -> *const RuteFFI;
}

