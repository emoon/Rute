// This file is auto-generated by rute_gen. DO NOT EDIT.
use std::cell::Cell;
use std::rc::Rc;

#[allow(unused_imports)]
use std::marker::PhantomData;

#[allow(unused_imports)]
use std::os::raw::c_void;

#[allow(unused_imports)]
use std::mem::transmute;

#[allow(unused_imports)]
use std::ffi::{CStr, CString};

use rute_ffi_base::*;

// Auto-generated imports

#[allow(unused_imports)]
use auto::event::*;
#[allow(unused_imports)]
use auto::event_ffi::*;
#[allow(unused_imports)]
use auto::input_event::*;
#[allow(unused_imports)]
use auto::input_event_ffi::*;
#[allow(unused_imports)]
use auto::mouse_event_ffi::*;
#[allow(unused_imports)]
use auto::point::Point;
#[allow(unused_imports)]
use auto::point_f::PointF;
#[allow(unused_imports)]
use auto::point_f::PointFTrait;
#[allow(unused_imports)]
use auto::point_f_ffi::*;
#[allow(unused_imports)]
use auto::rute::*;
#[allow(unused_imports)]
use auto::rute_enums::MouseButton;
#[allow(unused_imports)]
use auto::rute_enums::MouseButtons;
#[allow(unused_imports)]
use auto::rute_enums::MouseEventFlags;
#[allow(unused_imports)]
use auto::rute_enums::MouseEventSource;
#[allow(unused_imports)]
use auto::rute_ffi::*;
///
/// Mouse events occur when a mouse button is pressed or released
/// inside a widget, or when the mouse cursor is moved.
///
/// Mouse move events will occur only when a mouse button is pressed
/// down, unless mouse tracking has been enabled with
/// QWidget::setMouseTracking().
///
/// Qt automatically grabs the mouse when a mouse button is pressed
/// inside a widget; the widget will continue to receive mouse events
/// until the last mouse button is released.
///
/// A mouse event contains a special accept flag that indicates
/// whether the receiver wants the event. You should call ignore() if
/// the mouse event is not handled by your widget. A mouse event is
/// propagated up the parent widget chain until a widget accepts it
/// with accept(), or an event filter consumes it.
///
/// **Note**: If a mouse event is propagated to a [widget](QWidget)
/// for
/// which Qt::WA_NoMousePropagation has been set, that mouse event
/// will not be propagated further up the parent widget chain.
///
/// The state of the keyboard modifier keys can be found by calling the
/// [modifiers()](QInputEvent::modifiers())
/// function, inherited from
/// QInputEvent.
///
/// The functions pos(), x(), and y() give the cursor position
/// relative to the widget that receives the mouse event. If you
/// move the widget as a result of the mouse event, use the global
/// position returned by globalPos() to avoid a shaking motion.
///
/// The QWidget::setEnabled() function can be used to enable or
/// disable mouse and keyboard events for a widget.
///
/// Reimplement the QWidget event handlers, QWidget::mousePressEvent(),
/// QWidget::mouseReleaseEvent(), QWidget::mouseDoubleClickEvent(),
/// and QWidget::mouseMoveEvent() to receive mouse events in your own
/// widgets.
///
/// **See also:** [`Widget::set_mouse_tracking`]
/// [`Widget::grab_mouse`]
/// [`Cursor::pos`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
#[derive(Clone)]
pub struct MouseEvent<'a> {
    pub data: Rc<Cell<Option<*const RUBase>>>,
    pub all_funcs: *const RUMouseEventAllFuncs,
    pub owned: bool,
    pub _marker: PhantomData<::std::cell::Cell<&'a ()>>,
}

impl<'a> MouseEvent<'a> {
    pub fn new_from_rc(ffi_data: RUMouseEvent) -> MouseEvent<'a> {
        MouseEvent {
            data: unsafe { Rc::from_raw(ffi_data.host_data as *const Cell<Option<*const RUBase>>) },
            all_funcs: ffi_data.all_funcs,
            owned: false,
            _marker: PhantomData,
        }
    }

    pub fn new_from_owned(ffi_data: RUMouseEvent) -> MouseEvent<'a> {
        MouseEvent {
            data: Rc::new(Cell::new(Some(ffi_data.qt_data as *const RUBase))),
            all_funcs: ffi_data.all_funcs,
            owned: true,
            _marker: PhantomData,
        }
    }

    pub fn new_from_temporary(ffi_data: RUMouseEvent) -> MouseEvent<'a> {
        MouseEvent {
            data: Rc::new(Cell::new(Some(ffi_data.qt_data as *const RUBase))),
            all_funcs: ffi_data.all_funcs,
            owned: false,
            _marker: PhantomData,
        }
    }
}
pub trait MouseEventTrait<'a> {
    ///
    /// Returns the position of the mouse cursor, relative to the widget
    /// that received the event.
    ///
    /// If you move the widget as a result of the mouse event, use the
    /// global position returned by globalPos() to avoid a shaking
    /// motion.
    ///
    /// **See also:** [`x()`]
    /// [`y()`]
    /// [`global_pos()`]
    ///
    /// Use localPos() instead.
    fn pos(&self) -> Point {
        let (obj_data, funcs) = self.get_mouse_event_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).pos)(obj_data);
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = Point::new_from_rc(t);
            } else {
                ret_val = Point::new_from_owned(t);
            }
            ret_val
        }
    }
    ///
    /// Returns the global position of the mouse cursor *at the time
    /// of the event* . This is important on asynchronous window systems
    /// like X11. Whenever you move your widgets around in response to
    /// mouse events, globalPos() may differ a lot from the current
    /// pointer position QCursor::pos(), and from
    /// QWidget::mapToGlobal(pos()).
    ///
    /// **See also:** [`global_x()`]
    /// [`global_y()`]
    fn global_pos(&self) -> Point {
        let (obj_data, funcs) = self.get_mouse_event_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).global_pos)(obj_data);
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = Point::new_from_rc(t);
            } else {
                ret_val = Point::new_from_owned(t);
            }
            ret_val
        }
    }
    ///
    /// Returns the x position of the mouse cursor, relative to the
    /// widget that received the event.
    ///
    /// **See also:** [`y()`]
    /// [`pos()`]
    fn x(&self) -> i32 {
        let (obj_data, funcs) = self.get_mouse_event_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).x)(obj_data);
            ret_val
        }
    }
    ///
    /// Returns the y position of the mouse cursor, relative to the
    /// widget that received the event.
    ///
    /// **See also:** [`x()`]
    /// [`pos()`]
    fn y(&self) -> i32 {
        let (obj_data, funcs) = self.get_mouse_event_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).y)(obj_data);
            ret_val
        }
    }
    ///
    /// Returns the global x position of the mouse cursor at the time of
    /// the event.
    ///
    /// **See also:** [`global_y()`]
    /// [`global_pos()`]
    fn global_x(&self) -> i32 {
        let (obj_data, funcs) = self.get_mouse_event_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).global_x)(obj_data);
            ret_val
        }
    }
    ///
    /// Returns the global y position of the mouse cursor at the time of
    /// the event.
    ///
    /// **See also:** [`global_x()`]
    /// [`global_pos()`]
    fn global_y(&self) -> i32 {
        let (obj_data, funcs) = self.get_mouse_event_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).global_y)(obj_data);
            ret_val
        }
    }
    ///
    /// Returns the position of the mouse cursor as a QPointF, relative to the
    /// widget or item that received the event.
    ///
    /// If you move the widget as a result of the mouse event, use the
    /// screen position returned by screenPos() to avoid a shaking
    /// motion.
    ///
    /// **See also:** [`x()`]
    /// [`y()`]
    /// [`window_pos()`]
    /// [`screen_pos()`]
    fn local_pos(&self) -> Option<PointF> {
        let (obj_data, funcs) = self.get_mouse_event_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).local_pos)(obj_data);
            if ret_val.qt_data == ::std::ptr::null() {
                return None;
            }
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = PointF::new_from_rc(t);
            } else {
                ret_val = PointF::new_from_owned(t);
            }
            Some(ret_val)
        }
    }
    ///
    /// Returns the position of the mouse cursor as a QPointF, relative to the
    /// window that received the event.
    ///
    /// If you move the widget as a result of the mouse event, use the
    /// global position returned by globalPos() to avoid a shaking
    /// motion.
    ///
    /// **See also:** [`x()`]
    /// [`y()`]
    /// [`pos()`]
    /// [`local_pos()`]
    /// [`screen_pos()`]
    fn window_pos(&self) -> Option<PointF> {
        let (obj_data, funcs) = self.get_mouse_event_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).window_pos)(obj_data);
            if ret_val.qt_data == ::std::ptr::null() {
                return None;
            }
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = PointF::new_from_rc(t);
            } else {
                ret_val = PointF::new_from_owned(t);
            }
            Some(ret_val)
        }
    }
    ///
    /// Returns the position of the mouse cursor as a QPointF, relative to the
    /// screen that received the event.
    ///
    /// **See also:** [`x()`]
    /// [`y()`]
    /// [`pos()`]
    /// [`local_pos()`]
    /// [`window_pos()`]
    fn screen_pos(&self) -> Option<PointF> {
        let (obj_data, funcs) = self.get_mouse_event_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).screen_pos)(obj_data);
            if ret_val.qt_data == ::std::ptr::null() {
                return None;
            }
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = PointF::new_from_rc(t);
            } else {
                ret_val = PointF::new_from_owned(t);
            }
            Some(ret_val)
        }
    }
    ///
    /// Returns the button that caused the event.
    ///
    /// Note that the returned value is always Qt::NoButton for mouse
    /// move events.
    ///
    /// **See also:** [`buttons()`]
    /// [`t::mouse_button()`]
    ///
    /// Returns the button state when the event was generated. The button
    /// state is a combination of Qt::LeftButton, Qt::RightButton,
    /// Qt::MidButton using the OR operator. For mouse move events,
    /// this is all buttons that are pressed down. For mouse press and
    /// double click events this includes the button that caused the
    /// event. For mouse release events this excludes the button that
    /// caused the event.
    ///
    /// **See also:** [`button()`]
    /// [`t::mouse_button()`]
    fn button(&self) -> MouseButton {
        let (obj_data, funcs) = self.get_mouse_event_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).button)(obj_data);
            let ret_val = { transmute::<i32, MouseButton>(ret_val) };
            ret_val
        }
    }
    ///
    /// Returns the button state when the event was generated. The button
    /// state is a combination of Qt::LeftButton, Qt::RightButton,
    /// Qt::MidButton using the OR operator. For mouse move events,
    /// this is all buttons that are pressed down. For mouse press and
    /// double click events this includes the button that caused the
    /// event. For mouse release events this excludes the button that
    /// caused the event.
    ///
    /// **See also:** [`button()`]
    /// [`t::mouse_button()`]
    fn buttons(&self) -> MouseButtons {
        let (obj_data, funcs) = self.get_mouse_event_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).buttons)(obj_data);
            let ret_val = { transmute::<i32, MouseButtons>(ret_val) };
            ret_val
        }
    }
    fn set_local_pos(&self, local_position: &PointFTrait) {
        let (obj_local_position_1, _funcs) = local_position.get_point_f_obj_funcs();

        let (obj_data, funcs) = self.get_mouse_event_obj_funcs();
        unsafe {
            ((*funcs).set_local_pos)(obj_data, obj_local_position_1);
        }
    }
    ///
    /// Returns information about the mouse event source.
    ///
    /// The mouse event source can be used to distinguish between genuine
    /// and artificial mouse events. The latter are events that are
    /// synthesized from touch events by the operating system or Qt itself.
    ///
    /// **Note**: Many platforms provide no such information. On such platforms
    /// [Qt::MouseEventNotSynthesized](Qt::MouseEventNotSynthesized)
    /// is returned always.
    ///
    /// **See also:** [`t::mouse_event_source()`]
    /// **See also:** [`GraphicsSceneMouseEvent::source`]
    fn source(&self) -> MouseEventSource {
        let (obj_data, funcs) = self.get_mouse_event_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).source)(obj_data);
            let ret_val = { transmute::<i32, MouseEventSource>(ret_val) };
            ret_val
        }
    }
    ///
    /// Returns the mouse event flags.
    ///
    /// The mouse event flags provide additional information about a mouse event.
    ///
    /// **See also:** [`t::mouse_event_flag()`]
    /// **See also:** [`GraphicsSceneMouseEvent::flags`]
    fn flags(&self) -> MouseEventFlags {
        let (obj_data, funcs) = self.get_mouse_event_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).flags)(obj_data);
            let ret_val = { transmute::<i32, MouseEventFlags>(ret_val) };
            ret_val
        }
    }

    #[inline]
    fn get_mouse_event_obj_funcs(&self) -> (*const RUBase, *const RUMouseEventFuncs);
}

impl<'a> EventTrait<'a> for MouseEvent<'a> {
    #[inline]
    fn get_event_obj_funcs(&self) -> (*const RUBase, *const RUEventFuncs) {
        let obj = self.data.get().unwrap();
        unsafe { (obj, (*self.all_funcs).event_funcs) }
    }
}

impl<'a> InputEventTrait<'a> for MouseEvent<'a> {
    #[inline]
    fn get_input_event_obj_funcs(&self) -> (*const RUBase, *const RUInputEventFuncs) {
        let obj = self.data.get().unwrap();
        unsafe { (obj, (*self.all_funcs).input_event_funcs) }
    }
}

impl<'a> MouseEventTrait<'a> for MouseEvent<'a> {
    #[inline]
    fn get_mouse_event_obj_funcs(&self) -> (*const RUBase, *const RUMouseEventFuncs) {
        let obj = self.data.get().unwrap();
        unsafe { (obj, (*self.all_funcs).mouse_event_funcs) }
    }
}
