// This file is auto-generated by rute_gen. DO NOT EDIT.
use rute_ffi_base::*;

#[allow(unused_imports)]
use auto::size_ffi::RUSize;
#[allow(unused_imports)]
use std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUSizeFFuncs {
    pub destroy: extern "C" fn(self_c: *const RUBase),
    pub is_null: extern "C" fn(self_c: *const RUBase) -> bool,
    pub is_empty: extern "C" fn(self_c: *const RUBase) -> bool,
    pub is_valid: extern "C" fn(self_c: *const RUBase) -> bool,
    pub width: extern "C" fn(self_c: *const RUBase) -> f32,
    pub height: extern "C" fn(self_c: *const RUBase) -> f32,
    pub set_width: extern "C" fn(self_c: *const RUBase, w: f32),
    pub set_height: extern "C" fn(self_c: *const RUBase, h: f32),
    pub scale: extern "C" fn(self_c: *const RUBase, w: f32, h: f32, mode: i32),
    pub scale_2: extern "C" fn(self_c: *const RUBase, s: *const RUBase, mode: i32),
    pub scaled: extern "C" fn(self_c: *const RUBase, w: f32, h: f32, mode: i32) -> RUSizeF,
    pub scaled_2: extern "C" fn(self_c: *const RUBase, s: *const RUBase, mode: i32) -> RUSizeF,
    pub expanded_to: extern "C" fn(self_c: *const RUBase, arg0: *const RUBase) -> RUSizeF,
    pub bounded_to: extern "C" fn(self_c: *const RUBase, arg0: *const RUBase) -> RUSizeF,
    pub rwidth: extern "C" fn(self_c: *const RUBase) -> f32,
    pub rheight: extern "C" fn(self_c: *const RUBase) -> f32,
    pub to_size: extern "C" fn(self_c: *const RUBase) -> RUSize,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUSizeFAllFuncs {
    pub size_f_funcs: *const RUSizeFFuncs,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUSizeF {
    pub qt_data: *const RUBase,
    pub host_data: *const RUBase,
    pub all_funcs: *const RUSizeFAllFuncs,
}
