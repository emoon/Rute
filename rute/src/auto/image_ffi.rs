// This file is auto-generated by rute_gen. DO NOT EDIT.
use rute_ffi_base::*;

use auto::color_ffi::RUColor;
use auto::paint_device_ffi::*;
use auto::paint_engine_ffi::RUPaintEngine;
use auto::pixel_format_ffi::RUPixelFormat;
use auto::point_ffi::RUPoint;
use auto::rect_ffi::RURect;
use auto::size_ffi::RUSize;
#[allow(unused_imports)]
use std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUImageFuncs {
    pub destroy: extern "C" fn(self_c: *const RUBase),
    pub swap: extern "C" fn(self_c: *const RUBase, other: *const RUBase),
    pub is_null: extern "C" fn(self_c: *const RUBase) -> bool,
    pub set_dev_type: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_dev_type: extern "C" fn(object: *const RUBase),

    pub detach: extern "C" fn(self_c: *const RUBase),
    pub is_detached: extern "C" fn(self_c: *const RUBase) -> bool,
    pub copy_by_rect: extern "C" fn(self_c: *const RUBase, rect: *const RUBase) -> RUImage,
    pub copy: extern "C" fn(self_c: *const RUBase, x: i32, y: i32, w: i32, h: i32) -> RUImage,
    pub format: extern "C" fn(self_c: *const RUBase) -> i32,
    pub convert_to_format: extern "C" fn(self_c: *const RUBase, f: i32, flags: i32) -> RUImage,
    pub reinterpret_as_format: extern "C" fn(self_c: *const RUBase, f: i32) -> bool,
    pub width: extern "C" fn(self_c: *const RUBase) -> i32,
    pub height: extern "C" fn(self_c: *const RUBase) -> i32,
    pub size: extern "C" fn(self_c: *const RUBase) -> RUSize,
    pub rect: extern "C" fn(self_c: *const RUBase) -> RURect,
    pub depth: extern "C" fn(self_c: *const RUBase) -> i32,
    pub color_count: extern "C" fn(self_c: *const RUBase) -> i32,
    pub bit_plane_count: extern "C" fn(self_c: *const RUBase) -> i32,
    pub color: extern "C" fn(self_c: *const RUBase, i: i32) -> u32,
    pub set_color: extern "C" fn(self_c: *const RUBase, i: i32, c: u32),
    pub set_color_count: extern "C" fn(self_c: *const RUBase, arg0: i32),
    pub all_gray: extern "C" fn(self_c: *const RUBase) -> bool,
    pub is_grayscale: extern "C" fn(self_c: *const RUBase) -> bool,
    pub bits: extern "C" fn(self_c: *const RUBase) -> u8,
    pub const_bits: extern "C" fn(self_c: *const RUBase) -> u8,
    pub byte_count: extern "C" fn(self_c: *const RUBase) -> i32,
    pub size_in_bytes: extern "C" fn(self_c: *const RUBase) -> i32,
    pub scan_line: extern "C" fn(self_c: *const RUBase, arg0: i32) -> u8,
    pub const_scan_line: extern "C" fn(self_c: *const RUBase, arg0: i32) -> u8,
    pub bytes_per_line: extern "C" fn(self_c: *const RUBase) -> i32,
    pub valid: extern "C" fn(self_c: *const RUBase, x: i32, y: i32) -> bool,
    pub valid_by_point: extern "C" fn(self_c: *const RUBase, pt: *const RUBase) -> bool,
    pub pixel_index: extern "C" fn(self_c: *const RUBase, x: i32, y: i32) -> i32,
    pub pixel_index_by_point: extern "C" fn(self_c: *const RUBase, pt: *const RUBase) -> i32,
    pub pixel: extern "C" fn(self_c: *const RUBase, x: i32, y: i32) -> u32,
    pub pixel_by_point: extern "C" fn(self_c: *const RUBase, pt: *const RUBase) -> u32,
    pub set_pixel: extern "C" fn(self_c: *const RUBase, x: i32, y: i32, index_or_rgb: RUuint),
    pub set_pixel_by_point:
        extern "C" fn(self_c: *const RUBase, pt: *const RUBase, index_or_rgb: RUuint),
    pub pixel_color: extern "C" fn(self_c: *const RUBase, x: i32, y: i32) -> RUColor,
    pub pixel_color_by_point: extern "C" fn(self_c: *const RUBase, pt: *const RUBase) -> RUColor,
    pub set_pixel_color: extern "C" fn(self_c: *const RUBase, x: i32, y: i32, c: *const RUBase),
    pub set_pixel_color_by_point:
        extern "C" fn(self_c: *const RUBase, pt: *const RUBase, c: *const RUBase),
    pub device_pixel_ratio: extern "C" fn(self_c: *const RUBase) -> f32,
    pub set_device_pixel_ratio: extern "C" fn(self_c: *const RUBase, scale_factor: f32),
    pub fill: extern "C" fn(self_c: *const RUBase, pixel: u32),
    pub fill_by_type: extern "C" fn(self_c: *const RUBase, color: *const RUBase),
    pub fill_by_color: extern "C" fn(self_c: *const RUBase, color: i32),
    pub has_alpha_channel: extern "C" fn(self_c: *const RUBase) -> bool,
    pub set_alpha_channel: extern "C" fn(self_c: *const RUBase, alpha_channel: *const RUBase),
    pub alpha_channel: extern "C" fn(self_c: *const RUBase) -> RUImage,
    pub create_alpha_mask: extern "C" fn(self_c: *const RUBase, flags: i32) -> RUImage,
    pub create_heuristic_mask: extern "C" fn(self_c: *const RUBase, clip_tight: bool) -> RUImage,
    pub create_mask_from_color:
        extern "C" fn(self_c: *const RUBase, color: RURgbType, mode: i32) -> RUImage,
    pub scaled: extern "C" fn(self_c: *const RUBase, w: i32, h: i32, aspect_mode: i32, mode: i32)
        -> RUImage,
    pub scaled_by_size:
        extern "C" fn(self_c: *const RUBase, s: *const RUBase, aspect_mode: i32, mode: i32)
            -> RUImage,
    pub scaled_to_width: extern "C" fn(self_c: *const RUBase, w: i32, mode: i32) -> RUImage,
    pub scaled_to_height: extern "C" fn(self_c: *const RUBase, h: i32, mode: i32) -> RUImage,
    pub mirrored:
        extern "C" fn(self_c: *const RUBase, horizontally: bool, vertically: bool) -> RUImage,
    pub rgb_swapped: extern "C" fn(self_c: *const RUBase) -> RUImage,
    pub invert_pixels: extern "C" fn(self_c: *const RUBase, arg0: i32),
    pub load_by_io_device:
        extern "C" fn(self_c: *const RUBase, device: *const RUBase, format: *const RUBase) -> bool,
    pub load: extern "C" fn(
        self_c: *const RUBase,
        file_name: *const ::std::os::raw::c_char,
        format: *const RUBase,
    ) -> bool,
    pub load_from_data:
        extern "C" fn(self_c: *const RUBase, data: *const RUBase, aformat: *const RUBase) -> bool,
    pub save: extern "C" fn(
        self_c: *const RUBase,
        file_name: *const ::std::os::raw::c_char,
        format: *const RUBase,
        quality: i32,
    ) -> bool,
    pub cache_key: extern "C" fn(self_c: *const RUBase) -> i64,
    pub set_paint_engine: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_paint_engine: extern "C" fn(object: *const RUBase),

    pub dots_per_meter_x: extern "C" fn(self_c: *const RUBase) -> i32,
    pub dots_per_meter_y: extern "C" fn(self_c: *const RUBase) -> i32,
    pub set_dots_per_meter_x: extern "C" fn(self_c: *const RUBase, arg0: i32),
    pub set_dots_per_meter_y: extern "C" fn(self_c: *const RUBase, arg0: i32),
    pub offset: extern "C" fn(self_c: *const RUBase) -> RUPoint,
    pub set_offset: extern "C" fn(self_c: *const RUBase, arg0: *const RUBase),
    pub text_keys: extern "C" fn(self_c: *const RUBase) -> RUArray,
    pub text: extern "C" fn(self_c: *const RUBase, key: *const ::std::os::raw::c_char)
        -> *const ::std::os::raw::c_char,
    pub set_text: extern "C" fn(
        self_c: *const RUBase,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ),
    pub pixel_format: extern "C" fn(self_c: *const RUBase) -> RUPixelFormat,
    pub to_pixel_format: extern "C" fn(self_c: *const RUBase, format: i32) -> RUPixelFormat,
    pub to_image_format: extern "C" fn(self_c: *const RUBase, format: RUPixelFormatType) -> i32,
    pub mirrored_helper:
        extern "C" fn(self_c: *const RUBase, horizontal: bool, vertical: bool) -> RUImage,
    pub rgb_swapped_helper: extern "C" fn(self_c: *const RUBase) -> RUImage,
    pub mirrored_inplace: extern "C" fn(self_c: *const RUBase, horizontal: bool, vertical: bool),
    pub rgb_swapped_inplace: extern "C" fn(self_c: *const RUBase),
    pub convert_to_format_helper:
        extern "C" fn(self_c: *const RUBase, format: i32, flags: i32) -> RUImage,
    pub convert_to_format_inplace:
        extern "C" fn(self_c: *const RUBase, format: i32, flags: i32) -> bool,
    pub smooth_scaled: extern "C" fn(self_c: *const RUBase, w: i32, h: i32) -> RUImage,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUImageAllFuncs {
    pub paint_device_funcs: *const RUPaintDeviceFuncs,
    pub image_funcs: *const RUImageFuncs,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUImage {
    pub qt_data: *const RUBase,
    pub host_data: *const RUBase,
    pub all_funcs: *const RUImageAllFuncs,
}
