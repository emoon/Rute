// This file is auto-generated by rute_gen. DO NOT EDIT.
use rute_ffi_base::*;

#[allow(unused_imports)]
use auto::margins_ffi::RUMargins;
#[allow(unused_imports)]
use auto::object_ffi::*;
#[allow(unused_imports)]
use auto::paint_device_ffi::*;
#[allow(unused_imports)]
use auto::widget_ffi::*;
#[allow(unused_imports)]
use std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RULineEditFuncs {
    pub destroy: extern "C" fn(self_c: *const RUBase),
    pub text: extern "C" fn(self_c: *const RUBase) -> *const ::std::os::raw::c_char,
    pub display_text: extern "C" fn(self_c: *const RUBase) -> *const ::std::os::raw::c_char,
    pub placeholder_text: extern "C" fn(self_c: *const RUBase) -> *const ::std::os::raw::c_char,
    pub set_placeholder_text:
        extern "C" fn(self_c: *const RUBase, arg0: *const ::std::os::raw::c_char),
    pub max_length: extern "C" fn(self_c: *const RUBase) -> i32,
    pub set_max_length: extern "C" fn(self_c: *const RUBase, arg0: i32),
    pub set_frame: extern "C" fn(self_c: *const RUBase, arg0: bool),
    pub has_frame: extern "C" fn(self_c: *const RUBase) -> bool,
    pub set_clear_button_enabled: extern "C" fn(self_c: *const RUBase, enable: bool),
    pub is_clear_button_enabled: extern "C" fn(self_c: *const RUBase) -> bool,
    pub echo_mode: extern "C" fn(self_c: *const RUBase) -> i32,
    pub set_echo_mode: extern "C" fn(self_c: *const RUBase, arg0: i32),
    pub is_read_only: extern "C" fn(self_c: *const RUBase) -> bool,
    pub set_read_only: extern "C" fn(self_c: *const RUBase, arg0: bool),
    pub cursor_position: extern "C" fn(self_c: *const RUBase) -> i32,
    pub set_cursor_position: extern "C" fn(self_c: *const RUBase, arg0: i32),
    pub cursor_position_at: extern "C" fn(self_c: *const RUBase, pos: *const RUBase) -> i32,
    pub set_alignment: extern "C" fn(self_c: *const RUBase, flag: i32),
    pub alignment: extern "C" fn(self_c: *const RUBase) -> i32,
    pub cursor_forward: extern "C" fn(self_c: *const RUBase, mark: bool, steps: i32),
    pub cursor_backward: extern "C" fn(self_c: *const RUBase, mark: bool, steps: i32),
    pub cursor_word_forward: extern "C" fn(self_c: *const RUBase, mark: bool),
    pub cursor_word_backward: extern "C" fn(self_c: *const RUBase, mark: bool),
    pub backspace: extern "C" fn(self_c: *const RUBase),
    pub del: extern "C" fn(self_c: *const RUBase),
    pub home: extern "C" fn(self_c: *const RUBase, mark: bool),
    pub end: extern "C" fn(self_c: *const RUBase, mark: bool),
    pub is_modified: extern "C" fn(self_c: *const RUBase) -> bool,
    pub set_modified: extern "C" fn(self_c: *const RUBase, arg0: bool),
    pub set_selection: extern "C" fn(self_c: *const RUBase, arg0: i32, arg1: i32),
    pub has_selected_text: extern "C" fn(self_c: *const RUBase) -> bool,
    pub selected_text: extern "C" fn(self_c: *const RUBase) -> *const ::std::os::raw::c_char,
    pub selection_start: extern "C" fn(self_c: *const RUBase) -> i32,
    pub selection_end: extern "C" fn(self_c: *const RUBase) -> i32,
    pub selection_length: extern "C" fn(self_c: *const RUBase) -> i32,
    pub is_undo_available: extern "C" fn(self_c: *const RUBase) -> bool,
    pub is_redo_available: extern "C" fn(self_c: *const RUBase) -> bool,
    pub set_drag_enabled: extern "C" fn(self_c: *const RUBase, b: bool),
    pub drag_enabled: extern "C" fn(self_c: *const RUBase) -> bool,
    pub set_cursor_move_style: extern "C" fn(self_c: *const RUBase, style: i32),
    pub cursor_move_style: extern "C" fn(self_c: *const RUBase) -> i32,
    pub input_mask: extern "C" fn(self_c: *const RUBase) -> *const ::std::os::raw::c_char,
    pub set_input_mask:
        extern "C" fn(self_c: *const RUBase, input_mask: *const ::std::os::raw::c_char),
    pub has_acceptable_input: extern "C" fn(self_c: *const RUBase) -> bool,
    pub set_text_margins:
        extern "C" fn(self_c: *const RUBase, left: i32, top: i32, right: i32, bottom: i32),
    pub set_text_margins_2: extern "C" fn(self_c: *const RUBase, margins: *const RUBase),
    pub text_margins: extern "C" fn(self_c: *const RUBase) -> RUMargins,
    pub set_text: extern "C" fn(self_c: *const RUBase, arg0: *const ::std::os::raw::c_char),
    pub clear: extern "C" fn(self_c: *const RUBase),
    pub select_all: extern "C" fn(self_c: *const RUBase),
    pub undo: extern "C" fn(self_c: *const RUBase),
    pub redo: extern "C" fn(self_c: *const RUBase),
    pub cut: extern "C" fn(self_c: *const RUBase),
    pub copy: extern "C" fn(self_c: *const RUBase),
    pub paste: extern "C" fn(self_c: *const RUBase),
    pub deselect: extern "C" fn(self_c: *const RUBase),
    pub insert: extern "C" fn(self_c: *const RUBase, arg0: *const ::std::os::raw::c_char),
    pub set_text_changed_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_text_edited_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_cursor_position_changed_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_return_pressed_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_editing_finished_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_selection_changed_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub set_mouse_press_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_mouse_press_event: extern "C" fn(object: *const RUBase),

    pub set_mouse_move_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_mouse_move_event: extern "C" fn(object: *const RUBase),

    pub set_mouse_release_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_mouse_release_event: extern "C" fn(object: *const RUBase),

    pub set_mouse_double_click_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_mouse_double_click_event: extern "C" fn(object: *const RUBase),

    pub set_key_press_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_key_press_event: extern "C" fn(object: *const RUBase),

    pub set_focus_in_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_focus_in_event: extern "C" fn(object: *const RUBase),

    pub set_focus_out_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_focus_out_event: extern "C" fn(object: *const RUBase),

    pub set_paint_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_paint_event: extern "C" fn(object: *const RUBase),

    pub set_drag_enter_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_drag_enter_event: extern "C" fn(object: *const RUBase),

    pub set_drag_move_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_drag_move_event: extern "C" fn(object: *const RUBase),

    pub set_drag_leave_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_drag_leave_event: extern "C" fn(object: *const RUBase),

    pub set_drop_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_drop_event: extern "C" fn(object: *const RUBase),

    pub set_change_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_change_event: extern "C" fn(object: *const RUBase),

    pub set_context_menu_event: extern "C" fn(
        object: *const RUBase,
        user_data: *const c_void,
        trampoline_func: *const c_void,
        callback: *const c_void,
    ),

    pub remove_context_menu_event: extern "C" fn(object: *const RUBase),
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RULineEditAllFuncs {
    pub object_funcs: *const RUObjectFuncs,
    pub paint_device_funcs: *const RUPaintDeviceFuncs,
    pub widget_funcs: *const RUWidgetFuncs,
    pub line_edit_funcs: *const RULineEditFuncs,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RULineEdit {
    pub qt_data: *const RUBase,
    pub host_data: *const RUBase,
    pub all_funcs: *const RULineEditAllFuncs,
}
