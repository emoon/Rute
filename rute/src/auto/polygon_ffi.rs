// This file is auto-generated by rute_gen. DO NOT EDIT.
use rute_ffi_base::*;

#[allow(unused_imports)]
use auto::point_ffi::RUPoint;
#[allow(unused_imports)]
use auto::point_ffi::*;
#[allow(unused_imports)]
use auto::rect_ffi::RURect;
#[allow(unused_imports)]
use std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUPolygonFuncs {
    pub destroy: extern "C" fn(self_c: *const RUBase),
    pub swap: extern "C" fn(self_c: *const RUBase, other: *const RUBase),
    pub bounding_rect: extern "C" fn(self_c: *const RUBase) -> RURect,
    pub point_2: extern "C" fn(self_c: *const RUBase, i: i32) -> RUPoint,
    pub set_point: extern "C" fn(self_c: *const RUBase, index: i32, x: i32, y: i32),
    pub set_point_2: extern "C" fn(self_c: *const RUBase, index: i32, p: *const RUBase),
    pub set_points_2: extern "C" fn(self_c: *const RUBase, n_points: i32, firstx: i32, firsty: i32),
    pub put_points_2:
        extern "C" fn(self_c: *const RUBase, index: i32, n_points: i32, firstx: i32, firsty: i32),
    pub put_points_3: extern "C" fn(
        self_c: *const RUBase,
        index: i32,
        n_points: i32,
        from: *const RUBase,
        from_index: i32,
    ),
    pub contains_point:
        extern "C" fn(self_c: *const RUBase, pt: *const RUBase, fill_rule: u32) -> bool,
    pub united: extern "C" fn(self_c: *const RUBase, r: *const RUBase) -> RUPolygon,
    pub intersected: extern "C" fn(self_c: *const RUBase, r: *const RUBase) -> RUPolygon,
    pub intersects: extern "C" fn(self_c: *const RUBase, r: *const RUBase) -> bool,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUPolygonAllFuncs {
    pub point_funcs: *const RUPointFuncs,
    pub polygon_funcs: *const RUPolygonFuncs,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUPolygon {
    pub qt_data: *const RUBase,
    pub host_data: *const RUBase,
    pub all_funcs: *const RUPolygonAllFuncs,
}
