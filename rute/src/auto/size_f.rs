// This file is auto-generated by rute_gen. DO NOT EDIT.
use std::cell::Cell;
use std::rc::Rc;

#[allow(unused_imports)]
use std::marker::PhantomData;

#[allow(unused_imports)]
use std::os::raw::c_void;

#[allow(unused_imports)]
use std::mem::transmute;

#[allow(unused_imports)]
use std::ffi::{CStr, CString};

use rute_ffi_base::*;

// Auto-generated imports

#[allow(unused_imports)]
use auto::rute::*;
#[allow(unused_imports)]
use auto::rute_enums::AspectRatioMode;
#[allow(unused_imports)]
use auto::rute_ffi::*;
#[allow(unused_imports)]
use auto::size::Size;
#[allow(unused_imports)]
use auto::size_f_ffi::*;
///
/// A size is specified by a width() and a height(). It can be set in
/// the constructor and changed using the setWidth(), setHeight(), or
/// scale() functions, or using arithmetic operators. A size can also
/// be manipulated directly by retrieving references to the width and
/// height using the rwidth() and rheight() functions. Finally, the
/// width and height can be swapped using the transpose() function.
///
/// The isValid() function determines if a size is valid. A valid size
/// has both width and height greater than or equal to zero. The
/// isEmpty() function returns `true` if either of the width and height
/// is *less* than (or equal to) zero, while the isNull() function
/// returns `true` only if both the width and the height is zero.
///
/// Use the expandedTo() function to retrieve a size which holds the
/// maximum height and width of this size and a given
/// size. Similarly, the boundedTo() function returns a size which
/// holds the minimum height and width of this size and a given size.
///
/// The QSizeF class also provides the toSize() function returning a
/// QSize copy of this size, constructed by rounding the width and
/// height to the nearest integers.
///
/// QSizeF objects can be streamed as well as compared.
///
/// **See also:** [`Size`]
/// [`PointF`]
/// [`RectF`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
#[derive(Clone)]
pub struct SizeF<'a> {
    pub data: Rc<Cell<Option<*const RUBase>>>,
    pub all_funcs: *const RUSizeFAllFuncs,
    pub owned: bool,
    pub _marker: PhantomData<::std::cell::Cell<&'a ()>>,
}

impl<'a> SizeF<'a> {
    pub fn new() -> SizeF<'a> {
        let data = Rc::new(Cell::new(None));

        let ffi_data = unsafe {
            ((*rute_ffi_get()).create_size_f)(
                ::std::ptr::null(),
                transmute(rute_object_delete_callback as usize),
                Rc::into_raw(data.clone()) as *const c_void,
            )
        };

        data.set(Some(ffi_data.qt_data));

        SizeF {
            data,
            all_funcs: ffi_data.all_funcs,
            owned: true,
            _marker: PhantomData,
        }
    }
    pub fn new_from_rc(ffi_data: RUSizeF) -> SizeF<'a> {
        SizeF {
            data: unsafe { Rc::from_raw(ffi_data.host_data as *const Cell<Option<*const RUBase>>) },
            all_funcs: ffi_data.all_funcs,
            owned: false,
            _marker: PhantomData,
        }
    }

    pub fn new_from_owned(ffi_data: RUSizeF) -> SizeF<'a> {
        SizeF {
            data: Rc::new(Cell::new(Some(ffi_data.qt_data as *const RUBase))),
            all_funcs: ffi_data.all_funcs,
            owned: true,
            _marker: PhantomData,
        }
    }

    pub fn new_from_temporary(ffi_data: RUSizeF) -> SizeF<'a> {
        SizeF {
            data: Rc::new(Cell::new(Some(ffi_data.qt_data as *const RUBase))),
            all_funcs: ffi_data.all_funcs,
            owned: false,
            _marker: PhantomData,
        }
    }
}
pub trait SizeFTrait<'a> {
    ///
    /// Returns `true` if both the width and height are 0.0 (ignoring the sign);
    /// otherwise returns `false.`
    ///
    /// **See also:** [`is_valid()`]
    /// [`is_empty()`]
    fn is_null(&self) -> bool {
        let (obj_data, funcs) = self.get_size_f_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).is_null)(obj_data);
            ret_val
        }
    }
    ///
    /// Returns `true` if either of the width and height is less than or
    /// equal to 0; otherwise returns `false.`
    ///
    /// **See also:** [`is_null()`]
    /// [`is_valid()`]
    fn is_empty(&self) -> bool {
        let (obj_data, funcs) = self.get_size_f_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).is_empty)(obj_data);
            ret_val
        }
    }
    ///
    /// Returns `true` if both the width and height is equal to or greater
    /// than 0; otherwise returns `false.`
    ///
    /// **See also:** [`is_null()`]
    /// [`is_empty()`]
    fn is_valid(&self) -> bool {
        let (obj_data, funcs) = self.get_size_f_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).is_valid)(obj_data);
            ret_val
        }
    }
    ///
    /// Returns the width.
    ///
    /// **See also:** [`height()`]
    /// [`set_width()`]
    fn width(&self) -> f32 {
        let (obj_data, funcs) = self.get_size_f_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).width)(obj_data);
            ret_val
        }
    }
    ///
    /// Returns the height.
    ///
    /// **See also:** [`width()`]
    /// [`set_height()`]
    fn height(&self) -> f32 {
        let (obj_data, funcs) = self.get_size_f_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).height)(obj_data);
            ret_val
        }
    }
    ///
    /// Sets the width to the given *width.*
    ///
    /// **See also:** [`width()`]
    /// [`rwidth()`]
    /// [`set_height()`]
    fn set_width(&self, w: f32) {
        let (obj_data, funcs) = self.get_size_f_obj_funcs();
        unsafe {
            ((*funcs).set_width)(obj_data, w);
        }
    }
    ///
    /// Sets the height to the given *height.*
    ///
    /// **See also:** [`height()`]
    /// [`rheight()`]
    /// [`set_width()`]
    fn set_height(&self, h: f32) {
        let (obj_data, funcs) = self.get_size_f_obj_funcs();
        unsafe {
            ((*funcs).set_height)(obj_data, h);
        }
    }
    ///
    /// Scales the size to a rectangle with the given *width* and *height,* according to the specified *mode.*
    ///
    /// * If *mode* is Qt::IgnoreAspectRatio, the size is set to ( *width,* *height).*
    /// * If *mode* is Qt::KeepAspectRatio, the current size is scaled to a rectangle as large as possible inside ( *width,* *height),* preserving the aspect ratio.
    /// * If *mode* is Qt::KeepAspectRatioByExpanding, the current size is scaled to a rectangle as small as possible outside ( *width,* *height),* preserving the aspect ratio.
    ///
    /// Example:
    ///
    /// **See also:** [`set_width()`]
    /// [`set_height()`]
    /// [`scaled()`]
    ///
    /// **Overloads**
    /// Scales the size to a rectangle with the given *size,* according to
    /// the specified *mode.*
    ///
    /// Returns a size scaled to a rectangle with the given *width* and
    /// *height,* according to the specified *mode.*
    ///
    /// **See also:** [`scale()`]
    ///
    /// **Overloads**
    /// Returns a size scaled to a rectangle with the given size *s,*
    /// according to the specified *mode.*
    fn scale(&self, w: f32, h: f32, mode: AspectRatioMode) {
        let enum_mode_3 = mode as i32;

        let (obj_data, funcs) = self.get_size_f_obj_funcs();
        unsafe {
            ((*funcs).scale)(obj_data, w, h, enum_mode_3);
        }
    }
    ///
    /// Scales the size to a rectangle with the given *width* and *height,* according to the specified *mode.*
    ///
    /// * If *mode* is Qt::IgnoreAspectRatio, the size is set to ( *width,* *height).*
    /// * If *mode* is Qt::KeepAspectRatio, the current size is scaled to a rectangle as large as possible inside ( *width,* *height),* preserving the aspect ratio.
    /// * If *mode* is Qt::KeepAspectRatioByExpanding, the current size is scaled to a rectangle as small as possible outside ( *width,* *height),* preserving the aspect ratio.
    ///
    /// Example:
    ///
    /// **See also:** [`set_width()`]
    /// [`set_height()`]
    /// [`scaled()`]
    ///
    /// **Overloads**
    /// Scales the size to a rectangle with the given *size,* according to
    /// the specified *mode.*
    ///
    /// Returns a size scaled to a rectangle with the given *width* and
    /// *height,* according to the specified *mode.*
    ///
    /// **See also:** [`scale()`]
    ///
    /// **Overloads**
    /// Returns a size scaled to a rectangle with the given size *s,*
    /// according to the specified *mode.*
    fn scale_2(&self, s: &SizeFTrait, mode: AspectRatioMode) {
        let (obj_s_1, _funcs) = s.get_size_f_obj_funcs();
        let enum_mode_2 = mode as i32;

        let (obj_data, funcs) = self.get_size_f_obj_funcs();
        unsafe {
            ((*funcs).scale_2)(obj_data, obj_s_1, enum_mode_2);
        }
    }
    ///
    /// Returns a size scaled to a rectangle with the given *width* and
    /// *height,* according to the specified *mode.*
    ///
    /// **See also:** [`scale()`]
    ///
    /// **Overloads**
    /// Returns a size scaled to a rectangle with the given size *s,*
    /// according to the specified *mode.*
    fn scaled(&self, w: f32, h: f32, mode: AspectRatioMode) -> SizeF {
        let enum_mode_3 = mode as i32;

        let (obj_data, funcs) = self.get_size_f_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).scaled)(obj_data, w, h, enum_mode_3);
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = SizeF::new_from_rc(t);
            } else {
                ret_val = SizeF::new_from_owned(t);
            }
            ret_val
        }
    }
    ///
    /// Returns a size scaled to a rectangle with the given *width* and
    /// *height,* according to the specified *mode.*
    ///
    /// **See also:** [`scale()`]
    ///
    /// **Overloads**
    /// Returns a size scaled to a rectangle with the given size *s,*
    /// according to the specified *mode.*
    fn scaled_2(&self, s: &SizeFTrait, mode: AspectRatioMode) -> SizeF {
        let (obj_s_1, _funcs) = s.get_size_f_obj_funcs();
        let enum_mode_2 = mode as i32;

        let (obj_data, funcs) = self.get_size_f_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).scaled_2)(obj_data, obj_s_1, enum_mode_2);
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = SizeF::new_from_rc(t);
            } else {
                ret_val = SizeF::new_from_owned(t);
            }
            ret_val
        }
    }
    ///
    /// Returns a size holding the maximum width and height of this size
    /// and the given *otherSize.*
    ///
    /// **See also:** [`bounded_to()`]
    /// [`scale()`]
    fn expanded_to(&self, arg0: &SizeFTrait) -> SizeF {
        let (obj_arg0_1, _funcs) = arg0.get_size_f_obj_funcs();

        let (obj_data, funcs) = self.get_size_f_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).expanded_to)(obj_data, obj_arg0_1);
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = SizeF::new_from_rc(t);
            } else {
                ret_val = SizeF::new_from_owned(t);
            }
            ret_val
        }
    }
    ///
    /// Returns a size holding the minimum width and height of this size
    /// and the given *otherSize.*
    ///
    /// **See also:** [`expanded_to()`]
    /// [`scale()`]
    fn bounded_to(&self, arg0: &SizeFTrait) -> SizeF {
        let (obj_arg0_1, _funcs) = arg0.get_size_f_obj_funcs();

        let (obj_data, funcs) = self.get_size_f_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).bounded_to)(obj_data, obj_arg0_1);
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = SizeF::new_from_rc(t);
            } else {
                ret_val = SizeF::new_from_owned(t);
            }
            ret_val
        }
    }
    ///
    /// Returns a reference to the width.
    ///
    /// Using a reference makes it possible to manipulate the width
    /// directly. For example:
    ///
    /// **See also:** [`rheight()`]
    /// [`set_width()`]
    fn rwidth(&self) -> f32 {
        let (obj_data, funcs) = self.get_size_f_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).rwidth)(obj_data);
            ret_val
        }
    }
    ///
    /// Returns a reference to the height.
    ///
    /// Using a reference makes it possible to manipulate the height
    /// directly. For example:
    ///
    /// **See also:** [`rwidth()`]
    /// [`set_height()`]
    fn rheight(&self) -> f32 {
        let (obj_data, funcs) = self.get_size_f_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).rheight)(obj_data);
            ret_val
        }
    }
    ///
    /// Returns an integer based copy of this size.
    ///
    /// Note that the coordinates in the returned size will be rounded to
    /// the nearest integer.
    ///
    /// **See also:** [`q_size_f()`]
    fn to_size(&self) -> Size {
        let (obj_data, funcs) = self.get_size_f_obj_funcs();
        unsafe {
            let ret_val = ((*funcs).to_size)(obj_data);
            let t = ret_val;
            let ret_val;
            if t.host_data != ::std::ptr::null() {
                ret_val = Size::new_from_rc(t);
            } else {
                ret_val = Size::new_from_owned(t);
            }
            ret_val
        }
    }

    #[inline]
    fn get_size_f_obj_funcs(&self) -> (*const RUBase, *const RUSizeFFuncs);
}

impl<'a> SizeFTrait<'a> for SizeF<'a> {
    #[inline]
    fn get_size_f_obj_funcs(&self) -> (*const RUBase, *const RUSizeFFuncs) {
        let obj = self.data.get().unwrap();
        unsafe { (obj, (*self.all_funcs).size_f_funcs) }
    }
}
