// This file is auto-generated by rute_gen. DO NOT EDIT.
use rute_ffi_base::*;

#[allow(unused_imports)]
use std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUSizeFuncs {
    pub destroy: extern "C" fn(self_c: *const RUBase),
    pub is_null: extern "C" fn(self_c: *const RUBase) -> bool,
    pub is_empty: extern "C" fn(self_c: *const RUBase) -> bool,
    pub is_valid: extern "C" fn(self_c: *const RUBase) -> bool,
    pub width: extern "C" fn(self_c: *const RUBase) -> i32,
    pub height: extern "C" fn(self_c: *const RUBase) -> i32,
    pub set_width: extern "C" fn(self_c: *const RUBase, w: i32),
    pub set_height: extern "C" fn(self_c: *const RUBase, h: i32),
    pub scale: extern "C" fn(self_c: *const RUBase, w: i32, h: i32, mode: u32),
    pub scale_2: extern "C" fn(self_c: *const RUBase, s: *const RUBase, mode: u32),
    pub scaled: extern "C" fn(self_c: *const RUBase, w: i32, h: i32, mode: u32) -> RUSize,
    pub scaled_2: extern "C" fn(self_c: *const RUBase, s: *const RUBase, mode: u32) -> RUSize,
    pub expanded_to: extern "C" fn(self_c: *const RUBase, arg0: *const RUBase) -> RUSize,
    pub bounded_to: extern "C" fn(self_c: *const RUBase, arg0: *const RUBase) -> RUSize,
    pub rwidth: extern "C" fn(self_c: *const RUBase) -> i32,
    pub rheight: extern "C" fn(self_c: *const RUBase) -> i32,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUSizeAllFuncs {
    pub size_funcs: *const RUSizeFuncs,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUSize {
    pub qt_data: *const RUBase,
    pub host_data: *const RUBase,
    pub all_funcs: *const RUSizeAllFuncs,
}
