// This file is auto-generated by rute_gen. DO NOT EDIT.
use rute_ffi_base::*;

#[allow(unused_imports)]
use auto::line_f_ffi::RULineF;
#[allow(unused_imports)]
use auto::line_ffi::RULine;
#[allow(unused_imports)]
use auto::point_f_ffi::RUPointF;
#[allow(unused_imports)]
use auto::point_ffi::RUPoint;
#[allow(unused_imports)]
use auto::polygon_f_ffi::RUPolygonF;
#[allow(unused_imports)]
use auto::polygon_ffi::RUPolygon;
#[allow(unused_imports)]
use auto::rect_f_ffi::RURectF;
#[allow(unused_imports)]
use auto::rect_ffi::RURect;
#[allow(unused_imports)]
use auto::region_ffi::RURegion;
#[allow(unused_imports)]
use std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUMatrixFuncs {
    pub destroy: extern "C" fn(self_c: *const RUBase),
    pub m11: extern "C" fn(self_c: *const RUBase) -> f32,
    pub m12: extern "C" fn(self_c: *const RUBase) -> f32,
    pub m21: extern "C" fn(self_c: *const RUBase) -> f32,
    pub m22: extern "C" fn(self_c: *const RUBase) -> f32,
    pub dx: extern "C" fn(self_c: *const RUBase) -> f32,
    pub dy: extern "C" fn(self_c: *const RUBase) -> f32,
    pub map_rect: extern "C" fn(self_c: *const RUBase, arg0: *const RUBase) -> RURect,
    pub map_rect_2: extern "C" fn(self_c: *const RUBase, arg0: *const RUBase) -> RURectF,
    pub map_3: extern "C" fn(self_c: *const RUBase, p: *const RUBase) -> RUPoint,
    pub map_4: extern "C" fn(self_c: *const RUBase, p: *const RUBase) -> RUPointF,
    pub map_5: extern "C" fn(self_c: *const RUBase, l: *const RUBase) -> RULine,
    pub map_6: extern "C" fn(self_c: *const RUBase, l: *const RUBase) -> RULineF,
    pub map_7: extern "C" fn(self_c: *const RUBase, a: *const RUBase) -> RUPolygonF,
    pub map_8: extern "C" fn(self_c: *const RUBase, a: *const RUBase) -> RUPolygon,
    pub map_9: extern "C" fn(self_c: *const RUBase, r: *const RUBase) -> RURegion,
    pub map_to_polygon: extern "C" fn(self_c: *const RUBase, r: *const RUBase) -> RUPolygon,
    pub reset: extern "C" fn(self_c: *const RUBase),
    pub is_identity: extern "C" fn(self_c: *const RUBase) -> bool,
    pub scale: extern "C" fn(self_c: *const RUBase, sx: f32, sy: f32) -> RUMatrix,
    pub shear: extern "C" fn(self_c: *const RUBase, sh: f32, sv: f32) -> RUMatrix,
    pub rotate: extern "C" fn(self_c: *const RUBase, a: f32) -> RUMatrix,
    pub is_invertible: extern "C" fn(self_c: *const RUBase) -> bool,
    pub determinant: extern "C" fn(self_c: *const RUBase) -> f32,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUMatrixAllFuncs {
    pub matrix_funcs: *const RUMatrixFuncs,
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct RUMatrix {
    pub qt_data: *const RUBase,
    pub host_data: *const RUBase,
    pub all_funcs: *const RUMatrixAllFuncs,
}
