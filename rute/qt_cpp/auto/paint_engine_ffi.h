// This file is auto-generated by rute_gen. DO NOT EDIT!
#pragma once

#include <stdint.h>
#include <stdbool.h>

#include "../rute_base.h"

#ifdef __cplusplus
extern "C" {
#endif
#include "paint_device_ffi.h"
#include "painter_ffi.h"
#include "point_ffi.h"
#include "rect_ffi.h"
#include "region_ffi.h"

struct RUPaintEngineFuncs;
struct RUPaintEngine;

typedef struct RUPaintEngineFuncs {
    void (*destroy)(struct RUBase* self);
    bool (*is_active)(struct RUBase* self_c);
    void (*set_active)(struct RUBase* self_c, bool new_state);
    void (*set_begin)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* pdev));
    void (*remove_begin)(void* object);
    void (*set_end)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c));
    void (*remove_end)(void* object);
    void (*set_update_state)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* state));
    void (*remove_update_state)(void* object);
    void (*set_draw_rects)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* rects, int rect_count));
    void (*remove_draw_rects)(void* object);
    void (*set_draw_rects)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* rects, int rect_count));
    void (*remove_draw_rects)(void* object);
    void (*set_draw_lines)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* lines, int line_count));
    void (*remove_draw_lines)(void* object);
    void (*set_draw_lines)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* lines, int line_count));
    void (*remove_draw_lines)(void* object);
    void (*set_draw_ellipse)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* r));
    void (*remove_draw_ellipse)(void* object);
    void (*set_draw_ellipse)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* r));
    void (*remove_draw_ellipse)(void* object);
    void (*set_draw_path)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* path));
    void (*remove_draw_path)(void* object);
    void (*set_draw_points)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* points, int point_count));
    void (*remove_draw_points)(void* object);
    void (*set_draw_points)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* points, int point_count));
    void (*remove_draw_points)(void* object);
    void (*set_draw_polygon)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* points, int point_count, int mode));
    void (*remove_draw_polygon)(void* object);
    void (*set_draw_polygon)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* points, int point_count, int mode));
    void (*remove_draw_polygon)(void* object);
    void (*set_draw_pixmap)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* r, struct RUBase* pm, struct RUBase* sr));
    void (*remove_draw_pixmap)(void* object);
    void (*set_draw_text_item)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* p, struct RUBase* text_item));
    void (*remove_draw_text_item)(void* object);
    void (*set_draw_tiled_pixmap)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* r, struct RUBase* pixmap, struct RUBase* s));
    void (*remove_draw_tiled_pixmap)(void* object);
    void (*set_draw_image)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* r, struct RUBase* pm, struct RUBase* sr, int flags));
    void (*remove_draw_image)(void* object);
    void (*set_paint_device)(struct RUBase* self_c, struct RUBase* device);
    struct RUPaintDevice (*paint_device)(struct RUBase* self_c);
    void (*set_system_clip)(struct RUBase* self_c, struct RUBase* base_clip);
    struct RURegion (*system_clip)(struct RUBase* self_c);
    void (*set_system_rect)(struct RUBase* self_c, struct RUBase* rect);
    struct RURect (*system_rect)(struct RUBase* self_c);
    void (*set_coordinate_offset)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c));
    void (*remove_coordinate_offset)(void* object);
    void (*set_type)(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c));
    void (*remove_type)(void* object);
    void (*fix_neg_rect)(struct RUBase* self_c, struct RUBase* x, struct RUBase* y, struct RUBase* w, struct RUBase* h);
    bool (*test_dirty)(struct RUBase* self_c, int df);
    void (*set_dirty)(struct RUBase* self_c, int df);
    void (*clear_dirty)(struct RUBase* self_c, int df);
    bool (*has_feature)(struct RUBase* self_c, int feature);
    struct RUPainter (*painter)(struct RUBase* self_c);
    void (*sync_state)(struct RUBase* self_c);
    bool (*is_extended)(struct RUBase* self_c);
} RUPaintEngineFuncs;

typedef struct RUPaintEngineAllFuncs {
    struct RUPaintEngineFuncs* paint_engine_funcs;
} RUPaintEngineAllFuncs;

typedef struct RUPaintEngine {
    RUBase* qt_data;
    RUBase* host_data;
    struct RUPaintEngineAllFuncs* all_funcs;
} RUPaintEngine;

extern RUPaintEngineFuncs s_paint_engine_funcs;
extern RUPaintEngineAllFuncs s_paint_engine_all_funcs;

#ifdef __cplusplus
}
#endif
