////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is auto-generated by rute_gen. DO NOT EDIT
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../rute_base.h"
#include "../rute_manual.h"
#include <QButtonGroup>
#include "button_group_ffi.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void button_group_set_exclusive(struct RUBase* self_c, bool arg0) {
    QButtonGroup* qt_value = (QButtonGroup*)self_c;
    qt_value->setExclusive(arg0);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool button_group_exclusive(struct RUBase* self_c) {
    QButtonGroup* qt_value = (QButtonGroup*)self_c;
    auto ret_value = qt_value->exclusive();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void button_group_add_button(struct RUBase* self_c, struct RUBase* arg0, int id) {
    QButtonGroup* qt_value = (QButtonGroup*)self_c;
    qt_value->addButton((WRAbstractButton*)arg0, id);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void button_group_remove_button(struct RUBase* self_c, struct RUBase* arg0) {
    QButtonGroup* qt_value = (QButtonGroup*)self_c;
    qt_value->removeButton((WRAbstractButton*)arg0);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUAbstractButton button_group_checked_button(struct RUBase* self_c) {
    QButtonGroup* qt_value = (QButtonGroup*)self_c;
    auto ret_value = qt_value->checkedButton();
    struct RUAbstractButton ctl;
    ctl.qt_data = (struct RUBase*)ret_value;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)ret_value];
    ctl.all_funcs = &s_abstract_button_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUAbstractButton button_group_button(struct RUBase* self_c, int id) {
    QButtonGroup* qt_value = (QButtonGroup*)self_c;
    auto ret_value = qt_value->button(id);
    struct RUAbstractButton ctl;
    ctl.qt_data = (struct RUBase*)ret_value;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)ret_value];
    ctl.all_funcs = &s_abstract_button_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void button_group_set_id(struct RUBase* self_c, struct RUBase* button, int id) {
    QButtonGroup* qt_value = (QButtonGroup*)self_c;
    qt_value->setId((WRAbstractButton*)button, id);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int button_group_id(struct RUBase* self_c, struct RUBase* button) {
    QButtonGroup* qt_value = (QButtonGroup*)self_c;
    auto ret_value = qt_value->id((WRAbstractButton*)button);
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int button_group_checked_id(struct RUBase* self_c) {
    QButtonGroup* qt_value = (QButtonGroup*)self_c;
    auto ret_value = qt_value->checkedId();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void set_button_group_button_clicked_event(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* arg0)) {
    QSlotWrapperSignal_self_AbstractButtonType_void* wrap = new QSlotWrapperSignal_self_AbstractButtonType_void(user_data, (Signal_self_AbstractButtonType_void)event, (void*)wrapped_func);
    QObject* q_obj = (QObject*)object;
    QObject::connect(q_obj, SIGNAL(buttonClicked(QAbstractButton*)), wrap, SLOT(method(QAbstractButton*)));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void set_button_group_button_clicked_2_event(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, int arg0)) {
    QSlotWrapperSignal_self_int_void* wrap = new QSlotWrapperSignal_self_int_void(user_data, (Signal_self_int_void)event, (void*)wrapped_func);
    QObject* q_obj = (QObject*)object;
    QObject::connect(q_obj, SIGNAL(buttonClicked2(int)), wrap, SLOT(method(int)));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void set_button_group_button_pressed_event(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* arg0)) {
    QSlotWrapperSignal_self_AbstractButtonType_void* wrap = new QSlotWrapperSignal_self_AbstractButtonType_void(user_data, (Signal_self_AbstractButtonType_void)event, (void*)wrapped_func);
    QObject* q_obj = (QObject*)object;
    QObject::connect(q_obj, SIGNAL(buttonPressed(QAbstractButton*)), wrap, SLOT(method(QAbstractButton*)));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void set_button_group_button_pressed_2_event(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, int arg0)) {
    QSlotWrapperSignal_self_int_void* wrap = new QSlotWrapperSignal_self_int_void(user_data, (Signal_self_int_void)event, (void*)wrapped_func);
    QObject* q_obj = (QObject*)object;
    QObject::connect(q_obj, SIGNAL(buttonPressed2(int)), wrap, SLOT(method(int)));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void set_button_group_button_released_event(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* arg0)) {
    QSlotWrapperSignal_self_AbstractButtonType_void* wrap = new QSlotWrapperSignal_self_AbstractButtonType_void(user_data, (Signal_self_AbstractButtonType_void)event, (void*)wrapped_func);
    QObject* q_obj = (QObject*)object;
    QObject::connect(q_obj, SIGNAL(buttonReleased(QAbstractButton*)), wrap, SLOT(method(QAbstractButton*)));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void set_button_group_button_released_2_event(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, int arg0)) {
    QSlotWrapperSignal_self_int_void* wrap = new QSlotWrapperSignal_self_int_void(user_data, (Signal_self_int_void)event, (void*)wrapped_func);
    QObject* q_obj = (QObject*)object;
    QObject::connect(q_obj, SIGNAL(buttonReleased2(int)), wrap, SLOT(method(int)));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void set_button_group_button_toggled_event(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, struct RUBase* arg0, bool arg1)) {
    QSlotWrapperSignal_self_AbstractButtonType_bool_void* wrap = new QSlotWrapperSignal_self_AbstractButtonType_bool_void(user_data, (Signal_self_AbstractButtonType_bool_void)event, (void*)wrapped_func);
    QObject* q_obj = (QObject*)object;
    QObject::connect(q_obj, SIGNAL(buttonToggled(QAbstractButton*, bool)), wrap, SLOT(method(QAbstractButton*, bool)));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void set_button_group_button_toggled_2_event(void* object, void* user_data, void* wrapped_func, void (*event)(void*, void* self_c, int arg0, bool arg1)) {
    QSlotWrapperSignal_self_int_bool_void* wrap = new QSlotWrapperSignal_self_int_bool_void(user_data, (Signal_self_int_bool_void)event, (void*)wrapped_func);
    QObject* q_obj = (QObject*)object;
    QObject::connect(q_obj, SIGNAL(buttonToggled2(int, bool)), wrap, SLOT(method(int, bool)));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct RUButtonGroupFuncs s_button_group_funcs = {
    button_group_set_exclusive,
    button_group_exclusive,
    button_group_add_button,
    button_group_remove_button,
    button_group_checked_button,
    button_group_button,
    button_group_set_id,
    button_group_id,
    button_group_checked_id,
    set_button_group_button_clicked_event,
    set_button_group_button_clicked_2_event,
    set_button_group_button_pressed_event,
    set_button_group_button_pressed_2_event,
    set_button_group_button_released_event,
    set_button_group_button_released_2_event,
    set_button_group_button_toggled_event,
    set_button_group_button_toggled_2_event,
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct RUButtonGroupAllFuncs s_button_group_all_funcs = {
    &s_object_funcs,
    &s_button_group_funcs,
};

