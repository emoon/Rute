////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is auto-generated by rute_gen. DO NOT EDIT
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../rute_base.h"
#include "../rute_manual.h"
#include <QGuiApplication>
#include "gui_application_ffi.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void gui_application_set_application_display_name(struct RUBase* self_c, const char* name) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    qt_value->setApplicationDisplayName(QString::fromUtf8(name));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static const char* gui_application_application_display_name(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->applicationDisplayName();
    return q_string_to_const_char(ret_value);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void gui_application_set_desktop_file_name(struct RUBase* self_c, const char* name) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    qt_value->setDesktopFileName(QString::fromUtf8(name));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static const char* gui_application_desktop_file_name(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->desktopFileName();
    return q_string_to_const_char(ret_value);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUWindow gui_application_top_level_at(struct RUBase* self_c, struct RUBase* pos) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->topLevelAt(*((QPoint*)pos));
    struct RUWindow ctl;
    ctl.qt_data = (struct RUBase*)ret_value;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)ret_value];
    ctl.all_funcs = &s_window_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void gui_application_set_window_icon(struct RUBase* self_c, struct RUBase* icon) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    qt_value->setWindowIcon(*((QIcon*)icon));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUIcon gui_application_window_icon(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->windowIcon();
    WRIcon* new_val = new WRIcon();
    *new_val = ret_value;
    struct RUIcon ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_icon_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static const char* gui_application_platform_name(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->platformName();
    return q_string_to_const_char(ret_value);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUWindow gui_application_modal_window(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->modalWindow();
    struct RUWindow ctl;
    ctl.qt_data = (struct RUBase*)ret_value;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)ret_value];
    ctl.all_funcs = &s_window_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUWindow gui_application_focus_window(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->focusWindow();
    struct RUWindow ctl;
    ctl.qt_data = (struct RUBase*)ret_value;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)ret_value];
    ctl.all_funcs = &s_window_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUObject gui_application_focus_object(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->focusObject();
    struct RUObject ctl;
    ctl.qt_data = (struct RUBase*)ret_value;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)ret_value];
    ctl.all_funcs = &s_object_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUScreen gui_application_primary_screen(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->primaryScreen();
    struct RUScreen ctl;
    ctl.qt_data = (struct RUBase*)ret_value;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)ret_value];
    ctl.all_funcs = &s_screen_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUScreen gui_application_screen_at(struct RUBase* self_c, struct RUBase* point) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->screenAt(*((QPoint*)point));
    struct RUScreen ctl;
    ctl.qt_data = (struct RUBase*)ret_value;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)ret_value];
    ctl.all_funcs = &s_screen_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static float gui_application_device_pixel_ratio(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->devicePixelRatio();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUCursor gui_application_override_cursor(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->overrideCursor();
    struct RUCursor ctl;
    ctl.qt_data = (struct RUBase*)ret_value;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)ret_value];
    ctl.all_funcs = &s_cursor_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void gui_application_set_override_cursor(struct RUBase* self_c, struct RUBase* arg0) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    qt_value->setOverrideCursor(*((QCursor*)arg0));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void gui_application_change_override_cursor(struct RUBase* self_c, struct RUBase* arg0) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    qt_value->changeOverrideCursor(*((QCursor*)arg0));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void gui_application_restore_override_cursor(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    qt_value->restoreOverrideCursor();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUFont gui_application_font(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->font();
    WRFont* new_val = new WRFont();
    *new_val = ret_value;
    struct RUFont ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_font_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void gui_application_set_font(struct RUBase* self_c, struct RUBase* arg0) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    qt_value->setFont(*((QFont*)arg0));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUClipboard gui_application_clipboard(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->clipboard();
    struct RUClipboard ctl;
    ctl.qt_data = (struct RUBase*)ret_value;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)ret_value];
    ctl.all_funcs = &s_clipboard_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUPalette gui_application_palette(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->palette();
    WRPalette* new_val = new WRPalette();
    *new_val = ret_value;
    struct RUPalette ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_palette_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void gui_application_set_palette(struct RUBase* self_c, struct RUBase* pal) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    qt_value->setPalette(*((QPalette*)pal));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static uint32_t gui_application_keyboard_modifiers(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->keyboardModifiers();
    return (uint32_t)ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static uint32_t gui_application_query_keyboard_modifiers(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->queryKeyboardModifiers();
    return (uint32_t)ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static uint32_t gui_application_mouse_buttons(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->mouseButtons();
    return (uint32_t)ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void gui_application_set_layout_direction(struct RUBase* self_c, uint32_t direction) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    qt_value->setLayoutDirection((Qt::LayoutDirection)direction);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static uint32_t gui_application_layout_direction(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->layoutDirection();
    return (uint32_t)ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool gui_application_is_right_to_left(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->isRightToLeft();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool gui_application_is_left_to_right(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->isLeftToRight();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void gui_application_set_desktop_settings_aware(struct RUBase* self_c, bool on) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    qt_value->setDesktopSettingsAware(on);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool gui_application_desktop_settings_aware(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->desktopSettingsAware();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void gui_application_set_quit_on_last_window_closed(struct RUBase* self_c, bool quit) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    qt_value->setQuitOnLastWindowClosed(quit);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool gui_application_quit_on_last_window_closed(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->quitOnLastWindowClosed();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static uint32_t gui_application_application_state(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->applicationState();
    return (uint32_t)ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int gui_application_exec(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->exec();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool gui_application_is_session_restored(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->isSessionRestored();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static const char* gui_application_session_id(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->sessionId();
    return q_string_to_const_char(ret_value);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static const char* gui_application_session_key(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->sessionKey();
    return q_string_to_const_char(ret_value);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool gui_application_is_saving_session(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->isSavingSession();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool gui_application_is_fallback_session_management_enabled(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    auto ret_value = qt_value->isFallbackSessionManagementEnabled();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void gui_application_set_fallback_session_management_enabled(struct RUBase* self_c, bool arg0) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    qt_value->setFallbackSessionManagementEnabled(arg0);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void gui_application_sync(struct RUBase* self_c) {
    QGuiApplication* qt_value = (QGuiApplication*)self_c;
    qt_value->sync();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUGuiApplication get_gui_application(struct RUBase* priv_data) {
    (void)priv_data;
    RUGuiApplication ctl;
    ctl.qt_data = nullptr;
    ctl.host_data = nullptr;
    ctl.all_funcs = &s_gui_application_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct RUGuiApplicationFuncs s_gui_application_funcs = {
    gui_application_set_application_display_name,
    gui_application_application_display_name,
    gui_application_set_desktop_file_name,
    gui_application_desktop_file_name,
    gui_application_top_level_at,
    gui_application_set_window_icon,
    gui_application_window_icon,
    gui_application_platform_name,
    gui_application_modal_window,
    gui_application_focus_window,
    gui_application_focus_object,
    gui_application_primary_screen,
    gui_application_screen_at,
    gui_application_device_pixel_ratio,
    gui_application_override_cursor,
    gui_application_set_override_cursor,
    gui_application_change_override_cursor,
    gui_application_restore_override_cursor,
    gui_application_font,
    gui_application_set_font,
    gui_application_clipboard,
    gui_application_palette,
    gui_application_set_palette,
    gui_application_keyboard_modifiers,
    gui_application_query_keyboard_modifiers,
    gui_application_mouse_buttons,
    gui_application_set_layout_direction,
    gui_application_layout_direction,
    gui_application_is_right_to_left,
    gui_application_is_left_to_right,
    gui_application_set_desktop_settings_aware,
    gui_application_desktop_settings_aware,
    gui_application_set_quit_on_last_window_closed,
    gui_application_quit_on_last_window_closed,
    gui_application_application_state,
    gui_application_exec,
    gui_application_is_session_restored,
    gui_application_session_id,
    gui_application_session_key,
    gui_application_is_saving_session,
    gui_application_is_fallback_session_management_enabled,
    gui_application_set_fallback_session_management_enabled,
    gui_application_sync,
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct RUGuiApplicationAllFuncs s_gui_application_all_funcs = {
    &s_object_funcs,
    &s_core_application_funcs,
    &s_gui_application_funcs,
};

