#pragma once
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is auto-generated by rute_gen. DO NOT EDIT
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../rute_base.h"
#include "../rute_manual.h"
#include <QApplication>

#include <QEvent>

#include <QFont>

#include <QListWidget>

#include <QListWidgetItem>

#include <QPaintEvent>

#include <QPushButton>


#include <QRect>

#include <QScreen>

#include <QSize>

#include <QWidget>


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class WRListWidget : public QListWidget {
    //Q_OBJECT
public:
    WRListWidget(QWidget* widget) : QListWidget(widget) { }
    virtual ~WRListWidget() {
        if (m_delete_callback) {
             m_delete_callback(m_private_data);
         }
    }
    
    RUDeleteCallback m_delete_callback = nullptr;
    void* m_private_data = nullptr;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class WRListWidgetItem : public QListWidgetItem {
    //Q_OBJECT
public:
    WRListWidgetItem(const QListWidgetItem& clone) : QListWidgetItem(clone) { }
    WRListWidgetItem() : QListWidgetItem() { }
    virtual ~WRListWidgetItem() {
        if (m_delete_callback) {
             m_delete_callback(m_private_data);
         }
    }
    
    RUDeleteCallback m_delete_callback = nullptr;
    void* m_private_data = nullptr;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class WRPushButton : public QPushButton {
    //Q_OBJECT
public:
    WRPushButton(QWidget* widget) : QPushButton(widget) { }
    virtual ~WRPushButton() {
        if (m_delete_callback) {
             m_delete_callback(m_private_data);
         }
    }
    
    RUDeleteCallback m_delete_callback = nullptr;
    void* m_private_data = nullptr;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class WRRect : public QRect {
    //Q_OBJECT
public:
    WRRect(const QRect& clone) : QRect(clone) { }
    WRRect() : QRect() { }
    virtual ~WRRect() {
        if (m_delete_callback) {
             m_delete_callback(m_private_data);
         }
    }
    
    RUDeleteCallback m_delete_callback = nullptr;
    void* m_private_data = nullptr;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class WRSize : public QSize {
    //Q_OBJECT
public:
    WRSize(const QSize& clone) : QSize(clone) { }
    WRSize() : QSize() { }
    virtual ~WRSize() {
        if (m_delete_callback) {
             m_delete_callback(m_private_data);
         }
    }
    
    RUDeleteCallback m_delete_callback = nullptr;
    void* m_private_data = nullptr;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class WRWidget : public QWidget {
    //Q_OBJECT
public:
    WRWidget(QWidget* widget) : QWidget(widget) { }
    virtual ~WRWidget() {
        if (m_delete_callback) {
             m_delete_callback(m_private_data);
         }
    }
    
    RUDeleteCallback m_delete_callback = nullptr;
    void* m_private_data = nullptr;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef void (*Signal_self_ScreenType_void)(void* self_c, void* trampoline_func, struct RUBase* screen);

class QSlotWrapperSignal_self_ScreenType_void : public QObject {
    Q_OBJECT
public:
    QSlotWrapperSignal_self_ScreenType_void(void* data, Signal_self_ScreenType_void trampoline_func, void* wrapped_func) {
        m_trampoline_func = trampoline_func;
        m_data = data;
        m_wrapped_func = wrapped_func;
    }

    Q_SLOT void method( struct RUBase* screen) {
        m_trampoline_func(m_data, m_wrapped_func, screen);
    }
private:
    Signal_self_ScreenType_void m_trampoline_func;
    void* m_data;
    void* m_wrapped_func;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef void (*Signal_self_bool_void)(void* self_c, void* trampoline_func, bool checked);

class QSlotWrapperSignal_self_bool_void : public QObject {
    Q_OBJECT
public:
    QSlotWrapperSignal_self_bool_void(void* data, Signal_self_bool_void trampoline_func, void* wrapped_func) {
        m_trampoline_func = trampoline_func;
        m_data = data;
        m_wrapped_func = wrapped_func;
    }

    Q_SLOT void method( bool checked) {
        m_trampoline_func(m_data, m_wrapped_func, checked);
    }
private:
    Signal_self_bool_void m_trampoline_func;
    void* m_data;
    void* m_wrapped_func;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef void (*Signal_self_void)(void* self_c, void* trampoline_func);

class QSlotWrapperSignal_self_void : public QObject {
    Q_OBJECT
public:
    QSlotWrapperSignal_self_void(void* data, Signal_self_void trampoline_func, void* wrapped_func) {
        m_trampoline_func = trampoline_func;
        m_data = data;
        m_wrapped_func = wrapped_func;
    }

    Q_SLOT void method() {
        m_trampoline_func(m_data, m_wrapped_func);
    }
private:
    Signal_self_void m_trampoline_func;
    void* m_data;
    void* m_wrapped_func;
};
