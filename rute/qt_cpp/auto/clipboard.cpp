////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is auto-generated by rute_gen. DO NOT EDIT
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../rute_base.h"
#include "../rute_manual.h"
#include <QClipboard>
#include "clipboard_ffi.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void clipboard_clear(struct RUBase* self_c, int mode) {
    QClipboard* qt_value = (QClipboard*)self_c;
    qt_value->clear((QClipboard::Mode)s_mode_lookup[mode]);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool clipboard_supports_selection(struct RUBase* self_c) {
    QClipboard* qt_value = (QClipboard*)self_c;
    auto ret_value = qt_value->supportsSelection();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool clipboard_supports_find_buffer(struct RUBase* self_c) {
    QClipboard* qt_value = (QClipboard*)self_c;
    auto ret_value = qt_value->supportsFindBuffer();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool clipboard_owns_selection(struct RUBase* self_c) {
    QClipboard* qt_value = (QClipboard*)self_c;
    auto ret_value = qt_value->ownsSelection();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool clipboard_owns_clipboard(struct RUBase* self_c) {
    QClipboard* qt_value = (QClipboard*)self_c;
    auto ret_value = qt_value->ownsClipboard();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool clipboard_owns_find_buffer(struct RUBase* self_c) {
    QClipboard* qt_value = (QClipboard*)self_c;
    auto ret_value = qt_value->ownsFindBuffer();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static const char* clipboard_text(struct RUBase* self_c, int mode) {
    QClipboard* qt_value = (QClipboard*)self_c;
    auto ret_value = qt_value->text((QClipboard::Mode)s_mode_lookup[mode]);
    return q_string_to_const_char(ret_value);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void clipboard_set_text(struct RUBase* self_c, const char* arg0, int mode) {
    QClipboard* qt_value = (QClipboard*)self_c;
    qt_value->setText(QString::fromUtf8(arg0), (QClipboard::Mode)s_mode_lookup[mode]);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUMimeData clipboard_mime_data(struct RUBase* self_c, int mode) {
    QClipboard* qt_value = (QClipboard*)self_c;
    auto ret_value = qt_value->mimeData((QClipboard::Mode)s_mode_lookup[mode]);
    struct RUMimeData ctl;
    ctl.qt_data = (struct RUBase*)ret_value;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)ret_value];
    ctl.all_funcs = &s_mime_data_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void clipboard_set_mime_data(struct RUBase* self_c, struct RUBase* data, int mode) {
    QClipboard* qt_value = (QClipboard*)self_c;
    qt_value->setMimeData((QMimeData*)data, (QClipboard::Mode)s_mode_lookup[mode]);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUImage clipboard_image(struct RUBase* self_c, int mode) {
    QClipboard* qt_value = (QClipboard*)self_c;
    auto ret_value = qt_value->image((QClipboard::Mode)s_mode_lookup[mode]);
    WRImage* new_val = new WRImage();
    *new_val = ret_value;
    struct RUImage ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_image_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUPixmap clipboard_pixmap(struct RUBase* self_c, int mode) {
    QClipboard* qt_value = (QClipboard*)self_c;
    auto ret_value = qt_value->pixmap((QClipboard::Mode)s_mode_lookup[mode]);
    WRPixmap* new_val = new WRPixmap();
    *new_val = ret_value;
    struct RUPixmap ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_pixmap_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void clipboard_set_image(struct RUBase* self_c, struct RUBase* arg0, int mode) {
    QClipboard* qt_value = (QClipboard*)self_c;
    qt_value->setImage(*((QImage*)arg0), (QClipboard::Mode)s_mode_lookup[mode]);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void clipboard_set_pixmap(struct RUBase* self_c, struct RUBase* arg0, int mode) {
    QClipboard* qt_value = (QClipboard*)self_c;
    qt_value->setPixmap(*((QPixmap*)arg0), (QClipboard::Mode)s_mode_lookup[mode]);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct RUClipboardFuncs s_clipboard_funcs = {
    clipboard_clear,
    clipboard_supports_selection,
    clipboard_supports_find_buffer,
    clipboard_owns_selection,
    clipboard_owns_clipboard,
    clipboard_owns_find_buffer,
    clipboard_text,
    clipboard_set_text,
    clipboard_mime_data,
    clipboard_set_mime_data,
    clipboard_image,
    clipboard_pixmap,
    clipboard_set_image,
    clipboard_set_pixmap,
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct RUClipboardAllFuncs s_clipboard_all_funcs = {
    &s_object_funcs,
    &s_clipboard_funcs,
};

