////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is auto-generated by rute_gen. DO NOT EDIT
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../rute_base.h"
#include "../rute_manual.h"
#include <QBackingStore>
#include "backing_store_ffi.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUWindow backing_store_window(struct RUBase* self_c) {
    WRBackingStore* qt_value = (WRBackingStore*)self_c;
    auto ret_value = qt_value->window();
    * new_val = new ();
    *new_val = ret_value;
    struct RUWindow ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_window_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUPaintDevice backing_store_paint_device(struct RUBase* self_c) {
    WRBackingStore* qt_value = (WRBackingStore*)self_c;
    auto ret_value = qt_value->paintDevice();
    WRPaintDevice* new_val = new WRPaintDevice();
    *new_val = ret_value;
    struct RUPaintDevice ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_paint_device_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void backing_store_flush(struct RUBase* self_c, struct RUBase* region, struct RUBase* window, struct RUBase* offset) {
    WRBackingStore* qt_value = (WRBackingStore*)self_c;
    qt_value->flush(*((QRegion*)region), (QWindow*)window, *((QPoint*)offset));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void backing_store_resize(struct RUBase* self_c, struct RUBase* size) {
    WRBackingStore* qt_value = (WRBackingStore*)self_c;
    qt_value->resize(*((QSize*)size));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUSize backing_store_size(struct RUBase* self_c) {
    WRBackingStore* qt_value = (WRBackingStore*)self_c;
    auto ret_value = qt_value->size();
    WRSize* new_val = new WRSize();
    *new_val = ret_value;
    struct RUSize ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_size_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool backing_store_scroll(struct RUBase* self_c, struct RUBase* area, int dx, int dy) {
    WRBackingStore* qt_value = (WRBackingStore*)self_c;
    auto ret_value = qt_value->scroll(*((QRegion*)area), dx, dy);
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void backing_store_begin_paint(struct RUBase* self_c, struct RUBase* arg0) {
    WRBackingStore* qt_value = (WRBackingStore*)self_c;
    qt_value->beginPaint(*((QRegion*)arg0));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void backing_store_end_paint(struct RUBase* self_c) {
    WRBackingStore* qt_value = (WRBackingStore*)self_c;
    qt_value->endPaint();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void backing_store_set_static_contents(struct RUBase* self_c, struct RUBase* region) {
    WRBackingStore* qt_value = (WRBackingStore*)self_c;
    qt_value->setStaticContents(*((QRegion*)region));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RURegion backing_store_static_contents(struct RUBase* self_c) {
    WRBackingStore* qt_value = (WRBackingStore*)self_c;
    auto ret_value = qt_value->staticContents();
    WRRegion* new_val = new WRRegion();
    *new_val = ret_value;
    struct RURegion ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_region_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool backing_store_has_static_contents(struct RUBase* self_c) {
    WRBackingStore* qt_value = (WRBackingStore*)self_c;
    auto ret_value = qt_value->hasStaticContents();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUPlatformBackingStore backing_store_handle(struct RUBase* self_c) {
    WRBackingStore* qt_value = (WRBackingStore*)self_c;
    auto ret_value = qt_value->handle();
    * new_val = new ();
    *new_val = ret_value;
    struct RUPlatformBackingStore ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_platform_backing_store_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUBackingStore create_backing_store(
    struct RUBase* priv_data,
    RUDeleteCallback delete_callback,
    void* private_user_data)
{
    auto ctl = generic_create_func_with_delete<struct RUBackingStore, WRBackingStore>(priv_data, delete_callback, private_user_data);
    ctl.all_funcs = &s_backing_store_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void destroy_backing_store(struct RUBase* priv_data) {
    destroy_generic<WRBackingStore>(priv_data);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct RUBackingStoreFuncs s_backing_store_funcs = {
    destroy_backing_store,
    backing_store_window,
    backing_store_paint_device,
    backing_store_flush,
    backing_store_resize,
    backing_store_size,
    backing_store_scroll,
    backing_store_begin_paint,
    backing_store_end_paint,
    backing_store_set_static_contents,
    backing_store_static_contents,
    backing_store_has_static_contents,
    backing_store_handle,
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct RUBackingStoreAllFuncs s_backing_store_all_funcs = {
    &s_backing_store_funcs,
};

