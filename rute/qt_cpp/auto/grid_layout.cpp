////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is auto-generated by rute_gen. DO NOT EDIT
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../rute_base.h"
#include "../rute_manual.h"
#include <QGridLayout>
#include "grid_layout_ffi.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void grid_layout_set_horizontal_spacing(struct RUBase* self_c, int spacing) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    qt_value->setHorizontalSpacing(spacing);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int grid_layout_horizontal_spacing(struct RUBase* self_c) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    auto ret_value = qt_value->horizontalSpacing();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void grid_layout_set_vertical_spacing(struct RUBase* self_c, int spacing) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    qt_value->setVerticalSpacing(spacing);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int grid_layout_vertical_spacing(struct RUBase* self_c) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    auto ret_value = qt_value->verticalSpacing();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void grid_layout_set_spacing(struct RUBase* self_c, int spacing) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    qt_value->setSpacing(spacing);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int grid_layout_spacing(struct RUBase* self_c) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    auto ret_value = qt_value->spacing();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void grid_layout_set_row_minimum_height(struct RUBase* self_c, int row, int min_size) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    qt_value->setRowMinimumHeight(row, min_size);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void grid_layout_set_column_minimum_width(struct RUBase* self_c, int column, int min_size) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    qt_value->setColumnMinimumWidth(column, min_size);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int grid_layout_row_minimum_height(struct RUBase* self_c, int row) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    auto ret_value = qt_value->rowMinimumHeight(row);
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int grid_layout_column_minimum_width(struct RUBase* self_c, int column) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    auto ret_value = qt_value->columnMinimumWidth(column);
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int grid_layout_column_count(struct RUBase* self_c) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    auto ret_value = qt_value->columnCount();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int grid_layout_row_count(struct RUBase* self_c) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    auto ret_value = qt_value->rowCount();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RURect grid_layout_cell_rect(struct RUBase* self_c, int row, int column) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    auto ret_value = qt_value->cellRect(row, column);
    WRRect* new_val = new WRRect();
    *new_val = ret_value;
    struct RURect ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_rect_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void grid_layout_add_widget(struct RUBase* self_c, struct RUBase* w) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    qt_value->addWidget((WRWidget*)w);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void grid_layout_add_widget_row_column(struct RUBase* self_c, struct RUBase* arg0, int row, int column, uint32_t arg1) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    qt_value->addWidget((WRWidget*)arg0, row, column, (Qt::Alignment)arg1);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void grid_layout_add_widget_row_column_span(struct RUBase* self_c, struct RUBase* arg0, int row, int column, int row_span, int column_span, uint32_t arg1) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    qt_value->addWidget((WRWidget*)arg0, row, column, row_span, column_span, (Qt::Alignment)arg1);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void grid_layout_add_layout(struct RUBase* self_c, struct RUBase* arg0, int row, int column, uint32_t arg1) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    qt_value->addLayout((WRLayout*)arg0, row, column, (Qt::Alignment)arg1);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void grid_layout_add_layout_2(struct RUBase* self_c, struct RUBase* arg0, int row, int column, int row_span, int column_span, uint32_t arg1) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    qt_value->addLayout((WRLayout*)arg0, row, column, row_span, column_span, (Qt::Alignment)arg1);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void grid_layout_set_origin_corner(struct RUBase* self_c, uint32_t arg0) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    qt_value->setOriginCorner((Qt::Corner)arg0);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static uint32_t grid_layout_origin_corner(struct RUBase* self_c) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    auto ret_value = qt_value->originCorner();
    return (uint32_t)ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RULayoutItem grid_layout_item_at_position(struct RUBase* self_c, int row, int column) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    auto ret_value = qt_value->itemAtPosition(row, column);
    struct RULayoutItem ctl;
    ctl.qt_data = (struct RUBase*)ret_value;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)ret_value];
    ctl.all_funcs = &s_layout_item_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int grid_layout_count(struct RUBase* self_c) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    auto ret_value = qt_value->count();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void grid_layout_set_default_positioning(struct RUBase* self_c, int n, uint32_t orient) {
    WRGridLayout* qt_value = (WRGridLayout*)self_c;
    qt_value->setDefaultPositioning(n, (Qt::Orientation)orient);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUGridLayout create_grid_layout(
    struct RUBase* priv_data,
    RUDeleteCallback delete_callback,
    void* private_user_data)
{
    auto ctl = generic_create_func_with_delete<struct RUGridLayout, WRGridLayout>(priv_data, delete_callback, private_user_data);
    ctl.all_funcs = &s_grid_layout_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void destroy_grid_layout(struct RUBase* priv_data) {
    destroy_generic<WRGridLayout>(priv_data);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct RUGridLayoutFuncs s_grid_layout_funcs = {
    destroy_grid_layout,
    grid_layout_set_horizontal_spacing,
    grid_layout_horizontal_spacing,
    grid_layout_set_vertical_spacing,
    grid_layout_vertical_spacing,
    grid_layout_set_spacing,
    grid_layout_spacing,
    grid_layout_set_row_minimum_height,
    grid_layout_set_column_minimum_width,
    grid_layout_row_minimum_height,
    grid_layout_column_minimum_width,
    grid_layout_column_count,
    grid_layout_row_count,
    grid_layout_cell_rect,
    grid_layout_add_widget,
    grid_layout_add_widget_row_column,
    grid_layout_add_widget_row_column_span,
    grid_layout_add_layout,
    grid_layout_add_layout_2,
    grid_layout_set_origin_corner,
    grid_layout_origin_corner,
    grid_layout_item_at_position,
    grid_layout_count,
    grid_layout_set_default_positioning,
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct RUGridLayoutAllFuncs s_grid_layout_all_funcs = {
    &s_object_funcs,
    &s_layout_item_funcs,
    &s_layout_funcs,
    &s_grid_layout_funcs,
};

