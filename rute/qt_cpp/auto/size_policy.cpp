////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is auto-generated by rute_gen. DO NOT EDIT
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../rute_base.h"
#include "../rute_manual.h"
#include <QSizePolicy>
#include "size_policy_ffi.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int size_policy_horizontal_policy(struct RUBase* self_c) {
    WRSizePolicy* qt_value = (WRSizePolicy*)self_c;
    auto ret_value = qt_value->horizontalPolicy();
    return s_policy_lookup[(int)ret_value];
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int size_policy_vertical_policy(struct RUBase* self_c) {
    WRSizePolicy* qt_value = (WRSizePolicy*)self_c;
    auto ret_value = qt_value->verticalPolicy();
    return s_policy_lookup[(int)ret_value];
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void size_policy_set_horizontal_policy(struct RUBase* self_c, int d) {
    WRSizePolicy* qt_value = (WRSizePolicy*)self_c;
    qt_value->setHorizontalPolicy((QSizePolicy::Policy)s_policy_lookup[d]);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void size_policy_set_vertical_policy(struct RUBase* self_c, int d) {
    WRSizePolicy* qt_value = (WRSizePolicy*)self_c;
    qt_value->setVerticalPolicy((QSizePolicy::Policy)s_policy_lookup[d]);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int size_policy_expanding_directions(struct RUBase* self_c) {
    WRSizePolicy* qt_value = (WRSizePolicy*)self_c;
    auto ret_value = qt_value->expandingDirections();
    return s_orientations_lookup[(int)ret_value];
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void size_policy_set_height_for_width(struct RUBase* self_c, bool b) {
    WRSizePolicy* qt_value = (WRSizePolicy*)self_c;
    qt_value->setHeightForWidth(b);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool size_policy_has_height_for_width(struct RUBase* self_c) {
    WRSizePolicy* qt_value = (WRSizePolicy*)self_c;
    auto ret_value = qt_value->hasHeightForWidth();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void size_policy_set_width_for_height(struct RUBase* self_c, bool b) {
    WRSizePolicy* qt_value = (WRSizePolicy*)self_c;
    qt_value->setWidthForHeight(b);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool size_policy_has_width_for_height(struct RUBase* self_c) {
    WRSizePolicy* qt_value = (WRSizePolicy*)self_c;
    auto ret_value = qt_value->hasWidthForHeight();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool size_policy_retain_size_when_hidden(struct RUBase* self_c) {
    WRSizePolicy* qt_value = (WRSizePolicy*)self_c;
    auto ret_value = qt_value->retainSizeWhenHidden();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void size_policy_set_retain_size_when_hidden(struct RUBase* self_c, bool retain_size) {
    WRSizePolicy* qt_value = (WRSizePolicy*)self_c;
    qt_value->setRetainSizeWhenHidden(retain_size);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUSizePolicy create_size_policy(
    struct RUBase* priv_data,
    RUDeleteCallback delete_callback,
    void* private_user_data)
{
    auto ctl = generic_create_func_with_delete<struct RUSizePolicy, WRSizePolicy>(priv_data, delete_callback, private_user_data);
    ctl.all_funcs = &s_size_policy_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void destroy_size_policy(struct RUBase* priv_data) {
    destroy_generic<WRSizePolicy>(priv_data);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct RUSizePolicyFuncs s_size_policy_funcs = {
    destroy_size_policy,
    size_policy_horizontal_policy,
    size_policy_vertical_policy,
    size_policy_set_horizontal_policy,
    size_policy_set_vertical_policy,
    size_policy_expanding_directions,
    size_policy_set_height_for_width,
    size_policy_has_height_for_width,
    size_policy_set_width_for_height,
    size_policy_has_width_for_height,
    size_policy_retain_size_when_hidden,
    size_policy_set_retain_size_when_hidden,
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct RUSizePolicyAllFuncs s_size_policy_all_funcs = {
    &s_size_policy_funcs,
};

