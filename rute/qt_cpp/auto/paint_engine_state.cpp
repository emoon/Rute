////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is auto-generated by rute_gen. DO NOT EDIT
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../rute_base.h"
#include "../rute_manual.h"
#include <QPaintEngineState>
#include "paint_engine_state_ffi.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int paint_engine_state_state(struct RUBase* self_c) {
    WRPaintEngineState* qt_value = (WRPaintEngineState*)self_c;
    auto ret_value = qt_value->state();
    return s_dirty_flags_lookup[(int)ret_value];
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUPen paint_engine_state_pen(struct RUBase* self_c) {
    WRPaintEngineState* qt_value = (WRPaintEngineState*)self_c;
    auto ret_value = qt_value->pen();
    * new_val = new ();
    *new_val = ret_value;
    struct RUPen ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_pen_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUBrush paint_engine_state_brush(struct RUBase* self_c) {
    WRPaintEngineState* qt_value = (WRPaintEngineState*)self_c;
    auto ret_value = qt_value->brush();
    WRBrush* new_val = new WRBrush();
    *new_val = ret_value;
    struct RUBrush ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_brush_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUPointF paint_engine_state_brush_origin(struct RUBase* self_c) {
    WRPaintEngineState* qt_value = (WRPaintEngineState*)self_c;
    auto ret_value = qt_value->brushOrigin();
    * new_val = new ();
    *new_val = ret_value;
    struct RUPointF ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_point_f_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUBrush paint_engine_state_background_brush(struct RUBase* self_c) {
    WRPaintEngineState* qt_value = (WRPaintEngineState*)self_c;
    auto ret_value = qt_value->backgroundBrush();
    WRBrush* new_val = new WRBrush();
    *new_val = ret_value;
    struct RUBrush ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_brush_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int paint_engine_state_background_mode(struct RUBase* self_c) {
    WRPaintEngineState* qt_value = (WRPaintEngineState*)self_c;
    auto ret_value = qt_value->backgroundMode();
    return s_bg_mode_lookup[(int)ret_value];
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUFont paint_engine_state_font(struct RUBase* self_c) {
    WRPaintEngineState* qt_value = (WRPaintEngineState*)self_c;
    auto ret_value = qt_value->font();
    QFont* new_val = new QFont();
    *new_val = ret_value;
    struct RUFont ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_font_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int paint_engine_state_clip_operation(struct RUBase* self_c) {
    WRPaintEngineState* qt_value = (WRPaintEngineState*)self_c;
    auto ret_value = qt_value->clipOperation();
    return s_clip_operation_lookup[(int)ret_value];
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RURegion paint_engine_state_clip_region(struct RUBase* self_c) {
    WRPaintEngineState* qt_value = (WRPaintEngineState*)self_c;
    auto ret_value = qt_value->clipRegion();
    * new_val = new ();
    *new_val = ret_value;
    struct RURegion ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_region_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUPainterPath paint_engine_state_clip_path(struct RUBase* self_c) {
    WRPaintEngineState* qt_value = (WRPaintEngineState*)self_c;
    auto ret_value = qt_value->clipPath();
    * new_val = new ();
    *new_val = ret_value;
    struct RUPainterPath ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_painter_path_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool paint_engine_state_is_clip_enabled(struct RUBase* self_c) {
    WRPaintEngineState* qt_value = (WRPaintEngineState*)self_c;
    auto ret_value = qt_value->isClipEnabled();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int paint_engine_state_render_hints(struct RUBase* self_c) {
    WRPaintEngineState* qt_value = (WRPaintEngineState*)self_c;
    auto ret_value = qt_value->renderHints();
    return s_render_hints_lookup[(int)ret_value];
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int paint_engine_state_composition_mode(struct RUBase* self_c) {
    WRPaintEngineState* qt_value = (WRPaintEngineState*)self_c;
    auto ret_value = qt_value->compositionMode();
    return s_composition_mode_lookup[(int)ret_value];
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static float paint_engine_state_opacity(struct RUBase* self_c) {
    WRPaintEngineState* qt_value = (WRPaintEngineState*)self_c;
    auto ret_value = qt_value->opacity();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUPainter paint_engine_state_painter(struct RUBase* self_c) {
    WRPaintEngineState* qt_value = (WRPaintEngineState*)self_c;
    auto ret_value = qt_value->painter();
    WRPainter* new_val = new WRPainter();
    *new_val = ret_value;
    struct RUPainter ctl;
    ctl.qt_data = (struct RUBase*)new_val;
    ctl.host_data = (struct RUBase*)s_host_data_lookup[(void*)new_val];
    ctl.all_funcs = &s_painter_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool paint_engine_state_brush_needs_resolving(struct RUBase* self_c) {
    WRPaintEngineState* qt_value = (WRPaintEngineState*)self_c;
    auto ret_value = qt_value->brushNeedsResolving();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool paint_engine_state_pen_needs_resolving(struct RUBase* self_c) {
    WRPaintEngineState* qt_value = (WRPaintEngineState*)self_c;
    auto ret_value = qt_value->penNeedsResolving();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUPaintEngineState create_paint_engine_state(
    struct RUBase* priv_data,
    RUDeleteCallback delete_callback,
    void* private_user_data)
{
    auto ctl = generic_create_func_with_delete<struct RUPaintEngineState, WRPaintEngineState>(priv_data, delete_callback, private_user_data);
    ctl.all_funcs = &s_paint_engine_state_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void destroy_paint_engine_state(struct RUBase* priv_data) {
    destroy_generic<WRPaintEngineState>(priv_data);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct RUPaintEngineStateFuncs s_paint_engine_state_funcs = {
    destroy_paint_engine_state,
    paint_engine_state_state,
    paint_engine_state_pen,
    paint_engine_state_brush,
    paint_engine_state_brush_origin,
    paint_engine_state_background_brush,
    paint_engine_state_background_mode,
    paint_engine_state_font,
    paint_engine_state_clip_operation,
    paint_engine_state_clip_region,
    paint_engine_state_clip_path,
    paint_engine_state_is_clip_enabled,
    paint_engine_state_render_hints,
    paint_engine_state_composition_mode,
    paint_engine_state_opacity,
    paint_engine_state_painter,
    paint_engine_state_brush_needs_resolving,
    paint_engine_state_pen_needs_resolving,
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct RUPaintEngineStateAllFuncs s_paint_engine_state_all_funcs = {
    &s_paint_engine_state_funcs,
};

