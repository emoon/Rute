////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is auto-generated by rute_gen. DO NOT EDIT
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../rute_base.h"
#include "../rute_manual.h"
#include <QFontInfo>
#include "font_info_ffi.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void font_info_swap(struct RUBase* self_c, struct RUBase* other) {
    WRFontInfo* qt_value = (WRFontInfo*)self_c;
    qt_value->swap(*((QFontInfo*)other));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static const char* font_info_family(struct RUBase* self_c) {
    WRFontInfo* qt_value = (WRFontInfo*)self_c;
    auto ret_value = qt_value->family();
    return q_string_to_const_char(ret_value);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static const char* font_info_style_name(struct RUBase* self_c) {
    WRFontInfo* qt_value = (WRFontInfo*)self_c;
    auto ret_value = qt_value->styleName();
    return q_string_to_const_char(ret_value);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int font_info_pixel_size(struct RUBase* self_c) {
    WRFontInfo* qt_value = (WRFontInfo*)self_c;
    auto ret_value = qt_value->pixelSize();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int font_info_point_size(struct RUBase* self_c) {
    WRFontInfo* qt_value = (WRFontInfo*)self_c;
    auto ret_value = qt_value->pointSize();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static float font_info_point_size_f(struct RUBase* self_c) {
    WRFontInfo* qt_value = (WRFontInfo*)self_c;
    auto ret_value = qt_value->pointSizeF();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool font_info_italic(struct RUBase* self_c) {
    WRFontInfo* qt_value = (WRFontInfo*)self_c;
    auto ret_value = qt_value->italic();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int font_info_style(struct RUBase* self_c) {
    WRFontInfo* qt_value = (WRFontInfo*)self_c;
    auto ret_value = qt_value->style();
    return s_style_lookup[(int)ret_value];
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int font_info_weight(struct RUBase* self_c) {
    WRFontInfo* qt_value = (WRFontInfo*)self_c;
    auto ret_value = qt_value->weight();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool font_info_bold(struct RUBase* self_c) {
    WRFontInfo* qt_value = (WRFontInfo*)self_c;
    auto ret_value = qt_value->bold();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool font_info_underline(struct RUBase* self_c) {
    WRFontInfo* qt_value = (WRFontInfo*)self_c;
    auto ret_value = qt_value->underline();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool font_info_overline(struct RUBase* self_c) {
    WRFontInfo* qt_value = (WRFontInfo*)self_c;
    auto ret_value = qt_value->overline();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool font_info_fixed_pitch(struct RUBase* self_c) {
    WRFontInfo* qt_value = (WRFontInfo*)self_c;
    auto ret_value = qt_value->fixedPitch();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static int font_info_style_hint(struct RUBase* self_c) {
    WRFontInfo* qt_value = (WRFontInfo*)self_c;
    auto ret_value = qt_value->styleHint();
    return s_style_hint_lookup[(int)ret_value];
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool font_info_raw_mode(struct RUBase* self_c) {
    WRFontInfo* qt_value = (WRFontInfo*)self_c;
    auto ret_value = qt_value->rawMode();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool font_info_exact_match(struct RUBase* self_c) {
    WRFontInfo* qt_value = (WRFontInfo*)self_c;
    auto ret_value = qt_value->exactMatch();
    return ret_value;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static struct RUFontInfo create_font_info(
    struct RUBase* priv_data,
    RUDeleteCallback delete_callback,
    void* private_user_data)
{
    auto ctl = generic_create_func_with_delete<struct RUFontInfo, WRFontInfo>(priv_data, delete_callback, private_user_data);
    ctl.all_funcs = &s_font_info_all_funcs;
    return ctl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

static void destroy_font_info(struct RUBase* priv_data) {
    destroy_generic<WRFontInfo>(priv_data);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct RUFontInfoFuncs s_font_info_funcs = {
    destroy_font_info,
    font_info_swap,
    font_info_family,
    font_info_style_name,
    font_info_pixel_size,
    font_info_point_size,
    font_info_point_size_f,
    font_info_italic,
    font_info_style,
    font_info_weight,
    font_info_bold,
    font_info_underline,
    font_info_overline,
    font_info_fixed_pitch,
    font_info_style_hint,
    font_info_raw_mode,
    font_info_exact_match,
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct RUFontInfoAllFuncs s_font_info_all_funcs = {
    &s_font_info_funcs,
};

