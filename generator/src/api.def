//
// Notes about function modifiers:
//
// [event] = Something the requires a virtual override in the Qt case. We handle this separately as we
//           need to generate the code a bit differently compared to events
//           Also events are not inharited.
// [callback] = Used func Signals/Slots.
// [manual]  = This function needs to be manually implemented on the C++ side
//
// The idea though is that this looks like the same thing for the user of the API.
//

struct Rect {
    i32 x,
    i32 y,
    i32 width,
    i32 height,
}

struct Color {
    u16 r,
    u16 g,
    u16 b,
    u16 a,
}

#[traits(PaintDevice, WidgetType)]
struct Widget {
    show(),
    set_fixed_height(i32 width),
    set_fixed_width(i32 width),
    resize(i32 width, i32 height),
    set_parent(&WidgetType widget),
    set_layout(&LayoutType layout),
    update(),

    [event] paint(&PaintEvent event),
}

struct PushButton : Widget {
    [callback] pressed(),
    [callback] released(),
    set_icon(^Icon icon),
    set_text(String text),
    set_flat(bool flat),
}

// Lists

#[attributes(Drop)]
struct Painter {
    begin(&PaintDevice target),
    end(),
    set_font(^Font font),
    draw_text(i32 x, i32 y, String text),
    draw_line(i32 x1, i32 y1, i32 x2, i32 y2),
    [manual] fill_rect_color(Rect rect, Color color),
}

struct ListWidgetItem {
    set_text(String text),
    text() -> String,
    [manual] set_string_data(String text),
    [manual] get_string_data() -> String,
}

struct ListWidget : Widget {
	add_item(&ListWidgetItem item),
	[manual] add_text_item(String text),

	current_item() -> ListWidgetItem?,
	current_row() -> i32,
	selected_items() -> <&ListWidgetItem>,

	item(i32 index) -> ListWidgetItem?,
	set_current_row(i32 index),
	count() -> i32,

	// Drag'n'drop support

	set_drag_enabled(bool state),
	set_drop_indicator_shown(bool state),
	[manual] set_accept_drops(bool state),

    [event] drag_enter(&DragEnterEvent event),
    [event] drop(&DropEvent event),

	[manual] add_widget_item(&ListWidgetItem item),
	[callback] current_row_changed(i32 row),
	[callback] item_clicked(&ListWidgetItem item),
	[callback] item_double_clicked(&ListWidgetItem item),
}

struct Label : Widget {
	set_text(String text),
}

struct LineEdit : Widget {
	set_text(String text),
	set_read_only(bool value),
}

struct PlainTextEdit : Widget {
	clear(),
	set_plain_text(String text),
	append_plain_text(String text),
	set_read_only(bool value),
}

// Sliders

struct Slider : Widget {
    [callback] value_changed(i32 value),
}

#[attributes(Drop)]
struct MainWindow : Widget {
    is_animated() -> bool,
    menu_bar() -> MenuBar,
    set_central_widget(&WidgetType widget),
}

#[attributes(NoPluginCreate)]
struct ToolWindowManager : Widget {
    [manual] add_to_docking(&WidgetType widget),
    [manual] add_to_docking_floating(&WidgetType widget),
}

struct FramelessWindow : Widget {
	set_window_title(String title),
	set_content(&WidgetType widget),
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Actions

struct Action {
	is_enabled() -> bool,
	set_text(String text),
	[manual] set_shortcut(Keys key),
	[manual] set_shortcut_mod(Keys key, MetaKeys modifier),
	[callback] triggered(),
	[manual] set_int_data(i32 data),
	[manual] get_int_data() -> i32,
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Misc

#[attributes(NoCreate)]
struct Url {
	is_local_file() -> bool,
	to_local_file() -> String,
}

#[attributes(NoCreate)]
struct MimeData {
	has_color() -> bool,
	has_image() -> bool,
	has_text() -> bool,
	has_urls() -> bool,
	urls() -> <Url>,
	// [manual] filenames() -> <String>,
}

struct Timer {
    [callback] timeout(),
    start(i32 time),
}

struct Icon {
	add_file(String filename),
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct Font {
	set_family(String family),
	set_point_size(i32 size),
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Menu

struct Menu : Widget {
	[manual] add_action_text(String text),
	[callback] triggered(&Action action),
	add_action(&Action action),
	set_title(String title),
}

struct MenuBar : Widget {
	add_menu(&Menu menu),
}

#[attributes(ManualCreate, NoPluginCreate, Drop)]
struct Application {
	set_style(String style),
	[manual] set_style_sheet(String filename) -> i32,
	exec(),
	[callback] about_to_quit(),
	// hack
	[manual] get_files() -> <Url>,

	// These doesn't really belong to Application but will global but as Application is "global" we keep them
	// here

	[static] open_files_dialog() -> <String>,
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Events

// No create on this as its a event only
#[attributes(NoCreate)]
struct PaintEvent {
	rect() -> Rect,
}

// No create on this as its a event only
#[attributes(NoCreate)]
struct DragEnterEvent {
	accept(),
}

#[attributes(NoCreate)]
struct DropEvent {
	accept_proposed_action(),
	mime_data() -> MimeData,
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Layouts

#[attributes(NoCreate)]
#[traits(LayoutType)]
struct Layout {
	add_widget(&WidgetType widget),
}

struct VBoxLayout : Layout {
	add_layout(&LayoutType layout),
	update(),
}

struct HBoxLayout : Layout {
	add_layout(&LayoutType layout),
	update(),
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Taken directly from Qt but values has been removed. We will use a lookup on the native
// side to map this table to the key ones

enum MetaKeys {
	CTRL,
}

enum Keys {
	Key_Escape,                // misc keys
	Key_Tab,
	Key_Backtab,
	Key_Backspace,
	Key_Return,
	Key_Enter,
	Key_Insert,
	Key_Delete,
	Key_Pause,
	Key_Print,               // print screen
	Key_SysReq,
	Key_Clear,
	Key_Home,                // cursor movement
	Key_End,
	Key_Left,
	Key_Up,
	Key_Right,
	Key_Down,
	Key_PageUp,
	Key_PageDown,
	Key_Shift,                // modifiers
	Key_Control,
	Key_Meta,
	Key_Alt,
	Key_CapsLock,
	Key_NumLock,
	Key_ScrollLock,
	Key_F1,                // function keys
	Key_F2,
	Key_F3,
	Key_F4,
	Key_F5,
	Key_F6,
	Key_F7,
	Key_F8,
	Key_F9,
	Key_F10,
	Key_F11,
	Key_F12,
	Key_F13,
	Key_F14,
	Key_F15,
	Key_F16,
	Key_F17,
	Key_F18,
	Key_F19,
	Key_F20,
	Key_F21,
	Key_F22,
	Key_F23,
	Key_F24,
	Key_F25,                // F25 .. F35 only on X11
	Key_F26,
	Key_F27,
	Key_F28,
	Key_F29,
	Key_F30,
	Key_F31,
	Key_F32,
	Key_F33,
	Key_F34,
	Key_F35,
	Key_Super_L,                 // extra keys
	Key_Super_R,
	Key_Menu,
	Key_Hyper_L,
	Key_Hyper_R,
	Key_Help,
	Key_Direction_L,
	Key_Direction_R,
	Key_Space,                // 7 bit printable ASCII
	Key_Any,
	Key_Exclam,
	Key_QuoteDbl,
	Key_NumberSign,
	Key_Dollar,
	Key_Percent,
	Key_Ampersand,
	Key_Apostrophe,
	Key_ParenLeft,
	Key_ParenRight,
	Key_Asterisk,
	Key_Plus,
	Key_Comma,
	Key_Minus,
	Key_Period,
	Key_Slash,
	Key_0,
	Key_1,
	Key_2,
	Key_3,
	Key_4,
	Key_5,
	Key_6,
	Key_7,
	Key_8,
	Key_9,
	Key_Colon,
	Key_Semicolon,
	Key_Less,
	Key_Equal,
	Key_Greater,
	Key_Question,
	Key_At,
	Key_A,
	Key_B,
	Key_C,
	Key_D,
	Key_E,
	Key_F,
	Key_G,
	Key_H,
	Key_I,
	Key_J,
	Key_K,
	Key_L,
	Key_M,
	Key_N,
	Key_O,
	Key_P,
	Key_Q,
	Key_R,
	Key_S,
	Key_T,
	Key_U,
	Key_V,
	Key_W,
	Key_X,
	Key_Y,
	Key_Z,
	Key_BracketLeft,
	Key_Backslash,
	Key_BracketRight,
	Key_AsciiCircum,
	Key_Underscore,
	Key_QuoteLeft,
	Key_BraceLeft,
	Key_Bar,
	Key_BraceRight,
	Key_AsciiTilde,

	Key_Back,
	Key_Forward,
	Key_Stop,
	Key_Refresh ,
	Key_VolumeDown,
	Key_VolumeMute,
	Key_VolumeUp,
	Key_BassBoost,
	Key_BassUp,
	Key_BassDown,
	Key_TrebleUp,
	Key_TrebleDown,
	Key_MediaPlay,
	Key_MediaStop,
	Key_MediaPrevious,
	Key_MediaNext,
	Key_MediaRecord,
	Key_MediaPause,
	Key_MediaTogglePlayPause,
	Key_HomePage,
	Key_Favorites,
	Key_Search,
	Key_Standby,
	Key_OpenUrl,
	Key_LaunchMail,
	Key_LaunchMedia,
	Key_Launch0,
	Key_Launch1,
	Key_Launch2,
	Key_Launch3,
	Key_Launch4,
	Key_Launch5,
	Key_Launch6,
	Key_Launch7,
	Key_Launch8,
	Key_Launch9,
	Key_LaunchA,
	Key_LaunchB,
	Key_LaunchC,
	Key_LaunchD,
	Key_LaunchE,
	Key_LaunchF,
	Key_MonBrightnessUp,
	Key_MonBrightnessDown,
	Key_KeyboardLightOnOff,
	Key_KeyboardBrightnessUp,
	Key_KeyboardBrightnessDown,
	Key_PowerOff,
	Key_WakeUp,
	Key_Eject,
	Key_ScreenSaver,
	Key_WWW,
	Key_Memo,
	Key_LightBulb,
	Key_Shop,
	Key_History,
	Key_AddFavorite,
	Key_HotLinks,
	Key_BrightnessAdjust,
	Key_Finance,
	Key_Community,
	Key_AudioRewind, // Media rewind
	Key_BackForward,
	Key_ApplicationLeft,
	Key_ApplicationRight,
	Key_Book,
	Key_CD,
	Key_Calculator,
	Key_ToDoList,
	Key_ClearGrab,
	Key_Close,
	Key_Copy,
	Key_Cut,
	Key_Display, // Output switch key
	Key_DOS,
	Key_Documents,
	Key_Excel,
	Key_Explorer,
	Key_Game,
	Key_Go,
	Key_iTouch,
	Key_LogOff,
	Key_Market,
	Key_Meeting,
	Key_MenuKB,
	Key_MenuPB,
	Key_MySites,
	Key_News,
	Key_OfficeHome,
	Key_Option,
	Key_Paste,
	Key_Phone,
	Key_Calendar,
	Key_Reply,
	Key_Reload,
	Key_RotateWindows,
	Key_RotationPB,
	Key_RotationKB,
	Key_Save,
	Key_Send,
	Key_Spell,
	Key_SplitScreen,
	Key_Support,
	Key_TaskPane,
	Key_Terminal,
	Key_Tools,
	Key_Travel,
	Key_Video,
	Key_Word,
	Key_Xfer,
	Key_ZoomIn,
	Key_ZoomOut,
	Key_Away,
	Key_Messenger,
	Key_WebCam,
	Key_MailForward,
	Key_Pictures,
	Key_Music,
	Key_Battery,
	Key_Bluetooth,
	Key_WLAN,
	Key_UWB,
	Key_AudioForward, // Media fast-forward
	Key_AudioRepeat, // Toggle repeat mode
	Key_AudioRandomPlay, // Toggle shuffle mode
	Key_Subtitle,
	Key_AudioCycleTrack,
	Key_Time,
	Key_Hibernate,
	Key_View,
	Key_TopMenu,
	Key_PowerDown,
	Key_Suspend,
	Key_ContrastAdjust,

	Key_LaunchG,
	Key_LaunchH,

	Key_TouchpadToggle,
	Key_TouchpadOn,
	Key_TouchpadOff,

	Key_MicMute,

	Key_Red,
	Key_Green,
	Key_Yellow,
	Key_Blue,

	Key_ChannelUp,
	Key_ChannelDown,

	Key_Guide,
	Key_Info,
	Key_Settings,

	Key_MicVolumeUp,
	Key_MicVolumeDown,

	Key_New,
	Key_Open,
	Key_Find,
	Key_Undo,
	Key_Redo,

	Key_MediaLast,

	// Keypad navigation keys
	Key_Select,
	Key_Yes,
	Key_No,

	// Newer misc keys
	Key_Cancel,
	Key_Printer,
	Key_Execute,
	Key_Sleep,
	Key_Play, // Not the same as Key_MediaPlay
	Key_Zoom,
	Key_Exit,

	// Device keys
	Key_Context1,
	Key_Context2,
	Key_Context3,
	Key_Context4,
	Key_Call,      // set absolute state to in a call (do not toggle state)
	Key_Hangup,    // set absolute state to hang up (do not toggle state)
	Key_Flip,
	Key_ToggleCallHangup, // based on current call state
	Key_VoiceDial,
	Key_LastNumberRedial,

	Key_Camera,
	Key_CameraFocus,
}

