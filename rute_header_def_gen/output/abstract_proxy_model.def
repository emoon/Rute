struct AbstractProxyModel : AbstractItemModel {
    set_source_model(&AbstractItemModelType source_model),
    source_model() -> &AbstractItemModelType,
    map_to_source(&ModelIndexType proxy_index) -> ModelIndexType,
    map_from_source(&ModelIndexType source_index) -> ModelIndexType,
    map_selection_to_source(&ItemSelectionType selection) -> ItemSelectionType,
    map_selection_from_source(&ItemSelectionType selection) -> ItemSelectionType,
    submit() -> bool,
    revert(),
    data(&ModelIndexType proxy_index, i32 role) -> VariantType,
    header_data(i32 section, Rute::Orientation orientation, i32 role) -> VariantType,
    item_data(&ModelIndexType index) -> Map<int,Type,
    flags(&ModelIndexType index) -> Rute::ItemFlags,
    set_data(&ModelIndexType index, &VariantType value, i32 role) -> bool,
    set_item_data(&ModelIndexType index, &Map<int,Type roles) -> bool,
    set_header_data(i32 section, Rute::Orientation orientation, &VariantType value, i32 role) -> bool,
    buddy(&ModelIndexType index) -> ModelIndexType,
    can_fetch_more(&ModelIndexType parent) -> bool,
    fetch_more(&ModelIndexType parent),
    sort(i32 column, Rute::SortOrder order),
    span(&ModelIndexType index) -> SizeType,
    has_children(&ModelIndexType parent) -> bool,
    sibling(i32 row, i32 column, &ModelIndexType idx) -> ModelIndexType,
    mime_data(&ModelIndexListType indexes) -> &MimeDataType,
    can_drop_mime_data(&MimeDataType data, Rute::DropAction action, i32 row, i32 column, &ModelIndexType parent) -> bool,
    drop_mime_data(&MimeDataType data, Rute::DropAction action, i32 row, i32 column, &ModelIndexType parent) -> bool,
    mime_types() -> StringListType,
    supported_drag_actions() -> Rute::DropActions,
    supported_drop_actions() -> Rute::DropActions,
    source_model_changed(AbstractProxyModel::QPrivateSignal arg0),
    reset_internal_data(),
}

// vim: syntax=rust expandtab ts=4 sw=4
