/// 
/// A text line is usually created by QTextLayout::createLine().
/// 
/// After being created, the line can be filled using the setLineWidth()
/// or setNumColumns() functions. A line has a number of attributes including the
/// rectangle it occupies, rect(), its coordinates, x() and y(), its
/// textLength(), width() and naturalTextWidth(), and its ascent() and descent()
/// relative to the text. The position of the cursor in terms of the
/// line is available from cursorToX() and its inverse from
/// xToCursor(). A line can be moved with setPosition().
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TextLine {
    /// 
    /// Returns `true` if this text line is valid; otherwise returns `false.`
    is_valid() -> bool,
    /// 
    /// Returns the line's bounding rectangle.
    /// 
    /// **See also:** [`x()`]
    /// [`y()`]
    /// [`text_length()`]
    /// [`width()`]
    rect() -> RectF,
    /// 
    /// Returns the line's x position.
    /// 
    /// **See also:** [`rect()`]
    /// [`y()`]
    /// [`text_length()`]
    /// [`width()`]
    /// 
    /// Converts the x-coordinate *x,* to the nearest matching cursor
    /// position, depending on the cursor position type, *cpos.*
    /// Note that result cursor position includes possible preedit area text.
    /// 
    /// **See also:** [`cursor_to_x()`]
    x() -> f32,
    /// 
    /// Returns the line's y position.
    /// 
    /// **See also:** [`x()`]
    /// [`rect()`]
    /// [`text_length()`]
    /// [`width()`]
    y() -> f32,
    /// 
    /// Returns the line's width as specified by the layout() function.
    /// 
    /// **See also:** [`natural_text_width()`]
    /// [`x()`]
    /// [`y()`]
    /// [`text_length()`]
    /// [`rect()`]
    width() -> f32,
    /// 
    /// Returns the line's ascent.
    /// 
    /// **See also:** [`descent()`]
    /// [`height()`]
    ascent() -> f32,
    /// 
    /// Returns the line's descent.
    /// 
    /// **See also:** [`ascent()`]
    /// [`height()`]
    descent() -> f32,
    /// 
    /// Returns the line's height. This is equal to ascent() + descent()
    /// if leading is not included. If leading is included, this equals to
    /// ascent() + descent() + leading().
    /// 
    /// **See also:** [`ascent()`]
    /// [`descent()`]
    /// [`leading()`]
    /// [`set_leading_included()`]
    height() -> f32,
    /// 
    /// Returns the line's leading.
    /// 
    /// **See also:** [`ascent()`]
    /// [`descent()`]
    /// [`height()`]
    /// 
    /// Returns `true` if positive leading is included into the line's height;
    /// otherwise returns `false.`
    /// 
    /// By default, leading is not included.
    /// 
    /// **See also:** [`set_leading_included()`]
    leading() -> f32,
    /// 
    /// Includes positive leading into the line's height if *included* is true;
    /// otherwise does not include leading.
    /// 
    /// By default, leading is not included.
    /// 
    /// Note that negative leading is ignored, it must be handled
    /// in the code using the text lines by letting the lines overlap.
    /// 
    /// **See also:** [`leading_included()`]
    /// 
    set_leading_included(included: bool),
    /// 
    /// Returns `true` if positive leading is included into the line's height;
    /// otherwise returns `false.`
    /// 
    /// By default, leading is not included.
    /// 
    /// **See also:** [`set_leading_included()`]
    leading_included() -> bool,
    /// 
    /// Returns the width of the line that is occupied by text. This is
    /// always \<= to width(), and is the minimum width that could be used
    /// by layout() without changing the line break position.
    natural_text_width() -> f32,
    /// 
    /// Returns the horizontal advance of the text. The advance of the text
    /// is the distance from its position to the next position at which
    /// text would naturally be drawn.
    /// 
    /// By adding the advance to the position of the text line and using this
    /// as the position of a second text line, you will be able to position
    /// the two lines side-by-side without gaps in-between.
    horizontal_advance() -> f32,
    /// 
    /// Returns the rectangle covered by the line.
    natural_text_rect() -> RectF,
    /// 
    /// **Overloads**
    /// 
    /// Converts the cursor position *cursorPos* to the corresponding x position
    /// inside the line, taking account of the *edge.*
    /// 
    /// If *cursorPos* is not a valid cursor position, the nearest valid
    /// cursor position will be used instead, and *cursorPos* will be modified to
    /// point to this valid cursor position.
    /// 
    /// **See also:** [`x_to_cursor()`]
    cursor_to_x(cursor_pos: *i32, edge: TextLine::Edge) -> f32,
    /// 
    /// **Overloads**
    /// 
    /// Converts the cursor position *cursorPos* to the corresponding x position
    /// inside the line, taking account of the *edge.*
    /// 
    /// If *cursorPos* is not a valid cursor position, the nearest valid
    /// cursor position will be used instead, and *cursorPos* will be modified to
    /// point to this valid cursor position.
    /// 
    /// **See also:** [`x_to_cursor()`]
    [org_name(cursorToX)]
    cursor_to_x_2(cursor_pos: i32, edge: TextLine::Edge) -> f32,
    /// 
    /// Converts the x-coordinate *x,* to the nearest matching cursor
    /// position, depending on the cursor position type, *cpos.*
    /// Note that result cursor position includes possible preedit area text.
    /// 
    /// **See also:** [`cursor_to_x()`]
    x_to_cursor(x: f32, arg0: TextLine::CursorPosition) -> i32,
    /// 
    /// Lays out the line with the given *width.* The line is filled from
    /// its starting position with as many characters as will fit into
    /// the line. In case the text cannot be split at the end of the line,
    /// it will be filled with additional characters to the next whitespace
    /// or end of the text.
    set_line_width(width: f32),
    /// 
    /// Lays out the line. The line is filled from its starting position
    /// with as many characters as are specified by *numColumns.* In case
    /// the text cannot be split until *numColumns* characters, the line
    /// will be filled with as many characters to the next whitespace or
    /// end of the text.
    /// 
    /// Lays out the line. The line is filled from its starting position
    /// with as many characters as are specified by *numColumns.* In case
    /// the text cannot be split until *numColumns* characters, the line
    /// will be filled with as many characters to the next whitespace or
    /// end of the text. The provided *alignmentWidth* is used as reference
    /// width for alignment.
    set_num_columns(columns: i32),
    /// 
    /// Lays out the line. The line is filled from its starting position
    /// with as many characters as are specified by *numColumns.* In case
    /// the text cannot be split until *numColumns* characters, the line
    /// will be filled with as many characters to the next whitespace or
    /// end of the text.
    /// 
    /// Lays out the line. The line is filled from its starting position
    /// with as many characters as are specified by *numColumns.* In case
    /// the text cannot be split until *numColumns* characters, the line
    /// will be filled with as many characters to the next whitespace or
    /// end of the text. The provided *alignmentWidth* is used as reference
    /// width for alignment.
    [org_name(setNumColumns)]
    set_num_columns_2(columns: i32, alignment_width: f32),
    /// 
    /// Moves the line to position *pos.*
    set_position(pos: &PointFType),
    /// 
    /// Returns the line's position relative to the text layout's position.
    position() -> PointF,
    /// 
    /// Returns the start of the line from the beginning of the string
    /// passed to the QTextLayout.
    text_start() -> i32,
    /// 
    /// Returns the length of the text in the line.
    /// 
    /// **See also:** [`natural_text_width()`]
    text_length() -> i32,
    /// 
    /// Returns the position of the line in the text engine.
    line_number() -> i32,
    /// 
    /// Draws a line on the given *painter* at the specified *position.*
    /// The *selection* is reserved for internal use.
    draw(p: *PainterType, point: &PointFType, selection: onst QTextLayout::FormatRange *),
    /// 
    /// Returns the glyph indexes and positions for all glyphs in this QTextLine for characters
    /// in the range defined by *from* and *length.* The *from* index is relative to the beginning
    /// of the text in the containing QTextLayout, and the range must be within the range of QTextLine
    /// as given by functions textStart() and textLength().
    /// 
    /// If *from* is negative, it will default to textStart(), and if *length* is negative it will
    /// default to the return value of textLength().
    /// 
    /// **See also:** [`TextLayout::glyph_runs`]
    glyph_runs(from: i32, length: i32) -> [GlyphRun],
}

[org_name(QTextLine)]
enum Edge {
    Leading,
    Trailing,
}

[org_name(QTextLine)]
enum CursorPosition {
    CursorBetweenCharacters,
    CursorOnCharacter,
}

// vim: syntax=rust expandtab ts=4 sw=4
