enum Edge {
    Leading,
    Trailing,
}

enum CursorPosition {
    CursorBetweenCharacters,
    CursorOnCharacter,
}


struct TextLine {
    is_valid() -> bool,
    rect() -> RectFType,
    x() -> f32,
    y() -> f32,
    width() -> f32,
    ascent() -> f32,
    descent() -> f32,
    height() -> f32,
    leading() -> f32,
    set_leading_included(included: bool),
    leading_included() -> bool,
    natural_text_width() -> f32,
    horizontal_advance() -> f32,
    natural_text_rect() -> RectFType,
    cursor_to_x(cursor_pos: &i32, edge: TextLine::Edge) -> f32,
    cursor_to_x(cursor_pos: i32, edge: TextLine::Edge) -> f32,
    x_to_cursor(x: f32, arg0: TextLine::CursorPosition) -> i32,
    set_line_width(width: f32),
    set_num_columns(columns: i32),
    set_num_columns(columns: i32, alignment_width: f32),
    set_position(pos: &PointFType),
    position() -> PointFType,
    text_start() -> i32,
    text_length() -> i32,
    line_number() -> i32,
    draw(p: &PainterType, point: &PointFType, selection: onst QTextLayout::FormatRange *),
    glyph_runs(from: i32, length: i32) -> [GlyphRunType],
}

// vim: syntax=rust expandtab ts=4 sw=4
