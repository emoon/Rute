[org_name(QFont)]
enum StyleHint {
    Helvetica,
    SansSerif,
    Times,
    Serif,
    Courier,
    TypeWriter,
    OldEnglish,
    Decorative,
    System,
    AnyStyle,
    Cursive,
    Monospace,
    Fantasy,
}

[org_name(QFont)]
enum StyleStrategy {
    PreferDefault,
    PreferBitmap,
    PreferDevice,
    PreferOutline,
    ForceOutline,
    PreferMatch,
    PreferQuality,
    PreferAntialias,
    NoAntialias,
    OpenGLCompatible,
    ForceIntegerMetrics,
    NoSubpixelAntialias,
    PreferNoShaping,
    NoFontMerging,
}

[org_name(QFont)]
enum HintingPreference {
    PreferDefaultHinting,
    PreferNoHinting,
    PreferVerticalHinting,
    PreferFullHinting,
}

[org_name(QFont)]
enum Weight {
    Thin,
    ExtraLight,
    Light,
    Normal,
    Medium,
    DemiBold,
    Bold,
    ExtraBold,
    Black,
}

[org_name(QFont)]
enum Style {
    StyleNormal,
    StyleItalic,
    StyleOblique,
}

[org_name(QFont)]
enum Stretch {
    AnyStretch,
    UltraCondensed,
    ExtraCondensed,
    Condensed,
    SemiCondensed,
    Unstretched,
    SemiExpanded,
    Expanded,
    ExtraExpanded,
    UltraExpanded,
}

[org_name(QFont)]
enum Capitalization {
    MixedCase,
    AllUppercase,
    AllLowercase,
    SmallCaps,
    Capitalize,
}

[org_name(QFont)]
enum SpacingType {
    PercentageSpacing,
    AbsoluteSpacing,
}

[org_name(QFont)]
enum ResolveProperties {
    FamilyResolved,
    SizeResolved,
    StyleHintResolved,
    StyleStrategyResolved,
    WeightResolved,
    StyleResolved,
    UnderlineResolved,
    OverlineResolved,
    StrikeOutResolved,
    FixedPitchResolved,
    StretchResolved,
    KerningResolved,
    CapitalizationResolved,
    LetterSpacingResolved,
    WordSpacingResolved,
    HintingPreferenceResolved,
    StyleNameResolved,
    AllPropertiesResolved,
}


struct Font {
    qt_check_for_qgadget_macro(),
    swap(other: &FontType),
    family() -> String,
    set_family(arg0: String),
    style_name() -> String,
    set_style_name(arg0: String),
    point_size() -> i32,
    set_point_size(arg0: i32),
    point_size_f() -> f32,
    set_point_size_f(arg0: f32),
    pixel_size() -> i32,
    set_pixel_size(arg0: i32),
    weight() -> i32,
    set_weight(arg0: i32),
    bold() -> bool,
    set_bold(arg0: bool),
    set_style(style: Font::Style),
    style() -> Font::Style,
    italic() -> bool,
    set_italic(b: bool),
    underline() -> bool,
    set_underline(arg0: bool),
    overline() -> bool,
    set_overline(arg0: bool),
    fixed_pitch() -> bool,
    set_fixed_pitch(arg0: bool),
    kerning() -> bool,
    set_kerning(arg0: bool),
    style_hint() -> Font::StyleHint,
    set_style_hint(arg0: Font::StyleHint, arg1: Font::StyleStrategy),
    letter_spacing() -> f32,
    letter_spacing_type() -> Font::SpacingType,
    set_letter_spacing(type: Font::SpacingType, spacing: f32),
    word_spacing() -> f32,
    set_word_spacing(spacing: f32),
    set_capitalization(arg0: Font::Capitalization),
    capitalization() -> Font::Capitalization,
    set_hinting_preference(hinting_preference: Font::HintingPreference),
    hinting_preference() -> Font::HintingPreference,
    raw_mode() -> bool,
    set_raw_mode(arg0: bool),
    exact_match() -> bool,
    is_copy_of(arg0: &FontType) -> bool,
    set_raw_name(arg0: String),
    raw_name() -> String,
    key() -> String,
    [static] substitute(arg0: String) -> String,
    [static] substitutes(arg0: String) -> [String],
    [static] substitutions() -> [String],
    [static] insert_substitution(arg0: String, arg1: String),
    [static] insert_substitutions(arg0: String, arg1: &[String]),
    [static] remove_substitutions(arg0: String),
    [static] initialize(),
    [static] cleanup(),
    [static] cache_statistics(),
    default_family() -> String,
    last_resort_family() -> String,
    last_resort_font() -> String,
    resolve(arg0: &FontType) -> Font,
    resolve() -> uint,
    resolve(mask: uint),
}

// vim: syntax=rust expandtab ts=4 sw=4
