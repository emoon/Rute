/// 
/// This class is used with [QAccessible::updateAccessibility().](QAccessible::updateAccessibility().)
/// 
/// The event type is one of the values of [QAccessible::Event.](QAccessible::Event.)
/// 
/// There are a number of subclasses that should be used to provide more details about the
/// event.
/// 
/// For example to notify about a focus change when re-implementing QWidget::setFocus,
/// the event could be used as follows:
/// ```
/// void MyWidget::setFocus(Qt::FocusReason reason)
/// 
/// // handle custom focus setting...
/// QAccessibleEvent event(f, QAccessible::Focus);
/// QAccessible::updateAccessibility(&event);
/// 
/// ```
/// 
/// To enable in process screen readers, all events must be sent after the change has happened.
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct AccessibleEvent {
    /// Returns the event type.
    type() -> Accessible::Event,
    /// Returns the event object.
    object() -> Object?,
    unique_id() -> Accessible::Id,
    /// Sets the child index to *child.*
    set_child(chld: i32),
    /// Returns the child index.
    child() -> i32,
    /// 
    /// Returns the QAccessibleInterface associated with the event.
    [event] accessible_interface() -> AccessibleInterface?,
}

// vim: syntax=rust expandtab ts=4 sw=4
