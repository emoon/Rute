enum SelectionMode {
    NoSelection,
    SingleSelection,
    MultiSelection,
    ExtendedSelection,
    ContiguousSelection,
}

enum SelectionBehavior {
    SelectItems,
    SelectRows,
    SelectColumns,
}

enum ScrollHint {
    EnsureVisible,
    PositionAtTop,
    PositionAtBottom,
    PositionAtCenter,
}

enum EditTrigger {
    NoEditTriggers,
    CurrentChanged,
    DoubleClicked,
    SelectedClicked,
    EditKeyPressed,
    AnyKeyPressed,
    AllEditTriggers,
}

enum ScrollMode {
    ScrollPerItem,
    ScrollPerPixel,
}

enum DragDropMode {
    NoDragDrop,
    DragOnly,
    DropOnly,
    DragDrop,
    InternalMove,
}

enum CursorAction {
    MoveUp,
    MoveDown,
    MoveLeft,
    MoveRight,
    MoveHome,
    MoveEnd,
    MovePageUp,
    MovePageDown,
    MoveNext,
    MovePrevious,
}

enum State {
    NoState,
    DraggingState,
    DragSelectingState,
    EditingState,
    ExpandingState,
    CollapsingState,
    AnimatingState,
}

enum DropIndicatorPosition {
    OnItem,
    AboveItem,
    BelowItem,
    OnViewport,
}

struct AbstractItemView : AbstractScrollArea {
    [replace] set_model(model: &AbstractItemModelType),
    model() -> AbstractItemModel?,
    [replace] set_selection_model(selection_model: &ItemSelectionModelType),
    selection_model() -> ItemSelectionModel?,
    set_item_delegate(delegate: &AbstractItemDelegateType),
    item_delegate() -> AbstractItemDelegate?,
    set_selection_mode(mode: AbstractItemView::SelectionMode),
    selection_mode() -> AbstractItemView::SelectionMode,
    set_selection_behavior(behavior: AbstractItemView::SelectionBehavior),
    selection_behavior() -> AbstractItemView::SelectionBehavior,
    current_index() -> ModelIndex,
    root_index() -> ModelIndex,
    set_edit_triggers(triggers: EditTriggers),
    edit_triggers() -> EditTriggers,
    set_vertical_scroll_mode(mode: AbstractItemView::ScrollMode),
    vertical_scroll_mode() -> AbstractItemView::ScrollMode,
    reset_vertical_scroll_mode(),
    set_horizontal_scroll_mode(mode: AbstractItemView::ScrollMode),
    horizontal_scroll_mode() -> AbstractItemView::ScrollMode,
    reset_horizontal_scroll_mode(),
    set_auto_scroll(enable: bool),
    has_auto_scroll() -> bool,
    set_auto_scroll_margin(margin: i32),
    auto_scroll_margin() -> i32,
    set_tab_key_navigation(enable: bool),
    tab_key_navigation() -> bool,
    set_drop_indicator_shown(enable: bool),
    show_drop_indicator() -> bool,
    set_drag_enabled(enable: bool),
    drag_enabled() -> bool,
    set_drag_drop_overwrite_mode(overwrite: bool),
    drag_drop_overwrite_mode() -> bool,
    set_drag_drop_mode(behavior: AbstractItemView::DragDropMode),
    drag_drop_mode() -> AbstractItemView::DragDropMode,
    set_default_drop_action(drop_action: Rute::DropAction),
    default_drop_action() -> Rute::DropAction,
    set_alternating_row_colors(enable: bool),
    alternating_row_colors() -> bool,
    set_icon_size(size: &SizeType),
    icon_size() -> Size,
    set_text_elide_mode(mode: Rute::TextElideMode),
    text_elide_mode() -> Rute::TextElideMode,
    [replace] keyboard_search(search: String),
    [replace] visual_rect(index: &ModelIndexType) -> Rect,
    [replace] scroll_to(index: &ModelIndexType, hint: AbstractItemView::ScrollHint),
    [replace] index_at(point: &PointType) -> ModelIndex,
    size_hint_for_index(index: &ModelIndexType) -> Size,
    [replace] size_hint_for_row(row: i32) -> i32,
    [replace] size_hint_for_column(column: i32) -> i32,
    open_persistent_editor(index: &ModelIndexType),
    close_persistent_editor(index: &ModelIndexType),
    is_persistent_editor_open(index: &ModelIndexType) -> bool,
    set_index_widget(index: &ModelIndexType, widget: &WidgetType),
    index_widget(index: &ModelIndexType) -> Widget?,
    set_item_delegate_for_row(row: i32, delegate: &AbstractItemDelegateType),
    item_delegate_for_row(row: i32) -> AbstractItemDelegate?,
    set_item_delegate_for_column(column: i32, delegate: &AbstractItemDelegateType),
    item_delegate_for_column(column: i32) -> AbstractItemDelegate?,
    item_delegate(index: &ModelIndexType) -> AbstractItemDelegate?,
    [replace] input_method_query(query: Rute::InputMethodQuery) -> Variant,
    [replace] reset(),
    [replace] set_root_index(index: &ModelIndexType),
    [replace] do_items_layout(),
    [replace] select_all(),
    edit(index: &ModelIndexType),
    clear_selection(),
    set_current_index(index: &ModelIndexType),
    scroll_to_top(),
    scroll_to_bottom(),
    update(index: &ModelIndexType),
    [replace] data_changed(top_left: &ModelIndexType, bottom_right: &ModelIndexType, roles: [i32]),
    [replace] rows_inserted(parent: &ModelIndexType, start: i32, end: i32),
    [replace] rows_about_to_be_removed(parent: &ModelIndexType, start: i32, end: i32),
    [replace] selection_changed(selected: &ItemSelectionType, deselected: &ItemSelectionType),
    [replace] current_changed(current: &ModelIndexType, previous: &ModelIndexType),
    [replace] update_editor_data(),
    [replace] vertical_scrollbar_action(action: i32),
    [replace] horizontal_scrollbar_action(action: i32),
    [replace] vertical_scrollbar_value_changed(value: i32),
    [replace] horizontal_scrollbar_value_changed(value: i32),
    [replace] close_editor(editor: &WidgetType, hint: AbstractItemDelegate::EndEditHint),
    [replace] commit_data(editor: &WidgetType),
    [event] pressed(index: &ModelIndexType),
    [event] clicked(index: &ModelIndexType),
    [event] double_clicked(index: &ModelIndexType),
    [event] activated(index: &ModelIndexType),
    [event] entered(index: &ModelIndexType),
    [event] viewport_entered(),
    [event] icon_size_changed(size: &SizeType),
    set_horizontal_steps_per_item(steps: i32),
    horizontal_steps_per_item() -> i32,
    set_vertical_steps_per_item(steps: i32),
    vertical_steps_per_item() -> i32,
    [replace] move_cursor(cursor_action: AbstractItemView::CursorAction, modifiers: Rute::KeyboardModifiers) -> ModelIndex,
    [replace] horizontal_offset() -> i32,
    [replace] vertical_offset() -> i32,
    [replace] is_index_hidden(index: &ModelIndexType) -> bool,
    [replace] set_selection(rect: &RectType, command: ItemSelectionModel::SelectionFlags),
    [replace] visual_region_for_selection(selection: &ItemSelectionType) -> Region,
    [replace] selected_indexes() -> ModelIndexList,
    [replace] edit(index: &ModelIndexType, trigger: AbstractItemView::EditTrigger, event: &EventType) -> bool,
    [replace] selection_command(index: &ModelIndexType, event: &EventType) -> ItemSelectionModel::SelectionFlags,
    [replace] start_drag(supported_actions: Rute::DropActions),
    [replace] view_options() -> StyleOptionViewItem,
    state() -> AbstractItemView::State,
    set_state(state: AbstractItemView::State),
    schedule_delayed_items_layout(),
    execute_delayed_items_layout(),
    set_dirty_region(region: &RegionType),
    scroll_dirty_region(dx: i32, dy: i32),
    dirty_region_offset() -> Point,
    start_auto_scroll(),
    stop_auto_scroll(),
    do_auto_scroll(),
    [replace] focus_next_prev_child(next: bool) -> bool,
    [replace] event(event: &EventType) -> bool,
    [replace] viewport_event(event: &EventType) -> bool,
    [replace] mouse_press_event(event: &MouseEventType),
    [replace] mouse_move_event(event: &MouseEventType),
    [replace] mouse_release_event(event: &MouseEventType),
    [replace] mouse_double_click_event(event: &MouseEventType),
    [replace] drag_enter_event(event: &DragEnterEventType),
    [replace] drag_move_event(event: &DragMoveEventType),
    [replace] drag_leave_event(event: &DragLeaveEventType),
    [replace] drop_event(event: &DropEventType),
    [replace] focus_in_event(event: &FocusEventType),
    [replace] focus_out_event(event: &FocusEventType),
    [replace] key_press_event(event: &KeyEventType),
    [replace] resize_event(event: &ResizeEventType),
    [replace] timer_event(event: &TimerEventType),
    [replace] input_method_event(event: &InputMethodEventType),
    drop_indicator_position() -> AbstractItemView::DropIndicatorPosition,
    [replace] viewport_size_hint() -> Size,
}

// vim: syntax=rust expandtab ts=4 sw=4
