struct AbstractItemView : AbstractScrollArea {
    set_model(&AbstractItemModelType model),
    model() -> &AbstractItemModelType,
    set_selection_model(&ItemSelectionModelType selection_model),
    selection_model() -> &ItemSelectionModelType,
    set_item_delegate(&AbstractItemDelegateType delegate),
    item_delegate() -> &AbstractItemDelegateType,
    set_selection_mode(AbstractItemView::SelectionMode mode),
    selection_mode() -> AbstractItemView::SelectionMode,
    set_selection_behavior(AbstractItemView::SelectionBehavior behavior),
    selection_behavior() -> AbstractItemView::SelectionBehavior,
    current_index() -> ModelIndexType,
    root_index() -> ModelIndexType,
    set_edit_triggers(EditTriggers triggers),
    edit_triggers() -> EditTriggers,
    set_vertical_scroll_mode(AbstractItemView::ScrollMode mode),
    vertical_scroll_mode() -> AbstractItemView::ScrollMode,
    reset_vertical_scroll_mode(),
    set_horizontal_scroll_mode(AbstractItemView::ScrollMode mode),
    horizontal_scroll_mode() -> AbstractItemView::ScrollMode,
    reset_horizontal_scroll_mode(),
    set_auto_scroll(bool enable),
    has_auto_scroll() -> bool,
    set_auto_scroll_margin(i32 margin),
    auto_scroll_margin() -> i32,
    set_tab_key_navigation(bool enable),
    tab_key_navigation() -> bool,
    set_drop_indicator_shown(bool enable),
    show_drop_indicator() -> bool,
    set_drag_enabled(bool enable),
    drag_enabled() -> bool,
    set_drag_drop_overwrite_mode(bool overwrite),
    drag_drop_overwrite_mode() -> bool,
    set_drag_drop_mode(AbstractItemView::DragDropMode behavior),
    drag_drop_mode() -> AbstractItemView::DragDropMode,
    set_default_drop_action(Rute::DropAction drop_action),
    default_drop_action() -> Rute::DropAction,
    set_alternating_row_colors(bool enable),
    alternating_row_colors() -> bool,
    set_icon_size(&SizeType size),
    icon_size() -> SizeType,
    set_text_elide_mode(Rute::TextElideMode mode),
    text_elide_mode() -> Rute::TextElideMode,
    keyboard_search(String search),
    visual_rect(&ModelIndexType index) -> RectType,
    scroll_to(&ModelIndexType index, AbstractItemView::ScrollHint hint),
    index_at(&PointType point) -> ModelIndexType,
    size_hint_for_index(&ModelIndexType index) -> SizeType,
    size_hint_for_row(i32 row) -> i32,
    size_hint_for_column(i32 column) -> i32,
    open_persistent_editor(&ModelIndexType index),
    close_persistent_editor(&ModelIndexType index),
    is_persistent_editor_open(&ModelIndexType index) -> bool,
    set_index_widget(&ModelIndexType index, &WidgetType widget),
    index_widget(&ModelIndexType index) -> &WidgetType,
    set_item_delegate_for_row(i32 row, &AbstractItemDelegateType delegate),
    item_delegate_for_row(i32 row) -> &AbstractItemDelegateType,
    set_item_delegate_for_column(i32 column, &AbstractItemDelegateType delegate),
    item_delegate_for_column(i32 column) -> &AbstractItemDelegateType,
    item_delegate(&ModelIndexType index) -> &AbstractItemDelegateType,
    input_method_query(Rute::InputMethodQuery query) -> VariantType,
    reset(),
    set_root_index(&ModelIndexType index),
    do_items_layout(),
    select_all(),
    edit(&ModelIndexType index),
    clear_selection(),
    set_current_index(&ModelIndexType index),
    scroll_to_top(),
    scroll_to_bottom(),
    update(&ModelIndexType index),
    data_changed(&ModelIndexType top_left, &ModelIndexType bottom_right, &Vector<int>Type roles),
    rows_inserted(&ModelIndexType parent, i32 start, i32 end),
    rows_about_to_be_removed(&ModelIndexType parent, i32 start, i32 end),
    selection_changed(&ItemSelectionType selected, &ItemSelectionType deselected),
    current_changed(&ModelIndexType current, &ModelIndexType previous),
    update_editor_data(),
    vertical_scrollbar_action(i32 action),
    horizontal_scrollbar_action(i32 action),
    vertical_scrollbar_value_changed(i32 value),
    horizontal_scrollbar_value_changed(i32 value),
    close_editor(&WidgetType editor, AbstractItemDelegate::EndEditHint hint),
    commit_data(&WidgetType editor),
    pressed(&ModelIndexType index),
    clicked(&ModelIndexType index),
    double_clicked(&ModelIndexType index),
    activated(&ModelIndexType index),
    entered(&ModelIndexType index),
    viewport_entered(),
    icon_size_changed(&SizeType size),
    set_horizontal_steps_per_item(i32 steps),
    horizontal_steps_per_item() -> i32,
    set_vertical_steps_per_item(i32 steps),
    vertical_steps_per_item() -> i32,
    move_cursor(AbstractItemView::CursorAction cursor_action, Rute::KeyboardModifiers modifiers) -> ModelIndexType,
    horizontal_offset() -> i32,
    vertical_offset() -> i32,
    is_index_hidden(&ModelIndexType index) -> bool,
    set_selection(&RectType rect, ItemSelectionModel::SelectionFlags command),
    visual_region_for_selection(&ItemSelectionType selection) -> RegionType,
    selected_indexes() -> ModelIndexListType,
    edit(&ModelIndexType index, AbstractItemView::EditTrigger trigger, &EventType event) -> bool,
    selection_command(&ModelIndexType index, &EventType event) -> ItemSelectionModel::SelectionFlags,
    start_drag(Rute::DropActions supported_actions),
    view_options() -> StyleOptionViewItemType,
    state() -> AbstractItemView::State,
    set_state(AbstractItemView::State state),
    schedule_delayed_items_layout(),
    execute_delayed_items_layout(),
    set_dirty_region(&RegionType region),
    scroll_dirty_region(i32 dx, i32 dy),
    dirty_region_offset() -> PointType,
    start_auto_scroll(),
    stop_auto_scroll(),
    do_auto_scroll(),
    focus_next_prev_child(bool next) -> bool,
    event(&EventType event) -> bool,
    viewport_event(&EventType event) -> bool,
    mouse_press_event(&MouseEventType event),
    mouse_move_event(&MouseEventType event),
    mouse_release_event(&MouseEventType event),
    mouse_double_click_event(&MouseEventType event),
    drag_enter_event(&DragEnterEventType event),
    drag_move_event(&DragMoveEventType event),
    drag_leave_event(&DragLeaveEventType event),
    drop_event(&DropEventType event),
    focus_in_event(&FocusEventType event),
    focus_out_event(&FocusEventType event),
    key_press_event(&KeyEventType event),
    resize_event(&ResizeEventType event),
    timer_event(&TimerEventType event),
    input_method_event(&InputMethodEventType event),
    drop_indicator_position() -> AbstractItemView::DropIndicatorPosition,
    viewport_size_hint() -> SizeType,
}

