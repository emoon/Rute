///   \class QGraphicsScale
///   \brief The QGraphicsScale class provides a scale transformation.
///   \since 4.6
///   \inmodule QtWidgets
/// 
///   QGraphicsScene provides certain parameters to help control how the scale
///   should be applied.
/// 
///   The origin is the point that the item is scaled from (i.e., it stays fixed
///   relative to the parent as the rest of the item grows). By default the
///   origin is QPointF(0, 0).
/// 
///   The parameters xScale, yScale, and zScale describe the scale factors to
///   apply in horizontal, vertical, and depth directions. They can take on any
///   value, including 0 (to collapse the item to a point) or negative value.
///   A negative xScale value will mirror the item horizontally. A negative yScale
///   value will flip the item vertically. A negative zScale will flip the
///   item end for end.
/// 
///   \sa QGraphicsTransform, QGraphicsItem::setScale(), QTransform::scale()
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GraphicsScale : GraphicsTransform {
    ///     \property QGraphicsScale::origin
    ///     \brief the origin of the scale in 3D space.
    /// 
    ///     All scaling will be done relative to this point (i.e., this point
    ///     will stay fixed, relative to the parent, when the item is scaled).
    /// 
    ///     \sa xScale, yScale, zScale
    origin() -> Vector3D,
    set_origin(point: &Vector3DType),
    ///     \property QGraphicsScale::xScale
    ///     \brief the horizontal scale factor.
    /// 
    ///     The scale factor can be any real number; the default value is 1.0. If you
    ///     set the factor to 0.0, the item will be collapsed to a single point. If you
    ///     provide a negative value, the item will be mirrored horizontally around its
    ///     origin.
    /// 
    ///     \sa yScale, zScale, origin
    x_scale() -> f32,
    set_x_scale(arg0: f32),
    ///     \property QGraphicsScale::yScale
    ///     \brief the vertical scale factor.
    /// 
    ///     The scale factor can be any real number; the default value is 1.0. If you
    ///     set the factor to 0.0, the item will be collapsed to a single point. If you
    ///     provide a negative value, the item will be flipped vertically around its
    ///     origin.
    /// 
    ///     \sa xScale, zScale, origin
    y_scale() -> f32,
    set_y_scale(arg0: f32),
    ///     \property QGraphicsScale::zScale
    ///     \brief the depth scale factor.
    /// 
    ///     The scale factor can be any real number; the default value is 1.0. If you
    ///     set the factor to 0.0, the item will be collapsed to a single point. If you
    ///     provide a negative value, the item will be flipped end for end around its
    ///     origin.
    /// 
    ///     \sa xScale, yScale, origin
    z_scale() -> f32,
    set_z_scale(arg0: f32),
    ///     \reimp
    [event] apply_to(matrix: *Matrix4x4Type),
    [signal] origin_changed(),
    [signal] x_scale_changed(),
    [signal] y_scale_changed(),
    [signal] z_scale_changed(),
    [signal] scale_changed(),
}

// vim: syntax=rust expandtab ts=4 sw=4
