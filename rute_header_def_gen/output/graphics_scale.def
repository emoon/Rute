/// 
/// QGraphicsScene provides certain parameters to help control how the scale
/// should be applied.
/// 
/// The origin is the point that the item is scaled from (i.e., it stays fixed
/// relative to the parent as the rest of the item grows). By default the
/// origin is QPointF(0, 0).
/// 
/// The parameters xScale, yScale, and zScale describe the scale factors to
/// apply in horizontal, vertical, and depth directions. They can take on any
/// value, including 0 (to collapse the item to a point) or negative value.
/// A negative xScale value will mirror the item horizontally. A negative yScale
/// value will flip the item vertically. A negative zScale will flip the
/// item end for end.
/// 
/// **See also:** [`GraphicsTransform`]
/// [`GraphicsItem::set_scale`]
/// [`Transform::scale`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GraphicsScale : GraphicsTransform {
    /// 
    /// All scaling will be done relative to this point (i.e., this point
    /// will stay fixed, relative to the parent, when the item is scaled).
    /// 
    /// **See also:** xScale
    /// yScale
    /// zScale
    /// 
    /// QGraphicsScale emits this signal when its origin changes.
    /// 
    /// **See also:** [`GraphicsScale::origin()`]
    origin() -> Vector3D,
    set_origin(point: &Vector3DType),
    /// 
    /// The scale factor can be any real number; the default value is 1.0. If you
    /// set the factor to 0.0, the item will be collapsed to a single point. If you
    /// provide a negative value, the item will be mirrored horizontally around its
    /// origin.
    /// 
    /// **See also:** yScale
    /// zScale
    /// origin
    /// 
    /// This signal is emitted whenever the [xScale](xScale)
    /// property changes.
    x_scale() -> f32,
    set_x_scale(arg0: f32),
    /// 
    /// The scale factor can be any real number; the default value is 1.0. If you
    /// set the factor to 0.0, the item will be collapsed to a single point. If you
    /// provide a negative value, the item will be flipped vertically around its
    /// origin.
    /// 
    /// **See also:** xScale
    /// zScale
    /// origin
    /// 
    /// This signal is emitted whenever the [yScale](yScale)
    /// property changes.
    y_scale() -> f32,
    set_y_scale(arg0: f32),
    /// 
    /// The scale factor can be any real number; the default value is 1.0. If you
    /// set the factor to 0.0, the item will be collapsed to a single point. If you
    /// provide a negative value, the item will be flipped end for end around its
    /// origin.
    /// 
    /// **See also:** xScale
    /// yScale
    /// origin
    /// 
    /// This signal is emitted whenever the [zScale](zScale)
    /// property changes.
    z_scale() -> f32,
    set_z_scale(arg0: f32),
    /// 
    [event] apply_to(matrix: *Matrix4x4Type),
    /// 
    /// QGraphicsScale emits this signal when its origin changes.
    /// 
    /// **See also:** [`GraphicsScale::origin()`]
    [signal] origin_changed(),
    /// 
    /// This signal is emitted whenever the [xScale](xScale)
    /// property changes.
    [signal] x_scale_changed(),
    /// 
    /// This signal is emitted whenever the [yScale](yScale)
    /// property changes.
    [signal] y_scale_changed(),
    /// 
    /// This signal is emitted whenever the [zScale](zScale)
    /// property changes.
    [signal] z_scale_changed(),
    /// 
    /// This signal is emitted whenever the xScale, yScale, or zScale
    /// of the object changes.
    /// 
    /// **See also:** [`GraphicsScale::x_scale()`]
    /// [`GraphicsScale::y_scale()`]
    /// **See also:** [`GraphicsScale::z_scale()`]
    [signal] scale_changed(),
}

// vim: syntax=rust expandtab ts=4 sw=4
