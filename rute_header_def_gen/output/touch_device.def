/// 
/// Each QTouchEvent contains a QTouchDevice pointer to allow accessing
/// device-specific properties like type and capabilities. It is the
/// responsibility of the platform or generic plug-ins to register the
/// available touch devices via QWindowSystemInterface before generating any
/// touch events. Applications do not need to instantiate this class, they
/// should just access the global instances pointed to by QTouchEvent::device().
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TouchDevice {
    qt_check_for_qgadget_macro(),
    /// 
    /// Returns a list of all registered devices.
    /// 
    /// **Note**: The returned list cannot be used to add new devices. To add a simulated
    /// touch screen for an autotest, QTest::createTouchDevice() can be used.
    /// To add real touch screens to QPA plugins, the private
    /// `QWindowSystemInterface::registerTouchDevice()` function can be used.
    [static] devices() -> [TouchDevice?],
    /// 
    /// Returns the touch device name.
    /// 
    /// This string may often be empty. It is however useful for systems that have
    /// more than one touch input device because there it can be used to
    /// differentiate between the devices (i.e. to tell from which device a
    /// QTouchEvent originates from).
    name() -> String,
    /// 
    /// Returns the touch device type.
    type() -> TouchDevice::DeviceType,
    /// 
    /// Returns the touch device capabilities.
    capabilities() -> TouchDevice::Capabilities,
    /// 
    /// Returns the maximum number of simultaneous touch points (fingers) that
    /// can be detected.
    maximum_touch_points() -> i32,
    /// 
    /// Sets the *name* (a unique identifier) for the device. In most systems it is
    /// enough to leave this unset and keep the default empty name. This identifier
    /// becomes important when having multiple touch devices and a need to
    /// differentiate between them.
    set_name(name: String),
    /// 
    /// Sets the device type *devType.*
    set_type(dev_type: TouchDevice::DeviceType),
    /// 
    /// Sets the capabilities *caps* supported by the device and its driver.
    set_capabilities(caps: TouchDevice::Capabilities),
    /// 
    /// Sets the maximum number of simultaneous touchpoints *max*
    /// supported by the device and its driver.
    set_maximum_touch_points(max: i32),
}

[org_name(QTouchDevice)]
enum DeviceType {
    TouchScreen,
    TouchPad,
}

[org_name(QTouchDevice)]
enum CapabilityFlag {
    Position,
    Area,
    Pressure,
    Velocity,
    RawPositions,
    NormalizedPosition,
    MouseEmulation,
}

// vim: syntax=rust expandtab ts=4 sw=4
