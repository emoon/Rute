///     \since 4.1
///     \class QPainterPathStroker
///     \ingroup painting
///     \inmodule QtGui
/// 
///     \brief The QPainterPathStroker class is used to generate fillable
///     outlines for a given painter path.
/// 
///     By calling the createStroke() function, passing a given
///     QPainterPath as argument, a new painter path representing the
///     outline of the given path is created. The newly created painter
///     path can then be filled to draw the original painter path's
///     outline.
/// 
///     You can control the various design aspects (width, cap styles,
///     join styles and dash pattern) of the outlining using the following
///     functions:
/// 
///     \list
///     \li setWidth()
///     \li setCapStyle()
///     \li setJoinStyle()
///     \li setDashPattern()
///     \endlist
/// 
///     The setDashPattern() function accepts both a Qt::PenStyle object
///     and a vector representation of the pattern as argument.
/// 
///     In addition you can specify a curve's threshold, controlling the
///     granularity with which a curve is drawn, using the
///     setCurveThreshold() function. The default threshold is a well
///     adjusted value (0.25), and normally you should not need to modify
///     it. However, you can make the curve's appearance smoother by
///     decreasing its value.
/// 
///     You can also control the miter limit for the generated outline
///     using the setMiterLimit() function. The miter limit describes how
///     far from each join the miter join can extend. The limit is
///     specified in the units of width so the pixelwise miter limit will
///     be \c {miterlimit * width}. This value is only used if the join
///     style is Qt::MiterJoin.
/// 
///     The painter path generated by the createStroke() function should
///     only be used for outlining the given painter path. Otherwise it
///     may cause unexpected behavior. Generated outlines also require the
///     Qt::WindingFill rule which is set by default.
/// 
///     \sa QPen, QBrush

struct PainterPathStroker {
    ///     Sets the width of the generated outline painter path to \a width.
    /// 
    ///     The generated outlines will extend approximately 50% of \a width
    ///     to each side of the given input path's original outline.
    set_width(width: f32),
    ///     Returns the width of the generated outlines.
    width() -> f32,
    ///     Sets the cap style of the generated outlines to \a style.  If a
    ///     dash pattern is set, each segment of the pattern is subject to the
    ///     cap \a style.
    set_cap_style(style: Rute::PenCapStyle),
    ///     Returns the cap style of the generated outlines.
    cap_style() -> Rute::PenCapStyle,
    ///     Sets the join style of the generated outlines to \a style.
    set_join_style(style: Rute::PenJoinStyle),
    ///     Returns the join style of the generated outlines.
    join_style() -> Rute::PenJoinStyle,
    ///     Sets the miter limit of the generated outlines to \a limit.
    /// 
    ///     The miter limit describes how far from each join the miter join
    ///     can extend. The limit is specified in units of the currently set
    ///     width. So the pixelwise miter limit will be \c { miterlimit *
    ///     width}.
    /// 
    ///     This value is only used if the join style is Qt::MiterJoin.
    set_miter_limit(length: f32),
    ///     Returns the miter limit for the generated outlines.
    miter_limit() -> f32,
    ///     Specifies the curve flattening \a threshold, controlling the
    ///     granularity with which the generated outlines' curve is drawn.
    /// 
    ///     The default threshold is a well adjusted value (0.25), and
    ///     normally you should not need to modify it. However, you can make
    ///     the curve's appearance smoother by decreasing its value.
    set_curve_threshold(threshold: f32),
    ///     Returns the curve flattening threshold for the generated
    ///     outlines.
    curve_threshold() -> f32,
    ///     \overload
    /// 
    ///     Sets the dash pattern for the generated outlines to \a
    ///     dashPattern.  This function makes it possible to specify custom
    ///     dash patterns.
    /// 
    ///     Each element in the vector contains the lengths of the dashes and spaces
    ///     in the stroke, beginning with the first dash in the first element, the
    ///     first space in the second element, and alternating between dashes and
    ///     spaces for each following pair of elements.
    /// 
    ///     The vector can contain an odd number of elements, in which case the last
    ///     element will be extended by the length of the first element when the
    ///     pattern repeats.
    set_dash_pattern(arg0: Rute::PenStyle),
    ///     \overload
    /// 
    ///     Sets the dash pattern for the generated outlines to \a
    ///     dashPattern.  This function makes it possible to specify custom
    ///     dash patterns.
    /// 
    ///     Each element in the vector contains the lengths of the dashes and spaces
    ///     in the stroke, beginning with the first dash in the first element, the
    ///     first space in the second element, and alternating between dashes and
    ///     spaces for each following pair of elements.
    /// 
    ///     The vector can contain an odd number of elements, in which case the last
    ///     element will be extended by the length of the first element when the
    ///     pattern repeats.
    set_dash_pattern(dash_pattern: [f32]),
    ///     Returns the dash pattern for the generated outlines.
    dash_pattern() -> [f32],
    set_dash_offset(offset: f32),
    dash_offset() -> f32,
}

// vim: syntax=rust expandtab ts=4 sw=4
