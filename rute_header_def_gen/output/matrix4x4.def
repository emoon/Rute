enum Matrix4x4FixMeEnums {
    Identity,
    Translation,
    Scale,
    Rotation2D,
    Rotation,
    Perspective,
    General,
}


struct Matrix4x4 {
    column(index: i32) -> Vector4DType,
    set_column(index: i32, value: &Vector4DType),
    row(index: i32) -> Vector4DType,
    set_row(index: i32, value: &Vector4DType),
    is_affine() -> bool,
    is_identity() -> bool,
    set_to_identity(),
    fill(value: f32),
    determinant() -> double,
    inverted(invertible: &bool) -> Matrix4x4Type,
    scale(vector: &Vector3DType),
    rotate(angle: f32, vector: &Vector3DType),
    scale(x: f32, y: f32),
    scale(x: f32, y: f32, z: f32),
    scale(factor: f32),
    rotate(angle: f32, x: f32, y: f32, z: f32),
    rotate(quaternion: &QuaternionType),
    ortho(rect: &RectType),
    ortho(rect: &RectFType),
    ortho(left: f32, right: f32, bottom: f32, top: f32, near_plane: f32, far_plane: f32),
    frustum(left: f32, right: f32, bottom: f32, top: f32, near_plane: f32, far_plane: f32),
    perspective(vertical_angle: f32, aspect_ratio: f32, near_plane: f32, far_plane: f32),
    look_at(eye: &Vector3DType, center: &Vector3DType, up: &Vector3DType),
    viewport(rect: &RectFType),
    viewport(left: f32, bottom: f32, width: f32, height: f32, near_plane: f32, far_plane: f32),
    flip_coordinates(),
    copy_data_to(values: &f32),
    to_affine() -> MatrixType,
    to_transform() -> TransformType,
    to_transform(distance_to_plane: f32) -> TransformType,
    map(point: &PointType) -> PointType,
    map(point: &PointFType) -> PointFType,
    map(point: &Vector3DType) -> Vector3DType,
    map_vector(vector: &Vector3DType) -> Vector3DType,
    map(point: &Vector4DType) -> Vector4DType,
    map_rect(rect: &RectType) -> RectType,
    map_rect(rect: &RectFType) -> RectFType,
    data() -> &f32,
    data() -> &f32,
    const_data() -> &f32,
    optimize(),
}

// vim: syntax=rust expandtab ts=4 sw=4
