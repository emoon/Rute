
struct Matrix4x4 {
    column(i32 index) -> Vector4DType,
    set_column(i32 index, &Vector4DType value),
    row(i32 index) -> Vector4DType,
    set_row(i32 index, &Vector4DType value),
    is_affine() -> bool,
    is_identity() -> bool,
    set_to_identity(),
    fill(float value),
    determinant() -> double,
    inverted(&bool invertible) -> Matrix4x4Type,
    scale(&Vector3DType vector),
    rotate(float angle, &Vector3DType vector),
    scale(float x, float y),
    scale(float x, float y, float z),
    scale(float factor),
    rotate(float angle, float x, float y, float z),
    rotate(&QuaternionType quaternion),
    ortho(&RectType rect),
    ortho(&RectFType rect),
    ortho(float left, float right, float bottom, float top, float near_plane, float far_plane),
    frustum(float left, float right, float bottom, float top, float near_plane, float far_plane),
    perspective(float vertical_angle, float aspect_ratio, float near_plane, float far_plane),
    look_at(&Vector3DType eye, &Vector3DType center, &Vector3DType up),
    viewport(&RectFType rect),
    viewport(float left, float bottom, float width, float height, float near_plane, float far_plane),
    flip_coordinates(),
    copy_data_to(&float values),
    to_affine() -> MatrixType,
    to_transform() -> TransformType,
    to_transform(float distance_to_plane) -> TransformType,
    map(&PointType point) -> PointType,
    map(&PointFType point) -> PointFType,
    map(&Vector3DType point) -> Vector3DType,
    map_vector(&Vector3DType vector) -> Vector3DType,
    map(&Vector4DType point) -> Vector4DType,
    map_rect(&RectType rect) -> RectType,
    map_rect(&RectFType rect) -> RectFType,
    data() -> &float,
    data() -> &float,
    const_data() -> &float,
    optimize(),
    orthonormal_inverse() -> Matrix4x4Type,
    projected_rotate(float angle, float x, float y, float z),
}

