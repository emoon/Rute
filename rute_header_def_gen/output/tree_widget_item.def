///   \class QTreeWidgetItem
/// 
///   \brief The QTreeWidgetItem class provides an item for use with the
///   QTreeWidget convenience class.
/// 
///   \ingroup model-view
///   \inmodule QtWidgets
/// 
///   Tree widget items are used to hold rows of information for tree widgets.
///   Rows usually contain several columns of data, each of which can contain
///   a text label and an icon.
/// 
///   The QTreeWidgetItem class is a convenience class that replaces the
///   QListViewItem class in Qt 3. It provides an item for use with
///   the QTreeWidget class.
/// 
///   Items are usually constructed with a parent that is either a QTreeWidget
///   (for top-level items) or a QTreeWidgetItem (for items on lower levels of
///   the tree). For example, the following code constructs a top-level item
///   to represent cities of the world, and adds a entry for Oslo as a child
///   item:
/// 
///   \snippet qtreewidget-using/mainwindow.cpp 3
/// 
///   Items can be added in a particular order by specifying the item they
///   follow when they are constructed:
/// 
///   \snippet qtreewidget-using/mainwindow.cpp 5
/// 
///   Each column in an item can have its own background brush which is set with
///   the setBackground() function. The current background brush can be
///   found with background().
///   The text label for each column can be rendered with its own font and brush.
///   These are specified with the setFont() and setForeground() functions,
///   and read with font() and foreground().
/// 
///   The main difference between top-level items and those in lower levels of
///   the tree is that a top-level item has no parent(). This information
///   can be used to tell the difference between items, and is useful to know
///   when inserting and removing items from the tree.
///   Children of an item can be removed with takeChild() and inserted at a
///   given index in the list of children with the insertChild() function.
/// 
///   By default, items are enabled, selectable, checkable, and can be the source
///   of a drag and drop operation.
///   Each item's flags can be changed by calling setFlags() with the appropriate
///   value (see \l{Qt::ItemFlags}). Checkable items can be checked and unchecked
///   with the setCheckState() function. The corresponding checkState() function
///   indicates whether the item is currently checked.
/// 
///   \section1 Subclassing
/// 
///   When subclassing QTreeWidgetItem to provide custom items, it is possible to
///   define new types for them so that they can be distinguished from standard
///   items. The constructors for subclasses that require this feature need to
///   call the base class constructor with a new type value equal to or greater
///   than \l UserType.
/// 
///   \sa QTreeWidget, QTreeWidgetItemIterator, {Model/View Programming},
///   QListWidgetItem, QTableWidgetItem
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QTreeWidgetItem)]
enum ItemType {
    Type,
    UserType,
}

[org_name(QTreeWidgetItem)]
enum ChildIndicatorPolicy {
    ShowIndicator,
    DontShowIndicator,
    DontShowIndicatorWhenChildless,
}


struct TreeWidgetItem {
    ///     Creates a deep copy of the item and of its children.
    [event] clone() -> TreeWidgetItem?,
    set_selected(select: bool),
    is_selected() -> bool,
    set_hidden(hide: bool),
    is_hidden() -> bool,
    set_expanded(expand: bool),
    is_expanded() -> bool,
    set_first_column_spanned(span: bool),
    is_first_column_spanned() -> bool,
    set_disabled(disabled: bool),
    is_disabled() -> bool,
    ///    Sets the item indicator \a policy. This policy decides when the
    ///    tree branch expand/collapse indicator is shown.
    ///    The default value is ShowForChildren.
    /// 
    ///    \sa childIndicatorPolicy()
    set_child_indicator_policy(policy: TreeWidgetItem::ChildIndicatorPolicy),
    ///    Returns the item indicator policy. This policy decides when the
    ///    tree branch expand/collapse indicator is shown.
    /// 
    ///    \sa setChildIndicatorPolicy()
    child_indicator_policy() -> TreeWidgetItem::ChildIndicatorPolicy,
    ///     \fn Qt::ItemFlags QTreeWidgetItem::flags() const
    /// 
    ///     Returns the flags used to describe the item. These determine whether
    ///     the item can be checked, edited, and selected.
    /// 
    ///     The default value for flags is
    ///     Qt::ItemIsSelectable | Qt::ItemIsUserCheckable | Qt::ItemIsEnabled |
    ///     Qt::ItemIsDragEnabled | Qt::ItemIsDropEnabled.
    /// 
    ///     \sa setFlags()
    flags() -> Rute::ItemFlags,
    ///     \fn void QTreeWidgetItem::setFlags(Qt::ItemFlags flags)
    /// 
    ///     Sets the flags for the item to the given \a flags. These determine whether
    ///     the item can be selected or modified.  This is often used to disable an item.
    /// 
    ///     \sa flags()
    set_flags(flags: Rute::ItemFlags),
    text(column: i32) -> String,
    set_text(column: i32, text: String),
    icon(column: i32) -> Icon,
    set_icon(column: i32, icon: &IconType),
    status_tip(column: i32) -> String,
    set_status_tip(column: i32, status_tip: String),
    tool_tip(column: i32) -> String,
    set_tool_tip(column: i32, tool_tip: String),
    whats_this(column: i32) -> String,
    set_whats_this(column: i32, whats_this: String),
    font(column: i32) -> Font,
    set_font(column: i32, font: &FontType),
    text_alignment(column: i32) -> i32,
    set_text_alignment(column: i32, alignment: i32),
    background_color(column: i32) -> Color,
    set_background_color(column: i32, color: &ColorType),
    background(column: i32) -> Brush,
    set_background(column: i32, brush: &BrushType),
    text_color(column: i32) -> Color,
    set_text_color(column: i32, color: &ColorType),
    foreground(column: i32) -> Brush,
    set_foreground(column: i32, brush: &BrushType),
    check_state(column: i32) -> Rute::CheckState,
    set_check_state(column: i32, state: Rute::CheckState),
    size_hint(column: i32) -> Size,
    set_size_hint(column: i32, size: &SizeType),
    ///     Returns the value for the item's \a column and \a role.
    [event] data(column: i32, role: i32) -> Variant,
    ///     Sets the value for the item's \a column and \a role to the given
    ///     \a value.
    /// 
    ///     The \a role describes the type of data specified by \a value, and is defined by
    ///     the Qt::ItemDataRole enum.
    /// 
    ///     \note The default implementation treats Qt::EditRole and Qt::DisplayRole as
    ///     referring to the same data.
    [event] set_data(column: i32, role: i32, value: &VariantType),
    ///     Reads the item from stream \a in. This only reads data into a single item.
    /// 
    ///     \sa write()
    [event] read(in: &DataStreamType),
    ///     Writes the item to stream \a out. This only writes data from one single item.
    /// 
    ///     \sa read()
    [event] write(out: &DataStreamType),
    parent() -> TreeWidgetItem?,
    child(index: i32) -> TreeWidgetItem?,
    child_count() -> i32,
    column_count() -> i32,
    index_of_child(child: *TreeWidgetItemType) -> i32,
    ///   Appends the \a child item to the list of children.
    /// 
    ///   \sa insertChild(), takeChild()
    add_child(child: *TreeWidgetItemType),
    ///   Inserts the \a child item at \a index in the list of children.
    /// 
    ///   If the child has already been inserted somewhere else it won't be inserted again.
    insert_child(index: i32, child: *TreeWidgetItemType),
    ///   Removes the given item indicated by \a child.
    ///   The removed item will not be deleted.
    remove_child(child: *TreeWidgetItemType),
    ///   Removes the item at \a index and returns it, otherwise return 0.
    take_child(index: i32) -> TreeWidgetItem?,
    ///   \since 4.1
    /// 
    ///   Appends the given list of \a children to the item.
    /// 
    ///   \sa insertChildren(), takeChildren()
    add_children(children: [*TreeWidgetItemType]),
    ///   \since 4.1
    /// 
    ///   Inserts the given list of \a children into the list of the item children at \a index .
    /// 
    ///   Children that have already been inserted somewhere else won't be inserted.
    insert_children(index: i32, children: [*TreeWidgetItemType]),
    ///   \since 4.1
    /// 
    ///   Removes the list of children and returns it, otherwise returns an empty list.
    take_children() -> [TreeWidgetItem?],
    type() -> i32,
    ///   \internal
    /// 
    ///   Sorts the children by the value in the given \a column, in the \a order
    ///   specified. If \a climb is true, the items below each of the children will
    ///   also be sorted.
    sort_children(column: i32, order: Rute::SortOrder),
    ///   \since 4.5
    /// 
    ///   Causes the model associated with this item to emit a
    ///   \l{QAbstractItemModel::dataChanged()}{dataChanged}() signal for this
    ///   item.
    /// 
    ///   You normally only need to call this function if you have subclassed
    ///   QTreeWidgetItem and reimplemented data() and/or setData().
    /// 
    ///   \sa setData()
    emit_data_changed(),
}

// vim: syntax=rust expandtab ts=4 sw=4
