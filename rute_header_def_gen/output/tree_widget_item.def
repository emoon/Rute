/// 
/// Tree widget items are used to hold rows of information for tree widgets.
/// Rows usually contain several columns of data, each of which can contain
/// a text label and an icon.
/// 
/// The QTreeWidgetItem class is a convenience class that replaces the
/// QListViewItem class in Qt 3. It provides an item for use with
/// the QTreeWidget class.
/// 
/// Items are usually constructed with a parent that is either a QTreeWidget
/// (for top-level items) or a QTreeWidgetItem (for items on lower levels of
/// the tree). For example, the following code constructs a top-level item
/// to represent cities of the world, and adds a entry for Oslo as a child
/// item:
/// 
/// Items can be added in a particular order by specifying the item they
/// follow when they are constructed:
/// 
/// Each column in an item can have its own background brush which is set with
/// the setBackground() function. The current background brush can be
/// found with background().
/// The text label for each column can be rendered with its own font and brush.
/// These are specified with the setFont() and setForeground() functions,
/// and read with font() and foreground().
/// 
/// The main difference between top-level items and those in lower levels of
/// the tree is that a top-level item has no parent(). This information
/// can be used to tell the difference between items, and is useful to know
/// when inserting and removing items from the tree.
/// Children of an item can be removed with takeChild() and inserted at a
/// given index in the list of children with the insertChild() function.
/// 
/// By default, items are enabled, selectable, checkable, and can be the source
/// of a drag and drop operation.
/// Each item's flags can be changed by calling setFlags() with the appropriate
/// value (see [Qt::ItemFlags](Qt::ItemFlags)
/// ). Checkable items can be checked and unchecked
/// with the setCheckState() function. The corresponding checkState() function
/// indicates whether the item is currently checked.
/// 
/// # Subclassing
/// 
/// When subclassing QTreeWidgetItem to provide custom items, it is possible to
/// define new types for them so that they can be distinguished from standard
/// items. The constructors for subclasses that require this feature need to
/// call the base class constructor with a new type value equal to or greater
/// than [UserType.](UserType.)
/// 
/// **See also:** [`TreeWidget`]
/// [`TreeWidgetItemIterator`]
/// {Model/View Programming}
/// [`ListWidgetItem`]
/// [`TableWidgetItem`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TreeWidgetItem {
    /// 
    /// Creates a deep copy of the item and of its children.
    [event] clone() -> TreeWidgetItem?,
    /// 
    /// Sets the selected state of the item to *select.*
    /// 
    /// **See also:** [`is_selected()`]
    /// 
    set_selected(select: bool),
    /// 
    /// Returns `true` if the item is selected, otherwise returns `false.`
    /// 
    /// **See also:** [`set_selected()`]
    is_selected() -> bool,
    /// 
    /// Hides the item if *hide* is true, otherwise shows the item.
    /// **Note**: A call to this function has no effect if the item is not currently in a view. In particular,
    /// calling `setHidden(true)` on an item and only then adding it to a view will result in
    /// a visible item.
    /// 
    /// **See also:** [`is_hidden()`]
    set_hidden(hide: bool),
    /// 
    /// Returns `true` if the item is hidden, otherwise returns `false.`
    /// 
    /// **See also:** [`set_hidden()`]
    is_hidden() -> bool,
    /// 
    /// Expands the item if *expand* is true, otherwise collapses the item.
    /// **Warning**: The QTreeWidgetItem must be added to the QTreeWidget before calling this function.
    /// 
    /// **See also:** [`is_expanded()`]
    set_expanded(expand: bool),
    /// 
    /// Returns `true` if the item is expanded, otherwise returns `false.`
    /// 
    /// **See also:** [`set_expanded()`]
    is_expanded() -> bool,
    /// 
    /// Sets the first section to span all columns if *span* is true;
    /// otherwise all item sections are shown.
    /// 
    /// **See also:** [`is_first_column_spanned()`]
    set_first_column_spanned(span: bool),
    /// 
    /// Returns `true` if the item is spanning all the columns in a row; otherwise returns `false.`
    /// 
    /// **See also:** [`set_first_column_spanned()`]
    is_first_column_spanned() -> bool,
    /// 
    /// Disables the item if *disabled* is true; otherwise enables the item.
    /// 
    /// **See also:** [`set_flags()`]
    set_disabled(disabled: bool),
    /// 
    /// Returns `true` if the item is disabled; otherwise returns `false.`
    /// 
    /// **See also:** [`set_flags()`]
    is_disabled() -> bool,
    /// 
    /// Sets the item indicator *policy.* This policy decides when the
    /// tree branch expand/collapse indicator is shown.
    /// The default value is ShowForChildren.
    /// 
    /// **See also:** [`child_indicator_policy()`]
    set_child_indicator_policy(policy: TreeWidgetItem::ChildIndicatorPolicy),
    /// 
    /// Returns the item indicator policy. This policy decides when the
    /// tree branch expand/collapse indicator is shown.
    /// 
    /// **See also:** [`set_child_indicator_policy()`]
    child_indicator_policy() -> TreeWidgetItem::ChildIndicatorPolicy,
    /// 
    /// Returns the flags used to describe the item. These determine whether
    /// the item can be checked, edited, and selected.
    /// 
    /// The default value for flags is
    /// Qt::ItemIsSelectable | Qt::ItemIsUserCheckable | Qt::ItemIsEnabled |
    /// Qt::ItemIsDragEnabled | Qt::ItemIsDropEnabled.
    /// 
    /// **See also:** [`set_flags()`]
    flags() -> Rute::ItemFlags,
    /// 
    /// Sets the flags for the item to the given *flags.* These determine whether
    /// the item can be selected or modified. This is often used to disable an item.
    /// 
    /// **See also:** [`flags()`]
    set_flags(flags: Rute::ItemFlags),
    /// 
    /// Returns the text in the specified *column.*
    /// 
    /// **See also:** [`set_text()`]
    /// 
    /// This function is deprecated. Use foreground() instead.
    /// 
    /// Returns the text alignment for the label in the given *column*
    /// (see [Qt::AlignmentFlag](Qt::AlignmentFlag)
    /// ).
    text(column: i32) -> String,
    /// 
    /// Sets the text to be displayed in the given *column* to the given *text.*
    /// 
    /// **See also:** [`text()`]
    /// [`set_font()`]
    /// [`set_foreground()`]
    /// 
    /// This function is deprecated. Use setForeground() instead.
    /// 
    /// Sets the text alignment for the label in the given *column* to
    /// the *alignment* specified (see [Qt::AlignmentFlag](Qt::AlignmentFlag)
    /// ).
    set_text(column: i32, text: String),
    /// 
    /// Returns the icon that is displayed in the specified *column.*
    /// 
    /// **See also:** [`set_icon()`]
    /// {QAbstractItemView::iconSize}{iconSize}
    icon(column: i32) -> Icon,
    /// 
    /// Sets the icon to be displayed in the given *column* to *icon.*
    /// 
    /// **See also:** [`icon()`]
    /// [`set_text()`]
    /// {QAbstractItemView::iconSize}{iconSize}
    set_icon(column: i32, icon: &IconType),
    /// 
    /// Returns the status tip for the contents of the given *column.*
    /// 
    /// **See also:** [`set_status_tip()`]
    status_tip(column: i32) -> String,
    /// 
    /// Sets the status tip for the given *column* to the given *statusTip.*
    /// QTreeWidget mouse tracking needs to be enabled for this feature to work.
    /// 
    /// **See also:** [`status_tip()`]
    /// [`set_tool_tip()`]
    /// [`set_whats_this()`]
    set_status_tip(column: i32, status_tip: String),
    /// 
    /// Returns the tool tip for the given *column.*
    /// 
    /// **See also:** [`set_tool_tip()`]
    tool_tip(column: i32) -> String,
    /// 
    /// Sets the tooltip for the given *column* to *toolTip.*
    /// 
    /// **See also:** [`tool_tip()`]
    /// [`set_status_tip()`]
    /// [`set_whats_this()`]
    set_tool_tip(column: i32, tool_tip: String),
    /// 
    /// Returns the help for the contents of the given *column.*
    /// 
    /// **See also:** [`set_whats_this()`]
    whats_this(column: i32) -> String,
    /// 
    /// Sets the help for the given *column* to *whatsThis.*
    /// 
    /// **See also:** [`whats_this()`]
    /// [`set_status_tip()`]
    /// [`set_tool_tip()`]
    set_whats_this(column: i32, whats_this: String),
    /// 
    /// Returns the font used to render the text in the specified *column.*
    /// 
    /// **See also:** [`set_font()`]
    font(column: i32) -> Font,
    /// 
    /// Sets the font used to display the text in the given *column* to the given
    /// *font.*
    /// 
    /// **See also:** [`font()`]
    /// [`set_text()`]
    /// [`set_foreground()`]
    set_font(column: i32, font: &FontType),
    /// 
    /// Returns the text alignment for the label in the given *column*
    /// (see [Qt::AlignmentFlag](Qt::AlignmentFlag)
    /// ).
    text_alignment(column: i32) -> i32,
    /// 
    /// Sets the text alignment for the label in the given *column* to
    /// the *alignment* specified (see [Qt::AlignmentFlag](Qt::AlignmentFlag)
    /// ).
    set_text_alignment(column: i32, alignment: i32),
    /// 
    /// This function is deprecated. Use background() instead.
    background_color(column: i32) -> Color,
    /// 
    /// This function is deprecated. Use setBackground() instead.
    set_background_color(column: i32, color: &ColorType),
    /// 
    /// This function is deprecated. Use background() instead.
    /// 
    /// Returns the brush used to render the background of the specified *column.*
    /// 
    /// **See also:** [`foreground()`]
    background(column: i32) -> Brush,
    /// 
    /// This function is deprecated. Use setBackground() instead.
    /// 
    /// Sets the background brush of the label in the given *column* to the
    /// specified *brush.*
    /// 
    /// **See also:** [`set_foreground()`]
    set_background(column: i32, brush: &BrushType),
    /// 
    /// This function is deprecated. Use foreground() instead.
    text_color(column: i32) -> Color,
    /// 
    /// This function is deprecated. Use setForeground() instead.
    set_text_color(column: i32, color: &ColorType),
    /// 
    /// Returns the brush used to render the foreground (e.g. text) of the
    /// specified *column.*
    /// 
    /// **See also:** [`background()`]
    foreground(column: i32) -> Brush,
    /// 
    /// Sets the foreground brush of the label in the given *column* to the
    /// specified *brush.*
    /// 
    /// **See also:** [`set_background()`]
    set_foreground(column: i32, brush: &BrushType),
    /// 
    /// Returns the check state of the label in the given *column.*
    /// 
    /// **See also:** [`t::check_state()`]
    check_state(column: i32) -> Rute::CheckState,
    /// 
    /// Sets the item in the given *column* check state to be *state.*
    /// 
    /// **See also:** [`check_state()`]
    set_check_state(column: i32, state: Rute::CheckState),
    /// 
    /// Returns the size hint set for the tree item in the given
    /// *column* (see [QSize](QSize)
    /// ).
    size_hint(column: i32) -> Size,
    /// 
    /// Sets the size hint for the tree item in the given *column* to be *size.*
    /// If no size hint is set, the item delegate will compute the size hint based
    /// on the item data.
    set_size_hint(column: i32, size: &SizeType),
    /// 
    /// Returns the value for the item's *column* and *role.*
    [event] data(column: i32, role: i32) -> Variant,
    /// 
    /// Sets the value for the item's *column* and *role* to the given
    /// *value.*
    /// 
    /// The *role* describes the type of data specified by *value,* and is defined by
    /// the Qt::ItemDataRole enum.
    /// 
    /// **Note**: The default implementation treats Qt::EditRole and Qt::DisplayRole as
    /// referring to the same data.
    [event] set_data(column: i32, role: i32, value: &VariantType),
    /// 
    /// Reads the item from stream *in.* This only reads data into a single item.
    /// 
    /// **See also:** [`write()`]
    [event] read(in: &DataStreamType),
    /// 
    /// Writes the item to stream *out.* This only writes data from one single item.
    /// 
    /// **See also:** [`read()`]
    [event] write(out: &DataStreamType),
    /// 
    /// Returns the item's parent.
    /// 
    /// **See also:** [`child()`]
    parent() -> TreeWidgetItem?,
    /// 
    /// Returns the item at the given *index* in the list of the item's children.
    /// 
    /// **See also:** [`parent()`]
    /// 
    /// Returns the number of child items.
    /// 
    /// Returns the item indicator policy. This policy decides when the
    /// tree branch expand/collapse indicator is shown.
    /// 
    /// **See also:** [`set_child_indicator_policy()`]
    child(index: i32) -> TreeWidgetItem?,
    /// 
    /// Returns the number of child items.
    child_count() -> i32,
    /// 
    /// Returns the number of columns in the item.
    column_count() -> i32,
    /// 
    /// Returns the index of the given *child* in the item's list of children.
    index_of_child(child: *TreeWidgetItemType) -> i32,
    /// 
    /// Appends the *child* item to the list of children.
    /// 
    /// **See also:** [`insert_child()`]
    /// [`take_child()`]
    /// 
    /// Appends the given list of *children* to the item.
    /// 
    /// **See also:** [`insert_children()`]
    /// [`take_children()`]
    add_child(child: *TreeWidgetItemType),
    /// 
    /// Inserts the *child* item at *index* in the list of children.
    /// 
    /// If the child has already been inserted somewhere else it won't be inserted again.
    /// 
    /// Inserts the given list of *children* into the list of the item children at *index* .
    /// 
    /// Children that have already been inserted somewhere else won't be inserted.
    insert_child(index: i32, child: *TreeWidgetItemType),
    /// 
    /// Removes the given item indicated by *child.*
    /// The removed item will not be deleted.
    remove_child(child: *TreeWidgetItemType),
    /// 
    /// Removes the item at *index* and returns it, otherwise return 0.
    /// 
    /// Removes the list of children and returns it, otherwise returns an empty list.
    take_child(index: i32) -> TreeWidgetItem?,
    /// 
    /// Appends the given list of *children* to the item.
    /// 
    /// **See also:** [`insert_children()`]
    /// [`take_children()`]
    add_children(children: [*TreeWidgetItemType]),
    /// 
    /// Inserts the given list of *children* into the list of the item children at *index* .
    /// 
    /// Children that have already been inserted somewhere else won't be inserted.
    insert_children(index: i32, children: [*TreeWidgetItemType]),
    /// 
    /// Removes the list of children and returns it, otherwise returns an empty list.
    take_children() -> [TreeWidgetItem?],
    /// 
    /// Returns the type passed to the QTreeWidgetItem constructor.
    type() -> i32,
    /// 
    /// Sorts the children of the item using the given *order,*
    /// by the values in the given *column.*
    /// 
    /// **Note**: This function does nothing if the item is not associated with a
    /// QTreeWidget.
    sort_children(column: i32, order: Rute::SortOrder),
    /// 
    /// Causes the model associated with this item to emit a
    /// [dataChanged](QAbstractItemModel::dataChanged())
    /// () signal for this
    /// item.
    /// 
    /// You normally only need to call this function if you have subclassed
    /// QTreeWidgetItem and reimplemented data() and/or setData().
    /// 
    /// **See also:** [`set_data()`]
    emit_data_changed(),
}

[org_name(QTreeWidgetItem)]
enum ItemType {
    /// The default type for tree widget items.
    Type,
    /// The minimum value for custom types. Values below UserType are
    UserType,
}

[org_name(QTreeWidgetItem)]
enum ChildIndicatorPolicy {
    /// The controls for expanding and collapsing will be shown for this item even if there are no children.
    ShowIndicator,
    /// The controls for expanding and collapsing will never be shown even if there are children.  If the node is forced open the user will not be able to expand or collapse the item.
    DontShowIndicator,
    /// The controls for expanding and collapsing will be shown if the item contains children.
    DontShowIndicatorWhenChildless,
}

// vim: syntax=rust expandtab ts=4 sw=4
