///     \class QOpenGLVertexArrayObject
///     \brief The QOpenGLVertexArrayObject class wraps an OpenGL Vertex Array Object.
///     \inmodule QtGui
///     \since 5.1
///     \ingroup painting-3D
/// 
///     A Vertex Array Object (VAO) is an OpenGL container object that encapsulates
///     the state needed to specify per-vertex attribute data to the OpenGL pipeline.
///     To put it another way, a VAO remembers the states of buffer objects (see
///     QOpenGLBuffer) and their associated state (e.g. vertex attribute divisors).
///     This allows a very easy and efficient method of switching between OpenGL buffer
///     states for rendering different "objects" in a scene. The QOpenGLVertexArrayObject
///     class is a thin wrapper around an OpenGL VAO.
/// 
///     For the desktop, VAOs are supported as a core feature in OpenGL 3.0 or newer and by the
///     GL_ARB_vertex_array_object for older versions. On OpenGL ES 2, VAOs are provided by
///     the optional GL_OES_vertex_array_object extension. You can check the version of
///     OpenGL with QOpenGLContext::surfaceFormat() and check for the presence of extensions
///     with QOpenGLContext::hasExtension().
/// 
///     As with the other Qt OpenGL classes, QOpenGLVertexArrayObject has a create()
///     function to create the underlying OpenGL object. This is to allow the developer to
///     ensure that there is a valid current OpenGL context at the time.
/// 
///     Once you have successfully created a VAO the typical usage pattern is:
/// 
///     \list
///         \li In scene initialization function, for each visual object:
///         \list
///             \li Bind the VAO
///             \li Set vertex data state for this visual object (vertices, normals, texture coordinates etc.)
///             \li Unbind (release()) the VAO
///         \endlist
///         \li In render function, for each visual object:
///         \list
///             \li Bind the VAO (and shader program if needed)
///             \li Call a glDraw*() function
///             \li Unbind (release()) the VAO
///         \endlist
///     \endlist
/// 
///     The act of binding the VAO in the render function has the effect of restoring
///     all of the vertex data state setup in the initialization phase. In this way we can
///     set a great deal of state when setting up a VAO and efficiently switch between
///     state sets of objects to be rendered. Using VAOs also allows the OpenGL driver
///     to amortise the validation checks of the vertex data.
/// 
///     \note Vertex Array Objects, like all other OpenGL container objects, are specific
///     to the context for which they were created and cannot be shared amongst a
///     context group.
/// 
///     \sa QOpenGLVertexArrayObject::Binder, QOpenGLBuffer
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct OpenGLVertexArrayObject : Object {
    ///     Creates the underlying OpenGL vertex array object. There must be a valid OpenGL context
    ///     that supports vertex array objects current for this function to succeed.
    /// 
    ///     Returns \c true if the OpenGL vertex array object was successfully created.
    /// 
    ///     When the return value is \c false, vertex array object support is not available. This
    ///     is not an error: on systems with OpenGL 2.x or OpenGL ES 2.0 vertex array objects may
    ///     not be supported. The application is free to continue execution in this case, but it
    ///     then has to be prepared to operate in a VAO-less manner too. This means that instead
    ///     of merely calling bind(), the value of isCreated() must be checked and the vertex
    ///     arrays has to be initialized in the traditional way when there is no vertex array
    ///     object present.
    /// 
    ///     \sa isCreated()
    create() -> bool,
    ///     Returns \c true is the underlying OpenGL vertex array object has been created. If this
    ///     returns \c true and the associated OpenGL context is current, then you are able to bind()
    ///     this object.
    is_created() -> bool,
    ///     Returns the id of the underlying OpenGL vertex array object.
    object_id() -> i32,
    ///     Binds this vertex array object to the OpenGL binding point. From this point on
    ///     and until release() is called or another vertex array object is bound, any
    ///     modifications made to vertex data state are stored inside this vertex array object.
    /// 
    ///     If another vertex array object is then bound you can later restore the set of
    ///     state associated with this object by calling bind() on this object once again.
    ///     This allows efficient changes between vertex data states in rendering functions.
    bind(),
    ///     Unbinds this vertex array object by binding the default vertex array object (id = 0).
    release(),
}

// vim: syntax=rust expandtab ts=4 sw=4
