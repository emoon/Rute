
struct RawFont {
    swap(&RawFontType other),
    is_valid() -> bool,
    family_name() -> String,
    style_name() -> String,
    style() -> Font::Style,
    weight() -> i32,
    advances_for_glyph_indexes(&Vector<quint32>Type glyph_indexes) -> Vector<QPointF>Type,
    advances_for_glyph_indexes(&Vector<quint32>Type glyph_indexes, LayoutFlags layout_flags) -> Vector<QPointF>Type,
    glyph_indexes_for_chars(&CharType chars, i32 num_chars, &u32 glyph_indexes, &i32 num_glyphs) -> bool,
    advances_for_glyph_indexes(&u32 glyph_indexes, &PointFType advances, i32 num_glyphs) -> bool,
    advances_for_glyph_indexes(&u32 glyph_indexes, &PointFType advances, i32 num_glyphs, LayoutFlags layout_flags) -> bool,
    alpha_map_for_glyph(u32 glyph_index, RawFont::AntialiasingType antialiasing_type, &TransformType transform) -> ImageType,
    path_for_glyph(u32 glyph_index) -> PainterPathType,
    bounding_rect(u32 glyph_index) -> RectFType,
    set_pixel_size(f32 pixel_size),
    pixel_size() -> f32,
    hinting_preference() -> Font::HintingPreference,
    ascent() -> f32,
    cap_height() -> f32,
    descent() -> f32,
    leading() -> f32,
    x_height() -> f32,
    average_char_width() -> f32,
    max_char_width() -> f32,
    line_thickness() -> f32,
    underline_position() -> f32,
    units_per_em() -> f32,
    load_from_file(String file_name, f32 pixel_size, Font::HintingPreference hinting_preference),
    load_from_data(&ByteArrayType font_data, f32 pixel_size, Font::HintingPreference hinting_preference),
    supports_character(uint ucs4) -> bool,
    supports_character(CharType character) -> bool,
    supported_writing_systems() -> List<QFontDatabase::WritingSystem>,
    font_table(&char tag_name) -> ByteArrayType,
    from_font(&FontType font, FontDatabase::WritingSystem writing_system) -> RawFontType,
}

// vim: syntax=rust expandtab ts=4 sw=4
