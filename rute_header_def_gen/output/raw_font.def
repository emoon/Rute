enum AntialiasingType {
    PixelAntialiasing,
    SubPixelAntialiasing,
}

enum LayoutFlag {
    SeparateAdvances,
    KernedAdvances,
    UseDesignMetrics,
}


struct RawFont {
    swap(other: &RawFontType),
    is_valid() -> bool,
    family_name() -> String,
    style_name() -> String,
    style() -> Font::Style,
    weight() -> i32,
    advances_for_glyph_indexes(glyph_indexes: [u32]) -> [PointF],
    advances_for_glyph_indexes(glyph_indexes: [u32], layout_flags: LayoutFlags) -> [PointF],
    glyph_indexes_for_chars(chars: &CharType, num_chars: i32, glyph_indexes: &u32, num_glyphs: &i32) -> bool,
    advances_for_glyph_indexes(glyph_indexes: &u32, advances: &PointFType, num_glyphs: i32) -> bool,
    advances_for_glyph_indexes(glyph_indexes: &u32, advances: &PointFType, num_glyphs: i32, layout_flags: LayoutFlags) -> bool,
    alpha_map_for_glyph(glyph_index: u32, antialiasing_type: RawFont::AntialiasingType, transform: &TransformType) -> Image,
    path_for_glyph(glyph_index: u32) -> PainterPath,
    bounding_rect(glyph_index: u32) -> RectF,
    set_pixel_size(pixel_size: f32),
    pixel_size() -> f32,
    hinting_preference() -> Font::HintingPreference,
    ascent() -> f32,
    cap_height() -> f32,
    descent() -> f32,
    leading() -> f32,
    x_height() -> f32,
    average_char_width() -> f32,
    max_char_width() -> f32,
    line_thickness() -> f32,
    underline_position() -> f32,
    units_per_em() -> f32,
    load_from_file(file_name: String, pixel_size: f32, hinting_preference: Font::HintingPreference),
    load_from_data(font_data: &ByteArrayType, pixel_size: f32, hinting_preference: Font::HintingPreference),
    supports_character(ucs4: uint) -> bool,
    supports_character(character: CharType) -> bool,
    supported_writing_systems() -> List<QFontDatabase::WritingSystem>,
    font_table(tag_name: &char) -> ByteArray,
    [static] from_font(font: &FontType, writing_system: FontDatabase::WritingSystem) -> RawFont,
}

// vim: syntax=rust expandtab ts=4 sw=4
