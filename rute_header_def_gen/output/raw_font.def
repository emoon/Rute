/// 
/// **Note**: QRawFont is a low level class. For most purposes QFont is a more appropriate class.
/// 
/// Most commonly, when presenting text in a user interface, the exact fonts used
/// to render the characters is to some extent unknown. This can be the case for several
/// reasons: For instance, the actual, physical fonts present on the target system could be
/// unexpected to the developers, or the text could contain user selected styles, sizes or
/// writing systems that are not supported by font chosen in the code.
/// 
/// Therefore, Qt's QFont class really represents a query for fonts. When text is interpreted,
/// Qt will do its best to match the text to the query, but depending on the support, different
/// fonts can be used behind the scenes.
/// 
/// For most use cases, this is both expected and necessary, as it minimizes the possibility of
/// text in the user interface being undisplayable. In some cases, however, more direct control
/// over the process might be useful. It is for these use cases the QRawFont class exists.
/// 
/// A QRawFont object represents a single, physical instance of a given font in a given pixel size.
/// I.e. in the typical case it represents a set of TrueType or OpenType font tables and uses a
/// user specified pixel size to convert metrics into logical pixel units. It can be used in
/// combination with the QGlyphRun class to draw specific glyph indexes at specific positions, and
/// also have accessors to some relevant data in the physical font.
/// 
/// QRawFont only provides support for the main font technologies: GDI and DirectWrite on Windows
/// platforms, FreeType on Linux platforms and CoreText on MacOS . For other
/// font back-ends, the APIs will be disabled.
/// 
/// QRawFont can be constructed in a number of ways:
/// * It can be constructed by calling QTextLayout::glyphs() or QTextFragment::glyphs(). The returned QGlyphs objects will contain QRawFont objects which represent the actual fonts used to render each portion of the text.
/// * It can be constructed by passing a QFont object to QRawFont::fromFont(). The function will return a QRawFont object representing the font that will be selected as response to the QFont query and the selected writing system.
/// * It can be constructed by passing a file name or QByteArray directly to the QRawFont constructor, or by calling loadFromFile() or loadFromData(). In this case, the font will not be registered in QFontDatabase, and it will not be available as part of regular font selection.
/// 
/// QRawFont is considered local to the thread in which it is constructed (either using a
/// constructor, or by calling loadFromData() or loadFromFile()). The QRawFont cannot be moved to a
/// different thread, but will have to be recreated in the thread in question.
/// 
/// **Note**: For the requirement of caching glyph indexes and font selections for static text to avoid
/// reshaping and relayouting in the inner loop of an application, a better choice is the QStaticText
/// class, since it optimizes the memory cost of the cache and also provides the possibility of paint
/// engine specific caches for an additional speed-up.
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct RawFont {
    /// 
    /// Swaps this raw font with *other.* This function is very fast and
    /// never fails.
    swap(other: &RawFontType),
    /// 
    /// Returns `true` if the QRawFont is valid and false otherwise.
    is_valid() -> bool,
    /// 
    /// Returns the family name of this QRawFont.
    family_name() -> String,
    /// 
    /// Returns the style name of this QRawFont.
    /// 
    /// **See also:** [`Font::style_name`]
    style_name() -> String,
    /// 
    /// Returns the style name of this QRawFont.
    /// 
    /// **See also:** [`Font::style_name`]
    /// 
    /// Returns the style of this QRawFont.
    /// 
    /// **See also:** [`Font::style`]
    style() -> Font::Style,
    /// 
    /// Returns the weight of this QRawFont.
    /// 
    /// **See also:** [`Font::weight`]
    weight() -> i32,
    /// 
    /// Returns the QRawFont's advances for each of the *glyphIndexes* in pixel units. The advances
    /// give the distance from the position of a given glyph to where the next glyph should be drawn
    /// to make it appear as if the two glyphs are unspaced. How the advances are calculated is
    /// controlled by *layoutFlags.*
    /// 
    /// **See also:** [`TextLine::horizontal_advance`]
    /// [`FontMetricsF::width`]
    /// 
    /// **Overloads**
    /// Returns the QRawFont's advances for each of the *glyphIndexes* in pixel units. The advances
    /// give the distance from the position of a given glyph to where the next glyph should be drawn
    /// to make it appear as if the two glyphs are unspaced. The advance of each glyph is calculated
    /// separately.
    /// 
    /// **See also:** [`TextLine::horizontal_advance`]
    /// [`FontMetricsF::width`]
    /// 
    /// Returns the QRawFont's advances for each of the *glyphIndexes* in pixel units. The advances
    /// give the distance from the position of a given glyph to where the next glyph should be drawn
    /// to make it appear as if the two glyphs are unspaced. The glyph indexes are given with the
    /// array *glyphIndexes* while the results are returned through *advances,* both of them must
    /// have *numGlyphs* elements. How the advances are calculated is controlled by *layoutFlags.*
    /// 
    /// **See also:** [`TextLine::horizontal_advance`]
    /// [`FontMetricsF::width`]
    /// 
    /// **Overloads**
    /// Returns the QRawFont's advances for each of the *glyphIndexes* in pixel units. The advances
    /// give the distance from the position of a given glyph to where the next glyph should be drawn
    /// to make it appear as if the two glyphs are unspaced. The glyph indexes are given with the
    /// array *glyphIndexes* while the results are returned through *advances,* both of them must
    /// have *numGlyphs* elements. The advance of each glyph is calculated separately
    /// 
    /// **See also:** [`TextLine::horizontal_advance`]
    /// [`FontMetricsF::width`]
    advances_for_glyph_indexes(glyph_indexes: [u32]) -> [PointF],
    /// 
    /// Returns the QRawFont's advances for each of the *glyphIndexes* in pixel units. The advances
    /// give the distance from the position of a given glyph to where the next glyph should be drawn
    /// to make it appear as if the two glyphs are unspaced. How the advances are calculated is
    /// controlled by *layoutFlags.*
    /// 
    /// **See also:** [`TextLine::horizontal_advance`]
    /// [`FontMetricsF::width`]
    /// 
    /// **Overloads**
    /// Returns the QRawFont's advances for each of the *glyphIndexes* in pixel units. The advances
    /// give the distance from the position of a given glyph to where the next glyph should be drawn
    /// to make it appear as if the two glyphs are unspaced. The advance of each glyph is calculated
    /// separately.
    /// 
    /// **See also:** [`TextLine::horizontal_advance`]
    /// [`FontMetricsF::width`]
    /// 
    /// Returns the QRawFont's advances for each of the *glyphIndexes* in pixel units. The advances
    /// give the distance from the position of a given glyph to where the next glyph should be drawn
    /// to make it appear as if the two glyphs are unspaced. The glyph indexes are given with the
    /// array *glyphIndexes* while the results are returned through *advances,* both of them must
    /// have *numGlyphs* elements. How the advances are calculated is controlled by *layoutFlags.*
    /// 
    /// **See also:** [`TextLine::horizontal_advance`]
    /// [`FontMetricsF::width`]
    /// 
    /// **Overloads**
    /// Returns the QRawFont's advances for each of the *glyphIndexes* in pixel units. The advances
    /// give the distance from the position of a given glyph to where the next glyph should be drawn
    /// to make it appear as if the two glyphs are unspaced. The glyph indexes are given with the
    /// array *glyphIndexes* while the results are returned through *advances,* both of them must
    /// have *numGlyphs* elements. The advance of each glyph is calculated separately
    /// 
    /// **See also:** [`TextLine::horizontal_advance`]
    /// [`FontMetricsF::width`]
    [org_name(advancesForGlyphIndexes)]
    advances_for_glyph_indexes_2(glyph_indexes: [u32], layout_flags: RawFont::LayoutFlags) -> [PointF],
    /// 
    /// Converts a string of unicode points to glyph indexes using the CMAP table in the
    /// underlying font. The function works like glyphIndexesForString() except it take
    /// an array ( *chars),* the results will be returned though *glyphIndexes* array
    /// and number of glyphs will be set in *numGlyphs.* The size of *glyphIndexes* array
    /// must be at least *numChars,* if that's still not enough, this function will return
    /// false, then you can resize *glyphIndexes* from the size returned in *numGlyphs.*
    /// 
    /// **See also:** [`glyph_indexes_for_string()`]
    /// [`advances_for_glyph_indexes()`]
    /// [`GlyphRun`]
    /// [`TextLayout::glyph_runs`]
    /// [`TextFragment::glyph_runs`]
    glyph_indexes_for_chars(chars: *CharType, num_chars: i32, glyph_indexes: *u32, num_glyphs: *i32) -> bool,
    /// 
    /// Returns the QRawFont's advances for each of the *glyphIndexes* in pixel units. The advances
    /// give the distance from the position of a given glyph to where the next glyph should be drawn
    /// to make it appear as if the two glyphs are unspaced. How the advances are calculated is
    /// controlled by *layoutFlags.*
    /// 
    /// **See also:** [`TextLine::horizontal_advance`]
    /// [`FontMetricsF::width`]
    /// 
    /// **Overloads**
    /// Returns the QRawFont's advances for each of the *glyphIndexes* in pixel units. The advances
    /// give the distance from the position of a given glyph to where the next glyph should be drawn
    /// to make it appear as if the two glyphs are unspaced. The advance of each glyph is calculated
    /// separately.
    /// 
    /// **See also:** [`TextLine::horizontal_advance`]
    /// [`FontMetricsF::width`]
    /// 
    /// Returns the QRawFont's advances for each of the *glyphIndexes* in pixel units. The advances
    /// give the distance from the position of a given glyph to where the next glyph should be drawn
    /// to make it appear as if the two glyphs are unspaced. The glyph indexes are given with the
    /// array *glyphIndexes* while the results are returned through *advances,* both of them must
    /// have *numGlyphs* elements. How the advances are calculated is controlled by *layoutFlags.*
    /// 
    /// **See also:** [`TextLine::horizontal_advance`]
    /// [`FontMetricsF::width`]
    /// 
    /// **Overloads**
    /// Returns the QRawFont's advances for each of the *glyphIndexes* in pixel units. The advances
    /// give the distance from the position of a given glyph to where the next glyph should be drawn
    /// to make it appear as if the two glyphs are unspaced. The glyph indexes are given with the
    /// array *glyphIndexes* while the results are returned through *advances,* both of them must
    /// have *numGlyphs* elements. The advance of each glyph is calculated separately
    /// 
    /// **See also:** [`TextLine::horizontal_advance`]
    /// [`FontMetricsF::width`]
    [org_name(advancesForGlyphIndexes)]
    advances_for_glyph_indexes_3(glyph_indexes: *u32, advances: *PointFType, num_glyphs: i32) -> bool,
    /// 
    /// Returns the QRawFont's advances for each of the *glyphIndexes* in pixel units. The advances
    /// give the distance from the position of a given glyph to where the next glyph should be drawn
    /// to make it appear as if the two glyphs are unspaced. How the advances are calculated is
    /// controlled by *layoutFlags.*
    /// 
    /// **See also:** [`TextLine::horizontal_advance`]
    /// [`FontMetricsF::width`]
    /// 
    /// **Overloads**
    /// Returns the QRawFont's advances for each of the *glyphIndexes* in pixel units. The advances
    /// give the distance from the position of a given glyph to where the next glyph should be drawn
    /// to make it appear as if the two glyphs are unspaced. The advance of each glyph is calculated
    /// separately.
    /// 
    /// **See also:** [`TextLine::horizontal_advance`]
    /// [`FontMetricsF::width`]
    /// 
    /// Returns the QRawFont's advances for each of the *glyphIndexes* in pixel units. The advances
    /// give the distance from the position of a given glyph to where the next glyph should be drawn
    /// to make it appear as if the two glyphs are unspaced. The glyph indexes are given with the
    /// array *glyphIndexes* while the results are returned through *advances,* both of them must
    /// have *numGlyphs* elements. How the advances are calculated is controlled by *layoutFlags.*
    /// 
    /// **See also:** [`TextLine::horizontal_advance`]
    /// [`FontMetricsF::width`]
    /// 
    /// **Overloads**
    /// Returns the QRawFont's advances for each of the *glyphIndexes* in pixel units. The advances
    /// give the distance from the position of a given glyph to where the next glyph should be drawn
    /// to make it appear as if the two glyphs are unspaced. The glyph indexes are given with the
    /// array *glyphIndexes* while the results are returned through *advances,* both of them must
    /// have *numGlyphs* elements. The advance of each glyph is calculated separately
    /// 
    /// **See also:** [`TextLine::horizontal_advance`]
    /// [`FontMetricsF::width`]
    [org_name(advancesForGlyphIndexes)]
    advances_for_glyph_indexes_4(glyph_indexes: *u32, advances: *PointFType, num_glyphs: i32, layout_flags: RawFont::LayoutFlags) -> bool,
    /// 
    /// This function returns a rasterized image of the glyph at the given
    /// *glyphIndex* in the underlying font, using the *transform* specified.
    /// If the QRawFont is not valid, this function will return an invalid QImage.
    /// 
    /// If the font is a color font, then the resulting image will contain the rendered
    /// glyph at the current pixel size. In this case, the *antialiasingType* will be
    /// ignored.
    /// 
    /// Otherwise, if *antialiasingType* is set to QRawFont::SubPixelAntialiasing, then the resulting image
    /// will be in QImage::Format_RGB32 and the RGB values of each pixel will represent the subpixel opacities
    /// of the pixel in the rasterization of the glyph. Otherwise, the image will be in the format of
    /// QImage::Format_Indexed8 and each pixel will contain the opacity of the pixel in the
    /// rasterization.
    /// 
    /// **See also:** [`path_for_glyph()`]
    /// [`Painter::draw_glyph_run`]
    alpha_map_for_glyph(glyph_index: u32, antialiasing_type: RawFont::AntialiasingType, transform: &TransformType) -> Image,
    /// 
    /// This function returns the shape of the glyph at a given *glyphIndex* in the underlying font
    /// if the QRawFont is valid. Otherwise, it returns an empty QPainterPath.
    /// 
    /// The returned glyph will always be unhinted.
    /// 
    /// **See also:** [`alpha_map_for_glyph()`]
    /// [`PainterPath::add_text`]
    path_for_glyph(glyph_index: u32) -> PainterPath,
    /// 
    /// Returns the smallest rectangle containing the glyph with the given *glyphIndex.*
    /// 
    bounding_rect(glyph_index: u32) -> RectF,
    /// 
    /// Sets the pixel size with which this font should be rendered to *pixelSize.*
    set_pixel_size(pixel_size: f32),
    /// 
    /// Returns the pixel size set for this QRawFont. The pixel size affects how glyphs are
    /// rasterized, the size of glyphs returned by pathForGlyph(), and is used to convert
    /// internal metrics from design units to logical pixel units.
    /// 
    /// **See also:** [`set_pixel_size()`]
    pixel_size() -> f32,
    /// 
    /// Returns the hinting preference used to construct this QRawFont.
    /// 
    /// **See also:** [`Font::hinting_preference`]
    hinting_preference() -> Font::HintingPreference,
    /// 
    /// Returns the ascent of this QRawFont in pixel units.
    /// 
    /// The ascent of a font is the distance from the baseline to the
    /// highest position characters extend to. In practice, some font
    /// designers break this rule, e.g. when they put more than one accent
    /// on top of a character, or to accommodate an unusual character in
    /// an exotic language, so it is possible (though rare) that this
    /// value will be too small.
    /// 
    /// **See also:** [`FontMetricsF::ascent`]
    ascent() -> f32,
    /// 
    /// Returns the cap height of this QRawFont in pixel units.
    /// 
    /// The cap height of a font is the height of a capital letter above
    /// the baseline. It specifically is the height of capital letters
    /// that are flat - such as H or I - as opposed to round letters such
    /// as O, or pointed letters like A, both of which may display overshoot.
    /// 
    /// **See also:** [`FontMetricsF::cap_height`]
    cap_height() -> f32,
    /// 
    /// Returns the descent of this QRawFont in pixel units.
    /// 
    /// The descent is the distance from the base line to the lowest point
    /// characters extend to. In practice, some font designers break this rule,
    /// e.g. to accommodate an unusual character in an exotic language, so
    /// it is possible (though rare) that this value will be too small.
    /// 
    /// **See also:** [`FontMetricsF::descent`]
    descent() -> f32,
    /// 
    /// Returns the leading of this QRawFont in pixel units.
    /// 
    /// This is the natural inter-line spacing.
    /// 
    /// **See also:** [`FontMetricsF::leading`]
    leading() -> f32,
    /// 
    /// Returns the xHeight of this QRawFont in pixel units.
    /// 
    /// This is often but not always the same as the height of the character 'x'.
    /// 
    /// **See also:** [`FontMetricsF::x_height`]
    x_height() -> f32,
    /// 
    /// Returns the average character width of this QRawFont in pixel units.
    /// 
    /// **See also:** [`FontMetricsF::average_char_width`]
    average_char_width() -> f32,
    /// 
    /// Returns the width of the widest character in the font.
    /// 
    /// **See also:** [`FontMetricsF::max_width`]
    max_char_width() -> f32,
    /// 
    /// Returns the thickness for drawing lines (underline, overline, etc.)
    /// along with text drawn in this font.
    line_thickness() -> f32,
    /// 
    /// Returns the position from baseline for drawing underlines below the text
    /// rendered with this font.
    underline_position() -> f32,
    /// 
    /// Returns the number of design units define the width and height of the em square
    /// for this QRawFont. This value is used together with the pixel size when converting design metrics
    /// to pixel units, as the internal metrics are specified in design units and the pixel size gives
    /// the size of 1 em in pixels.
    /// 
    /// **See also:** [`pixel_size()`]
    /// [`set_pixel_size()`]
    units_per_em() -> f32,
    /// 
    /// Replaces the current QRawFont with the contents of the file referenced
    /// by *fileName* for the size (in pixels) given by *pixelSize,* and using the
    /// hinting preference specified by *hintingPreference.*
    /// 
    /// The file must reference a TrueType or OpenType font.
    /// 
    /// **See also:** [`load_from_data()`]
    load_from_file(file_name: String, pixel_size: f32, hinting_preference: Font::HintingPreference),
    /// 
    /// Replaces the current QRawFont with the font contained in the supplied
    /// *fontData* for the size (in pixels) given by *pixelSize,* and using the
    /// hinting preference specified by *hintingPreference.*
    /// 
    /// The *fontData* must contain a TrueType or OpenType font.
    /// 
    /// **See also:** [`load_from_file()`]
    load_from_data(font_data: &ByteArrayType, pixel_size: f32, hinting_preference: Font::HintingPreference),
    /// 
    /// Returns `true` if the font has a glyph that corresponds to the given *character.*
    /// 
    /// **See also:** [`supported_writing_systems()`]
    /// 
    /// **Overloads**
    /// Returns `true` if the font has a glyph that corresponds to the UCS-4 encoded character *ucs4.*
    /// 
    /// **See also:** [`supported_writing_systems()`]
    supports_character(ucs4: uint) -> bool,
    /// 
    /// Returns `true` if the font has a glyph that corresponds to the given *character.*
    /// 
    /// **See also:** [`supported_writing_systems()`]
    /// 
    /// **Overloads**
    /// Returns `true` if the font has a glyph that corresponds to the UCS-4 encoded character *ucs4.*
    /// 
    /// **See also:** [`supported_writing_systems()`]
    [org_name(supportsCharacter)]
    supports_character_2(character: CharType) -> bool,
    /// 
    /// Returns a list of writing systems supported by the font according to designer supplied
    /// information in the font file. Please note that this does not guarantee support for a
    /// specific unicode point in the font. You can use the supportsCharacter() to check support
    /// for a single, specific character.
    /// 
    /// **Note**: The list is determined based on the unicode ranges and codepage ranges set in the font's
    /// OS/2 table and requires such a table to be present in the underlying font file.
    /// 
    /// **See also:** [`supports_character()`]
    supported_writing_systems() -> List<QFontDatabase::WritingSystem>,
    /// 
    /// Retrieves the sfnt table named *tagName* from the underlying physical font, or an empty
    /// byte array if no such table was found. The returned font table's byte order is Big Endian, like
    /// the sfnt format specifies. The *tagName* must be four characters long and should be formatted
    /// in the default endianness of the current platform.
    font_table(tag_name: *char) -> ByteArray,
    /// 
    /// Fetches the physical representation based on a *font* query. The physical font returned is
    /// the font that will be preferred by Qt in order to display text in the selected *writingSystem.*
    /// 
    /// **Warning**: This function is potentially expensive and should not be called in performance
    /// sensitive code.
    [static] from_font(font: &FontType, writing_system: FontDatabase::WritingSystem) -> RawFont,
}

[org_name(QRawFont)]
enum AntialiasingType {
    /// Will rasterize by measuring the coverage of the shape on whole pixels.
    PixelAntialiasing,
    /// Will rasterize by measuring the coverage of each subpixel,
    SubPixelAntialiasing,
}

[org_name(QRawFont)]
enum LayoutFlag {
    /// Will calculate the advance for each glyph separately.
    SeparateAdvances,
    /// Will apply kerning between adjacent glyphs. Note that OpenType GPOS based
    KernedAdvances,
    /// Use design metrics instead of hinted metrics adjusted to the resolution
    UseDesignMetrics,
}

// vim: syntax=rust expandtab ts=4 sw=4
