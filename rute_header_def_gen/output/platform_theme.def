/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct PlatformTheme {
    [event] create_platform_menu_item() -> PlatformMenuItem?,
    [event] create_platform_menu() -> PlatformMenu?,
    [event] create_platform_menu_bar() -> PlatformMenuBar?,
    [event] show_platform_menu_bar(),
    [event] use_platform_native_dialog(type: PlatformTheme::DialogType) -> bool,
    [event] create_platform_dialog_helper(type: PlatformTheme::DialogType) -> PlatformDialogHelper?,
    /// 
    /// Factory function for QSystemTrayIcon. This function will return 0 if the platform
    /// integration does not support creating any system tray icon.
    [event] create_platform_system_tray_icon() -> PlatformSystemTrayIcon?,
    [event] palette(type: PlatformTheme::Palette) -> Palette?,
    [event] font(type: PlatformTheme::Font) -> Font?,
    [event] theme_hint(hint: PlatformTheme::ThemeHint) -> Variant,
    [event] standard_pixmap(sp: PlatformTheme::StandardPixmap, size: &SizeFType) -> Pixmap,
    /// 
    /// *fileInfo,* observing *iconOptions.*
    /// 
    /// This function is queried by QFileIconProvider and similar classes to obtain
    /// an icon for a file. If it does not return a non-null icon, fileIconPixmap()
    /// is queried for a specific size.
    /// 
    [event] file_icon(file_info: &FileInfoType, icon_options: PlatformTheme::IconOptions) -> Icon,
    /// 
    /// Factory function for the QIconEngine used by QIcon::fromTheme(). By default this
    /// function returns a QIconLoaderEngine, but subclasses can reimplement it to
    /// provide their own.
    /// 
    /// It is especially useful to benefit from some platform specific facilities or
    /// optimizations like an inter-process cache in systems mostly built with Qt.
    /// 
    [event] create_icon_engine(icon_name: String) -> IconEngine?,
    /// 
    /// Returns the key sequence that should be used for a standard action.
    /// 
    [event] key_bindings(key: KeySequence::StandardKey) -> [KeySequence],
    /// 
    /// Returns the text of a standard *button.*
    /// 
    /// **See also:** [`PlatformDialogHelper::standard_button()`]
    [event] standard_button_text(button: i32) -> String,
    /// 
    /// Returns the mnemonic that should be used for a standard *button.*
    /// 
    /// **See also:** [`PlatformDialogHelper::standard_button()`]
    [event] standard_button_shortcut(button: i32) -> KeySequence,
    [static] default_theme_hint(hint: PlatformTheme::ThemeHint) -> Variant,
    [static] default_standard_button_text(button: i32) -> String,
    [static] remove_mnemonics(original: String) -> String,
}

[org_name(QPlatformTheme)]
enum ThemeHint {
    /// (int) Cursor flash time in ms, overriding
    CursorFlashTime,
    /// (int) Keyboard input interval in ms, overriding
    KeyboardInputInterval,
    /// (int) Mouse double click interval in ms,
    MouseDoubleClickInterval,
    /// (int) Start drag distance,
    StartDragDistance,
    /// (int) Start drag time in ms,
    StartDragTime,
    /// (int) Keyboard auto repeat rate,
    KeyboardAutoRepeatRate,
    /// (int) Pass word mask delay in ms,
    PasswordMaskDelay,
    /// (int) Velocity of a drag,
    StartDragVelocity,
    /// (int) Determines the width of the text cursor.
    TextCursorWidth,
    /// (bool) Determines whether the drop shadow effect for
    DropShadow,
    /// (int) Determines the value returned by
    MaximumScrollBarDragDistance,
    /// (int) A value representing a Qt::ToolButtonStyle.
    ToolButtonStyle,
    /// Icon size for tool bars.
    ToolBarIconSize,
    /// (bool) Activate items by single click.
    ItemViewActivateItemOnSingleClick,
    /// (QString) Name of the icon theme.
    SystemIconThemeName,
    /// (QString) Name of the fallback icon theme.
    SystemIconFallbackThemeName,
    /// (QStringList) Search paths for icons.
    IconThemeSearchPaths,
    /// (QStringList) A list of preferred style names.
    StyleNames,
    /// (bool) A boolean value indicating whether Windows
    WindowAutoPlacement,
    /// (int) An integer representing a
    DialogButtonBoxLayout,
    /// (bool) A boolean value indicating whether
    DialogButtonBoxButtonsHaveIcons,
    /// (bool) Pop menus can cover the full screen including task bar.
    UseFullScreenForPopupMenu,
    /// (int) An integer value (enum KeyboardSchemes) specifying the
    KeyboardScheme,
    /// (int) A flag value consisting of UiEffect values specifying the enabled UI animations.
    UiEffects,
    /// (int) A QTextCharFormat::UnderlineStyle specifying
    SpellCheckUnderlineStyle,
    TabAllWidgets,
    /// (int) A Qt::TabFocusBehavior specifying
    TabFocusBehavior,
    IconPixmapSizes,
    PasswordMaskCharacter,
    /// (bool) Whether the mouse should snap to the default button when a dialog
    DialogSnapToDefaultButton,
    /// (bool) Whether the context menu should be shown on mouse release.
    ContextMenuOnMouseRelease,
    /// (int) Mouse press and hold interval in ms,
    MousePressAndHoldInterval,
    /// (int) The maximum distance in logical pixels which the mouse can travel
    MouseDoubleClickDistance,
    /// (int) The number of lines to scroll a widget, when the mouse wheel is rotated.
    WheelScrollLines,
    /// (int) The maximum distance in logical pixels which a touchpoint can travel
    TouchDoubleTapDistance,
    /// (bool) Whether to display shortcut key sequences in context menus.
    ShowShortcutsInContextMenus,
    IconFallbackSearchPaths,
    MouseQuickSelectionThreshold,
}

[org_name(QPlatformTheme)]
enum DialogType {
    FileDialog,
    ColorDialog,
    FontDialog,
    MessageDialog,
}

[org_name(QPlatformTheme)]
enum Palette {
    SystemPalette,
    ToolTipPalette,
    ToolButtonPalette,
    ButtonPalette,
    CheckBoxPalette,
    RadioButtonPalette,
    HeaderPalette,
    ComboBoxPalette,
    ItemViewPalette,
    MessageBoxLabelPelette,
    MessageBoxLabelPalette,
    TabBarPalette,
    LabelPalette,
    GroupBoxPalette,
    MenuPalette,
    MenuBarPalette,
    TextEditPalette,
    TextLineEditPalette,
    NPalettes,
}

[org_name(QPlatformTheme)]
enum Font {
    SystemFont,
    MenuFont,
    MenuBarFont,
    MenuItemFont,
    MessageBoxFont,
    LabelFont,
    TipLabelFont,
    StatusBarFont,
    TitleBarFont,
    MdiSubWindowTitleFont,
    DockWidgetTitleFont,
    PushButtonFont,
    CheckBoxFont,
    RadioButtonFont,
    ToolButtonFont,
    ItemViewFont,
    ListViewFont,
    HeaderViewFont,
    ListBoxFont,
    ComboMenuItemFont,
    ComboLineEditFont,
    SmallFont,
    MiniFont,
    FixedFont,
    GroupBoxTitleFont,
    TabButtonFont,
    EditorFont,
    NFonts,
}

[org_name(QPlatformTheme)]
enum StandardPixmap {
    TitleBarMenuButton,
    TitleBarMinButton,
    TitleBarMaxButton,
    TitleBarCloseButton,
    TitleBarNormalButton,
    TitleBarShadeButton,
    TitleBarUnshadeButton,
    TitleBarContextHelpButton,
    DockWidgetCloseButton,
    MessageBoxInformation,
    MessageBoxWarning,
    MessageBoxCritical,
    MessageBoxQuestion,
    DesktopIcon,
    TrashIcon,
    ComputerIcon,
    DriveFDIcon,
    DriveHDIcon,
    DriveCDIcon,
    DriveDVDIcon,
    DriveNetIcon,
    DirOpenIcon,
    DirClosedIcon,
    DirLinkIcon,
    DirLinkOpenIcon,
    FileIcon,
    FileLinkIcon,
    ToolBarHorizontalExtensionButton,
    ToolBarVerticalExtensionButton,
    FileDialogStart,
    FileDialogEnd,
    FileDialogToParent,
    FileDialogNewFolder,
    FileDialogDetailedView,
    FileDialogInfoView,
    FileDialogContentsView,
    FileDialogListView,
    FileDialogBack,
    DirIcon,
    DialogOkButton,
    DialogCancelButton,
    DialogHelpButton,
    DialogOpenButton,
    DialogSaveButton,
    DialogCloseButton,
    DialogApplyButton,
    DialogResetButton,
    DialogDiscardButton,
    DialogYesButton,
    DialogNoButton,
    ArrowUp,
    ArrowDown,
    ArrowLeft,
    ArrowRight,
    ArrowBack,
    ArrowForward,
    DirHomeIcon,
    CommandLink,
    VistaShield,
    BrowserReload,
    BrowserStop,
    MediaPlay,
    MediaStop,
    MediaPause,
    MediaSkipForward,
    MediaSkipBackward,
    MediaSeekForward,
    MediaSeekBackward,
    MediaVolume,
    MediaVolumeMuted,
    LineEditClearButton,
    CustomBase,
}

[org_name(QPlatformTheme)]
enum KeyboardSchemes {
    WindowsKeyboardScheme,
    MacKeyboardScheme,
    X11KeyboardScheme,
    KdeKeyboardScheme,
    GnomeKeyboardScheme,
    CdeKeyboardScheme,
}

[org_name(QPlatformTheme)]
enum UiEffect {
    GeneralUiEffect,
    AnimateMenuUiEffect,
    FadeMenuUiEffect,
    AnimateComboUiEffect,
    AnimateTooltipUiEffect,
    FadeTooltipUiEffect,
    AnimateToolBoxUiEffect,
    HoverEffect,
}

[org_name(QPlatformTheme)]
enum IconOption {
    DontUseCustomDirectoryIcons,
}

// vim: syntax=rust expandtab ts=4 sw=4
