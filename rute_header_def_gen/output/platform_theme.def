/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct PlatformTheme {
    [event] create_platform_menu_item() -> PlatformMenuItem?,
    [event] create_platform_menu() -> PlatformMenu?,
    [event] create_platform_menu_bar() -> PlatformMenuBar?,
    [event] show_platform_menu_bar(),
    [event] use_platform_native_dialog(type: PlatformTheme::DialogType) -> bool,
    [event] create_platform_dialog_helper(type: PlatformTheme::DialogType) -> PlatformDialogHelper?,
    /// 
    /// Factory function for QSystemTrayIcon. This function will return 0 if the platform
    /// integration does not support creating any system tray icon.
    [event] create_platform_system_tray_icon() -> PlatformSystemTrayIcon?,
    [event] palette(type: PlatformTheme::Palette) -> Palette?,
    [event] font(type: PlatformTheme::Font) -> Font?,
    [event] theme_hint(hint: PlatformTheme::ThemeHint) -> Variant,
    [event] standard_pixmap(sp: PlatformTheme::StandardPixmap, size: &SizeFType) -> Pixmap,
    /// 
    /// *fileInfo,* observing *iconOptions.*
    /// 
    /// This function is queried by QFileIconProvider and similar classes to obtain
    /// an icon for a file. If it does not return a non-null icon, fileIconPixmap()
    /// is queried for a specific size.
    /// 
    [event] file_icon(file_info: &FileInfoType, icon_options: PlatformTheme::IconOptions) -> Icon,
    /// 
    /// Factory function for the QIconEngine used by QIcon::fromTheme(). By default this
    /// function returns a QIconLoaderEngine, but subclasses can reimplement it to
    /// provide their own.
    /// 
    /// It is especially useful to benefit from some platform specific facilities or
    /// optimizations like an inter-process cache in systems mostly built with Qt.
    /// 
    [event] create_icon_engine(icon_name: String) -> IconEngine?,
    /// 
    /// Returns the key sequence that should be used for a standard action.
    /// 
    [event] key_bindings(key: KeySequence::StandardKey) -> [KeySequence],
    /// 
    /// Returns the text of a standard *button.*
    /// 
    /// **See also:** [`PlatformDialogHelper::standard_button()`]
    [event] standard_button_text(button: i32) -> String,
    /// 
    /// Returns the mnemonic that should be used for a standard *button.*
    /// 
    /// **See also:** [`PlatformDialogHelper::standard_button()`]
    [event] standard_button_shortcut(button: i32) -> KeySequence,
    [static] default_theme_hint(hint: PlatformTheme::ThemeHint) -> Variant,
    [static] default_standard_button_text(button: i32) -> String,
    [static] remove_mnemonics(original: String) -> String,
}

[org_name(QPlatformTheme)]
enum ThemeHint {
    /// (int) Cursor flash time in ms, overriding QPlatformIntegration::styleHint.
    CursorFlashTime = 0,
    /// (int) Keyboard input interval in ms, overriding QPlatformIntegration::styleHint.
    KeyboardInputInterval = 1,
    /// (int) Mouse double click interval in ms, overriding QPlatformIntegration::styleHint.
    MouseDoubleClickInterval = 2,
    /// (int) Start drag distance, overriding QPlatformIntegration::styleHint.
    StartDragDistance = 3,
    /// (int) Start drag time in ms, overriding QPlatformIntegration::styleHint.
    StartDragTime = 4,
    /// (int) Keyboard auto repeat rate, overriding QPlatformIntegration::styleHint.
    KeyboardAutoRepeatRate = 5,
    /// (int) Pass word mask delay in ms, overriding QPlatformIntegration::styleHint.
    PasswordMaskDelay = 6,
    /// (int) Velocity of a drag, overriding QPlatformIntegration::styleHint.
    StartDragVelocity = 7,
    /// (int) Determines the width of the text cursor.
    TextCursorWidth = 8,
    /// (bool) Determines whether the drop shadow effect for tooltips or whatsthis is enabled.
    DropShadow = 9,
    /// (int) Determines the value returned by QStyle::pixelMetric(PM_MaximumDragDistance)
    MaximumScrollBarDragDistance = 10,
    /// (int) A value representing a Qt::ToolButtonStyle.
    ToolButtonStyle = 11,
    /// Icon size for tool bars.
    ToolBarIconSize = 12,
    /// (bool) Activate items by single click.
    ItemViewActivateItemOnSingleClick = 13,
    /// (QString) Name of the icon theme.
    SystemIconThemeName = 14,
    /// (QString) Name of the fallback icon theme.
    SystemIconFallbackThemeName = 15,
    /// (QStringList) Search paths for icons.
    IconThemeSearchPaths = 16,
    /// (QStringList) A list of preferred style names.
    StyleNames = 17,
    /// (bool) A boolean value indicating whether Windows (particularly dialogs) are placed by the system (see _NET_WM_FULL_PLACEMENT in X11).
    WindowAutoPlacement = 18,
    /// (int) An integer representing a QDialogButtonBox::ButtonLayout value.
    DialogButtonBoxLayout = 19,
    /// (bool) A boolean value indicating whether the buttons of a QDialogButtonBox should have icons.
    DialogButtonBoxButtonsHaveIcons = 20,
    /// (bool) Pop menus can cover the full screen including task bar.
    UseFullScreenForPopupMenu = 21,
    /// (int) An integer value (enum KeyboardSchemes) specifying the keyboard scheme.
    KeyboardScheme = 22,
    /// (int) A flag value consisting of UiEffect values specifying the enabled UI animations.
    UiEffects = 23,
    /// (int) A QTextCharFormat::UnderlineStyle specifying the underline style used misspelled words when spell checking.
    SpellCheckUnderlineStyle = 24,
    TabAllWidgets = 25,
    /// (int) A Qt::TabFocusBehavior specifying the behavior of focus change when tab key was pressed. This enum value was added in Qt 5.5.
    TabFocusBehavior = 25,
    IconPixmapSizes = 26,
    PasswordMaskCharacter = 27,
    /// (bool) Whether the mouse should snap to the default button when a dialog becomes visible.
    DialogSnapToDefaultButton = 28,
    /// (bool) Whether the context menu should be shown on mouse release.
    ContextMenuOnMouseRelease = 29,
    /// (int) Mouse press and hold interval in ms, overriding QPlatformIntegration::styleHint.
    MousePressAndHoldInterval = 30,
    /// (int) The maximum distance in logical pixels which the mouse can travel between clicks in order for the click sequence to be handled as a double click. The default value is 5 logical pixels.
    MouseDoubleClickDistance = 31,
    /// (int) The number of lines to scroll a widget, when the mouse wheel is rotated. The default value is 3.
    WheelScrollLines = 32,
    /// (int) The maximum distance in logical pixels which a touchpoint can travel between taps in order for the tap sequence to be handled as a double tap. The default value is double the MouseDoubleClickDistance, or 10 logical pixels if that is not specified.
    TouchDoubleTapDistance = 33,
    /// (bool) Whether to display shortcut key sequences in context menus.
    ShowShortcutsInContextMenus = 34,
    IconFallbackSearchPaths = 35,
    MouseQuickSelectionThreshold = 36,
}

[org_name(QPlatformTheme)]
enum DialogType {
    FileDialog = 0,
    ColorDialog = 1,
    FontDialog = 2,
    MessageDialog = 3,
}

[org_name(QPlatformTheme)]
enum Palette {
    SystemPalette = 0,
    ToolTipPalette = 1,
    ToolButtonPalette = 2,
    ButtonPalette = 3,
    CheckBoxPalette = 4,
    RadioButtonPalette = 5,
    HeaderPalette = 6,
    ComboBoxPalette = 7,
    ItemViewPalette = 8,
    MessageBoxLabelPelette = 9,
    MessageBoxLabelPalette = 9,
    TabBarPalette = 10,
    LabelPalette = 11,
    GroupBoxPalette = 12,
    MenuPalette = 13,
    MenuBarPalette = 14,
    TextEditPalette = 15,
    TextLineEditPalette = 16,
    NPalettes = 17,
}

[org_name(QPlatformTheme)]
enum Font {
    SystemFont = 0,
    MenuFont = 1,
    MenuBarFont = 2,
    MenuItemFont = 3,
    MessageBoxFont = 4,
    LabelFont = 5,
    TipLabelFont = 6,
    StatusBarFont = 7,
    TitleBarFont = 8,
    MdiSubWindowTitleFont = 9,
    DockWidgetTitleFont = 10,
    PushButtonFont = 11,
    CheckBoxFont = 12,
    RadioButtonFont = 13,
    ToolButtonFont = 14,
    ItemViewFont = 15,
    ListViewFont = 16,
    HeaderViewFont = 17,
    ListBoxFont = 18,
    ComboMenuItemFont = 19,
    ComboLineEditFont = 20,
    SmallFont = 21,
    MiniFont = 22,
    FixedFont = 23,
    GroupBoxTitleFont = 24,
    TabButtonFont = 25,
    EditorFont = 26,
    NFonts = 27,
}

[org_name(QPlatformTheme)]
enum StandardPixmap {
    TitleBarMenuButton = 0,
    TitleBarMinButton = 1,
    TitleBarMaxButton = 2,
    TitleBarCloseButton = 3,
    TitleBarNormalButton = 4,
    TitleBarShadeButton = 5,
    TitleBarUnshadeButton = 6,
    TitleBarContextHelpButton = 7,
    DockWidgetCloseButton = 8,
    MessageBoxInformation = 9,
    MessageBoxWarning = 10,
    MessageBoxCritical = 11,
    MessageBoxQuestion = 12,
    DesktopIcon = 13,
    TrashIcon = 14,
    ComputerIcon = 15,
    DriveFDIcon = 16,
    DriveHDIcon = 17,
    DriveCDIcon = 18,
    DriveDVDIcon = 19,
    DriveNetIcon = 20,
    DirOpenIcon = 21,
    DirClosedIcon = 22,
    DirLinkIcon = 23,
    DirLinkOpenIcon = 24,
    FileIcon = 25,
    FileLinkIcon = 26,
    ToolBarHorizontalExtensionButton = 27,
    ToolBarVerticalExtensionButton = 28,
    FileDialogStart = 29,
    FileDialogEnd = 30,
    FileDialogToParent = 31,
    FileDialogNewFolder = 32,
    FileDialogDetailedView = 33,
    FileDialogInfoView = 34,
    FileDialogContentsView = 35,
    FileDialogListView = 36,
    FileDialogBack = 37,
    DirIcon = 38,
    DialogOkButton = 39,
    DialogCancelButton = 40,
    DialogHelpButton = 41,
    DialogOpenButton = 42,
    DialogSaveButton = 43,
    DialogCloseButton = 44,
    DialogApplyButton = 45,
    DialogResetButton = 46,
    DialogDiscardButton = 47,
    DialogYesButton = 48,
    DialogNoButton = 49,
    ArrowUp = 50,
    ArrowDown = 51,
    ArrowLeft = 52,
    ArrowRight = 53,
    ArrowBack = 54,
    ArrowForward = 55,
    DirHomeIcon = 56,
    CommandLink = 57,
    VistaShield = 58,
    BrowserReload = 59,
    BrowserStop = 60,
    MediaPlay = 61,
    MediaStop = 62,
    MediaPause = 63,
    MediaSkipForward = 64,
    MediaSkipBackward = 65,
    MediaSeekForward = 66,
    MediaSeekBackward = 67,
    MediaVolume = 68,
    MediaVolumeMuted = 69,
    LineEditClearButton = 70,
    CustomBase = 4026531840,
}

[org_name(QPlatformTheme)]
enum KeyboardSchemes {
    WindowsKeyboardScheme = 0,
    MacKeyboardScheme = 1,
    X11KeyboardScheme = 2,
    KdeKeyboardScheme = 3,
    GnomeKeyboardScheme = 4,
    CdeKeyboardScheme = 5,
}

[org_name(QPlatformTheme)]
enum UiEffect {
    GeneralUiEffect = 1,
    AnimateMenuUiEffect = 2,
    FadeMenuUiEffect = 4,
    AnimateComboUiEffect = 8,
    AnimateTooltipUiEffect = 16,
    FadeTooltipUiEffect = 32,
    AnimateToolBoxUiEffect = 64,
    HoverEffect = 128,
}

[org_name(QPlatformTheme)]
enum IconOption {
    DontUseCustomDirectoryIcons = 1,
}

// vim: syntax=rust expandtab ts=4 sw=4
