[org_name(QPainterPath)]
enum ElementType {
    MoveToElement,
    LineToElement,
    CurveToElement,
    CurveToDataElement,
}


struct PainterPath {
    swap(other: &PainterPathType),
    close_subpath(),
    move_to(p: &PointFType),
    move_to(x: f32, y: f32),
    line_to(p: &PointFType),
    line_to(x: f32, y: f32),
    arc_move_to(rect: &RectFType, angle: f32),
    arc_move_to(x: f32, y: f32, w: f32, h: f32, angle: f32),
    arc_to(rect: &RectFType, start_angle: f32, arc_length: f32),
    arc_to(x: f32, y: f32, w: f32, h: f32, start_angle: f32, arc_length: f32),
    cubic_to(ctrl_pt1: &PointFType, ctrl_pt2: &PointFType, end_pt: &PointFType),
    cubic_to(ctrl_pt1x: f32, ctrl_pt1y: f32, ctrl_pt2x: f32, ctrl_pt2y: f32, end_ptx: f32, end_pty: f32),
    quad_to(ctrl_pt: &PointFType, end_pt: &PointFType),
    quad_to(ctrl_ptx: f32, ctrl_pty: f32, end_ptx: f32, end_pty: f32),
    current_position() -> PointF,
    add_rect(rect: &RectFType),
    add_rect(x: f32, y: f32, w: f32, h: f32),
    add_ellipse(rect: &RectFType),
    add_ellipse(x: f32, y: f32, w: f32, h: f32),
    add_ellipse(center: &PointFType, rx: f32, ry: f32),
    add_polygon(polygon: &PolygonFType),
    add_text(point: &PointFType, f: &FontType, text: String),
    add_text(x: f32, y: f32, f: &FontType, text: String),
    add_path(path: &PainterPathType),
    add_region(region: &RegionType),
    add_rounded_rect(rect: &RectFType, x_radius: f32, y_radius: f32, mode: Rute::SizeMode),
    add_rounded_rect(x: f32, y: f32, w: f32, h: f32, x_radius: f32, y_radius: f32, mode: Rute::SizeMode),
    add_round_rect(rect: &RectFType, x_rnd: i32, y_rnd: i32),
    add_round_rect(x: f32, y: f32, w: f32, h: f32, x_rnd: i32, y_rnd: i32),
    add_round_rect(rect: &RectFType, roundness: i32),
    add_round_rect(x: f32, y: f32, w: f32, h: f32, roundness: i32),
    connect_path(path: &PainterPathType),
    contains(pt: &PointFType) -> bool,
    contains(rect: &RectFType) -> bool,
    intersects(rect: &RectFType) -> bool,
    bounding_rect() -> RectF,
    fill_rule() -> Rute::FillRule,
    set_fill_rule(fill_rule: Rute::FillRule),
    is_empty() -> bool,
    to_reversed() -> PainterPath,
    to_subpath_polygons(matrix: &MatrixType) -> [PolygonF],
    to_fill_polygons(matrix: &MatrixType) -> [PolygonF],
    to_fill_polygon(matrix: &MatrixType) -> PolygonF,
    to_subpath_polygons(matrix: &TransformType) -> [PolygonF],
    to_fill_polygons(matrix: &TransformType) -> [PolygonF],
    to_fill_polygon(matrix: &TransformType) -> PolygonF,
    element_count() -> i32,
    element_at(i: i32) -> PainterPath::Element,
    set_element_position_at(i: i32, x: f32, y: f32),
    length() -> f32,
    percent_at_length(t: f32) -> f32,
    point_at_percent(t: f32) -> PointF,
    angle_at_percent(t: f32) -> f32,
    slope_at_percent(t: f32) -> f32,
    intersects(p: &PainterPathType) -> bool,
    contains(p: &PainterPathType) -> bool,
    united(r: &PainterPathType) -> PainterPath,
    intersected(r: &PainterPathType) -> PainterPath,
    simplified() -> PainterPath,
}

// vim: syntax=rust expandtab ts=4 sw=4
