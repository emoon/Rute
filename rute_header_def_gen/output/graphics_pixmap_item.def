/// 
/// To set the item's pixmap, pass a QPixmap to QGraphicsPixmapItem's
/// constructor, or call the setPixmap() function. The pixmap()
/// function returns the current pixmap.
/// 
/// QGraphicsPixmapItem uses pixmap's optional alpha mask to provide a
/// reasonable implementation of boundingRect(), shape(), and contains().
/// 
/// ![graphicsview-pixmapitem.png](graphicsview-pixmapitem.png)
/// 
/// The pixmap is drawn at the item's (0, 0) coordinate, as returned by
/// offset(). You can change the drawing offset by calling setOffset().
/// 
/// You can set the pixmap's transformation mode by calling
/// setTransformationMode(). By default, Qt::FastTransformation is used, which
/// provides fast, non-smooth scaling. Qt::SmoothTransformation enables
/// QPainter::SmoothPixmapTransform on the painter, and the quality depends on
/// the platform and viewport. The result is usually not as good as calling
/// QPixmap::scale() directly. Call transformationMode() to get the current
/// transformation mode for the item.
/// 
/// **See also:** [`GraphicsPathItem`]
/// [`GraphicsRectItem`]
/// [`GraphicsEllipseItem`]
/// [`GraphicsTextItem`]
/// [`GraphicsPolygonItem`]
/// [`GraphicsLineItem`]
/// {Graphics View Framework}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GraphicsPixmapItem : GraphicsItem {
    /// 
    /// Returns the item's pixmap, or an invalid QPixmap if no pixmap has been
    /// set.
    /// 
    /// **See also:** [`set_pixmap()`]
    pixmap() -> Pixmap,
    /// 
    /// Sets the item's pixmap to *pixmap.*
    /// 
    /// **See also:** [`pixmap()`]
    set_pixmap(pixmap: &PixmapType),
    /// 
    /// Sets the pixmap item's transformation mode to *mode,* and toggles an
    /// update of the item. The default mode is Qt::FastTransformation, which
    /// provides quick transformation with no smoothing.
    /// 
    /// Qt::SmoothTransformation enables QPainter::SmoothPixmapTransform on the
    /// painter, and the quality depends on the platform and viewport. The result
    /// is usually not as good as calling QPixmap::scale() directly.
    /// 
    /// **See also:** [`transformation_mode()`]
    set_transformation_mode(mode: Rute::TransformationMode),
    /// 
    /// Returns the pixmap item's *offset,* which defines the point of the
    /// top-left corner of the pixmap, in local coordinates.
    /// 
    /// **See also:** [`set_offset()`]
    offset() -> PointF,
    /// 
    /// Sets the pixmap item's offset to *offset.* QGraphicsPixmapItem will draw
    /// its pixmap using *offset* for its top-left corner.
    /// 
    /// **See also:** [`offset()`]
    /// 
    /// This convenience function is equivalent to calling setOffset(QPointF( *x,* *y)).*
    set_offset(offset: &PointFType),
    /// 
    /// Sets the pixmap item's offset to *offset.* QGraphicsPixmapItem will draw
    /// its pixmap using *offset* for its top-left corner.
    /// 
    /// **See also:** [`offset()`]
    /// 
    /// This convenience function is equivalent to calling setOffset(QPointF( *x,* *y)).*
    [org_name(setOffset)]
    set_offset_2(x: f32, y: f32),
    /// 
    [event] bounding_rect() -> RectF,
    /// 
    /// 
    /// Returns the item's shape mode. The shape mode describes how
    /// QGraphicsPixmapItem calculates its shape. The default mode is MaskShape.
    /// 
    /// **See also:** [`set_shape_mode()`]
    /// ShapeMode
    [event] shape() -> PainterPath,
    /// 
    [event] contains(point: &PointFType) -> bool,
    /// 
    [event] paint(painter: *PainterType, option: *StyleOptionGraphicsItemType, widget: *WidgetType),
    /// 
    [event] is_obscured_by(item: *GraphicsItemType) -> bool,
    /// 
    [event] opaque_area() -> PainterPath,
    /// 
    [event] type() -> i32,
    /// 
    /// Returns the item's shape mode. The shape mode describes how
    /// QGraphicsPixmapItem calculates its shape. The default mode is MaskShape.
    /// 
    /// **See also:** [`set_shape_mode()`]
    /// ShapeMode
    shape_mode() -> GraphicsPixmapItem::ShapeMode,
    /// 
    /// Sets the item's shape mode to *mode.* The shape mode describes how
    /// QGraphicsPixmapItem calculates its shape. The default mode is MaskShape.
    /// 
    /// **See also:** [`shape_mode()`]
    /// ShapeMode
    set_shape_mode(mode: GraphicsPixmapItem::ShapeMode),
    [event] supports_extension(extension: GraphicsItem::Extension) -> bool,
    [event] set_extension(extension: GraphicsItem::Extension, variant: &VariantType),
    [event] extension(variant: &VariantType) -> Variant,
}

[org_name(QGraphicsPixmapItem)]
enum ShapeMode {
    /// The shape is determined by calling QPixmap::mask(). This shape includes only the opaque pixels of the pixmap. Because the shape is more complex, however, it can be slower than the other modes, and uses more memory.
    MaskShape = 0,
    /// The shape is determined by tracing the outline of the pixmap. This is the fastest shape mode, but it does not take into account any transparent areas on the pixmap.
    BoundingRectShape = 1,
    /// The shape is determine by calling QPixmap::createHeuristicMask(). The performance and memory consumption is similar to MaskShape.
    HeuristicMaskShape = 2,
}

[org_name(QGraphicsPixmapItem)]
enum GraphicsPixmapItemFixMeEnums {
    Type = 7,
}

// vim: syntax=rust expandtab ts=4 sw=4
