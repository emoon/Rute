/// 
/// A QLineF describes a finite length line (or line segment) on a
/// two-dimensional surface. QLineF defines the start and end points
/// of the line using floating point accuracy for coordinates. Use
/// the toLine() function to retrieve an integer based copy of this
/// line.
/// 
/// * ![qline-point.png](qline-point.png)
/// 
/// * ![qline-coordinates.png](qline-coordinates.png)
/// 
/// The positions of the line's start and end points can be retrieved
/// using the p1(), x1(), y1(), p2(), x2(), and y2() functions. The
/// dx() and dy() functions return the horizontal and vertical
/// components of the line, respectively.
/// 
/// The line's length can be retrieved using the length() function,
/// and altered using the setLength() function. Similarly, angle()
/// and setAngle() are respectively used for retrieving and altering
/// the angle of the line. Use the isNull()
/// function to determine whether the QLineF represents a valid line
/// or a null line.
/// 
/// The intersect() function determines the IntersectType for this
/// line and a given line, while the angleTo() function returns the
/// angle between the lines. In addition, the unitVector() function
/// returns a line that has the same starting point as this line, but
/// with a length of only 1, while the normalVector() function returns
/// a line that is perpendicular to this line with the same starting
/// point and length.
/// 
/// Finally, the line can be translated a given offset using the
/// translate() function, and can be traversed using the pointAt()
/// function.
/// 
/// # Constraints
/// 
/// QLine is limited to the minimum and maximum values for the
/// `int` type. Operations on a QLine that could potentially result
/// in values outside this range will result in undefined behavior.
/// 
/// **See also:** [`Line`]
/// [`PolygonF`]
/// [`RectF`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct LineF {
    /// 
    /// Returns a QLineF with the given *length* and *angle.*
    /// 
    /// The first point of the line will be on the origin.
    /// 
    /// Positive values for the angles mean counter-clockwise while negative values
    /// mean the clockwise direction. Zero degrees is at the 3 o'clock position.
    [static] from_polar(length: f32, angle: f32) -> LineF,
    /// 
    /// Returns `true` if the line is not set up with valid start and end point;
    /// otherwise returns `false.`
    is_null() -> bool,
    /// 
    /// Returns the line's start point.
    /// 
    /// **See also:** [`x1()`]
    /// [`y1()`]
    /// [`p2()`]
    p1() -> PointF,
    /// 
    /// Returns the line's end point.
    /// 
    /// **See also:** [`x2()`]
    /// [`y2()`]
    /// [`p1()`]
    p2() -> PointF,
    /// 
    /// Returns the x-coordinate of the line's start point.
    /// 
    /// **See also:** [`p1()`]
    x1() -> f32,
    /// 
    /// Returns the y-coordinate of the line's start point.
    /// 
    /// **See also:** [`p1()`]
    y1() -> f32,
    /// 
    /// Returns the x-coordinate of the line's end point.
    /// 
    /// **See also:** [`p2()`]
    x2() -> f32,
    /// 
    /// Returns the y-coordinate of the line's end point.
    /// 
    /// **See also:** [`p2()`]
    y2() -> f32,
    /// 
    /// Returns the horizontal component of the line's vector.
    /// 
    /// **See also:** [`dy()`]
    /// [`point_at()`]
    dx() -> f32,
    /// 
    /// Returns the vertical component of the line's vector.
    /// 
    /// **See also:** [`dx()`]
    /// [`point_at()`]
    dy() -> f32,
    /// 
    /// Returns the length of the line.
    /// 
    /// **See also:** [`set_length()`]
    length() -> f32,
    /// 
    /// Sets the length of the line to the given *length.* QLineF will
    /// move the end point - p2() - of the line to give the line its new length.
    /// 
    /// If the line is a null line, the length will remain zero regardless
    /// of the length specified.
    /// 
    /// **See also:** [`length()`]
    /// [`is_null()`]
    set_length(len: f32),
    /// 
    /// Returns the angle of the line in degrees.
    /// 
    /// The return value will be in the range of values from 0.0 up to but not
    /// including 360.0. The angles are measured counter-clockwise from a point
    /// on the x-axis to the right of the origin (x > 0).
    /// 
    /// **See also:** [`set_angle()`]
    /// 
    /// Returns the angle (in degrees) from this line to the given *line,* taking the direction of the lines into account. If the lines
    /// do not intersect within their range, it is the intersection point of
    /// the extended lines that serves as origin (see
    /// QLineF::UnboundedIntersection).
    /// 
    /// The returned value represents the number of degrees you need to add
    /// to this line to make it have the same angle as the given *line,*
    /// going counter-clockwise.
    /// 
    /// **See also:** [`intersect()`]
    /// 
    /// Returns the angle (in degrees) between this line and the given *line,* taking the direction of the lines into account. If the lines
    /// do not intersect within their range, it is the intersection point of
    /// the extended lines that serves as origin (see
    /// QLineF::UnboundedIntersection).
    /// 
    /// * ![qlinef-angle-identicaldirection.png](qlinef-angle-identicaldirection.png)
    /// 
    /// * ![qlinef-angle-oppositedirection.png](qlinef-angle-oppositedirection.png)
    /// 
    /// When the lines are parallel, this function returns 0 if they have
    /// the same direction; otherwise it returns 180.
    /// 
    /// **See also:** [`intersect()`]
    angle() -> f32,
    /// 
    /// Sets the angle of the line to the given *angle* (in degrees).
    /// This will change the position of the second point of the line such that
    /// the line has the given angle.
    /// 
    /// Positive values for the angles mean counter-clockwise while negative values
    /// mean the clockwise direction. Zero degrees is at the 3 o'clock position.
    /// 
    /// **See also:** [`angle()`]
    set_angle(angle: f32),
    /// 
    /// Returns the angle (in degrees) from this line to the given *line,* taking the direction of the lines into account. If the lines
    /// do not intersect within their range, it is the intersection point of
    /// the extended lines that serves as origin (see
    /// QLineF::UnboundedIntersection).
    /// 
    /// The returned value represents the number of degrees you need to add
    /// to this line to make it have the same angle as the given *line,*
    /// going counter-clockwise.
    /// 
    /// **See also:** [`intersect()`]
    angle_to(l: &LineFType) -> f32,
    /// 
    /// Returns the unit vector for this line, i.e a line starting at the
    /// same point as *this* line with a length of 1.0.
    /// 
    /// **See also:** [`normal_vector()`]
    unit_vector() -> LineF,
    /// 
    /// Returns a line that is perpendicular to this line with the same starting
    /// point and length.
    /// 
    /// ![qlinef-normalvector.png](qlinef-normalvector.png)
    /// 
    /// **See also:** [`unit_vector()`]
    normal_vector() -> LineF,
    /// 
    /// Returns a value indicating whether or not *this* line intersects
    /// with the given *line.*
    /// 
    /// The actual intersection point is extracted to *intersectionPoint*
    /// (if the pointer is valid). If the lines are parallel, the
    /// intersection point is undefined.
    intersect(l: &LineFType, intersection_point: *PointFType) -> LineF::IntersectType,
    /// 
    /// Returns the angle of the line in degrees.
    /// 
    /// The return value will be in the range of values from 0.0 up to but not
    /// including 360.0. The angles are measured counter-clockwise from a point
    /// on the x-axis to the right of the origin (x > 0).
    /// 
    /// **See also:** [`set_angle()`]
    /// 
    /// Returns the angle (in degrees) from this line to the given *line,* taking the direction of the lines into account. If the lines
    /// do not intersect within their range, it is the intersection point of
    /// the extended lines that serves as origin (see
    /// QLineF::UnboundedIntersection).
    /// 
    /// The returned value represents the number of degrees you need to add
    /// to this line to make it have the same angle as the given *line,*
    /// going counter-clockwise.
    /// 
    /// **See also:** [`intersect()`]
    /// 
    /// Returns the angle (in degrees) between this line and the given *line,* taking the direction of the lines into account. If the lines
    /// do not intersect within their range, it is the intersection point of
    /// the extended lines that serves as origin (see
    /// QLineF::UnboundedIntersection).
    /// 
    /// * ![qlinef-angle-identicaldirection.png](qlinef-angle-identicaldirection.png)
    /// 
    /// * ![qlinef-angle-oppositedirection.png](qlinef-angle-oppositedirection.png)
    /// 
    /// When the lines are parallel, this function returns 0 if they have
    /// the same direction; otherwise it returns 180.
    /// 
    /// **See also:** [`intersect()`]
    [org_name(angle)]
    angle_2(l: &LineFType) -> f32,
    /// 
    /// Returns the point at the parameterized position specified by *t.* The function returns the line's start point if t = 0, and its end
    /// point if t = 1.
    /// 
    /// **See also:** [`dx()`]
    /// [`dy()`]
    point_at(t: f32) -> PointF,
    /// 
    /// Returns the center point of this line. This is equivalent to
    /// 0.5 * p1() + 0.5 * p2().
    center() -> PointF,
    /// 
    /// Sets the starting point of this line to *p1.*
    /// 
    /// **See also:** [`set_p2()`]
    /// [`p1()`]
    set_p1(p1: &PointFType),
    /// 
    /// Sets the end point of this line to *p2.*
    /// 
    /// **See also:** [`set_p1()`]
    /// [`p2()`]
    set_p2(p2: &PointFType),
    /// 
    /// Sets the start point of this line to *p1* and the end point of this line to *p2.*
    /// 
    /// **See also:** [`set_p1()`]
    /// [`set_p2()`]
    /// [`p1()`]
    /// [`p2()`]
    set_points(p1: &PointFType, p2: &PointFType),
    /// 
    /// Sets this line to the start in *x1,* *y1* and end in *x2,* *y2.*
    /// 
    /// **See also:** [`set_p1()`]
    /// [`set_p2()`]
    /// [`p1()`]
    /// [`p2()`]
    set_line(x1: f32, y1: f32, x2: f32, y2: f32),
    /// 
    /// Returns an integer based copy of this line.
    /// 
    /// Note that the returned line's start and end points are rounded to
    /// the nearest integer.
    /// 
    /// **See also:** [`q_line_f()`]
    to_line() -> Line,
}

[org_name(QLineF)]
enum IntersectType {
    NoIntersection,
    BoundedIntersection,
    UnboundedIntersection,
}

// vim: syntax=rust expandtab ts=4 sw=4
