[org_name(QDialogButtonBox)]
enum ButtonRole {
    InvalidRole,
    AcceptRole,
    RejectRole,
    DestructiveRole,
    ActionRole,
    HelpRole,
    YesRole,
    NoRole,
    ResetRole,
    ApplyRole,
    NRoles,
}

[org_name(QDialogButtonBox)]
enum StandardButton {
    NoButton,
    Ok,
    Save,
    SaveAll,
    Open,
    Yes,
    YesToAll,
    No,
    NoToAll,
    Abort,
    Retry,
    Ignore,
    Close,
    Cancel,
    Discard,
    Help,
    Apply,
    Reset,
    RestoreDefaults,
    FirstButton,
    LastButton,
}

[org_name(QDialogButtonBox)]
enum ButtonLayout {
    WinLayout,
    MacLayout,
    KdeLayout,
    GnomeLayout,
    AndroidLayout,
}

struct DialogButtonBox : Widget {
    set_orientation(orientation: Rute::Orientation),
    orientation() -> Rute::Orientation,
    add_button(button: *AbstractButtonType, role: DialogButtonBox::ButtonRole),
    add_button(text: String, role: DialogButtonBox::ButtonRole) -> PushButton?,
    add_button(button: DialogButtonBox::StandardButton) -> PushButton?,
    remove_button(button: *AbstractButtonType),
    clear(),
    buttons() -> [AbstractButton?],
    button_role(button: *AbstractButtonType) -> DialogButtonBox::ButtonRole,
    set_standard_buttons(buttons: StandardButtons),
    standard_buttons() -> StandardButtons,
    standard_button(button: *AbstractButtonType) -> DialogButtonBox::StandardButton,
    button(which: DialogButtonBox::StandardButton) -> PushButton?,
    set_center_buttons(center: bool),
    center_buttons() -> bool,
    [event] clicked(button: *AbstractButtonType),
    [event] accepted(),
    [event] help_requested(),
    [event] rejected(),
    [replace] change_event(event: *EventType),
    [replace] event(event: *EventType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
