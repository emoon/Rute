/// 
/// This class is part of [Accessibility for QWidget Applications](Accessibility%20for%20QWidget%20Applications)
/// 
/// 
/// Accessible applications can be used by people who are not able to
/// use applications by conventional means.
/// 
/// The functions in this class are used for communication between
/// accessible applications (also called AT Servers) and
/// accessibility tools (AT Clients), such as screen readers and
/// braille displays. Clients and servers communicate in the following way:
/// 
/// * *AT Servers* notify the clients about events through calls to the updateAccessibility() function.
/// * *AT Clients* request information about the objects in the server. The QAccessibleInterface class is the core interface, and encapsulates this information in a pure virtual API. Implementations of the interface are provided by Qt through the queryAccessibleInterface() API.
/// 
/// The communication between servers and clients is initialized by
/// the setRootObject() function. Function pointers can be installed
/// to replace or extend the default behavior of the static functions
/// in QAccessible.
/// 
/// Qt supports Microsoft Active Accessibility (MSAA), MacOS
/// Accessibility, and the Unix/X11 AT-SPI standard. Other backends
/// can be supported using QAccessibleBridge.
/// 
/// In the Unix/X11 AT-SPI implementation, applications become accessible
/// when two conditions are met:
/// * org.a11y.Status.IsEnabled DBus property is true
/// * org.a11y.Status.ScreenReaderEnabled DBus property is true
/// An alternative to setting the DBus AT-SPI properties is to set
/// the QT_LINUX_ACCESSIBILITY_ALWAYS_ON environment variable.
/// 
/// In addition to QAccessible's static functions, Qt offers one
/// generic interface, QAccessibleInterface, that can be used to wrap
/// all widgets and objects (e.g., QPushButton). This single
/// interface provides all the metadata necessary for the assistive
/// technologies. Qt provides implementations of this interface for
/// its built-in widgets as plugins.
/// 
/// When you develop custom widgets, you can create custom subclasses
/// of QAccessibleInterface and distribute them as plugins (using
/// QAccessiblePlugin) or compile them into the application.
/// Likewise, Qt's predefined accessibility support can be built as
/// plugin (the default) or directly into the Qt library. The main
/// advantage of using plugins is that the accessibility classes are
/// only loaded into memory if they are actually used; they don't
/// slow down the common case where no assistive technology is being
/// used.
/// 
/// Qt also includes two convenience classes, QAccessibleObject and
/// QAccessibleWidget, that inherit from QAccessibleInterface and
/// provide the lowest common denominator of metadata (e.g., widget
/// geometry, window title, basic help text). You can use them as
/// base classes when wrapping your custom QObject or QWidget
/// subclasses.
/// 
/// **See also:** [`AccessibleInterface`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Accessible {
    qt_check_for_qgadget_macro(),
    /// 
    /// Installs the InterfaceFactory *factory.* The last factory added
    /// is the first one used by queryAccessibleInterface().
    [static] install_factory(arg0: Accessible::InterfaceFactory),
    /// 
    /// Removes *factory* from the list of installed InterfaceFactories.
    [static] remove_factory(arg0: Accessible::InterfaceFactory),
    [static] install_update_handler(arg0: Accessible::UpdateHandler) -> Accessible::UpdateHandler,
    [static] install_root_object_handler(arg0: Accessible::RootObjectHandler) -> Accessible::RootObjectHandler,
    [static] install_activation_observer(arg0: Accessible::ActivationObserver *),
    [static] remove_activation_observer(arg0: Accessible::ActivationObserver *),
    /// 
    /// If a QAccessibleInterface implementation exists for the given *object,*
    /// this function returns a pointer to the implementation; otherwise it
    /// returns 0.
    /// 
    /// The function calls all installed factory functions (from most
    /// recently installed to least recently installed) until one is found
    /// that provides an interface for the class of *object.* If no
    /// factory can provide an accessibility implementation for the class
    /// the function loads installed accessibility plugins, and tests if
    /// any of the plugins can provide the implementation.
    /// 
    /// If no implementation for the object's class is available, the
    /// function tries to find an implementation for the object's parent
    /// class, using the above strategy.
    /// 
    /// All interfaces are managed by an internal cache and should not be deleted.
    [static] query_accessible_interface(arg0: *ObjectType) -> AccessibleInterface?,
    /// 
    /// Returns the unique ID for the QAccessibleInterface *iface.*
    [static] unique_id(iface: *AccessibleInterfaceType) -> Accessible::Id,
    /// 
    /// Returns the QAccessibleInterface belonging to the *id.*
    /// 
    /// Returns 0 if the id is invalid.
    [static] accessible_interface(unique_id: Accessible::Id) -> AccessibleInterface?,
    /// 
    /// Must only be called exactly once per interface *iface.*
    /// This is implicitly called when calling queryAccessibleInterface,
    /// calling this function is only required when QAccessibleInterfaces
    /// are instantiated with the operator. This is not recommended,
    /// whenever possible use the default functions and let [queryAccessibleInterface()](queryAccessibleInterface())
    /// 
    /// take care of this.
    /// 
    /// When it is necessary to reimplement the QAccessibleInterface::child() function
    /// and returning the child after constructing it, this function needs to be called.
    [static] register_accessible_interface(iface: *AccessibleInterfaceType) -> Accessible::Id,
    /// 
    /// Removes the interface belonging to this *id* from the cache and
    /// deletes it. The id becomes invalid an may be re-used by the
    /// cache.
    [static] delete_accessible_interface(unique_id: Accessible::Id),
    /// 
    /// Notifies about a change that might be relevant for accessibility clients.
    /// 
    /// *event* provides details about the change. These include the source
    /// of the change and the nature of the change. The *event* should
    /// contain enough information give meaningful notifications.
    /// 
    /// For example, the type `ValueChange` indicates that the position of
    /// a slider has been changed.
    /// 
    /// Call this function whenever the state of your accessible object or
    /// one of its sub-elements has been changed either programmatically
    /// (e.g. by calling QLabel::setText()) or by user interaction.
    /// 
    /// If there are no accessibility tools listening to this event, the
    /// performance penalty for calling this function is small, but if
    /// determining the parameters of the call is expensive you can test
    /// QAccessible::isActive() to avoid unnecessary computation.
    /// 
    [static] update_accessibility(event: *AccessibleEventType),
    /// 
    /// Returns `true` if the platform requested accessibility information.
    /// 
    /// This function will return false until a tool such as a screen reader
    /// accessed the accessibility framework. It is still possible to use
    /// [QAccessible::queryAccessibleInterface()](QAccessible::queryAccessibleInterface())
    /// even if accessibility is not
    /// active. But there will be no notifications sent to the platform.
    /// 
    /// It is recommended to use this function to prevent expensive notifications
    /// via updateAccessibility() when they are not needed.
    [static] is_active() -> bool,
    [static] set_active(active: bool),
    /// 
    /// Sets the root object of the accessible objects of this application
    /// to *object.* All other accessible objects are reachable using object
    /// navigation from the root object.
    /// 
    /// Normally, it isn't necessary to call this function, because Qt sets
    /// the QApplication object as the root object immediately before the
    /// event loop is entered in QApplication::exec().
    /// 
    /// Use QAccessible::installRootObjectHandler() to redirect the function
    /// call to a customized handler function.
    /// 
    /// **See also:** [`query_accessible_interface()`]
    [static] set_root_object(object: *ObjectType),
    [static] cleanup(),
    [static] q_accessible_text_boundary_helper(cursor: &TextCursorType, boundary_type: Accessible::TextBoundaryType) -> Pair<int,,
}

[org_name(QAccessible)]
enum Event {
    /// A sound has been played by an object
    SoundPlayed,
    /// A system alert (e.g., a message from a QMessageBox)
    Alert,
    /// A window has been activated (i.e., a new window has gained focus on the desktop).
    ForegroundChanged,
    /// A menu has been opened on the menubar (Qt uses PopupMenuStart for all menus).
    MenuStart,
    /// A menu has been closed (Qt uses PopupMenuEnd for all menus).
    MenuEnd,
    /// A pop-up menu has opened.
    PopupMenuStart,
    /// A pop-up menu has closed.
    PopupMenuEnd,
    /// Context help (QWhatsThis) for an object is initiated.
    ContextHelpStart,
    /// Context help (QWhatsThis) for an object is finished.
    ContextHelpEnd,
    /// A drag and drop operation is about to be initiated.
    DragDropStart,
    /// A drag and drop operation is about to finished.
    DragDropEnd,
    /// A dialog (QDialog) has been set visible.
    DialogStart,
    /// A dialog (QDialog) has been hidden
    DialogEnd,
    /// A scrollbar scroll operation is about to start; this may be caused by a mouse press on the slider handle, for example.
    ScrollingStart,
    /// A scrollbar scroll operation has ended (the mouse has released the slider handle).
    ScrollingEnd,
    /// A menu item is triggered.
    MenuCommand,
    /// An action has been changed.
    ActionChanged,
    /// 
    ActiveDescendantChanged,
    /// 
    AttributeChanged,
    /// The contents of a text document have changed.
    DocumentContentChanged,
    /// A document has been loaded.
    DocumentLoadComplete,
    /// A document load has been stopped.
    DocumentLoadStopped,
    /// A document reload has been initiated.
    DocumentReload,
    /// The end position of the display text for a hypertext link has changed.
    HyperlinkEndIndexChanged,
    /// The number of anchors in a hypertext link has changed, perhaps because the display text has been split to provide more than one link.
    HyperlinkNumberOfAnchorsChanged,
    /// The link for the selected hypertext link has changed.
    HyperlinkSelectedLinkChanged,
    /// A hypertext link has been activated, perhaps by being clicked or via a key press.
    HypertextLinkActivated,
    /// A hypertext link has been selected.
    HypertextLinkSelected,
    /// The start position of the display text for a hypertext link has changed.
    HyperlinkStartIndexChanged,
    /// The display text for a hypertext link has changed.
    HypertextChanged,
    /// 
    HypertextNLinksChanged,
    /// 
    ObjectAttributeChanged,
    /// 
    PageChanged,
    /// 
    SectionChanged,
    /// A table caption has been changed.
    TableCaptionChanged,
    /// The description of a table column, typically found in the column's header, has been changed.
    TableColumnDescriptionChanged,
    /// A table column header has been changed.
    TableColumnHeaderChanged,
    TableModelChanged,
    /// The description of a table row, typically found in the row's header, has been changed.
    TableRowDescriptionChanged,
    /// A table row header has been changed.
    TableRowHeaderChanged,
    /// The summary of a table has been changed.
    TableSummaryChanged,
    TextAttributeChanged,
    TextCaretMoved,
    /// A text column has been changed.
    TextColumnChanged,
    TextInserted,
    TextRemoved,
    TextUpdated,
    TextSelectionChanged,
    /// 
    VisibleDataChanged,
    /// A new object is created.
    ObjectCreated,
    /// An object is deleted.
    ObjectDestroyed,
    /// An object is displayed; for example, with QWidget::show().
    ObjectShow,
    /// An object is hidden; for example, with QWidget::hide(). Any children the object that is hidden has do not send this event. It is not sent when an object is hidden as it is being obcured by others.
    ObjectHide,
    /// A layout or item view has added, removed, or moved an object (Qt does not use this event).
    ObjectReorder,
    /// An object has gained keyboard focus.
    Focus,
    /// The selection has changed in a menu or item view.
    Selection,
    /// An item has been added to the selection in an item view.
    SelectionAdd,
    /// An item has been removed from an item view selection.
    SelectionRemove,
    /// Several changes to a selection has occurred in an item view.
    SelectionWithin,
    StateChanged,
    /// An object's location on the screen has changed.
    LocationChanged,
    /// The QAccessible::Name property of an object has changed.
    NameChanged,
    /// The object's QAccessible::Description changed.
    DescriptionChanged,
    ValueChanged,
    /// An object's parent object changed.
    ParentChanged,
    /// The QAccessible::Help text property of an object has changed.
    HelpChanged,
    /// The default QAccessible::Action for the accessible object has changed.
    DefaultActionChanged,
    /// The keyboard accelerator for an action has been changed.
    AcceleratorChanged,
    InvalidEvent,
}

[org_name(QAccessible)]
enum Role {
    /// The object has no role. This usually indicates an invalid object.
    NoRole,
    /// The title bar caption of a window.
    TitleBar,
    /// A menu bar from which menus are opened by the user.
    MenuBar,
    /// A scroll bar, which allows the user to scroll the visible area.
    ScrollBar,
    /// A grip that the user can drag to change the size of widgets.
    Grip,
    /// An object that represents a sound.
    Sound,
    /// An object that represents the mouse cursor.
    Cursor,
    /// An object that represents the system caret (text cursor).
    Caret,
    /// An object that is used to alert the user.
    AlertMessage,
    /// A top level window.
    Window,
    /// The client area in a window.
    Client,
    /// A menu which lists options that the user can select to perform an action.
    PopupMenu,
    /// An item in a menu or menu bar.
    MenuItem,
    /// A tool tip which provides information about other objects.
    ToolTip,
    /// The application's main window.
    Application,
    /// A document, for example in an office application.
    Document,
    /// A generic container.
    Pane,
    /// An object that displays a graphical representation of data.
    Chart,
    /// A dialog box.
    Dialog,
    /// An object that represents a border.
    Border,
    /// An object that represents a logical grouping of other objects.
    Grouping,
    /// A separator that divides space into logical areas.
    Separator,
    /// A tool bar, which groups widgets that the user accesses frequently.
    ToolBar,
    /// A status bar.
    StatusBar,
    /// A table representing data in a grid of rows and columns.
    Table,
    /// A header for a column of data.
    ColumnHeader,
    /// A header for a row of data.
    RowHeader,
    /// A column of cells, usually within a table.
    Column,
    /// A row of cells, usually within a table.
    Row,
    /// A cell in a table.
    Cell,
    /// A link to something else.
    Link,
    /// An object that displays help in a separate, short lived window.
    HelpBalloon,
    /// An object that provids interactive help.
    Assistant,
    /// A list of items, from which the user can select one or more items.
    List,
    /// An item in a list of items.
    ListItem,
    /// A list of items in a tree structure.
    Tree,
    /// An item in a tree structure.
    TreeItem,
    /// A page tab that the user can select to switch to a different page in a dialog.
    PageTab,
    /// A property page where the user can change options and settings.
    PropertyPage,
    /// An indicator that represents a current value or item.
    Indicator,
    /// A graphic or picture, e.g. an icon.
    Graphic,
    /// Static text, such as labels for other widgets.
    StaticText,
    /// Editable text such as a line or text edit.
    EditableText,
    /// A button.
    Button,
    PushButton,
    /// An object that represents an option that can be checked or unchecked. Some options provide a "mixed" state, e.g. neither checked nor unchecked.
    CheckBox,
    /// An object that represents an option that is mutually exclusive with other options.
    RadioButton,
    /// A list of choices that the user can select from.
    ComboBox,
    /// The object displays the progress of an operation in progress.
    ProgressBar,
    /// An object that represents a dial or knob.
    Dial,
    /// A hotkey field that allows the user to enter a key sequence.
    HotkeyField,
    /// A slider that allows the user to select a value within a given range.
    Slider,
    /// A spin box widget that allows the user to enter a value within a given range.
    SpinBox,
    /// An object that displays graphics that the user can interact with.
    Canvas,
    /// An object that displays an animation.
    Animation,
    /// An object that represents a mathematical equation.
    Equation,
    /// A button that drops down a list of items.
    ButtonDropDown,
    /// A button that drops down a menu.
    ButtonMenu,
    /// A button that drops down a grid.
    ButtonDropGrid,
    /// Blank space between other objects.
    Whitespace,
    /// A list of page tabs.
    PageTabList,
    /// A clock displaying time.
    Clock,
    /// A splitter distributing available space between its child widgets.
    Splitter,
    /// An object that can contain layered children, e.g. in a stack.
    LayeredPane,
    /// A terminal or command line interface.
    Terminal,
    /// The object represents the desktop or workspace.
    Desktop,
    /// A paragraph of text (usually found in documents).
    Paragraph,
    /// HTML document, usually in a browser.
    WebDocument,
    /// A section (in a document).
    Section,
    /// A dialog that lets the user choose a color.
    ColorChooser,
    /// A footer in a page (usually in documents).
    Footer,
    /// A web form containing controls.
    Form,
    /// A heading in a document.
    Heading,
    /// A section whose content is parenthetic or ancillary to the main content of the resource.
    Note,
    /// A part of the document or web page that is complementary to the main content, usually a landmark (see WAI-ARIA).
    ComplementaryContent,
    /// The first value to be used for user defined roles.
    UserRole,
}

[org_name(QAccessible)]
enum Text {
    /// The name of the object. This can be used both as an identifier or a short description by accessible clients.
    Name,
    /// A short text describing the object.
    Description,
    /// The value of the object.
    Value,
    /// A longer text giving information about how to use the object.
    Help,
    /// The keyboard shortcut that executes the object's default action.
    Accelerator,
    DebugDescription,
    /// The first value to be used for user defined text.
    UserText,
}

[org_name(QAccessible)]
enum RelationFlag {
    /// The first object is the label of the second object.
    Label,
    /// The first object is labelled by the second object.
    Labelled,
    /// The first object controls the second object.
    Controller,
    /// The first object is controlled by the second object.
    Controlled,
    /// Used as a mask to specify that we are interesting in information about all relations Implementations of relations() return a combination of these flags. Some values are mutually exclusive.
    AllRelations,
}

[org_name(QAccessible)]
enum InterfaceType {
    /// For text that supports selections or is more than one line. Simple labels do not need to implement this interface.
    TextInterface,
    EditableTextInterface,
    /// For objects that are used to manipulate a value, for example slider or scroll bar.
    ValueInterface,
    /// For interactive objects that allow the user to trigger an action. Basically everything that allows for example mouse interaction.
    ActionInterface,
    ImageInterface,
    /// For lists, tables and trees.
    TableInterface,
    /// For cells in a TableInterface object.
    TableCellInterface,
}

[org_name(QAccessible)]
enum TextBoundaryType {
    /// Use individual characters as boundary.
    CharBoundary,
    /// Use words as boundaries.
    WordBoundary,
    /// Use sentences as boundary.
    SentenceBoundary,
    /// Use paragraphs as boundary.
    ParagraphBoundary,
    /// Use newlines as boundary.
    LineBoundary,
    /// No boundary (use the whole text).
    NoBoundary,
}

// vim: syntax=rust expandtab ts=4 sw=4
