enum Event {
    SoundPlayed,
    Alert,
    ForegroundChanged,
    MenuStart,
    MenuEnd,
    PopupMenuStart,
    PopupMenuEnd,
    ContextHelpStart,
    ContextHelpEnd,
    DragDropStart,
    DragDropEnd,
    DialogStart,
    DialogEnd,
    ScrollingStart,
    ScrollingEnd,
    MenuCommand,
    ActionChanged,
    ActiveDescendantChanged,
    AttributeChanged,
    DocumentContentChanged,
    DocumentLoadComplete,
    DocumentLoadStopped,
    DocumentReload,
    HyperlinkEndIndexChanged,
    HyperlinkNumberOfAnchorsChanged,
    HyperlinkSelectedLinkChanged,
    HypertextLinkActivated,
    HypertextLinkSelected,
    HyperlinkStartIndexChanged,
    HypertextChanged,
    HypertextNLinksChanged,
    ObjectAttributeChanged,
    PageChanged,
    SectionChanged,
    TableCaptionChanged,
    TableColumnDescriptionChanged,
    TableColumnHeaderChanged,
    TableModelChanged,
    TableRowDescriptionChanged,
    TableRowHeaderChanged,
    TableSummaryChanged,
    TextAttributeChanged,
    TextCaretMoved,
    TextColumnChanged,
    TextInserted,
    TextRemoved,
    TextUpdated,
    TextSelectionChanged,
    VisibleDataChanged,
    ObjectCreated,
    ObjectDestroyed,
    ObjectShow,
    ObjectHide,
    ObjectReorder,
    Focus,
    Selection,
    SelectionAdd,
    SelectionRemove,
    SelectionWithin,
    StateChanged,
    LocationChanged,
    NameChanged,
    DescriptionChanged,
    ValueChanged,
    ParentChanged,
    HelpChanged,
    DefaultActionChanged,
    AcceleratorChanged,
    InvalidEvent,
}

enum Role {
    NoRole,
    TitleBar,
    MenuBar,
    ScrollBar,
    Grip,
    Sound,
    Cursor,
    Caret,
    AlertMessage,
    Window,
    Client,
    PopupMenu,
    MenuItem,
    ToolTip,
    Application,
    Document,
    Pane,
    Chart,
    Dialog,
    Border,
    Grouping,
    Separator,
    ToolBar,
    StatusBar,
    Table,
    ColumnHeader,
    RowHeader,
    Column,
    Row,
    Cell,
    Link,
    HelpBalloon,
    Assistant,
    List,
    ListItem,
    Tree,
    TreeItem,
    PageTab,
    PropertyPage,
    Indicator,
    Graphic,
    StaticText,
    EditableText,
    Button,
    PushButton,
    CheckBox,
    RadioButton,
    ComboBox,
    ProgressBar,
    Dial,
    HotkeyField,
    Slider,
    SpinBox,
    Canvas,
    Animation,
    Equation,
    ButtonDropDown,
    ButtonMenu,
    ButtonDropGrid,
    Whitespace,
    PageTabList,
    Clock,
    Splitter,
    LayeredPane,
    Terminal,
    Desktop,
    Paragraph,
    WebDocument,
    Section,
    ColorChooser,
    Footer,
    Form,
    Heading,
    Note,
    ComplementaryContent,
    UserRole,
}

enum Text {
    Name,
    Description,
    Value,
    Help,
    Accelerator,
    DebugDescription,
    UserText,
}

enum RelationFlag {
    Label,
    Labelled,
    Controller,
    Controlled,
    AllRelations,
}

enum InterfaceType {
    TextInterface,
    EditableTextInterface,
    ValueInterface,
    ActionInterface,
    ImageInterface,
    TableInterface,
    TableCellInterface,
}

enum TextBoundaryType {
    CharBoundary,
    WordBoundary,
    SentenceBoundary,
    ParagraphBoundary,
    LineBoundary,
    NoBoundary,
}


struct Accessible {
    qt_check_for_qgadget_macro(),
    [static] install_factory(arg0: InterfaceFactory),
    [static] remove_factory(arg0: InterfaceFactory),
    [static] install_update_handler(arg0: UpdateHandler) -> UpdateHandler,
    [static] install_root_object_handler(arg0: RootObjectHandler) -> RootObjectHandler,
    [static] install_activation_observer(arg0: Accessible::ActivationObserver *),
    [static] remove_activation_observer(arg0: Accessible::ActivationObserver *),
    [static] query_accessible_interface(arg0: &ObjectType) -> &AccessibleInterfaceType,
    [static] unique_id(iface: &AccessibleInterfaceType) -> Id,
    [static] accessible_interface(unique_id: Id) -> &AccessibleInterfaceType,
    [static] register_accessible_interface(iface: &AccessibleInterfaceType) -> Id,
    [static] delete_accessible_interface(unique_id: Id),
    [static] update_accessibility(event: &AccessibleEventType),
    [static] is_active() -> bool,
    [static] set_active(active: bool),
    [static] set_root_object(object: &ObjectType),
    [static] cleanup(),
    [static] q_accessible_text_boundary_helper(cursor: &TextCursorType, boundary_type: Accessible::TextBoundaryType) -> Pair<int,Type,
}

// vim: syntax=rust expandtab ts=4 sw=4
