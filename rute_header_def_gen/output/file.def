/// 
/// QFile is an I/O device for reading and writing text and binary
/// files and [resources](The%20Qt%20Resource%20System)
/// . A QFile may be
/// used by itself or, more conveniently, with a QTextStream or
/// QDataStream.
/// 
/// The file name is usually passed in the constructor, but it can be
/// set at any time using setFileName(). QFile expects the file
/// separator to be '/' regardless of operating system. The use of
/// other separators (e.g., '\\') is not supported.
/// 
/// You can check for a file's existence using exists(), and remove a
/// file using remove(). (More advanced file system related operations
/// are provided by QFileInfo and QDir.)
/// 
/// The file is opened with open(), closed with close(), and flushed
/// with flush(). Data is usually read and written using QDataStream
/// or QTextStream, but you can also call the QIODevice-inherited
/// functions read(), readLine(), readAll(), write(). QFile also
/// inherits getChar(), putChar(), and ungetChar(), which work one
/// character at a time.
/// 
/// The size of the file is returned by size(). You can get the
/// current file position using pos(), or move to a new file position
/// using seek(). If you've reached the end of the file, atEnd()
/// returns `true.`
/// 
/// # Reading Files Directly
/// 
/// The following example reads a text file line by line:
/// 
/// The QIODevice::Text flag passed to open() tells Qt to convert
/// Windows-style line terminators ("\\r\\n") into C++-style
/// terminators ("\\n"). By default, QFile assumes binary, i.e. it
/// doesn't perform any conversion on the bytes stored in the file.
/// 
/// # Using Streams to Read Files
/// 
/// The next example uses QTextStream to read a text file
/// line by line:
/// 
/// QTextStream takes care of converting the 8-bit data stored on
/// disk into a 16-bit Unicode QString. By default, it assumes that
/// the user system's local 8-bit encoding is used (e.g., UTF-8
/// on most unix based operating systems; see QTextCodec::codecForLocale() for
/// details). This can be changed using [QTextStream::setCodec().](QTextStream::setCodec().)
/// 
/// To write text, we can use operator<<(), which is overloaded to
/// take a QTextStream on the left and various data types (including
/// QString) on the right:
/// 
/// QDataStream is similar, in that you can use operator<<() to write
/// data and operator>>() to read it back. See the class
/// documentation for details.
/// 
/// When you use QFile, QFileInfo, and QDir to access the file system
/// with Qt, you can use Unicode file names. On Unix, these file
/// names are converted to an 8-bit encoding. If you want to use
/// standard C++ APIs ( `<cstdio>` or `<iostream>)` or
/// platform-specific APIs to access files instead of QFile, you can
/// use the encodeName() and decodeName() functions to convert
/// between Unicode file names and 8-bit file names.
/// 
/// On Unix, there are some special system files (e.g. in `/proc)` for which
/// size() will always return 0, yet you may still be able to read more data
/// from such a file; the data is generated in direct response to you calling
/// read(). In this case, however, you cannot use atEnd() to determine if
/// there is more data to read (since atEnd() will return true for a file that
/// claims to have size 0). Instead, you should either call readAll(), or call
/// read() or readLine() repeatedly until no more data can be read. The next
/// example uses QTextStream to read `/proc/modules` line by line:
/// 
/// # Signals
/// 
/// Unlike other QIODevice implementations, such as QTcpSocket, QFile does not
/// emit the aboutToClose(), bytesWritten(), or readyRead() signals. This
/// implementation detail means that QFile is not suitable for reading and
/// writing certain types of files, such as device files on Unix platforms.
/// 
/// # Platform Specific Issues
/// 
/// File permissions are handled differently on Unix-like systems and
/// Windows. In a non [writable](QIODevice::isWritable())
/// 
/// directory on Unix-like systems, files cannot be created. This is not always
/// the case on Windows, where, for instance, the 'My Documents'
/// directory usually is not writable, but it is still possible to
/// create files in it.
/// 
/// Qt's understanding of file permissions is limited, which affects especially
/// the [QFile::setPermissions()](QFile::setPermissions())
/// function. On Windows, Qt will set only the
/// legacy read-only flag, and that only when none of the Write* flags are
/// passed. Qt does not manipulate access control lists (ACLs), which makes this
/// function mostly useless for NTFS volumes. It may still be of use for USB
/// sticks that use VFAT file systems. POSIX ACLs are not manipulated, either.
/// 
/// **See also:** QTextStream
/// QDataStream
/// QFileInfo
/// QDir
/// {The Qt Resource System}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct File : FileDevice {
    /// 
    /// Returns the name set by setFileName() or to the QFile
    /// constructors.
    /// 
    /// **See also:** setFileName()
    /// QFileInfo::fileName()
    [event] file_name() -> String,
    /// 
    /// Sets the *name* of the file. The name can have no path, a
    /// relative path, or an absolute path.
    /// 
    /// Do not call this function if the file has already been opened.
    /// 
    /// If the file name has no path or a relative path, the path used
    /// will be the application's current directory path
    /// *at the time of the open()* call.
    /// 
    /// Example:
    /// 
    /// Note that the directory separator works for all operating
    /// systems supported by Qt.
    /// 
    /// **See also:** fileName()
    /// QFileInfo
    /// QDir
    set_file_name(name: String),
    /// 
    /// Converts *fileName* to the local 8-bit
    /// encoding determined by the user's locale. This is sufficient for
    /// file names that the user chooses. File names hard-coded into the
    /// application should only use 7-bit ASCII filename characters.
    /// 
    /// **See also:** decodeName()
    [static] encode_name(file_name: String) -> ByteArray,
    /// 
    /// **Overloads**
    /// Returns the Unicode version of the given *localFileName.* See
    /// encodeName() for details.
    /// 
    /// This does the reverse of QFile::encodeName() using *localFileName.*
    /// 
    /// **See also:** encodeName()
    [static] decode_name(local_file_name: &ByteArrayType) -> String,
    /// 
    /// **Overloads**
    /// Returns the Unicode version of the given *localFileName.* See
    /// encodeName() for details.
    /// 
    /// This does the reverse of QFile::encodeName() using *localFileName.*
    /// 
    /// **See also:** encodeName()
    [static] decode_name_2(local_file_name: *char) -> String,
    /// 
    /// **Overloads**
    /// Returns `true` if the file specified by fileName() exists; otherwise
    /// returns `false.`
    /// 
    /// **See also:** fileName()
    /// setFileName()
    /// 
    /// Returns `true` if the file specified by *fileName* exists; otherwise
    /// returns `false.`
    /// 
    /// **Note**: If *fileName* is a symlink that points to a non-existing
    /// file, false is returned.
    exists() -> bool,
    /// 
    /// **Overloads**
    /// Returns `true` if the file specified by fileName() exists; otherwise
    /// returns `false.`
    /// 
    /// **See also:** fileName()
    /// setFileName()
    /// 
    /// Returns `true` if the file specified by *fileName* exists; otherwise
    /// returns `false.`
    /// 
    /// **Note**: If *fileName* is a symlink that points to a non-existing
    /// file, false is returned.
    [static] exists_2(file_name: String) -> bool,
    /// 
    /// Use symLinkTarget() instead.
    /// 
    /// Use symLinkTarget() instead.
    read_link() -> String,
    /// 
    /// Use symLinkTarget() instead.
    /// 
    /// Use symLinkTarget() instead.
    [static] read_link_2(file_name: String) -> String,
    /// 
    /// **Overloads**
    /// Returns the absolute path of the file or directory a symlink (or shortcut
    /// on Windows) points to, or a an empty string if the object isn't a symbolic
    /// link.
    /// 
    /// This name may not represent an existing file; it is only a string.
    /// QFile::exists() returns `true` if the symlink points to an existing file.
    /// 
    /// **See also:** fileName()
    /// setFileName()
    /// 
    /// Returns the absolute path of the file or directory referred to by the
    /// symlink (or shortcut on Windows) specified by *fileName,* or returns an
    /// empty string if the *fileName* does not correspond to a symbolic link.
    /// 
    /// This name may not represent an existing file; it is only a string.
    /// QFile::exists() returns `true` if the symlink points to an existing file.
    sym_link_target() -> String,
    /// 
    /// **Overloads**
    /// Returns the absolute path of the file or directory a symlink (or shortcut
    /// on Windows) points to, or a an empty string if the object isn't a symbolic
    /// link.
    /// 
    /// This name may not represent an existing file; it is only a string.
    /// QFile::exists() returns `true` if the symlink points to an existing file.
    /// 
    /// **See also:** fileName()
    /// setFileName()
    /// 
    /// Returns the absolute path of the file or directory referred to by the
    /// symlink (or shortcut on Windows) specified by *fileName,* or returns an
    /// empty string if the *fileName* does not correspond to a symbolic link.
    /// 
    /// This name may not represent an existing file; it is only a string.
    /// QFile::exists() returns `true` if the symlink points to an existing file.
    [static] sym_link_target_2(file_name: String) -> String,
    /// 
    /// Removes the file specified by fileName(). Returns `true` if successful;
    /// otherwise returns `false.`
    /// 
    /// The file is closed before it is removed.
    /// 
    /// **See also:** setFileName()
    /// 
    /// **Overloads**
    /// Removes the file specified by the *fileName* given.
    /// 
    /// Returns `true` if successful; otherwise returns `false.`
    /// 
    /// **See also:** remove()
    remove() -> bool,
    /// 
    /// Removes the file specified by fileName(). Returns `true` if successful;
    /// otherwise returns `false.`
    /// 
    /// The file is closed before it is removed.
    /// 
    /// **See also:** setFileName()
    /// 
    /// **Overloads**
    /// Removes the file specified by the *fileName* given.
    /// 
    /// Returns `true` if successful; otherwise returns `false.`
    /// 
    /// **See also:** remove()
    [static] remove_2(file_name: String) -> bool,
    /// 
    /// Renames the file currently specified by fileName() to *newName.*
    /// Returns `true` if successful; otherwise returns `false.`
    /// 
    /// If a file with the name *newName* already exists, rename() returns `false`
    /// (i.e., QFile will not overwrite it).
    /// 
    /// The file is closed before it is renamed.
    /// 
    /// If the rename operation fails, Qt will attempt to copy this file's
    /// contents to *newName,* and then remove this file, keeping only
    /// *newName.* If that copy operation fails or this file can't be removed,
    /// the destination file *newName* is removed to restore the old state.
    /// 
    /// **See also:** setFileName()
    /// 
    /// **Overloads**
    /// Renames the file *oldName* to *newName.* Returns `true` if
    /// successful; otherwise returns `false.`
    /// 
    /// If a file with the name *newName* already exists, rename() returns `false`
    /// (i.e., QFile will not overwrite it).
    /// 
    /// **See also:** rename()
    rename(new_name: String) -> bool,
    /// 
    /// Renames the file currently specified by fileName() to *newName.*
    /// Returns `true` if successful; otherwise returns `false.`
    /// 
    /// If a file with the name *newName* already exists, rename() returns `false`
    /// (i.e., QFile will not overwrite it).
    /// 
    /// The file is closed before it is renamed.
    /// 
    /// If the rename operation fails, Qt will attempt to copy this file's
    /// contents to *newName,* and then remove this file, keeping only
    /// *newName.* If that copy operation fails or this file can't be removed,
    /// the destination file *newName* is removed to restore the old state.
    /// 
    /// **See also:** setFileName()
    /// 
    /// **Overloads**
    /// Renames the file *oldName* to *newName.* Returns `true` if
    /// successful; otherwise returns `false.`
    /// 
    /// If a file with the name *newName* already exists, rename() returns `false`
    /// (i.e., QFile will not overwrite it).
    /// 
    /// **See also:** rename()
    [static] rename_2(old_name: String, new_name: String) -> bool,
    /// 
    /// Creates a link named *linkName* that points to the file currently specified by
    /// fileName(). What a link is depends on the underlying filesystem (be it a
    /// shortcut on Windows or a symbolic link on Unix). Returns `true` if successful;
    /// otherwise returns `false.`
    /// 
    /// This function will not overwrite an already existing entity in the file system;
    /// in this case, `link()` will return false and set [error()](QFile::)
    /// to
    /// return [RenameError](QFile::)
    /// 
    /// 
    /// **Note**: To create a valid link on Windows, *linkName* must have a `.lnk` file extension.
    /// 
    /// **See also:** setFileName()
    /// 
    /// **Overloads**
    /// Creates a link named *linkName* that points to the file *fileName.* What a link is
    /// depends on the underlying filesystem (be it a shortcut on Windows
    /// or a symbolic link on Unix). Returns `true` if successful; otherwise
    /// returns `false.`
    /// 
    /// **See also:** link()
    link(new_name: String) -> bool,
    /// 
    /// Creates a link named *linkName* that points to the file currently specified by
    /// fileName(). What a link is depends on the underlying filesystem (be it a
    /// shortcut on Windows or a symbolic link on Unix). Returns `true` if successful;
    /// otherwise returns `false.`
    /// 
    /// This function will not overwrite an already existing entity in the file system;
    /// in this case, `link()` will return false and set [error()](QFile::)
    /// to
    /// return [RenameError](QFile::)
    /// 
    /// 
    /// **Note**: To create a valid link on Windows, *linkName* must have a `.lnk` file extension.
    /// 
    /// **See also:** setFileName()
    /// 
    /// **Overloads**
    /// Creates a link named *linkName* that points to the file *fileName.* What a link is
    /// depends on the underlying filesystem (be it a shortcut on Windows
    /// or a symbolic link on Unix). Returns `true` if successful; otherwise
    /// returns `false.`
    /// 
    /// **See also:** link()
    [static] link_2(oldname: String, new_name: String) -> bool,
    /// 
    /// Copies the file currently specified by fileName() to a file called
    /// *newName.* Returns `true` if successful; otherwise returns `false.`
    /// 
    /// Note that if a file with the name *newName* already exists,
    /// copy() returns `false` (i.e. QFile will not overwrite it).
    /// 
    /// The source file is closed before it is copied.
    /// 
    /// **See also:** setFileName()
    /// 
    /// **Overloads**
    /// Copies the file *fileName* to *newName.* Returns `true` if successful;
    /// otherwise returns `false.`
    /// 
    /// If a file with the name *newName* already exists, copy() returns `false`
    /// (i.e., QFile will not overwrite it).
    /// 
    /// **See also:** rename()
    copy(new_name: String) -> bool,
    /// 
    /// Copies the file currently specified by fileName() to a file called
    /// *newName.* Returns `true` if successful; otherwise returns `false.`
    /// 
    /// Note that if a file with the name *newName* already exists,
    /// copy() returns `false` (i.e. QFile will not overwrite it).
    /// 
    /// The source file is closed before it is copied.
    /// 
    /// **See also:** setFileName()
    /// 
    /// **Overloads**
    /// Copies the file *fileName* to *newName.* Returns `true` if successful;
    /// otherwise returns `false.`
    /// 
    /// If a file with the name *newName* already exists, copy() returns `false`
    /// (i.e., QFile will not overwrite it).
    /// 
    /// **See also:** rename()
    [static] copy_2(file_name: String, new_name: String) -> bool,
    /// 
    /// Opens the file using OpenMode *mode,* returning true if successful;
    /// otherwise false.
    /// 
    /// The *mode* must be QIODevice::ReadOnly, QIODevice::WriteOnly, or
    /// QIODevice::ReadWrite. It may also have additional flags, such as
    /// QIODevice::Text and QIODevice::Unbuffered.
    /// 
    /// **Note**: In [WriteOnly](QIODevice::)
    /// or [ReadWrite](QIODevice::)
    /// 
    /// mode, if the relevant file does not already exist, this function
    /// will try to create a new file before opening it.
    /// 
    /// **See also:** QIODevice::OpenMode
    /// setFileName()
    /// 
    /// **Overloads**
    /// Opens the existing file handle *fh* in the given *mode.*
    /// *handleFlags* may be used to specify additional options.
    /// Returns `true` if successful; otherwise returns `false.`
    /// 
    /// Example:
    /// 
    /// When a QFile is opened using this function, behaviour of close() is
    /// controlled by the AutoCloseHandle flag.
    /// If AutoCloseHandle is specified, and this function succeeds,
    /// then calling close() closes the adopted handle.
    /// Otherwise, close() does not actually close the file, but only flushes it.
    /// 
    /// **Warning:**
    /// * If *fh* does not refer to a regular file, e.g., it is `stdin,` `stdout,` or `stderr,` you may not be able to seek(). size() returns `0` in those cases. See QIODevice::isSequential() for more information.
    /// * Since this function opens the file without specifying the file name, you cannot use this QFile with a QFileInfo.
    /// 
    /// **See also:** close()
    /// 
    /// **Note for the Windows Platform**
    /// 
    /// *fh* must be opened in binary mode (i.e., the mode string must contain
    /// 'b', as in or ) when accessing files and other random-access
    /// devices. Qt will translate the end-of-line characters if you pass
    /// QIODevice::Text to *mode.* Sequential devices, such as stdin and stdout,
    /// are unaffected by this limitation.
    /// 
    /// You need to enable support for console applications in order to use the
    /// stdin, stdout and stderr streams at the console. To do this, add the
    /// following declaration to your application's project file:
    /// 
    /// 
    /// **Overloads**
    /// Opens the existing file descriptor *fd* in the given *mode.*
    /// *handleFlags* may be used to specify additional options.
    /// Returns `true` if successful; otherwise returns `false.`
    /// 
    /// When a QFile is opened using this function, behaviour of close() is
    /// controlled by the AutoCloseHandle flag.
    /// If AutoCloseHandle is specified, and this function succeeds,
    /// then calling close() closes the adopted handle.
    /// Otherwise, close() does not actually close the file, but only flushes it.
    /// 
    /// The QFile that is opened using this function is automatically set
    /// to be in raw mode; this means that the file input/output functions
    /// are slow. If you run into performance issues, you should try to
    /// use one of the other open functions.
    /// 
    /// **Warning**: If *fd* is not a regular file, e.g, it is 0 ( `stdin),`
    /// 1 ( `stdout),` or 2 ( `stderr),` you may not be able to seek(). In
    /// those cases, size() returns `0.` See QIODevice::isSequential()
    /// for more information.
    /// 
    /// **Warning**: Since this function opens the file without specifying the file name,
    /// you cannot use this QFile with a QFileInfo.
    /// 
    /// **See also:** close()
    [event] open(flags: IODevice::OpenMode) -> bool,
    /// 
    /// Opens the file using OpenMode *mode,* returning true if successful;
    /// otherwise false.
    /// 
    /// The *mode* must be QIODevice::ReadOnly, QIODevice::WriteOnly, or
    /// QIODevice::ReadWrite. It may also have additional flags, such as
    /// QIODevice::Text and QIODevice::Unbuffered.
    /// 
    /// **Note**: In [WriteOnly](QIODevice::)
    /// or [ReadWrite](QIODevice::)
    /// 
    /// mode, if the relevant file does not already exist, this function
    /// will try to create a new file before opening it.
    /// 
    /// **See also:** QIODevice::OpenMode
    /// setFileName()
    /// 
    /// **Overloads**
    /// Opens the existing file handle *fh* in the given *mode.*
    /// *handleFlags* may be used to specify additional options.
    /// Returns `true` if successful; otherwise returns `false.`
    /// 
    /// Example:
    /// 
    /// When a QFile is opened using this function, behaviour of close() is
    /// controlled by the AutoCloseHandle flag.
    /// If AutoCloseHandle is specified, and this function succeeds,
    /// then calling close() closes the adopted handle.
    /// Otherwise, close() does not actually close the file, but only flushes it.
    /// 
    /// **Warning:**
    /// * If *fh* does not refer to a regular file, e.g., it is `stdin,` `stdout,` or `stderr,` you may not be able to seek(). size() returns `0` in those cases. See QIODevice::isSequential() for more information.
    /// * Since this function opens the file without specifying the file name, you cannot use this QFile with a QFileInfo.
    /// 
    /// **See also:** close()
    /// 
    /// **Note for the Windows Platform**
    /// 
    /// *fh* must be opened in binary mode (i.e., the mode string must contain
    /// 'b', as in or ) when accessing files and other random-access
    /// devices. Qt will translate the end-of-line characters if you pass
    /// QIODevice::Text to *mode.* Sequential devices, such as stdin and stdout,
    /// are unaffected by this limitation.
    /// 
    /// You need to enable support for console applications in order to use the
    /// stdin, stdout and stderr streams at the console. To do this, add the
    /// following declaration to your application's project file:
    /// 
    /// 
    /// **Overloads**
    /// Opens the existing file descriptor *fd* in the given *mode.*
    /// *handleFlags* may be used to specify additional options.
    /// Returns `true` if successful; otherwise returns `false.`
    /// 
    /// When a QFile is opened using this function, behaviour of close() is
    /// controlled by the AutoCloseHandle flag.
    /// If AutoCloseHandle is specified, and this function succeeds,
    /// then calling close() closes the adopted handle.
    /// Otherwise, close() does not actually close the file, but only flushes it.
    /// 
    /// The QFile that is opened using this function is automatically set
    /// to be in raw mode; this means that the file input/output functions
    /// are slow. If you run into performance issues, you should try to
    /// use one of the other open functions.
    /// 
    /// **Warning**: If *fd* is not a regular file, e.g, it is 0 ( `stdin),`
    /// 1 ( `stdout),` or 2 ( `stderr),` you may not be able to seek(). In
    /// those cases, size() returns `0.` See QIODevice::isSequential()
    /// for more information.
    /// 
    /// **Warning**: Since this function opens the file without specifying the file name,
    /// you cannot use this QFile with a QFileInfo.
    /// 
    /// **See also:** close()
    open_2(f: *i32, io_flags: IODevice::OpenMode, handle_flags: FileDevice::FileHandleFlags) -> bool,
    /// 
    /// Opens the file using OpenMode *mode,* returning true if successful;
    /// otherwise false.
    /// 
    /// The *mode* must be QIODevice::ReadOnly, QIODevice::WriteOnly, or
    /// QIODevice::ReadWrite. It may also have additional flags, such as
    /// QIODevice::Text and QIODevice::Unbuffered.
    /// 
    /// **Note**: In [WriteOnly](QIODevice::)
    /// or [ReadWrite](QIODevice::)
    /// 
    /// mode, if the relevant file does not already exist, this function
    /// will try to create a new file before opening it.
    /// 
    /// **See also:** QIODevice::OpenMode
    /// setFileName()
    /// 
    /// **Overloads**
    /// Opens the existing file handle *fh* in the given *mode.*
    /// *handleFlags* may be used to specify additional options.
    /// Returns `true` if successful; otherwise returns `false.`
    /// 
    /// Example:
    /// 
    /// When a QFile is opened using this function, behaviour of close() is
    /// controlled by the AutoCloseHandle flag.
    /// If AutoCloseHandle is specified, and this function succeeds,
    /// then calling close() closes the adopted handle.
    /// Otherwise, close() does not actually close the file, but only flushes it.
    /// 
    /// **Warning:**
    /// * If *fh* does not refer to a regular file, e.g., it is `stdin,` `stdout,` or `stderr,` you may not be able to seek(). size() returns `0` in those cases. See QIODevice::isSequential() for more information.
    /// * Since this function opens the file without specifying the file name, you cannot use this QFile with a QFileInfo.
    /// 
    /// **See also:** close()
    /// 
    /// **Note for the Windows Platform**
    /// 
    /// *fh* must be opened in binary mode (i.e., the mode string must contain
    /// 'b', as in or ) when accessing files and other random-access
    /// devices. Qt will translate the end-of-line characters if you pass
    /// QIODevice::Text to *mode.* Sequential devices, such as stdin and stdout,
    /// are unaffected by this limitation.
    /// 
    /// You need to enable support for console applications in order to use the
    /// stdin, stdout and stderr streams at the console. To do this, add the
    /// following declaration to your application's project file:
    /// 
    /// 
    /// **Overloads**
    /// Opens the existing file descriptor *fd* in the given *mode.*
    /// *handleFlags* may be used to specify additional options.
    /// Returns `true` if successful; otherwise returns `false.`
    /// 
    /// When a QFile is opened using this function, behaviour of close() is
    /// controlled by the AutoCloseHandle flag.
    /// If AutoCloseHandle is specified, and this function succeeds,
    /// then calling close() closes the adopted handle.
    /// Otherwise, close() does not actually close the file, but only flushes it.
    /// 
    /// The QFile that is opened using this function is automatically set
    /// to be in raw mode; this means that the file input/output functions
    /// are slow. If you run into performance issues, you should try to
    /// use one of the other open functions.
    /// 
    /// **Warning**: If *fd* is not a regular file, e.g, it is 0 ( `stdin),`
    /// 1 ( `stdout),` or 2 ( `stderr),` you may not be able to seek(). In
    /// those cases, size() returns `0.` See QIODevice::isSequential()
    /// for more information.
    /// 
    /// **Warning**: Since this function opens the file without specifying the file name,
    /// you cannot use this QFile with a QFileInfo.
    /// 
    /// **See also:** close()
    open_3(fd: i32, io_flags: IODevice::OpenMode, handle_flags: FileDevice::FileHandleFlags) -> bool,
    /// 
    [event] size() -> i64,
    /// 
    /// 
    /// **Overloads**
    /// Sets *fileName* to size (in bytes) *sz.* Returns `true` if
    /// the resize succeeds; false otherwise. If *sz* is larger than *fileName* currently is the new bytes will be set to 0, if *sz* is
    /// smaller the file is simply truncated.
    /// 
    /// **Warning**: This function can fail if the file doesn't exist.
    /// 
    /// **See also:** resize()
    [event] resize(sz: i64) -> bool,
    /// 
    /// 
    /// **Overloads**
    /// Sets *fileName* to size (in bytes) *sz.* Returns `true` if
    /// the resize succeeds; false otherwise. If *sz* is larger than *fileName* currently is the new bytes will be set to 0, if *sz* is
    /// smaller the file is simply truncated.
    /// 
    /// **Warning**: This function can fail if the file doesn't exist.
    /// 
    /// **See also:** resize()
    [static] resize_2(filename: String, sz: i64) -> bool,
    /// 
    /// 
    /// **Overloads**
    /// Returns the complete OR-ed together combination of
    /// QFile::Permission for *fileName.*
    [event] permissions() -> FileDevice::Permissions,
    /// 
    /// 
    /// **Overloads**
    /// Returns the complete OR-ed together combination of
    /// QFile::Permission for *fileName.*
    [static] permissions_2(filename: String) -> FileDevice::Permissions,
    /// 
    /// Sets the permissions for the file to the *permissions* specified.
    /// Returns `true` if successful, or `false` if the permissions cannot be
    /// modified.
    /// 
    /// **Warning**: This function does not manipulate ACLs, which may limit its
    /// effectiveness.
    /// 
    /// **See also:** permissions()
    /// setFileName()
    /// 
    /// **Overloads**
    /// Sets the permissions for *fileName* file to *permissions.*
    [event] set_permissions(permission_spec: FileDevice::Permissions) -> bool,
    /// 
    /// Sets the permissions for the file to the *permissions* specified.
    /// Returns `true` if successful, or `false` if the permissions cannot be
    /// modified.
    /// 
    /// **Warning**: This function does not manipulate ACLs, which may limit its
    /// effectiveness.
    /// 
    /// **See also:** permissions()
    /// setFileName()
    /// 
    /// **Overloads**
    /// Sets the permissions for *fileName* file to *permissions.*
    [static] set_permissions_2(filename: String, permission_spec: FileDevice::Permissions) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
