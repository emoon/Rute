struct Layout : Object, LayoutItem {
    margin() -> i32,
    spacing() -> i32,
    set_margin(arg0: i32),
    set_spacing(arg0: i32),
    set_contents_margins(left: i32, top: i32, right: i32, bottom: i32),
    set_contents_margins(margins: &MarginsType),
    get_contents_margins(left: &i32, top: &i32, right: &i32, bottom: &i32),
    contents_margins() -> MarginsType,
    contents_rect() -> RectType,
    set_alignment(w: &WidgetType, alignment: Rute::Alignment) -> bool,
    set_alignment(l: &LayoutType, alignment: Rute::Alignment) -> bool,
    set_menu_bar(w: &WidgetType),
    menu_bar() -> &WidgetType,
    parent_widget() -> &WidgetType,
    invalidate(),
    activate() -> bool,
    update(),
    add_widget(w: &WidgetType),
    add_item(arg0: &LayoutItemType),
    remove_widget(w: &WidgetType),
    remove_item(arg0: &LayoutItemType),
    expanding_directions() -> Rute::Orientations,
    minimum_size() -> SizeType,
    maximum_size() -> SizeType,
    item_at(index: i32) -> &LayoutItemType,
    take_at(index: i32) -> &LayoutItemType,
    index_of(arg0: &WidgetType) -> i32,
    count() -> i32,
    is_empty() -> bool,
    replace_widget(from: &WidgetType, to: &WidgetType, options: Rute::FindChildOptions) -> &LayoutItemType,
    total_height_for_width(w: i32) -> i32,
    total_minimum_size() -> SizeType,
    total_maximum_size() -> SizeType,
    total_size_hint() -> SizeType,
    layout() -> &LayoutType,
    set_enabled(arg0: bool),
    is_enabled() -> bool,
    closest_acceptable_size(w: &WidgetType, s: &SizeType) -> SizeType,
    widget_event(arg0: &EventType),
    child_event(e: &ChildEventType),
    add_child_layout(l: &LayoutType),
    add_child_widget(w: &WidgetType),
    adopt_layout(layout: &LayoutType) -> bool,
    alignment_rect(arg0: &RectType) -> RectType,
}

// vim: syntax=rust expandtab ts=4 sw=4
