/// 
/// Property meta-data is obtained from an object's meta-object. See
/// QMetaObject::property() and QMetaObject::propertyCount() for
/// details.
/// 
/// # Property Meta-Data
/// 
/// A property has a name() and a type(), as well as various
/// attributes that specify its behavior: isReadable(), isWritable(),
/// isDesignable(), isScriptable(), revision(), and isStored().
/// 
/// If the property is an enumeration, isEnumType() returns `true;` if the
/// property is an enumeration that is also a flag (i.e. its values
/// can be combined using the OR operator), isEnumType() and
/// isFlagType() both return true. The enumerator for these types is
/// available from enumerator().
/// 
/// The property's values are set and retrieved with read(), write(),
/// and reset(); they can also be changed through QObject's set and get
/// functions. See QObject::setProperty() and QObject::property() for
/// details.
/// 
/// # Copying and Assignment
/// 
/// QMetaProperty objects can be copied by value. However, each copy will
/// refer to the same underlying property meta-data.
/// 
/// **See also:** QMetaObject
/// QMetaEnum
/// QMetaMethod
/// {Qt's Property System}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct MetaProperty {
    /// 
    /// Returns this property's name.
    /// 
    /// **See also:** type()
    /// typeName()
    name() -> char?,
    /// 
    /// Returns the name of this property's type.
    /// 
    /// **See also:** type()
    /// name()
    type_name() -> char?,
    /// 
    /// Returns the name of this property's type.
    /// 
    /// **See also:** type()
    /// name()
    /// 
    /// Returns this property's type. The return value is one
    /// of the values of the QVariant::Type enumeration.
    /// 
    /// **See also:** userType()
    /// typeName()
    /// name()
    type() -> Variant::Type,
    /// 
    /// Returns this property's user type. The return value is one
    /// of the values that are registered with QMetaType, or QMetaType::UnknownType if
    /// the type is not registered.
    /// 
    /// **See also:** type()
    /// QMetaType
    /// typeName()
    user_type() -> i32,
    /// 
    /// Returns this property's index.
    property_index() -> i32,
    /// 
    /// Returns `true` if this property is readable; otherwise returns `false.`
    /// 
    /// **See also:** isWritable()
    /// read()
    /// isValid()
    is_readable() -> bool,
    /// 
    /// Returns `true` if this property is writable; otherwise returns
    /// false.
    /// 
    /// **See also:** isReadable()
    /// write()
    is_writable() -> bool,
    /// 
    /// Returns `true` if this property can be reset to a default value; otherwise
    /// returns `false.`
    /// 
    /// **See also:** reset()
    is_resettable() -> bool,
    /// 
    /// Returns `true` if this property is designable for the given *object;*
    /// otherwise returns `false.`
    /// 
    /// If no *object* is given, the function returns `false` if the
    /// `Q_PROPERTY()` 's `DESIGNABLE` attribute is false; otherwise
    /// returns `true` (if the attribute is true or is a function or expression).
    /// 
    /// **See also:** isScriptable()
    /// isStored()
    is_designable(obj: *ObjectType) -> bool,
    /// 
    /// Returns `true` if the property is scriptable for the given *object;*
    /// otherwise returns `false.`
    /// 
    /// If no *object* is given, the function returns `false` if the
    /// `Q_PROPERTY()` 's `SCRIPTABLE` attribute is false; otherwise returns
    /// true (if the attribute is true or is a function or expression).
    /// 
    /// **See also:** isDesignable()
    /// isStored()
    is_scriptable(obj: *ObjectType) -> bool,
    /// 
    /// Returns `true` if the property is stored for *object;* otherwise returns
    /// false.
    /// 
    /// If no *object* is given, the function returns `false` if the
    /// `Q_PROPERTY()` 's `STORED` attribute is false; otherwise returns
    /// true (if the attribute is true or is a function or expression).
    /// 
    /// **See also:** isDesignable()
    /// isScriptable()
    is_stored(obj: *ObjectType) -> bool,
    /// 
    /// Returns `true` if the property is editable for the given *object;*
    /// otherwise returns `false.`
    /// 
    /// If no *object* is given, the function returns `false` if the
    /// `Q_PROPERTY()` 's `EDITABLE` attribute is false; otherwise returns
    /// true (if the attribute is true or is a function or expression).
    /// 
    /// **See also:** isDesignable()
    /// isScriptable()
    /// isStored()
    is_editable(obj: *ObjectType) -> bool,
    /// 
    /// Returns `true` if this property is designated as the `USER`
    /// property, i.e., the one that the user can edit for *object* or
    /// that is significant in some other way. Otherwise it returns
    /// false. e.g., the `text` property is the `USER` editable property
    /// of a QLineEdit.
    /// 
    /// If *object* is null, the function returns `false` if the `Q_PROPERTY()` 's `USER` attribute is false. Otherwise it returns
    /// true.
    /// 
    /// **See also:** QMetaObject::userProperty()
    /// isDesignable()
    /// isScriptable()
    is_user(obj: *ObjectType) -> bool,
    /// 
    /// Returns `true` if the property is constant; otherwise returns `false.`
    /// 
    /// A property is constant if the `Q_PROPERTY()` 's `CONSTANT` attribute
    /// is set.
    is_constant() -> bool,
    /// 
    /// Returns `true` if the property is final; otherwise returns `false.`
    /// 
    /// A property is final if the `Q_PROPERTY()` 's `FINAL` attribute
    /// is set.
    is_final() -> bool,
    /// 
    /// Returns `true` if the property's type is an enumeration value that
    /// is used as a flag; otherwise returns `false.`
    /// 
    /// Flags can be combined using the OR operator. A flag type is
    /// implicitly also an enum type.
    /// 
    /// **See also:** isEnumType()
    /// enumerator()
    /// QMetaEnum::isFlag()
    is_flag_type() -> bool,
    /// 
    /// Returns `true` if the property's type is an enumeration value;
    /// otherwise returns `false.`
    /// 
    /// **See also:** enumerator()
    /// isFlagType()
    is_enum_type() -> bool,
    /// 
    /// Returns the enumerator if this property's type is an enumerator
    /// type; otherwise the returned value is undefined.
    /// 
    /// **See also:** isEnumType()
    /// isFlagType()
    enumerator() -> MetaEnum,
    /// 
    /// Returns `true` if this property has a corresponding change notify signal;
    /// otherwise returns `false.`
    /// 
    /// **See also:** notifySignal()
    has_notify_signal() -> bool,
    /// 
    /// Returns the QMetaMethod instance of the property change notifying signal if
    /// one was specified, otherwise returns an invalid QMetaMethod.
    /// 
    /// **See also:** hasNotifySignal()
    /// 
    /// Returns the index of the property change notifying signal if one was
    /// specified, otherwise returns -1.
    /// 
    /// **See also:** hasNotifySignal()
    notify_signal() -> MetaMethod,
    /// 
    /// Returns the index of the property change notifying signal if one was
    /// specified, otherwise returns -1.
    /// 
    /// **See also:** hasNotifySignal()
    notify_signal_index() -> i32,
    /// 
    /// Returns the property revision if one was
    /// specified by REVISION, otherwise returns 0.
    revision() -> i32,
    /// 
    /// Reads the property's value from the given *object.* Returns the value
    /// if it was able to read it; otherwise returns an invalid variant.
    /// 
    /// **See also:** write()
    /// reset()
    /// isReadable()
    /// 
    /// Reads the property's value from the given *gadget.* Returns the value
    /// if it was able to read it; otherwise returns an invalid variant.
    /// 
    /// This function should only be used if this is a property of a Q_GADGET
    read(obj: *ObjectType) -> Variant,
    /// 
    /// Writes *value* as the property's value to the given *object.* Returns
    /// true if the write succeeded; otherwise returns `false.`
    /// 
    /// If *value* is not of the same type type as the property, a conversion
    /// is attempted. An empty QVariant() is equivalent to a call to reset()
    /// if this property is resetable, or setting a default-constructed object
    /// otherwise.
    /// 
    /// **See also:** read()
    /// reset()
    /// isWritable()
    /// 
    /// Writes *value* as the property's value to the given *gadget.* Returns
    /// true if the write succeeded; otherwise returns `false.`
    /// 
    /// This function should only be used if this is a property of a Q_GADGET
    write(obj: *ObjectType, value: &VariantType) -> bool,
    /// 
    /// Resets the property for the given *object* with a reset method.
    /// Returns `true` if the reset worked; otherwise returns `false.`
    /// 
    /// Reset methods are optional; only a few properties support them.
    /// 
    /// **See also:** read()
    /// write()
    /// 
    /// Resets the property for the given *gadget* with a reset method.
    /// Returns `true` if the reset worked; otherwise returns `false.`
    /// 
    /// Reset methods are optional; only a few properties support them.
    /// 
    /// This function should only be used if this is a property of a Q_GADGET
    reset(obj: *ObjectType) -> bool,
    /// 
    /// Reads the property's value from the given *gadget.* Returns the value
    /// if it was able to read it; otherwise returns an invalid variant.
    /// 
    /// This function should only be used if this is a property of a Q_GADGET
    read_on_gadget(gadget: *void) -> Variant,
    /// 
    /// Writes *value* as the property's value to the given *gadget.* Returns
    /// true if the write succeeded; otherwise returns `false.`
    /// 
    /// This function should only be used if this is a property of a Q_GADGET
    write_on_gadget(gadget: *void, value: &VariantType) -> bool,
    /// 
    /// Resets the property for the given *gadget* with a reset method.
    /// Returns `true` if the reset worked; otherwise returns `false.`
    /// 
    /// Reset methods are optional; only a few properties support them.
    /// 
    /// This function should only be used if this is a property of a Q_GADGET
    reset_on_gadget(gadget: *void) -> bool,
    has_std_cpp_set() -> bool,
    /// 
    /// Returns `true` if this property is valid (readable); otherwise
    /// returns `false.`
    /// 
    /// **See also:** isReadable()
    is_valid() -> bool,
    enclosing_meta_object() -> MetaObject?,
}

// vim: syntax=rust expandtab ts=4 sw=4
