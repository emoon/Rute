///     \class QMetaProperty
///     \inmodule QtCore
///     \brief The QMetaProperty class provides meta-data about a property.
/// 
///     \ingroup objectmodel
/// 
///     Property meta-data is obtained from an object's meta-object. See
///     QMetaObject::property() and QMetaObject::propertyCount() for
///     details.
/// 
///     \section1 Property Meta-Data
/// 
///     A property has a name() and a type(), as well as various
///     attributes that specify its behavior: isReadable(), isWritable(),
///     isDesignable(), isScriptable(), revision(), and isStored().
/// 
///     If the property is an enumeration, isEnumType() returns \c true; if the
///     property is an enumeration that is also a flag (i.e. its values
///     can be combined using the OR operator), isEnumType() and
///     isFlagType() both return true. The enumerator for these types is
///     available from enumerator().
/// 
///     The property's values are set and retrieved with read(), write(),
///     and reset(); they can also be changed through QObject's set and get
///     functions. See QObject::setProperty() and QObject::property() for
///     details.
/// 
///     \section1 Copying and Assignment
/// 
///     QMetaProperty objects can be copied by value. However, each copy will
///     refer to the same underlying property meta-data.
/// 
///     \sa QMetaObject, QMetaEnum, QMetaMethod, {Qt's Property System}
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct MetaProperty {
    ///     Returns this property's name.
    /// 
    ///     \sa type(), typeName()
    name() -> char?,
    ///     Returns the name of this property's type.
    /// 
    ///     \sa type(), name()
    type_name() -> char?,
    ///     Returns this property's type. The return value is one
    ///     of the values of the QVariant::Type enumeration.
    /// 
    ///     \sa userType(), typeName(), name()
    type() -> Variant::Type,
    user_type() -> i32,
    ///   \since 4.6
    /// 
    ///   Returns this property's index.
    property_index() -> i32,
    is_readable() -> bool,
    is_writable() -> bool,
    ///     Returns \c true if this property can be reset to a default value; otherwise
    ///     returns \c false.
    /// 
    ///     \sa reset()
    is_resettable() -> bool,
    ///     Returns \c true if this property is designable for the given \a object;
    ///     otherwise returns \c false.
    /// 
    ///     If no \a object is given, the function returns \c false if the
    ///     \c{Q_PROPERTY()}'s \c DESIGNABLE attribute is false; otherwise
    ///     returns \c true (if the attribute is true or is a function or expression).
    /// 
    ///     \sa isScriptable(), isStored()
    is_designable(obj: *ObjectType) -> bool,
    ///     Returns \c true if the property is scriptable for the given \a object;
    ///     otherwise returns \c false.
    /// 
    ///     If no \a object is given, the function returns \c false if the
    ///     \c{Q_PROPERTY()}'s \c SCRIPTABLE attribute is false; otherwise returns
    ///     true (if the attribute is true or is a function or expression).
    /// 
    ///     \sa isDesignable(), isStored()
    is_scriptable(obj: *ObjectType) -> bool,
    ///     Returns \c true if the property is stored for \a object; otherwise returns
    ///     false.
    /// 
    ///     If no \a object is given, the function returns \c false if the
    ///     \c{Q_PROPERTY()}'s \c STORED attribute is false; otherwise returns
    ///     true (if the attribute is true or is a function or expression).
    /// 
    ///     \sa isDesignable(), isScriptable()
    is_stored(obj: *ObjectType) -> bool,
    ///     \obsolete
    /// 
    ///     Returns \c true if the property is editable for the given \a object;
    ///     otherwise returns \c false.
    /// 
    ///     If no \a object is given, the function returns \c false if the
    ///     \c{Q_PROPERTY()}'s \c EDITABLE attribute is false; otherwise returns
    ///     true (if the attribute is true or is a function or expression).
    /// 
    ///     \sa isDesignable(), isScriptable(), isStored()
    is_editable(obj: *ObjectType) -> bool,
    ///     Returns \c true if this property is designated as the \c USER
    ///     property, i.e., the one that the user can edit for \a object or
    ///     that is significant in some other way.  Otherwise it returns
    ///     false. e.g., the \c text property is the \c USER editable property
    ///     of a QLineEdit.
    /// 
    ///     If \a object is null, the function returns \c false if the \c
    ///     {Q_PROPERTY()}'s \c USER attribute is false. Otherwise it returns
    ///     true.
    /// 
    ///     \sa QMetaObject::userProperty(), isDesignable(), isScriptable()
    is_user(obj: *ObjectType) -> bool,
    ///     \since 4.6
    ///     Returns \c true if the property is constant; otherwise returns \c false.
    /// 
    ///     A property is constant if the \c{Q_PROPERTY()}'s \c CONSTANT attribute
    ///     is set.
    is_constant() -> bool,
    ///     \since 4.6
    ///     Returns \c true if the property is final; otherwise returns \c false.
    /// 
    ///     A property is final if the \c{Q_PROPERTY()}'s \c FINAL attribute
    ///     is set.
    is_final() -> bool,
    ///     Returns \c true if the property's type is an enumeration value that
    ///     is used as a flag; otherwise returns \c false.
    /// 
    ///     Flags can be combined using the OR operator. A flag type is
    ///     implicitly also an enum type.
    /// 
    ///     \sa isEnumType(), enumerator(), QMetaEnum::isFlag()
    is_flag_type() -> bool,
    ///     Returns \c true if the property's type is an enumeration value;
    ///     otherwise returns \c false.
    /// 
    ///     \sa enumerator(), isFlagType()
    is_enum_type() -> bool,
    ///     Returns the enumerator if this property's type is an enumerator
    ///     type; otherwise the returned value is undefined.
    /// 
    ///     \sa isEnumType(), isFlagType()
    enumerator() -> MetaEnum,
    has_notify_signal() -> bool,
    notify_signal() -> MetaMethod,
    notify_signal_index() -> i32,
    revision() -> i32,
    ///     Reads the property's value from the given \a object. Returns the value
    ///     if it was able to read it; otherwise returns an invalid variant.
    /// 
    ///     \sa write(), reset(), isReadable()
    read(obj: *ObjectType) -> Variant,
    ///     Writes \a value as the property's value to the given \a object. Returns
    ///     true if the write succeeded; otherwise returns \c false.
    /// 
    ///     If \a value is not of the same type type as the property, a conversion
    ///     is attempted. An empty QVariant() is equivalent to a call to reset()
    ///     if this property is resetable, or setting a default-constructed object
    ///     otherwise.
    /// 
    ///     \sa read(), reset(), isWritable()
    write(obj: *ObjectType, value: &VariantType) -> bool,
    ///     Resets the property for the given \a object with a reset method.
    ///     Returns \c true if the reset worked; otherwise returns \c false.
    /// 
    ///     Reset methods are optional; only a few properties support them.
    /// 
    ///     \sa read(), write()
    reset(obj: *ObjectType) -> bool,
    ///     \since 5.5
    /// 
    ///     Reads the property's value from the given \a gadget. Returns the value
    ///     if it was able to read it; otherwise returns an invalid variant.
    /// 
    ///     This function should only be used if this is a property of a Q_GADGET
    read_on_gadget(gadget: *void) -> Variant,
    ///     \since 5.5
    /// 
    ///     Writes \a value as the property's value to the given \a gadget. Returns
    ///     true if the write succeeded; otherwise returns \c false.
    /// 
    ///     This function should only be used if this is a property of a Q_GADGET
    write_on_gadget(gadget: *void, value: &VariantType) -> bool,
    ///     \since 5.5
    /// 
    ///     Resets the property for the given \a gadget with a reset method.
    ///     Returns \c true if the reset worked; otherwise returns \c false.
    /// 
    ///     Reset methods are optional; only a few properties support them.
    /// 
    ///     This function should only be used if this is a property of a Q_GADGET
    reset_on_gadget(gadget: *void) -> bool,
    ///     \internal
    /// 
    ///     Returns \c true if the property has a C++ setter function that
    ///     follows Qt's standard "name" / "setName" pattern. Designer and uic
    ///     query hasStdCppSet() in order to avoid expensive
    ///     QObject::setProperty() calls. All properties in Qt [should] follow
    ///     this pattern.
    has_std_cpp_set() -> bool,
    is_valid() -> bool,
    enclosing_meta_object() -> MetaObject?,
}

// vim: syntax=rust expandtab ts=4 sw=4
