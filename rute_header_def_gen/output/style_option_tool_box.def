/// 
/// QStyleOptionToolBox contains all the information that QStyle
/// functions need to draw QToolBox.
/// 
/// For performance reasons, the access to the member variables is
/// direct (i.e., using the `.` or `->` operator). This low-level feel
/// makes the structures straightforward to use and emphasizes that
/// these are simply parameters used by the style functions.
/// 
/// For an example demonstrating how style options can be used, see
/// the [Styles](widgets/styles)
/// example.
/// 
/// **See also:** [`StyleOption`]
/// [`ToolBox`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct StyleOptionToolBox : StyleOption {
}

[org_name(QStyleOptionToolBox)]
enum StyleOptionType {
    /// The type of style option provided ( [SO_ToolBox](SO_ToolBox)
 for this class). The type is used internally by QStyleOption, its subclasses, and qstyleoption_cast() to determine the type of style option. In general you do not need to worry about this unless you want to create your own QStyleOption subclass and your own styles.
    Type = 7,
}

[org_name(QStyleOptionToolBox)]
enum StyleOptionVersion {
    /// 2 The version is used by QStyleOption subclasses to implement extensions without breaking compatibility. If you use qstyleoption_cast(), you normally do not need to check it.
    Version = 2,
}

[org_name(QStyleOptionToolBox)]
enum TabPosition {
    /// The tab is the first (i.e., top-most) tab in the toolbox.
    Beginning = 0,
    /// The tab is placed in the middle of the toolbox.
    Middle = 1,
    /// The tab is placed at the bottom of the toolbox.
    End = 2,
    /// There is only one tab in the toolbox.
    OnlyOneTab = 3,
}

[org_name(QStyleOptionToolBox)]
enum SelectedPosition {
    /// The tab is not adjacent to a selected tab (or is the selected tab).
    NotAdjacent = 0,
    /// The next tab (typically the tab on the right) is selected.
    NextIsSelected = 1,
    /// The previous tab (typically the tab on the left) is selected.
    PreviousIsSelected = 2,
}

// vim: syntax=rust expandtab ts=4 sw=4
