/// 
/// Modern operating systems usually provide a special area on the desktop,
/// called the *system tray* or *notification area* , where long-running
/// applications can display icons and short messages.
/// 
/// ![The system tray on Windows XP.](system-tray.png)
/// 
/// The QSystemTrayIcon class can be used on the following platforms:
/// 
/// * All supported versions of Windows.
/// * All window managers and independent tray implementations for X11 that implement the [http://standards.freedesktop.org/systemtray-spec/systemtray-spec-0.2.html freedesktop.org](http://standards.freedesktop.org/systemtray-spec/systemtray-spec-0.2.html%20freedesktop.org)
/// XEmbed system tray specification.
/// * All X11 desktop environments that implement the D-Bus [http://www.freedesktop.org/wiki/Specifications/StatusNotifierItem/StatusNotifierItem](http://www.freedesktop.org/wiki/Specifications/StatusNotifierItem/StatusNotifierItem)
/// specification, including recent versions of KDE and Unity.
/// * All supported versions of MacOS .
/// 
/// To check whether a system tray is present on the user's desktop,
/// call the QSystemTrayIcon::isSystemTrayAvailable() static function.
/// 
/// To add a system tray entry, create a QSystemTrayIcon object, call setContextMenu()
/// to provide a context menu for the icon, and call show() to make it visible in the
/// system tray. Status notification messages ("balloon messages") can be displayed at
/// any time using showMessage().
/// 
/// If the system tray is unavailable when a system tray icon is constructed, but
/// becomes available later, QSystemTrayIcon will automatically add an entry for the
/// application in the system tray if the icon is [visible.](visible.)
/// 
/// The activated() signal is emitted when the user activates the icon.
/// 
/// Only on X11, when a tooltip is requested, the QSystemTrayIcon receives a QHelpEvent
/// of type QEvent::ToolTip. Additionally, the QSystemTrayIcon receives wheel events of
/// type QEvent::Wheel. These are not supported on any other platform.
/// 
/// **See also:** [`DesktopServices`]
/// [`DesktopWidget`]
/// {Desktop Integration}
/// {System Tray Icon Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct SystemTrayIcon : Object {
    /// 
    /// Sets the specified *menu* to be the context menu for the system tray icon.
    /// 
    /// The menu will pop up when the user requests the context menu for the system
    /// tray icon by clicking the mouse button.
    /// 
    /// On MacOS , this is currenly converted to a NSMenu, so the
    /// aboutToHide() signal is not emitted.
    /// 
    /// **Note**: The system tray icon does not take ownership of the menu. You must
    /// ensure that it is deleted at the appropriate time by, for example, creating
    /// the menu with a suitable parent object.
    set_context_menu(menu: *MenuType),
    /// 
    /// Returns the current context menu for the system tray entry.
    context_menu() -> Menu?,
    /// 
    /// On Windows, the system tray icon size is 16x16; on X11, the preferred size is
    /// 22x22. The icon will be scaled to the appropriate size as necessary.
    icon() -> Icon,
    set_icon(icon: &IconType),
    /// 
    /// On some systems, the tooltip's length is limited. The tooltip will be truncated
    /// if necessary.
    tool_tip() -> String,
    set_tool_tip(tip: String),
    /// 
    /// Returns `true` if the system tray is available; otherwise returns `false.`
    /// 
    /// If the system tray is currently unavailable but becomes available later,
    /// QSystemTrayIcon will automatically add an entry in the system tray if it
    /// is [visible.](visible.)
    /// 
    [static] is_system_tray_available() -> bool,
    /// 
    /// Returns `true` if the system tray supports balloon messages; otherwise returns `false.`
    /// 
    /// **See also:** [`show_message()`]
    [static] supports_messages() -> bool,
    is_visible() -> bool,
    set_visible(visible: bool),
    /// 
    /// Shows the icon in the system tray.
    /// 
    /// **See also:** [`hide()`]
    /// visible
    /// 
    /// Shows a balloon message for the entry with the given *title,* *message* and
    /// *icon* for the time specified in *millisecondsTimeoutHint.* *title* and *message*
    /// must be plain text strings.
    /// 
    /// Message can be clicked by the user; the messageClicked() signal will emitted when
    /// this occurs.
    /// 
    /// Note that display of messages are dependent on the system configuration and user
    /// preferences, and that messages may not appear at all. Hence, it should not be
    /// relied upon as the sole means for providing critical information.
    /// 
    /// On Windows, the *millisecondsTimeoutHint* is usually ignored by the system
    /// when the application has focus.
    /// 
    /// Has been turned into a slot in Qt 5.2.
    /// 
    /// **See also:** [`show()`]
    /// [`supports_messages()`]
    /// 
    /// **Overloads** showMessage()
    /// Shows a balloon message for the entry with the given *title,* *message,*
    /// and custom icon *icon* for the time specified in *millisecondsTimeoutHint.*
    /// 
    show(),
    /// 
    /// Hides the system tray entry.
    /// 
    /// **See also:** [`show()`]
    /// visible
    hide(),
    /// 
    /// Shows a balloon message for the entry with the given *title,* *message* and
    /// *icon* for the time specified in *millisecondsTimeoutHint.* *title* and *message*
    /// must be plain text strings.
    /// 
    /// Message can be clicked by the user; the messageClicked() signal will emitted when
    /// this occurs.
    /// 
    /// Note that display of messages are dependent on the system configuration and user
    /// preferences, and that messages may not appear at all. Hence, it should not be
    /// relied upon as the sole means for providing critical information.
    /// 
    /// On Windows, the *millisecondsTimeoutHint* is usually ignored by the system
    /// when the application has focus.
    /// 
    /// Has been turned into a slot in Qt 5.2.
    /// 
    /// **See also:** [`show()`]
    /// [`supports_messages()`]
    /// 
    /// **Overloads** showMessage()
    /// Shows a balloon message for the entry with the given *title,* *message,*
    /// and custom icon *icon* for the time specified in *millisecondsTimeoutHint.*
    /// 
    show_message(title: String, msg: String, icon: &IconType, msecs: i32),
    /// 
    /// Shows a balloon message for the entry with the given *title,* *message* and
    /// *icon* for the time specified in *millisecondsTimeoutHint.* *title* and *message*
    /// must be plain text strings.
    /// 
    /// Message can be clicked by the user; the messageClicked() signal will emitted when
    /// this occurs.
    /// 
    /// Note that display of messages are dependent on the system configuration and user
    /// preferences, and that messages may not appear at all. Hence, it should not be
    /// relied upon as the sole means for providing critical information.
    /// 
    /// On Windows, the *millisecondsTimeoutHint* is usually ignored by the system
    /// when the application has focus.
    /// 
    /// Has been turned into a slot in Qt 5.2.
    /// 
    /// **See also:** [`show()`]
    /// [`supports_messages()`]
    /// 
    /// **Overloads** showMessage()
    /// Shows a balloon message for the entry with the given *title,* *message,*
    /// and custom icon *icon* for the time specified in *millisecondsTimeoutHint.*
    /// 
    [org_name(showMessage)]
    show_message_2(title: String, msg: String, icon: SystemTrayIcon::MessageIcon, msecs: i32),
    /// 
    /// This signal is emitted when the user activates the system tray icon. *reason*
    /// specifies the reason for activation. QSystemTrayIcon::ActivationReason enumerates
    /// the various reasons.
    /// 
    /// **See also:** [`SystemTrayIcon::activation_reason()`]
    [signal] activated(reason: SystemTrayIcon::ActivationReason),
    /// 
    /// This signal is emitted when the message displayed using showMessage()
    /// was clicked by the user.
    /// 
    /// Currently this signal is not sent on MacOS .
    /// 
    /// **Note**: We follow Microsoft Windows behavior, so the
    /// signal is also emitted when the user clicks on a tray icon with
    /// a balloon message displayed.
    /// 
    /// **See also:** [`activated()`]
    [signal] message_clicked(),
    /// 
    [event] event(event: *EventType) -> bool,
}

[org_name(QSystemTrayIcon)]
enum ActivationReason {
    /// Unknown reason
    Unknown = 0,
    /// The context menu for the system tray entry was requested
    Context = 1,
    /// The system tray entry was double clicked.
    DoubleClick = 2,
    /// The system tray entry was clicked
    Trigger = 3,
    /// The system tray entry was clicked with the middle mouse button
    MiddleClick = 4,
}

[org_name(QSystemTrayIcon)]
enum MessageIcon {
    /// No icon is shown.
    NoIcon = 0,
    /// An information icon is shown.
    Information = 1,
    /// A standard warning icon is shown.
    Warning = 2,
    /// A critical warning icon is shown.
    Critical = 3,
}

// vim: syntax=rust expandtab ts=4 sw=4
