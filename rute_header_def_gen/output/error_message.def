/// 
/// An error message widget consists of a text label and a checkbox. The
/// checkbox lets the user control whether the same error message will be
/// displayed again in the future, typically displaying the text,
/// translated into the appropriate local
/// language.
/// 
/// For production applications, the class can be used to display messages which
/// the user only needs to see once. To use QErrorMessage like this, you create
/// the dialog in the usual way, and show it by calling the showMessage() slot or
/// connecting signals to it.
/// 
/// The static qtHandler() function installs a message handler
/// using qInstallMessageHandler() and creates a QErrorMessage that displays
/// qDebug(), qWarning() and qFatal() messages. This is most useful in
/// environments where no console is available to display warnings and
/// error messages.
/// 
/// In both cases QErrorMessage will queue pending messages and display
/// them in order, with each new message being shown as soon as the user
/// has accepted the previous message. Once the user has specified that a
/// message is not to be shown again it is automatically skipped, and the
/// dialog will show the next appropriate message in the queue.
/// 
/// The [Standard Dialogs](dialogs/standarddialogs)
/// example shows
/// how to use QErrorMessage as well as other built-in Qt dialogs.
/// 
/// ![qerrormessage.png](qerrormessage.png)
/// 
/// **See also:** QMessageBox
/// QStatusBar::showMessage()
/// {Standard Dialogs Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct ErrorMessage : Dialog {
    /// 
    /// Returns a pointer to a QErrorMessage object that outputs the
    /// default Qt messages. This function creates such an object, if there
    /// isn't one already.
    [static] qt_handler() -> ErrorMessage?,
    /// 
    /// Shows the given message, *message,* and returns immediately. If the user
    /// has requested for the message not to be shown again, this function does
    /// nothing.
    /// 
    /// Normally, the message is displayed immediately. However, if there are
    /// pending messages, it will be queued to be displayed later.
    /// 
    /// **Overloads**
    /// Shows the given message, *message,* and returns immediately. If the user
    /// has requested for messages of type, *type,* not to be shown again, this
    /// function does nothing.
    /// 
    /// Normally, the message is displayed immediately. However, if there are
    /// pending messages, it will be queued to be displayed later.
    /// 
    /// **See also:** showMessage()
    show_message(message: String),
    /// 
    /// Shows the given message, *message,* and returns immediately. If the user
    /// has requested for the message not to be shown again, this function does
    /// nothing.
    /// 
    /// Normally, the message is displayed immediately. However, if there are
    /// pending messages, it will be queued to be displayed later.
    /// 
    /// **Overloads**
    /// Shows the given message, *message,* and returns immediately. If the user
    /// has requested for messages of type, *type,* not to be shown again, this
    /// function does nothing.
    /// 
    /// Normally, the message is displayed immediately. However, if there are
    /// pending messages, it will be queued to be displayed later.
    /// 
    /// **See also:** showMessage()
    show_message(message: String, type: String),
    /// 
    [event] done(arg0: i32),
    /// 
    [event] change_event(e: *EventType),
}

// vim: syntax=rust expandtab ts=4 sw=4
