/// 
/// QStyleOptionToolBar contains all the information that QStyle
/// functions need to draw QToolBar.
/// 
/// For performance reasons, the access to the member variables is
/// direct (i.e., using the `.` or `->` operator). This low-level feel
/// makes the structures straightforward to use and emphasizes that
/// these are simply parameters used by the style functions.
/// 
/// The QStyleOptionToolBar class holds the lineWidth and the
/// midLineWidth for drawing the widget. It also stores information
/// about which [area](toolBarArea)
/// the toolbar should be located
/// in, whether it is movable or not, which position the toolbar line
/// should have (positionOfLine), and the toolbar's position within
/// the line (positionWithinLine).
/// 
/// In addition, the class provides a couple of enums: The
/// ToolBarFeature enum is used to describe whether a toolbar is
/// movable or not, and the ToolBarPosition enum is used to describe
/// the position of a toolbar line, as well as the toolbar's position
/// within the line.
/// 
/// For an example demonstrating how style options can be used, see
/// the [Styles](widgets/styles)
/// example.
/// 
/// **See also:** [`StyleOption`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct StyleOptionToolBar : StyleOption {
}

[org_name(QStyleOptionToolBar)]
enum StyleOptionType {
    /// The type of style option provided ( [SO_ToolBar](SO_ToolBar)
 for this class). The type is used internally by QStyleOption, its subclasses, and qstyleoption_cast() to determine the type of style option. In general you do not need to worry about this unless you want to create your own QStyleOption subclass and your own styles.
    Type,
}

[org_name(QStyleOptionToolBar)]
enum StyleOptionVersion {
    /// 1 The version is used by QStyleOption subclasses to implement extensions without breaking compatibility. If you use qstyleoption_cast(), you normally do not need to check it.
    Version,
}

[org_name(QStyleOptionToolBar)]
enum ToolBarPosition {
    /// The toolbar is located at the beginning of the line, or the toolbar line is the first of several lines. There can only be one toolbar (and only one line) with this position.
    Beginning,
    /// The toolbar is located in the middle of the line, or the toolbar line is in the middle of several lines. There can several toolbars (and lines) with this position.
    Middle,
    /// The toolbar is located at the end of the line, or the toolbar line is the last of several lines. There can only be one toolbar (and only one line) with this position.
    End,
    /// There is only one toolbar or line. This is the default value of the positionOfLine and positionWithinLine variables.
    OnlyOne,
}

[org_name(QStyleOptionToolBar)]
enum ToolBarFeature {
    /// The toolbar cannot be moved. The default value.
    None,
    /// The toolbar is movable, and a handle will appear when holding the cursor over the toolbar's boundary.
    Movable,
}

// vim: syntax=rust expandtab ts=4 sw=4
