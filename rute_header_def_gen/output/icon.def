///   \class QIcon
/// 
///   \brief The QIcon class provides scalable icons in different modes
///   and states.
/// 
///   \ingroup painting
///   \ingroup shared
///   \inmodule QtGui
/// 
///   A QIcon can generate smaller, larger, active, and disabled pixmaps
///   from the set of pixmaps it is given. Such pixmaps are used by Qt
///   widgets to show an icon representing a particular action.
/// 
///   The simplest use of QIcon is to create one from a QPixmap file or
///   resource, and then use it, allowing Qt to work out all the required
///   icon styles and sizes. For example:
/// 
///   \snippet code/src_gui_image_qicon.cpp 0
/// 
///   To undo a QIcon, simply set a null icon in its place:
/// 
///   \snippet code/src_gui_image_qicon.cpp 1
/// 
///   Use the QImageReader::supportedImageFormats() and
///   QImageWriter::supportedImageFormats() functions to retrieve a
///   complete list of the supported file formats.
/// 
///   When you retrieve a pixmap using pixmap(QSize, Mode, State), and no
///   pixmap for this given size, mode and state has been added with
///   addFile() or addPixmap(), then QIcon will generate one on the
///   fly. This pixmap generation happens in a QIconEngine. The default
///   engine scales pixmaps down if required, but never up, and it uses
///   the current style to calculate a disabled appearance. By using
///   custom icon engines, you can customize every aspect of generated
///   icons. With QIconEnginePlugin it is possible to register different
///   icon engines for different file suffixes, making it possible for
///   third parties to provide additional icon engines to those included
///   with Qt.
/// 
///   \note Since Qt 4.2, an icon engine that supports SVG is included.
/// 
///   \section1 Making Classes that Use QIcon
/// 
///   If you write your own widgets that have an option to set a small
///   pixmap, consider allowing a QIcon to be set for that pixmap.  The
///   Qt class QToolButton is an example of such a widget.
/// 
///   Provide a method to set a QIcon, and when you draw the icon, choose
///   whichever pixmap is appropriate for the current state of your widget.
///   For example:
///   \snippet code/src_gui_image_qicon.cpp 2
/// 
///   You might also make use of the \c Active mode, perhaps making your
///   widget \c Active when the mouse is over the widget (see \l
///   QWidget::enterEvent()), while the mouse is pressed pending the
///   release that will activate the function, or when it is the currently
///   selected item. If the widget can be toggled, the "On" mode might be
///   used to draw a different icon.
/// 
///   \image icon.png QIcon
/// 
///   \note QIcon needs a QGuiApplication instance before the icon is created.
/// 
///   \section1 High DPI Icons
/// 
///   There are two ways that QIcon supports \l {High DPI Displays}{high DPI}
///   icons: via \l addFile() and \l fromTheme().
/// 
///   \l addFile() is useful if you have your own custom directory structure and do
///   not need to use the \l {Icon Theme Specification}{freedesktop.org Icon Theme
///   Specification}. Icons created via this approach use Qt's \l {High Resolution
///   Versions of Images}{"@nx" high DPI syntax}.
/// 
///   Using \l fromTheme() is necessary if you plan on following the Icon Theme
///   Specification. To make QIcon use the high DPI version of an image, add an
///   additional entry to the appropriate \c index.theme file:
/// 
///   \badcode
///   [Icon Theme]
///   Name=Test
///   Comment=Test Theme
/// 
///   Directories=32x32/actions,32x32@2/actions
/// 
///   [32x32/actions]
///   Size=32
///   Context=Actions
///   Type=Fixed
/// 
///   # High DPI version of the entry above.
///   [32x32@2/actions]
///   Size=32
///   Scale=2
///   Type=Fixed
///   \endcode
/// 
///   Your icon theme directory would then look something like this:
/// 
///   \badcode
///     ├── 32x32
///     │   └── actions
///     │       └── appointment-new.png
///     ├── 32x32@2
///     │   └── actions
///     │       └── appointment-new.png
///     └── index.theme
///   \endcode
/// 
///   \sa {fowler}{GUI Design Handbook: Iconic Label}, {Icons Example}
[org_name(QIcon)]
enum Mode {
    Normal,
    Disabled,
    Active,
    Selected,
}

[org_name(QIcon)]
enum State {
    On,
    Off,
}


struct Icon {
    swap(other: &IconType),
    ///   \since 5.1
    /// 
    ///   Returns a pixmap with the requested \a window \a size, \a mode, and \a
    ///   state, generating one if necessary.
    /// 
    ///   The pixmap can be smaller than the requested size. If \a window is on
    ///   a high-dpi display the pixmap can be larger. In that case it will have
    ///   a devicePixelRatio larger than 1.
    /// 
    ///   \sa  actualSize(), paint()
    pixmap(size: &SizeType, mode: Icon::Mode, state: Icon::State) -> Pixmap,
    ///   \since 5.1
    /// 
    ///   Returns a pixmap with the requested \a window \a size, \a mode, and \a
    ///   state, generating one if necessary.
    /// 
    ///   The pixmap can be smaller than the requested size. If \a window is on
    ///   a high-dpi display the pixmap can be larger. In that case it will have
    ///   a devicePixelRatio larger than 1.
    /// 
    ///   \sa  actualSize(), paint()
    pixmap(w: i32, h: i32, mode: Icon::Mode, state: Icon::State) -> Pixmap,
    ///   \since 5.1
    /// 
    ///   Returns a pixmap with the requested \a window \a size, \a mode, and \a
    ///   state, generating one if necessary.
    /// 
    ///   The pixmap can be smaller than the requested size. If \a window is on
    ///   a high-dpi display the pixmap can be larger. In that case it will have
    ///   a devicePixelRatio larger than 1.
    /// 
    ///   \sa  actualSize(), paint()
    pixmap(extent: i32, mode: Icon::Mode, state: Icon::State) -> Pixmap,
    ///   \since 5.1
    /// 
    ///   Returns a pixmap with the requested \a window \a size, \a mode, and \a
    ///   state, generating one if necessary.
    /// 
    ///   The pixmap can be smaller than the requested size. If \a window is on
    ///   a high-dpi display the pixmap can be larger. In that case it will have
    ///   a devicePixelRatio larger than 1.
    /// 
    ///   \sa  actualSize(), paint()
    pixmap(window: *WindowType, size: &SizeType, mode: Icon::Mode, state: Icon::State) -> Pixmap,
    ///   \since 5.1
    /// 
    ///   Returns the actual size of the icon for the requested \a window  \a size, \a
    ///   mode, and \a state.
    /// 
    ///   The pixmap can be smaller than the requested size. The returned size
    ///   is in device-independent pixels (This is relevant for high-dpi pixmaps.)
    /// 
    ///   \sa actualSize(), pixmap(), paint()
    actual_size(size: &SizeType, mode: Icon::Mode, state: Icon::State) -> Size,
    ///   \since 5.1
    /// 
    ///   Returns the actual size of the icon for the requested \a window  \a size, \a
    ///   mode, and \a state.
    /// 
    ///   The pixmap can be smaller than the requested size. The returned size
    ///   is in device-independent pixels (This is relevant for high-dpi pixmaps.)
    /// 
    ///   \sa actualSize(), pixmap(), paint()
    actual_size(window: *WindowType, size: &SizeType, mode: Icon::Mode, state: Icon::State) -> Size,
    ///     \since 4.7
    /// 
    ///     Returns the name used to create the icon, if available.
    /// 
    ///     Depending on the way the icon was created, it may have an associated
    ///     name. This is the case for icons created with fromTheme() or icons
    ///     using a QIconEngine which supports the QIconEngine::IconNameHook.
    /// 
    ///     \sa fromTheme(), QIconEngine
    name() -> String,
    ///     Uses the \a painter to paint the icon with specified \a alignment,
    ///     required \a mode, and \a state into the rectangle \a rect.
    /// 
    ///     \sa actualSize(), pixmap()
    paint(painter: *PainterType, rect: &RectType, alignment: Rute::Alignment, mode: Icon::Mode, state: Icon::State),
    ///     Uses the \a painter to paint the icon with specified \a alignment,
    ///     required \a mode, and \a state into the rectangle \a rect.
    /// 
    ///     \sa actualSize(), pixmap()
    paint(painter: *PainterType, x: i32, y: i32, w: i32, h: i32, alignment: Rute::Alignment, mode: Icon::Mode, state: Icon::State),
    ///     Returns \c true if the icon is empty; otherwise returns \c false.
    /// 
    ///     An icon is empty if it has neither a pixmap nor a filename.
    /// 
    ///     Note: Even a non-null icon might not be able to create valid
    ///     pixmaps, eg. if the file does not exist or cannot be read.
    is_null() -> bool,
    is_detached() -> bool,
    detach(),
    ///     Returns a number that identifies the contents of this QIcon
    ///     object. Distinct QIcon objects can have the same key if
    ///     they refer to the same contents.
    ///     \since 4.3
    /// 
    ///     The cacheKey() will change when the icon is altered via
    ///     addPixmap() or addFile().
    /// 
    ///     Cache keys are mostly useful in conjunction with caching.
    /// 
    ///     \sa QPixmap::cacheKey()
    cache_key() -> i64,
    ///     Adds \a pixmap to the icon, as a specialization for \a mode and
    ///     \a state.
    /// 
    ///     Custom icon engines are free to ignore additionally added
    ///     pixmaps.
    /// 
    ///     \sa addFile()
    add_pixmap(pixmap: &PixmapType, mode: Icon::Mode, state: Icon::State),
    add_file(file_name: String, size: &SizeType, mode: Icon::Mode, state: Icon::State),
    ///     \since 4.5
    /// 
    ///     Returns a list of available icon sizes for the specified \a mode and
    ///     \a state.
    available_sizes(mode: Icon::Mode, state: Icon::State) -> [Size],
    ///     \since 5.6
    /// 
    ///     Indicate that this icon is a mask image(boolean \a isMask), and hence can
    ///     potentially be modified based on where it's displayed.
    ///     \sa isMask()
    set_is_mask(is_mask: bool),
    ///     \since 5.6
    /// 
    ///     Returns \c true if this icon has been marked as a mask image.
    ///     Certain platforms render mask icons differently (for example,
    ///     menu icons on \macos).
    /// 
    ///     \sa setIsMask()
    is_mask() -> bool,
    ///     \overload
    /// 
    ///     Returns the QIcon corresponding to \a name in the current
    ///     icon theme. If no such icon is found in the current theme
    ///     \a fallback is returned instead.
    /// 
    ///     If you want to provide a guaranteed fallback for platforms that
    ///     do not support theme icons, you can use the second argument:
    /// 
    ///     \snippet code/src_gui_image_qicon.cpp 4
    [static] from_theme(name: String) -> Icon,
    ///     \overload
    /// 
    ///     Returns the QIcon corresponding to \a name in the current
    ///     icon theme. If no such icon is found in the current theme
    ///     \a fallback is returned instead.
    /// 
    ///     If you want to provide a guaranteed fallback for platforms that
    ///     do not support theme icons, you can use the second argument:
    /// 
    ///     \snippet code/src_gui_image_qicon.cpp 4
    [static] from_theme(name: String, fallback: &IconType) -> Icon,
    ///     \since 4.6
    /// 
    ///     Returns \c true if there is an icon available for \a name in the
    ///     current icon theme, otherwise returns \c false.
    /// 
    ///     \sa themeSearchPaths(), fromTheme(), setThemeName()
    [static] has_theme_icon(name: String) -> bool,
    ///   \since 4.6
    /// 
    ///   Returns the search paths for icon themes.
    /// 
    ///   The default value will depend on the platform:
    /// 
    ///   On X11, the search path will use the XDG_DATA_DIRS environment
    ///   variable if available.
    /// 
    ///   By default all platforms will have the resource directory
    ///   \c{:\icons} as a fallback. You can use "rcc -project" to generate a
    ///   resource file from your icon theme.
    /// 
    ///   \sa setThemeSearchPaths(), fromTheme(), setThemeName()
    [static] theme_search_paths() -> [String],
    ///     \since 4.6
    /// 
    ///     Sets the search paths for icon themes to \a paths.
    ///     \sa themeSearchPaths(), fromTheme(), setThemeName()
    [static] set_theme_search_paths(searchpath: &[String]),
    ///     \since 5.11
    /// 
    ///     Returns the fallback search paths for icons.
    /// 
    ///     The default value will depend on the platform.
    /// 
    ///     \sa setFallbackSearchPaths(), themeSearchPaths()
    [static] fallback_search_paths() -> [String],
    ///     \since 5.11
    /// 
    ///     Sets the fallback search paths for icons to \a paths.
    /// 
    ///     \note To add some path without replacing existing ones:
    /// 
    ///     \snippet code/src_gui_image_qicon.cpp 5
    /// 
    ///     \sa fallbackSearchPaths(), setThemeSearchPaths()
    [static] set_fallback_search_paths(paths: &[String]),
    ///     \since 4.6
    /// 
    ///     Returns the name of the current icon theme.
    /// 
    ///     On X11, the current icon theme depends on your desktop
    ///     settings. On other platforms it is not set by default.
    /// 
    ///     \sa setThemeName(), themeSearchPaths(), fromTheme(),
    ///     hasThemeIcon()
    [static] theme_name() -> String,
    ///     \since 4.6
    /// 
    ///     Sets the current icon theme to \a name.
    /// 
    ///     The \a name should correspond to a directory name in the
    ///     themeSearchPath() containing an index.theme
    ///     file describing it's contents.
    /// 
    ///     \sa themeSearchPaths(), themeName()
    [static] set_theme_name(path: String),
}

// vim: syntax=rust expandtab ts=4 sw=4
