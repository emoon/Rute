/// 
/// ![windows-dial.png](windows-dial.png)
/// 
/// QDial is used when the user needs to control a value within a
/// program-definable range, and the range either wraps around
/// (for example, with angles measured from 0 to 359 degrees) or the
/// dialog layout needs a square widget.
/// 
/// Since QDial inherits from QAbstractSlider, the dial behaves in
/// a similar way to a [slider](QSlider)
/// . When wrapping() is false
/// (the default setting) there is no real difference between a slider
/// and a dial. They both share the same signals, slots and member
/// functions. Which one you use depends on the expectations of
/// your users and on the type of application.
/// 
/// The dial initially emits valueChanged() signals continuously while
/// the slider is being moved; you can make it emit the signal less
/// often by disabling the [tracking](QAbstractSlider::tracking)
/// 
/// property. The sliderMoved() signal is emitted continuously even
/// when tracking is disabled.
/// 
/// The dial also emits sliderPressed() and sliderReleased() signals
/// when the mouse button is pressed and released. Note that the
/// dial's value can change without these signals being emitted since
/// the keyboard and wheel can also be used to change the value.
/// 
/// Unlike the slider, QDial attempts to draw a number of
/// notches rather than one per line step. If possible, the number of
/// notches drawn is one per line step, but if there aren't enough pixels
/// to draw every one, QDial will skip notches to try and draw a uniform
/// set (e.g. by drawing every second or third notch).
/// 
/// Like the slider, the dial makes the QAbstractSlider function setValue()
/// available as a slot.
/// 
/// The dial's keyboard interface is fairly simple: The
/// **{left}/** **{up}** and **{right}/** **{down}** arrow keys adjust
/// the dial's [value](QAbstractSlider::value)
/// by the defined
/// [singleStep](QAbstractSlider::singleStep)
/// , **{Page** Up} and
/// **{Page** Down} by the defined [pageStep](QAbstractSlider::pageStep)
/// , and the **Home** and **End** keys set the value to
/// the defined [minimum](QAbstractSlider::minimum)
/// and
/// [maximum](QAbstractSlider::maximum)
/// values.
/// 
/// If you are using the mouse wheel to adjust the dial, the increment
/// value is determined by the lesser value of
/// [wheelScrollLines](QApplication::wheelScrollLines())
/// multipled
/// by [singleStep](QAbstractSlider::singleStep)
/// , and
/// [pageStep](QAbstractSlider::pageStep)
/// 
/// 
/// **See also:** [`ScrollBar`]
/// [`SpinBox`]
/// [`Slider`]
/// {fowler}{GUI Design Handbook: Slider}
/// {Sliders Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Dial : AbstractSlider {
    /// 
    /// If true, wrapping is enabled; otherwise some space is inserted at the bottom
    /// of the dial to separate the ends of the range of valid values.
    /// 
    /// If enabled, the arrow can be oriented at any angle on the dial. If disabled,
    /// the arrow will be restricted to the upper part of the dial; if it is rotated
    /// into the space at the bottom of the dial, it will be clamped to the closest
    /// end of the valid range of values.
    /// 
    /// By default this property is `false.`
    wrapping() -> bool,
    /// 
    /// The notch size is in range control units, not pixels, and if
    /// possible it is a multiple of singleStep() that results in an
    /// on-screen notch size near notchTarget().
    /// 
    /// By default, this property has a value of 1.
    /// 
    /// **See also:** [`notch_target()`]
    /// [`single_step()`]
    notch_size() -> i32,
    set_notch_target(target: double),
    /// 
    /// The notch target is the number of pixels QDial attempts to put
    /// between each notch.
    /// 
    /// The actual size may differ from the target size.
    /// 
    /// The default notch target is 3.7 pixels.
    notch_target() -> f32,
    /// 
    /// If the property is `true,` a series of notches are drawn around the dial
    /// to indicate the range of values available; otherwise no notches are
    /// shown.
    /// 
    /// By default, this property is disabled.
    notches_visible() -> bool,
    /// 
    [event] size_hint() -> Size,
    /// 
    [event] minimum_size_hint() -> Size,
    set_notches_visible(visible: bool),
    set_wrapping(on: bool),
    /// 
    [event] event(e: *EventType) -> bool,
    /// 
    [event] resize_event(re: *ResizeEventType),
    /// 
    [event] paint_event(pe: *PaintEventType),
    /// 
    [event] mouse_press_event(me: *MouseEventType),
    /// 
    [event] mouse_release_event(me: *MouseEventType),
    /// 
    [event] mouse_move_event(me: *MouseEventType),
    /// 
    [event] slider_change(change: AbstractSlider::SliderChange),
    /// 
    /// Initialize *option* with the values from this QDial. This method
    /// is useful for subclasses when they need a QStyleOptionSlider, but don't want
    /// to fill in all the information themselves.
    /// 
    /// **See also:** [`StyleOption::init_from`]
    init_style_option(option: *StyleOptionSliderType),
}

// vim: syntax=rust expandtab ts=4 sw=4
