///   \class QDateTimeEdit
///   \brief The QDateTimeEdit class provides a widget for editing dates and times.
/// 
///   \ingroup basicwidgets
///   \inmodule QtWidgets
/// 
///   \image windows-datetimeedit.png
/// 
///   QDateTimeEdit allows the user to edit dates by using the keyboard or
///   the arrow keys to increase and decrease date and time values. The
///   arrow keys can be used to move from section to section within the
///   QDateTimeEdit box. Dates and times appear in accordance with the
///   format set; see setDisplayFormat().
/// 
///   \snippet code/src_gui_widgets_qdatetimeedit.cpp 0
/// 
///   Here we've created a new QDateTimeEdit object initialized with
///   today's date, and restricted the valid date range to today plus or
///   minus 365 days. We've set the order to month, day, year.
/// 
///   The minimum value for QDateTimeEdit is 14 September 1752. You can
///   change this by calling setMinimumDate(), taking into account that
///   the minimum value for QDate is 2 January 4713BC.
/// 
///   Other useful functions are setMaximumDate(), setMinimumTime()
///   and setMaximumTime().
/// 
///   \section1 Using a Pop-up Calendar Widget
/// 
///   QDateTimeEdit can be configured to allow a QCalendarWidget to be used
///   to select dates. This is enabled by setting the calendarPopup property.
///   Additionally, you can supply a custom calendar widget for use as the
///   calendar pop-up by calling the setCalendarWidget() function. The existing
///   calendar widget can be retrieved with calendarWidget().
/// 
///   \sa QDateEdit, QTimeEdit, QDate, QTime
[org_name(QDateTimeEdit)]
enum Section {
    NoSection,
    AmPmSection,
    MSecSection,
    SecondSection,
    MinuteSection,
    HourSection,
    DaySection,
    MonthSection,
    YearSection,
    TimeSections_Mask,
    DateSections_Mask,
}

struct DateTimeEdit : AbstractSpinBox {
    date_time() -> DateTime,
    date() -> Date,
    time() -> Time,
    minimum_date_time() -> DateTime,
    clear_minimum_date_time(),
    set_minimum_date_time(dt: &DateTimeType),
    maximum_date_time() -> DateTime,
    clear_maximum_date_time(),
    set_maximum_date_time(dt: &DateTimeType),
    set_date_time_range(min: &DateTimeType, max: &DateTimeType),
    minimum_date() -> Date,
    set_minimum_date(min: &DateType),
    clear_minimum_date(),
    maximum_date() -> Date,
    set_maximum_date(max: &DateType),
    clear_maximum_date(),
    set_date_range(min: &DateType, max: &DateType),
    minimum_time() -> Time,
    set_minimum_time(min: &TimeType),
    clear_minimum_time(),
    maximum_time() -> Time,
    set_maximum_time(max: &TimeType),
    clear_maximum_time(),
    set_time_range(min: &TimeType, max: &TimeType),
    displayed_sections() -> DateTimeEdit::Sections,
    current_section() -> DateTimeEdit::Section,
    section_at(index: i32) -> DateTimeEdit::Section,
    set_current_section(section: DateTimeEdit::Section),
    current_section_index() -> i32,
    set_current_section_index(index: i32),
    calendar_widget() -> CalendarWidget?,
    set_calendar_widget(calendar_widget: *CalendarWidgetType),
    section_count() -> i32,
    set_selected_section(section: DateTimeEdit::Section),
    section_text(section: DateTimeEdit::Section) -> String,
    display_format() -> String,
    set_display_format(format: String),
    calendar_popup() -> bool,
    set_calendar_popup(enable: bool),
    time_spec() -> Rute::TimeSpec,
    set_time_spec(spec: Rute::TimeSpec),
    [event] size_hint() -> Size,
    [event] clear(),
    [event] step_by(steps: i32),
    [event] event(event: *EventType) -> bool,
    [signal] date_time_changed(date_time: &DateTimeType),
    [signal] time_changed(time: &TimeType),
    [signal] date_changed(date: &DateType),
    set_date_time(date_time: &DateTimeType),
    set_date(date: &DateType),
    set_time(time: &TimeType),
    [event] key_press_event(event: *KeyEventType),
    [event] wheel_event(event: *WheelEventType),
    [event] focus_in_event(event: *FocusEventType),
    [event] focus_next_prev_child(next: bool) -> bool,
    [event] validate(input: String, pos: &i32) -> Validator::State,
    [event] fixup(input: String),
    [event] date_time_from_text(text: String) -> DateTime,
    [event] text_from_date_time(dt: &DateTimeType) -> String,
    [event] step_enabled() -> AbstractSpinBox::StepEnabled,
    [event] mouse_press_event(event: *MouseEventType),
    [event] paint_event(event: *PaintEventType),
    init_style_option(option: *StyleOptionSpinBoxType),
}

// vim: syntax=rust expandtab ts=4 sw=4
