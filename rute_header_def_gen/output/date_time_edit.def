enum Section {
    NoSection,
    AmPmSection,
    MSecSection,
    SecondSection,
    MinuteSection,
    HourSection,
    DaySection,
    MonthSection,
    YearSection,
    TimeSections_Mask,
    DateSections_Mask,
}

struct DateTimeEdit : AbstractSpinBox {
    date_time() -> DateTimeType,
    date() -> DateType,
    time() -> TimeType,
    minimum_date_time() -> DateTimeType,
    clear_minimum_date_time(),
    set_minimum_date_time(dt: &DateTimeType),
    maximum_date_time() -> DateTimeType,
    clear_maximum_date_time(),
    set_maximum_date_time(dt: &DateTimeType),
    set_date_time_range(min: &DateTimeType, max: &DateTimeType),
    minimum_date() -> DateType,
    set_minimum_date(min: &DateType),
    clear_minimum_date(),
    maximum_date() -> DateType,
    set_maximum_date(max: &DateType),
    clear_maximum_date(),
    set_date_range(min: &DateType, max: &DateType),
    minimum_time() -> TimeType,
    set_minimum_time(min: &TimeType),
    clear_minimum_time(),
    maximum_time() -> TimeType,
    set_maximum_time(max: &TimeType),
    clear_maximum_time(),
    set_time_range(min: &TimeType, max: &TimeType),
    displayed_sections() -> Sections,
    current_section() -> DateTimeEdit::Section,
    section_at(index: i32) -> DateTimeEdit::Section,
    set_current_section(section: DateTimeEdit::Section),
    current_section_index() -> i32,
    set_current_section_index(index: i32),
    calendar_widget() -> &CalendarWidgetType,
    set_calendar_widget(calendar_widget: &CalendarWidgetType),
    section_count() -> i32,
    set_selected_section(section: DateTimeEdit::Section),
    section_text(section: DateTimeEdit::Section) -> String,
    display_format() -> String,
    set_display_format(format: String),
    calendar_popup() -> bool,
    set_calendar_popup(enable: bool),
    time_spec() -> Rute::TimeSpec,
    set_time_spec(spec: Rute::TimeSpec),
    [override] size_hint() -> SizeType,
    [override] clear(),
    [override] step_by(steps: i32),
    [override] event(event: &EventType) -> bool,
    [event] date_time_changed(date_time: &DateTimeType),
    [event] time_changed(time: &TimeType),
    [event] date_changed(date: &DateType),
    set_date_time(date_time: &DateTimeType),
    set_date(date: &DateType),
    set_time(time: &TimeType),
    [override] key_press_event(event: &KeyEventType),
    [override] wheel_event(event: &WheelEventType),
    [override] focus_in_event(event: &FocusEventType),
    [override] focus_next_prev_child(next: bool) -> bool,
    [override] validate(input: String, pos: &i32) -> Validator::State,
    [override] fixup(input: String),
    [override] date_time_from_text(text: String) -> DateTimeType,
    [override] text_from_date_time(dt: &DateTimeType) -> String,
    [override] step_enabled() -> StepEnabled,
    [override] mouse_press_event(event: &MouseEventType),
    [override] paint_event(event: &PaintEventType),
    init_style_option(option: &StyleOptionSpinBoxType),
}

// vim: syntax=rust expandtab ts=4 sw=4
