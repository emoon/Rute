/// 
/// ![windows-datetimeedit.png](windows-datetimeedit.png)
/// 
/// QDateTimeEdit allows the user to edit dates by using the keyboard or
/// the arrow keys to increase and decrease date and time values. The
/// arrow keys can be used to move from section to section within the
/// QDateTimeEdit box. Dates and times appear in accordance with the
/// format set; see setDisplayFormat().
/// 
/// Here we've created a new QDateTimeEdit object initialized with
/// today's date, and restricted the valid date range to today plus or
/// minus 365 days. We've set the order to month, day, year.
/// 
/// The minimum value for QDateTimeEdit is 14 September 1752. You can
/// change this by calling setMinimumDate(), taking into account that
/// the minimum value for QDate is 2 January 4713BC.
/// 
/// Other useful functions are setMaximumDate(), setMinimumTime()
/// and setMaximumTime().
/// 
/// # Using a Pop-up Calendar Widget
/// 
/// QDateTimeEdit can be configured to allow a QCalendarWidget to be used
/// to select dates. This is enabled by setting the calendarPopup property.
/// Additionally, you can supply a custom calendar widget for use as the
/// calendar pop-up by calling the setCalendarWidget() function. The existing
/// calendar widget can be retrieved with calendarWidget().
/// 
/// **See also:** QDateEdit
/// QTimeEdit
/// QDate
/// QTime
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QDateTimeEdit)]
enum Section {
    NoSection,
    AmPmSection,
    MSecSection,
    SecondSection,
    MinuteSection,
    HourSection,
    DaySection,
    MonthSection,
    YearSection,
    TimeSections_Mask,
    DateSections_Mask,
}

struct DateTimeEdit : AbstractSpinBox {
    /// 
    /// This signal is emitted whenever the date or time is changed. The
    /// new date and time is passed in *datetime.*
    /// 
    /// When setting this property the timespec of the QDateTimeEdit remains the same
    /// and the timespec of the new QDateTime is ignored.
    /// 
    /// By default, this property contains a date that refers to January 1,
    /// 2000 and a time of 00:00:00 and 0 milliseconds.
    /// 
    /// **See also:** date
    /// time
    /// 
    /// Returns an appropriate datetime for the given *text.*
    /// 
    /// This virtual function is used by the datetime edit whenever it
    /// needs to interpret text entered by the user as a value.
    /// 
    /// **See also:** textFromDateTime()
    /// validate()
    date_time() -> DateTime,
    /// 
    /// This signal is emitted whenever the date or time is changed. The
    /// new date and time is passed in *datetime.*
    /// 
    /// This signal is emitted whenever the date is changed. The new date
    /// is passed in *date.*
    /// 
    /// When setting this property the timespec of the QDateTimeEdit remains the same
    /// and the timespec of the new QDateTime is ignored.
    /// 
    /// By default, this property contains a date that refers to January 1,
    /// 2000 and a time of 00:00:00 and 0 milliseconds.
    /// 
    /// **See also:** date
    /// time
    /// 
    /// By default, this property contains a date that refers to January 1, 2000.
    /// 
    /// **See also:** time
    /// dateTime
    /// 
    /// Returns the date of the date time edit.
    /// 
    /// Returns an appropriate datetime for the given *text.*
    /// 
    /// This virtual function is used by the datetime edit whenever it
    /// needs to interpret text entered by the user as a value.
    /// 
    /// **See also:** textFromDateTime()
    /// validate()
    date() -> Date,
    /// 
    /// This signal is emitted whenever the time is changed. The new time
    /// is passed in *time.*
    /// 
    /// By default, this property contains a time of 00:00:00 and 0 milliseconds.
    /// 
    /// **See also:** date
    /// dateTime
    /// 
    /// Returns the time of the date time edit.
    /// 
    time() -> Time,
    /// 
    /// When setting this property the [maximumDateTime()](maximumDateTime())
    /// is adjusted if
    /// necessary to ensure that the range remains valid. If the datetime is
    /// not a valid QDateTime object, this function does nothing.
    /// 
    /// The default minimumDateTime can be restored with
    /// clearMinimumDateTime()
    /// 
    /// By default, this property contains a date that refers to September 14,
    /// 1752 and a time of 00:00:00 and 0 milliseconds.
    /// 
    /// **See also:** maximumDateTime()
    /// minimumTime()
    /// maximumTime()
    /// minimumDate()
    /// maximumDate()
    /// setDateTimeRange()
    /// setDateRange()
    /// setTimeRange()
    /// clearMaximumDateTime()
    /// clearMinimumDate()
    /// clearMaximumDate()
    /// clearMinimumTime()
    /// clearMaximumTime()
    minimum_date_time() -> DateTime,
    clear_minimum_date_time(),
    set_minimum_date_time(dt: &DateTimeType),
    /// 
    /// When setting this property the [minimumDateTime()](minimumDateTime())
    /// is adjusted if
    /// necessary to ensure that the range remains valid. If the datetime is
    /// not a valid QDateTime object, this function does nothing.
    /// 
    /// The default maximumDateTime can be restored with
    /// clearMaximumDateTime().
    /// 
    /// By default, this property contains a date that refers to 31 December,
    /// 9999 and a time of 23:59:59 and 999 milliseconds.
    /// 
    /// **See also:** minimumDateTime()
    /// minimumTime()
    /// maximumTime()
    /// minimumDate()
    /// maximumDate()
    /// setDateTimeRange()
    /// setDateRange()
    /// setTimeRange()
    /// clearMinimumDateTime()
    /// clearMinimumDate()
    /// clearMaximumDate()
    /// clearMinimumTime()
    /// clearMaximumTime()
    maximum_date_time() -> DateTime,
    clear_maximum_date_time(),
    set_maximum_date_time(dt: &DateTimeType),
    /// 
    /// Convenience function to set minimum and maximum date time with one
    /// function call.
    /// 
    /// is analogous to:
    /// 
    /// If either *min* or *max* are not valid, this function does
    /// nothing.
    /// 
    /// **See also:** setMinimumDate()
    /// maximumDate()
    /// setMaximumDate()
    /// clearMinimumDate()
    /// setMinimumTime()
    /// maximumTime()
    /// setMaximumTime()
    /// clearMinimumTime()
    /// QDateTime::isValid()
    set_date_time_range(min: &DateTimeType, max: &DateTimeType),
    /// 
    /// When setting this property the [maximumDateTime()](maximumDateTime())
    /// is adjusted if
    /// necessary to ensure that the range remains valid. If the datetime is
    /// not a valid QDateTime object, this function does nothing.
    /// 
    /// The default minimumDateTime can be restored with
    /// clearMinimumDateTime()
    /// 
    /// By default, this property contains a date that refers to September 14,
    /// 1752 and a time of 00:00:00 and 0 milliseconds.
    /// 
    /// **See also:** maximumDateTime()
    /// minimumTime()
    /// maximumTime()
    /// minimumDate()
    /// maximumDate()
    /// setDateTimeRange()
    /// setDateRange()
    /// setTimeRange()
    /// clearMaximumDateTime()
    /// clearMinimumDate()
    /// clearMaximumDate()
    /// clearMinimumTime()
    /// clearMaximumTime()
    /// 
    /// When setting this property the [maximumDate](maximumDate)
    /// is adjusted if
    /// necessary, to ensure that the range remains valid. If the date is
    /// not a valid QDate object, this function does nothing.
    /// 
    /// By default, this property contains a date that refers to September 14, 1752.
    /// The minimum date must be at least the first day in year 100, otherwise
    /// setMinimumDate() has no effect.
    /// 
    /// **See also:** minimumTime()
    /// maximumTime()
    /// setDateRange()
    minimum_date() -> Date,
    set_minimum_date(min: &DateType),
    clear_minimum_date(),
    /// 
    /// When setting this property the [minimumDateTime()](minimumDateTime())
    /// is adjusted if
    /// necessary to ensure that the range remains valid. If the datetime is
    /// not a valid QDateTime object, this function does nothing.
    /// 
    /// The default maximumDateTime can be restored with
    /// clearMaximumDateTime().
    /// 
    /// By default, this property contains a date that refers to 31 December,
    /// 9999 and a time of 23:59:59 and 999 milliseconds.
    /// 
    /// **See also:** minimumDateTime()
    /// minimumTime()
    /// maximumTime()
    /// minimumDate()
    /// maximumDate()
    /// setDateTimeRange()
    /// setDateRange()
    /// setTimeRange()
    /// clearMinimumDateTime()
    /// clearMinimumDate()
    /// clearMaximumDate()
    /// clearMinimumTime()
    /// clearMaximumTime()
    /// 
    /// When setting this property the [minimumDate](minimumDate)
    /// is adjusted if
    /// necessary to ensure that the range remains valid. If the date is
    /// not a valid QDate object, this function does nothing.
    /// 
    /// By default, this property contains a date that refers to December 31, 9999.
    /// 
    /// **See also:** minimumDate
    /// minimumTime
    /// maximumTime
    /// setDateRange()
    maximum_date() -> Date,
    set_maximum_date(max: &DateType),
    clear_maximum_date(),
    /// 
    /// Convenience function to set minimum and maximum date with one
    /// function call.
    /// 
    /// is analogous to:
    /// 
    /// If either *min* or *max* are not valid, this function does
    /// nothing.
    /// 
    /// **See also:** setMinimumDate()
    /// maximumDate()
    /// setMaximumDate()
    /// clearMinimumDate()
    /// setMinimumTime()
    /// maximumTime()
    /// setMaximumTime()
    /// clearMinimumTime()
    /// QDate::isValid()
    set_date_range(min: &DateType, max: &DateType),
    /// 
    /// When setting this property the [maximumTime](maximumTime)
    /// is adjusted if
    /// necessary, to ensure that the range remains valid. If the time is
    /// not a valid QTime object, this function does nothing.
    /// 
    /// By default, this property contains a time of 00:00:00 and 0 milliseconds.
    /// 
    /// **See also:** maximumTime
    /// minimumDate
    /// maximumDate
    /// setTimeRange()
    minimum_time() -> Time,
    set_minimum_time(min: &TimeType),
    clear_minimum_time(),
    /// 
    /// When setting this property, the [minimumTime](minimumTime)
    /// is adjusted if
    /// necessary to ensure that the range remains valid. If the time is
    /// not a valid QTime object, this function does nothing.
    /// 
    /// By default, this property contains a time of 23:59:59 and 999 milliseconds.
    /// 
    /// **See also:** minimumTime
    /// minimumDate
    /// maximumDate
    /// setTimeRange()
    maximum_time() -> Time,
    set_maximum_time(max: &TimeType),
    clear_maximum_time(),
    /// 
    /// Convenience function to set minimum and maximum time with one
    /// function call.
    /// 
    /// is analogous to:
    /// 
    /// If either *min* or *max* are not valid, this function does
    /// nothing.
    /// 
    /// **See also:** setMinimumDate()
    /// maximumDate()
    /// setMaximumDate()
    /// clearMinimumDate()
    /// setMinimumTime()
    /// maximumTime()
    /// setMaximumTime()
    /// clearMinimumTime()
    /// QTime::isValid()
    set_time_range(min: &TimeType, max: &TimeType),
    /// 
    /// Returns a bit set of the displayed sections for this format.
    /// *setDisplayFormat(),* displayFormat()
    displayed_sections() -> DateTimeEdit::Sections,
    /// 
    /// *setCurrentSection()*
    /// 
    /// If the format is 'yyyy/MM/dd', the displayText is '2001/05/21', and
    /// the cursorPosition is 5, currentSectionIndex returns 1. If the
    /// cursorPosition is 3, currentSectionIndex is 0, and so on.
    /// 
    /// *setCurrentSection()*
    /// **See also:** currentSection()
    current_section() -> DateTimeEdit::Section,
    /// 
    /// Returns the Section at *index.*
    /// 
    /// If the format is 'yyyy/MM/dd', sectionAt(0) returns YearSection,
    /// sectionAt(1) returns MonthSection, and sectionAt(2) returns
    /// YearSection,
    section_at(index: i32) -> DateTimeEdit::Section,
    set_current_section(section: DateTimeEdit::Section),
    /// 
    /// If the format is 'yyyy/MM/dd', the displayText is '2001/05/21', and
    /// the cursorPosition is 5, currentSectionIndex returns 1. If the
    /// cursorPosition is 3, currentSectionIndex is 0, and so on.
    /// 
    /// *setCurrentSection()*
    /// **See also:** currentSection()
    current_section_index() -> i32,
    set_current_section_index(index: i32),
    /// 
    /// This function creates and returns a calendar widget if none has been set.
    calendar_widget() -> CalendarWidget?,
    /// 
    /// Sets the given *calendarWidget* as the widget to be used for the calendar
    /// pop-up. The editor does not automatically take ownership of the calendar widget.
    /// 
    /// **Note**: calendarPopup must be set to true before setting the calendar widget.
    /// **See also:** calendarPopup
    set_calendar_widget(calendar_widget: *CalendarWidgetType),
    /// 
    section_count() -> i32,
    /// 
    /// Selects *section.* If *section* doesn't exist in the currently
    /// displayed sections, this function does nothing. If *section* is
    /// NoSection, this function will unselect all text in the editor.
    /// Otherwise, this function will move the cursor and the current section
    /// to the selected section.
    /// 
    /// **See also:** currentSection()
    set_selected_section(section: DateTimeEdit::Section),
    /// 
    /// Returns the text from the given *section.*
    /// 
    /// **See also:** currentSection()
    section_text(section: DateTimeEdit::Section) -> String,
    /// 
    /// This format is described in QDateTime::toString() and QDateTime::fromString()
    /// 
    /// Example format strings (assuming that the date is 2nd of July 1969):
    /// 
    /// * Format
    /// * Result
    /// * dd.MM.yyyy
    /// * 02.07.1969
    /// * MMM d yy
    /// * Jul 2 69
    /// * MMMM d yy
    /// * July 2 69
    /// 
    /// Note that if you specify a two digit year, it will be interpreted
    /// to be in the century in which the date time edit was initialized.
    /// The default century is the 21 (2000-2099).
    /// 
    /// If you specify an invalid format the format will not be set.
    /// 
    /// **See also:** QDateTime::toString()
    /// displayedSections()
    display_format() -> String,
    set_display_format(format: String),
    /// 
    /// The calendar pop-up will be shown upon clicking the arrow button.
    /// This property is valid only if there is a valid date display format.
    /// 
    /// **See also:** setDisplayFormat()
    calendar_popup() -> bool,
    set_calendar_popup(enable: bool),
    /// 
    time_spec() -> Rute::TimeSpec,
    set_time_spec(spec: Rute::TimeSpec),
    /// 
    [event] size_hint() -> Size,
    /// 
    [event] clear(),
    /// 
    [event] step_by(steps: i32),
    /// 
    [event] event(event: *EventType) -> bool,
    /// 
    /// This signal is emitted whenever the date or time is changed. The
    /// new date and time is passed in *datetime.*
    [signal] date_time_changed(date_time: &DateTimeType),
    /// 
    /// This signal is emitted whenever the time is changed. The new time
    /// is passed in *time.*
    [signal] time_changed(time: &TimeType),
    /// 
    /// This signal is emitted whenever the date is changed. The new date
    /// is passed in *date.*
    [signal] date_changed(date: &DateType),
    /// 
    /// Convenience function to set minimum and maximum date time with one
    /// function call.
    /// 
    /// is analogous to:
    /// 
    /// If either *min* or *max* are not valid, this function does
    /// nothing.
    /// 
    /// **See also:** setMinimumDate()
    /// maximumDate()
    /// setMaximumDate()
    /// clearMinimumDate()
    /// setMinimumTime()
    /// maximumTime()
    /// setMaximumTime()
    /// clearMinimumTime()
    /// QDateTime::isValid()
    set_date_time(date_time: &DateTimeType),
    /// 
    /// Convenience function to set minimum and maximum date time with one
    /// function call.
    /// 
    /// is analogous to:
    /// 
    /// If either *min* or *max* are not valid, this function does
    /// nothing.
    /// 
    /// **See also:** setMinimumDate()
    /// maximumDate()
    /// setMaximumDate()
    /// clearMinimumDate()
    /// setMinimumTime()
    /// maximumTime()
    /// setMaximumTime()
    /// clearMinimumTime()
    /// QDateTime::isValid()
    /// 
    /// Convenience function to set minimum and maximum date with one
    /// function call.
    /// 
    /// is analogous to:
    /// 
    /// If either *min* or *max* are not valid, this function does
    /// nothing.
    /// 
    /// **See also:** setMinimumDate()
    /// maximumDate()
    /// setMaximumDate()
    /// clearMinimumDate()
    /// setMinimumTime()
    /// maximumTime()
    /// setMaximumTime()
    /// clearMinimumTime()
    /// QDate::isValid()
    set_date(date: &DateType),
    /// 
    /// Convenience function to set minimum and maximum time with one
    /// function call.
    /// 
    /// is analogous to:
    /// 
    /// If either *min* or *max* are not valid, this function does
    /// nothing.
    /// 
    /// **See also:** setMinimumDate()
    /// maximumDate()
    /// setMaximumDate()
    /// clearMinimumDate()
    /// setMinimumTime()
    /// maximumTime()
    /// setMaximumTime()
    /// clearMinimumTime()
    /// QTime::isValid()
    set_time(time: &TimeType),
    /// 
    [event] key_press_event(event: *KeyEventType),
    [event] wheel_event(event: *WheelEventType),
    /// 
    [event] focus_in_event(event: *FocusEventType),
    /// 
    [event] focus_next_prev_child(next: bool) -> bool,
    /// 
    [event] validate(input: String, pos: &i32) -> Validator::State,
    /// 
    [event] fixup(input: String),
    /// 
    /// Returns an appropriate datetime for the given *text.*
    /// 
    /// This virtual function is used by the datetime edit whenever it
    /// needs to interpret text entered by the user as a value.
    /// 
    /// **See also:** textFromDateTime()
    /// validate()
    [event] date_time_from_text(text: String) -> DateTime,
    /// 
    /// This virtual function is used by the date time edit whenever it
    /// needs to display *dateTime.*
    /// 
    /// If you reimplement this, you may also need to reimplement validate().
    /// 
    /// **See also:** dateTimeFromText()
    /// validate()
    [event] text_from_date_time(dt: &DateTimeType) -> String,
    /// 
    [event] step_enabled() -> AbstractSpinBox::StepEnabled,
    /// 
    [event] mouse_press_event(event: *MouseEventType),
    /// 
    [event] paint_event(event: *PaintEventType),
    /// 
    /// Initialize *option* with the values from this QDataTimeEdit. This method
    /// is useful for subclasses when they need a QStyleOptionSpinBox, but don't want
    /// to fill in all the information themselves.
    /// 
    /// **See also:** QStyleOption::initFrom()
    init_style_option(option: *StyleOptionSpinBoxType),
}

// vim: syntax=rust expandtab ts=4 sw=4
