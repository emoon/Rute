/// 
/// QStackedLayout can be used to create a user interface similar to
/// the one provided by QTabWidget. There is also a convenience
/// QStackedWidget class built on top of QStackedLayout.
/// 
/// A QStackedLayout can be populated with a number of child widgets
/// ("pages"). For example:
/// 
/// QStackedLayout provides no intrinsic means for the user to switch
/// page. This is typically done through a QComboBox or a QListWidget
/// that stores the titles of the QStackedLayout's pages. For
/// example:
/// 
/// When populating a layout, the widgets are added to an internal
/// list. The indexOf() function returns the index of a widget in that
/// list. The widgets can either be added to the end of the list using
/// the addWidget() function, or inserted at a given index using the
/// insertWidget() function. The removeWidget() function removes the
/// widget at the given index from the layout. The number of widgets
/// contained in the layout, can be obtained using the count()
/// function.
/// 
/// The widget() function returns the widget at a given index
/// position. The index of the widget that is shown on screen is given
/// by currentIndex() and can be changed using setCurrentIndex(). In a
/// similar manner, the currently shown widget can be retrieved using
/// the currentWidget() function, and altered using the
/// setCurrentWidget() function.
/// 
/// Whenever the current widget in the layout changes or a widget is
/// removed from the layout, the currentChanged() and widgetRemoved()
/// signals are emitted respectively.
/// 
/// **See also:** [`StackedWidget`]
/// [`TabWidget`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct StackedLayout : Layout {
    /// 
    /// Adds the given *widget* to the end of this layout and returns the
    /// index position of the *widget.*
    /// 
    /// If the QStackedLayout is empty before this function is called,
    /// the given *widget* becomes the current widget.
    /// 
    /// **See also:** [`insert_widget()`]
    /// [`remove_widget()`]
    /// [`set_current_widget()`]
    add_widget(w: *WidgetType) -> i32,
    /// 
    /// Inserts the given *widget* at the given *index* in this
    /// QStackedLayout. If *index* is out of range, the widget is
    /// appended (in which case it is the actual index of the *widget*
    /// that is returned).
    /// 
    /// If the QStackedLayout is empty before this function is called, the
    /// given *widget* becomes the current widget.
    /// 
    /// Inserting a new widget at an index less than or equal to the current index
    /// will increment the current index, but keep the current widget.
    /// 
    /// **See also:** [`add_widget()`]
    /// [`remove_widget()`]
    /// [`set_current_widget()`]
    insert_widget(index: i32, w: *WidgetType) -> i32,
    /// 
    /// Returns the current widget, or 0 if there are no widgets in this
    /// layout.
    /// 
    /// **See also:** [`current_index()`]
    /// [`set_current_widget()`]
    current_widget() -> Widget?,
    /// 
    /// The current index is -1 if there is no current widget.
    /// 
    /// **See also:** [`current_widget()`]
    /// [`index_of()`]
    current_index() -> i32,
    /// 
    /// This signal is emitted whenever a widget is removed from the
    /// layout. The widget's *index* is passed as parameter.
    /// 
    /// **See also:** [`remove_widget()`]
    /// 
    /// Returns the widget at the given *index,* or 0 if there is no
    /// widget at the given position.
    /// 
    /// **See also:** [`current_widget()`]
    /// [`index_of()`]
    widget(arg0: i32) -> Widget?,
    /// 
    /// **See also:** [`current_index()`]
    /// [`widget()`]
    [event] count() -> i32,
    /// 
    /// The default value is StackOne. Setting the property to StackAll
    /// allows you to make use of the layout for overlay widgets
    /// that do additional drawing on top of other widgets, for example,
    /// graphical editors.
    stacking_mode() -> StackedLayout::StackingMode,
    set_stacking_mode(stacking_mode: StackedLayout::StackingMode),
    /// 
    [event] add_item(item: *LayoutItemType),
    /// 
    [event] size_hint() -> Size,
    /// 
    [event] minimum_size() -> Size,
    /// 
    [event] item_at(arg0: i32) -> LayoutItem?,
    /// 
    [event] take_at(arg0: i32) -> LayoutItem?,
    /// 
    [event] has_height_for_width() -> bool,
    /// 
    [event] height_for_width(width: i32) -> i32,
    /// 
    /// This signal is emitted whenever a widget is removed from the
    /// layout. The widget's *index* is passed as parameter.
    /// 
    /// **See also:** [`remove_widget()`]
    [signal] widget_removed(index: i32),
    /// 
    /// This signal is emitted whenever the current widget in the layout
    /// changes. The *index* specifies the index of the new current
    /// widget, or -1 if there isn't a new one (for example, if there
    /// are no widgets in the QStackedLayout)
    /// 
    /// **See also:** [`current_widget()`]
    /// [`set_current_widget()`]
    [signal] current_changed(index: i32),
    set_current_index(index: i32),
    /// 
    /// Sets the current widget to be the specified *widget.* The new
    /// current widget must already be contained in this stacked layout.
    /// 
    /// **See also:** [`set_current_index()`]
    /// [`current_widget()`]
    set_current_widget(w: *WidgetType),
}

[org_name(QStackedLayout)]
enum StackingMode {
    StackOne,
    StackAll,
}

// vim: syntax=rust expandtab ts=4 sw=4
