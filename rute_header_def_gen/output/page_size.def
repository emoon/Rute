///     \class QPageSize
///     \inmodule QtGui
///     \since 5.3
///     \brief The QPageSize class describes the size and name of a defined page size.
/// 
///     This class implements support for the set of standard page sizes as defined
///     in the Adobe Postscript PPD Standard v4.3. It defines the standard set of
///     page sizes in points, millimeters and inches and ensures these sizes are
///     consistently used. Other size units can be used but will be calculated
///     results and so may not always be consistent. The defined point sizes are
///     always a integer, all other sizes can be fractions of a unit.
/// 
///     The defined size is always in width x height order with no implied page
///     orientation. Note that it is possible for page sizes to be defined where the
///     width is greater than the height, such as QPageSize::Ledger, so you cannot
///     rely on comparing the width and height values to determine page orientation.
/// 
///     For example, A4 is defined by the standard as 210mm x 297mm, 8.27in x 11.69in,
///     or 595pt x 842pt.
/// 
///     You can also define custom page sizes with custom names in any units you want
///     and this unit size will be preserved and used as the base for all other unit
///     size calculations.
/// 
///     When creating a QPageSize using a custom QSize you can choose if you want
///     QPageSize to try match the size to a standard page size. By default
///     QPaperSize uses a FuzzyMatch mode where it will match a given page size to
///     a standard page size if it falls within 3 postscript points of a defined
///     standard size. You can override this to request only an exact match but this
///     is not recommended as conversions between units can easily lose 3 points and
///     result in incorrect page sizes.
/// 
///     A QPageSize instance may also be obtained by querying the supported page sizes
///     for a print device. In this case the localized name returned is that defined
///     by the printer itself. Note that the print device may not support the current
///     default locale language.
/// 
///     The class also provides convenience methods for converting page size IDs to and from
///     various unit sizes.
/// 
///     \sa QPagedPaintDevice, QPdfWriter
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QPageSize)]
enum PageSizeId {
    A4,
    B5,
    Letter,
    Legal,
    Executive,
    A0,
    A1,
    A2,
    A3,
    A5,
    A6,
    A7,
    A8,
    A9,
    B0,
    B1,
    B10,
    B2,
    B3,
    B4,
    B6,
    B7,
    B8,
    B9,
    C5E,
    Comm10E,
    DLE,
    Folio,
    Ledger,
    Tabloid,
    Custom,
    A10,
    A3Extra,
    A4Extra,
    A4Plus,
    A4Small,
    A5Extra,
    B5Extra,
    JisB0,
    JisB1,
    JisB2,
    JisB3,
    JisB4,
    JisB5,
    JisB6,
    JisB7,
    JisB8,
    JisB9,
    JisB10,
    AnsiC,
    AnsiD,
    AnsiE,
    LegalExtra,
    LetterExtra,
    LetterPlus,
    LetterSmall,
    TabloidExtra,
    ArchA,
    ArchB,
    ArchC,
    ArchD,
    ArchE,
    Imperial7x9,
    Imperial8x10,
    Imperial9x11,
    Imperial9x12,
    Imperial10x11,
    Imperial10x13,
    Imperial10x14,
    Imperial12x11,
    Imperial15x11,
    ExecutiveStandard,
    Note,
    Quarto,
    Statement,
    SuperA,
    SuperB,
    Postcard,
    DoublePostcard,
    Prc16K,
    Prc32K,
    Prc32KBig,
    FanFoldUS,
    FanFoldGerman,
    FanFoldGermanLegal,
    EnvelopeB4,
    EnvelopeB5,
    EnvelopeB6,
    EnvelopeC0,
    EnvelopeC1,
    EnvelopeC2,
    EnvelopeC3,
    EnvelopeC4,
    EnvelopeC6,
    EnvelopeC65,
    EnvelopeC7,
    Envelope9,
    Envelope11,
    Envelope12,
    Envelope14,
    EnvelopeMonarch,
    EnvelopePersonal,
    EnvelopeChou3,
    EnvelopeChou4,
    EnvelopeInvite,
    EnvelopeItalian,
    EnvelopeKaku2,
    EnvelopeKaku3,
    EnvelopePrc1,
    EnvelopePrc2,
    EnvelopePrc3,
    EnvelopePrc4,
    EnvelopePrc5,
    EnvelopePrc6,
    EnvelopePrc7,
    EnvelopePrc8,
    EnvelopePrc9,
    EnvelopePrc10,
    EnvelopeYou4,
    LastPageSize,
    NPageSize,
    NPaperSize,
    AnsiA,
    AnsiB,
    EnvelopeC5,
    EnvelopeDL,
    Envelope10,
}

[org_name(QPageSize)]
enum Unit {
    Millimeter,
    Point,
    Inch,
    Pica,
    Didot,
    Cicero,
}

[org_name(QPageSize)]
enum SizeMatchPolicy {
    FuzzyMatch,
    FuzzyOrientationMatch,
    ExactMatch,
}


struct PageSize {
    swap(other: &PageSizeType),
    ///     Returns \c true if this page is equivalent to the \a other page, i.e. if the
    ///     page has the same size regardless of other attributes like name.
    is_equivalent_to(other: &PageSizeType) -> bool,
    ///     Returns \c true if this page size is valid.
    /// 
    ///     The page size may be invalid if created with an invalid PageSizeId, or a
    ///     negative or invalid QSize or QSizeF, or the null constructor.
    is_valid() -> bool,
    ///     Returns the PPD mediaOption keyword of the standard \a pageSizeId.
    /// 
    ///     If the QPageSize is invalid then the key will be empty.
    key() -> String,
    ///     Returns the localized name of the standard \a pageSizeId.
    /// 
    ///     If the QPageSize is invalid then the name will be empty.
    name() -> String,
    ///     Returns the PageSizeId for the given Windows DMPAPER enum value \a windowsId.
    /// 
    ///     If there is no matching PageSizeId then QPageSize::Custom is returned.
    id() -> PageSize::PageSizeId,
    ///     Returns the Windows DMPAPER enum value of the standard \a pageSizeId.
    /// 
    ///     Not all valid PPD page sizes have a Windows equivalent, in which case 0
    ///     will be returned.
    windows_id() -> i32,
    ///     Returns the definition size of the standard \a pageSizeId.
    /// 
    ///     To obtain the definition units, call QPageSize::definitionUnits().
    definition_size() -> SizeF,
    ///     Returns the definition units of the standard \a pageSizeId.
    /// 
    ///     To obtain the definition size, call QPageSize::definitionSize().
    definition_units() -> PageSize::Unit,
    ///     Returns the size of the standard \a pageSizeId in the requested \a units.
    size(units: PageSize::Unit) -> SizeF,
    ///     Returns the size of the standard \a pageSizeId in Points.
    size_points() -> Size,
    ///     Returns the size of the standard \a pageSizeId in Device Pixels
    ///     for the given \a resolution.
    size_pixels(resolution: i32) -> Size,
    ///     Returns the page rectangle in the required \a units.
    /// 
    ///     If the QPageSize is invalid then the QRect will be invalid.
    rect(units: PageSize::Unit) -> RectF,
    ///     Returns the page rectangle in Postscript Points (1/72 of an inch).
    /// 
    ///     If the QPageSize is invalid then the QRect will be invalid.
    rect_points() -> Rect,
    ///     Returns the page rectangle in Device Pixels at the given \a resolution.
    /// 
    ///     If the QPageSize is invalid then the QRect will be invalid.
    rect_pixels(resolution: i32) -> Rect,
    ///     Returns the PPD mediaOption keyword of the standard \a pageSizeId.
    /// 
    ///     If the QPageSize is invalid then the key will be empty.
    [static] key(page_size_id: PageSize::PageSizeId) -> String,
    ///     Returns the localized name of the standard \a pageSizeId.
    /// 
    ///     If the QPageSize is invalid then the name will be empty.
    [static] name(page_size_id: PageSize::PageSizeId) -> String,
    ///     Returns the PageSizeId for the given Windows DMPAPER enum value \a windowsId.
    /// 
    ///     If there is no matching PageSizeId then QPageSize::Custom is returned.
    [static] id(point_size: &SizeType, match_policy: PageSize::SizeMatchPolicy) -> PageSize::PageSizeId,
    ///     Returns the PageSizeId for the given Windows DMPAPER enum value \a windowsId.
    /// 
    ///     If there is no matching PageSizeId then QPageSize::Custom is returned.
    [static] id(size: &SizeFType, units: PageSize::Unit, match_policy: PageSize::SizeMatchPolicy) -> PageSize::PageSizeId,
    ///     Returns the PageSizeId for the given Windows DMPAPER enum value \a windowsId.
    /// 
    ///     If there is no matching PageSizeId then QPageSize::Custom is returned.
    [static] id(windows_id: i32) -> PageSize::PageSizeId,
    ///     Returns the Windows DMPAPER enum value of the standard \a pageSizeId.
    /// 
    ///     Not all valid PPD page sizes have a Windows equivalent, in which case 0
    ///     will be returned.
    [static] windows_id(page_size_id: PageSize::PageSizeId) -> i32,
    ///     Returns the definition size of the standard \a pageSizeId.
    /// 
    ///     To obtain the definition units, call QPageSize::definitionUnits().
    [static] definition_size(page_size_id: PageSize::PageSizeId) -> SizeF,
    ///     Returns the definition units of the standard \a pageSizeId.
    /// 
    ///     To obtain the definition size, call QPageSize::definitionSize().
    [static] definition_units(page_size_id: PageSize::PageSizeId) -> PageSize::Unit,
    ///     Returns the size of the standard \a pageSizeId in the requested \a units.
    [static] size(page_size_id: PageSize::PageSizeId, units: PageSize::Unit) -> SizeF,
    ///     Returns the size of the standard \a pageSizeId in Points.
    [static] size_points(page_size_id: PageSize::PageSizeId) -> Size,
    ///     Returns the size of the standard \a pageSizeId in Device Pixels
    ///     for the given \a resolution.
    [static] size_pixels(page_size_id: PageSize::PageSizeId, resolution: i32) -> Size,
}

// vim: syntax=rust expandtab ts=4 sw=4
