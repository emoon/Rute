#[org_name(QPageSize)]
enum PageSizeId {
    A4,
    B5,
    Letter,
    Legal,
    Executive,
    A0,
    A1,
    A2,
    A3,
    A5,
    A6,
    A7,
    A8,
    A9,
    B0,
    B1,
    B10,
    B2,
    B3,
    B4,
    B6,
    B7,
    B8,
    B9,
    C5E,
    Comm10E,
    DLE,
    Folio,
    Ledger,
    Tabloid,
    Custom,
    A10,
    A3Extra,
    A4Extra,
    A4Plus,
    A4Small,
    A5Extra,
    B5Extra,
    JisB0,
    JisB1,
    JisB2,
    JisB3,
    JisB4,
    JisB5,
    JisB6,
    JisB7,
    JisB8,
    JisB9,
    JisB10,
    AnsiC,
    AnsiD,
    AnsiE,
    LegalExtra,
    LetterExtra,
    LetterPlus,
    LetterSmall,
    TabloidExtra,
    ArchA,
    ArchB,
    ArchC,
    ArchD,
    ArchE,
    Imperial7x9,
    Imperial8x10,
    Imperial9x11,
    Imperial9x12,
    Imperial10x11,
    Imperial10x13,
    Imperial10x14,
    Imperial12x11,
    Imperial15x11,
    ExecutiveStandard,
    Note,
    Quarto,
    Statement,
    SuperA,
    SuperB,
    Postcard,
    DoublePostcard,
    Prc16K,
    Prc32K,
    Prc32KBig,
    FanFoldUS,
    FanFoldGerman,
    FanFoldGermanLegal,
    EnvelopeB4,
    EnvelopeB5,
    EnvelopeB6,
    EnvelopeC0,
    EnvelopeC1,
    EnvelopeC2,
    EnvelopeC3,
    EnvelopeC4,
    EnvelopeC6,
    EnvelopeC65,
    EnvelopeC7,
    Envelope9,
    Envelope11,
    Envelope12,
    Envelope14,
    EnvelopeMonarch,
    EnvelopePersonal,
    EnvelopeChou3,
    EnvelopeChou4,
    EnvelopeInvite,
    EnvelopeItalian,
    EnvelopeKaku2,
    EnvelopeKaku3,
    EnvelopePrc1,
    EnvelopePrc2,
    EnvelopePrc3,
    EnvelopePrc4,
    EnvelopePrc5,
    EnvelopePrc6,
    EnvelopePrc7,
    EnvelopePrc8,
    EnvelopePrc9,
    EnvelopePrc10,
    EnvelopeYou4,
    LastPageSize,
    NPageSize,
    NPaperSize,
    AnsiA,
    AnsiB,
    EnvelopeC5,
    EnvelopeDL,
    Envelope10,
}

#[org_name(QPageSize)]
enum Unit {
    Millimeter,
    Point,
    Inch,
    Pica,
    Didot,
    Cicero,
}

#[org_name(QPageSize)]
enum SizeMatchPolicy {
    FuzzyMatch,
    FuzzyOrientationMatch,
    ExactMatch,
}


struct PageSize {
    swap(other: &PageSizeType),
    is_equivalent_to(other: &PageSizeType) -> bool,
    is_valid() -> bool,
    key() -> String,
    name() -> String,
    id() -> PageSize::PageSizeId,
    windows_id() -> i32,
    definition_size() -> SizeF,
    definition_units() -> PageSize::Unit,
    size(units: PageSize::Unit) -> SizeF,
    size_points() -> Size,
    size_pixels(resolution: i32) -> Size,
    rect(units: PageSize::Unit) -> RectF,
    rect_points() -> Rect,
    rect_pixels(resolution: i32) -> Rect,
    [static] key(page_size_id: PageSize::PageSizeId) -> String,
    [static] name(page_size_id: PageSize::PageSizeId) -> String,
    [static] id(point_size: &SizeType, match_policy: PageSize::SizeMatchPolicy) -> PageSize::PageSizeId,
    [static] id(size: &SizeFType, units: PageSize::Unit, match_policy: PageSize::SizeMatchPolicy) -> PageSize::PageSizeId,
    [static] id(windows_id: i32) -> PageSize::PageSizeId,
    [static] windows_id(page_size_id: PageSize::PageSizeId) -> i32,
    [static] definition_size(page_size_id: PageSize::PageSizeId) -> SizeF,
    [static] definition_units(page_size_id: PageSize::PageSizeId) -> PageSize::Unit,
    [static] size(page_size_id: PageSize::PageSizeId, units: PageSize::Unit) -> SizeF,
    [static] size_points(page_size_id: PageSize::PageSizeId) -> Size,
    [static] size_pixels(page_size_id: PageSize::PageSizeId, resolution: i32) -> Size,
}

// vim: syntax=rust expandtab ts=4 sw=4
