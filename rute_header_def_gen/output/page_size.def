/// 
/// This class implements support for the set of standard page sizes as defined
/// in the Adobe Postscript PPD Standard v4.3. It defines the standard set of
/// page sizes in points, millimeters and inches and ensures these sizes are
/// consistently used. Other size units can be used but will be calculated
/// results and so may not always be consistent. The defined point sizes are
/// always a integer, all other sizes can be fractions of a unit.
/// 
/// The defined size is always in width x height order with no implied page
/// orientation. Note that it is possible for page sizes to be defined where the
/// width is greater than the height, such as QPageSize::Ledger, so you cannot
/// rely on comparing the width and height values to determine page orientation.
/// 
/// For example, A4 is defined by the standard as 210mm x 297mm, 8.27in x 11.69in,
/// or 595pt x 842pt.
/// 
/// You can also define custom page sizes with custom names in any units you want
/// and this unit size will be preserved and used as the base for all other unit
/// size calculations.
/// 
/// When creating a QPageSize using a custom QSize you can choose if you want
/// QPageSize to try match the size to a standard page size. By default
/// QPaperSize uses a FuzzyMatch mode where it will match a given page size to
/// a standard page size if it falls within 3 postscript points of a defined
/// standard size. You can override this to request only an exact match but this
/// is not recommended as conversions between units can easily lose 3 points and
/// result in incorrect page sizes.
/// 
/// A QPageSize instance may also be obtained by querying the supported page sizes
/// for a print device. In this case the localized name returned is that defined
/// by the printer itself. Note that the print device may not support the current
/// default locale language.
/// 
/// The class also provides convenience methods for converting page size IDs to and from
/// various unit sizes.
/// 
/// **See also:** [`PagedPaintDevice`]
/// [`PdfWriter`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct PageSize {
    /// 
    /// Swaps this QPageSize with *other.* This function is very fast and
    /// never fails.
    swap(other: &PageSizeType),
    /// 
    /// Returns `true` if this page is equivalent to the *other* page, i.e. if the
    /// page has the same size regardless of other attributes like name.
    is_equivalent_to(other: &PageSizeType) -> bool,
    /// 
    /// Returns `true` if this page size is valid.
    /// 
    /// The page size may be invalid if created with an invalid PageSizeId, or a
    /// negative or invalid QSize or QSizeF, or the null constructor.
    is_valid() -> bool,
    /// 
    /// Returns the unique key of the page size.
    /// 
    /// By default this is the PPD standard mediaOption keyword for the page size,
    /// or the PPD custom format key. If the QPageSize instance was obtained from
    /// a print device then this will be the key provided by the print device and
    /// may differ from the standard key.
    /// 
    /// If the QPageSize is invalid then the key will be an empty string.
    /// 
    /// This key should never be shown to end users, it is an internal key only.
    /// For a human-readable name use name().
    /// 
    /// **See also:** [`name()`]
    /// 
    /// Returns the PPD mediaOption keyword of the standard *pageSizeId.*
    /// 
    /// If the QPageSize is invalid then the key will be empty.
    key() -> String,
    /// 
    /// Returns a localized human-readable name for the page size.
    /// 
    /// If the QPageSize instance was obtained from a print device then the name
    /// used is that provided by the print device. Note that a print device may
    /// not support the current default locale language.
    /// 
    /// If the QPageSize is invalid then the name will be an empty string.
    /// 
    /// Returns the localized name of the standard *pageSizeId.*
    /// 
    /// If the QPageSize is invalid then the name will be empty.
    name() -> String,
    /// 
    /// Returns the standard QPageSize::PageSizeId of the page, or QPageSize::Custom.
    /// 
    /// If the QPageSize is invalid then the ID will be QPageSize::Custom.
    /// 
    /// Returns the standard QPageSize::PageSizeId of the given *pointSize* in
    /// points using the given *matchPolicy.*
    /// 
    /// If using FuzzyMatch then the point size of the PageSizeId returned may not
    /// exactly match the *pointSize* you passed in. You should call
    /// QPageSize::sizePoints() using the returned PageSizeId to find out the actual
    /// point size of the PageSizeId before using it in any calculations.
    /// 
    /// Returns the standard QPageSize::PageSizeId of the given *size* in *units*
    /// using the given *matchPolicy.*
    /// 
    /// If using FuzzyMatch then the unit size of the PageSizeId returned may not
    /// exactly match the *size* you passed in. You should call
    /// QPageSize::size() using the returned PageSizeId to find out the actual
    /// unit size of the PageSizeId before using it in any calculations.
    /// 
    /// Returns the PageSizeId for the given Windows DMPAPER enum value *windowsId.*
    /// 
    /// If there is no matching PageSizeId then QPageSize::Custom is returned.
    id() -> PageSize::PageSizeId,
    /// 
    /// Returns the Windows DMPAPER enum value for the page size.
    /// 
    /// Not all valid PPD page sizes have a Windows equivalent, in which case 0
    /// will be returned.
    /// 
    /// If the QPageSize is invalid then the Windows ID will be 0.
    /// 
    /// **See also:** [`id()`]
    /// 
    /// Returns the Windows DMPAPER enum value of the standard *pageSizeId.*
    /// 
    /// Not all valid PPD page sizes have a Windows equivalent, in which case 0
    /// will be returned.
    windows_id() -> i32,
    /// 
    /// Returns the definition size of the page size.
    /// 
    /// For a standard page size this will be the size as defined in the relevant
    /// standard, i.e. ISO A4 will be defined in millimeters while ANSI Letter will
    /// be defined in inches.
    /// 
    /// For a custom page size this will be the original size used to create the
    /// page size object.
    /// 
    /// If the QPageSize is invalid then the QSizeF will be invalid.
    /// 
    /// **See also:** [`definition_units()`]
    /// 
    /// Returns the definition size of the standard *pageSizeId.*
    /// 
    /// To obtain the definition units, call QPageSize::definitionUnits().
    definition_size() -> SizeF,
    /// 
    /// Returns the definition units of the page size.
    /// 
    /// For a standard page size this will be the units as defined in the relevant
    /// standard, i.e. ISO A4 will be defined in millimeters while ANSI Letter will
    /// be defined in inches.
    /// 
    /// For a custom page size this will be the original units used to create the
    /// page size object.
    /// 
    /// If the QPageSize is invalid then the QPageSize::Unit will be invalid.
    /// 
    /// **See also:** [`definition_size()`]
    /// 
    /// Returns the definition units of the standard *pageSizeId.*
    /// 
    /// To obtain the definition size, call QPageSize::definitionSize().
    definition_units() -> PageSize::Unit,
    /// 
    /// Returns the size of the page in the required *units.*
    /// 
    /// If the QPageSize is invalid then the QSizeF will be invalid.
    /// 
    /// Returns the size of the page in Postscript Points (1/72 of an inch).
    /// 
    /// If the QPageSize is invalid then the QSize will be invalid.
    /// 
    /// Returns the size of the page in Device Pixels at the given *resolution.*
    /// 
    /// If the QPageSize is invalid then the QSize will be invalid.
    /// 
    /// Returns the size of the standard *pageSizeId* in the requested *units.*
    /// 
    /// Returns the size of the standard *pageSizeId* in Points.
    /// 
    /// Returns the size of the standard *pageSizeId* in Device Pixels
    /// for the given *resolution.*
    size(units: PageSize::Unit) -> SizeF,
    /// 
    /// Returns the size of the page in Postscript Points (1/72 of an inch).
    /// 
    /// If the QPageSize is invalid then the QSize will be invalid.
    /// 
    /// Returns the size of the standard *pageSizeId* in Points.
    size_points() -> Size,
    /// 
    /// Returns the size of the page in Device Pixels at the given *resolution.*
    /// 
    /// If the QPageSize is invalid then the QSize will be invalid.
    /// 
    /// Returns the size of the standard *pageSizeId* in Device Pixels
    /// for the given *resolution.*
    size_pixels(resolution: i32) -> Size,
    /// 
    /// Returns the page rectangle in the required *units.*
    /// 
    /// If the QPageSize is invalid then the QRect will be invalid.
    /// 
    /// Returns the page rectangle in Postscript Points (1/72 of an inch).
    /// 
    /// If the QPageSize is invalid then the QRect will be invalid.
    /// 
    /// Returns the page rectangle in Device Pixels at the given *resolution.*
    /// 
    /// If the QPageSize is invalid then the QRect will be invalid.
    rect(units: PageSize::Unit) -> RectF,
    /// 
    /// Returns the page rectangle in Postscript Points (1/72 of an inch).
    /// 
    /// If the QPageSize is invalid then the QRect will be invalid.
    rect_points() -> Rect,
    /// 
    /// Returns the page rectangle in Device Pixels at the given *resolution.*
    /// 
    /// If the QPageSize is invalid then the QRect will be invalid.
    rect_pixels(resolution: i32) -> Rect,
    /// 
    /// Returns the unique key of the page size.
    /// 
    /// By default this is the PPD standard mediaOption keyword for the page size,
    /// or the PPD custom format key. If the QPageSize instance was obtained from
    /// a print device then this will be the key provided by the print device and
    /// may differ from the standard key.
    /// 
    /// If the QPageSize is invalid then the key will be an empty string.
    /// 
    /// This key should never be shown to end users, it is an internal key only.
    /// For a human-readable name use name().
    /// 
    /// **See also:** [`name()`]
    /// 
    /// Returns the PPD mediaOption keyword of the standard *pageSizeId.*
    /// 
    /// If the QPageSize is invalid then the key will be empty.
    [org_name(key)]
    [static] key_2(page_size_id: PageSize::PageSizeId) -> String,
    /// 
    /// Returns a localized human-readable name for the page size.
    /// 
    /// If the QPageSize instance was obtained from a print device then the name
    /// used is that provided by the print device. Note that a print device may
    /// not support the current default locale language.
    /// 
    /// If the QPageSize is invalid then the name will be an empty string.
    /// 
    /// Returns the localized name of the standard *pageSizeId.*
    /// 
    /// If the QPageSize is invalid then the name will be empty.
    [org_name(name)]
    [static] name_2(page_size_id: PageSize::PageSizeId) -> String,
    /// 
    /// Returns the standard QPageSize::PageSizeId of the page, or QPageSize::Custom.
    /// 
    /// If the QPageSize is invalid then the ID will be QPageSize::Custom.
    /// 
    /// Returns the standard QPageSize::PageSizeId of the given *pointSize* in
    /// points using the given *matchPolicy.*
    /// 
    /// If using FuzzyMatch then the point size of the PageSizeId returned may not
    /// exactly match the *pointSize* you passed in. You should call
    /// QPageSize::sizePoints() using the returned PageSizeId to find out the actual
    /// point size of the PageSizeId before using it in any calculations.
    /// 
    /// Returns the standard QPageSize::PageSizeId of the given *size* in *units*
    /// using the given *matchPolicy.*
    /// 
    /// If using FuzzyMatch then the unit size of the PageSizeId returned may not
    /// exactly match the *size* you passed in. You should call
    /// QPageSize::size() using the returned PageSizeId to find out the actual
    /// unit size of the PageSizeId before using it in any calculations.
    /// 
    /// Returns the PageSizeId for the given Windows DMPAPER enum value *windowsId.*
    /// 
    /// If there is no matching PageSizeId then QPageSize::Custom is returned.
    [org_name(id)]
    [static] id_2(point_size: &SizeType, match_policy: PageSize::SizeMatchPolicy) -> PageSize::PageSizeId,
    /// 
    /// Returns the standard QPageSize::PageSizeId of the page, or QPageSize::Custom.
    /// 
    /// If the QPageSize is invalid then the ID will be QPageSize::Custom.
    /// 
    /// Returns the standard QPageSize::PageSizeId of the given *pointSize* in
    /// points using the given *matchPolicy.*
    /// 
    /// If using FuzzyMatch then the point size of the PageSizeId returned may not
    /// exactly match the *pointSize* you passed in. You should call
    /// QPageSize::sizePoints() using the returned PageSizeId to find out the actual
    /// point size of the PageSizeId before using it in any calculations.
    /// 
    /// Returns the standard QPageSize::PageSizeId of the given *size* in *units*
    /// using the given *matchPolicy.*
    /// 
    /// If using FuzzyMatch then the unit size of the PageSizeId returned may not
    /// exactly match the *size* you passed in. You should call
    /// QPageSize::size() using the returned PageSizeId to find out the actual
    /// unit size of the PageSizeId before using it in any calculations.
    /// 
    /// Returns the PageSizeId for the given Windows DMPAPER enum value *windowsId.*
    /// 
    /// If there is no matching PageSizeId then QPageSize::Custom is returned.
    [org_name(id)]
    [static] id_3(size: &SizeFType, units: PageSize::Unit, match_policy: PageSize::SizeMatchPolicy) -> PageSize::PageSizeId,
    /// 
    /// Returns the standard QPageSize::PageSizeId of the page, or QPageSize::Custom.
    /// 
    /// If the QPageSize is invalid then the ID will be QPageSize::Custom.
    /// 
    /// Returns the standard QPageSize::PageSizeId of the given *pointSize* in
    /// points using the given *matchPolicy.*
    /// 
    /// If using FuzzyMatch then the point size of the PageSizeId returned may not
    /// exactly match the *pointSize* you passed in. You should call
    /// QPageSize::sizePoints() using the returned PageSizeId to find out the actual
    /// point size of the PageSizeId before using it in any calculations.
    /// 
    /// Returns the standard QPageSize::PageSizeId of the given *size* in *units*
    /// using the given *matchPolicy.*
    /// 
    /// If using FuzzyMatch then the unit size of the PageSizeId returned may not
    /// exactly match the *size* you passed in. You should call
    /// QPageSize::size() using the returned PageSizeId to find out the actual
    /// unit size of the PageSizeId before using it in any calculations.
    /// 
    /// Returns the PageSizeId for the given Windows DMPAPER enum value *windowsId.*
    /// 
    /// If there is no matching PageSizeId then QPageSize::Custom is returned.
    [org_name(id)]
    [static] id_4(windows_id: i32) -> PageSize::PageSizeId,
    /// 
    /// Returns the Windows DMPAPER enum value for the page size.
    /// 
    /// Not all valid PPD page sizes have a Windows equivalent, in which case 0
    /// will be returned.
    /// 
    /// If the QPageSize is invalid then the Windows ID will be 0.
    /// 
    /// **See also:** [`id()`]
    /// 
    /// Returns the Windows DMPAPER enum value of the standard *pageSizeId.*
    /// 
    /// Not all valid PPD page sizes have a Windows equivalent, in which case 0
    /// will be returned.
    [org_name(windowsId)]
    [static] windows_id_2(page_size_id: PageSize::PageSizeId) -> i32,
    /// 
    /// Returns the definition size of the page size.
    /// 
    /// For a standard page size this will be the size as defined in the relevant
    /// standard, i.e. ISO A4 will be defined in millimeters while ANSI Letter will
    /// be defined in inches.
    /// 
    /// For a custom page size this will be the original size used to create the
    /// page size object.
    /// 
    /// If the QPageSize is invalid then the QSizeF will be invalid.
    /// 
    /// **See also:** [`definition_units()`]
    /// 
    /// Returns the definition size of the standard *pageSizeId.*
    /// 
    /// To obtain the definition units, call QPageSize::definitionUnits().
    [org_name(definitionSize)]
    [static] definition_size_2(page_size_id: PageSize::PageSizeId) -> SizeF,
    /// 
    /// Returns the definition units of the page size.
    /// 
    /// For a standard page size this will be the units as defined in the relevant
    /// standard, i.e. ISO A4 will be defined in millimeters while ANSI Letter will
    /// be defined in inches.
    /// 
    /// For a custom page size this will be the original units used to create the
    /// page size object.
    /// 
    /// If the QPageSize is invalid then the QPageSize::Unit will be invalid.
    /// 
    /// **See also:** [`definition_size()`]
    /// 
    /// Returns the definition units of the standard *pageSizeId.*
    /// 
    /// To obtain the definition size, call QPageSize::definitionSize().
    [org_name(definitionUnits)]
    [static] definition_units_2(page_size_id: PageSize::PageSizeId) -> PageSize::Unit,
    /// 
    /// Returns the size of the page in the required *units.*
    /// 
    /// If the QPageSize is invalid then the QSizeF will be invalid.
    /// 
    /// Returns the size of the page in Postscript Points (1/72 of an inch).
    /// 
    /// If the QPageSize is invalid then the QSize will be invalid.
    /// 
    /// Returns the size of the page in Device Pixels at the given *resolution.*
    /// 
    /// If the QPageSize is invalid then the QSize will be invalid.
    /// 
    /// Returns the size of the standard *pageSizeId* in the requested *units.*
    /// 
    /// Returns the size of the standard *pageSizeId* in Points.
    /// 
    /// Returns the size of the standard *pageSizeId* in Device Pixels
    /// for the given *resolution.*
    [org_name(size)]
    [static] size_2(page_size_id: PageSize::PageSizeId, units: PageSize::Unit) -> SizeF,
    /// 
    /// Returns the size of the page in Postscript Points (1/72 of an inch).
    /// 
    /// If the QPageSize is invalid then the QSize will be invalid.
    /// 
    /// Returns the size of the standard *pageSizeId* in Points.
    [org_name(sizePoints)]
    [static] size_points_2(page_size_id: PageSize::PageSizeId) -> Size,
    /// 
    /// Returns the size of the page in Device Pixels at the given *resolution.*
    /// 
    /// If the QPageSize is invalid then the QSize will be invalid.
    /// 
    /// Returns the size of the standard *pageSizeId* in Device Pixels
    /// for the given *resolution.*
    [org_name(sizePixels)]
    [static] size_pixels_2(page_size_id: PageSize::PageSizeId, resolution: i32) -> Size,
}

[org_name(QPageSize)]
enum PageSizeId {
    /// 210 x 297 mm, 8.26 x 11.69 inches
    A4,
    /// 176 x 250 mm, 6.93 x 9.84 inches
    B5,
    /// 8.5 x 11 inches, 215.9 x 279.4 mm
    Letter,
    /// 8.5 x 14 inches, 215.9 x 355.6 mm
    Legal,
    /// 7.5 x 10 inches, 190.5 x 254 mm
    Executive,
    /// 841 x 1189 mm
    A0,
    /// 594 x 841 mm
    A1,
    /// 420 x 594 mm
    A2,
    /// 297 x 420 mm
    A3,
    /// 148 x 210 mm
    A5,
    /// 105 x 148 mm
    A6,
    /// 74 x 105 mm
    A7,
    /// 52 x 74 mm
    A8,
    /// 37 x 52 mm
    A9,
    /// 1000 x 1414 mm
    B0,
    /// 707 x 1000 mm
    B1,
    /// 31 x 44 mm
    B10,
    /// 500 x 707 mm
    B2,
    /// 353 x 500 mm
    B3,
    /// 250 x 353 mm
    B4,
    /// 125 x 176 mm
    B6,
    /// 88 x 125 mm
    B7,
    /// 62 x 88 mm
    B8,
    /// 44 x 62 mm
    B9,
    /// 163 x 229 mm
    C5E,
    /// 105 x 241 mm, U.S. Common 10 Envelope
    Comm10E,
    /// 110 x 220 mm
    DLE,
    /// 210 x 330 mm
    Folio,
    /// 431.8 x 279.4 mm
    Ledger,
    /// 279.4 x 431.8 mm
    Tabloid,
    /// Unknown, or a user defined size.
    Custom,
    /// 
    A10,
    /// 
    A3Extra,
    /// 
    A4Extra,
    /// 
    A4Plus,
    /// 
    A4Small,
    /// 
    A5Extra,
    /// 
    B5Extra,
    /// 
    JisB0,
    /// 
    JisB1,
    /// 
    JisB2,
    /// 
    JisB3,
    /// 
    JisB4,
    /// 
    JisB5,
    JisB6,
    /// 
    JisB7,
    /// 
    JisB8,
    /// 
    JisB9,
    /// 
    JisB10,
    /// 
    AnsiC,
    /// 
    AnsiD,
    /// 
    AnsiE,
    /// 
    LegalExtra,
    /// 
    LetterExtra,
    /// 
    LetterPlus,
    /// 
    LetterSmall,
    /// 
    TabloidExtra,
    /// 
    ArchA,
    /// 
    ArchB,
    /// 
    ArchC,
    /// 
    ArchD,
    /// 
    ArchE,
    /// 
    Imperial7x9,
    /// 
    Imperial8x10,
    /// 
    Imperial9x11,
    /// 
    Imperial9x12,
    /// 
    Imperial10x11,
    /// 
    Imperial10x13,
    /// 
    Imperial10x14,
    /// 
    Imperial12x11,
    /// 
    Imperial15x11,
    /// 
    ExecutiveStandard,
    /// 
    Note,
    /// 
    Quarto,
    /// 
    Statement,
    /// 
    SuperA,
    /// 
    SuperB,
    /// 
    Postcard,
    /// 
    DoublePostcard,
    /// 
    Prc16K,
    /// 
    Prc32K,
    /// 
    Prc32KBig,
    /// 
    FanFoldUS,
    /// 
    FanFoldGerman,
    /// 
    FanFoldGermanLegal,
    /// 
    EnvelopeB4,
    /// 
    EnvelopeB5,
    /// 
    EnvelopeB6,
    /// 
    EnvelopeC0,
    /// 
    EnvelopeC1,
    /// 
    EnvelopeC2,
    /// 
    EnvelopeC3,
    /// 
    EnvelopeC4,
    /// 
    EnvelopeC6,
    /// 
    EnvelopeC65,
    /// 
    EnvelopeC7,
    /// 
    Envelope9,
    /// 
    Envelope11,
    /// 
    Envelope12,
    /// 
    Envelope14,
    /// 
    EnvelopeMonarch,
    /// 
    EnvelopePersonal,
    /// 
    EnvelopeChou3,
    /// 
    EnvelopeChou4,
    /// 
    EnvelopeInvite,
    /// 
    EnvelopeItalian,
    /// 
    EnvelopeKaku2,
    /// 
    EnvelopeKaku3,
    /// 
    EnvelopePrc1,
    /// 
    EnvelopePrc2,
    /// 
    EnvelopePrc3,
    /// 
    EnvelopePrc4,
    /// 
    EnvelopePrc5,
    /// 
    EnvelopePrc6,
    /// 
    EnvelopePrc7,
    /// 
    EnvelopePrc8,
    /// 
    EnvelopePrc9,
    /// 
    EnvelopePrc10,
    /// 
    EnvelopeYou4,
    /// = EnvelopeYou4
    LastPageSize,
    NPageSize,
    NPaperSize,
    /// = Letter
    AnsiA,
    /// = Ledger
    AnsiB,
    /// = C5E
    EnvelopeC5,
    /// = DLE
    EnvelopeDL,
    /// = Comm10E
    Envelope10,
}

[org_name(QPageSize)]
enum Unit {
    /// 
    Millimeter,
    /// 1/72th of an inch
    Point,
    /// 
    Inch,
    /// 1/72th of a foot, 1/6th of an inch, 12 Points
    Pica,
    /// 1/72th of a French inch, 0.375 mm
    Didot,
    /// 1/6th of a French inch, 12 Didot, 4.5mm
    Cicero,
}

[org_name(QPageSize)]
enum SizeMatchPolicy {
    /// Match to a standard page size if within the margin of tolerance.
    FuzzyMatch,
    /// Match to a standard page size if within the margin of tolerance regardless of orientation.
    FuzzyOrientationMatch,
    /// Only match to a standard page size if the sizes match exactly.
    ExactMatch,
}

// vim: syntax=rust expandtab ts=4 sw=4
