enum SelectionFlag {
    NoUpdate,
    Clear,
    Select,
    Deselect,
    Toggle,
    Current,
    Rows,
    Columns,
    SelectCurrent,
    ToggleCurrent,
    ClearAndSelect,
}

struct ItemSelectionModel : Object {
    current_index() -> ModelIndex,
    is_selected(index: &ModelIndexType) -> bool,
    is_row_selected(row: i32, parent: &ModelIndexType) -> bool,
    is_column_selected(column: i32, parent: &ModelIndexType) -> bool,
    row_intersects_selection(row: i32, parent: &ModelIndexType) -> bool,
    column_intersects_selection(column: i32, parent: &ModelIndexType) -> bool,
    has_selection() -> bool,
    selected_indexes() -> [ModelIndex],
    selected_rows(column: i32) -> [ModelIndex],
    selected_columns(row: i32) -> [ModelIndex],
    selection() -> ItemSelection,
    model() -> AbstractItemModel?,
    model() -> AbstractItemModel?,
    set_model(model: &AbstractItemModelType),
    [replace] set_current_index(index: &ModelIndexType, command: ItemSelectionModel::SelectionFlags),
    [replace] select(index: &ModelIndexType, command: ItemSelectionModel::SelectionFlags),
    [replace] select(selection: &ItemSelectionType, command: ItemSelectionModel::SelectionFlags),
    [replace] clear(),
    [replace] reset(),
    clear_selection(),
    [replace] clear_current_index(),
    [event] selection_changed(selected: &ItemSelectionType, deselected: &ItemSelectionType),
    [event] current_changed(current: &ModelIndexType, previous: &ModelIndexType),
    [event] current_row_changed(current: &ModelIndexType, previous: &ModelIndexType),
    [event] current_column_changed(current: &ModelIndexType, previous: &ModelIndexType),
    [event] model_changed(model: &AbstractItemModelType),
    emit_selection_changed(new_selection: &ItemSelectionType, old_selection: &ItemSelectionType),
}

// vim: syntax=rust expandtab ts=4 sw=4
