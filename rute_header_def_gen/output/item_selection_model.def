/// 
/// A QItemSelectionModel keeps track of the selected items in a view, or
/// in several views onto the same model. It also keeps track of the
/// currently selected item in a view.
/// 
/// The QItemSelectionModel class is one of the [Model/View Classes](Model/View%20Classes)
/// and is part of Qt's [model/view framework](Model/View%20Programming)
/// 
/// 
/// The selected items are stored using ranges. Whenever you want to
/// modify the selected items use select() and provide either a
/// QItemSelection, or a QModelIndex and a QItemSelectionModel::SelectionFlag.
/// 
/// The QItemSelectionModel takes a two layer approach to selection
/// management, dealing with both selected items that have been committed
/// and items that are part of the current selection. The current
/// selected items are part of the current interactive selection (for
/// example with rubber-band selection or keyboard-shift selections).
/// 
/// To update the currently selected items, use the bitwise OR of
/// QItemSelectionModel::Current and any of the other SelectionFlags.
/// If you omit the QItemSelectionModel::Current command, a new current
/// selection will be created, and the previous one added to the whole
/// selection. All functions operate on both layers; for example,
/// [selecteditems()](QTableWidget::selectedItems())
/// will return items from both layers.
/// 
/// **Note**: Since 5.5, [model](QItemSelectionModel::model())
/// 
/// [hasSelection](QItemSelectionModel::hasSelection())
/// , and
/// [currentIndex](QItemSelectionModel::currentIndex())
/// are meta-object properties.
/// 
/// **See also:** {Model/View Programming}
/// [`AbstractItemModel`]
/// {Chart Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct ItemSelectionModel : Object {
    /// 
    /// Returns the model item index for the current item, or an invalid index
    /// if there is no current item.
    current_index() -> ModelIndex,
    /// 
    /// Returns `true` if the given model item *index* is selected.
    is_selected(index: &ModelIndexType) -> bool,
    /// 
    /// Returns `true` if all items are selected in the *row* with the given
    /// *parent.*
    /// 
    /// Note that this function is usually faster than calling isSelected()
    /// on all items in the same row and that unselectable items are
    /// ignored.
    is_row_selected(row: i32, parent: &ModelIndexType) -> bool,
    /// 
    /// Returns `true` if all items are selected in the *column* with the given
    /// *parent.*
    /// 
    /// Note that this function is usually faster than calling isSelected()
    /// on all items in the same column and that unselectable items are
    /// ignored.
    is_column_selected(column: i32, parent: &ModelIndexType) -> bool,
    /// 
    /// Returns `true` if there are any items selected in the *row* with the given
    /// *parent.*
    row_intersects_selection(row: i32, parent: &ModelIndexType) -> bool,
    /// 
    /// Returns `true` if there are any items selected in the *column* with the given
    /// *parent.*
    column_intersects_selection(column: i32, parent: &ModelIndexType) -> bool,
    /// 
    /// Returns `true` if the selection model contains any selection ranges;
    /// otherwise returns `false.`
    has_selection() -> bool,
    /// 
    /// Returns a list of all selected model item indexes. The list contains no
    /// duplicates, and is not sorted.
    /// 
    selected_indexes() -> [ModelIndex],
    /// 
    /// Returns the indexes in the given *column* for the rows where all columns are selected.
    /// 
    /// **See also:** [`selected_indexes()`]
    /// [`selected_columns()`]
    selected_rows(column: i32) -> [ModelIndex],
    /// 
    /// Returns the indexes in the given *row* for columns where all rows are selected.
    /// 
    /// **See also:** [`selected_indexes()`]
    /// [`selected_rows()`]
    selected_columns(row: i32) -> [ModelIndex],
    /// 
    /// This signal is emitted whenever the selection changes. The change in the
    /// selection is represented as an item selection of *deselected* items and
    /// an item selection of *selected* items.
    /// 
    /// Note the that the current index changes independently from the selection.
    /// Also note that this signal will not be emitted when the item model is reset.
    /// 
    /// **See also:** [`select()`]
    /// [`current_changed()`]
    /// 
    /// Returns the selection ranges stored in the selection model.
    selection() -> ItemSelection,
    /// 
    /// This signal is emitted when the *model* is successfully set with setModel().
    /// 
    /// **See also:** [`model()`]
    /// [`set_model()`]
    /// 
    /// Returns the item model operated on by the selection model.
    /// 
    /// Returns the item model operated on by the selection model.
    model() -> AbstractItemModel?,
    /// 
    /// This signal is emitted when the *model* is successfully set with setModel().
    /// 
    /// **See also:** [`model()`]
    /// [`set_model()`]
    /// 
    /// Returns the item model operated on by the selection model.
    /// 
    /// Returns the item model operated on by the selection model.
    [org_name(model)]
    model_2() -> AbstractItemModel?,
    /// 
    /// Sets the model to *model.* The modelChanged() signal will be emitted.
    /// 
    /// **See also:** [`model()`]
    /// [`model_changed()`]
    set_model(model: *AbstractItemModelType),
    /// 
    /// Sets the model item *index* to be the current item, and emits
    /// currentChanged(). The current item is used for keyboard navigation and
    /// focus indication; it is independent of any selected items, although a
    /// selected item can also be the current item.
    /// 
    /// Depending on the specified *command,* the *index* can also become part
    /// of the current selection.
    /// **See also:** [`select()`]
    [event] set_current_index(index: &ModelIndexType, command: ItemSelectionModel::SelectionFlags),
    /// 
    /// Selects the model item *index* using the specified *command,* and emits
    /// selectionChanged().
    /// 
    /// **See also:** [`ItemSelectionModel::selection_flags()`]
    /// 
    /// This signal is emitted whenever the selection changes. The change in the
    /// selection is represented as an item selection of *deselected* items and
    /// an item selection of *selected* items.
    /// 
    /// Note the that the current index changes independently from the selection.
    /// Also note that this signal will not be emitted when the item model is reset.
    /// 
    /// **See also:** [`select()`]
    /// [`current_changed()`]
    /// 
    /// Selects the item *selection* using the specified *command,* and emits
    /// selectionChanged().
    /// 
    /// **See also:** [`ItemSelectionModel::selection_flag()`]
    /// 
    /// Returns a list of all selected model item indexes. The list contains no
    /// duplicates, and is not sorted.
    /// 
    /// Returns the indexes in the given *column* for the rows where all columns are selected.
    /// 
    /// **See also:** [`selected_indexes()`]
    /// [`selected_columns()`]
    /// 
    /// Returns the indexes in the given *row* for columns where all rows are selected.
    /// 
    /// **See also:** [`selected_indexes()`]
    /// [`selected_rows()`]
    /// 
    /// Returns the selection ranges stored in the selection model.
    /// 
    [event] select(index: &ModelIndexType, command: ItemSelectionModel::SelectionFlags),
    /// 
    /// Selects the model item *index* using the specified *command,* and emits
    /// selectionChanged().
    /// 
    /// **See also:** [`ItemSelectionModel::selection_flags()`]
    /// 
    /// This signal is emitted whenever the selection changes. The change in the
    /// selection is represented as an item selection of *deselected* items and
    /// an item selection of *selected* items.
    /// 
    /// Note the that the current index changes independently from the selection.
    /// Also note that this signal will not be emitted when the item model is reset.
    /// 
    /// **See also:** [`select()`]
    /// [`current_changed()`]
    /// 
    /// Selects the item *selection* using the specified *command,* and emits
    /// selectionChanged().
    /// 
    /// **See also:** [`ItemSelectionModel::selection_flag()`]
    /// 
    /// Returns a list of all selected model item indexes. The list contains no
    /// duplicates, and is not sorted.
    /// 
    /// Returns the indexes in the given *column* for the rows where all columns are selected.
    /// 
    /// **See also:** [`selected_indexes()`]
    /// [`selected_columns()`]
    /// 
    /// Returns the indexes in the given *row* for columns where all rows are selected.
    /// 
    /// **See also:** [`selected_indexes()`]
    /// [`selected_rows()`]
    /// 
    /// Returns the selection ranges stored in the selection model.
    /// 
    [org_name(select)]
    [event] select_2(selection: &ItemSelectionType, command: ItemSelectionModel::SelectionFlags),
    /// 
    /// Clears the selection model. Emits selectionChanged() and currentChanged().
    /// 
    /// Clears the current index. Emits currentChanged().
    /// 
    /// Clears the selection in the selection model. Emits selectionChanged().
    [event] clear(),
    /// 
    /// Clears the selection model. Does not emit any signals.
    [event] reset(),
    /// 
    /// Clears the selection in the selection model. Emits selectionChanged().
    clear_selection(),
    /// 
    /// Clears the current index. Emits currentChanged().
    [event] clear_current_index(),
    /// 
    /// This signal is emitted whenever the selection changes. The change in the
    /// selection is represented as an item selection of *deselected* items and
    /// an item selection of *selected* items.
    /// 
    /// Note the that the current index changes independently from the selection.
    /// Also note that this signal will not be emitted when the item model is reset.
    /// 
    /// **See also:** [`select()`]
    /// [`current_changed()`]
    [signal] selection_changed(selected: &ItemSelectionType, deselected: &ItemSelectionType),
    /// 
    /// This signal is emitted whenever the current item changes. The *previous*
    /// model item index is replaced by the *current* index as the selection's
    /// current item.
    /// 
    /// Note that this signal will not be emitted when the item model is reset.
    /// 
    /// **See also:** [`current_index()`]
    /// [`set_current_index()`]
    /// [`selection_changed()`]
    [signal] current_changed(current: &ModelIndexType, previous: &ModelIndexType),
    /// 
    /// This signal is emitted if the *current* item changes and its row is
    /// different to the row of the *previous* current item.
    /// 
    /// Note that this signal will not be emitted when the item model is reset.
    /// 
    /// **See also:** [`current_changed()`]
    /// [`current_column_changed()`]
    /// [`current_index()`]
    /// [`set_current_index()`]
    [signal] current_row_changed(current: &ModelIndexType, previous: &ModelIndexType),
    /// 
    /// This signal is emitted if the *current* item changes and its column is
    /// different to the column of the *previous* current item.
    /// 
    /// Note that this signal will not be emitted when the item model is reset.
    /// 
    /// **See also:** [`current_changed()`]
    /// [`current_row_changed()`]
    /// [`current_index()`]
    /// [`set_current_index()`]
    [signal] current_column_changed(current: &ModelIndexType, previous: &ModelIndexType),
    /// 
    /// This signal is emitted when the *model* is successfully set with setModel().
    /// 
    /// **See also:** [`model()`]
    /// [`set_model()`]
    [signal] model_changed(model: *AbstractItemModelType),
    /// 
    /// Compares the two selections *newSelection* and *oldSelection*
    /// and emits selectionChanged() with the deselected and selected items.
    emit_selection_changed(new_selection: &ItemSelectionType, old_selection: &ItemSelectionType),
}

[org_name(QItemSelectionModel)]
enum SelectionFlag {
    NoUpdate,
    Clear,
    Select,
    Deselect,
    Toggle,
    Current,
    Rows,
    Columns,
    SelectCurrent,
    ToggleCurrent,
    ClearAndSelect,
}

// vim: syntax=rust expandtab ts=4 sw=4
