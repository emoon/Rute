///     \class QStyleHints
///     \since 5.0
///     \brief The QStyleHints class contains platform specific hints and settings.
///     \inmodule QtGui
/// 
///     An object of this class, obtained from QGuiApplication, provides access to certain global
///     user interface parameters of the current platform.
/// 
///     Access is read only; typically the platform itself provides the user a way to tune these
///     parameters.
/// 
///     Access to these parameters are useful when implementing custom user interface components, in that
///     they allow the components to exhibit the same behaviour and feel as other components.
/// 
///     \sa QGuiApplication::styleHints()
///  */
/// QStyleHints::QStyleHints()
///     : QObject(*new QStyleHintsPrivate(), 0)
/// {
/// }
/// 
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct StyleHints : Object {
    ///     Sets the \a mouseDoubleClickInterval.
    ///     \internal
    ///     \sa mouseDoubleClickInterval()
    ///     \since 5.3
    set_mouse_double_click_interval(mouse_double_click_interval: i32),
    ///     \property QStyleHints::mouseDoubleClickInterval
    ///     \brief the time limit in milliseconds that distinguishes a double click
    ///     from two consecutive mouse clicks.
    mouse_double_click_interval() -> i32,
    ///     Sets the \a mousePressAndHoldInterval.
    ///     \internal
    ///     \sa mousePressAndHoldInterval()
    ///     \since 5.7
    set_mouse_press_and_hold_interval(mouse_press_and_hold_interval: i32),
    ///     \property QStyleHints::mousePressAndHoldInterval
    ///     \brief the time limit in milliseconds that activates
    ///     a press and hold.
    /// 
    ///     \since 5.3
    mouse_press_and_hold_interval() -> i32,
    ///     Sets the \a startDragDistance.
    ///     \internal
    ///     \sa startDragDistance()
    ///     \since 5.3
    set_start_drag_distance(start_drag_distance: i32),
    ///     \property QStyleHints::startDragDistance
    ///     \brief the distance, in pixels, that the mouse must be moved with a button
    ///     held down before a drag and drop operation will begin.
    /// 
    ///     If you support drag and drop in your application, and want to start a drag
    ///     and drop operation after the user has moved the cursor a certain distance
    ///     with a button held down, you should use this property's value as the
    ///     minimum distance required.
    /// 
    ///     For example, if the mouse position of the click is stored in \c startPos
    ///     and the current position (e.g. in the mouse move event) is \c currentPos,
    ///     you can find out if a drag should be started with code like this:
    /// 
    ///     \snippet code/src_gui_kernel_qapplication.cpp 6
    /// 
    ///     \sa startDragTime, QPoint::manhattanLength(), {Drag and Drop}
    start_drag_distance() -> i32,
    ///     Sets the \a startDragDragTime.
    ///     \internal
    ///     \sa startDragTime()
    ///     \since 5.3
    set_start_drag_time(start_drag_time: i32),
    ///     \property QStyleHints::startDragTime
    ///     \brief the time, in milliseconds, that a mouse button must be held down
    ///     before a drag and drop operation will begin.
    /// 
    ///     If you support drag and drop in your application, and want to start a drag
    ///     and drop operation after the user has held down a mouse button for a
    ///     certain amount of time, you should use this property's value as the delay.
    /// 
    ///     \sa startDragDistance, {Drag and Drop}
    start_drag_time() -> i32,
    ///     \property QStyleHints::startDragVelocity
    ///     \brief the limit for the velocity, in pixels per second, that the mouse may
    ///     be moved, with a button held down, for a drag and drop operation to begin.
    ///     A value of 0 means there is no such limit.
    /// 
    ///     \sa startDragDistance, {Drag and Drop}
    start_drag_velocity() -> i32,
    ///     Sets the \a keyboardInputInterval.
    ///     \internal
    ///     \sa keyboardInputInterval()
    ///     \since 5.3
    set_keyboard_input_interval(keyboard_input_interval: i32),
    ///     \property QStyleHints::keyboardInputInterval
    ///     \brief the time limit, in milliseconds, that distinguishes a key press
    ///     from two consecutive key presses.
    keyboard_input_interval() -> i32,
    ///     \property QStyleHints::keyboardAutoRepeatRate
    ///     \brief the rate, in events per second,  in which additional repeated key
    ///     presses will automatically be generated if a key is being held down.
    keyboard_auto_repeat_rate() -> i32,
    ///     Sets the \a cursorFlashTime.
    ///     \internal
    ///     \sa cursorFlashTime()
    ///     \since 5.3
    set_cursor_flash_time(cursor_flash_time: i32),
    ///     \property QStyleHints::cursorFlashTime
    ///     \brief the text cursor's flash (blink) time in milliseconds.
    /// 
    ///     The flash time is the time used to display, invert and restore the
    ///     caret display. Usually the text cursor is displayed for half the cursor
    ///     flash time, then hidden for the same amount of time.
    cursor_flash_time() -> i32,
    ///     \property QStyleHints::showIsFullScreen
    ///     \brief whether the platform defaults to fullscreen windows.
    /// 
    ///     This property is \c true if the platform defaults to windows being fullscreen,
    ///     otherwise \c false.
    /// 
    ///     \note The platform may still choose to show certain windows non-fullscreen,
    ///     such as popups or dialogs. This property only reports the default behavior.
    /// 
    ///     \sa QWindow::show(), showIsMaximized()
    show_is_full_screen() -> bool,
    ///     \property QStyleHints::showIsMaximized
    ///     \brief whether the platform defaults to maximized windows.
    /// 
    ///     This property is \c true if the platform defaults to windows being maximized,
    ///     otherwise \c false.
    /// 
    ///     \note The platform may still choose to show certain windows non-maximized,
    ///     such as popups or dialogs. This property only reports the default behavior.
    /// 
    ///     \sa QWindow::show(), showIsFullScreen()
    ///     \since 5.6
    show_is_maximized() -> bool,
    ///     \property QStyleHints::showShortcutsInContextMenus
    ///     \since 5.10
    ///     \brief \c true if the platform normally shows shortcut key sequences in
    ///     context menus, otherwise \c false.
    show_shortcuts_in_context_menus() -> bool,
    ///     \property QStyleHints::passwordMaskDelay
    ///     \brief the time, in milliseconds, a typed letter is displayed unshrouded
    ///     in a text input field in password mode.
    password_mask_delay() -> i32,
    ///     \property QStyleHints::passwordMaskCharacter
    ///     \brief the character used to mask the characters typed into text input
    ///     fields in password mode.
    password_mask_character() -> Char,
    ///     \property QStyleHints::fontSmoothingGamma
    ///     \brief the gamma value used in font smoothing.
    font_smoothing_gamma() -> f32,
    ///     \property QStyleHints::useRtlExtensions
    ///     \brief the writing direction.
    /// 
    ///     This property is \c true if right-to-left writing direction is enabled,
    ///     otherwise \c false.
    use_rtl_extensions() -> bool,
    ///     \property QStyleHints::setFocusOnTouchRelease
    ///     \brief the event that should set input focus on focus objects.
    /// 
    ///     This property is \c true if focus objects (line edits etc) should receive
    ///     input focus after a touch/mouse release. This is normal behavior on
    ///     touch platforms. On desktop platforms, the standard is to set
    ///     focus already on touch/mouse press.
    set_focus_on_touch_release() -> bool,
    ///     \property QStyleHints::tabFocusBehavior
    ///     \since 5.5
    ///     \brief The focus behavior on press of the tab key.
    /// 
    ///     \note Do not bind this value in QML because the change notifier
    ///     signal is not implemented yet.
    tab_focus_behavior() -> Rute::TabFocusBehavior,
    ///     Sets the \a tabFocusBehavior.
    ///     \internal
    ///     \sa tabFocusBehavior()
    ///     \since 5.7
    set_tab_focus_behavior(tab_focus_behavior: Rute::TabFocusBehavior),
    ///     \property QStyleHints::singleClickActivation
    ///     \brief whether items are activated by single or double click.
    /// 
    ///     This property is \c true if items should be activated by single click, \c false
    ///     if they should be activated by double click instead.
    /// 
    ///     \since 5.5
    single_click_activation() -> bool,
    ///     \property QStyleHints::useHoverEffects
    ///     \brief whether UI elements use hover effects.
    /// 
    ///     This property is \c true if UI elements should use hover effects. This is the
    ///     standard behavior on desktop platforms with a mouse pointer, whereas
    ///     on touch platforms the overhead of hover event delivery can be avoided.
    /// 
    ///     \since 5.8
    use_hover_effects() -> bool,
    set_use_hover_effects(use_hover_effects: bool),
    ///     \property QStyleHints::wheelScrollLines
    ///     \brief Number of lines to scroll by default for each wheel click.
    /// 
    ///     \since 5.9
    wheel_scroll_lines() -> i32,
    ///     Sets the \a wheelScrollLines.
    ///     \internal
    ///     \sa wheelScrollLines()
    ///     \since 5.9
    set_wheel_scroll_lines(scroll_lines: i32),
    ///     Sets the mouse quick selection threshold.
    ///     \internal
    ///     \sa mouseQuickSelectionThreshold()
    ///     \since 5.11
    set_mouse_quick_selection_threshold(threshold: i32),
    ///     \property QStyleHints::mouseQuickSelectionThreshold
    ///     \brief Quick selection mouse threshold in QLineEdit.
    /// 
    ///     This property defines how much the mouse cursor should be moved along the y axis
    ///     to trigger a quick selection during a normal QLineEdit text selection.
    /// 
    ///     If the property value is less than or equal to 0, the quick selection feature is disabled.
    /// 
    ///     \since 5.11
    mouse_quick_selection_threshold() -> i32,
    [signal] cursor_flash_time_changed(cursor_flash_time: i32),
    [signal] keyboard_input_interval_changed(keyboard_input_interval: i32),
    [signal] mouse_double_click_interval_changed(mouse_double_click_interval: i32),
    [signal] mouse_press_and_hold_interval_changed(mouse_press_and_hold_interval: i32),
    [signal] start_drag_distance_changed(start_drag_distance: i32),
    [signal] start_drag_time_changed(start_drag_time: i32),
    [signal] tab_focus_behavior_changed(tab_focus_behavior: Rute::TabFocusBehavior),
    [signal] use_hover_effects_changed(use_hover_effects: bool),
    [signal] wheel_scroll_lines_changed(scroll_lines: i32),
    [signal] mouse_quick_selection_threshold_changed(threshold: i32),
}

// vim: syntax=rust expandtab ts=4 sw=4
