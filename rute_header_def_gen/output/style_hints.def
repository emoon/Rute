/// 
/// An object of this class, obtained from QGuiApplication, provides access to certain global
/// user interface parameters of the current platform.
/// 
/// Access is read only; typically the platform itself provides the user a way to tune these
/// parameters.
/// 
/// Access to these parameters are useful when implementing custom user interface components, in that
/// they allow the components to exhibit the same behaviour and feel as other components.
/// 
/// **See also:** [`GuiApplication::style_hints`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct StyleHints : Object {
    set_mouse_double_click_interval(mouse_double_click_interval: i32),
    /// 
    mouse_double_click_interval() -> i32,
    set_mouse_press_and_hold_interval(mouse_press_and_hold_interval: i32),
    /// 
    mouse_press_and_hold_interval() -> i32,
    set_start_drag_distance(start_drag_distance: i32),
    /// 
    /// If you support drag and drop in your application, and want to start a drag
    /// and drop operation after the user has moved the cursor a certain distance
    /// with a button held down, you should use this property's value as the
    /// minimum distance required.
    /// 
    /// For example, if the mouse position of the click is stored in `startPos`
    /// and the current position (e.g. in the mouse move event) is `currentPos,`
    /// you can find out if a drag should be started with code like this:
    /// 
    /// **See also:** startDragTime
    /// [`Point::manhattan_length`]
    /// {Drag and Drop}
    start_drag_distance() -> i32,
    set_start_drag_time(start_drag_time: i32),
    /// 
    /// If you support drag and drop in your application, and want to start a drag
    /// and drop operation after the user has held down a mouse button for a
    /// certain amount of time, you should use this property's value as the delay.
    /// 
    /// **See also:** startDragDistance
    /// {Drag and Drop}
    start_drag_time() -> i32,
    /// 
    /// **See also:** startDragDistance
    /// {Drag and Drop}
    start_drag_velocity() -> i32,
    set_keyboard_input_interval(keyboard_input_interval: i32),
    /// 
    keyboard_input_interval() -> i32,
    /// 
    keyboard_auto_repeat_rate() -> i32,
    set_cursor_flash_time(cursor_flash_time: i32),
    /// 
    /// The flash time is the time used to display, invert and restore the
    /// caret display. Usually the text cursor is displayed for half the cursor
    /// flash time, then hidden for the same amount of time.
    cursor_flash_time() -> i32,
    /// 
    /// This property is `true` if the platform defaults to windows being fullscreen,
    /// otherwise `false.`
    /// 
    /// **Note**: The platform may still choose to show certain windows non-fullscreen,
    /// such as popups or dialogs. This property only reports the default behavior.
    /// 
    /// **See also:** [`Window::show`]
    /// [`show_is_maximized()`]
    show_is_full_screen() -> bool,
    /// 
    /// This property is `true` if the platform defaults to windows being maximized,
    /// otherwise `false.`
    /// 
    /// **Note**: The platform may still choose to show certain windows non-maximized,
    /// such as popups or dialogs. This property only reports the default behavior.
    /// 
    /// **See also:** [`Window::show`]
    /// [`show_is_full_screen()`]
    show_is_maximized() -> bool,
    /// 
    /// `true` if the platform normally shows shortcut key sequences in
    /// context menus, otherwise `false.`
    show_shortcuts_in_context_menus() -> bool,
    /// 
    password_mask_delay() -> i32,
    /// 
    password_mask_character() -> Char,
    /// 
    font_smoothing_gamma() -> f32,
    /// 
    /// This property is `true` if right-to-left writing direction is enabled,
    /// otherwise `false.`
    use_rtl_extensions() -> bool,
    /// 
    /// This property is `true` if focus objects (line edits etc) should receive
    /// input focus after a touch/mouse release. This is normal behavior on
    /// touch platforms. On desktop platforms, the standard is to set
    /// focus already on touch/mouse press.
    set_focus_on_touch_release() -> bool,
    /// 
    /// **Note**: Do not bind this value in QML because the change notifier
    /// signal is not implemented yet.
    tab_focus_behavior() -> Rute::TabFocusBehavior,
    set_tab_focus_behavior(tab_focus_behavior: Rute::TabFocusBehavior),
    /// 
    /// This property is `true` if items should be activated by single click, `false`
    /// if they should be activated by double click instead.
    /// 
    single_click_activation() -> bool,
    /// 
    /// This property is `true` if UI elements should use hover effects. This is the
    /// standard behavior on desktop platforms with a mouse pointer, whereas
    /// on touch platforms the overhead of hover event delivery can be avoided.
    /// 
    use_hover_effects() -> bool,
    set_use_hover_effects(use_hover_effects: bool),
    /// 
    wheel_scroll_lines() -> i32,
    set_wheel_scroll_lines(scroll_lines: i32),
    set_mouse_quick_selection_threshold(threshold: i32),
    /// 
    /// This property defines how much the mouse cursor should be moved along the y axis
    /// to trigger a quick selection during a normal QLineEdit text selection.
    /// 
    /// If the property value is less than or equal to 0, the quick selection feature is disabled.
    /// 
    mouse_quick_selection_threshold() -> i32,
    [signal] cursor_flash_time_changed(cursor_flash_time: i32),
    [signal] keyboard_input_interval_changed(keyboard_input_interval: i32),
    [signal] mouse_double_click_interval_changed(mouse_double_click_interval: i32),
    [signal] mouse_press_and_hold_interval_changed(mouse_press_and_hold_interval: i32),
    [signal] start_drag_distance_changed(start_drag_distance: i32),
    [signal] start_drag_time_changed(start_drag_time: i32),
    [signal] tab_focus_behavior_changed(tab_focus_behavior: Rute::TabFocusBehavior),
    [signal] use_hover_effects_changed(use_hover_effects: bool),
    [signal] wheel_scroll_lines_changed(scroll_lines: i32),
    [signal] mouse_quick_selection_threshold_changed(threshold: i32),
}

// vim: syntax=rust expandtab ts=4 sw=4
