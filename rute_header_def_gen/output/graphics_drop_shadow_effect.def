/// 
/// A drop shadow effect renders the source with a drop shadow. The color of
/// the drop shadow can be modified using the setColor() function. The drop
/// shadow offset can be modified using the setOffset() function and the blur
/// radius of the drop shadow can be changed with the setBlurRadius()
/// function.
/// 
/// By default, the drop shadow is a semi-transparent dark gray
/// (QColor(63, 63, 63, 180)) shadow, blurred with a radius of 1 at an offset
/// of 8 pixels towards the lower right. The drop shadow offset is specified
/// in device coordinates.
/// 
/// ![graphicseffect-drop-shadow.png](graphicseffect-drop-shadow.png)
/// 
/// **See also:** QGraphicsBlurEffect
/// QGraphicsColorizeEffect
/// QGraphicsOpacityEffect
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GraphicsDropShadowEffect : GraphicsEffect {
    /// 
    [event] bounding_rect_for(rect: &RectFType) -> RectF,
    /// 
    /// By default, the offset is 8 pixels towards the lower right.
    /// 
    /// The offset is given in device coordinates, which means it is
    /// unaffected by scale.
    /// 
    /// **See also:** xOffset()
    /// yOffset()
    /// blurRadius()
    /// color()
    /// 
    /// This signal is emitted whenever the effect's shadow offset changes.
    /// The *offset* parameter holds the effect's new shadow offset.
    offset() -> PointF,
    /// 
    /// By default, the horizontal shadow offset is 8 pixels.
    /// 
    /// **See also:** yOffset()
    /// offset()
    x_offset() -> f32,
    /// 
    /// By default, the vertical shadow offset is 8 pixels.
    /// 
    /// **See also:** xOffset()
    /// offset()
    y_offset() -> f32,
    /// 
    /// Using a smaller radius results in a sharper shadow, whereas using a bigger
    /// radius results in a more blurred shadow.
    /// 
    /// By default, the blur radius is 1 pixel.
    /// 
    /// **See also:** color()
    /// offset()
    /// 
    /// This signal is emitted whenever the effect's blur radius changes.
    /// The *blurRadius* parameter holds the effect's new blur radius.
    blur_radius() -> f32,
    /// 
    /// By default, the drop color is a semi-transparent dark gray
    /// (QColor(63, 63, 63, 180)).
    /// 
    /// **See also:** offset()
    /// blurRadius()
    /// 
    /// This signal is emitted whenever the effect's color changes.
    /// The *color* parameter holds the effect's new color.
    color() -> Color,
    set_offset(ofs: &PointFType),
    set_offset(dx: f32, dy: f32),
    set_offset(d: f32),
    set_x_offset(dx: f32),
    set_y_offset(dy: f32),
    set_blur_radius(blur_radius: f32),
    set_color(color: &ColorType),
    /// 
    /// This signal is emitted whenever the effect's shadow offset changes.
    /// The *offset* parameter holds the effect's new shadow offset.
    [signal] offset_changed(offset: &PointFType),
    /// 
    /// This signal is emitted whenever the effect's blur radius changes.
    /// The *blurRadius* parameter holds the effect's new blur radius.
    [signal] blur_radius_changed(blur_radius: f32),
    /// 
    /// This signal is emitted whenever the effect's color changes.
    /// The *color* parameter holds the effect's new color.
    [signal] color_changed(color: &ColorType),
    /// 
    [event] draw(painter: *PainterType),
}

// vim: syntax=rust expandtab ts=4 sw=4
