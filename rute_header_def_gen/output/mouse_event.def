/// 
/// Mouse events occur when a mouse button is pressed or released
/// inside a widget, or when the mouse cursor is moved.
/// 
/// Mouse move events will occur only when a mouse button is pressed
/// down, unless mouse tracking has been enabled with
/// QWidget::setMouseTracking().
/// 
/// Qt automatically grabs the mouse when a mouse button is pressed
/// inside a widget; the widget will continue to receive mouse events
/// until the last mouse button is released.
/// 
/// A mouse event contains a special accept flag that indicates
/// whether the receiver wants the event. You should call ignore() if
/// the mouse event is not handled by your widget. A mouse event is
/// propagated up the parent widget chain until a widget accepts it
/// with accept(), or an event filter consumes it.
/// 
/// **Note**: If a mouse event is propagated to a [widget](QWidget)
/// for
/// which Qt::WA_NoMousePropagation has been set, that mouse event
/// will not be propagated further up the parent widget chain.
/// 
/// The state of the keyboard modifier keys can be found by calling the
/// [modifiers()](QInputEvent::modifiers())
/// function, inherited from
/// QInputEvent.
/// 
/// The functions pos(), x(), and y() give the cursor position
/// relative to the widget that receives the mouse event. If you
/// move the widget as a result of the mouse event, use the global
/// position returned by globalPos() to avoid a shaking motion.
/// 
/// The QWidget::setEnabled() function can be used to enable or
/// disable mouse and keyboard events for a widget.
/// 
/// Reimplement the QWidget event handlers, QWidget::mousePressEvent(),
/// QWidget::mouseReleaseEvent(), QWidget::mouseDoubleClickEvent(),
/// and QWidget::mouseMoveEvent() to receive mouse events in your own
/// widgets.
/// 
/// **See also:** QWidget::setMouseTracking()
/// QWidget::grabMouse()
/// QCursor::pos()
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct MouseEvent : InputEvent {
    /// 
    /// Returns the position of the mouse cursor, relative to the widget
    /// that received the event.
    /// 
    /// If you move the widget as a result of the mouse event, use the
    /// global position returned by globalPos() to avoid a shaking
    /// motion.
    /// 
    /// **See also:** x()
    /// y()
    /// globalPos()
    /// 
    /// Use localPos() instead.
    pos() -> Point,
    /// 
    /// Returns the global position of the mouse cursor *at the time
    /// of the event* . This is important on asynchronous window systems
    /// like X11. Whenever you move your widgets around in response to
    /// mouse events, globalPos() may differ a lot from the current
    /// pointer position QCursor::pos(), and from
    /// QWidget::mapToGlobal(pos()).
    /// 
    /// **See also:** globalX()
    /// globalY()
    global_pos() -> Point,
    /// 
    /// Returns the x position of the mouse cursor, relative to the
    /// widget that received the event.
    /// 
    /// **See also:** y()
    /// pos()
    x() -> i32,
    /// 
    /// Returns the y position of the mouse cursor, relative to the
    /// widget that received the event.
    /// 
    /// **See also:** x()
    /// pos()
    y() -> i32,
    /// 
    /// Returns the global x position of the mouse cursor at the time of
    /// the event.
    /// 
    /// **See also:** globalY()
    /// globalPos()
    global_x() -> i32,
    /// 
    /// Returns the global y position of the mouse cursor at the time of
    /// the event.
    /// 
    /// **See also:** globalX()
    /// globalPos()
    global_y() -> i32,
    /// 
    /// Returns the position of the mouse cursor as a QPointF, relative to the
    /// widget or item that received the event.
    /// 
    /// If you move the widget as a result of the mouse event, use the
    /// screen position returned by screenPos() to avoid a shaking
    /// motion.
    /// 
    /// **See also:** x()
    /// y()
    /// windowPos()
    /// screenPos()
    local_pos() -> PointF?,
    /// 
    /// Returns the position of the mouse cursor as a QPointF, relative to the
    /// window that received the event.
    /// 
    /// If you move the widget as a result of the mouse event, use the
    /// global position returned by globalPos() to avoid a shaking
    /// motion.
    /// 
    /// **See also:** x()
    /// y()
    /// pos()
    /// localPos()
    /// screenPos()
    window_pos() -> PointF?,
    /// 
    /// Returns the position of the mouse cursor as a QPointF, relative to the
    /// screen that received the event.
    /// 
    /// **See also:** x()
    /// y()
    /// pos()
    /// localPos()
    /// windowPos()
    screen_pos() -> PointF?,
    /// 
    /// Returns the button that caused the event.
    /// 
    /// Note that the returned value is always Qt::NoButton for mouse
    /// move events.
    /// 
    /// **See also:** buttons()
    /// Qt::MouseButton
    /// 
    /// Returns the button state when the event was generated. The button
    /// state is a combination of Qt::LeftButton, Qt::RightButton,
    /// Qt::MidButton using the OR operator. For mouse move events,
    /// this is all buttons that are pressed down. For mouse press and
    /// double click events this includes the button that caused the
    /// event. For mouse release events this excludes the button that
    /// caused the event.
    /// 
    /// **See also:** button()
    /// Qt::MouseButton
    button() -> Rute::MouseButton,
    /// 
    /// Returns the button state when the event was generated. The button
    /// state is a combination of Qt::LeftButton, Qt::RightButton,
    /// Qt::MidButton using the OR operator. For mouse move events,
    /// this is all buttons that are pressed down. For mouse press and
    /// double click events this includes the button that caused the
    /// event. For mouse release events this excludes the button that
    /// caused the event.
    /// 
    /// **See also:** button()
    /// Qt::MouseButton
    buttons() -> Rute::MouseButtons,
    set_local_pos(local_position: &PointFType),
    /// 
    /// Returns information about the mouse event source.
    /// 
    /// The mouse event source can be used to distinguish between genuine
    /// and artificial mouse events. The latter are events that are
    /// synthesized from touch events by the operating system or Qt itself.
    /// 
    /// **Note**: Many platforms provide no such information. On such platforms
    /// [Qt::MouseEventNotSynthesized](Qt::MouseEventNotSynthesized)
    /// is returned always.
    /// 
    /// **See also:** Qt::MouseEventSource
    /// **See also:** QGraphicsSceneMouseEvent::source()
    source() -> Rute::MouseEventSource,
    /// 
    /// Returns the mouse event flags.
    /// 
    /// The mouse event flags provide additional information about a mouse event.
    /// 
    /// **See also:** Qt::MouseEventFlag
    /// **See also:** QGraphicsSceneMouseEvent::flags()
    flags() -> Rute::MouseEventFlags,
}

// vim: syntax=rust expandtab ts=4 sw=4
