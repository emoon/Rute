/// 
/// This class provides access to the local filesystem, providing functions
/// for renaming and removing files and directories, and for creating new
/// directories. In the simplest case, it can be used with a suitable display
/// widget as part of a browser or filter.
/// 
/// QFileSystemModel can be accessed using the standard interface provided by
/// QAbstractItemModel, but it also provides some convenience functions that are
/// specific to a directory model.
/// The fileInfo(), isDir(), fileName() and filePath() functions provide information
/// about the underlying files and directories related to items in the model.
/// Directories can be created and removed using mkdir(), rmdir().
/// 
/// **Note**: QFileSystemModel requires an instance of [QApplication.](QApplication.)
/// 
/// # Example Usage
/// 
/// A directory model that displays the contents of a default directory
/// is usually constructed with a parent object:
/// 
/// A tree view can be used to display the contents of the model
/// 
/// and the contents of a particular directory can be displayed by
/// setting the tree view's root index:
/// 
/// The view's root index can be used to control how much of a
/// hierarchical model is displayed. QFileSystemModel provides a convenience
/// function that returns a suitable model index for a path to a
/// directory within the model.
/// 
/// # Caching and Performance
/// 
/// QFileSystemModel will not fetch any files or directories until setRootPath()
/// is called. This will prevent any unnecessary querying on the file system
/// until that point such as listing the drives on Windows.
/// 
/// Unlike QDirModel, QFileSystemModel uses a separate thread to populate
/// itself so it will not cause the main thread to hang as the file system
/// is being queried. Calls to rowCount() will return 0 until the model
/// populates a directory.
/// 
/// QFileSystemModel keeps a cache with file information. The cache is
/// automatically kept up to date using the QFileSystemWatcher.
/// 
/// **See also:** {Model Classes}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct FileSystemModel : AbstractItemModel {
    /// 
    /// This signal is emitted whenever the root path has been changed to a *newPath.*
    [signal] root_path_changed(new_path: String),
    /// 
    /// This signal is emitted whenever a file with the *oldName* is successfully
    /// renamed to *newName.* The file is located in in the directory *path.*
    [signal] file_renamed(path: String, old_name: String, new_name: String),
    /// 
    /// This signal is emitted when the gatherer thread has finished to load the *path.*
    /// 
    [signal] directory_loaded(path: String),
    /// 
    /// 
    /// **Overloads**
    /// Returns the model item index for the given *path* and *column.*
    [event] index(row: i32, column: i32, parent: &ModelIndexType) -> ModelIndex,
    /// 
    /// 
    /// **Overloads**
    /// Returns the model item index for the given *path* and *column.*
    [org_name(index)]
    index_2(path: String, column: i32) -> ModelIndex,
    /// 
    [event] parent(child: &ModelIndexType) -> ModelIndex,
    /// 
    [event] sibling(row: i32, column: i32, idx: &ModelIndexType) -> ModelIndex,
    /// 
    [event] has_children(parent: &ModelIndexType) -> bool,
    /// 
    [event] can_fetch_more(parent: &ModelIndexType) -> bool,
    /// 
    [event] fetch_more(parent: &ModelIndexType),
    /// 
    [event] row_count(parent: &ModelIndexType) -> i32,
    /// 
    [event] column_count(parent: &ModelIndexType) -> i32,
    /// 
    /// Returns the data stored under the given *role* for the item .
    /// 
    /// **See also:** [`t::item_data_role()`]
    my_computer(role: i32) -> Variant,
    /// 
    [event] data(index: &ModelIndexType, role: i32) -> Variant,
    /// 
    [event] set_data(index: &ModelIndexType, value: &VariantType, role: i32) -> bool,
    /// 
    [event] header_data(section: i32, orientation: Rute::Orientation, role: i32) -> Variant,
    /// 
    [event] flags(index: &ModelIndexType) -> Rute::ItemFlags,
    /// 
    [event] sort(column: i32, order: Rute::SortOrder),
    /// 
    /// Returns a list of MIME types that can be used to describe a list of items
    /// in the model.
    [event] mime_types() -> [String],
    /// 
    /// Returns an object that contains a serialized description of the specified
    /// *indexes.* The format used to describe the items corresponding to the
    /// indexes is obtained from the mimeTypes() function.
    /// 
    /// If the list of indexes is empty, 0 is returned rather than a serialized
    /// empty list.
    [event] mime_data(indexes: &[ModelIndex]) -> MimeData?,
    /// 
    /// Handles the *data* supplied by a drag and drop operation that ended with
    /// the given *action* over the row in the model specified by the *row* and
    /// *column* and by the *parent* index.
    /// 
    /// **See also:** [`supported_drop_actions()`]
    [event] drop_mime_data(data: *MimeDataType, action: Rute::DropAction, row: i32, column: i32, parent: &ModelIndexType) -> bool,
    /// 
    [event] supported_drop_actions() -> Rute::DropActions,
    /// 
    /// Sets the directory that is being watched by the model to *newPath* by
    /// installing a [file system watcher](QFileSystemWatcher)
    /// on it. Any
    /// changes to files and directories within this directory will be
    /// reflected in the model.
    /// 
    /// If the path is changed, the rootPathChanged() signal will be emitted.
    /// 
    /// **Note**: This function does not change the structure of the model or
    /// modify the data available to views. In other words, the of
    /// the model is *not* changed to include only files and directories
    /// within the directory specified by *newPath* in the file system.
    set_root_path(path: String) -> ModelIndex,
    /// 
    /// This signal is emitted whenever the root path has been changed to a *newPath.*
    /// 
    /// The currently set root path
    /// 
    /// **See also:** [`root_directory()`]
    root_path() -> String,
    /// 
    /// The currently set directory
    /// 
    /// **See also:** [`root_path()`]
    root_directory() -> Dir,
    /// 
    /// Sets the *provider* of file icons for the directory model.
    set_icon_provider(provider: *FileIconProviderType),
    /// 
    /// Returns the file icon provider for this directory model.
    icon_provider() -> FileIconProvider?,
    /// 
    /// Sets the directory model's filter to that specified by *filters.*
    /// 
    /// Note that the filter you set should always include the QDir::AllDirs enum value,
    /// otherwise QFileSystemModel won't be able to read the directory structure.
    /// 
    /// **See also:** [`Dir::filters()`]
    set_filter(filters: Dir::Filters),
    /// 
    /// Returns the filter specified for the directory model.
    /// 
    /// If a filter has not been set, the default filter is QDir::AllEntries |
    /// QDir::NoDotAndDotDot | QDir::AllDirs.
    /// 
    /// **See also:** [`Dir::filters()`]
    filter() -> Dir::Filters,
    set_resolve_symlinks(enable: bool),
    /// 
    /// This is only relevant on Windows.
    /// 
    /// By default, this property is `true.`
    resolve_symlinks() -> bool,
    set_read_only(enable: bool),
    is_read_only() -> bool,
    set_name_filter_disables(enable: bool),
    /// 
    /// This property is `true` by default
    name_filter_disables() -> bool,
    /// 
    /// Sets the name *filters* to apply against the existing files.
    set_name_filters(filters: &[String]),
    /// 
    /// Returns a list of filters applied to the names in the model.
    name_filters() -> [String],
    /// 
    /// Returns the path of the item stored in the model under the
    /// *index* given.
    file_path(index: &ModelIndexType) -> String,
    /// 
    /// Returns `true` if the model item *index* represents a directory;
    /// otherwise returns `false.`
    is_dir(index: &ModelIndexType) -> bool,
    /// 
    /// Returns the size in bytes of *index.* If the file does not exist, 0 is returned.
    size(index: &ModelIndexType) -> i64,
    /// 
    /// Returns the type of file *index* such as or .
    type(index: &ModelIndexType) -> String,
    /// 
    /// Returns the date and time when *index* was last modified.
    last_modified(index: &ModelIndexType) -> DateTime,
    /// 
    /// Create a directory with the *name* in the *parent* model index.
    mkdir(parent: &ModelIndexType, name: String) -> ModelIndex,
    /// 
    /// Removes the directory corresponding to the model item *index* in the
    /// file system model and **deletes the corresponding directory from the
    /// file system** , returning true if successful. If the directory cannot be
    /// removed, false is returned.
    /// 
    /// **Warning**: This function deletes directories from the file system; it does
    /// **not** move them to a location where they can be recovered.
    /// 
    /// **See also:** [`remove()`]
    rmdir(index: &ModelIndexType) -> bool,
    /// 
    /// Returns the file name for the item stored in the model under the given
    /// *index.*
    file_name(index: &ModelIndexType) -> String,
    /// 
    /// Returns the icon for the item stored in the model under the given
    /// *index.*
    file_icon(index: &ModelIndexType) -> Icon,
    /// 
    /// Returns the complete OR-ed together combination of QFile::Permission for the *index.*
    permissions(index: &ModelIndexType) -> File::Permissions,
    /// 
    /// Returns the QFileInfo for the item stored in the model under the given
    /// *index.*
    file_info(index: &ModelIndexType) -> FileInfo,
    /// 
    /// Removes the model item *index* from the file system model and **deletes the
    /// corresponding file from the file system** , returning true if successful. If the
    /// item cannot be removed, false is returned.
    /// 
    /// **Warning**: This function deletes files from the file system; it does **not**
    /// move them to a location where they can be recovered.
    /// 
    /// **See also:** [`rmdir()`]
    remove(index: &ModelIndexType) -> bool,
    /// 
    [event] timer_event(event: *TimerEventType),
    /// 
    [event] event(event: *EventType) -> bool,
}

[org_name(QFileSystemModel)]
enum Roles {
    /// 
    FileIconRole,
    /// 
    FilePathRole,
    /// 
    FileNameRole,
    /// 
    FilePermissions,
}

// vim: syntax=rust expandtab ts=4 sw=4
