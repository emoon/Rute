/// 
/// The QGraphicsItemAnimation class animates a QGraphicsItem. You can
/// schedule changes to the item's transformation matrix at
/// specified steps. The QGraphicsItemAnimation class has a
/// current step value. When this value changes the transformations
/// scheduled at that step are performed. The current step of the
/// animation is set with the `setStep()` function.
/// 
/// QGraphicsItemAnimation will do a simple linear interpolation
/// between the nearest adjacent scheduled changes to calculate the
/// matrix. For instance, if you set the position of an item at values
/// 0.0 and 1.0, the animation will show the item moving in a straight
/// line between these positions. The same is true for scaling and
/// rotation.
/// 
/// It is usual to use the class with a QTimeLine. The timeline's
/// [valueChanged()](QTimeLine::)
/// signal is then connected to the
/// `setStep()` slot. For example, you can set up an item for rotation
/// by calling `setRotationAt()` for different step values.
/// The animations timeline is set with the setTimeLine() function.
/// 
/// An example animation with a timeline follows:
/// 
/// Note that steps lie between 0.0 and 1.0. It may be necessary to use
/// [setUpdateInterval()](QTimeLine::)
/// . The default update interval
/// is 40 ms. A scheduled transformation cannot be removed when set,
/// so scheduling several transformations of the same kind (e.g.,
/// rotations) at the same step is not recommended.
/// 
/// **See also:** QTimeLine
/// {Graphics View Framework}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GraphicsItemAnimation : Object {
    /// 
    /// Returns the item on which the animation object operates.
    /// 
    /// **See also:** setItem()
    item() -> GraphicsItem?,
    /// 
    /// Sets the specified *item* to be used in the animation.
    /// 
    /// **See also:** item()
    set_item(item: *GraphicsItemType),
    /// 
    /// Returns the timeline object used to control the rate at which the animation
    /// occurs.
    /// 
    /// **See also:** setTimeLine()
    time_line() -> TimeLine?,
    /// 
    /// Sets the timeline object used to control the rate of animation to the *timeLine*
    /// specified.
    /// 
    /// **See also:** timeLine()
    set_time_line(time_line: *TimeLineType),
    /// 
    /// Returns the position of the item at the given *step* value.
    /// 
    /// **See also:** setPosAt()
    pos_at(step: f32) -> PointF,
    /// 
    /// Returns all explicitly inserted positions.
    /// 
    /// **See also:** posAt()
    /// setPosAt()
    pos_list() -> [Pair<qreal,],
    /// 
    /// Sets the position of the item at the given *step* value to the *point* specified.
    /// 
    /// **See also:** posAt()
    set_pos_at(step: f32, pos: &PointFType),
    /// 
    /// Returns the angle at which the item is rotated at the specified *step* value.
    /// 
    /// **See also:** setRotationAt()
    rotation_at(step: f32) -> f32,
    /// 
    /// Returns all explicitly inserted rotations.
    /// 
    /// **See also:** rotationAt()
    /// setRotationAt()
    rotation_list() -> [Pair<qreal,],
    /// 
    /// Sets the rotation of the item at the given *step* value to the *angle* specified.
    /// 
    /// **See also:** rotationAt()
    set_rotation_at(step: f32, angle: f32),
    /// 
    /// Returns the horizontal translation of the item at the specified *step* value.
    /// 
    /// **See also:** setTranslationAt()
    x_translation_at(step: f32) -> f32,
    /// 
    /// Returns the vertical translation of the item at the specified *step* value.
    /// 
    /// **See also:** setTranslationAt()
    y_translation_at(step: f32) -> f32,
    /// 
    /// Sets the translation of the item at the given *step* value using the horizontal
    /// and vertical coordinates specified by *dx* and *dy.*
    /// 
    /// **See also:** xTranslationAt()
    /// yTranslationAt()
    set_translation_at(step: f32, dx: f32, dy: f32),
    /// 
    /// Returns the vertical scale for the item at the specified *step* value.
    /// 
    /// **See also:** setScaleAt()
    vertical_scale_at(step: f32) -> f32,
    /// 
    /// Returns the horizontal scale for the item at the specified *step* value.
    /// 
    /// **See also:** setScaleAt()
    horizontal_scale_at(step: f32) -> f32,
    /// 
    /// Returns all explicitly inserted scales.
    /// 
    /// **See also:** verticalScaleAt()
    /// horizontalScaleAt()
    /// setScaleAt()
    scale_list() -> [Pair<qreal,],
    /// 
    /// Sets the scale of the item at the given *step* value using the horizontal and
    /// vertical scale factors specified by *sx* and *sy.*
    /// 
    /// **See also:** verticalScaleAt()
    /// horizontalScaleAt()
    set_scale_at(step: f32, sx: f32, sy: f32),
    /// 
    /// Returns the vertical shear for the item at the specified *step* value.
    /// 
    /// **See also:** setShearAt()
    vertical_shear_at(step: f32) -> f32,
    /// 
    /// Returns the horizontal shear for the item at the specified *step* value.
    /// 
    /// **See also:** setShearAt()
    horizontal_shear_at(step: f32) -> f32,
    /// 
    /// Returns all explicitly inserted shears.
    /// 
    /// **See also:** verticalShearAt()
    /// horizontalShearAt()
    /// setShearAt()
    shear_list() -> [Pair<qreal,],
    /// 
    /// Sets the shear of the item at the given *step* value using the horizontal and
    /// vertical shear factors specified by *sh* and *sv.*
    /// 
    /// **See also:** verticalShearAt()
    /// horizontalShearAt()
    set_shear_at(step: f32, sh: f32, sv: f32),
    /// 
    /// Clears the scheduled transformations used for the animation, but
    /// retains the item and timeline.
    clear(),
    /// 
    /// Sets the current *step* value for the animation, causing the
    /// transformations scheduled at this step to be performed.
    set_step(x: f32),
    /// 
    /// Resets the item to its starting position and transformation.
    /// 
    /// You can call setStep(0) instead.
    reset(),
    /// 
    /// This method is meant to be overridden by subclassed that needs to
    /// execute additional code before a new step takes place. The
    /// animation *step* is provided for use in cases where the action
    /// depends on its value.
    [event] before_animation_step(step: f32),
    /// 
    /// This method is meant to be overridden in subclasses that need to
    /// execute additional code after a new step has taken place. The
    /// animation *step* is provided for use in cases where the action
    /// depends on its value.
    [event] after_animation_step(step: f32),
}

// vim: syntax=rust expandtab ts=4 sw=4
