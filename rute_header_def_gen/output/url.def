enum ParsingMode {
    TolerantMode,
    StrictMode,
    DecodedMode,
}

enum UrlFormattingOption {
    None,
    RemoveScheme,
    RemovePassword,
    RemoveUserInfo,
    RemovePort,
    RemoveAuthority,
    RemovePath,
    RemoveQuery,
    RemoveFragment,
    PreferLocalFile,
    StripTrailingSlash,
    RemoveFilename,
    NormalizePathSegments,
}

enum ComponentFormattingOption {
    PrettyDecoded,
    EncodeSpaces,
    EncodeUnicode,
    EncodeDelimiters,
    EncodeReserved,
    DecodeReserved,
    FullyEncoded,
    FullyDecoded,
}

enum UserInputResolutionOption {
    DefaultResolution,
    AssumeLocalFile,
}


struct Url {
    swap(other: &UrlType),
    set_url(url: String, mode: Url::ParsingMode),
    url(options: FormattingOptions) -> String,
    adjusted(options: FormattingOptions) -> Url,
    to_encoded(options: FormattingOptions) -> ByteArray,
    [static] from_encoded(url: &ByteArrayType, mode: Url::ParsingMode) -> Url,
    [static] from_user_input(user_input: String) -> Url,
    [static] from_user_input(user_input: String, working_directory: String, options: UserInputResolutionOptions) -> Url,
    is_valid() -> bool,
    is_empty() -> bool,
    clear(),
    set_scheme(scheme: String),
    scheme() -> String,
    set_authority(authority: String, mode: Url::ParsingMode),
    authority(options: ComponentFormattingOptions) -> String,
    set_user_info(user_info: String, mode: Url::ParsingMode),
    user_info(options: ComponentFormattingOptions) -> String,
    set_user_name(user_name: String, mode: Url::ParsingMode),
    user_name(options: ComponentFormattingOptions) -> String,
    set_password(password: String, mode: Url::ParsingMode),
    password(arg0: ComponentFormattingOptions) -> String,
    set_host(host: String, mode: Url::ParsingMode),
    host(arg0: ComponentFormattingOptions) -> String,
    top_level_domain(options: ComponentFormattingOptions) -> String,
    set_port(port: i32),
    port(default_port: i32) -> i32,
    set_path(path: String, mode: Url::ParsingMode),
    path(options: ComponentFormattingOptions) -> String,
    file_name(options: ComponentFormattingOptions) -> String,
    has_query() -> bool,
    set_query(query: String, mode: Url::ParsingMode),
    set_query(query: &UrlQueryType),
    query(arg0: ComponentFormattingOptions) -> String,
    has_fragment() -> bool,
    fragment(options: ComponentFormattingOptions) -> String,
    set_fragment(fragment: String, mode: Url::ParsingMode),
    resolved(relative: &UrlType) -> Url,
    is_relative() -> bool,
    is_parent_of(url: &UrlType) -> bool,
    is_local_file() -> bool,
    [static] from_local_file(localfile: String) -> Url,
    to_local_file() -> String,
    detach(),
    is_detached() -> bool,
    matches(url: &UrlType, options: FormattingOptions) -> bool,
    [static] from_percent_encoding(arg0: &ByteArrayType) -> String,
    [static] to_percent_encoding(arg0: String, exclude: &ByteArrayType, include: &ByteArrayType) -> ByteArray,
    [static] from_cfurl(url: CFURLRef) -> Url,
    to_cfurl() -> CFURLRef,
    [static] from_nsurl(url: &NSURL) -> Url,
    to_nsurl() -> NSURL?,
    [static] from_ace(arg0: &ByteArrayType) -> String,
    [static] to_ace(arg0: String) -> ByteArray,
    [static] idn_whitelist() -> StringList,
    [static] set_idn_whitelist(arg0: &StringListType),
}

// vim: syntax=rust expandtab ts=4 sw=4
