
struct Url {
    swap(&UrlType other),
    set_url(String url, Url::ParsingMode mode),
    url(FormattingOptions options) -> String,
    adjusted(FormattingOptions options) -> UrlType,
    to_encoded(FormattingOptions options) -> ByteArrayType,
    from_encoded(&ByteArrayType url, Url::ParsingMode mode) -> UrlType,
    from_user_input(String user_input) -> UrlType,
    from_user_input(String user_input, String working_directory, UserInputResolutionOptions options) -> UrlType,
    is_valid() -> bool,
    is_empty() -> bool,
    clear(),
    set_scheme(String scheme),
    scheme() -> String,
    set_authority(String authority, Url::ParsingMode mode),
    authority(ComponentFormattingOptions options) -> String,
    set_user_info(String user_info, Url::ParsingMode mode),
    user_info(ComponentFormattingOptions options) -> String,
    set_user_name(String user_name, Url::ParsingMode mode),
    user_name(ComponentFormattingOptions options) -> String,
    set_password(String password, Url::ParsingMode mode),
    password(ComponentFormattingOptions arg0) -> String,
    set_host(String host, Url::ParsingMode mode),
    host(ComponentFormattingOptions arg0) -> String,
    top_level_domain(ComponentFormattingOptions options) -> String,
    set_port(i32 port),
    port(i32 default_port) -> i32,
    set_path(String path, Url::ParsingMode mode),
    path(ComponentFormattingOptions options) -> String,
    file_name(ComponentFormattingOptions options) -> String,
    has_query() -> bool,
    set_query(String query, Url::ParsingMode mode),
    set_query(&UrlQueryType query),
    query(ComponentFormattingOptions arg0) -> String,
    has_fragment() -> bool,
    fragment(ComponentFormattingOptions options) -> String,
    set_fragment(String fragment, Url::ParsingMode mode),
    resolved(&UrlType relative) -> UrlType,
    is_relative() -> bool,
    is_parent_of(&UrlType url) -> bool,
    is_local_file() -> bool,
    from_local_file(String localfile) -> UrlType,
    to_local_file() -> String,
    detach(),
    is_detached() -> bool,
    matches(&UrlType url, FormattingOptions options) -> bool,
    from_percent_encoding(&ByteArrayType arg0) -> String,
    to_percent_encoding(String arg0, &ByteArrayType exclude, &ByteArrayType include) -> ByteArrayType,
    from_cfurl(CFURLRef url) -> UrlType,
    to_cfurl() -> CFURLRef,
    from_nsurl(&NSURL url) -> UrlType,
    to_nsurl() -> &NSURL,
    from_ace(&ByteArrayType arg0) -> String,
    to_ace(String arg0) -> ByteArrayType,
    idn_whitelist() -> StringListType,
    set_idn_whitelist(&StringListType arg0),
}

// vim: syntax=rust expandtab ts=4 sw=4
