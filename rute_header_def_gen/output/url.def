
struct Url {
    swap(other: &UrlType),
    set_url(url: String, mode: Url::ParsingMode),
    url(options: FormattingOptions) -> String,
    adjusted(options: FormattingOptions) -> UrlType,
    to_encoded(options: FormattingOptions) -> ByteArrayType,
    from_encoded(url: &ByteArrayType, mode: Url::ParsingMode) -> UrlType,
    from_user_input(user_input: String) -> UrlType,
    from_user_input(user_input: String, working_directory: String, options: UserInputResolutionOptions) -> UrlType,
    is_valid() -> bool,
    is_empty() -> bool,
    clear(),
    set_scheme(scheme: String),
    scheme() -> String,
    set_authority(authority: String, mode: Url::ParsingMode),
    authority(options: ComponentFormattingOptions) -> String,
    set_user_info(user_info: String, mode: Url::ParsingMode),
    user_info(options: ComponentFormattingOptions) -> String,
    set_user_name(user_name: String, mode: Url::ParsingMode),
    user_name(options: ComponentFormattingOptions) -> String,
    set_password(password: String, mode: Url::ParsingMode),
    password(arg0: ComponentFormattingOptions) -> String,
    set_host(host: String, mode: Url::ParsingMode),
    host(arg0: ComponentFormattingOptions) -> String,
    top_level_domain(options: ComponentFormattingOptions) -> String,
    set_port(port: i32),
    port(default_port: i32) -> i32,
    set_path(path: String, mode: Url::ParsingMode),
    path(options: ComponentFormattingOptions) -> String,
    file_name(options: ComponentFormattingOptions) -> String,
    has_query() -> bool,
    set_query(query: String, mode: Url::ParsingMode),
    set_query(query: &UrlQueryType),
    query(arg0: ComponentFormattingOptions) -> String,
    has_fragment() -> bool,
    fragment(options: ComponentFormattingOptions) -> String,
    set_fragment(fragment: String, mode: Url::ParsingMode),
    resolved(relative: &UrlType) -> UrlType,
    is_relative() -> bool,
    is_parent_of(url: &UrlType) -> bool,
    is_local_file() -> bool,
    from_local_file(localfile: String) -> UrlType,
    to_local_file() -> String,
    detach(),
    is_detached() -> bool,
    matches(url: &UrlType, options: FormattingOptions) -> bool,
    from_percent_encoding(arg0: &ByteArrayType) -> String,
    to_percent_encoding(arg0: String, exclude: &ByteArrayType, include: &ByteArrayType) -> ByteArrayType,
    from_cfurl(url: CFURLRef) -> UrlType,
    to_cfurl() -> CFURLRef,
    from_nsurl(url: &NSURL) -> UrlType,
    to_nsurl() -> &NSURL,
    from_ace(arg0: &ByteArrayType) -> String,
    to_ace(arg0: String) -> ByteArrayType,
    idn_whitelist() -> StringListType,
    set_idn_whitelist(arg0: &StringListType),
}

// vim: syntax=rust expandtab ts=4 sw=4
