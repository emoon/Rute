/// 
/// QStandardItemModel can be used as a repository for standard Qt
/// data types. It is one of the [Model/View Classes](Model/View%20Classes)
/// and is part
/// of Qt's [model/view](Model/View%20Programming)
/// framework.
/// 
/// QStandardItemModel provides a classic item-based approach to working with
/// the model. The items in a QStandardItemModel are provided by
/// QStandardItem.
/// 
/// QStandardItemModel implements the QAbstractItemModel interface, which
/// means that the model can be used to provide data in any view that supports
/// that interface (such as QListView, QTableView and QTreeView, and your own
/// custom views). For performance and flexibility, you may want to subclass
/// QAbstractItemModel to provide support for different kinds of data
/// repositories. For example, the QDirModel provides a model interface to the
/// underlying file system.
/// 
/// When you want a list or tree, you typically create an empty
/// QStandardItemModel and use appendRow() to add items to the model, and
/// item() to access an item. If your model represents a table, you typically
/// pass the dimensions of the table to the QStandardItemModel constructor and
/// use setItem() to position items into the table. You can also use setRowCount()
/// and setColumnCount() to alter the dimensions of the model. To insert items,
/// use insertRow() or insertColumn(), and to remove items, use removeRow() or
/// removeColumn().
/// 
/// You can set the header labels of your model with setHorizontalHeaderLabels()
/// and setVerticalHeaderLabels().
/// 
/// You can search for items in the model with findItems(), and sort the model by
/// calling sort().
/// 
/// Call clear() to remove all items from the model.
/// 
/// An example usage of QStandardItemModel to create a table:
/// 
/// An example usage of QStandardItemModel to create a tree:
/// 
/// After setting the model on a view, you typically want to react to user
/// actions, such as an item being clicked. Since a QAbstractItemView provides
/// QModelIndex-based signals and functions, you need a way to obtain the
/// QStandardItem that corresponds to a given QModelIndex, and vice
/// versa. itemFromIndex() and indexFromItem() provide this mapping. Typical
/// usage of itemFromIndex() includes obtaining the item at the current index
/// in a view, and obtaining the item that corresponds to an index carried by
/// a QAbstractItemView signal, such as QAbstractItemView::clicked(). First
/// you connect the view's signal to a slot in your class:
/// 
/// When you receive the signal, you call itemFromIndex() on the given model
/// index to get a pointer to the item:
/// 
/// Conversely, you must obtain the QModelIndex of an item when you want to
/// invoke a model/view function that takes an index as argument. You can
/// obtain the index either by using the model's indexFromItem() function, or,
/// equivalently, by calling QStandardItem::index():
/// 
/// You are, of course, not required to use the item-based approach; you could
/// instead rely entirely on the QAbstractItemModel interface when working with
/// the model, or use a combination of the two as appropriate.
/// 
/// **See also:** QStandardItem
/// {Model/View Programming}
/// QAbstractItemModel
/// {itemviews/simpletreemodel}{Simple Tree Model example}
/// {Item View Convenience Classes}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct StandardItemModel : AbstractItemModel {
    /// 
    /// Sets the item role names to *roleNames.*
    set_item_role_names(role_names: &Hash<int,Type),
    /// 
    /// Returns the QModelIndex associated with the given *item.*
    /// 
    /// Use this function when you want to perform an operation that requires the
    /// QModelIndex of the item, such as
    /// QAbstractItemView::scrollTo(). QStandardItem::index() is provided as
    /// convenience; it is equivalent to calling this function.
    /// 
    /// **See also:** itemFromIndex()
    /// QStandardItem::index()
    /// 
    [event] index(row: i32, column: i32, parent: &ModelIndexType) -> ModelIndex,
    /// 
    [event] parent(child: &ModelIndexType) -> ModelIndex,
    /// 
    [event] row_count(parent: &ModelIndexType) -> i32,
    /// 
    [event] column_count(parent: &ModelIndexType) -> i32,
    /// 
    [event] has_children(parent: &ModelIndexType) -> bool,
    /// 
    [event] sibling(row: i32, column: i32, idx: &ModelIndexType) -> ModelIndex,
    /// 
    [event] data(index: &ModelIndexType, role: i32) -> Variant,
    /// 
    [event] set_data(index: &ModelIndexType, value: &VariantType, role: i32) -> bool,
    /// 
    [event] header_data(section: i32, orientation: Rute::Orientation, role: i32) -> Variant,
    /// 
    [event] set_header_data(section: i32, orientation: Rute::Orientation, value: &VariantType, role: i32) -> bool,
    /// 
    [event] insert_rows(row: i32, count: i32, parent: &ModelIndexType) -> bool,
    /// 
    [event] insert_columns(column: i32, count: i32, parent: &ModelIndexType) -> bool,
    /// 
    [event] remove_rows(row: i32, count: i32, parent: &ModelIndexType) -> bool,
    /// 
    [event] remove_columns(column: i32, count: i32, parent: &ModelIndexType) -> bool,
    /// 
    [event] flags(index: &ModelIndexType) -> Rute::ItemFlags,
    /// 
    /// QStandardItemModel supports both copy and move.
    [event] supported_drop_actions() -> Rute::DropActions,
    /// 
    [event] item_data(index: &ModelIndexType) -> Map<int,,
    /// 
    [event] set_item_data(index: &ModelIndexType, roles: &Map<int,Type) -> bool,
    /// 
    /// Removes all items (including header items) from the model and sets the
    /// number of rows and columns to zero.
    /// 
    /// **See also:** removeColumns()
    /// removeRows()
    clear(),
    /// 
    /// The default value is Qt::DisplayRole.
    /// 
    /// **See also:** sort()
    /// QStandardItem::sortChildren()
    /// 
    [event] sort(column: i32, order: Rute::SortOrder),
    /// 
    /// Returns a pointer to the QStandardItem associated with the given *index.*
    /// 
    /// Calling this function is typically the initial step when processing
    /// QModelIndex-based signals from a view, such as
    /// QAbstractItemView::activated(). In your slot, you call itemFromIndex(),
    /// with the QModelIndex carried by the signal as argument, to obtain a
    /// pointer to the corresponding QStandardItem.
    /// 
    /// Note that this function will lazily create an item for the index (using
    /// itemPrototype()), and set it in the parent item's child table, if no item
    /// already exists at that index.
    /// 
    /// If *index* is an invalid index, this function returns 0.
    /// 
    /// **See also:** indexFromItem()
    item_from_index(index: &ModelIndexType) -> StandardItem?,
    /// 
    /// Returns the QModelIndex associated with the given *item.*
    /// 
    /// Use this function when you want to perform an operation that requires the
    /// QModelIndex of the item, such as
    /// QAbstractItemView::scrollTo(). QStandardItem::index() is provided as
    /// convenience; it is equivalent to calling this function.
    /// 
    /// **See also:** itemFromIndex()
    /// QStandardItem::index()
    index_from_item(item: *StandardItemType) -> ModelIndex,
    /// 
    /// This signal is emitted whenever the data of *item* has changed.
    /// 
    /// Returns a pointer to the QStandardItem associated with the given *index.*
    /// 
    /// Calling this function is typically the initial step when processing
    /// QModelIndex-based signals from a view, such as
    /// QAbstractItemView::activated(). In your slot, you call itemFromIndex(),
    /// with the QModelIndex carried by the signal as argument, to obtain a
    /// pointer to the corresponding QStandardItem.
    /// 
    /// Note that this function will lazily create an item for the index (using
    /// itemPrototype()), and set it in the parent item's child table, if no item
    /// already exists at that index.
    /// 
    /// If *index* is an invalid index, this function returns 0.
    /// 
    /// **See also:** indexFromItem()
    /// 
    /// Returns the item for the given *row* and *column* if one has been set;
    /// otherwise returns 0.
    /// 
    /// **See also:** setItem()
    /// takeItem()
    /// itemFromIndex()
    /// 
    /// Returns the item prototype used by the model. The model uses the item
    /// prototype as an item factory when it needs to construct new items on
    /// demand (for instance, when a view or item delegate calls setData()).
    /// 
    /// **See also:** setItemPrototype()
    /// 
    item(row: i32, column: i32) -> StandardItem?,
    /// 
    /// Sets the item role names to *roleNames.*
    /// 
    /// Sets the item for the given *row* and *column* to *item.* The model
    /// takes ownership of the item. If necessary, the row count and column count
    /// are increased to fit the item. The previous item at the given location (if
    /// there was one) is deleted.
    /// 
    /// **See also:** item()
    /// 
    /// **Overloads**
    /// 
    /// Sets the item prototype for the model to the specified *item.* The model
    /// takes ownership of the prototype.
    /// 
    /// The item prototype acts as a QStandardItem factory, by relying on the
    /// QStandardItem::clone() function. To provide your own prototype, subclass
    /// QStandardItem, reimplement QStandardItem::clone() and set the prototype to
    /// be an instance of your custom class. Whenever QStandardItemModel needs to
    /// create an item on demand (for instance, when a view or item delegate calls
    /// setData())), the new items will be instances of your custom class.
    /// 
    /// **See also:** itemPrototype()
    /// QStandardItem::clone()
    /// 
    set_item(row: i32, column: i32, item: *StandardItemType),
    /// 
    /// Sets the item role names to *roleNames.*
    /// 
    /// Sets the item for the given *row* and *column* to *item.* The model
    /// takes ownership of the item. If necessary, the row count and column count
    /// are increased to fit the item. The previous item at the given location (if
    /// there was one) is deleted.
    /// 
    /// **See also:** item()
    /// 
    /// **Overloads**
    /// 
    /// Sets the item prototype for the model to the specified *item.* The model
    /// takes ownership of the prototype.
    /// 
    /// The item prototype acts as a QStandardItem factory, by relying on the
    /// QStandardItem::clone() function. To provide your own prototype, subclass
    /// QStandardItem, reimplement QStandardItem::clone() and set the prototype to
    /// be an instance of your custom class. Whenever QStandardItemModel needs to
    /// create an item on demand (for instance, when a view or item delegate calls
    /// setData())), the new items will be instances of your custom class.
    /// 
    /// **See also:** itemPrototype()
    /// QStandardItem::clone()
    /// 
    set_item_2(row: i32, item: *StandardItemType),
    /// 
    /// Returns the model's invisible root item.
    /// 
    /// The invisible root item provides access to the model's top-level items
    /// through the QStandardItem API, making it possible to write functions that
    /// can treat top-level items and their children in a uniform way; for
    /// example, recursive functions involving a tree model.
    /// 
    /// **Note**: Calling [index()](QAbstractItemModel::index())
    /// on the QStandardItem object
    /// retrieved from this function is not valid.
    invisible_root_item() -> StandardItem?,
    /// 
    /// Returns the horizontal header item for *column* if one has been set;
    /// otherwise returns 0.
    /// 
    /// **See also:** setHorizontalHeaderItem()
    /// verticalHeaderItem()
    horizontal_header_item(column: i32) -> StandardItem?,
    /// 
    /// Sets the horizontal header item for *column* to *item.* The model takes
    /// ownership of the item. If necessary, the column count is increased to fit
    /// the item. The previous header item (if there was one) is deleted.
    /// 
    /// **See also:** horizontalHeaderItem()
    /// setHorizontalHeaderLabels()
    /// setVerticalHeaderItem()
    set_horizontal_header_item(column: i32, item: *StandardItemType),
    /// 
    /// Returns the vertical header item for row *row* if one has been set;
    /// otherwise returns 0.
    /// 
    /// **See also:** setVerticalHeaderItem()
    /// horizontalHeaderItem()
    vertical_header_item(row: i32) -> StandardItem?,
    /// 
    /// Sets the vertical header item for *row* to *item.* The model takes
    /// ownership of the item. If necessary, the row count is increased to fit the
    /// item. The previous header item (if there was one) is deleted.
    /// 
    /// **See also:** verticalHeaderItem()
    /// setVerticalHeaderLabels()
    /// setHorizontalHeaderItem()
    set_vertical_header_item(row: i32, item: *StandardItemType),
    /// 
    /// Sets the horizontal header labels using *labels.* If necessary, the
    /// column count is increased to the size of *labels.*
    /// 
    /// **See also:** setHorizontalHeaderItem()
    set_horizontal_header_labels(labels: &[String]),
    /// 
    /// Sets the vertical header labels using *labels.* If necessary, the row
    /// count is increased to the size of *labels.*
    /// 
    /// **See also:** setVerticalHeaderItem()
    set_vertical_header_labels(labels: &[String]),
    /// 
    /// Sets the number of rows in this model to *rows.* If
    /// this is less than rowCount(), the data in the unwanted rows
    /// is discarded.
    /// 
    /// **See also:** setColumnCount()
    set_row_count(rows: i32),
    /// 
    /// Sets the number of columns in this model to *columns.* If
    /// this is less than columnCount(), the data in the unwanted columns
    /// is discarded.
    /// 
    /// **See also:** setRowCount()
    set_column_count(columns: i32),
    /// 
    /// Appends a row containing *items.* If necessary, the column count is
    /// increased to the size of *items.*
    /// 
    /// **See also:** insertRow()
    /// appendColumn()
    /// 
    /// **Overloads**
    /// When building a list or a tree that has only one column, this function
    /// provides a convenient way to append a single new *item.*
    append_row(items: [*StandardItemType]),
    /// 
    /// Appends a column containing *items.* If necessary, the row count is
    /// increased to the size of *items.*
    /// 
    /// **See also:** insertColumn()
    /// appendRow()
    append_column(items: [*StandardItemType]),
    /// 
    /// Appends a row containing *items.* If necessary, the column count is
    /// increased to the size of *items.*
    /// 
    /// **See also:** insertRow()
    /// appendColumn()
    /// 
    /// **Overloads**
    /// When building a list or a tree that has only one column, this function
    /// provides a convenient way to append a single new *item.*
    append_row_2(item: *StandardItemType),
    /// 
    /// Inserts a single row before the given *row* in the child items of the
    /// *parent* specified. Returns `true` if the row is inserted; otherwise
    /// returns `false.`
    /// 
    /// **See also:** insertRows()
    /// insertColumn()
    /// removeRow()
    /// 
    /// Inserts a row at *row* containing *items.* If necessary, the column
    /// count is increased to the size of *items.*
    /// 
    /// **See also:** takeRow()
    /// appendRow()
    /// insertColumn()
    /// 
    /// **Overloads**
    /// Inserts a row at *row* containing *item.*
    /// 
    /// When building a list or a tree that has only one column, this function
    /// provides a convenient way to append a single new item.
    /// 
    insert_row(row: i32, items: [*StandardItemType]),
    /// 
    /// Inserts a single column before the given *column* in the child items of
    /// the *parent* specified. Returns `true` if the column is inserted; otherwise
    /// returns `false.`
    /// 
    /// **See also:** insertColumns()
    /// insertRow()
    /// removeColumn()
    /// 
    /// Inserts a column at *column* containing *items.* If necessary, the row
    /// count is increased to the size of *items.*
    /// 
    /// **See also:** takeColumn()
    /// appendColumn()
    /// insertRow()
    /// 
    insert_column(column: i32, items: [*StandardItemType]),
    /// 
    /// Inserts a single row before the given *row* in the child items of the
    /// *parent* specified. Returns `true` if the row is inserted; otherwise
    /// returns `false.`
    /// 
    /// **See also:** insertRows()
    /// insertColumn()
    /// removeRow()
    /// 
    /// Inserts a row at *row* containing *items.* If necessary, the column
    /// count is increased to the size of *items.*
    /// 
    /// **See also:** takeRow()
    /// appendRow()
    /// insertColumn()
    /// 
    /// **Overloads**
    /// Inserts a row at *row* containing *item.*
    /// 
    /// When building a list or a tree that has only one column, this function
    /// provides a convenient way to append a single new item.
    /// 
    insert_row_2(row: i32, item: *StandardItemType),
    /// 
    /// Inserts a single row before the given *row* in the child items of the
    /// *parent* specified. Returns `true` if the row is inserted; otherwise
    /// returns `false.`
    /// 
    /// **See also:** insertRows()
    /// insertColumn()
    /// removeRow()
    /// 
    /// Inserts a row at *row* containing *items.* If necessary, the column
    /// count is increased to the size of *items.*
    /// 
    /// **See also:** takeRow()
    /// appendRow()
    /// insertColumn()
    /// 
    /// **Overloads**
    /// Inserts a row at *row* containing *item.*
    /// 
    /// When building a list or a tree that has only one column, this function
    /// provides a convenient way to append a single new item.
    /// 
    insert_row_3(row: i32, parent: &ModelIndexType) -> bool,
    /// 
    /// Inserts a single column before the given *column* in the child items of
    /// the *parent* specified. Returns `true` if the column is inserted; otherwise
    /// returns `false.`
    /// 
    /// **See also:** insertColumns()
    /// insertRow()
    /// removeColumn()
    /// 
    /// Inserts a column at *column* containing *items.* If necessary, the row
    /// count is increased to the size of *items.*
    /// 
    /// **See also:** takeColumn()
    /// appendColumn()
    /// insertRow()
    /// 
    insert_column_2(column: i32, parent: &ModelIndexType) -> bool,
    /// 
    /// Removes the item at ( *row,* *column)* without deleting it. The model
    /// releases ownership of the item.
    /// 
    /// **See also:** item()
    /// takeRow()
    /// takeColumn()
    take_item(row: i32, column: i32) -> StandardItem?,
    /// 
    /// Removes the given *row* without deleting the row items, and returns a
    /// list of pointers to the removed items. The model releases ownership of the
    /// items. For items in the row that have not been set, the corresponding
    /// pointers in the list will be 0.
    /// 
    /// **See also:** takeColumn()
    take_row(row: i32) -> [StandardItem?],
    /// 
    /// Removes the given *column* without deleting the column items, and returns
    /// a list of pointers to the removed items. The model releases ownership of
    /// the items. For items in the column that have not been set, the
    /// corresponding pointers in the list will be 0.
    /// 
    /// **See also:** takeRow()
    take_column(column: i32) -> [StandardItem?],
    /// 
    /// Removes the horizontal header item at *column* from the header without
    /// deleting it, and returns a pointer to the item. The model releases
    /// ownership of the item.
    /// 
    /// **See also:** horizontalHeaderItem()
    /// takeVerticalHeaderItem()
    take_horizontal_header_item(column: i32) -> StandardItem?,
    /// 
    /// Removes the vertical header item at *row* from the header without
    /// deleting it, and returns a pointer to the item. The model releases
    /// ownership of the item.
    /// 
    /// **See also:** verticalHeaderItem()
    /// takeHorizontalHeaderItem()
    take_vertical_header_item(row: i32) -> StandardItem?,
    /// 
    /// Returns the item prototype used by the model. The model uses the item
    /// prototype as an item factory when it needs to construct new items on
    /// demand (for instance, when a view or item delegate calls setData()).
    /// 
    /// **See also:** setItemPrototype()
    item_prototype() -> StandardItem?,
    /// 
    /// Sets the item prototype for the model to the specified *item.* The model
    /// takes ownership of the prototype.
    /// 
    /// The item prototype acts as a QStandardItem factory, by relying on the
    /// QStandardItem::clone() function. To provide your own prototype, subclass
    /// QStandardItem, reimplement QStandardItem::clone() and set the prototype to
    /// be an instance of your custom class. Whenever QStandardItemModel needs to
    /// create an item on demand (for instance, when a view or item delegate calls
    /// setData())), the new items will be instances of your custom class.
    /// 
    /// **See also:** itemPrototype()
    /// QStandardItem::clone()
    set_item_prototype(item: *StandardItemType),
    /// 
    /// Returns a list of items that match the given *text,* using the given *flags,* in the given *column.*
    find_items(text: String, flags: Rute::MatchFlags, column: i32) -> [StandardItem?],
    /// 
    /// The default value is Qt::DisplayRole.
    /// 
    /// **See also:** sort()
    /// QStandardItem::sortChildren()
    sort_role() -> i32,
    set_sort_role(role: i32),
    /// 
    [event] mime_types() -> [String],
    /// 
    [event] mime_data(indexes: &[ModelIndex]) -> MimeData?,
    /// 
    [event] drop_mime_data(data: *MimeDataType, action: Rute::DropAction, row: i32, column: i32, parent: &ModelIndexType) -> bool,
    /// 
    /// This signal is emitted whenever the data of *item* has changed.
    [signal] item_changed(item: *StandardItemType),
}

// vim: syntax=rust expandtab ts=4 sw=4
