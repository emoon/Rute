struct StandardItemModel : AbstractItemModel {
    set_item_role_names(role_names: &Hash<int,Type),
    [event] index(row: i32, column: i32, parent: &ModelIndexType) -> ModelIndex,
    [event] parent(child: &ModelIndexType) -> ModelIndex,
    [event] row_count(parent: &ModelIndexType) -> i32,
    [event] column_count(parent: &ModelIndexType) -> i32,
    [event] has_children(parent: &ModelIndexType) -> bool,
    [event] sibling(row: i32, column: i32, idx: &ModelIndexType) -> ModelIndex,
    [event] data(index: &ModelIndexType, role: i32) -> Variant,
    [event] set_data(index: &ModelIndexType, value: &VariantType, role: i32) -> bool,
    [event] header_data(section: i32, orientation: Rute::Orientation, role: i32) -> Variant,
    [event] set_header_data(section: i32, orientation: Rute::Orientation, value: &VariantType, role: i32) -> bool,
    [event] insert_rows(row: i32, count: i32, parent: &ModelIndexType) -> bool,
    [event] insert_columns(column: i32, count: i32, parent: &ModelIndexType) -> bool,
    [event] remove_rows(row: i32, count: i32, parent: &ModelIndexType) -> bool,
    [event] remove_columns(column: i32, count: i32, parent: &ModelIndexType) -> bool,
    [event] flags(index: &ModelIndexType) -> Rute::ItemFlags,
    [event] supported_drop_actions() -> Rute::DropActions,
    [event] item_data(index: &ModelIndexType) -> Map<int,,
    [event] set_item_data(index: &ModelIndexType, roles: &Map<int,Type) -> bool,
    clear(),
    [event] sort(column: i32, order: Rute::SortOrder),
    item_from_index(index: &ModelIndexType) -> StandardItem?,
    index_from_item(item: *StandardItemType) -> ModelIndex,
    item(row: i32, column: i32) -> StandardItem?,
    set_item(row: i32, column: i32, item: *StandardItemType),
    set_item(row: i32, item: *StandardItemType),
    invisible_root_item() -> StandardItem?,
    horizontal_header_item(column: i32) -> StandardItem?,
    set_horizontal_header_item(column: i32, item: *StandardItemType),
    vertical_header_item(row: i32) -> StandardItem?,
    set_vertical_header_item(row: i32, item: *StandardItemType),
    set_horizontal_header_labels(labels: &[String]),
    set_vertical_header_labels(labels: &[String]),
    set_row_count(rows: i32),
    set_column_count(columns: i32),
    append_row(items: [*StandardItemType]),
    append_column(items: [*StandardItemType]),
    append_row(item: *StandardItemType),
    insert_row(row: i32, items: [*StandardItemType]),
    insert_column(column: i32, items: [*StandardItemType]),
    insert_row(row: i32, item: *StandardItemType),
    insert_row(row: i32, parent: &ModelIndexType) -> bool,
    insert_column(column: i32, parent: &ModelIndexType) -> bool,
    take_item(row: i32, column: i32) -> StandardItem?,
    take_row(row: i32) -> [StandardItem?],
    take_column(column: i32) -> [StandardItem?],
    take_horizontal_header_item(column: i32) -> StandardItem?,
    take_vertical_header_item(row: i32) -> StandardItem?,
    item_prototype() -> StandardItem?,
    set_item_prototype(item: *StandardItemType),
    find_items(text: String, flags: Rute::MatchFlags, column: i32) -> [StandardItem?],
    sort_role() -> i32,
    set_sort_role(role: i32),
    [event] mime_types() -> [String],
    [event] mime_data(indexes: &[ModelIndex]) -> MimeData?,
    [event] drop_mime_data(data: *MimeDataType, action: Rute::DropAction, row: i32, column: i32, parent: &ModelIndexType) -> bool,
    [signal] item_changed(item: *StandardItemType),
}

// vim: syntax=rust expandtab ts=4 sw=4
