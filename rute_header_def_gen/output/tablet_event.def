///     \class QTabletEvent
///     \brief The QTabletEvent class contains parameters that describe a Tablet event.
///     \inmodule QtGui
/// 
///     \ingroup events
/// 
///     \e{Tablet events} are generated from tablet peripherals such as Wacom
///     tablets and various other brands, and electromagnetic stylus devices
///     included with some types of tablet computers. (It is not the same as
///     \l QTouchEvent which a touchscreen generates, even when a passive stylus is
///     used on a touchscreen.)
/// 
///     Tablet events are similar to mouse events; for example, the \l x(), \l y(),
///     \l pos(), \l globalX(), \l globalY(), and \l globalPos() accessors provide
///     the cursor position, and you can see which \l buttons() are pressed
///     (pressing the stylus tip against the tablet surface is equivalent to a left
///     mouse button). But tablet events also pass through some extra information
///     that the tablet device driver provides; for example, you might want to do
///     subpixel rendering with higher resolution coordinates (\l hiResGlobalX()
///     and \l hiResGlobalY()), adjust color brightness based on the \l pressure()
///     of the tool against the tablet surface, use different brushes depending on
///     the type of tool in use (\l device()), modulate the brush shape in some way
///     according to the X-axis and Y-axis tilt of the tool with respect to the
///     tablet surface (\l xTilt() and \l yTilt()), and use a virtual eraser
///     instead of a brush if the user switches to the other end of a double-ended
///     stylus (\l pointerType()).
/// 
///     Every event contains an accept flag that indicates whether the receiver
///     wants the event. You should call QTabletEvent::accept() if you handle the
///     tablet event; otherwise it will be sent to the parent widget. The exception
///     are TabletEnterProximity and TabletLeaveProximity events: these are only
///     sent to QApplication and do not check whether or not they are accepted.
/// 
///     The QWidget::setEnabled() function can be used to enable or disable
///     mouse, tablet and keyboard events for a widget.
/// 
///     The event handler QWidget::tabletEvent() receives TabletPress,
///     TabletRelease and TabletMove events. Qt will first send a
///     tablet event, then if it is not accepted by any widget, it will send a
///     mouse event. This allows users of applications that are not designed for
///     tablets to use a tablet like a mouse. However high-resolution drawing
///     applications should handle the tablet events, because they can occur at a
///     higher frequency, which is a benefit for smooth and accurate drawing.
///     If the tablet events are rejected, the synthetic mouse events may be
///     compressed for efficiency.
/// 
///     New in Qt 5.4: QTabletEvent includes all information available from the
///     device, including \l QTabletEvent::buttons(). Previously it was not
///     possible to accept all tablet events and also know which stylus buttons
///     were pressed.
/// 
///     Note that pressing the stylus button while the stylus hovers over the
///     tablet will generate a button press on some types of tablets, while on
///     other types it will be necessary to press the stylus against the tablet
///     surface in order to register the simultaneous stylus button press.
/// 
///     \section1 Notes for X11 Users
/// 
///     If the tablet is configured in xorg.conf to use the Wacom driver, there
///     will be separate XInput "devices" for the stylus, eraser, and (optionally)
///     cursor and touchpad. Qt recognizes these by their names. Otherwise, if the
///     tablet is configured to use the evdev driver, there will be only one device
///     and applications may not be able to distinguish the stylus from the eraser.
/// 
///     \section1 Notes for Windows Users
/// 
///     Tablet support currently requires the WACOM windows driver providing the DLL
///     \c{wintab32.dll} to be installed. It is contained in older packages,
///     for example \c{pentablet_5.3.5-3.exe}.
/// 
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QTabletEvent)]
enum TabletDevice {
    NoDevice,
    Puck,
    Stylus,
    Airbrush,
    FourDMouse,
    XFreeEraser,
    RotationStylus,
}

[org_name(QTabletEvent)]
enum PointerType {
    UnknownPointer,
    Pen,
    Cursor,
    Eraser,
}

struct TabletEvent : InputEvent {
    qt_check_for_qgadget_macro(),
    pos() -> Point,
    global_pos() -> Point,
    pos_f() -> PointF?,
    global_pos_f() -> PointF?,
    x() -> i32,
    y() -> i32,
    global_x() -> i32,
    global_y() -> i32,
    hi_res_global_x() -> f32,
    hi_res_global_y() -> f32,
    device() -> TabletEvent::TabletDevice,
    pointer_type() -> TabletEvent::PointerType,
    unique_id() -> i64,
    pressure() -> f32,
    z() -> i32,
    tangential_pressure() -> f32,
    rotation() -> f32,
    x_tilt() -> i32,
    y_tilt() -> i32,
    ///     Returns the button that caused the event.
    /// 
    ///     Note that the returned value is always Qt::NoButton for \l TabletMove,
    ///     \l TabletEnterProximity and \l TabletLeaveProximity events.
    /// 
    ///     \sa buttons(), Qt::MouseButton
    button() -> Rute::MouseButton,
    ///     Returns the button state when the event was generated. The button state is
    ///     a combination of buttons from the \l Qt::MouseButton enum using the OR
    ///     operator. For \l TabletMove events, this is all buttons that are pressed
    ///     down. For \l TabletPress events this includes the button that caused the
    ///     event. For \l TabletRelease events this excludes the button that caused the
    ///     event.
    /// 
    ///     \sa button(), Qt::MouseButton
    buttons() -> Rute::MouseButtons,
}

// vim: syntax=rust expandtab ts=4 sw=4
