
struct Char {
    category() -> Char::Category,
    direction() -> Char::Direction,
    joining_type() -> Char::JoiningType,
    joining() -> Char::Joining,
    combining_class() -> unsigned,
    mirrored_char() -> CharType,
    has_mirrored() -> bool,
    decomposition() -> String,
    decomposition_tag() -> Char::Decomposition,
    digit_value() -> i32,
    to_lower() -> CharType,
    to_upper() -> CharType,
    to_title_case() -> CharType,
    to_case_folded() -> CharType,
    script() -> Char::Script,
    unicode_version() -> Char::UnicodeVersion,
    to_latin1() -> char,
    unicode() -> ushort,
    unicode() -> &ushort,
    from_latin1(c: char) -> CharType,
    is_null() -> bool,
    is_print() -> bool,
    is_space() -> bool,
    is_mark() -> bool,
    is_punct() -> bool,
    is_symbol() -> bool,
    is_letter() -> bool,
    is_number() -> bool,
    is_letter_or_number() -> bool,
    is_digit() -> bool,
    is_lower() -> bool,
    is_upper() -> bool,
    is_title_case() -> bool,
    is_non_character() -> bool,
    is_high_surrogate() -> bool,
    is_low_surrogate() -> bool,
    is_surrogate() -> bool,
    cell() -> uchar,
    row() -> uchar,
    set_cell(acell: uchar),
    set_row(arow: uchar),
    is_non_character(ucs4: uint) -> bool,
    is_high_surrogate(ucs4: uint) -> bool,
    is_low_surrogate(ucs4: uint) -> bool,
    is_surrogate(ucs4: uint) -> bool,
    requires_surrogates(ucs4: uint) -> bool,
    surrogate_to_ucs4(high: ushort, low: ushort) -> uint,
    surrogate_to_ucs4(high: CharType, low: CharType) -> uint,
    high_surrogate(ucs4: uint) -> ushort,
    low_surrogate(ucs4: uint) -> ushort,
    category(ucs4: uint) -> Char::Category,
    direction(ucs4: uint) -> Char::Direction,
    joining_type(ucs4: uint) -> Char::JoiningType,
    joining(ucs4: uint) -> Char::Joining,
    combining_class(ucs4: uint) -> unsigned,
    mirrored_char(ucs4: uint) -> uint,
    has_mirrored(ucs4: uint) -> bool,
    decomposition(ucs4: uint) -> String,
    decomposition_tag(ucs4: uint) -> Char::Decomposition,
    digit_value(ucs4: uint) -> i32,
    to_lower(ucs4: uint) -> uint,
    to_upper(ucs4: uint) -> uint,
    to_title_case(ucs4: uint) -> uint,
    to_case_folded(ucs4: uint) -> uint,
    script(ucs4: uint) -> Char::Script,
    unicode_version(ucs4: uint) -> Char::UnicodeVersion,
    current_unicode_version() -> Char::UnicodeVersion,
    is_print(ucs4: uint) -> bool,
    is_space(ucs4: uint) -> bool,
    is_mark(ucs4: uint) -> bool,
    is_punct(ucs4: uint) -> bool,
    is_symbol(ucs4: uint) -> bool,
    is_letter(ucs4: uint) -> bool,
    is_number(ucs4: uint) -> bool,
    is_letter_or_number(ucs4: uint) -> bool,
    is_digit(ucs4: uint) -> bool,
    is_lower(ucs4: uint) -> bool,
    is_upper(ucs4: uint) -> bool,
    is_title_case(ucs4: uint) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
