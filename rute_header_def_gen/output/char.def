///     \class QChar
///     \inmodule QtCore
///     \brief The QChar class provides a 16-bit Unicode character.
/// 
///     \ingroup string-processing
///     \reentrant
/// 
///     In Qt, Unicode characters are 16-bit entities without any markup
///     or structure. This class represents such an entity. It is
///     lightweight, so it can be used everywhere. Most compilers treat
///     it like an \c{unsigned short}.
/// 
///     QChar provides a full complement of testing/classification
///     functions, converting to and from other formats, converting from
///     composed to decomposed Unicode, and trying to compare and
///     case-convert if you ask it to.
/// 
///     The classification functions include functions like those in the
///     standard C++ header \<cctype\> (formerly \<ctype.h\>), but
///     operating on the full range of Unicode characters, not just for the ASCII
///     range. They all return true if the character is a certain type of character;
///     otherwise they return false. These classification functions are
///     isNull() (returns \c true if the character is '\\0'), isPrint()
///     (true if the character is any sort of printable character,
///     including whitespace), isPunct() (any sort of punctation),
///     isMark() (Unicode Mark), isLetter() (a letter), isNumber() (any
///     sort of numeric character, not just 0-9), isLetterOrNumber(), and
///     isDigit() (decimal digits). All of these are wrappers around
///     category() which return the Unicode-defined category of each
///     character. Some of these also calculate the derived properties
///     (for example isSpace() returns \c true if the character is of category
///     Separator_* or an exceptional code point from Other_Control category).
/// 
///     QChar also provides direction(), which indicates the "natural"
///     writing direction of this character. The joiningType() function
///     indicates how the character joins with it's neighbors (needed
///     mostly for Arabic or Syriac) and finally hasMirrored(), which indicates
///     whether the character needs to be mirrored when it is printed in
///     it's "unnatural" writing direction.
/// 
///     Composed Unicode characters (like \a ring) can be converted to
///     decomposed Unicode ("a" followed by "ring above") by using decomposition().
/// 
///     In Unicode, comparison is not necessarily possible and case
///     conversion is very difficult at best. Unicode, covering the
///     "entire" world, also includes most of the world's case and
///     sorting problems. operator==() and friends will do comparison
///     based purely on the numeric Unicode value (code point) of the
///     characters, and toUpper() and toLower() will do case changes when
///     the character has a well-defined uppercase/lowercase equivalent.
///     For locale-dependent comparisons, use QString::localeAwareCompare().
/// 
///     The conversion functions include unicode() (to a scalar),
///     toLatin1() (to scalar, but converts all non-Latin-1 characters to
///     0), row() (gives the Unicode row), cell() (gives the Unicode
///     cell), digitValue() (gives the integer value of any of the
///     numerous digit characters), and a host of constructors.
/// 
///     QChar provides constructors and cast operators that make it easy
///     to convert to and from traditional 8-bit \c{char}s. If you
///     defined \c QT_NO_CAST_FROM_ASCII and \c QT_NO_CAST_TO_ASCII, as
///     explained in the QString documentation, you will need to
///     explicitly call fromLatin1(), or use QLatin1Char,
///     to construct a QChar from an 8-bit \c char, and you will need to
///     call toLatin1() to get the 8-bit value back.
/// 
///     For more information see
///     \l{http://www.unicode.org/ucd/}{"About the Unicode Character Database"}.
/// 
///     \sa Unicode, QString, QLatin1Char
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QChar)]
enum SpecialCharacter {
    Null,
    Tabulation,
    LineFeed,
    CarriageReturn,
    Space,
    Nbsp,
    SoftHyphen,
    ReplacementCharacter,
    ObjectReplacementCharacter,
    ByteOrderMark,
    ByteOrderSwapped,
    ParagraphSeparator,
    LineSeparator,
    LastValidCodePoint,
}

[org_name(QChar)]
enum Category {
    Mark_NonSpacing,
    Mark_SpacingCombining,
    Mark_Enclosing,
    Number_DecimalDigit,
    Number_Letter,
    Number_Other,
    Separator_Space,
    Separator_Line,
    Separator_Paragraph,
    Other_Control,
    Other_Format,
    Other_Surrogate,
    Other_PrivateUse,
    Other_NotAssigned,
    Letter_Uppercase,
    Letter_Lowercase,
    Letter_Titlecase,
    Letter_Modifier,
    Letter_Other,
    Punctuation_Connector,
    Punctuation_Dash,
    Punctuation_Open,
    Punctuation_Close,
    Punctuation_InitialQuote,
    Punctuation_FinalQuote,
    Punctuation_Other,
    Symbol_Math,
    Symbol_Currency,
    Symbol_Modifier,
    Symbol_Other,
}

[org_name(QChar)]
enum Script {
    Script_Unknown,
    Script_Inherited,
    Script_Common,
    Script_Latin,
    Script_Greek,
    Script_Cyrillic,
    Script_Armenian,
    Script_Hebrew,
    Script_Arabic,
    Script_Syriac,
    Script_Thaana,
    Script_Devanagari,
    Script_Bengali,
    Script_Gurmukhi,
    Script_Gujarati,
    Script_Oriya,
    Script_Tamil,
    Script_Telugu,
    Script_Kannada,
    Script_Malayalam,
    Script_Sinhala,
    Script_Thai,
    Script_Lao,
    Script_Tibetan,
    Script_Myanmar,
    Script_Georgian,
    Script_Hangul,
    Script_Ethiopic,
    Script_Cherokee,
    Script_CanadianAboriginal,
    Script_Ogham,
    Script_Runic,
    Script_Khmer,
    Script_Mongolian,
    Script_Hiragana,
    Script_Katakana,
    Script_Bopomofo,
    Script_Han,
    Script_Yi,
    Script_OldItalic,
    Script_Gothic,
    Script_Deseret,
    Script_Tagalog,
    Script_Hanunoo,
    Script_Buhid,
    Script_Tagbanwa,
    Script_Coptic,
    Script_Limbu,
    Script_TaiLe,
    Script_LinearB,
    Script_Ugaritic,
    Script_Shavian,
    Script_Osmanya,
    Script_Cypriot,
    Script_Braille,
    Script_Buginese,
    Script_NewTaiLue,
    Script_Glagolitic,
    Script_Tifinagh,
    Script_SylotiNagri,
    Script_OldPersian,
    Script_Kharoshthi,
    Script_Balinese,
    Script_Cuneiform,
    Script_Phoenician,
    Script_PhagsPa,
    Script_Nko,
    Script_Sundanese,
    Script_Lepcha,
    Script_OlChiki,
    Script_Vai,
    Script_Saurashtra,
    Script_KayahLi,
    Script_Rejang,
    Script_Lycian,
    Script_Carian,
    Script_Lydian,
    Script_Cham,
    Script_TaiTham,
    Script_TaiViet,
    Script_Avestan,
    Script_EgyptianHieroglyphs,
    Script_Samaritan,
    Script_Lisu,
    Script_Bamum,
    Script_Javanese,
    Script_MeeteiMayek,
    Script_ImperialAramaic,
    Script_OldSouthArabian,
    Script_InscriptionalParthian,
    Script_InscriptionalPahlavi,
    Script_OldTurkic,
    Script_Kaithi,
    Script_Batak,
    Script_Brahmi,
    Script_Mandaic,
    Script_Chakma,
    Script_MeroiticCursive,
    Script_MeroiticHieroglyphs,
    Script_Miao,
    Script_Sharada,
    Script_SoraSompeng,
    Script_Takri,
    Script_CaucasianAlbanian,
    Script_BassaVah,
    Script_Duployan,
    Script_Elbasan,
    Script_Grantha,
    Script_PahawhHmong,
    Script_Khojki,
    Script_LinearA,
    Script_Mahajani,
    Script_Manichaean,
    Script_MendeKikakui,
    Script_Modi,
    Script_Mro,
    Script_OldNorthArabian,
    Script_Nabataean,
    Script_Palmyrene,
    Script_PauCinHau,
    Script_OldPermic,
    Script_PsalterPahlavi,
    Script_Siddham,
    Script_Khudawadi,
    Script_Tirhuta,
    Script_WarangCiti,
    Script_Ahom,
    Script_AnatolianHieroglyphs,
    Script_Hatran,
    Script_Multani,
    Script_OldHungarian,
    Script_SignWriting,
    Script_Adlam,
    Script_Bhaiksuki,
    Script_Marchen,
    Script_Newa,
    Script_Osage,
    Script_Tangut,
    Script_MasaramGondi,
    Script_Nushu,
    Script_Soyombo,
    Script_ZanabazarSquare,
    ScriptCount,
}

[org_name(QChar)]
enum Direction {
    DirL,
    DirR,
    DirEN,
    DirES,
    DirET,
    DirAN,
    DirCS,
    DirB,
    DirS,
    DirWS,
    DirON,
    DirLRE,
    DirLRO,
    DirAL,
    DirRLE,
    DirRLO,
    DirPDF,
    DirNSM,
    DirBN,
    DirLRI,
    DirRLI,
    DirFSI,
    DirPDI,
}

[org_name(QChar)]
enum Decomposition {
    NoDecomposition,
    Canonical,
    Font,
    NoBreak,
    Initial,
    Medial,
    Final,
    Isolated,
    Circle,
    Super,
    Sub,
    Vertical,
    Wide,
    Narrow,
    Small,
    Square,
    Compat,
    Fraction,
}

[org_name(QChar)]
enum JoiningType {
    Joining_None,
    Joining_Causing,
    Joining_Dual,
    Joining_Right,
    Joining_Left,
    Joining_Transparent,
}

[org_name(QChar)]
enum Joining {
    OtherJoining,
    Dual,
    Right,
    Center,
}

[org_name(QChar)]
enum CombiningClass {
    Combining_BelowLeftAttached,
    Combining_BelowAttached,
    Combining_BelowRightAttached,
    Combining_LeftAttached,
    Combining_RightAttached,
    Combining_AboveLeftAttached,
    Combining_AboveAttached,
    Combining_AboveRightAttached,
    Combining_BelowLeft,
    Combining_Below,
    Combining_BelowRight,
    Combining_Left,
    Combining_Right,
    Combining_AboveLeft,
    Combining_Above,
    Combining_AboveRight,
    Combining_DoubleBelow,
    Combining_DoubleAbove,
    Combining_IotaSubscript,
}

[org_name(QChar)]
enum UnicodeVersion {
    Unicode_Unassigned,
    Unicode_1_1,
    Unicode_2_0,
    Unicode_2_1_2,
    Unicode_3_0,
    Unicode_3_1,
    Unicode_3_2,
    Unicode_4_0,
    Unicode_4_1,
    Unicode_5_0,
    Unicode_5_1,
    Unicode_5_2,
    Unicode_6_0,
    Unicode_6_1,
    Unicode_6_2,
    Unicode_6_3,
    Unicode_7_0,
    Unicode_8_0,
    Unicode_9_0,
    Unicode_10_0,
}


struct Char {
    ///     \overload
    ///     Returns the category of the UCS-4-encoded character specified by \a ucs4.
    category() -> Char::Category,
    ///     \overload
    ///     Returns the direction of the UCS-4-encoded character specified by \a ucs4.
    direction() -> Char::Direction,
    ///     \overload
    ///     \since 5.3
    /// 
    ///     Returns information about the joining type attributes of the UCS-4-encoded
    ///     character specified by \a ucs4
    ///     (needed for certain languages such as Arabic or Syriac).
    joining_type() -> Char::JoiningType,
    ///     \overload
    ///     \deprecated in 5.3, use joiningType() instead.
    /// 
    ///     Returns information about the joining properties of the UCS-4-encoded
    ///     character specified by \a ucs4 (needed for certain languages such as Arabic).
    joining() -> Char::Joining,
    ///     \overload
    ///     Returns the combining class for the UCS-4-encoded character specified by
    ///     \a ucs4, as defined in the Unicode standard.
    combining_class() -> unsigned,
    ///     \overload
    ///     Returns the mirrored character if the UCS-4-encoded character specified
    ///     by \a ucs4 is a mirrored character; otherwise returns the character itself.
    /// 
    ///     \sa hasMirrored()
    mirrored_char() -> Char,
    ///     \overload
    ///     \since 5.0
    /// 
    ///     Returns \c true if the UCS-4-encoded character specified by \a ucs4
    ///     should be reversed if the text direction is reversed; otherwise returns \c false.
    /// 
    ///     A bit faster equivalent of (QChar::mirroredChar(ucs4) != ucs4).
    /// 
    ///     \sa mirroredChar()
    has_mirrored() -> bool,
    ///     \overload
    ///     Decomposes the UCS-4-encoded character specified by \a ucs4 into it's
    ///     constituent parts. Returns an empty string if no decomposition exists.
    decomposition() -> String,
    ///     \overload
    ///     Returns the tag defining the composition of the UCS-4-encoded character
    ///     specified by \a ucs4. Returns QChar::NoDecomposition if no decomposition exists.
    decomposition_tag() -> Char::Decomposition,
    ///     \overload
    ///     Returns the numeric value of the digit specified by the UCS-4-encoded
    ///     character, \a ucs4, or -1 if the character is not a digit.
    digit_value() -> i32,
    ///     \overload
    ///     Returns the lowercase equivalent of the UCS-4-encoded character specified
    ///     by \a ucs4 if the character is uppercase or titlecase; otherwise returns
    ///     the character itself.
    to_lower() -> Char,
    ///     \overload
    ///     Returns the uppercase equivalent of the UCS-4-encoded character specified
    ///     by \a ucs4 if the character is lowercase or titlecase; otherwise returns
    ///     the character itself.
    to_upper() -> Char,
    ///     \overload
    ///     Returns the title case equivalent of the UCS-4-encoded character specified
    ///     by \a ucs4 if the character is lowercase or uppercase; otherwise returns
    ///     the character itself.
    to_title_case() -> Char,
    ///     \overload
    ///     Returns the case folded equivalent of the UCS-4-encoded character specified
    ///     by \a ucs4. For most Unicode characters this is the same as toLower().
    to_case_folded() -> Char,
    ///     \overload
    ///     \since 5.1
    /// 
    ///     Returns the Unicode script property value for the character specified in
    ///     its UCS-4-encoded form as \a ucs4.
    script() -> Char::Script,
    ///     \overload
    ///     Returns the Unicode version that introduced the character specified in
    ///     its UCS-4-encoded form as \a ucs4.
    unicode_version() -> Char::UnicodeVersion,
    to_latin1() -> char,
    unicode() -> ushort,
    unicode() -> ushort?,
    [static] from_latin1(c: char) -> Char,
    is_null() -> bool,
    ///     \overload
    ///     \since 5.0
    /// 
    ///     Returns \c true if the UCS-4-encoded character specified by \a ucs4 is
    ///     a printable character; otherwise returns \c false.
    ///     This is any character not of category Other_*.
    /// 
    ///     Note that this gives no indication of whether the character is
    ///     available in a particular font.
    is_print() -> bool,
    is_space() -> bool,
    ///     \overload
    ///     \since 5.0
    /// 
    ///     Returns \c true if the UCS-4-encoded character specified by \a ucs4 is
    ///     a mark (Mark_* categories); otherwise returns \c false.
    is_mark() -> bool,
    ///     \overload
    ///     \since 5.0
    /// 
    ///     Returns \c true if the UCS-4-encoded character specified by \a ucs4 is
    ///     a punctuation mark (Punctuation_* categories); otherwise returns \c false.
    is_punct() -> bool,
    ///     \overload
    ///     \since 5.0
    /// 
    ///     Returns \c true if the UCS-4-encoded character specified by \a ucs4 is
    ///     a symbol (Symbol_* categories); otherwise returns \c false.
    is_symbol() -> bool,
    is_letter() -> bool,
    is_number() -> bool,
    is_letter_or_number() -> bool,
    is_digit() -> bool,
    is_lower() -> bool,
    is_upper() -> bool,
    is_title_case() -> bool,
    is_non_character() -> bool,
    is_high_surrogate() -> bool,
    is_low_surrogate() -> bool,
    is_surrogate() -> bool,
    cell() -> uchar,
    row() -> uchar,
    set_cell(acell: uchar),
    set_row(arow: uchar),
    [static] is_non_character(ucs4: uint) -> bool,
    [static] is_high_surrogate(ucs4: uint) -> bool,
    [static] is_low_surrogate(ucs4: uint) -> bool,
    [static] is_surrogate(ucs4: uint) -> bool,
    [static] requires_surrogates(ucs4: uint) -> bool,
    [static] surrogate_to_ucs4(high: ushort, low: ushort) -> uint,
    [static] surrogate_to_ucs4(high: CharType, low: CharType) -> uint,
    [static] high_surrogate(ucs4: uint) -> ushort,
    [static] low_surrogate(ucs4: uint) -> ushort,
    ///     \overload
    ///     Returns the category of the UCS-4-encoded character specified by \a ucs4.
    [static] category(ucs4: uint) -> Char::Category,
    ///     \overload
    ///     Returns the direction of the UCS-4-encoded character specified by \a ucs4.
    [static] direction(ucs4: uint) -> Char::Direction,
    ///     \overload
    ///     \since 5.3
    /// 
    ///     Returns information about the joining type attributes of the UCS-4-encoded
    ///     character specified by \a ucs4
    ///     (needed for certain languages such as Arabic or Syriac).
    [static] joining_type(ucs4: uint) -> Char::JoiningType,
    ///     \overload
    ///     \deprecated in 5.3, use joiningType() instead.
    /// 
    ///     Returns information about the joining properties of the UCS-4-encoded
    ///     character specified by \a ucs4 (needed for certain languages such as Arabic).
    [static] joining(ucs4: uint) -> Char::Joining,
    ///     \overload
    ///     Returns the combining class for the UCS-4-encoded character specified by
    ///     \a ucs4, as defined in the Unicode standard.
    [static] combining_class(ucs4: uint) -> unsigned,
    ///     \overload
    ///     Returns the mirrored character if the UCS-4-encoded character specified
    ///     by \a ucs4 is a mirrored character; otherwise returns the character itself.
    /// 
    ///     \sa hasMirrored()
    [static] mirrored_char(ucs4: uint) -> uint,
    ///     \overload
    ///     \since 5.0
    /// 
    ///     Returns \c true if the UCS-4-encoded character specified by \a ucs4
    ///     should be reversed if the text direction is reversed; otherwise returns \c false.
    /// 
    ///     A bit faster equivalent of (QChar::mirroredChar(ucs4) != ucs4).
    /// 
    ///     \sa mirroredChar()
    [static] has_mirrored(ucs4: uint) -> bool,
    ///     \overload
    ///     Decomposes the UCS-4-encoded character specified by \a ucs4 into it's
    ///     constituent parts. Returns an empty string if no decomposition exists.
    [static] decomposition(ucs4: uint) -> String,
    ///     \overload
    ///     Returns the tag defining the composition of the UCS-4-encoded character
    ///     specified by \a ucs4. Returns QChar::NoDecomposition if no decomposition exists.
    [static] decomposition_tag(ucs4: uint) -> Char::Decomposition,
    ///     \overload
    ///     Returns the numeric value of the digit specified by the UCS-4-encoded
    ///     character, \a ucs4, or -1 if the character is not a digit.
    [static] digit_value(ucs4: uint) -> i32,
    ///     \overload
    ///     Returns the lowercase equivalent of the UCS-4-encoded character specified
    ///     by \a ucs4 if the character is uppercase or titlecase; otherwise returns
    ///     the character itself.
    [static] to_lower(ucs4: uint) -> uint,
    ///     \overload
    ///     Returns the uppercase equivalent of the UCS-4-encoded character specified
    ///     by \a ucs4 if the character is lowercase or titlecase; otherwise returns
    ///     the character itself.
    [static] to_upper(ucs4: uint) -> uint,
    ///     \overload
    ///     Returns the title case equivalent of the UCS-4-encoded character specified
    ///     by \a ucs4 if the character is lowercase or uppercase; otherwise returns
    ///     the character itself.
    [static] to_title_case(ucs4: uint) -> uint,
    ///     \overload
    ///     Returns the case folded equivalent of the UCS-4-encoded character specified
    ///     by \a ucs4. For most Unicode characters this is the same as toLower().
    [static] to_case_folded(ucs4: uint) -> uint,
    ///     \overload
    ///     \since 5.1
    /// 
    ///     Returns the Unicode script property value for the character specified in
    ///     its UCS-4-encoded form as \a ucs4.
    [static] script(ucs4: uint) -> Char::Script,
    ///     \overload
    ///     Returns the Unicode version that introduced the character specified in
    ///     its UCS-4-encoded form as \a ucs4.
    [static] unicode_version(ucs4: uint) -> Char::UnicodeVersion,
    ///     Returns the most recent supported Unicode version.
    [static] current_unicode_version() -> Char::UnicodeVersion,
    ///     \overload
    ///     \since 5.0
    /// 
    ///     Returns \c true if the UCS-4-encoded character specified by \a ucs4 is
    ///     a printable character; otherwise returns \c false.
    ///     This is any character not of category Other_*.
    /// 
    ///     Note that this gives no indication of whether the character is
    ///     available in a particular font.
    [static] is_print(ucs4: uint) -> bool,
    [static] is_space(ucs4: uint) -> bool,
    ///     \overload
    ///     \since 5.0
    /// 
    ///     Returns \c true if the UCS-4-encoded character specified by \a ucs4 is
    ///     a mark (Mark_* categories); otherwise returns \c false.
    [static] is_mark(ucs4: uint) -> bool,
    ///     \overload
    ///     \since 5.0
    /// 
    ///     Returns \c true if the UCS-4-encoded character specified by \a ucs4 is
    ///     a punctuation mark (Punctuation_* categories); otherwise returns \c false.
    [static] is_punct(ucs4: uint) -> bool,
    ///     \overload
    ///     \since 5.0
    /// 
    ///     Returns \c true if the UCS-4-encoded character specified by \a ucs4 is
    ///     a symbol (Symbol_* categories); otherwise returns \c false.
    [static] is_symbol(ucs4: uint) -> bool,
    [static] is_letter(ucs4: uint) -> bool,
    [static] is_number(ucs4: uint) -> bool,
    [static] is_letter_or_number(ucs4: uint) -> bool,
    [static] is_digit(ucs4: uint) -> bool,
    [static] is_lower(ucs4: uint) -> bool,
    [static] is_upper(ucs4: uint) -> bool,
    [static] is_title_case(ucs4: uint) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
