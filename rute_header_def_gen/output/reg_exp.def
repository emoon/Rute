enum PatternSyntax {
    RegExp,
    Wildcard,
    FixedString,
    RegExp2,
    WildcardUnix,
    W3CXmlSchema11,
}

enum CaretMode {
    CaretAtZero,
    CaretAtOffset,
    CaretWontMatch,
}


struct RegExp {
    swap(other: &RegExpType),
    is_empty() -> bool,
    is_valid() -> bool,
    pattern() -> String,
    set_pattern(pattern: String),
    case_sensitivity() -> Rute::CaseSensitivity,
    set_case_sensitivity(cs: Rute::CaseSensitivity),
    pattern_syntax() -> RegExp::PatternSyntax,
    set_pattern_syntax(syntax: RegExp::PatternSyntax),
    is_minimal() -> bool,
    set_minimal(minimal: bool),
    exact_match(str: String) -> bool,
    index_in(str: String, offset: i32, caret_mode: RegExp::CaretMode) -> i32,
    last_index_in(str: String, offset: i32, caret_mode: RegExp::CaretMode) -> i32,
    matched_length() -> i32,
    capture_count() -> i32,
    captured_texts() -> StringListType,
    captured_texts() -> StringListType,
    cap(nth: i32) -> String,
    cap(nth: i32) -> String,
    pos(nth: i32) -> i32,
    pos(nth: i32) -> i32,
    [static] escape(str: String) -> String,
}

// vim: syntax=rust expandtab ts=4 sw=4
