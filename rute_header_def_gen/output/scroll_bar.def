///     \class QScrollBar
///     \brief The QScrollBar widget provides a vertical or horizontal scroll bar.
/// 
///     \ingroup basicwidgets
///     \inmodule QtWidgets
/// 
///     A scroll bar is a control that enables the user to access parts of a
///     document that is larger than the widget used to display it. It provides
///     a visual indication of the user's current position within the document
///     and the amount of the document that is visible. Scroll bars are usually
///     equipped with other controls that enable more accurate navigation.
///     Qt displays scroll bars in a way that is appropriate for each platform.
/// 
///     If you need to provide a scrolling view onto another widget, it may be
///     more convenient to use the QScrollArea class because this provides a
///     viewport widget and scroll bars. QScrollBar is useful if you need to
///     implement similar functionality for specialized widgets using QAbstractScrollArea;
///     for example, if you decide to subclass QAbstractItemView.
///     For most other situations where a slider control is used to obtain a value
///     within a given range, the QSlider class may be more appropriate for your
///     needs.
/// 
///     \table
///     \row \li \image qscrollbar-picture.png
///     \li Scroll bars typically include four separate controls: a slider,
///     scroll arrows, and a page control.
/// 
///     \list
///     \li a. The slider provides a way to quickly go to any part of the
///     document, but does not support accurate navigation within large
///     documents.
///     \li b. The scroll arrows are push buttons which can be used to accurately
///     navigate to a particular place in a document. For a vertical scroll bar
///     connected to a text editor, these typically move the current position one
///     "line" up or down, and adjust the position of the slider by a small
///     amount. In editors and list boxes a "line" might mean one line of text;
///     in an image viewer it might mean 20 pixels.
///     \li c. The page control is the area over which the slider is dragged (the
///     scroll bar's background). Clicking here moves the scroll bar towards
///     the click by one "page". This value is usually the same as the length of
///     the slider.
///     \endlist
///     \endtable
/// 
///     Each scroll bar has a value that indicates how far the slider is from
///     the start of the scroll bar; this is obtained with value() and set
///     with setValue(). This value always lies within the range of values
///     defined for the scroll bar, from \l{QAbstractSlider::minimum()}{minimum()}
///     to \l{QAbstractSlider::minimum()}{maximum()} inclusive. The range of
///     acceptable values can be set with setMinimum() and setMaximum().
///     At the minimum value, the top edge of the slider (for a vertical scroll
///     bar) or left edge (for a horizontal scroll bar) will be at the top (or
///     left) end of the scroll bar. At the maximum value, the bottom (or right)
///     edge of the slider will be at the bottom (or right) end of the scroll bar.
/// 
///     The length of the slider is usually related to the value of the page step,
///     and typically represents the proportion of the document area shown in a
///     scrolling view. The page step is the amount that the value changes by
///     when the user presses the \uicontrol{Page Up} and \uicontrol{Page Down} keys, and is
///     set with setPageStep(). Smaller changes to the value defined by the
///     line step are made using the cursor keys, and this quantity is set with
///     \l{QAbstractSlider::}{setSingleStep()}.
/// 
///     Note that the range of values used is independent of the actual size
///     of the scroll bar widget. You do not need to take this into account when
///     you choose values for the range and the page step.
/// 
///     The range of values specified for the scroll bar are often determined
///     differently to those for a QSlider because the length of the slider
///     needs to be taken into account. If we have a document with 100 lines,
///     and we can only show 20 lines in a widget, we may wish to construct a
///     scroll bar with a page step of 20, a minimum value of 0, and a maximum
///     value of 80. This would give us a scroll bar with five "pages".
/// 
///     \table
///     \row \li \inlineimage qscrollbar-values.png
///     \li The relationship between a document length, the range of values used
///     in a scroll bar, and the page step is simple in many common situations.
///     The scroll bar's range of values is determined by subtracting a
///     chosen page step from some value representing the length of the document.
///     In such cases, the following equation is useful:
///     \e{document length} = maximum() - minimum() + pageStep().
///     \endtable
/// 
///     QScrollBar only provides integer ranges. Note that although
///     QScrollBar handles very large numbers, scroll bars on current
///     screens cannot usefully represent ranges above about 100,000 pixels.
///     Beyond that, it becomes difficult for the user to control the
///     slider using either the keyboard or the mouse, and the scroll
///     arrows will have limited use.
/// 
///     ScrollBar inherits a comprehensive set of signals from QAbstractSlider:
///     \list
///     \li \l{QAbstractSlider::valueChanged()}{valueChanged()} is emitted when the
///        scroll bar's value has changed. The tracking() determines whether this
///        signal is emitted during user interaction.
///     \li \l{QAbstractSlider::rangeChanged()}{rangeChanged()} is emitted when the
///        scroll bar's range of values has changed.
///     \li \l{QAbstractSlider::sliderPressed()}{sliderPressed()} is emitted when
///        the user starts to drag the slider.
///     \li \l{QAbstractSlider::sliderMoved()}{sliderMoved()} is emitted when the user
///        drags the slider.
///     \li \l{QAbstractSlider::sliderReleased()}{sliderReleased()} is emitted when
///        the user releases the slider.
///     \li \l{QAbstractSlider::actionTriggered()}{actionTriggered()} is emitted
///        when the scroll bar is changed by user interaction or via the
///        \l{QAbstractSlider::triggerAction()}{triggerAction()} function.
///     \endlist
/// 
///     A scroll bar can be controlled by the keyboard, but it has a
///     default focusPolicy() of Qt::NoFocus. Use setFocusPolicy() to
///     enable keyboard interaction with the scroll bar:
///     \list
///          \li Left/Right move a horizontal scroll bar by one single step.
///          \li Up/Down move a vertical scroll bar by one single step.
///          \li PageUp moves up one page.
///          \li PageDown moves down one page.
///          \li Home moves to the start (mininum).
///          \li End moves to the end (maximum).
///      \endlist
/// 
///     The slider itself can be controlled by using the
///     \l{QAbstractSlider::triggerAction()}{triggerAction()} function to simulate
///     user interaction with the scroll bar controls. This is useful if you have
///     many different widgets that use a common range of values.
/// 
///     Most GUI styles use the pageStep() value to calculate the size of the
///     slider.
/// 
///     \sa QScrollArea, QSlider, QDial, QSpinBox, {fowler}{GUI Design Handbook: Scroll Bar}, {Sliders Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct ScrollBar : AbstractSlider {
    [event] size_hint() -> Size,
    ///     \reimp
    [event] event(event: *EventType) -> bool,
    ///     \reimp
    [event] wheel_event(arg0: *WheelEventType),
    ///     \reimp
    [event] paint_event(arg0: *PaintEventType),
    ///     \reimp
    [event] mouse_press_event(arg0: *MouseEventType),
    ///     \reimp
    [event] mouse_release_event(arg0: *MouseEventType),
    ///     \reimp
    [event] mouse_move_event(arg0: *MouseEventType),
    [event] hide_event(arg0: *HideEventType),
    [event] slider_change(change: AbstractSlider::SliderChange),
    [event] context_menu_event(arg0: *ContextMenuEventType),
    ///     Initialize \a option with the values from this QScrollBar. This method
    ///     is useful for subclasses when they need a QStyleOptionSlider, but don't want
    ///     to fill in all the information themselves.
    /// 
    ///     \sa QStyleOption::initFrom()
    init_style_option(option: *StyleOptionSliderType),
}

// vim: syntax=rust expandtab ts=4 sw=4
