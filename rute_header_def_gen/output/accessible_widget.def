/// 
/// This class is part of [Accessibility for QWidget Applications](Accessibility%20for%20QWidget%20Applications)
/// 
/// 
/// This class is convenient to use as a base class for custom
/// implementations of QAccessibleInterfaces that provide information
/// about widget objects.
/// 
/// The class provides functions to retrieve the parentObject() (the
/// widget's parent widget), and the associated widget(). Controlling
/// signals can be added with addControllingSignal(), and setters are
/// provided for various aspects of the interface implementation, for
/// example setValue(), setDescription(), setAccelerator(), and
/// setHelp().
/// 
/// **See also:** QAccessible
/// QAccessibleObject
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct AccessibleWidget : AccessibleObject, AccessibleActionInterface {
    /// 
    [event] is_valid() -> bool,
    /// 
    [event] window() -> Window?,
    /// 
    [event] child_count() -> i32,
    /// 
    [event] index_of_child(child: *AccessibleInterfaceType) -> i32,
    /// 
    [event] relations(match: Accessible::Relation) -> Vector<QPair<QAccessibleInterface *, QAccessible::Relation> >,
    /// 
    [event] focus_child() -> AccessibleInterface?,
    /// 
    [event] rect() -> Rect,
    /// 
    /// Returns the associated widget's parent object, which is either the
    /// parent widget, or qApp for top-level widgets.
    /// 
    [event] parent() -> AccessibleInterface?,
    /// 
    /// 
    [event] child(index: i32) -> AccessibleInterface?,
    /// 
    [event] text(t: Accessible::Text) -> String,
    /// 
    [event] role() -> Accessible::Role,
    /// 
    [event] state() -> Accessible::State,
    /// 
    [event] foreground_color() -> Color,
    /// 
    [event] background_color() -> Color,
    /// 
    [event] interface_cast(t: Accessible::InterfaceType),
    /// 
    [event] action_names() -> [String],
    /// 
    [event] do_action(action_name: String),
    /// 
    [event] key_bindings_for_action(action_name: String) -> [String],
    /// 
    /// Returns the associated widget.
    widget() -> Widget?,
    /// 
    /// Returns the associated widget's parent object, which is either the
    /// parent widget, or qApp for top-level widgets.
    parent_object() -> Object?,
}

// vim: syntax=rust expandtab ts=4 sw=4
