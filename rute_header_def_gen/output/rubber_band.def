/// 
/// A rubber band is often used to show a new bounding area (as in a
/// QSplitter or a QDockWidget that is undocking). Historically this has
/// been implemented using a QPainter and XOR, but this approach
/// doesn't always work properly since rendering can happen in the
/// window below the rubber band, but before the rubber band has been
/// 
/// 
/// You can create a QRubberBand whenever you need to render a rubber band
/// around a given area (or to represent a single line), then call
/// setGeometry(), move() or resize() to position and size it. A common
/// pattern is to do this in conjunction with mouse events. For example:
/// 
/// If you pass a parent to QRubberBand's constructor, the rubber band will
/// display only inside its parent, but stays on top of other child widgets.
/// If no parent is passed, QRubberBand will act as a top-level widget.
/// 
/// Call show() to make the rubber band visible; also when the
/// rubber band is not a top-level. Hiding or destroying
/// the widget will make the rubber band disappear. The rubber band
/// can be a [Rectangle](Rectangle)
/// or a [Line](Line)
/// (vertical or horizontal),
/// depending on the shape() it was given when constructed.
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct RubberBand : Widget {
    /// 
    /// Returns the shape of this rubber band. The shape can only be set
    /// upon construction.
    shape() -> RubberBand::Shape,
    /// 
    /// 
    /// **Overloads**
    /// Moves the rubberband to point *p.*
    /// 
    /// **See also:** [`resize()`]
    /// 
    /// Moves the rubberband to point ( *x,* *y).*
    /// 
    /// **See also:** [`resize()`]
    move(x: i32, y: i32),
    /// 
    /// 
    /// **Overloads**
    /// Moves the rubberband to point *p.*
    /// 
    /// **See also:** [`resize()`]
    /// 
    /// Moves the rubberband to point ( *x,* *y).*
    /// 
    /// **See also:** [`resize()`]
    [org_name(move)]
    move_2(p: &PointType),
    /// 
    /// 
    /// **Overloads**
    /// Resizes the rubberband so that its new size is *size.*
    /// 
    /// **See also:** [`move()`]
    /// 
    /// Resizes the rubberband so that its width is *width,* and its
    /// height is *height.*
    /// 
    /// **See also:** [`move()`]
    resize(w: i32, h: i32),
    /// 
    /// 
    /// **Overloads**
    /// Resizes the rubberband so that its new size is *size.*
    /// 
    /// **See also:** [`move()`]
    /// 
    /// Resizes the rubberband so that its width is *width,* and its
    /// height is *height.*
    /// 
    /// **See also:** [`move()`]
    [org_name(resize)]
    resize_2(s: &SizeType),
    /// 
    [event] event(e: *EventType) -> bool,
    /// 
    [event] paint_event(arg0: *PaintEventType),
    /// 
    [event] change_event(arg0: *EventType),
    /// 
    [event] show_event(arg0: *ShowEventType),
    /// 
    [event] resize_event(arg0: *ResizeEventType),
    /// 
    [event] move_event(arg0: *MoveEventType),
    /// 
    /// Initialize *option* with the values from this QRubberBand. This method
    /// is useful for subclasses when they need a QStyleOptionRubberBand, but don't want
    /// to fill in all the information themselves.
    /// 
    /// **See also:** [`StyleOption::init_from`]
    init_style_option(option: *StyleOptionRubberBandType),
}

[org_name(QRubberBand)]
enum Shape {
    /// A QRubberBand can represent a vertical or horizontal line. Geometry is still given in rect() and the line will fill the given geometry on most styles.
    Line = 0,
    /// A QRubberBand can represent a rectangle. Some styles will interpret this as a filled (often semi-transparent) rectangle, or a rectangular outline.
    Rectangle = 1,
}

// vim: syntax=rust expandtab ts=4 sw=4
