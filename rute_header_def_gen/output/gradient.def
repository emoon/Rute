/// 
/// Qt currently supports three types of gradient fills:
/// 
/// * *Linear* gradients interpolate colors between start and end points.
/// * *Simple* radial gradients interpolate colors between a focal point and end points on a circle surrounding it.
/// * *Extended* radial gradients interpolate colors between a center and a focal circle.
/// * *Conical* gradients interpolate colors around a center point.
/// 
/// A gradient's type can be retrieved using the type() function.
/// Each of the types is represented by a subclass of QGradient:
/// 
/// * QLinearGradient
/// * QRadialGradient
/// * QConicalGradient
/// 
/// * ![qgradient-linear.png](qgradient-linear.png)
/// 
/// * ![qgradient-radial.png](qgradient-radial.png)
/// 
/// * ![qgradient-conical.png](qgradient-conical.png)
/// 
/// The colors in a gradient are defined using stop points of the
/// QGradientStop type; i.e., a position and a color. Use the setColorAt()
/// function to define a single stop point. Alternatively, use the
/// setStops() function to define several stop points in one go. Note that
/// the latter function *replaces* the current set of stop points.
/// 
/// It is the gradient's complete set of stop points (accessible
/// through the stops() function) that describes how the gradient area
/// should be filled. If no stop points have been specified, a gradient
/// of black at 0 to white at 1 is used.
/// 
/// A diagonal linear gradient from black at (100, 100) to white at
/// (200, 200) could be specified like this:
/// 
/// A gradient can have an arbitrary number of stop points. The
/// following would create a radial gradient starting with
/// red in the center, blue and then green on the edges:
/// 
/// It is possible to repeat or reflect the gradient outside its area
/// by specifiying the [spread method](QGradient::Spread)
/// using the
/// setSpread() function. The default is to pad the outside area with
/// the color at the closest stop point. The currently set [spread method](QGradient::Spread)
/// can be retrieved using the
/// spread() function. The QGradient::Spread enum defines three
/// different methods:
/// 
/// * ![qradialgradient-pad.png](qradialgradient-pad.png)
/// 
/// * ![qradialgradient-repeat.png](qradialgradient-repeat.png)
/// 
/// * ![qradialgradient-reflect.png](qradialgradient-reflect.png)
/// 
/// * [PadSpread](QGradient::PadSpread)
/// 
/// * [RepeatSpread](QGradient::RepeatSpread)
/// 
/// * [ReflectSpread](QGradient::ReflectSpread)
/// 
/// Note that the setSpread() function only has effect for linear and
/// radial gradients. The reason is that the conical gradient is
/// closed by definition, i.e. the *conical* gradient fills the
/// entire circle from 0 - 360 degrees, while the boundary of a radial
/// or a linear gradient can be specified through its radius or final
/// stop points, respectively.
/// 
/// The gradient coordinates can be specified in logical coordinates,
/// relative to device coordinates, or relative to object bounding box coordinates.
/// The [coordinate mode](QGradient::CoordinateMode)
/// can be set using the
/// setCoordinateMode() function. The default is LogicalMode, where the
/// gradient coordinates are specified in the same way as the object
/// coordinates. To retrieve the currently set [coordinate mode](QGradient::CoordinateMode)
/// use coordinateMode().
/// 
/// **See also:** {painting/gradients}{The Gradients Example}
/// [`Brush`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Gradient {
    qt_check_for_qgadget_macro(),
    /// 
    /// Returns the type of gradient.
    type() -> Gradient::Type,
    /// 
    /// Specifies the spread *method* that should be used for this
    /// gradient.
    /// 
    /// Note that this function only has effect for linear and radial
    /// gradients.
    /// 
    /// **See also:** [`spread()`]
    set_spread(spread: Gradient::Spread),
    /// 
    /// Returns the spread method use by this gradient. The default is
    /// PadSpread.
    /// 
    /// **See also:** [`set_spread()`]
    spread() -> Gradient::Spread,
    /// 
    /// Creates a stop point at the given *position* with the given *color.* The given *position* must be in the range 0 to 1.
    /// 
    /// **See also:** [`set_stops()`]
    /// [`stops()`]
    set_color_at(pos: f32, color: &ColorType),
    /// 
    /// Replaces the current set of stop points with the given *stopPoints.* The positions of the points must be in the range 0 to
    /// 1, and must be sorted with the lowest point first.
    /// 
    /// **See also:** [`set_color_at()`]
    /// [`stops()`]
    set_stops(stops: &GradientStopsType),
    /// 
    /// Returns the stop points for this gradient.
    /// 
    /// If no stop points have been specified, a gradient of black at 0 to white
    /// at 1 is used.
    /// 
    /// **See also:** [`set_stops()`]
    /// [`set_color_at()`]
    stops() -> GradientStops,
    /// 
    /// Returns the coordinate mode of this gradient. The default mode is
    /// LogicalMode.
    coordinate_mode() -> Gradient::CoordinateMode,
    /// 
    /// Sets the coordinate mode of this gradient to *mode.* The default
    /// mode is LogicalMode.
    set_coordinate_mode(mode: Gradient::CoordinateMode),
    interpolation_mode() -> Gradient::InterpolationMode,
    set_interpolation_mode(mode: Gradient::InterpolationMode),
}

[org_name(QGradient)]
enum Type {
    /// Interpolates colors between start and end points (QLinearGradient).
    LinearGradient,
    /// Interpolate colors between a focal point and end points on a circle surrounding it (QRadialGradient).
    RadialGradient,
    /// Interpolate colors around a center point (QConicalGradient).
    ConicalGradient,
    /// No gradient is used.
    NoGradient,
}

[org_name(QGradient)]
enum Spread {
    /// The area is filled with the closest stop color. This is the default.
    PadSpread,
    /// The gradient is reflected outside the gradient area.
    ReflectSpread,
    /// The gradient is repeated outside the gradient area.
    RepeatSpread,
}

[org_name(QGradient)]
enum CoordinateMode {
    /// This is the default mode. The gradient coordinates are specified logical space just like the object coordinates.
    LogicalMode,
    /// In this mode the gradient coordinates are relative to the bounding rectangle of the paint device, with (0,0) in the top left corner, and (1,1) in the bottom right corner of the paint device.
    StretchToDeviceMode,
    /// In this mode the gradient coordinates are relative to the bounding rectangle of the object being drawn, with (0,0) in the top left corner, and (1,1) in the bottom right corner of the object's bounding rectangle.
    ObjectBoundingMode,
}

[org_name(QGradient)]
enum InterpolationMode {
    /// The colors are linearly interpolated in premultiplied color space.
    ColorInterpolation,
    /// The color components and the alpha component are independently linearly interpolated.
    ComponentInterpolation,
}

// vim: syntax=rust expandtab ts=4 sw=4
