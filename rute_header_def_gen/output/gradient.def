///     \class QGradient
///     \ingroup painting
///     \ingroup shared
///     \inmodule QtGui
/// 
///     \brief The QGradient class is used in combination with QBrush to
///     specify gradient fills.
/// 
///     Qt currently supports three types of gradient fills:
/// 
///     \list
///     \li \e Linear gradients interpolate colors between start and end points.
///     \li \e Simple radial gradients interpolate colors between a focal point
///         and end points on a circle surrounding it.
///     \li \e Extended radial gradients interpolate colors between a center and
///         a focal circle.
///     \li \e Conical gradients interpolate colors around a center point.
///     \endlist
/// 
///     A gradient's type can be retrieved using the type() function.
///     Each of the types is represented by a subclass of QGradient:
/// 
///     \table
///     \header
///     \li QLinearGradient
///     \li QRadialGradient
///     \li QConicalGradient
///     \row
///     \li \inlineimage qgradient-linear.png
///     \li \inlineimage qgradient-radial.png
///     \li \inlineimage qgradient-conical.png
///     \endtable
/// 
///     The colors in a gradient are defined using stop points of the
///     QGradientStop type; i.e., a position and a color. Use the setColorAt()
///     function to define a single stop point. Alternatively, use the
///     setStops() function to define several stop points in one go. Note that
///     the latter function \e replaces the current set of stop points.
/// 
///     It is the gradient's complete set of stop points (accessible
///     through the stops() function) that describes how the gradient area
///     should be filled. If no stop points have been specified, a gradient
///     of black at 0 to white at 1 is used.
/// 
///     A diagonal linear gradient from black at (100, 100) to white at
///     (200, 200) could be specified like this:
/// 
///     \snippet brush/brush.cpp 0
/// 
///     A gradient can have an arbitrary number of stop points. The
///     following would create a radial gradient starting with
///     red in the center, blue and then green on the edges:
/// 
///     \snippet brush/brush.cpp 1
/// 
///     It is possible to repeat or reflect the gradient outside its area
///     by specifiying the \l {QGradient::Spread}{spread method} using the
///     setSpread() function. The default is to pad the outside area with
///     the color at the closest stop point. The currently set \l
///     {QGradient::Spread}{spread method} can be retrieved using the
///     spread() function. The QGradient::Spread enum defines three
///     different methods:
/// 
///     \table
///     \row
///     \li \inlineimage qradialgradient-pad.png
///     \li \inlineimage qradialgradient-repeat.png
///     \li \inlineimage qradialgradient-reflect.png
///     \row
///     \li \l {QGradient::PadSpread}{PadSpread}
///     \li \l {QGradient::RepeatSpread}{RepeatSpread}
///     \li \l {QGradient::ReflectSpread}{ReflectSpread}
///     \endtable
/// 
///     Note that the setSpread() function only has effect for linear and
///     radial gradients. The reason is that the conical gradient is
///     closed by definition, i.e. the \e conical gradient fills the
///     entire circle from 0 - 360 degrees, while the boundary of a radial
///     or a linear gradient can be specified through its radius or final
///     stop points, respectively.
/// 
///     The gradient coordinates can be specified in logical coordinates,
///     relative to device coordinates, or relative to object bounding box coordinates.
///     The \l {QGradient::CoordinateMode}{coordinate mode} can be set using the
///     setCoordinateMode() function. The default is LogicalMode, where the
///     gradient coordinates are specified in the same way as the object
///     coordinates. To retrieve the currently set \l {QGradient::CoordinateMode}
///     {coordinate mode} use coordinateMode().
/// 
/// 
///     \sa {painting/gradients}{The Gradients Example}, QBrush
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QGradient)]
enum Type {
    LinearGradient,
    RadialGradient,
    ConicalGradient,
    NoGradient,
}

[org_name(QGradient)]
enum Spread {
    PadSpread,
    ReflectSpread,
    RepeatSpread,
}

[org_name(QGradient)]
enum CoordinateMode {
    LogicalMode,
    StretchToDeviceMode,
    ObjectBoundingMode,
}

[org_name(QGradient)]
enum InterpolationMode {
    ColorInterpolation,
    ComponentInterpolation,
}


struct Gradient {
    qt_check_for_qgadget_macro(),
    type() -> Gradient::Type,
    set_spread(spread: Gradient::Spread),
    spread() -> Gradient::Spread,
    ///     \fn void QGradient::setColorAt(qreal position, const QColor &color)
    /// 
    ///     Creates a stop point at the given \a position with the given \a
    ///     color. The given \a position must be in the range 0 to 1.
    /// 
    ///     \sa setStops(), stops()
    set_color_at(pos: f32, color: &ColorType),
    ///     \fn void QGradient::setStops(const QGradientStops &stopPoints)
    /// 
    ///     Replaces the current set of stop points with the given \a
    ///     stopPoints. The positions of the points must be in the range 0 to
    ///     1, and must be sorted with the lowest point first.
    /// 
    ///     \sa setColorAt(), stops()
    set_stops(stops: &GradientStopsType),
    ///     Returns the stop points for this gradient.
    /// 
    ///     If no stop points have been specified, a gradient of black at 0 to white
    ///     at 1 is used.
    /// 
    ///     \sa setStops(), setColorAt()
    stops() -> GradientStops,
    ///     \since 4.4
    /// 
    ///     Returns the coordinate mode of this gradient. The default mode is
    ///     LogicalMode.
    coordinate_mode() -> Gradient::CoordinateMode,
    ///     \since 4.4
    /// 
    ///     Sets the coordinate mode of this gradient to \a mode. The default
    ///     mode is LogicalMode.
    set_coordinate_mode(mode: Gradient::CoordinateMode),
    ///     \since 4.5
    ///     \internal
    /// 
    ///     Returns the interpolation mode of this gradient. The default mode is
    ///     ColorInterpolation.
    interpolation_mode() -> Gradient::InterpolationMode,
    ///     \since 4.5
    ///     \internal
    /// 
    ///     Sets the interpolation mode of this gradient to \a mode. The default
    ///     mode is ColorInterpolation.
    set_interpolation_mode(mode: Gradient::InterpolationMode),
}

// vim: syntax=rust expandtab ts=4 sw=4
