#[org_name(QTextFormat)]
enum FormatType {
    InvalidFormat,
    BlockFormat,
    CharFormat,
    ListFormat,
    TableFormat,
    FrameFormat,
    UserFormat,
}

#[org_name(QTextFormat)]
enum Property {
    ObjectIndex,
    CssFloat,
    LayoutDirection,
    OutlinePen,
    BackgroundBrush,
    ForegroundBrush,
    BackgroundImageUrl,
    BlockAlignment,
    BlockTopMargin,
    BlockBottomMargin,
    BlockLeftMargin,
    BlockRightMargin,
    TextIndent,
    TabPositions,
    BlockIndent,
    LineHeight,
    LineHeightType,
    BlockNonBreakableLines,
    BlockTrailingHorizontalRulerWidth,
    FirstFontProperty,
    FontCapitalization,
    FontLetterSpacingType,
    FontLetterSpacing,
    FontWordSpacing,
    FontStretch,
    FontStyleHint,
    FontStyleStrategy,
    FontKerning,
    FontHintingPreference,
    FontFamily,
    FontPointSize,
    FontSizeAdjustment,
    FontSizeIncrement,
    FontWeight,
    FontItalic,
    FontUnderline,
    FontOverline,
    FontStrikeOut,
    FontFixedPitch,
    FontPixelSize,
    LastFontProperty,
    TextUnderlineColor,
    TextVerticalAlignment,
    TextOutline,
    TextUnderlineStyle,
    TextToolTip,
    IsAnchor,
    AnchorHref,
    AnchorName,
    ObjectType,
    ListStyle,
    ListIndent,
    ListNumberPrefix,
    ListNumberSuffix,
    FrameBorder,
    FrameMargin,
    FramePadding,
    FrameWidth,
    FrameHeight,
    FrameTopMargin,
    FrameBottomMargin,
    FrameLeftMargin,
    FrameRightMargin,
    FrameBorderBrush,
    FrameBorderStyle,
    TableColumns,
    TableColumnWidthConstraints,
    TableCellSpacing,
    TableCellPadding,
    TableHeaderRowCount,
    TableCellRowSpan,
    TableCellColumnSpan,
    TableCellTopPadding,
    TableCellBottomPadding,
    TableCellLeftPadding,
    TableCellRightPadding,
    ImageName,
    ImageWidth,
    ImageHeight,
    FullWidthSelection,
    PageBreakPolicy,
    UserProperty,
}

#[org_name(QTextFormat)]
enum ObjectTypes {
    NoObject,
    ImageObject,
    TableObject,
    TableCellObject,
    UserObject,
}

#[org_name(QTextFormat)]
enum PageBreakFlag {
    PageBreak_Auto,
    PageBreak_AlwaysBefore,
    PageBreak_AlwaysAfter,
}


struct TextFormat {
    qt_check_for_qgadget_macro(),
    swap(other: &TextFormatType),
    merge(other: &TextFormatType),
    is_valid() -> bool,
    is_empty() -> bool,
    type() -> i32,
    object_index() -> i32,
    set_object_index(object: i32),
    property(property_id: i32) -> Variant,
    set_property(property_id: i32, value: &VariantType),
    clear_property(property_id: i32),
    has_property(property_id: i32) -> bool,
    bool_property(property_id: i32) -> bool,
    int_property(property_id: i32) -> i32,
    double_property(property_id: i32) -> f32,
    color_property(property_id: i32) -> Color,
    pen_property(property_id: i32) -> Pen,
    brush_property(property_id: i32) -> Brush,
    length_property(property_id: i32) -> TextLength,
    length_vector_property(property_id: i32) -> [TextLength],
    set_property(property_id: i32, lengths: [TextLengthType]),
    properties() -> Map<int,,
    property_count() -> i32,
    set_object_type(type: i32),
    object_type() -> i32,
    is_char_format() -> bool,
    is_block_format() -> bool,
    is_list_format() -> bool,
    is_frame_format() -> bool,
    is_image_format() -> bool,
    is_table_format() -> bool,
    is_table_cell_format() -> bool,
    to_block_format() -> TextBlockFormat,
    to_char_format() -> TextCharFormat,
    to_list_format() -> TextListFormat,
    to_table_format() -> TextTableFormat,
    to_frame_format() -> TextFrameFormat,
    to_image_format() -> TextImageFormat,
    to_table_cell_format() -> TextTableCellFormat,
    set_layout_direction(direction: Rute::LayoutDirection),
    layout_direction() -> Rute::LayoutDirection,
    set_background(brush: &BrushType),
    background() -> Brush,
    clear_background(),
    set_foreground(brush: &BrushType),
    foreground() -> Brush,
    clear_foreground(),
}

// vim: syntax=rust expandtab ts=4 sw=4
