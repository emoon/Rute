/// 
/// A QTextFormat is a generic class used for describing the format of
/// parts of a QTextDocument. The derived classes QTextCharFormat,
/// QTextBlockFormat, QTextListFormat, and QTextTableFormat are usually
/// more useful, and describe the formatting that is applied to
/// specific parts of the document.
/// 
/// A format has a `FormatType` which specifies the kinds of text item it
/// can format; e.g. a block of text, a list, a table, etc. A format
/// also has various properties (some specific to particular format
/// types), as described by the Property enum. Every property has a
/// corresponding Property.
/// 
/// The format type is given by type(), and the format can be tested
/// with isCharFormat(), isBlockFormat(), isListFormat(),
/// isTableFormat(), isFrameFormat(), and isImageFormat(). If the
/// type is determined, it can be retrieved with toCharFormat(),
/// toBlockFormat(), toListFormat(), toTableFormat(), toFrameFormat(),
/// and toImageFormat().
/// 
/// A format's properties can be set with the setProperty() functions,
/// and retrieved with boolProperty(), intProperty(), doubleProperty(),
/// and stringProperty() as appropriate. All the property IDs used in
/// the format can be retrieved with allPropertyIds(). One format can
/// be merged into another using merge().
/// 
/// A format's object index can be set with setObjectIndex(), and
/// retrieved with objectIndex(). These methods can be used to
/// associate the format with a QTextObject. It is used to represent
/// lists, frames, and tables inside the document.
/// 
/// **See also:** {Rich Text Processing}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TextFormat {
    qt_check_for_qgadget_macro(),
    /// 
    /// Swaps this text format with *other.* This function is very fast
    /// and never fails.
    swap(other: &TextFormatType),
    /// 
    /// Merges the *other* format with this format; where there are
    /// conflicts the *other* format takes precedence.
    merge(other: &TextFormatType),
    /// 
    /// Returns `true` if the format is valid (i.e. is not
    /// InvalidFormat); otherwise returns `false.`
    is_valid() -> bool,
    /// 
    /// Returns true if the format does not store any properties; false otherwise.
    /// 
    /// **See also:** [`property_count()`]
    /// [`properties()`]
    is_empty() -> bool,
    /// 
    /// Returns the type of this format.
    /// 
    /// **See also:** FormatType
    type() -> i32,
    /// 
    /// Returns the index of the format object, or -1 if the format object is invalid.
    /// 
    /// **See also:** [`set_object_index()`]
    object_index() -> i32,
    /// 
    /// Sets the format object's object *index.*
    /// 
    /// **See also:** [`object_index()`]
    set_object_index(object: i32),
    /// 
    /// Returns the property specified by the given *propertyId.*
    /// 
    /// **See also:** Property
    /// 
    /// Returns the number of properties stored in the format.
    property(property_id: i32) -> Variant,
    /// 
    /// Sets the property specified by the *propertyId* to the given *value.*
    /// 
    /// **See also:** Property
    /// 
    /// Sets the value of the property given by *propertyId* to *value.*
    /// 
    /// **See also:** [`length_vector_property()`]
    /// Property
    set_property(property_id: i32, value: &VariantType),
    /// 
    /// Clears the value of the property given by *propertyId*
    /// 
    /// **See also:** Property
    clear_property(property_id: i32),
    /// 
    /// Returns `true` if the text format has a property with the given *propertyId;* otherwise returns `false.`
    /// 
    /// **See also:** [`properties()`]
    /// Property
    has_property(property_id: i32) -> bool,
    /// 
    /// Returns the value of the property specified by *propertyId.* If the
    /// property isn't of QTextFormat::Bool type, false is returned instead.
    /// 
    /// **See also:** [`set_property()`]
    /// [`int_property()`]
    /// [`double_property()`]
    /// [`string_property()`]
    /// [`color_property()`]
    /// [`length_property()`]
    /// [`length_vector_property()`]
    /// Property
    bool_property(property_id: i32) -> bool,
    /// 
    /// Returns the value of the property specified by *propertyId.* If the
    /// property is not of QTextFormat::Integer type, 0 is returned instead.
    /// 
    /// **See also:** [`set_property()`]
    /// [`bool_property()`]
    /// [`double_property()`]
    /// [`string_property()`]
    /// [`color_property()`]
    /// [`length_property()`]
    /// [`length_vector_property()`]
    /// Property
    int_property(property_id: i32) -> i32,
    /// 
    /// Returns the value of the property specified by *propertyId.* If the
    /// property isn't of QVariant::Double or QMetaType::Float type, 0 is
    /// returned instead.
    /// 
    /// **See also:** [`set_property()`]
    /// [`bool_property()`]
    /// [`int_property()`]
    /// [`string_property()`]
    /// [`color_property()`]
    /// [`length_property()`]
    /// [`length_vector_property()`]
    /// Property
    double_property(property_id: i32) -> f32,
    /// 
    /// Returns the value of the property given by *propertyId;* if the
    /// property isn't of QVariant::Color type, an invalid color is
    /// returned instead.
    /// 
    /// **See also:** [`set_property()`]
    /// [`bool_property()`]
    /// [`int_property()`]
    /// [`double_property()`]
    /// [`string_property()`]
    /// [`length_property()`]
    /// [`length_vector_property()`]
    /// Property
    color_property(property_id: i32) -> Color,
    /// 
    /// Returns the value of the property given by *propertyId;* if the
    /// property isn't of QVariant::Pen type, Qt::NoPen is
    /// returned instead.
    /// 
    /// **See also:** [`set_property()`]
    /// [`bool_property()`]
    /// [`int_property()`]
    /// [`double_property()`]
    /// [`string_property()`]
    /// [`length_property()`]
    /// [`length_vector_property()`]
    /// Property
    pen_property(property_id: i32) -> Pen,
    /// 
    /// Returns the value of the property given by *propertyId;* if the
    /// property isn't of QVariant::Brush type, Qt::NoBrush is
    /// returned instead.
    /// 
    /// **See also:** [`set_property()`]
    /// [`bool_property()`]
    /// [`int_property()`]
    /// [`double_property()`]
    /// [`string_property()`]
    /// [`length_property()`]
    /// [`length_vector_property()`]
    /// Property
    brush_property(property_id: i32) -> Brush,
    /// 
    /// Returns the value of the property given by *propertyId.*
    /// 
    /// **See also:** [`set_property()`]
    /// [`bool_property()`]
    /// [`int_property()`]
    /// [`double_property()`]
    /// [`string_property()`]
    /// [`color_property()`]
    /// [`length_vector_property()`]
    /// Property
    length_property(property_id: i32) -> TextLength,
    /// 
    /// Returns the value of the property given by *propertyId.* If the
    /// property isn't of QTextFormat::LengthVector type, an empty length
    /// vector is returned instead.
    /// 
    /// **See also:** [`set_property()`]
    /// [`bool_property()`]
    /// [`int_property()`]
    /// [`double_property()`]
    /// [`string_property()`]
    /// [`color_property()`]
    /// [`length_property()`]
    /// Property
    length_vector_property(property_id: i32) -> [TextLength],
    /// 
    /// Sets the property specified by the *propertyId* to the given *value.*
    /// 
    /// **See also:** Property
    /// 
    /// Sets the value of the property given by *propertyId* to *value.*
    /// 
    /// **See also:** [`length_vector_property()`]
    /// Property
    [org_name(setProperty)]
    set_property_2(property_id: i32, lengths: [TextLengthType]),
    /// 
    /// Returns a map with all properties of this text format.
    properties() -> Map<int,,
    /// 
    /// Returns the number of properties stored in the format.
    property_count() -> i32,
    /// 
    /// Sets the text format's object type to *type.*
    /// 
    /// **See also:** ObjectTypes
    /// [`object_type()`]
    set_object_type(type: i32),
    /// 
    /// Returns the text format's object type.
    /// 
    /// **See also:** ObjectTypes
    /// [`set_object_type()`]
    object_type() -> i32,
    /// 
    /// Returns `true` if this text format is a `CharFormat;` otherwise
    /// returns `false.`
    is_char_format() -> bool,
    /// 
    /// Returns `true` if this text format is a `BlockFormat;` otherwise
    /// returns `false.`
    is_block_format() -> bool,
    /// 
    /// Returns `true` if this text format is a `ListFormat;` otherwise
    /// returns `false.`
    is_list_format() -> bool,
    /// 
    /// Returns `true` if this text format is a `FrameFormat;` otherwise
    /// returns `false.`
    is_frame_format() -> bool,
    /// 
    /// Returns `true` if this text format is an image format; otherwise
    /// returns `false.`
    is_image_format() -> bool,
    /// 
    /// Returns `true` if this text format is a `TableFormat;` otherwise
    /// returns `false.`
    is_table_format() -> bool,
    /// 
    /// Returns `true` if this text format is a `TableCellFormat;` otherwise
    /// returns `false.`
    is_table_cell_format() -> bool,
    /// 
    /// Returns this format as a block format.
    to_block_format() -> TextBlockFormat,
    /// 
    /// Returns this format as a character format.
    to_char_format() -> TextCharFormat,
    /// 
    /// Returns this format as a list format.
    to_list_format() -> TextListFormat,
    /// 
    /// Returns this format as a table format.
    to_table_format() -> TextTableFormat,
    /// 
    /// Returns this format as a frame format.
    to_frame_format() -> TextFrameFormat,
    /// 
    /// Returns this format as an image format.
    to_image_format() -> TextImageFormat,
    /// 
    /// Returns this format as a table cell format.
    to_table_cell_format() -> TextTableCellFormat,
    /// 
    /// Sets the document's layout direction to the specified *direction.*
    /// 
    /// **See also:** [`layout_direction()`]
    set_layout_direction(direction: Rute::LayoutDirection),
    /// 
    /// Returns the document's layout direction.
    /// 
    /// **See also:** [`set_layout_direction()`]
    layout_direction() -> Rute::LayoutDirection,
    /// 
    /// Sets the brush use to paint the document's background to the
    /// *brush* specified.
    /// 
    /// **See also:** [`background()`]
    /// [`clear_background()`]
    /// [`set_foreground()`]
    set_background(brush: &BrushType),
    /// 
    /// Returns the brush used to paint the document's background.
    /// 
    /// **See also:** [`set_background()`]
    /// [`clear_background()`]
    /// [`foreground()`]
    background() -> Brush,
    /// 
    /// Clears the brush used to paint the document's background. The default
    /// brush will be used.
    /// 
    /// **See also:** [`background()`]
    /// [`set_background()`]
    /// [`clear_foreground()`]
    clear_background(),
    /// 
    /// Sets the foreground brush to the specified *brush.* The foreground
    /// brush is mostly used to render text.
    /// 
    /// **See also:** [`foreground()`]
    /// [`clear_foreground()`]
    /// [`set_background()`]
    set_foreground(brush: &BrushType),
    /// 
    /// Returns the brush used to render foreground details, such as text,
    /// frame outlines, and table borders.
    /// 
    /// **See also:** [`set_foreground()`]
    /// [`clear_foreground()`]
    /// [`background()`]
    foreground() -> Brush,
    /// 
    /// Clears the brush used to paint the document's foreground. The default
    /// brush will be used.
    /// 
    /// **See also:** [`foreground()`]
    /// [`set_foreground()`]
    /// [`clear_background()`]
    clear_foreground(),
}

[org_name(QTextFormat)]
enum FormatType {
    /// An invalid format as created by the default constructor
    InvalidFormat = 4294967295,
    /// The object formats a text block
    BlockFormat = 1,
    /// The object formats a single character
    CharFormat = 2,
    /// The object formats a list
    ListFormat = 3,
    TableFormat = 4,
    /// The object formats a frame
    FrameFormat = 5,
    /// 
    UserFormat = 100,
}

[org_name(QTextFormat)]
enum Property {
    /// The index of the formatted object. See objectIndex(). Paragraph and character properties
    ObjectIndex = 0,
    /// How a frame is located relative to the surrounding text
    CssFloat = 2048,
    /// The layout direction of the text in the document (Qt::LayoutDirection).
    LayoutDirection = 2049,
    /// 
    OutlinePen = 2064,
    /// 
    BackgroundBrush = 2080,
    /// 
    ForegroundBrush = 2081,
    /// 
    BackgroundImageUrl = 2083,
    /// 
    BlockAlignment = 4112,
    /// 
    BlockTopMargin = 4144,
    /// 
    BlockBottomMargin = 4145,
    /// 
    BlockLeftMargin = 4146,
    /// 
    BlockRightMargin = 4147,
    /// 
    TextIndent = 4148,
    /// Specifies the tab positions. The tab positions are structs of QTextOption::Tab which are stored in a QList (internally, in a QList<QVariant>).
    TabPositions = 4149,
    /// 
    BlockIndent = 4160,
    /// 
    LineHeight = 4168,
    /// 
    LineHeightType = 4169,
    /// 
    BlockNonBreakableLines = 4176,
    /// The width of a horizontal ruler element. Character properties
    BlockTrailingHorizontalRulerWidth = 4192,
    FirstFontProperty = 8160,
    /// Specifies the capitalization type that is to be applied to the text.
    FontCapitalization = 8160,
    /// Specifies the meaning of the FontLetterSpacing property. The default is QFont::PercentageSpacing.
    FontLetterSpacingType = 8243,
    /// Changes the default spacing between individual letters in the font. The value is specified as a percentage or absolute value, depending on FontLetterSpacingType. The default value is 100%.
    FontLetterSpacing = 8161,
    /// Changes the default spacing between individual words. A positive value increases the word spacing by the corresponding pixels; a negative value decreases the spacing.
    FontWordSpacing = 8162,
    /// Corresponds to the QFont::Stretch property
    FontStretch = 8244,
    /// Corresponds to the QFont::StyleHint property
    FontStyleHint = 8163,
    /// Corresponds to the QFont::StyleStrategy property
    FontStyleStrategy = 8164,
    /// Specifies whether the font has kerning turned on.
    FontKerning = 8165,
    /// Controls the use of hinting according to values of the QFont::HintingPreference enum.
    FontHintingPreference = 8166,
    /// 
    FontFamily = 8192,
    /// 
    FontPointSize = 8193,
    /// Specifies the change in size given to the fontsize already set using FontPointSize or FontPixelSize.
    FontSizeAdjustment = 8194,
    FontSizeIncrement = 8194,
    /// 
    FontWeight = 8195,
    /// 
    FontItalic = 8196,
    /// *This property has been deprecated.* Use QTextFormat::TextUnderlineStyle instead.
    FontUnderline = 8197,
    /// 
    FontOverline = 8198,
    /// 
    FontStrikeOut = 8199,
    /// 
    FontFixedPitch = 8200,
    /// 
    FontPixelSize = 8201,
    LastFontProperty = 8201,
    /// 
    TextUnderlineColor = 8208,
    /// 
    TextVerticalAlignment = 8225,
    /// 
    TextOutline = 8226,
    /// 
    TextUnderlineStyle = 8227,
    /// Specifies the (optional) tool tip to be displayed for a fragment of text.
    TextToolTip = 8228,
    /// 
    IsAnchor = 8240,
    /// 
    AnchorHref = 8241,
    /// 
    AnchorName = 8242,
    /// 
    ObjectType = 12032,
    /// Specifies the style used for the items in a list, described by values of the QTextListFormat::Style enum.
    ListStyle = 12288,
    /// Specifies the amount of indentation used for a list.
    ListIndent = 12289,
    /// Defines the text which is prepended to item numbers in numeric lists.
    ListNumberPrefix = 12290,
    /// Defines the text which is appended to item numbers in numeric lists. Table and frame properties
    ListNumberSuffix = 12291,
    /// 
    FrameBorder = 16384,
    /// 
    FrameMargin = 16385,
    /// 
    FramePadding = 16386,
    /// 
    FrameWidth = 16387,
    /// 
    FrameHeight = 16388,
    /// 
    FrameTopMargin = 16389,
    /// 
    FrameBottomMargin = 16390,
    /// 
    FrameLeftMargin = 16391,
    /// 
    FrameRightMargin = 16392,
    /// 
    FrameBorderBrush = 16393,
    /// See the [BorderStyle](QTextFrameFormat::BorderStyle)
 enum.
    FrameBorderStyle = 16400,
    /// 
    TableColumns = 16640,
    /// 
    TableColumnWidthConstraints = 16641,
    /// 
    TableCellSpacing = 16642,
    /// 
    TableCellPadding = 16643,
    /// 
    TableHeaderRowCount = 16644,
    /// 
    TableCellRowSpan = 18448,
    /// 
    TableCellColumnSpan = 18449,
    /// 
    TableCellTopPadding = 18450,
    /// 
    TableCellBottomPadding = 18451,
    /// 
    TableCellLeftPadding = 18452,
    /// 
    TableCellRightPadding = 18453,
    /// 
    ImageName = 20480,
    /// 
    ImageWidth = 20496,
    /// 
    ImageHeight = 20497,
    /// When set on the characterFormat of a selection, the whole width of the text will be shown selected. Page break properties
    FullWidthSelection = 24576,
    /// Specifies how pages are broken. See the PageBreakFlag enum.
    PageBreakPolicy = 28672,
    /// 
    UserProperty = 1048576,
}

[org_name(QTextFormat)]
enum ObjectTypes {
    /// 
    NoObject = 0,
    /// 
    ImageObject = 1,
    /// 
    TableObject = 2,
    /// 
    TableCellObject = 3,
    /// The first object that can be used for application-specific purposes.
    UserObject = 4096,
}

[org_name(QTextFormat)]
enum PageBreakFlag {
    /// The page break is determined automatically depending on the available space on the current page
    PageBreak_Auto = 0,
    /// The page is always broken before the paragraph/table
    PageBreak_AlwaysBefore = 1,
    /// A new page is always started after the paragraph/table
    PageBreak_AlwaysAfter = 16,
}

// vim: syntax=rust expandtab ts=4 sw=4
