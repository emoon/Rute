
struct TextFormat {
    qt_check_for_qgadget_macro(),
    swap(&TextFormatType other),
    merge(&TextFormatType other),
    is_valid() -> bool,
    is_empty() -> bool,
    type() -> i32,
    object_index() -> i32,
    set_object_index(i32 object),
    property(i32 property_id) -> VariantType,
    set_property(i32 property_id, &VariantType value),
    clear_property(i32 property_id),
    has_property(i32 property_id) -> bool,
    bool_property(i32 property_id) -> bool,
    int_property(i32 property_id) -> i32,
    double_property(i32 property_id) -> f32,
    color_property(i32 property_id) -> ColorType,
    pen_property(i32 property_id) -> PenType,
    brush_property(i32 property_id) -> BrushType,
    length_property(i32 property_id) -> TextLengthType,
    length_vector_property(i32 property_id) -> <TextLengthType>,
    set_property(i32 property_id, <TextLengthType> lengths),
    properties() -> Map<int,Type,
    property_count() -> i32,
    set_object_type(i32 type),
    object_type() -> i32,
    is_char_format() -> bool,
    is_block_format() -> bool,
    is_list_format() -> bool,
    is_frame_format() -> bool,
    is_image_format() -> bool,
    is_table_format() -> bool,
    is_table_cell_format() -> bool,
    to_block_format() -> TextBlockFormatType,
    to_char_format() -> TextCharFormatType,
    to_list_format() -> TextListFormatType,
    to_table_format() -> TextTableFormatType,
    to_frame_format() -> TextFrameFormatType,
    to_image_format() -> TextImageFormatType,
    to_table_cell_format() -> TextTableCellFormatType,
    set_layout_direction(Rute::LayoutDirection direction),
    layout_direction() -> Rute::LayoutDirection,
    set_background(&BrushType brush),
    background() -> BrushType,
    clear_background(),
    set_foreground(&BrushType brush),
    foreground() -> BrushType,
    clear_foreground(),
}

// vim: syntax=rust expandtab ts=4 sw=4
