/// 
/// QMenu uses this to the menu above the surrounding
/// screen. QProgressBar has a look. QLabel has a flat look.
/// The frames of widgets like these can be changed.
/// 
/// The QFrame class can also be used directly for creating simple
/// placeholder frames without any contents.
/// 
/// The frame style is specified by a [frame shape](QFrame::Shape)
/// and
/// a [shadow style](QFrame::Shadow)
/// that is used to visually separate
/// the frame from surrounding widgets. These properties can be set
/// together using the setFrameStyle() function and read with frameStyle().
/// 
/// The frame shapes are [NoFrame,](NoFrame,)
/// [Box,](Box,)
/// [Panel,](Panel,)
/// [StyledPanel,](StyledPanel,)
/// 
/// HLine and [VLine;](VLine;)
/// the shadow styles are [Plain,](Plain,)
/// [Raised](Raised)
/// and
/// [Sunken.](Sunken.)
/// 
/// A frame widget has three attributes that describe the thickness of the
/// border: [lineWidth,](lineWidth,)
/// [midLineWidth,](midLineWidth,)
/// and [frameWidth.](frameWidth.)
/// 
/// * The line width is the width of the frame border. It can be modified to customize the frame's appearance.
/// * The mid-line width specifies the width of an extra line in the middle of the frame, which uses a third color to obtain a special 3D effect. Notice that a mid-line is only drawn for [Box,](Box,)
/// [HLine](HLine)
/// and [VLine](VLine)
/// frames that are raised or sunken.
/// * The frame width is determined by the frame style, and the frameWidth() function is used to obtain the value defined for the style used.
/// 
/// The margin between the frame and the contents of the frame can be
/// customized with the QWidget::setContentsMargins() function.
/// 
/// This table shows some of the combinations of styles and line widths:
/// 
/// ![Table of frame styles](frames.png)
/// 
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Frame : Widget {
    /// 
    /// Returns the frame style.
    /// 
    /// The default value is QFrame::Plain.
    /// 
    /// **See also:** [`set_frame_style()`]
    /// [`frame_shape()`]
    /// [`frame_shadow()`]
    frame_style() -> i32,
    /// 
    /// Sets the frame style to *style.*
    /// 
    /// The *style* is the bitwise OR between a frame shape and a frame
    /// shadow style. See the picture of the frames in the main class
    /// documentation.
    /// 
    /// The frame shapes are given in [QFrame::Shape](QFrame::Shape)
    /// and the shadow
    /// styles in [QFrame::Shadow](QFrame::Shadow)
    /// 
    /// 
    /// If a mid-line width greater than 0 is specified, an additional
    /// line is drawn for [Raised](Raised)
    /// or [Sunken](Sunken)
    /// [Box,](Box,)
    /// [HLine,](HLine,)
    /// and [VLine](VLine)
    /// frames. The mid-color of the current color group is used for
    /// drawing middle lines.
    /// 
    /// **See also:** [`frame_style()`]
    set_frame_style(arg0: i32),
    /// 
    /// Note that the frame width depends on the [frame style](QFrame::setFrameStyle())
    /// 
    /// not only the line width and the mid-line width. For example, the style specified
    /// by [NoFrame](NoFrame)
    /// always has a frame width of 0, whereas the style [Panel](Panel)
    /// has a
    /// frame width equivalent to the line width.
    /// 
    /// **See also:** [`line_width()`]
    /// [`mid_line_width()`]
    /// [`frame_style()`]
    frame_width() -> i32,
    /// 
    [event] size_hint() -> Size,
    /// 
    /// **See also:** [`frame_style()`]
    /// [`frame_shadow()`]
    frame_shape() -> Frame::Shape,
    set_frame_shape(arg0: Frame::Shape),
    /// 
    /// **See also:** [`frame_style()`]
    /// [`frame_shape()`]
    frame_shadow() -> Frame::Shadow,
    set_frame_shadow(arg0: Frame::Shadow),
    /// 
    /// Note that the *total* line width for frames used as separators
    /// ( [HLine](HLine)
    /// and [VLine)](VLine))
    /// is specified by [frameWidth.](frameWidth.)
    /// 
    /// The default value is 1.
    /// 
    /// **See also:** midLineWidth
    /// frameWidth
    line_width() -> i32,
    set_line_width(arg0: i32),
    /// 
    /// The default value is 0.
    /// 
    /// **See also:** lineWidth
    /// frameWidth
    mid_line_width() -> i32,
    set_mid_line_width(arg0: i32),
    /// 
    /// The frame's rectangle is the rectangle the frame is drawn in. By
    /// default, this is the entire widget. Setting the rectangle does
    /// does *not* cause a widget update. The frame rectangle is
    /// automatically adjusted when the widget changes size.
    /// 
    /// If you set the rectangle to a null rectangle (for example,
    /// QRect(0, 0, 0, 0)), then the resulting frame rectangle is
    /// equivalent to the [widget rectangle](QWidget::rect())
    /// 
    frame_rect() -> Rect,
    set_frame_rect(arg0: &RectType),
    /// 
    [event] event(e: *EventType) -> bool,
    /// 
    [event] paint_event(arg0: *PaintEventType),
    /// 
    [event] change_event(arg0: *EventType),
    draw_frame(arg0: *PainterType),
    /// 
    /// Initializes *option* with the values from this QFrame. This method is
    /// useful for subclasses when they need a QStyleOptionFrame but don't want to
    /// fill in all the information themselves.
    /// 
    /// **See also:** [`StyleOption::init_from`]
    init_style_option(option: *StyleOptionFrameType),
}

[org_name(QFrame)]
enum Shape {
    /// QFrame draws nothing
    NoFrame,
    /// QFrame draws a box around its contents
    Box,
    /// QFrame draws a panel to make the contents appear
    Panel,
    /// draws a rectangular panel that can be raised or
    WinPanel,
    /// QFrame draws a horizontal line that frames nothing
    HLine,
    /// QFrame draws a vertical line that frames nothing
    VLine,
    /// draws a rectangular panel with a look that
    StyledPanel,
}

[org_name(QFrame)]
enum Shadow {
    /// the frame and contents appear level with the
    Plain,
    /// the frame and contents appear raised; draws a 3D
    Raised,
    /// the frame and contents appear sunken; draws a 3D
    Sunken,
}

[org_name(QFrame)]
enum StyleMask {
    /// The
    Shadow_Mask,
    /// The
    Shape_Mask,
}

// vim: syntax=rust expandtab ts=4 sw=4
