/// 
/// A blur effect blurs the source. This effect is useful for reducing details,
/// such as when the source loses focus and you want to draw attention to other
/// elements. The level of detail can be modified using the setBlurRadius()
/// function. Use setBlurHints() to choose the blur hints.
/// 
/// By default, the blur radius is 5 pixels. The blur radius is specified in
/// device coordinates.
/// 
/// ![graphicseffect-blur.png](graphicseffect-blur.png)
/// 
/// **See also:** [`GraphicsDropShadowEffect`]
/// [`GraphicsColorizeEffect`]
/// [`GraphicsOpacityEffect`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GraphicsBlurEffect : GraphicsEffect {
    /// 
    [event] bounding_rect_for(rect: &RectFType) -> RectF,
    /// 
    /// Using a smaller radius results in a sharper appearance, whereas a bigger
    /// radius results in a more blurred appearance.
    /// 
    /// By default, the blur radius is 5 pixels.
    /// 
    /// The radius is given in device coordinates, meaning it is
    /// unaffected by scale.
    /// 
    /// This signal is emitted whenever the effect's blur radius changes.
    /// The *radius* parameter holds the effect's new blur radius.
    blur_radius() -> f32,
    /// 
    /// Use the PerformanceHint hint to say that you want a faster blur,
    /// the QualityHint hint to say that you prefer a higher quality blur,
    /// or the AnimationHint when you want to animate the blur radius.
    /// 
    /// By default, the blur hint is PerformanceHint.
    /// 
    /// This signal is emitted whenever the effect's blur hints changes.
    /// The *hints* parameter holds the effect's new blur hints.
    blur_hints() -> GraphicsBlurEffect::BlurHints,
    set_blur_radius(blur_radius: f32),
    set_blur_hints(hints: GraphicsBlurEffect::BlurHints),
    /// 
    /// This signal is emitted whenever the effect's blur radius changes.
    /// The *radius* parameter holds the effect's new blur radius.
    [signal] blur_radius_changed(blur_radius: f32),
    /// 
    /// This signal is emitted whenever the effect's blur hints changes.
    /// The *hints* parameter holds the effect's new blur hints.
    [signal] blur_hints_changed(hints: GraphicsBlurEffect::BlurHints),
    /// 
    [event] draw(painter: *PainterType),
}

[org_name(QGraphicsBlurEffect)]
enum BlurHint {
    /// Indicates that rendering performance is the most important factor,
    PerformanceHint,
    /// Indicates that rendering quality is the most important factor,
    QualityHint,
    /// Indicates that the blur radius is going to be animated, hinting
    AnimationHint,
}

// vim: syntax=rust expandtab ts=4 sw=4
