/// 
/// Normally, you don't need to use this class directly. Qt's
/// built-in layout managers provide the following functions for
/// manipulating widgets in layouts:
/// 
/// * Class
/// * Functions
/// * QBoxLayout
/// * [addWidget()](QBoxLayout::addWidget())
/// , [insertWidget()](QBoxLayout::insertWidget())
/// , [setStretchFactor()](QBoxLayout::setStretchFactor())
/// 
/// * QGridLayout
/// * [addWidget()](QGridLayout::addWidget())
/// 
/// * QStackedLayout
/// * [addWidget()](QStackedLayout::addWidget())
/// , [insertWidget()](QStackedLayout::insertWidget())
/// , [currentWidget()](QStackedLayout::currentWidget())
/// , [setCurrentWidget()](QStackedLayout::setCurrentWidget())
/// , [widget()](QStackedLayout::widget())
/// 
/// **See also:** QLayout
/// QSpacerItem
/// QLayoutItem::widget()
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct WidgetItem : LayoutItem {
    /// 
    [event] size_hint() -> Size,
    /// 
    [event] minimum_size() -> Size,
    /// 
    [event] maximum_size() -> Size,
    /// 
    [event] expanding_directions() -> Rute::Orientations,
    /// 
    /// Returns `true` if the widget is hidden; otherwise returns `false.`
    /// 
    /// **See also:** QWidget::isHidden()
    [event] is_empty() -> bool,
    /// 
    /// Returns the widget managed by this item.
    [event] widget() -> Widget?,
    /// 
    [event] has_height_for_width() -> bool,
    /// 
    [event] height_for_width(arg0: i32) -> i32,
}

// vim: syntax=rust expandtab ts=4 sw=4
