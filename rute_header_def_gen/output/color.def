
struct Color {
    is_valid() -> bool,
    name() -> String,
    name(format: Color::NameFormat) -> String,
    set_named_color(name: String),
    set_named_color(name: StringViewType),
    set_named_color(name: Latin1StringType),
    [static] color_names() -> StringListType,
    spec() -> Color::Spec,
    alpha() -> i32,
    set_alpha(alpha: i32),
    alpha_f() -> f32,
    set_alpha_f(alpha: f32),
    red() -> i32,
    green() -> i32,
    blue() -> i32,
    set_red(red: i32),
    set_green(green: i32),
    set_blue(blue: i32),
    red_f() -> f32,
    green_f() -> f32,
    blue_f() -> f32,
    set_red_f(red: f32),
    set_green_f(green: f32),
    set_blue_f(blue: f32),
    get_rgb(r: &i32, g: &i32, b: &i32, a: &i32),
    set_rgb(r: i32, g: i32, b: i32, a: i32),
    get_rgb_f(r: &f32, g: &f32, b: &f32, a: &f32),
    set_rgb_f(r: f32, g: f32, b: f32, a: f32),
    rgba64() -> Rgba64Type,
    set_rgba64(rgba: Rgba64Type),
    rgba() -> RgbType,
    set_rgba(rgba: RgbType),
    rgb() -> RgbType,
    set_rgb(rgb: RgbType),
    hue() -> i32,
    saturation() -> i32,
    hsv_hue() -> i32,
    hsv_saturation() -> i32,
    value() -> i32,
    hue_f() -> f32,
    saturation_f() -> f32,
    hsv_hue_f() -> f32,
    hsv_saturation_f() -> f32,
    value_f() -> f32,
    get_hsv(h: &i32, s: &i32, v: &i32, a: &i32),
    set_hsv(h: i32, s: i32, v: i32, a: i32),
    get_hsv_f(h: &f32, s: &f32, v: &f32, a: &f32),
    set_hsv_f(h: f32, s: f32, v: f32, a: f32),
    cyan() -> i32,
    magenta() -> i32,
    yellow() -> i32,
    black() -> i32,
    cyan_f() -> f32,
    magenta_f() -> f32,
    yellow_f() -> f32,
    black_f() -> f32,
    get_cmyk(c: &i32, m: &i32, y: &i32, k: &i32, a: &i32),
    set_cmyk(c: i32, m: i32, y: i32, k: i32, a: i32),
    get_cmyk_f(c: &f32, m: &f32, y: &f32, k: &f32, a: &f32),
    set_cmyk_f(c: f32, m: f32, y: f32, k: f32, a: f32),
    hsl_hue() -> i32,
    hsl_saturation() -> i32,
    lightness() -> i32,
    hsl_hue_f() -> f32,
    hsl_saturation_f() -> f32,
    lightness_f() -> f32,
    get_hsl(h: &i32, s: &i32, l: &i32, a: &i32),
    set_hsl(h: i32, s: i32, l: i32, a: i32),
    get_hsl_f(h: &f32, s: &f32, l: &f32, a: &f32),
    set_hsl_f(h: f32, s: f32, l: f32, a: f32),
    to_rgb() -> ColorType,
    to_hsv() -> ColorType,
    to_cmyk() -> ColorType,
    to_hsl() -> ColorType,
    convert_to(color_spec: Color::Spec) -> ColorType,
    [static] from_rgb(rgb: RgbType) -> ColorType,
    [static] from_rgba(rgba: RgbType) -> ColorType,
    [static] from_rgb(r: i32, g: i32, b: i32, a: i32) -> ColorType,
    [static] from_rgb_f(r: f32, g: f32, b: f32, a: f32) -> ColorType,
    [static] from_rgba64(r: ushort, g: ushort, b: ushort, a: ushort) -> ColorType,
    [static] from_rgba64(rgba: Rgba64Type) -> ColorType,
    [static] from_hsv(h: i32, s: i32, v: i32, a: i32) -> ColorType,
    [static] from_hsv_f(h: f32, s: f32, v: f32, a: f32) -> ColorType,
    [static] from_cmyk(c: i32, m: i32, y: i32, k: i32, a: i32) -> ColorType,
    [static] from_cmyk_f(c: f32, m: f32, y: f32, k: f32, a: f32) -> ColorType,
    [static] from_hsl(h: i32, s: i32, l: i32, a: i32) -> ColorType,
    [static] from_hsl_f(h: f32, s: f32, l: f32, a: f32) -> ColorType,
    light(f: i32) -> ColorType,
    lighter(f: i32) -> ColorType,
    dark(f: i32) -> ColorType,
    darker(f: i32) -> ColorType,
    [static] is_valid_color(name: String) -> bool,
    [static] is_valid_color(arg0: StringViewType) -> bool,
    [static] is_valid_color(arg0: Latin1StringType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
