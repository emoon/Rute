
struct Color {
    is_valid() -> bool,
    name() -> String,
    name(Color::NameFormat format) -> String,
    set_named_color(String name),
    set_named_color(StringViewType name),
    set_named_color(Latin1StringType name),
    color_names() -> StringListType,
    spec() -> Color::Spec,
    alpha() -> i32,
    set_alpha(i32 alpha),
    alpha_f() -> f32,
    set_alpha_f(f32 alpha),
    red() -> i32,
    green() -> i32,
    blue() -> i32,
    set_red(i32 red),
    set_green(i32 green),
    set_blue(i32 blue),
    red_f() -> f32,
    green_f() -> f32,
    blue_f() -> f32,
    set_red_f(f32 red),
    set_green_f(f32 green),
    set_blue_f(f32 blue),
    get_rgb(&i32 r, &i32 g, &i32 b, &i32 a),
    set_rgb(i32 r, i32 g, i32 b, i32 a),
    get_rgb_f(&f32 r, &f32 g, &f32 b, &f32 a),
    set_rgb_f(f32 r, f32 g, f32 b, f32 a),
    rgba64() -> Rgba64Type,
    set_rgba64(Rgba64Type rgba),
    rgba() -> RgbType,
    set_rgba(RgbType rgba),
    rgb() -> RgbType,
    set_rgb(RgbType rgb),
    hue() -> i32,
    saturation() -> i32,
    hsv_hue() -> i32,
    hsv_saturation() -> i32,
    value() -> i32,
    hue_f() -> f32,
    saturation_f() -> f32,
    hsv_hue_f() -> f32,
    hsv_saturation_f() -> f32,
    value_f() -> f32,
    get_hsv(&i32 h, &i32 s, &i32 v, &i32 a),
    set_hsv(i32 h, i32 s, i32 v, i32 a),
    get_hsv_f(&f32 h, &f32 s, &f32 v, &f32 a),
    set_hsv_f(f32 h, f32 s, f32 v, f32 a),
    cyan() -> i32,
    magenta() -> i32,
    yellow() -> i32,
    black() -> i32,
    cyan_f() -> f32,
    magenta_f() -> f32,
    yellow_f() -> f32,
    black_f() -> f32,
    get_cmyk(&i32 c, &i32 m, &i32 y, &i32 k, &i32 a),
    set_cmyk(i32 c, i32 m, i32 y, i32 k, i32 a),
    get_cmyk_f(&f32 c, &f32 m, &f32 y, &f32 k, &f32 a),
    set_cmyk_f(f32 c, f32 m, f32 y, f32 k, f32 a),
    hsl_hue() -> i32,
    hsl_saturation() -> i32,
    lightness() -> i32,
    hsl_hue_f() -> f32,
    hsl_saturation_f() -> f32,
    lightness_f() -> f32,
    get_hsl(&i32 h, &i32 s, &i32 l, &i32 a),
    set_hsl(i32 h, i32 s, i32 l, i32 a),
    get_hsl_f(&f32 h, &f32 s, &f32 l, &f32 a),
    set_hsl_f(f32 h, f32 s, f32 l, f32 a),
    to_rgb() -> ColorType,
    to_hsv() -> ColorType,
    to_cmyk() -> ColorType,
    to_hsl() -> ColorType,
    convert_to(Color::Spec color_spec) -> ColorType,
    from_rgb(RgbType rgb) -> ColorType,
    from_rgba(RgbType rgba) -> ColorType,
    from_rgb(i32 r, i32 g, i32 b, i32 a) -> ColorType,
    from_rgb_f(f32 r, f32 g, f32 b, f32 a) -> ColorType,
    from_rgba64(ushort r, ushort g, ushort b, ushort a) -> ColorType,
    from_rgba64(Rgba64Type rgba) -> ColorType,
    from_hsv(i32 h, i32 s, i32 v, i32 a) -> ColorType,
    from_hsv_f(f32 h, f32 s, f32 v, f32 a) -> ColorType,
    from_cmyk(i32 c, i32 m, i32 y, i32 k, i32 a) -> ColorType,
    from_cmyk_f(f32 c, f32 m, f32 y, f32 k, f32 a) -> ColorType,
    from_hsl(i32 h, i32 s, i32 l, i32 a) -> ColorType,
    from_hsl_f(f32 h, f32 s, f32 l, f32 a) -> ColorType,
    light(i32 f) -> ColorType,
    lighter(i32 f) -> ColorType,
    dark(i32 f) -> ColorType,
    darker(i32 f) -> ColorType,
    is_valid_color(String name) -> bool,
    is_valid_color(StringViewType arg0) -> bool,
    is_valid_color(Latin1StringType arg0) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
