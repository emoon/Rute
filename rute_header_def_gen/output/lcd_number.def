/// 
/// ![windows-lcdnumber.png](windows-lcdnumber.png)
/// 
/// It can display a number in just about any size. It can display
/// decimal, hexadecimal, octal or binary numbers. It is easy to
/// connect to data sources using the display() slot, which is
/// overloaded to take any of five argument types.
/// 
/// There are also slots to change the base with setMode() and the
/// decimal point with setSmallDecimalPoint().
/// 
/// QLCDNumber emits the overflow() signal when it is asked to display
/// something beyond its range. The range is set by setDigitCount(),
/// but setSmallDecimalPoint() also influences it. If the display is
/// set to hexadecimal, octal or binary, the integer equivalent of the
/// value is displayed.
/// 
/// These digits and other symbols can be shown: 0/O, 1, 2, 3, 4, 5/S,
/// 6, 7, 8, 9/g, minus, decimal point, A, B, C, D, E, F, h, H, L, o,
/// P, r, u, U, Y, colon, degree sign (which is specified as single
/// quote in the string) and space. QLCDNumber substitutes spaces for
/// illegal characters.
/// 
/// It is not possible to retrieve the contents of a QLCDNumber
/// object, although you can retrieve the numeric value with value().
/// If you really need the text, we recommend that you connect the
/// signals that feed the display() slot to another slot as well and
/// store the value there.
/// 
/// Incidentally, QLCDNumber is the very oldest part of Qt, tracing
/// its roots back to a BASIC program on the [Sinclair Spectrum](Sinclair%20Spectrum)
/// 
/// 
/// **See also:** [`Label`]
/// [`Frame`]
/// {Digital Clock Example}
/// {Tetrix Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct LCDNumber : Frame {
    /// 
    /// If true the decimal point is drawn between two digit positions.
    /// Otherwise it occupies a digit position of its own, i.e. is drawn
    /// in a digit position. The default is false.
    /// 
    /// The inter-digit space is made slightly wider when the decimal
    /// point is drawn between the digits.
    /// 
    /// **See also:** mode
    small_decimal_point() -> bool,
    /// 
    /// Corresponds to the current number of digits. If [QLCDNumber::smallDecimalPoint](QLCDNumber::smallDecimalPoint)
    /// is false, the decimal point occupies
    /// one digit position.
    /// 
    /// By default, this property contains a value of 5.
    /// 
    /// **See also:** smallDecimalPoint
    /// 
    /// Returns the current number of digits.
    digit_count() -> i32,
    /// 
    /// Sets the current number of digits to *numDigits.* Must
    /// be in the range 0..99.
    set_digit_count(n_digits: i32),
    /// 
    /// **Overloads**
    /// Returns `true` if *num* is too big to be displayed in its entirety;
    /// otherwise returns `false.`
    /// 
    /// **See also:** [`display()`]
    /// [`digit_count()`]
    /// [`small_decimal_point()`]
    /// 
    /// Returns `true` if *num* is too big to be displayed in its entirety;
    /// otherwise returns `false.`
    /// 
    /// **See also:** [`display()`]
    /// [`digit_count()`]
    /// [`small_decimal_point()`]
    check_overflow(num: double) -> bool,
    /// 
    /// **Overloads**
    /// Returns `true` if *num* is too big to be displayed in its entirety;
    /// otherwise returns `false.`
    /// 
    /// **See also:** [`display()`]
    /// [`digit_count()`]
    /// [`small_decimal_point()`]
    /// 
    /// Returns `true` if *num* is too big to be displayed in its entirety;
    /// otherwise returns `false.`
    /// 
    /// **See also:** [`display()`]
    /// [`digit_count()`]
    /// [`small_decimal_point()`]
    [org_name(checkOverflow)]
    check_overflow_2(num: i32) -> bool,
    /// 
    /// Corresponds to the current display mode, which is one of `Bin,`
    /// `Oct,` `Dec` (the default) and `Hex.` `Dec` mode can display
    /// floating point values, the other modes display the integer
    /// equivalent.
    /// 
    /// **See also:** [`small_decimal_point()`]
    /// [`set_hex_mode()`]
    /// [`set_dec_mode()`]
    /// [`set_oct_mode()`]
    /// [`set_bin_mode()`]
    mode() -> LCDNumber::Mode,
    set_mode(arg0: LCDNumber::Mode),
    /// 
    /// * Style
    /// * Result
    /// * `Outline`
    /// * Produces raised segments filled with the background color
    /// * `Filled` (this is the default).
    /// * Produces raised segments filled with the foreground color.
    /// * `Flat`
    /// * Produces flat segments filled with the foreground color.
    /// 
    /// `Outline` and `Filled` will additionally use
    /// QPalette::light() and QPalette::dark() for shadow effects.
    segment_style() -> LCDNumber::SegmentStyle,
    set_segment_style(arg0: LCDNumber::SegmentStyle),
    /// 
    /// This property corresponds to the current value displayed by the
    /// LCDNumber.
    /// 
    /// If the displayed value is not a number, the property has a value
    /// of 0.
    /// 
    /// By default, this property contains a value of 0.
    value() -> double,
    /// 
    /// This property corresponds to the nearest integer to the current
    /// value displayed by the LCDNumber. This is the value used for
    /// hexadecimal, octal and binary modes.
    /// 
    /// If the displayed value is not a number, the property has a value
    /// of 0.
    /// 
    /// By default, this property contains a value of 0.
    int_value() -> i32,
    /// 
    [event] size_hint() -> Size,
    /// 
    /// **Overloads**
    /// Displays the number *num.*
    /// 
    /// **Overloads**
    /// Displays the number *num.*
    /// 
    /// Displays the number represented by the string *s.*
    /// 
    /// This version of the function disregards mode() and
    /// smallDecimalPoint().
    /// 
    /// These digits and other symbols can be shown: 0/O, 1, 2, 3, 4, 5/S,
    /// 6, 7, 8, 9/g, minus, decimal point, A, B, C, D, E, F, h, H, L, o,
    /// P, r, u, U, Y, colon, degree sign (which is specified as single
    /// quote in the string) and space. QLCDNumber substitutes spaces for
    /// illegal characters.
    display(str: String),
    /// 
    /// **Overloads**
    /// Displays the number *num.*
    /// 
    /// **Overloads**
    /// Displays the number *num.*
    /// 
    /// Displays the number represented by the string *s.*
    /// 
    /// This version of the function disregards mode() and
    /// smallDecimalPoint().
    /// 
    /// These digits and other symbols can be shown: 0/O, 1, 2, 3, 4, 5/S,
    /// 6, 7, 8, 9/g, minus, decimal point, A, B, C, D, E, F, h, H, L, o,
    /// P, r, u, U, Y, colon, degree sign (which is specified as single
    /// quote in the string) and space. QLCDNumber substitutes spaces for
    /// illegal characters.
    [org_name(display)]
    display_2(num: i32),
    /// 
    /// **Overloads**
    /// Displays the number *num.*
    /// 
    /// **Overloads**
    /// Displays the number *num.*
    /// 
    /// Displays the number represented by the string *s.*
    /// 
    /// This version of the function disregards mode() and
    /// smallDecimalPoint().
    /// 
    /// These digits and other symbols can be shown: 0/O, 1, 2, 3, 4, 5/S,
    /// 6, 7, 8, 9/g, minus, decimal point, A, B, C, D, E, F, h, H, L, o,
    /// P, r, u, U, Y, colon, degree sign (which is specified as single
    /// quote in the string) and space. QLCDNumber substitutes spaces for
    /// illegal characters.
    [org_name(display)]
    display_3(num: double),
    /// 
    /// Calls setMode(Hex). Provided for convenience (e.g. for
    /// connecting buttons to it).
    /// 
    /// **See also:** [`set_mode()`]
    /// [`set_dec_mode()`]
    /// [`set_oct_mode()`]
    /// [`set_bin_mode()`]
    /// [`mode()`]
    set_hex_mode(),
    /// 
    /// Calls setMode(Dec). Provided for convenience (e.g. for
    /// connecting buttons to it).
    /// 
    /// **See also:** [`set_mode()`]
    /// [`set_hex_mode()`]
    /// [`set_oct_mode()`]
    /// [`set_bin_mode()`]
    /// [`mode()`]
    set_dec_mode(),
    /// 
    /// Calls setMode(Oct). Provided for convenience (e.g. for
    /// connecting buttons to it).
    /// 
    /// **See also:** [`set_mode()`]
    /// [`set_hex_mode()`]
    /// [`set_dec_mode()`]
    /// [`set_bin_mode()`]
    /// [`mode()`]
    set_oct_mode(),
    /// 
    /// Calls setMode(Bin). Provided for convenience (e.g. for
    /// connecting buttons to it).
    /// 
    /// **See also:** [`set_mode()`]
    /// [`set_hex_mode()`]
    /// [`set_dec_mode()`]
    /// [`set_oct_mode()`]
    /// [`mode()`]
    set_bin_mode(),
    set_small_decimal_point(arg0: bool),
    /// 
    /// This signal is emitted whenever the QLCDNumber is asked to display
    /// a too-large number or a too-long string.
    /// 
    /// It is never emitted by setDigitCount().
    [signal] overflow(),
    /// 
    [event] event(e: *EventType) -> bool,
    /// 
    [event] paint_event(arg0: *PaintEventType),
}

[org_name(QLCDNumber)]
enum Mode {
    /// Hexadecimal
    Hex = 0,
    /// Decimal
    Dec = 1,
    /// Octal
    Oct = 2,
    /// Binary If the display is set to hexadecimal, octal or binary, the integer equivalent of the value is displayed.
    Bin = 3,
}

[org_name(QLCDNumber)]
enum SegmentStyle {
    /// gives raised segments filled with the background color.
    Outline = 0,
    /// gives raised segments filled with the windowText color.
    Filled = 1,
    /// gives flat segments filled with the windowText color.
    Flat = 2,
}

// vim: syntax=rust expandtab ts=4 sw=4
