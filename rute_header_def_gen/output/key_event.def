///     \class QKeyEvent
///     \brief The QKeyEvent class describes a key event.
/// 
///     \ingroup events
///     \inmodule QtGui
/// 
///     Key events are sent to the widget with keyboard input focus
///     when keys are pressed or released.
/// 
///     A key event contains a special accept flag that indicates whether
///     the receiver will handle the key event. This flag is set by default
///     for QEvent::KeyPress and QEvent::KeyRelease, so there is no need to
///     call accept() when acting on a key event. For QEvent::ShortcutOverride
///     the receiver needs to explicitly accept the event to trigger the override.
///     Calling ignore() on a key event will propagate it to the parent widget.
///     The event is propagated up the parent widget chain until a widget
///     accepts it or an event filter consumes it.
/// 
///     The QWidget::setEnabled() function can be used to enable or disable
///     mouse and keyboard events for a widget.
/// 
///     The event handlers QWidget::keyPressEvent(), QWidget::keyReleaseEvent(),
///     QGraphicsItem::keyPressEvent() and QGraphicsItem::keyReleaseEvent()
///     receive key events.
/// 
///     \sa QFocusEvent, QWidget::grabKeyboard()
struct KeyEvent : InputEvent {
    key() -> i32,
    ///     \fn bool QKeyEvent::matches(QKeySequence::StandardKey key) const
    ///     \since 4.2
    /// 
    ///     Returns \c true if the key event matches the given standard \a key;
    ///     otherwise returns \c false.
    matches(key: KeySequence::StandardKey) -> bool,
    ///     Returns the keyboard modifier flags that existed immediately
    ///     after the event occurred.
    /// 
    ///     \warning This function cannot always be trusted. The user can
    ///     confuse it by pressing both \uicontrol{Shift} keys simultaneously and
    ///     releasing one of them, for example.
    /// 
    ///     \sa QGuiApplication::keyboardModifiers()
    modifiers() -> Rute::KeyboardModifiers,
    text() -> String,
    is_auto_repeat() -> bool,
    count() -> i32,
    native_scan_code() -> u32,
    native_virtual_key() -> u32,
    native_modifiers() -> u32,
}

// vim: syntax=rust expandtab ts=4 sw=4
