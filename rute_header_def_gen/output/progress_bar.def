///     \class QProgressBar
///     \brief The QProgressBar widget provides a horizontal or vertical progress bar.
/// 
///     \ingroup basicwidgets
///     \inmodule QtWidgets
/// 
///     \image windows-progressbar.png
/// 
///     A progress bar is used to give the user an indication of the
///     progress of an operation and to reassure them that the application
///     is still running.
/// 
///     The progress bar uses the concept of \e steps. You set it up by
///     specifying the minimum and maximum possible step values, and it
///     will display the percentage of steps that have been completed
///     when you later give it the current step value. The percentage is
///     calculated by dividing the progress (value() - minimum()) divided
///     by maximum() - minimum().
/// 
///     You can specify the minimum and maximum number of steps with
///     setMinimum() and setMaximum. The current number of steps is set
///     with setValue(). The progress bar can be rewound to the
///     beginning with reset().
/// 
///     If minimum and maximum both are set to 0, the bar shows a busy
///     indicator instead of a percentage of steps. This is useful, for
///     example, when using QNetworkAccessManager to download items when
///     they are unable to determine the size of the item being downloaded.
/// 
///     \sa QProgressDialog, {fowler}{GUI Design Handbook: Progress Indicator}
[org_name(QProgressBar)]
enum Direction {
    TopToBottom,
    BottomToTop,
}

struct ProgressBar : Widget {
    minimum() -> i32,
    maximum() -> i32,
    value() -> i32,
    [event] text() -> String,
    set_text_visible(visible: bool),
    is_text_visible() -> bool,
    alignment() -> Rute::Alignment,
    set_alignment(alignment: Rute::Alignment),
    [event] size_hint() -> Size,
    [event] minimum_size_hint() -> Size,
    orientation() -> Rute::Orientation,
    set_inverted_appearance(invert: bool),
    inverted_appearance() -> bool,
    set_text_direction(text_direction: ProgressBar::Direction),
    text_direction() -> ProgressBar::Direction,
    set_format(format: String),
    reset_format(),
    format() -> String,
    reset(),
    set_range(minimum: i32, maximum: i32),
    set_minimum(minimum: i32),
    set_maximum(maximum: i32),
    set_value(value: i32),
    set_orientation(arg0: Rute::Orientation),
    [signal] value_changed(value: i32),
    [event] event(e: *EventType) -> bool,
    [event] paint_event(arg0: *PaintEventType),
    init_style_option(option: *StyleOptionProgressBarType),
}

// vim: syntax=rust expandtab ts=4 sw=4
