struct ListWidget : ListView {
    [event] set_selection_model(selection_model: *ItemSelectionModelType),
    item(row: i32) -> ListWidgetItem?,
    row(item: *ListWidgetItemType) -> i32,
    insert_item(row: i32, item: *ListWidgetItemType),
    insert_item(row: i32, label: String),
    insert_items(row: i32, labels: &[String]),
    add_item(label: String),
    add_item(item: *ListWidgetItemType),
    add_items(labels: &[String]),
    take_item(row: i32) -> ListWidgetItem?,
    count() -> i32,
    current_item() -> ListWidgetItem?,
    set_current_item(item: *ListWidgetItemType),
    set_current_item(item: *ListWidgetItemType, command: ItemSelectionModel::SelectionFlags),
    current_row() -> i32,
    set_current_row(row: i32),
    set_current_row(row: i32, command: ItemSelectionModel::SelectionFlags),
    item_at(p: &PointType) -> ListWidgetItem?,
    item_at(x: i32, y: i32) -> ListWidgetItem?,
    visual_item_rect(item: *ListWidgetItemType) -> Rect,
    sort_items(order: Rute::SortOrder),
    set_sorting_enabled(enable: bool),
    is_sorting_enabled() -> bool,
    edit_item(item: *ListWidgetItemType),
    open_persistent_editor(item: *ListWidgetItemType),
    close_persistent_editor(item: *ListWidgetItemType),
    is_persistent_editor_open(item: *ListWidgetItemType) -> bool,
    item_widget(item: *ListWidgetItemType) -> Widget?,
    set_item_widget(item: *ListWidgetItemType, widget: *WidgetType),
    remove_item_widget(item: *ListWidgetItemType),
    is_item_selected(item: *ListWidgetItemType) -> bool,
    set_item_selected(item: *ListWidgetItemType, select: bool),
    selected_items() -> [ListWidgetItem?],
    find_items(text: String, flags: Rute::MatchFlags) -> [ListWidgetItem?],
    is_item_hidden(item: *ListWidgetItemType) -> bool,
    set_item_hidden(item: *ListWidgetItemType, hide: bool),
    [event] drop_event(event: *DropEventType),
    scroll_to_item(item: *ListWidgetItemType, hint: AbstractItemView::ScrollHint),
    clear(),
    [signal] item_pressed(item: *ListWidgetItemType),
    [signal] item_clicked(item: *ListWidgetItemType),
    [signal] item_double_clicked(item: *ListWidgetItemType),
    [signal] item_activated(item: *ListWidgetItemType),
    [signal] item_entered(item: *ListWidgetItemType),
    [signal] item_changed(item: *ListWidgetItemType),
    [signal] current_item_changed(current: *ListWidgetItemType, previous: *ListWidgetItemType),
    [signal] current_text_changed(current_text: String),
    [signal] current_row_changed(current_row: i32),
    [signal] item_selection_changed(),
    [event] event(e: *EventType) -> bool,
    [event] mime_types() -> [String],
    [event] mime_data(items: [*ListWidgetItemType]) -> MimeData?,
    [event] drop_mime_data(index: i32, data: *MimeDataType, action: Rute::DropAction) -> bool,
    [event] supported_drop_actions() -> Rute::DropActions,
    items(data: *MimeDataType) -> [ListWidgetItem?],
    index_from_item(item: *ListWidgetItemType) -> ModelIndex,
    index_from_item(item: *ListWidgetItemType) -> ModelIndex,
    item_from_index(index: &ModelIndexType) -> ListWidgetItem?,
}

// vim: syntax=rust expandtab ts=4 sw=4
