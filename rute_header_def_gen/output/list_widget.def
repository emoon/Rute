struct ListWidget : ListView {
    set_selection_model(selection_model: &ItemSelectionModelType),
    item(row: i32) -> &ListWidgetItemType,
    row(item: &ListWidgetItemType) -> i32,
    insert_item(row: i32, item: &ListWidgetItemType),
    insert_item(row: i32, label: String),
    insert_items(row: i32, labels: &StringListType),
    add_item(label: String),
    add_item(item: &ListWidgetItemType),
    add_items(labels: &StringListType),
    take_item(row: i32) -> &ListWidgetItemType,
    count() -> i32,
    current_item() -> &ListWidgetItemType,
    set_current_item(item: &ListWidgetItemType),
    set_current_item(item: &ListWidgetItemType, command: ItemSelectionModel::SelectionFlags),
    current_row() -> i32,
    set_current_row(row: i32),
    set_current_row(row: i32, command: ItemSelectionModel::SelectionFlags),
    item_at(p: &PointType) -> &ListWidgetItemType,
    item_at(x: i32, y: i32) -> &ListWidgetItemType,
    visual_item_rect(item: &ListWidgetItemType) -> RectType,
    sort_items(order: Rute::SortOrder),
    set_sorting_enabled(enable: bool),
    is_sorting_enabled() -> bool,
    edit_item(item: &ListWidgetItemType),
    open_persistent_editor(item: &ListWidgetItemType),
    close_persistent_editor(item: &ListWidgetItemType),
    is_persistent_editor_open(item: &ListWidgetItemType) -> bool,
    item_widget(item: &ListWidgetItemType) -> &WidgetType,
    set_item_widget(item: &ListWidgetItemType, widget: &WidgetType),
    remove_item_widget(item: &ListWidgetItemType),
    is_item_selected(item: &ListWidgetItemType) -> bool,
    set_item_selected(item: &ListWidgetItemType, select: bool),
    selected_items() -> [&ListWidgetItemType],
    find_items(text: String, flags: Rute::MatchFlags) -> [&ListWidgetItemType],
    is_item_hidden(item: &ListWidgetItemType) -> bool,
    set_item_hidden(item: &ListWidgetItemType, hide: bool),
    drop_event(event: &DropEventType),
    scroll_to_item(item: &ListWidgetItemType, hint: AbstractItemView::ScrollHint),
    clear(),
    [callback] item_pressed(item: &ListWidgetItemType),
    [callback] item_clicked(item: &ListWidgetItemType),
    [callback] item_double_clicked(item: &ListWidgetItemType),
    [callback] item_activated(item: &ListWidgetItemType),
    [callback] item_entered(item: &ListWidgetItemType),
    [callback] item_changed(item: &ListWidgetItemType),
    [callback] current_item_changed(current: &ListWidgetItemType, previous: &ListWidgetItemType),
    [callback] current_text_changed(current_text: String),
    [callback] current_row_changed(current_row: i32),
    [callback] item_selection_changed(),
    event(e: &EventType) -> bool,
    mime_types() -> StringListType,
    mime_data(items: [&ListWidgetItemType]) -> &MimeDataType,
    drop_mime_data(index: i32, data: &MimeDataType, action: Rute::DropAction) -> bool,
    supported_drop_actions() -> Rute::DropActions,
    items(data: &MimeDataType) -> [&ListWidgetItemType],
    index_from_item(item: &ListWidgetItemType) -> ModelIndexType,
    item_from_index(index: &ModelIndexType) -> &ListWidgetItemType,
}

// vim: syntax=rust expandtab ts=4 sw=4
