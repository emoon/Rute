/// 
/// An icon engine provides the rendering functions for a QIcon. Each icon has a
/// corresponding icon engine that is responsible for drawing the icon with a
/// requested size, mode and state.
/// 
/// The icon is rendered by the paint() function, and the icon can additionally be
/// obtained as a pixmap with the pixmap() function (the default implementation
/// simply uses paint() to achieve this). The addPixmap() function can be used to
/// add new pixmaps to the icon engine, and is used by QIcon to add specialized
/// custom pixmaps.
/// 
/// The paint(), pixmap(), and addPixmap() functions are all virtual, and can
/// therefore be reimplemented in subclasses of QIconEngine.
/// 
/// **See also:** [`IconEnginePlugin`]
/// 
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct IconEngine {
    /// 
    /// Uses the given *painter* to paint the icon with the required *mode* and
    /// *state* into the rectangle *rect.*
    [event] paint(painter: *PainterType, rect: &RectType, mode: Icon::Mode, state: Icon::State),
    /// Returns the actual size of the icon the engine provides for the
    /// requested *size,* *mode* and *state.* The default implementation
    /// returns the given *size.*
    [event] actual_size(size: &SizeType, mode: Icon::Mode, state: Icon::State) -> Size,
    /// 
    /// Returns the icon as a pixmap with the required *size,* *mode,*
    /// and *state.* The default implementation creates a new pixmap and
    /// calls paint() to fill it.
    [event] pixmap(size: &SizeType, mode: Icon::Mode, state: Icon::State) -> Pixmap,
    /// 
    /// Called by QIcon::addPixmap(). Adds a specialized *pixmap* for the given
    /// *mode* and *state.* The default pixmap-based engine stores any supplied
    /// pixmaps, and it uses them instead of scaled pixmaps if the size of a pixmap
    /// matches the size of icon requested. Custom icon engines that implement
    /// scalable vector formats are free to ignores any extra pixmaps.
    [event] add_pixmap(pixmap: &PixmapType, mode: Icon::Mode, state: Icon::State),
    /// Called by QIcon::addFile(). Adds a specialized pixmap from the
    /// file with the given *fileName,* *size,* *mode* and *state.* The
    /// default pixmap-based engine stores any supplied file names, and it
    /// loads the pixmaps on demand instead of using scaled pixmaps if the
    /// size of a pixmap matches the size of icon requested. Custom icon
    /// engines that implement scalable vector formats are free to ignores
    /// any extra files.
    [event] add_file(file_name: String, size: &SizeType, mode: Icon::Mode, state: Icon::State),
    /// 
    /// Returns a key that identifies this icon engine.
    [event] key() -> String,
    /// 
    /// Reimplement this method to return a clone of this icon engine.
    [event] clone() -> IconEngine?,
    /// 
    /// Reads icon engine contents from the QDataStream *in.* Returns
    /// true if the contents were read; otherwise returns `false.`
    /// 
    /// QIconEngine's default implementation always return false.
    [event] read(in: &DataStreamType) -> bool,
    /// 
    /// Writes the contents of this engine to the QDataStream *out.*
    /// Returns `true` if the contents were written; otherwise returns `false.`
    /// 
    /// QIconEngine's default implementation always return false.
    [event] write(out: &DataStreamType) -> bool,
    /// 
    /// Returns sizes of all images that are contained in the engine for the
    /// specific *mode* and *state.*
    /// 
    [event] available_sizes(mode: Icon::Mode, state: Icon::State) -> [Size],
    /// 
    /// Returns the name used to create the engine, if available.
    /// 
    [event] icon_name() -> String,
    /// 
    /// Returns true if this icon engine represent a null QIcon.
    /// 
    is_null() -> bool,
    /// 
    /// Returns a pixmap for the given *size,* *mode,* *state* and *scale.*
    /// 
    /// The *scale* argument is typically equal to the [device pixel ratio](Glossary%20Of%20High%20DPI%0A%20%20%20%20Terms)
    /// of the display.
    /// 
    /// **Note**: Some engines may cast *scale* to an integer.
    /// 
    /// **See also:** ScaledPixmapArgument
    scaled_pixmap(size: &SizeType, mode: Icon::Mode, state: Icon::State, scale: f32) -> Pixmap,
    /// 
    /// Additional method to allow extending QIconEngine without
    /// adding new virtual methods (and without breaking binary compatibility).
    /// The actual action and format of *data* depends on *id* argument
    /// which is in fact a constant from IconEngineHook enum.
    /// 
    /// **See also:** IconEngineHook
    [event] virtual_hook(id: i32, data: *void),
}

[org_name(QIconEngine)]
enum IconEngineHook {
    /// Allows to query the sizes of the contained pixmaps for pixmap-based engines. The *data* argument of the virtual_hook() function is a AvailableSizesArgument pointer that should be filled with icon sizes. Engines that work in terms of a scalable, vectorial format normally return an empty list.
    AvailableSizesHook,
    /// Allows to query the name used to create the icon, for example when instantiating an icon using QIcon::fromTheme().
    IconNameHook,
    /// Allow to query if this engine represents a null icon. The *data* argument of the virtual_hook() is a pointer to a bool that can be set to true if the icon is null. This enum value was added in Qt 5.7.
    IsNullHook,
    /// Provides a way to get a pixmap that is scaled according to the given scale (typically equal to the [device pixel ratio](Glossary%20Of%20High%0A%20%20%20%20DPI%20Terms)
 ). The *data* argument of the virtual_hook() function is a [ScaledPixmapArgument](ScaledPixmapArgument)
 pointer that contains both the input and output arguments. This enum value was added in Qt 5.9.
    ScaledPixmapHook,
}

// vim: syntax=rust expandtab ts=4 sw=4
