/// 
/// In some situations it is useful to group QAction objects together.
/// For example, if you have a **{Left** Align} action, a **{Right**
/// Align} action, a **{Justify}** action, and a **{Center}** action,
/// only one of these actions should be active at any one time. One
/// simple way of achieving this is to group the actions together in
/// an action group.
/// 
/// Here's a example (from the [Menus](mainwindows/menus)
/// example):
/// 
/// Here we create a new action group. Since the action group is
/// exclusive by default, only one of the actions in the group is
/// checked at any one time.
/// 
/// ![Alignment options in a QMenu](qactiongroup-align.png)
/// 
/// A QActionGroup emits an triggered() signal when one of its
/// actions is chosen. Each action in an action group emits its
/// triggered() signal as usual.
/// 
/// As stated above, an action group is [exclusive](exclusive)
/// by default; it
/// ensures that only one checkable action is active at any one time.
/// If you want to group checkable actions without making them
/// exclusive, you can turn of exclusiveness by calling
/// setExclusive(false).
/// 
/// Actions can be added to an action group using addAction(), but it
/// is usually more convenient to specify a group when creating
/// actions; this ensures that actions are automatically created with
/// a parent. Actions can be visually separated from each other by
/// adding a separator action to the group; create an action and use
/// QAction's [setSeparator()](QAction::)
/// function to make it
/// considered a separator. Action groups are added to widgets with
/// the QWidget::addActions() function.
/// 
/// **See also:** QAction
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct ActionGroup : Object {
    /// 
    /// Adds the *action* to this group, and returns it.
    /// 
    /// Normally an action is added to a group by creating it with the
    /// group as its parent, so this function is not usually used.
    /// 
    /// **See also:** QAction::setActionGroup()
    /// 
    /// Creates and returns an action with *text.* The newly created
    /// action is a child of this action group.
    /// 
    /// Normally an action is added to a group by creating it with the
    /// group as parent, so this function is not usually used.
    /// 
    /// **See also:** QAction::setActionGroup()
    /// 
    /// Creates and returns an action with *text* and an *icon.* The
    /// newly created action is a child of this action group.
    /// 
    /// Normally an action is added to a group by creating it with the
    /// group as its parent, so this function is not usually used.
    /// 
    /// **See also:** QAction::setActionGroup()
    add_action(a: *ActionType) -> Action?,
    /// 
    /// Adds the *action* to this group, and returns it.
    /// 
    /// Normally an action is added to a group by creating it with the
    /// group as its parent, so this function is not usually used.
    /// 
    /// **See also:** QAction::setActionGroup()
    /// 
    /// Creates and returns an action with *text.* The newly created
    /// action is a child of this action group.
    /// 
    /// Normally an action is added to a group by creating it with the
    /// group as parent, so this function is not usually used.
    /// 
    /// **See also:** QAction::setActionGroup()
    /// 
    /// Creates and returns an action with *text* and an *icon.* The
    /// newly created action is a child of this action group.
    /// 
    /// Normally an action is added to a group by creating it with the
    /// group as its parent, so this function is not usually used.
    /// 
    /// **See also:** QAction::setActionGroup()
    add_action(text: String) -> Action?,
    /// 
    /// Adds the *action* to this group, and returns it.
    /// 
    /// Normally an action is added to a group by creating it with the
    /// group as its parent, so this function is not usually used.
    /// 
    /// **See also:** QAction::setActionGroup()
    /// 
    /// Creates and returns an action with *text.* The newly created
    /// action is a child of this action group.
    /// 
    /// Normally an action is added to a group by creating it with the
    /// group as parent, so this function is not usually used.
    /// 
    /// **See also:** QAction::setActionGroup()
    /// 
    /// Creates and returns an action with *text* and an *icon.* The
    /// newly created action is a child of this action group.
    /// 
    /// Normally an action is added to a group by creating it with the
    /// group as its parent, so this function is not usually used.
    /// 
    /// **See also:** QAction::setActionGroup()
    add_action(icon: &IconType, text: String) -> Action?,
    /// 
    /// Removes the *action* from this group. The action will have no
    /// parent as a result.
    /// 
    /// **See also:** QAction::setActionGroup()
    remove_action(a: *ActionType),
    /// 
    /// Returns the list of this groups's actions. This may be empty.
    actions() -> [Action?],
    /// 
    /// Returns the currently checked action in the group, or 0 if none
    /// are checked.
    checked_action() -> Action?,
    is_exclusive() -> bool,
    is_enabled() -> bool,
    is_visible() -> bool,
    set_enabled(arg0: bool),
    /// 
    /// This is a convenience function for the [enabled](enabled)
    /// property, that
    /// is useful for signals--slots connections. If *b* is true the
    /// action group is disabled; otherwise it is enabled.
    set_disabled(b: bool),
    set_visible(arg0: bool),
    set_exclusive(arg0: bool),
    /// 
    /// This signal is emitted when the given *action* in the action
    /// group is highlighted by the user; for example, when the user
    /// pauses with the cursor over a menu option, toolbar button, or
    /// presses an action's shortcut key combination.
    /// 
    /// **See also:** QAction::activate()
    [signal] hovered(arg0: *ActionType),
}

// vim: syntax=rust expandtab ts=4 sw=4
