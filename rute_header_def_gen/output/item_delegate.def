/// 
/// QItemDelegate can be used to provide custom display features and editor
/// widgets for item views based on QAbstractItemView subclasses. Using a
/// delegate for this purpose allows the display and editing mechanisms to be
/// customized and developed independently from the model and view.
/// 
/// The QItemDelegate class is one of the [Model/View Classes](Model/View%20Classes)
/// and
/// is part of Qt's [model/view framework](Model/View%20Programming)
/// 
/// Note that QStyledItemDelegate has taken over the job of drawing
/// Qt's item views. We recommend the use of QStyledItemDelegate when
/// creating new delegates.
/// 
/// When displaying items from a custom model in a standard view, it is
/// often sufficient to simply ensure that the model returns appropriate
/// data for each of the [roles](Qt::ItemDataRole)
/// that determine the
/// appearance of items in views. The default delegate used by Qt's
/// standard views uses this role information to display items in most
/// of the common forms expected by users. However, it is sometimes
/// necessary to have even more control over the appearance of items than
/// the default delegate can provide.
/// 
/// This class provides default implementations of the functions for
/// painting item data in a view and editing data from item models.
/// Default implementations of the paint() and sizeHint() virtual
/// functions, defined in QAbstractItemDelegate, are provided to
/// ensure that the delegate implements the correct basic behavior
/// expected by views. You can reimplement these functions in
/// subclasses to customize the appearance of items.
/// 
/// When editing data in an item view, QItemDelegate provides an
/// editor widget, which is a widget that is placed on top of the view
/// while editing takes place. Editors are created with a
/// QItemEditorFactory; a default static instance provided by
/// QItemEditorFactory is installed on all item delegates. You can set
/// a custom factory using setItemEditorFactory() or set a new default
/// factory with QItemEditorFactory::setDefaultFactory(). It is the
/// data stored in the item model with the Qt::EditRole that is edited.
/// 
/// Only the standard editing functions for widget-based delegates are
/// reimplemented here:
/// 
/// * createEditor() returns the widget used to change data from the model and can be reimplemented to customize editing behavior.
/// * setEditorData() provides the widget with data to manipulate.
/// * updateEditorGeometry() ensures that the editor is displayed correctly with respect to the item view.
/// * setModelData() returns updated data to the model.
/// 
/// The closeEditor() signal indicates that the user has completed editing the data,
/// and that the editor widget can be destroyed.
/// 
/// # Standard Roles and Data Types
/// 
/// The default delegate used by the standard views supplied with Qt
/// associates each standard role (defined by Qt::ItemDataRole) with certain
/// data types. Models that return data in these types can influence the
/// appearance of the delegate as described in the following table.
/// 
/// * Role
/// * Accepted Types
/// * [Qt::BackgroundRole](Qt::BackgroundRole)
/// 
/// * QBrush
/// * [Qt::BackgroundColorRole](Qt::BackgroundColorRole)
/// 
/// * QColor (obsolete; use Qt::BackgroundRole instead)
/// * [Qt::CheckStateRole](Qt::CheckStateRole)
/// 
/// * Qt::CheckState
/// * [Qt::DecorationRole](Qt::DecorationRole)
/// 
/// * QIcon, QPixmap and QColor
/// * [Qt::DisplayRole](Qt::DisplayRole)
/// 
/// * QString and types with a string representation
/// * [Qt::EditRole](Qt::EditRole)
/// 
/// * See QItemEditorFactory for details
/// * [Qt::FontRole](Qt::FontRole)
/// 
/// * QFont
/// * [Qt::SizeHintRole](Qt::SizeHintRole)
/// 
/// * QSize
/// * [Qt::TextAlignmentRole](Qt::TextAlignmentRole)
/// 
/// * Qt::Alignment
/// * [Qt::ForegroundRole](Qt::ForegroundRole)
/// 
/// * QBrush
/// * [Qt::TextColorRole](Qt::TextColorRole)
/// 
/// * QColor (obsolete; use Qt::ForegroundRole instead)
/// 
/// If the default delegate does not allow the level of customization that
/// you need, either for display purposes or for editing data, it is possible to
/// subclass QItemDelegate to implement the desired behavior.
/// 
/// # Subclassing
/// 
/// When subclassing QItemDelegate to create a delegate that displays items
/// using a custom renderer, it is important to ensure that the delegate can
/// render items suitably for all the required states; e.g. selected,
/// disabled, checked. The documentation for the paint() function contains
/// some hints to show how this can be achieved.
/// 
/// You can provide custom editors by using a QItemEditorFactory. The
/// [Color Editor Factory Example](Color%20Editor%20Factory%20Example)
/// shows how a custom editor can be
/// made available to delegates with the default item editor
/// factory. This way, there is no need to subclass QItemDelegate. An
/// alternative is to reimplement createEditor(), setEditorData(),
/// setModelData(), and updateEditorGeometry(). This process is
/// described in the [Spin Box Delegate Example](Spin%20Box%20Delegate%20Example)
/// 
/// 
/// # QStyledItemDelegate vs. QItemDelegate
/// 
/// Since Qt 4.4, there are two delegate classes: QItemDelegate and
/// QStyledItemDelegate. However, the default delegate is QStyledItemDelegate.
/// These two classes are independent alternatives to painting and providing
/// editors for items in views. The difference between them is that
/// QStyledItemDelegate uses the current style to paint its items. We therefore
/// recommend using QStyledItemDelegate as the base class when implementing
/// custom delegates or when working with Qt style sheets. The code required
/// for either class should be equal unless the custom delegate needs to use
/// the style for drawing.
/// 
/// **See also:** {Delegate Classes}
/// [`StyledItemDelegate`]
/// [`AbstractItemDelegate`]
/// {Spin Box Delegate Example}
/// {Settings Editor Example}
/// {Icons Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct ItemDelegate : AbstractItemDelegate {
    has_clipping() -> bool,
    set_clipping(clip: bool),
    /// 
    /// Renders the delegate using the given *painter* and style *option* for
    /// the item specified by *index.*
    /// 
    /// When reimplementing this function in a subclass, you should update the area
    /// held by the option's [rect](QStyleOption::rect)
    /// variable, using the
    /// option's [state](QStyleOption::state)
    /// variable to determine the state of
    /// the item to be displayed, and adjust the way it is painted accordingly.
    /// 
    /// For example, a selected item may need to be displayed differently to
    /// unselected items, as shown in the following code:
    /// 
    /// ...
    /// 
    /// After painting, you should ensure that the painter is returned to its
    /// the state it was supplied in when this function was called. For example,
    /// it may be useful to call QPainter::save() before painting and
    /// QPainter::restore() afterwards.
    /// 
    /// **See also:** [`Style::state()`]
    [event] paint(painter: *PainterType, option: &StyleOptionViewItemType, index: &ModelIndexType),
    /// 
    /// Returns the size needed by the delegate to display the item
    /// specified by *index,* taking into account the style information
    /// provided by *option.*
    /// 
    /// When reimplementing this function, note that in case of text
    /// items, QItemDelegate adds a margin (i.e. 2 *
    /// QStyle::PM_FocusFrameHMargin) to the length of the text.
    [event] size_hint(option: &StyleOptionViewItemType, index: &ModelIndexType) -> Size,
    /// 
    /// Returns the widget used to edit the item specified by *index*
    /// for editing. The *parent* widget and style *option* are used to
    /// control how the editor widget appears.
    /// 
    /// **See also:** [`AbstractItemDelegate::create_editor`]
    [event] create_editor(parent: *WidgetType, option: &StyleOptionViewItemType, index: &ModelIndexType) -> Widget?,
    /// 
    /// Sets the data to be displayed and edited by the *editor* from the
    /// data model item specified by the model *index.*
    /// 
    /// The default implementation stores the data in the *editor*
    /// widget's [user property](Qt's%20Property%20System)
    /// 
    /// 
    /// **See also:** [`MetaProperty::is_user`]
    [event] set_editor_data(editor: *WidgetType, index: &ModelIndexType),
    /// 
    /// Gets data from the *editor* widget and stores it in the specified
    /// *model* at the item *index.*
    /// 
    /// The default implementation gets the value to be stored in the data
    /// model from the *editor* widget's [user
    /// property](Qt's%20Property%20System)
    /// 
    /// 
    /// **See also:** [`MetaProperty::is_user`]
    [event] set_model_data(editor: *WidgetType, model: *AbstractItemModelType, index: &ModelIndexType),
    /// 
    /// Returns the editor factory used by the item delegate.
    /// If no editor factory is set, the function will return null.
    /// 
    /// **See also:** [`set_item_editor_factory()`]
    item_editor_factory() -> ItemEditorFactory?,
    /// 
    /// Sets the editor factory to be used by the item delegate to be the *factory*
    /// specified. If no editor factory is set, the item delegate will use the
    /// default editor factory.
    /// 
    /// **See also:** [`item_editor_factory()`]
    set_item_editor_factory(factory: *ItemEditorFactoryType),
    /// 
    /// Renders the item view *text* within the rectangle specified by *rect*
    /// using the given *painter* and style *option.*
    [event] draw_display(painter: *PainterType, option: &StyleOptionViewItemType, rect: &RectType, text: String),
    /// 
    /// Renders the decoration *pixmap* within the rectangle specified by
    /// *rect* using the given *painter* and style *option.*
    [event] draw_decoration(painter: *PainterType, option: &StyleOptionViewItemType, rect: &RectType, pixmap: &PixmapType),
    /// 
    /// Renders the region within the rectangle specified by *rect,* indicating
    /// that it has the focus, using the given *painter* and style *option.*
    [event] draw_focus(painter: *PainterType, option: &StyleOptionViewItemType, rect: &RectType),
    /// 
    /// Renders a check indicator within the rectangle specified by *rect,* using the given *painter* and style *option,* using the
    /// given *state.*
    [event] draw_check(painter: *PainterType, option: &StyleOptionViewItemType, rect: &RectType, state: Rute::CheckState),
    /// 
    /// Renders the item background for the given *index,*
    /// using the given *painter* and style *option.*
    draw_background(painter: *PainterType, option: &StyleOptionViewItemType, index: &ModelIndexType),
    do_layout(option: &StyleOptionViewItemType, check_rect: *RectType, icon_rect: *RectType, text_rect: *RectType, hint: bool),
    rect(option: &StyleOptionViewItemType, index: &ModelIndexType, role: i32) -> Rect,
    /// 
    /// Returns `true` if the given *editor* is a valid QWidget and the
    /// given *event* is handled; otherwise returns `false.` The following
    /// key press events are handled by default:
    /// 
    /// * **Tab**
    /// * **Backtab**
    /// * **Enter**
    /// * **Return**
    /// * **Esc**
    /// 
    /// In the case of **Tab,** **Backtab,** **Enter** and **Return**
    /// key press events, the *editor's* data is committed to the model
    /// and the editor is closed. If the *event* is a **Tab** key press
    /// the view will open an editor on the next item in the
    /// view. Likewise, if the *event* is a **Backtab** key press the
    /// view will open an editor on the *previous* item in the view.
    /// 
    /// If the event is a **Esc** key press event, the *editor* is
    /// closed *without* committing its data.
    /// 
    /// **See also:** [`commit_data()`]
    /// [`close_editor()`]
    [event] event_filter(object: *ObjectType, event: *EventType) -> bool,
    /// 
    [event] editor_event(event: *EventType, model: *AbstractItemModelType, option: &StyleOptionViewItemType, index: &ModelIndexType) -> bool,
    set_options(index: &ModelIndexType, option: &StyleOptionViewItemType) -> StyleOptionViewItem,
    decoration(option: &StyleOptionViewItemType, variant: &VariantType) -> Pixmap,
    selected(pixmap: &PixmapType, palette: &PaletteType, enabled: bool) -> Pixmap?,
    do_check(option: &StyleOptionViewItemType, bounding: &RectType, variant: &VariantType) -> Rect,
    text_rectangle(painter: *PainterType, rect: &RectType, font: &FontType, text: String) -> Rect,
}

// vim: syntax=rust expandtab ts=4 sw=4
