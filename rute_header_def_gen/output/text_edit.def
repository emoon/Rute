struct TextEdit : AbstractScrollArea {
    set_document(&TextDocumentType document),
    document() -> &TextDocumentType,
    set_placeholder_text(String placeholder_text),
    placeholder_text() -> String,
    set_text_cursor(&TextCursorType cursor),
    text_cursor() -> TextCursorType,
    is_read_only() -> bool,
    set_read_only(bool ro),
    set_text_interaction_flags(Rute::TextInteractionFlags flags),
    text_interaction_flags() -> Rute::TextInteractionFlags,
    font_point_size() -> f32,
    font_family() -> String,
    font_weight() -> i32,
    font_underline() -> bool,
    font_italic() -> bool,
    text_color() -> ColorType,
    text_background_color() -> ColorType,
    current_font() -> FontType,
    alignment() -> Rute::Alignment,
    merge_current_char_format(&TextCharFormatType modifier),
    set_current_char_format(&TextCharFormatType format),
    current_char_format() -> TextCharFormatType,
    auto_formatting() -> AutoFormatting,
    set_auto_formatting(AutoFormatting features),
    tab_changes_focus() -> bool,
    set_tab_changes_focus(bool b),
    set_document_title(String title),
    document_title() -> String,
    is_undo_redo_enabled() -> bool,
    set_undo_redo_enabled(bool enable),
    line_wrap_mode() -> TextEdit::LineWrapMode,
    set_line_wrap_mode(TextEdit::LineWrapMode mode),
    line_wrap_column_or_width() -> i32,
    set_line_wrap_column_or_width(i32 w),
    word_wrap_mode() -> TextOption::WrapMode,
    set_word_wrap_mode(TextOption::WrapMode policy),
    find(String exp, TextDocument::FindFlags options) -> bool,
    find(&RegExpType exp, TextDocument::FindFlags options) -> bool,
    to_plain_text() -> String,
    to_html() -> String,
    ensure_cursor_visible(),
    load_resource(i32 type, &UrlType name) -> VariantType,
    create_standard_context_menu() -> &MenuType,
    create_standard_context_menu(&PointType position) -> &MenuType,
    cursor_for_position(&PointType pos) -> TextCursorType,
    cursor_rect(&TextCursorType cursor) -> RectType,
    cursor_rect() -> RectType,
    anchor_at(&PointType pos) -> String,
    overwrite_mode() -> bool,
    set_overwrite_mode(bool overwrite),
    tab_stop_width() -> i32,
    set_tab_stop_width(i32 width),
    tab_stop_distance() -> f32,
    set_tab_stop_distance(f32 distance),
    cursor_width() -> i32,
    set_cursor_width(i32 width),
    accept_rich_text() -> bool,
    set_accept_rich_text(bool accept),
    move_cursor(TextCursor::MoveOperation operation, TextCursor::MoveMode mode),
    can_paste() -> bool,
    print(&PagedPaintDeviceType printer),
    input_method_query(Rute::InputMethodQuery property) -> VariantType,
    input_method_query(Rute::InputMethodQuery query, VariantType argument) -> VariantType,
    set_font_point_size(f32 s),
    set_font_family(String font_family),
    set_font_weight(i32 w),
    set_font_underline(bool b),
    set_font_italic(bool b),
    set_text_color(&ColorType c),
    set_text_background_color(&ColorType c),
    set_current_font(&FontType f),
    set_alignment(Rute::Alignment a),
    set_plain_text(String text),
    set_html(String text),
    set_text(String text),
    cut(),
    copy(),
    paste(),
    undo(),
    redo(),
    clear(),
    select_all(),
    insert_plain_text(String text),
    insert_html(String text),
    append(String text),
    scroll_to_anchor(String name),
    zoom_in(i32 range),
    zoom_out(i32 range),
    [callback] text_changed(),
    [callback] undo_available(bool b),
    [callback] redo_available(bool b),
    [callback] current_char_format_changed(&TextCharFormatType format),
    [callback] copy_available(bool b),
    [callback] selection_changed(),
    [callback] cursor_position_changed(),
    event(&EventType e) -> bool,
    timer_event(&TimerEventType e),
    key_press_event(&KeyEventType e),
    key_release_event(&KeyEventType e),
    resize_event(&ResizeEventType e),
    paint_event(&PaintEventType e),
    mouse_press_event(&MouseEventType e),
    mouse_move_event(&MouseEventType e),
    mouse_release_event(&MouseEventType e),
    mouse_double_click_event(&MouseEventType e),
    focus_next_prev_child(bool next) -> bool,
    context_menu_event(&ContextMenuEventType e),
    drag_enter_event(&DragEnterEventType e),
    drag_leave_event(&DragLeaveEventType e),
    drag_move_event(&DragMoveEventType e),
    drop_event(&DropEventType e),
    focus_in_event(&FocusEventType e),
    focus_out_event(&FocusEventType e),
    show_event(&ShowEventType arg0),
    change_event(&EventType e),
    wheel_event(&WheelEventType e),
    create_mime_data_from_selection() -> &MimeDataType,
    can_insert_from_mime_data(&MimeDataType source) -> bool,
    insert_from_mime_data(&MimeDataType source),
    input_method_event(&InputMethodEventType arg0),
    scroll_contents_by(i32 dx, i32 dy),
    do_set_text_cursor(&TextCursorType cursor),
    zoom_in_f(float range),
}

// vim: syntax=rust expandtab ts=4 sw=4
