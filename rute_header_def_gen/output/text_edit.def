/// 
/// # Introduction and Concepts
/// 
/// QTextEdit is an advanced WYSIWYG viewer/editor supporting rich
/// text formatting using HTML-style tags. It is optimized to handle
/// large documents and to respond quickly to user input.
/// 
/// QTextEdit works on paragraphs and characters. A paragraph is a
/// formatted string which is word-wrapped to fit into the width of
/// the widget. By default when reading plain text, one newline
/// signifies a paragraph. A document consists of zero or more
/// paragraphs. The words in the paragraph are aligned in accordance
/// with the paragraph's alignment. Paragraphs are separated by hard
/// line breaks. Each character within a paragraph has its own
/// attributes, for example, font and color.
/// 
/// QTextEdit can display images, lists and tables. If the text is
/// too large to view within the text edit's viewport, scroll bars will
/// appear. The text edit can load both plain text and rich text files.
/// Rich text is described using a subset of HTML 4 markup, refer to the
/// [Supported HTML Subset](Supported%20HTML%20Subset)
/// page for more information.
/// 
/// If you just need to display a small piece of rich text use QLabel.
/// 
/// The rich text support in Qt is designed to provide a fast, portable and
/// efficient way to add reasonable online help facilities to
/// applications, and to provide a basis for rich text editors. If
/// you find the HTML support insufficient for your needs you may consider
/// the use of Qt WebKit, which provides a full-featured web browser
/// widget.
/// 
/// The shape of the mouse cursor on a QTextEdit is Qt::IBeamCursor by default.
/// It can be changed through the viewport()'s cursor property.
/// 
/// # Using QTextEdit as a Display Widget
/// 
/// QTextEdit can display a large HTML subset, including tables and
/// images.
/// 
/// The text is set or replaced using setHtml() which deletes any
/// existing text and replaces it with the text passed in the
/// setHtml() call. If you call setHtml() with legacy HTML, and then
/// call toHtml(), the text that is returned may have different markup,
/// but will render the same. The entire text can be deleted with clear().
/// 
/// Text itself can be inserted using the QTextCursor class or using the
/// convenience functions insertHtml(), insertPlainText(), append() or
/// paste(). QTextCursor is also able to insert complex objects like tables
/// or lists into the document, and it deals with creating selections
/// and applying changes to selected text.
/// 
/// By default the text edit wraps words at whitespace to fit within
/// the text edit widget. The setLineWrapMode() function is used to
/// specify the kind of line wrap you want, or [NoWrap](NoWrap)
/// if you don't
/// want any wrapping. Call setLineWrapMode() to set a fixed pixel width
/// [FixedPixelWidth,](FixedPixelWidth,)
/// or character column (e.g. 80 column) [FixedColumnWidth](FixedColumnWidth)
/// with the pixels or columns specified with
/// setLineWrapColumnOrWidth(). If you use word wrap to the widget's width
/// [WidgetWidth,](WidgetWidth,)
/// you can specify whether to break on whitespace or
/// anywhere with setWordWrapMode().
/// 
/// The find() function can be used to find and select a given string
/// within the text.
/// 
/// If you want to limit the total number of paragraphs in a QTextEdit,
/// as for example it is often useful in a log viewer, then you can use
/// QTextDocument's maximumBlockCount property for that.
/// 
/// ## Read-only Key Bindings
/// 
/// When QTextEdit is used read-only the key bindings are limited to
/// navigation, and text may only be selected with the mouse:
/// * Keypresses
/// * Action
/// * Up
/// * Moves one line up.
/// * Down
/// * Moves one line down.
/// * Left
/// * Moves one character to the left.
/// * Right
/// * Moves one character to the right.
/// * PageUp
/// * Moves one (viewport) page up.
/// * PageDown
/// * Moves one (viewport) page down.
/// * Home
/// * Moves to the beginning of the text.
/// * End
/// * Moves to the end of the text.
/// * Alt+Wheel
/// * Scrolls the page horizontally (the Wheel is the mouse wheel).
/// * Ctrl+Wheel
/// * Zooms the text.
/// * Ctrl+A
/// * Selects all text.
/// 
/// The text edit may be able to provide some meta-information. For
/// example, the documentTitle() function will return the text from
/// within HTML `<title>` tags.
/// 
/// **Note**: Zooming into HTML documents only works if the font-size is not set to a fixed size.
/// 
/// # Using QTextEdit as an Editor
/// 
/// All the information about using QTextEdit as a display widget also
/// applies here.
/// 
/// The current char format's attributes are set with setFontItalic(),
/// setFontWeight(), setFontUnderline(), setFontFamily(),
/// setFontPointSize(), setTextColor() and setCurrentFont(). The current
/// paragraph's alignment is set with setAlignment().
/// 
/// Selection of text is handled by the QTextCursor class, which provides
/// functionality for creating selections, retrieving the text contents or
/// deleting selections. You can retrieve the object that corresponds with
/// the user-visible cursor using the textCursor() method. If you want to set
/// a selection in QTextEdit just create one on a QTextCursor object and
/// then make that cursor the visible cursor using setTextCursor(). The selection
/// can be copied to the clipboard with copy(), or cut to the clipboard with
/// cut(). The entire text can be selected using selectAll().
/// 
/// When the cursor is moved and the underlying formatting attributes change,
/// the currentCharFormatChanged() signal is emitted to reflect the new attributes
/// at the new cursor position.
/// 
/// The textChanged() signal is emitted whenever the text changes (as a result
/// of setText() or through the editor itself).
/// 
/// QTextEdit holds a QTextDocument object which can be retrieved using the
/// document() method. You can also set your own document object using setDocument().
/// 
/// QTextDocument provides an [isModified()](QTextDocument::isModified())
/// 
/// function which will return true if the text has been modified since it was
/// either loaded or since the last call to setModified with false as argument.
/// In addition it provides methods for undo and redo.
/// 
/// ## Drag and Drop
/// 
/// QTextEdit also supports custom drag and drop behavior. By default,
/// QTextEdit will insert plain text, HTML and rich text when the user drops
/// data of these MIME types onto a document. Reimplement
/// canInsertFromMimeData() and insertFromMimeData() to add support for
/// additional MIME types.
/// 
/// For example, to allow the user to drag and drop an image onto a QTextEdit,
/// you could the implement these functions in the following way:
/// 
/// We add support for image MIME types by returning true. For all other
/// MIME types, we use the default implementation.
/// 
/// We unpack the image from the QVariant held by the MIME source and insert
/// it into the document as a resource.
/// 
/// ## Editing Key Bindings
/// 
/// The list of key bindings which are implemented for editing:
/// * Keypresses
/// * Action
/// * Backspace
/// * Deletes the character to the left of the cursor.
/// * Delete
/// * Deletes the character to the right of the cursor.
/// * Ctrl+C
/// * Copy the selected text to the clipboard.
/// * Ctrl+Insert
/// * Copy the selected text to the clipboard.
/// * Ctrl+K
/// * Deletes to the end of the line.
/// * Ctrl+V
/// * Pastes the clipboard text into text edit.
/// * Shift+Insert
/// * Pastes the clipboard text into text edit.
/// * Ctrl+X
/// * Deletes the selected text and copies it to the clipboard.
/// * Shift+Delete
/// * Deletes the selected text and copies it to the clipboard.
/// * Ctrl+Z
/// * Undoes the last operation.
/// * Ctrl+Y
/// * Redoes the last operation.
/// * Left
/// * Moves the cursor one character to the left.
/// * Ctrl+Left
/// * Moves the cursor one word to the left.
/// * Right
/// * Moves the cursor one character to the right.
/// * Ctrl+Right
/// * Moves the cursor one word to the right.
/// * Up
/// * Moves the cursor one line up.
/// * Down
/// * Moves the cursor one line down.
/// * PageUp
/// * Moves the cursor one page up.
/// * PageDown
/// * Moves the cursor one page down.
/// * Home
/// * Moves the cursor to the beginning of the line.
/// * Ctrl+Home
/// * Moves the cursor to the beginning of the text.
/// * End
/// * Moves the cursor to the end of the line.
/// * Ctrl+End
/// * Moves the cursor to the end of the text.
/// * Alt+Wheel
/// * Scrolls the page horizontally (the Wheel is the mouse wheel).
/// 
/// To select (mark) text hold down the Shift key whilst pressing one
/// of the movement keystrokes, for example, *Shift+Right*
/// will select the character to the right, and *Shift+Ctrl+Right* will select the word to the right, etc.
/// 
/// **See also:** [`TextDocument`]
/// [`TextCursor`]
/// {Application Example}
/// {Syntax Highlighter Example}
/// {Rich Text Processing}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TextEdit : AbstractScrollArea {
    set_document(document: *TextDocumentType),
    /// 
    /// **Note**: The editor *does not take ownership of the document* unless it
    /// is the document's parent object. The parent object of the provided document
    /// remains the owner of the object. If the previously assigned document is a
    /// child of the editor then it will be deleted.
    /// 
    /// By default, for a newly-created, empty document, this property contains
    /// an empty string.
    document() -> TextDocument?,
    set_placeholder_text(placeholder_text: String),
    /// 
    /// Setting this property makes the editor display a grayed-out
    /// placeholder text as long as the document() is empty.
    /// 
    /// By default, this property contains an empty string.
    /// 
    /// **See also:** [`document()`]
    placeholder_text() -> String,
    /// 
    /// Sets the visible *cursor.*
    set_text_cursor(cursor: &TextCursorType),
    /// 
    /// Returns a copy of the QTextCursor that represents the currently visible cursor.
    /// Note that changes on the returned cursor do not affect QTextEdit's cursor; use
    /// setTextCursor() to update the visible cursor.
    text_cursor() -> TextCursor,
    is_read_only() -> bool,
    set_read_only(ro: bool),
    set_text_interaction_flags(flags: Rute::TextInteractionFlags),
    /// 
    /// Specifies how the widget should interact with user input.
    /// 
    /// The default value depends on whether the QTextEdit is read-only
    /// or editable, and whether it is a QTextBrowser or not.
    text_interaction_flags() -> Rute::TextInteractionFlags,
    /// 
    /// Returns the point size of the font of the current format.
    /// 
    /// **See also:** [`set_font_family()`]
    /// [`set_current_font()`]
    /// [`set_font_point_size()`]
    font_point_size() -> f32,
    /// 
    /// Returns the font family of the current format.
    /// 
    /// **See also:** [`set_font_family()`]
    /// [`set_current_font()`]
    /// [`set_font_point_size()`]
    font_family() -> String,
    /// 
    /// Returns the font weight of the current format.
    /// 
    /// **See also:** [`set_font_weight()`]
    /// [`set_current_font()`]
    /// [`set_font_point_size()`]
    /// [`Font::weight()`]
    font_weight() -> i32,
    /// 
    /// Returns `true` if the font of the current format is underlined; otherwise returns
    /// false.
    /// 
    /// **See also:** [`set_font_underline()`]
    font_underline() -> bool,
    /// 
    /// Returns `true` if the font of the current format is italic; otherwise returns
    /// false.
    /// 
    /// **See also:** [`set_font_italic()`]
    font_italic() -> bool,
    /// 
    /// Returns the text color of the current format.
    /// 
    /// **See also:** [`set_text_color()`]
    text_color() -> Color,
    /// 
    /// Returns the text background color of the current format.
    /// 
    /// **See also:** [`set_text_background_color()`]
    text_background_color() -> Color,
    /// 
    /// Returns the font of the current format.
    /// 
    /// **See also:** [`set_current_font()`]
    /// [`set_font_family()`]
    /// [`set_font_point_size()`]
    current_font() -> Font,
    /// 
    /// Returns the alignment of the current paragraph.
    /// 
    /// **See also:** [`set_alignment()`]
    alignment() -> Rute::Alignment,
    /// 
    /// Merges the properties specified in *modifier* into the current character
    /// format by calling QTextCursor::mergeCharFormat on the editor's cursor.
    /// If the editor has a selection then the properties of *modifier* are
    /// directly applied to the selection.
    /// 
    /// **See also:** [`TextCursor::merge_char_format`]
    merge_current_char_format(modifier: &TextCharFormatType),
    /// 
    /// Sets the char format that is be used when inserting new text to *format* by calling QTextCursor::setCharFormat() on the editor's
    /// cursor. If the editor has a selection then the char format is
    /// directly applied to the selection.
    set_current_char_format(format: &TextCharFormatType),
    /// 
    /// Returns the char format that is used when inserting new text.
    /// 
    /// This signal is emitted if the current character format has changed, for
    /// example caused by a change of the cursor position.
    /// 
    /// The new format is *f.*
    /// 
    /// **See also:** [`set_current_char_format()`]
    current_char_format() -> TextCharFormat,
    /// 
    /// The value can be any combination of the values in the
    /// AutoFormattingFlag enum. The default is AutoNone. Choose
    /// AutoAll to enable all automatic formatting.
    /// 
    /// Currently, the only automatic formatting feature provided is
    /// AutoBulletList; future versions of Qt may offer more.
    auto_formatting() -> TextEdit::AutoFormatting,
    set_auto_formatting(features: TextEdit::AutoFormatting),
    /// **Tab** changes focus or is accepted as input
    /// 
    /// In some occasions text edits should not allow the user to input
    /// tabulators or change indentation using the **Tab** key, as this breaks
    /// the focus chain. The default is false.
    /// 
    tab_changes_focus() -> bool,
    set_tab_changes_focus(b: bool),
    set_document_title(title: String),
    /// 
    /// By default, for a newly-created, empty document, this property contains
    /// an empty string.
    document_title() -> String,
    is_undo_redo_enabled() -> bool,
    set_undo_redo_enabled(enable: bool),
    /// 
    /// The default mode is WidgetWidth which causes words to be
    /// wrapped at the right edge of the text edit. Wrapping occurs at
    /// whitespace, keeping whole words intact. If you want wrapping to
    /// occur within words use setWordWrapMode(). If you set a wrap mode of
    /// FixedPixelWidth or FixedColumnWidth you should also call
    /// setLineWrapColumnOrWidth() with the width you want.
    /// 
    /// **See also:** lineWrapColumnOrWidth
    line_wrap_mode() -> TextEdit::LineWrapMode,
    set_line_wrap_mode(mode: TextEdit::LineWrapMode),
    /// 
    /// If the wrap mode is FixedPixelWidth, the value is the number of
    /// pixels from the left edge of the text edit at which text should be
    /// wrapped. If the wrap mode is FixedColumnWidth, the value is the
    /// column number (in character columns) from the left edge of the
    /// text edit at which text should be wrapped.
    /// 
    /// By default, this property contains a value of 0.
    /// 
    /// **See also:** lineWrapMode
    line_wrap_column_or_width() -> i32,
    set_line_wrap_column_or_width(w: i32),
    /// 
    /// By default, this property is set to QTextOption::WrapAtWordBoundaryOrAnywhere.
    /// 
    /// **See also:** [`TextOption::wrap_mode()`]
    word_wrap_mode() -> TextOption::WrapMode,
    set_word_wrap_mode(policy: TextOption::WrapMode),
    /// 
    /// Finds the next occurrence of the string, *exp,* using the given
    /// *options.* Returns `true` if *exp* was found and changes the
    /// cursor to select the match; otherwise returns `false.`
    /// 
    /// **Overloads**
    /// Finds the next occurrence, matching the regular expression, *exp,* using the given
    /// *options.* The QTextDocument::FindCaseSensitively option is ignored for this overload,
    /// use QRegExp::caseSensitivity instead.
    /// 
    /// Returns `true` if a match was found and changes the cursor to select the match;
    /// otherwise returns `false.`
    find(exp: String, options: TextDocument::FindFlags) -> bool,
    /// 
    /// Finds the next occurrence of the string, *exp,* using the given
    /// *options.* Returns `true` if *exp* was found and changes the
    /// cursor to select the match; otherwise returns `false.`
    /// 
    /// **Overloads**
    /// Finds the next occurrence, matching the regular expression, *exp,* using the given
    /// *options.* The QTextDocument::FindCaseSensitively option is ignored for this overload,
    /// use QRegExp::caseSensitivity instead.
    /// 
    /// Returns `true` if a match was found and changes the cursor to select the match;
    /// otherwise returns `false.`
    [org_name(find)]
    find_2(exp: &RegExpType, options: TextDocument::FindFlags) -> bool,
    /// 
    /// QString QTextEdit::toPlainText() const
    /// 
    /// Returns the text of the text edit as plain text.
    /// 
    /// **See also:** [`TextEdit::set_plain_text`]
    to_plain_text() -> String,
    to_html() -> String,
    /// 
    /// Ensures that the cursor is visible by scrolling the text edit if
    /// necessary.
    ensure_cursor_visible(),
    /// 
    /// Loads the resource specified by the given *type* and *name.*
    /// 
    /// This function is an extension of QTextDocument::loadResource().
    /// 
    /// **See also:** [`TextDocument::load_resource`]
    [event] load_resource(type: i32, name: &UrlType) -> Variant,
    /// This function creates the standard context menu which is shown
    /// when the user clicks on the text edit with the right mouse
    /// button. It is called from the default contextMenuEvent() handler.
    /// The popup menu's ownership is transferred to the caller.
    /// 
    /// We recommend that you use the createStandardContextMenu(QPoint) version instead
    /// which will enable the actions that are sensitive to where the user clicked.
    /// 
    /// This function creates the standard context menu which is shown
    /// when the user clicks on the text edit with the right mouse
    /// button. It is called from the default contextMenuEvent() handler
    /// and it takes the *position* in document coordinates where the mouse click was.
    /// This can enable actions that are sensitive to the position where the user clicked.
    /// The popup menu's ownership is transferred to the caller.
    create_standard_context_menu() -> Menu?,
    /// This function creates the standard context menu which is shown
    /// when the user clicks on the text edit with the right mouse
    /// button. It is called from the default contextMenuEvent() handler.
    /// The popup menu's ownership is transferred to the caller.
    /// 
    /// We recommend that you use the createStandardContextMenu(QPoint) version instead
    /// which will enable the actions that are sensitive to where the user clicked.
    /// 
    /// This function creates the standard context menu which is shown
    /// when the user clicks on the text edit with the right mouse
    /// button. It is called from the default contextMenuEvent() handler
    /// and it takes the *position* in document coordinates where the mouse click was.
    /// This can enable actions that are sensitive to the position where the user clicked.
    /// The popup menu's ownership is transferred to the caller.
    [org_name(createStandardContextMenu)]
    create_standard_context_menu_2(position: &PointType) -> Menu?,
    /// 
    /// returns a QTextCursor at position *pos* (in viewport coordinates).
    cursor_for_position(pos: &PointType) -> TextCursor,
    /// 
    /// returns a rectangle (in viewport coordinates) that includes the
    /// *cursor.*
    /// 
    /// returns a rectangle (in viewport coordinates) that includes the
    /// cursor of the text edit.
    cursor_rect(cursor: &TextCursorType) -> Rect,
    /// 
    /// returns a rectangle (in viewport coordinates) that includes the
    /// *cursor.*
    /// 
    /// returns a rectangle (in viewport coordinates) that includes the
    /// cursor of the text edit.
    [org_name(cursorRect)]
    cursor_rect_2() -> Rect,
    /// 
    /// Returns the reference of the anchor at position *pos,* or an
    /// empty string if no anchor exists at that point.
    anchor_at(pos: &PointType) -> String,
    /// 
    /// As with many text editors, the text editor widget can be configured
    /// to insert or overwrite existing text with new text entered by the user.
    /// 
    /// If this property is `true,` existing text is overwritten, character-for-character
    /// by new text; otherwise, text is inserted at the cursor position, displacing
    /// existing text.
    /// 
    /// By default, this property is `false` (new text does not overwrite existing text).
    overwrite_mode() -> bool,
    set_overwrite_mode(overwrite: bool),
    /// 
    /// By default, this property contains a value of 80 pixels.
    tab_stop_width() -> i32,
    set_tab_stop_width(width: i32),
    /// 
    /// By default, this property contains a value of 80 pixels.
    tab_stop_distance() -> f32,
    set_tab_stop_distance(distance: f32),
    /// 
    /// This property specifies the width of the cursor in pixels. The default value is 1.
    cursor_width() -> i32,
    set_cursor_width(width: i32),
    /// 
    /// When this propery is set to false text edit will accept only
    /// plain text input from the user. For example through clipboard or drag and drop.
    /// 
    /// This property's default is true.
    accept_rich_text() -> bool,
    set_accept_rich_text(accept: bool),
    /// 
    /// Moves the cursor by performing the given *operation.*
    /// 
    /// If *mode* is QTextCursor::KeepAnchor, the cursor selects the text it moves over.
    /// This is the same effect that the user achieves when they hold down the Shift key
    /// and move the cursor with the cursor keys.
    /// 
    /// **See also:** [`TextCursor::move_position`]
    move_cursor(operation: TextCursor::MoveOperation, mode: TextCursor::MoveMode),
    /// 
    /// Returns whether text can be pasted from the clipboard into the textedit.
    can_paste() -> bool,
    print(printer: *PagedPaintDeviceType),
    /// 
    [event] input_method_query(property: Rute::InputMethodQuery) -> Variant,
    /// 
    [org_name(inputMethodQuery)]
    input_method_query_2(query: Rute::InputMethodQuery, argument: VariantType) -> Variant,
    /// 
    /// Sets the point size of the current format to *s.*
    /// 
    /// Note that if *s* is zero or negative, the behavior of this
    /// function is not defined.
    /// 
    /// **See also:** [`font_point_size()`]
    /// [`set_current_font()`]
    /// [`set_font_family()`]
    set_font_point_size(s: f32),
    /// 
    /// Sets the font family of the current format to *fontFamily.*
    /// 
    /// **See also:** [`font_family()`]
    /// [`set_current_font()`]
    set_font_family(font_family: String),
    /// 
    /// Sets the font weight of the current format to the given *weight,*
    /// where the value used is in the range defined by the QFont::Weight
    /// enum.
    /// 
    /// **See also:** [`font_weight()`]
    /// [`set_current_font()`]
    /// [`set_font_family()`]
    set_font_weight(w: i32),
    /// 
    /// If *underline* is true, sets the current format to underline;
    /// otherwise sets the current format to non-underline.
    /// 
    /// **See also:** [`font_underline()`]
    set_font_underline(b: bool),
    /// 
    /// If *italic* is true, sets the current format to italic;
    /// otherwise sets the current format to non-italic.
    /// 
    /// **See also:** [`font_italic()`]
    set_font_italic(b: bool),
    /// 
    /// Sets the text color of the current format to *c.*
    /// 
    /// **See also:** [`text_color()`]
    set_text_color(c: &ColorType),
    /// 
    /// Sets the text background color of the current format to *c.*
    /// 
    /// **See also:** [`text_background_color()`]
    set_text_background_color(c: &ColorType),
    /// 
    /// Sets the font of the current format to *f.*
    /// 
    /// **See also:** [`current_font()`]
    /// [`set_font_point_size()`]
    /// [`set_font_family()`]
    set_current_font(f: &FontType),
    /// 
    /// Sets the alignment of the current paragraph to *a.* Valid
    /// alignments are Qt::AlignLeft, Qt::AlignRight,
    /// Qt::AlignJustify and Qt::AlignCenter (which centers
    /// horizontally).
    set_alignment(a: Rute::Alignment),
    /// 
    /// Changes the text of the text edit to the string *text.*
    /// Any previous text is removed.
    /// 
    /// *text* is interpreted as plain text.
    /// 
    /// Note that the undo/redo history is cleared by this function.
    /// 
    /// **See also:** [`to_plain_text()`]
    set_plain_text(text: String),
    set_html(text: String),
    /// 
    /// Sets the visible *cursor.*
    /// 
    /// Sets the text color of the current format to *c.*
    /// 
    /// **See also:** [`text_color()`]
    /// 
    /// Sets the text background color of the current format to *c.*
    /// 
    /// **See also:** [`text_background_color()`]
    /// 
    /// Sets the text edit's *text.* The text can be plain text or HTML
    /// and the text edit will try to guess the right format.
    /// 
    /// Use setHtml() or setPlainText() directly to avoid text edit's guessing.
    /// 
    /// **See also:** [`to_plain_text()`]
    /// [`to_html()`]
    set_text(text: String),
    /// 
    /// Copies the selected text to the clipboard and deletes it from
    /// the text edit.
    /// 
    /// If there is no selected text nothing happens.
    /// 
    /// **See also:** [`copy()`]
    /// [`paste()`]
    cut(),
    /// 
    /// Copies any selected text to the clipboard.
    /// 
    /// **See also:** [`copy_available()`]
    /// 
    /// This signal is emitted when text is selected or de-selected in the
    /// text edit.
    /// 
    /// When text is selected this signal will be emitted with *yes* set
    /// to true. If no text has been selected or if the selected text is
    /// de-selected this signal is emitted with *yes* set to false.
    /// 
    /// If *yes* is true then copy() can be used to copy the selection to
    /// the clipboard. If *yes* is false then copy() does nothing.
    /// 
    /// **See also:** [`selection_changed()`]
    copy(),
    /// 
    /// Pastes the text from the clipboard into the text edit at the
    /// current cursor position.
    /// 
    /// If there is no text in the clipboard nothing happens.
    /// 
    /// To change the behavior of this function, i.e. to modify what
    /// QTextEdit can paste and how it is being pasted, reimplement the
    /// virtual canInsertFromMimeData() and insertFromMimeData()
    /// functions.
    /// 
    /// **See also:** [`cut()`]
    /// [`copy()`]
    paste(),
    /// 
    /// Users are only able to undo or redo actions if this property is
    /// true, and if there is an action that can be undone (or redone).
    /// 
    /// Undoes the last operation.
    /// 
    /// If there is no operation to undo, i.e. there is no undo step in
    /// the undo/redo history, nothing happens.
    /// 
    /// **See also:** [`redo()`]
    /// 
    /// This signal is emitted whenever undo operations become available
    /// ( *available* is true) or unavailable ( *available* is false).
    undo(),
    /// 
    /// Redoes the last operation.
    /// 
    /// If there is no operation to redo, i.e. there is no redo step in
    /// the undo/redo history, nothing happens.
    /// 
    /// **See also:** [`undo()`]
    /// 
    /// This signal is emitted whenever redo operations become available
    /// ( *available* is true) or unavailable ( *available* is false).
    redo(),
    /// 
    /// Deletes all the text in the text edit.
    /// 
    /// Note that the undo/redo history is cleared by this function.
    /// 
    /// **See also:** [`cut()`]
    /// [`set_plain_text()`]
    /// [`set_html()`]
    clear(),
    /// 
    /// Selects all text.
    /// 
    /// **See also:** [`copy()`]
    /// [`cut()`]
    /// [`text_cursor()`]
    select_all(),
    /// 
    /// Convenience slot that inserts *text* at the current
    /// cursor position.
    /// 
    /// It is equivalent to
    /// 
    insert_plain_text(text: String),
    insert_html(text: String),
    /// 
    /// Appends a new paragraph with *text* to the end of the text edit.
    /// 
    /// **Note**: The new paragraph appended will have the same character format and
    /// block format as the current paragraph, determined by the position of the cursor.
    /// 
    /// **See also:** [`current_char_format()`]
    /// [`TextCursor::block_format`]
    append(text: String),
    /// 
    /// Scrolls the text edit so that the anchor with the given *name* is
    /// visible; does nothing if the *name* is empty, or is already
    /// visible, or isn't found.
    scroll_to_anchor(name: String),
    /// 
    /// Zooms in on the text by making the base font size *range*
    /// points larger and recalculating all font sizes to be the new size.
    /// This does not change the size of any images.
    /// 
    /// **See also:** [`zoom_out()`]
    zoom_in(range: i32),
    /// 
    /// **Overloads**
    /// Zooms out on the text by making the base font size *range* points
    /// smaller and recalculating all font sizes to be the new size. This
    /// does not change the size of any images.
    /// 
    /// **See also:** [`zoom_in()`]
    zoom_out(range: i32),
    /// 
    /// This signal is emitted whenever the document's content changes; for
    /// example, when text is inserted or deleted, or when formatting is applied.
    [signal] text_changed(),
    /// 
    /// This signal is emitted whenever undo operations become available
    /// ( *available* is true) or unavailable ( *available* is false).
    [signal] undo_available(b: bool),
    /// 
    /// This signal is emitted whenever redo operations become available
    /// ( *available* is true) or unavailable ( *available* is false).
    [signal] redo_available(b: bool),
    /// 
    /// This signal is emitted if the current character format has changed, for
    /// example caused by a change of the cursor position.
    /// 
    /// The new format is *f.*
    /// 
    /// **See also:** [`set_current_char_format()`]
    [signal] current_char_format_changed(format: &TextCharFormatType),
    /// 
    /// This signal is emitted when text is selected or de-selected in the
    /// text edit.
    /// 
    /// When text is selected this signal will be emitted with *yes* set
    /// to true. If no text has been selected or if the selected text is
    /// de-selected this signal is emitted with *yes* set to false.
    /// 
    /// If *yes* is true then copy() can be used to copy the selection to
    /// the clipboard. If *yes* is false then copy() does nothing.
    /// 
    /// **See also:** [`selection_changed()`]
    [signal] copy_available(b: bool),
    /// 
    /// This signal is emitted whenever the selection changes.
    /// 
    /// **See also:** [`copy_available()`]
    [signal] selection_changed(),
    /// 
    /// This signal is emitted whenever the position of the
    /// cursor changed.
    [signal] cursor_position_changed(),
    [event] event(e: *EventType) -> bool,
    [event] timer_event(e: *TimerEventType),
    /// 
    [event] key_press_event(e: *KeyEventType),
    /// 
    [event] key_release_event(e: *KeyEventType),
    /// 
    [event] resize_event(e: *ResizeEventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive paint events passed in *event.*
    /// It is usually unnecessary to reimplement this function in a subclass of QTextEdit.
    /// 
    /// **Warning**: The underlying text document must not be modified from within a reimplementation
    /// of this function.
    [event] paint_event(e: *PaintEventType),
    /// 
    [event] mouse_press_event(e: *MouseEventType),
    /// 
    [event] mouse_move_event(e: *MouseEventType),
    /// 
    [event] mouse_release_event(e: *MouseEventType),
    /// 
    [event] mouse_double_click_event(e: *MouseEventType),
    /// 
    [event] focus_next_prev_child(next: bool) -> bool,
    /// 
    /// Shows the standard context menu created with createStandardContextMenu().
    /// 
    /// If you do not want the text edit to have a context menu, you can set
    /// its [contextMenuPolicy](contextMenuPolicy)
    /// to Qt::NoContextMenu. If you want to
    /// customize the context menu, reimplement this function. If you want
    /// to extend the standard context menu, reimplement this function, call
    /// createStandardContextMenu() and extend the menu returned.
    /// 
    /// Information about the event is passed in the *event* object.
    /// 
    [event] context_menu_event(e: *ContextMenuEventType),
    /// 
    [event] drag_enter_event(e: *DragEnterEventType),
    /// 
    [event] drag_leave_event(e: *DragLeaveEventType),
    /// 
    [event] drag_move_event(e: *DragMoveEventType),
    /// 
    [event] drop_event(e: *DropEventType),
    /// 
    [event] focus_in_event(e: *FocusEventType),
    /// 
    [event] focus_out_event(e: *FocusEventType),
    /// 
    [event] show_event(arg0: *ShowEventType),
    /// 
    [event] change_event(e: *EventType),
    [event] wheel_event(e: *WheelEventType),
    /// 
    /// This function returns a new MIME data object to represent the contents
    /// of the text edit's current selection. It is called when the selection needs
    /// to be encapsulated into a new QMimeData object; for example, when a drag
    /// and drop operation is started, or when data is copied to the clipboard.
    /// 
    /// If you reimplement this function, note that the ownership of the returned
    /// QMimeData object is passed to the caller. The selection can be retrieved
    /// by using the textCursor() function.
    [event] create_mime_data_from_selection() -> MimeData?,
    /// 
    /// This function returns `true` if the contents of the MIME data object, specified
    /// by *source,* can be decoded and inserted into the document. It is called
    /// for example when during a drag operation the mouse enters this widget and it
    /// is necessary to determine whether it is possible to accept the drag and drop
    /// operation.
    /// 
    /// Reimplement this function to enable drag and drop support for additional MIME types.
    [event] can_insert_from_mime_data(source: *MimeDataType) -> bool,
    /// 
    /// This function inserts the contents of the MIME data object, specified
    /// by *source,* into the text edit at the current cursor position. It is
    /// called whenever text is inserted as the result of a clipboard paste
    /// operation, or when the text edit accepts data from a drag and drop
    /// operation.
    /// 
    /// Reimplement this function to enable drag and drop support for additional MIME types.
    [event] insert_from_mime_data(source: *MimeDataType),
    /// 
    [event] input_method_event(arg0: *InputMethodEventType),
    /// 
    [event] scroll_contents_by(dx: i32, dy: i32),
    [event] do_set_text_cursor(cursor: &TextCursorType),
    zoom_in_f(range: f32),
}

[org_name(QTextEdit)]
enum LineWrapMode {
    /// 
    NoWrap,
    /// 
    WidgetWidth,
    /// 
    FixedPixelWidth,
    /// 
    FixedColumnWidth,
}

[org_name(QTextEdit)]
enum AutoFormattingFlag {
    /// Don't do any automatic formatting.
    AutoNone,
    /// Automatically create bullet lists (e.g. when
    AutoBulletList,
    /// Apply all automatic formatting. Currently only
    AutoAll,
}

// vim: syntax=rust expandtab ts=4 sw=4
