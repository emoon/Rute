[org_name(QTextEdit)]
enum LineWrapMode {
    NoWrap,
    WidgetWidth,
    FixedPixelWidth,
    FixedColumnWidth,
}

[org_name(QTextEdit)]
enum AutoFormattingFlag {
    AutoNone,
    AutoBulletList,
    AutoAll,
}

struct TextEdit : AbstractScrollArea {
    set_document(document: &TextDocumentType),
    document() -> TextDocument?,
    set_placeholder_text(placeholder_text: String),
    placeholder_text() -> String,
    set_text_cursor(cursor: &TextCursorType),
    text_cursor() -> TextCursor,
    is_read_only() -> bool,
    set_read_only(ro: bool),
    set_text_interaction_flags(flags: Rute::TextInteractionFlags),
    text_interaction_flags() -> Rute::TextInteractionFlags,
    font_point_size() -> f32,
    font_family() -> String,
    font_weight() -> i32,
    font_underline() -> bool,
    font_italic() -> bool,
    text_color() -> Color,
    text_background_color() -> Color,
    current_font() -> Font,
    alignment() -> Rute::Alignment,
    merge_current_char_format(modifier: &TextCharFormatType),
    set_current_char_format(format: &TextCharFormatType),
    current_char_format() -> TextCharFormat,
    auto_formatting() -> AutoFormatting,
    set_auto_formatting(features: AutoFormatting),
    tab_changes_focus() -> bool,
    set_tab_changes_focus(b: bool),
    set_document_title(title: String),
    document_title() -> String,
    is_undo_redo_enabled() -> bool,
    set_undo_redo_enabled(enable: bool),
    line_wrap_mode() -> TextEdit::LineWrapMode,
    set_line_wrap_mode(mode: TextEdit::LineWrapMode),
    line_wrap_column_or_width() -> i32,
    set_line_wrap_column_or_width(w: i32),
    word_wrap_mode() -> TextOption::WrapMode,
    set_word_wrap_mode(policy: TextOption::WrapMode),
    find(exp: String, options: TextDocument::FindFlags) -> bool,
    find(exp: &RegExpType, options: TextDocument::FindFlags) -> bool,
    to_plain_text() -> String,
    to_html() -> String,
    ensure_cursor_visible(),
    [replace] load_resource(type: i32, name: &UrlType) -> Variant,
    create_standard_context_menu() -> Menu?,
    create_standard_context_menu(position: &PointType) -> Menu?,
    cursor_for_position(pos: &PointType) -> TextCursor,
    cursor_rect(cursor: &TextCursorType) -> Rect,
    cursor_rect() -> Rect,
    anchor_at(pos: &PointType) -> String,
    overwrite_mode() -> bool,
    set_overwrite_mode(overwrite: bool),
    tab_stop_width() -> i32,
    set_tab_stop_width(width: i32),
    tab_stop_distance() -> f32,
    set_tab_stop_distance(distance: f32),
    cursor_width() -> i32,
    set_cursor_width(width: i32),
    accept_rich_text() -> bool,
    set_accept_rich_text(accept: bool),
    move_cursor(operation: TextCursor::MoveOperation, mode: TextCursor::MoveMode),
    can_paste() -> bool,
    print(printer: &PagedPaintDeviceType),
    [replace] input_method_query(property: Rute::InputMethodQuery) -> Variant,
    input_method_query(query: Rute::InputMethodQuery, argument: VariantType) -> Variant,
    set_font_point_size(s: f32),
    set_font_family(font_family: String),
    set_font_weight(w: i32),
    set_font_underline(b: bool),
    set_font_italic(b: bool),
    set_text_color(c: &ColorType),
    set_text_background_color(c: &ColorType),
    set_current_font(f: &FontType),
    set_alignment(a: Rute::Alignment),
    set_plain_text(text: String),
    set_html(text: String),
    set_text(text: String),
    cut(),
    copy(),
    paste(),
    undo(),
    redo(),
    clear(),
    select_all(),
    insert_plain_text(text: String),
    insert_html(text: String),
    append(text: String),
    scroll_to_anchor(name: String),
    zoom_in(range: i32),
    zoom_out(range: i32),
    [event] text_changed(),
    [event] undo_available(b: bool),
    [event] redo_available(b: bool),
    [event] current_char_format_changed(format: &TextCharFormatType),
    [event] copy_available(b: bool),
    [event] selection_changed(),
    [event] cursor_position_changed(),
    [replace] event(e: &EventType) -> bool,
    [replace] timer_event(e: &TimerEventType),
    [replace] key_press_event(e: &KeyEventType),
    [replace] key_release_event(e: &KeyEventType),
    [replace] resize_event(e: &ResizeEventType),
    [replace] paint_event(e: &PaintEventType),
    [replace] mouse_press_event(e: &MouseEventType),
    [replace] mouse_move_event(e: &MouseEventType),
    [replace] mouse_release_event(e: &MouseEventType),
    [replace] mouse_double_click_event(e: &MouseEventType),
    [replace] focus_next_prev_child(next: bool) -> bool,
    [replace] context_menu_event(e: &ContextMenuEventType),
    [replace] drag_enter_event(e: &DragEnterEventType),
    [replace] drag_leave_event(e: &DragLeaveEventType),
    [replace] drag_move_event(e: &DragMoveEventType),
    [replace] drop_event(e: &DropEventType),
    [replace] focus_in_event(e: &FocusEventType),
    [replace] focus_out_event(e: &FocusEventType),
    [replace] show_event(arg0: &ShowEventType),
    [replace] change_event(e: &EventType),
    [replace] wheel_event(e: &WheelEventType),
    [replace] create_mime_data_from_selection() -> MimeData?,
    [replace] can_insert_from_mime_data(source: &MimeDataType) -> bool,
    [replace] insert_from_mime_data(source: &MimeDataType),
    [replace] input_method_event(arg0: &InputMethodEventType),
    [replace] scroll_contents_by(dx: i32, dy: i32),
    [replace] do_set_text_cursor(cursor: &TextCursorType),
    zoom_in_f(range: f32),
}

// vim: syntax=rust expandtab ts=4 sw=4
