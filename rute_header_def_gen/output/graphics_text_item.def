enum GraphicsTextItemFixMeEnums {
    Type,
}

struct GraphicsTextItem : GraphicsObject {
    to_html() -> String,
    set_html(html: String),
    to_plain_text() -> String,
    set_plain_text(text: String),
    font() -> Font,
    set_font(font: &FontType),
    set_default_text_color(c: &ColorType),
    default_text_color() -> Color,
    [replace] bounding_rect() -> RectF,
    [replace] shape() -> PainterPath,
    [replace] contains(point: &PointFType) -> bool,
    [replace] paint(painter: &PainterType, option: &StyleOptionGraphicsItemType, widget: &WidgetType),
    [replace] is_obscured_by(item: &GraphicsItemType) -> bool,
    [replace] opaque_area() -> PainterPath,
    [replace] type() -> i32,
    set_text_width(width: f32),
    text_width() -> f32,
    adjust_size(),
    set_document(document: &TextDocumentType),
    document() -> TextDocument?,
    set_text_interaction_flags(flags: Rute::TextInteractionFlags),
    text_interaction_flags() -> Rute::TextInteractionFlags,
    set_tab_changes_focus(b: bool),
    tab_changes_focus() -> bool,
    set_open_external_links(open: bool),
    open_external_links() -> bool,
    set_text_cursor(cursor: &TextCursorType),
    text_cursor() -> TextCursor,
    [event] link_activated(arg0: String),
    [event] link_hovered(arg0: String),
    [replace] scene_event(event: &EventType) -> bool,
    [replace] mouse_press_event(event: &GraphicsSceneMouseEventType),
    [replace] mouse_move_event(event: &GraphicsSceneMouseEventType),
    [replace] mouse_release_event(event: &GraphicsSceneMouseEventType),
    [replace] mouse_double_click_event(event: &GraphicsSceneMouseEventType),
    [replace] context_menu_event(event: &GraphicsSceneContextMenuEventType),
    [replace] key_press_event(event: &KeyEventType),
    [replace] key_release_event(event: &KeyEventType),
    [replace] focus_in_event(event: &FocusEventType),
    [replace] focus_out_event(event: &FocusEventType),
    [replace] drag_enter_event(event: &GraphicsSceneDragDropEventType),
    [replace] drag_leave_event(event: &GraphicsSceneDragDropEventType),
    [replace] drag_move_event(event: &GraphicsSceneDragDropEventType),
    [replace] drop_event(event: &GraphicsSceneDragDropEventType),
    [replace] input_method_event(event: &InputMethodEventType),
    [replace] hover_enter_event(event: &GraphicsSceneHoverEventType),
    [replace] hover_move_event(event: &GraphicsSceneHoverEventType),
    [replace] hover_leave_event(event: &GraphicsSceneHoverEventType),
    [replace] input_method_query(query: Rute::InputMethodQuery) -> Variant,
    [replace] supports_extension(extension: GraphicsItem::Extension) -> bool,
    [replace] set_extension(extension: GraphicsItem::Extension, variant: &VariantType),
    [replace] extension(variant: &VariantType) -> Variant,
}

// vim: syntax=rust expandtab ts=4 sw=4
