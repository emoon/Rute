struct GridLayout : Layout {
    size_hint() -> SizeType,
    minimum_size() -> SizeType,
    maximum_size() -> SizeType,
    set_horizontal_spacing(i32 spacing),
    horizontal_spacing() -> i32,
    set_vertical_spacing(i32 spacing),
    vertical_spacing() -> i32,
    set_spacing(i32 spacing),
    spacing() -> i32,
    set_row_minimum_height(i32 row, i32 min_size),
    set_column_minimum_width(i32 column, i32 min_size),
    row_minimum_height(i32 row) -> i32,
    column_minimum_width(i32 column) -> i32,
    column_count() -> i32,
    row_count() -> i32,
    cell_rect(i32 row, i32 column) -> RectType,
    has_height_for_width() -> bool,
    height_for_width(i32 arg0) -> i32,
    minimum_height_for_width(i32 arg0) -> i32,
    expanding_directions() -> Rute::Orientations,
    invalidate(),
    add_widget(&WidgetType w),
    add_widget(&WidgetType arg0, i32 row, i32 column, Rute::Alignment arg1),
    add_widget(&WidgetType arg0, i32 row, i32 column, i32 row_span, i32 column_span, Rute::Alignment arg1),
    add_layout(&LayoutType arg0, i32 row, i32 column, Rute::Alignment arg1),
    add_layout(&LayoutType arg0, i32 row, i32 column, i32 row_span, i32 column_span, Rute::Alignment arg1),
    set_origin_corner(Rute::Corner arg0),
    origin_corner() -> Rute::Corner,
    item_at(i32 index) -> &LayoutItemType,
    item_at_position(i32 row, i32 column) -> &LayoutItemType,
    take_at(i32 index) -> &LayoutItemType,
    count() -> i32,
    add_item(&LayoutItemType item, i32 row, i32 column, i32 row_span, i32 column_span, Rute::Alignment arg0),
    set_default_positioning(i32 n, Rute::Orientation orient),
    get_item_position(i32 idx, &i32 row, &i32 column, &i32 row_span, &i32 column_span),
    add_item(&LayoutItemType arg0),
}

// vim: syntax=rust expandtab ts=4 sw=4
