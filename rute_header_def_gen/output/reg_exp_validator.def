/// 
/// QRegExpValidator uses a regular expression (regexp) to
/// determine whether an input string is [Acceptable,](Acceptable,)
/// [Intermediate,](Intermediate,)
/// or [Invalid.](Invalid.)
/// The regexp can either be supplied
/// when the QRegExpValidator is constructed, or at a later time.
/// 
/// When QRegExpValidator determines whether a string is [Acceptable](Acceptable)
/// 
/// or not, the regexp is treated as if it begins with the start of string
/// assertion ( **^** ) and ends with the end of string assertion
/// ( **$** ); the match is against the entire input string, or from
/// the given position if a start position greater than zero is given.
/// 
/// If a string is a prefix of an [Acceptable](Acceptable)
/// string, it is considered
/// [Intermediate.](Intermediate.)
/// For example, and are [Intermediate](Intermediate)
/// for the
/// regexp **[A-Z][0-9]** (whereas would be [Invalid).](Invalid).)
/// 
/// For a brief introduction to Qt's regexp engine, see [QRegExp.](QRegExp.)
/// 
/// Example of use:
/// 
/// Below we present some examples of validators. In practice they would
/// normally be associated with a widget as in the example above.
/// 
/// **See also:** [`RegExp`]
/// [`IntValidator`]
/// [`DoubleValidator`]
/// {Settings Editor Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct RegExpValidator : Validator {
    /// 
    /// Returns [Acceptable](Acceptable)
    /// if *input* is matched by the regular
    /// expression for this validator, [Intermediate](Intermediate)
    /// if it has matched
    /// partially (i.e. could be a valid match if additional valid
    /// characters are added), and [Invalid](Invalid)
    /// if *input* is not matched.
    /// 
    /// Additionally, if *input* is not matched, the *pos* parameter is set to
    /// the length of the *input* parameter.
    /// 
    /// For example, if the regular expression is **\\w\\d\\d**
    /// (word-character, digit, digit) then is [Acceptable,](Acceptable,)
    /// 
    /// is [Intermediate,](Intermediate,)
    /// and is [Invalid.](Invalid.)
    /// 
    /// **See also:** [`RegExp::exact_match`]
    [event] validate(input: String, pos: &i32) -> Validator::State,
    set_reg_exp(rx: &RegExpType),
    /// 
    /// By default, this property contains a regular expression with the pattern `.*`
    /// that matches any string.
    reg_exp() -> RegExp?,
    [signal] reg_exp_changed(reg_exp: &RegExpType),
}

// vim: syntax=rust expandtab ts=4 sw=4
