/// 
/// A document is composed of a list of blocks, represented by QTextBlock
/// objects. Each block can contain an item of some kind, such as a
/// paragraph of text, a table, a list, or an image. Every block has an
/// associated QTextBlockFormat that specifies its characteristics.
/// 
/// To cater for left-to-right and right-to-left languages you can set
/// a block's direction with setDirection(). Paragraph alignment is
/// set with setAlignment(). Margins are controlled by setTopMargin(),
/// setBottomMargin(), setLeftMargin(), setRightMargin(). Overall
/// indentation is set with setIndent(), the indentation of the first
/// line with setTextIndent().
/// 
/// Line spacing is set with setLineHeight() and retrieved via lineHeight()
/// and lineHeightType(). The types of line spacing available are in the
/// LineHeightTypes enum.
/// 
/// Line breaking can be enabled and disabled with setNonBreakableLines().
/// 
/// The brush used to paint the paragraph's background
/// is set with [setBackground()](QTextFormat::setBackground())
/// , and other
/// aspects of the text's appearance can be customized by using the
/// [setProperty()](QTextFormat::setProperty())
/// function with the
/// `OutlinePen,` `ForegroundBrush,` and `BackgroundBrush`
/// [QTextFormat::Property](QTextFormat::Property)
/// values.
/// 
/// If a text block is part of a list, it can also have a list format that
/// is accessible with the listFormat() function.
/// 
/// **See also:** QTextBlock
/// QTextCharFormat
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QTextBlockFormat)]
enum LineHeightTypes {
    SingleHeight,
    ProportionalHeight,
    FixedHeight,
    MinimumHeight,
    LineDistanceHeight,
}

struct TextBlockFormat : TextFormat {
    /// 
    /// Returns `true` if this block format is valid; otherwise returns
    /// false.
    is_valid() -> bool,
    /// 
    /// Sets the paragraph's *alignment.*
    /// 
    /// **See also:** alignment()
    set_alignment(alignment: Rute::Alignment),
    /// 
    /// Returns the paragraph's alignment.
    /// 
    /// **See also:** setAlignment()
    alignment() -> Rute::Alignment,
    /// 
    /// Sets the paragraph's top *margin.*
    /// 
    /// **See also:** topMargin()
    /// setBottomMargin()
    /// setLeftMargin()
    /// setRightMargin()
    set_top_margin(margin: f32),
    /// 
    /// Returns the paragraph's top margin.
    /// 
    /// **See also:** setTopMargin()
    /// bottomMargin()
    top_margin() -> f32,
    /// 
    /// Sets the paragraph's bottom *margin.*
    /// 
    /// **See also:** bottomMargin()
    /// setTopMargin()
    /// setLeftMargin()
    /// setRightMargin()
    set_bottom_margin(margin: f32),
    /// 
    /// Returns the paragraph's bottom margin.
    /// 
    /// **See also:** setBottomMargin()
    /// topMargin()
    bottom_margin() -> f32,
    /// 
    /// Sets the paragraph's left *margin.* Indentation can be applied separately
    /// with setIndent().
    /// 
    /// **See also:** leftMargin()
    /// setRightMargin()
    /// setTopMargin()
    /// setBottomMargin()
    set_left_margin(margin: f32),
    /// 
    /// Returns the paragraph's left margin.
    /// 
    /// **See also:** setLeftMargin()
    /// rightMargin()
    /// indent()
    left_margin() -> f32,
    /// 
    /// Sets the paragraph's right *margin.*
    /// 
    /// **See also:** rightMargin()
    /// setLeftMargin()
    /// setTopMargin()
    /// setBottomMargin()
    set_right_margin(margin: f32),
    /// 
    /// Returns the paragraph's right margin.
    /// 
    /// **See also:** setRightMargin()
    /// leftMargin()
    right_margin() -> f32,
    /// 
    /// Sets the *indent* for the first line in the block. This allows the first
    /// line of a paragraph to be indented differently to the other lines,
    /// enhancing the readability of the text.
    /// 
    /// **See also:** textIndent()
    /// setLeftMargin()
    /// setRightMargin()
    /// setTopMargin()
    /// setBottomMargin()
    set_text_indent(aindent: f32),
    /// 
    /// Returns the paragraph's text indent.
    /// 
    /// **See also:** setTextIndent()
    text_indent() -> f32,
    /// 
    /// Sets the paragraph's *indentation.* Margins are set independently of
    /// indentation with setLeftMargin() and setTextIndent().
    /// The *indentation* is an integer that is multiplied with the document-wide
    /// standard indent, resulting in the actual indent of the paragraph.
    /// 
    /// **See also:** indent()
    /// QTextDocument::indentWidth()
    set_indent(indent: i32),
    /// 
    /// Returns the paragraph's indent.
    /// 
    /// **See also:** setIndent()
    indent() -> i32,
    /// 
    /// Sets the line height for the paragraph to the value given by *height*
    /// which is dependent on *heightType* in the way described by the
    /// LineHeightTypes enum.
    /// 
    /// **See also:** LineHeightTypes
    /// lineHeight()
    /// lineHeightType()
    set_line_height(height: f32, height_type: i32),
    /// 
    /// Returns the height of the lines in the paragraph based on the height of the
    /// script line given by *scriptLineHeight* and the specified *scaling*
    /// factor.
    /// 
    /// The value that is returned is also dependent on the given LineHeightType of
    /// the paragraph as well as the LineHeight setting that has been set for the
    /// paragraph.
    /// 
    /// The scaling is needed for heights that include a fixed number of pixels, to
    /// scale them appropriately for printing.
    /// 
    /// **See also:** LineHeightTypes
    /// setLineHeight()
    /// lineHeightType()
    /// 
    /// This returns the LineHeight property for the paragraph.
    /// 
    /// **See also:** LineHeightTypes
    /// setLineHeight()
    /// lineHeightType()
    /// 
    /// This returns the LineHeightType property of the paragraph.
    /// 
    /// **See also:** LineHeightTypes
    /// setLineHeight()
    /// lineHeight()
    line_height(script_line_height: f32, scaling: f32) -> f32,
    /// 
    /// Returns the height of the lines in the paragraph based on the height of the
    /// script line given by *scriptLineHeight* and the specified *scaling*
    /// factor.
    /// 
    /// The value that is returned is also dependent on the given LineHeightType of
    /// the paragraph as well as the LineHeight setting that has been set for the
    /// paragraph.
    /// 
    /// The scaling is needed for heights that include a fixed number of pixels, to
    /// scale them appropriately for printing.
    /// 
    /// **See also:** LineHeightTypes
    /// setLineHeight()
    /// lineHeightType()
    /// 
    /// This returns the LineHeight property for the paragraph.
    /// 
    /// **See also:** LineHeightTypes
    /// setLineHeight()
    /// lineHeightType()
    /// 
    /// This returns the LineHeightType property of the paragraph.
    /// 
    /// **See also:** LineHeightTypes
    /// setLineHeight()
    /// lineHeight()
    line_height() -> f32,
    /// 
    /// This returns the LineHeightType property of the paragraph.
    /// 
    /// **See also:** LineHeightTypes
    /// setLineHeight()
    /// lineHeight()
    line_height_type() -> i32,
    /// 
    /// If *b* is true, the lines in the paragraph are treated as
    /// non-breakable; otherwise they are breakable.
    /// 
    /// **See also:** nonBreakableLines()
    set_non_breakable_lines(b: bool),
    /// 
    /// Returns `true` if the lines in the paragraph are non-breakable;
    /// otherwise returns `false.`
    /// 
    /// **See also:** setNonBreakableLines()
    non_breakable_lines() -> bool,
    /// 
    /// Sets the page break policy for the paragraph to *policy.*
    /// 
    /// **See also:** pageBreakPolicy()
    set_page_break_policy(flags: TextFormat::PageBreakFlags),
    /// 
    /// Returns the currently set page break policy for the paragraph. The default is
    /// QTextFormat::PageBreak_Auto.
    /// 
    /// **See also:** setPageBreakPolicy()
    page_break_policy() -> TextFormat::PageBreakFlags,
    /// 
    /// Sets the tab positions for the text block to those specified by
    /// *tabs.*
    /// 
    /// **See also:** tabPositions()
    set_tab_positions(tabs: onst QList<QTextOption::Tab> &),
    /// 
    /// Returns a list of tab positions defined for the text block.
    /// 
    /// **See also:** setTabPositions()
    tab_positions() -> List<QTextOption::Tab>,
}

// vim: syntax=rust expandtab ts=4 sw=4
