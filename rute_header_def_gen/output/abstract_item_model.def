enum LayoutChangeHint {
    NoLayoutChangeHint,
    VerticalSortHint,
    HorizontalSortHint,
}

struct AbstractItemModel : Object {
    has_index(row: i32, column: i32, parent: &ModelIndexType) -> bool,
    [replace] index(row: i32, column: i32, parent: &ModelIndexType) -> ModelIndex,
    [replace] parent(child: &ModelIndexType) -> ModelIndex,
    [replace] sibling(row: i32, column: i32, idx: &ModelIndexType) -> ModelIndex,
    [replace] row_count(parent: &ModelIndexType) -> i32,
    [replace] column_count(parent: &ModelIndexType) -> i32,
    [replace] has_children(parent: &ModelIndexType) -> bool,
    [replace] data(index: &ModelIndexType, role: i32) -> Variant,
    [replace] set_data(index: &ModelIndexType, value: &VariantType, role: i32) -> bool,
    [replace] header_data(section: i32, orientation: Rute::Orientation, role: i32) -> Variant,
    [replace] set_header_data(section: i32, orientation: Rute::Orientation, value: &VariantType, role: i32) -> bool,
    [replace] item_data(index: &ModelIndexType) -> Map<int,,
    [replace] set_item_data(index: &ModelIndexType, roles: &Map<int,Type) -> bool,
    [replace] mime_types() -> [String],
    [replace] mime_data(indexes: &[ModelIndex]) -> MimeData?,
    [replace] can_drop_mime_data(data: &MimeDataType, action: Rute::DropAction, row: i32, column: i32, parent: &ModelIndexType) -> bool,
    [replace] drop_mime_data(data: &MimeDataType, action: Rute::DropAction, row: i32, column: i32, parent: &ModelIndexType) -> bool,
    [replace] supported_drop_actions() -> Rute::DropActions,
    [replace] supported_drag_actions() -> Rute::DropActions,
    [replace] insert_rows(row: i32, count: i32, parent: &ModelIndexType) -> bool,
    [replace] insert_columns(column: i32, count: i32, parent: &ModelIndexType) -> bool,
    [replace] remove_rows(row: i32, count: i32, parent: &ModelIndexType) -> bool,
    [replace] remove_columns(column: i32, count: i32, parent: &ModelIndexType) -> bool,
    [replace] move_rows(source_parent: &ModelIndexType, source_row: i32, count: i32, destination_parent: &ModelIndexType, destination_child: i32) -> bool,
    [replace] move_columns(source_parent: &ModelIndexType, source_column: i32, count: i32, destination_parent: &ModelIndexType, destination_child: i32) -> bool,
    insert_row(row: i32, parent: &ModelIndexType) -> bool,
    insert_column(column: i32, parent: &ModelIndexType) -> bool,
    remove_row(row: i32, parent: &ModelIndexType) -> bool,
    remove_column(column: i32, parent: &ModelIndexType) -> bool,
    move_row(source_parent: &ModelIndexType, source_row: i32, destination_parent: &ModelIndexType, destination_child: i32) -> bool,
    move_column(source_parent: &ModelIndexType, source_column: i32, destination_parent: &ModelIndexType, destination_child: i32) -> bool,
    [replace] fetch_more(parent: &ModelIndexType),
    [replace] can_fetch_more(parent: &ModelIndexType) -> bool,
    [replace] flags(index: &ModelIndexType) -> Rute::ItemFlags,
    [replace] sort(column: i32, order: Rute::SortOrder),
    [replace] buddy(index: &ModelIndexType) -> ModelIndex,
    [replace] match(start: &ModelIndexType, role: i32, value: &VariantType, hits: i32, flags: Rute::MatchFlags) -> [ModelIndex],
    [replace] span(index: &ModelIndexType) -> Size,
    [replace] role_names() -> Hash<int,,
    [event] data_changed(top_left: &ModelIndexType, bottom_right: &ModelIndexType, roles: [i32]),
    [event] header_data_changed(orientation: Rute::Orientation, first: i32, last: i32),
    [event] layout_changed(parents: [PersistentModelIndexType], hint: AbstractItemModel::LayoutChangeHint),
    [event] layout_about_to_be_changed(parents: [PersistentModelIndexType], hint: AbstractItemModel::LayoutChangeHint),
    [event] rows_about_to_be_inserted(parent: &ModelIndexType, first: i32, last: i32, arg0: AbstractItemModel::QPrivateSignal),
    [event] rows_inserted(parent: &ModelIndexType, first: i32, last: i32, arg0: AbstractItemModel::QPrivateSignal),
    [event] rows_about_to_be_removed(parent: &ModelIndexType, first: i32, last: i32, arg0: AbstractItemModel::QPrivateSignal),
    [event] rows_removed(parent: &ModelIndexType, first: i32, last: i32, arg0: AbstractItemModel::QPrivateSignal),
    [event] columns_about_to_be_inserted(parent: &ModelIndexType, first: i32, last: i32, arg0: AbstractItemModel::QPrivateSignal),
    [event] columns_inserted(parent: &ModelIndexType, first: i32, last: i32, arg0: AbstractItemModel::QPrivateSignal),
    [event] columns_about_to_be_removed(parent: &ModelIndexType, first: i32, last: i32, arg0: AbstractItemModel::QPrivateSignal),
    [event] columns_removed(parent: &ModelIndexType, first: i32, last: i32, arg0: AbstractItemModel::QPrivateSignal),
    [event] model_about_to_be_reset(arg0: AbstractItemModel::QPrivateSignal),
    [event] model_reset(arg0: AbstractItemModel::QPrivateSignal),
    [event] rows_about_to_be_moved(source_parent: &ModelIndexType, source_start: i32, source_end: i32, destination_parent: &ModelIndexType, destination_row: i32, arg0: AbstractItemModel::QPrivateSignal),
    [event] rows_moved(parent: &ModelIndexType, start: i32, end: i32, destination: &ModelIndexType, row: i32, arg0: AbstractItemModel::QPrivateSignal),
    [event] columns_about_to_be_moved(source_parent: &ModelIndexType, source_start: i32, source_end: i32, destination_parent: &ModelIndexType, destination_column: i32, arg0: AbstractItemModel::QPrivateSignal),
    [event] columns_moved(parent: &ModelIndexType, start: i32, end: i32, destination: &ModelIndexType, column: i32, arg0: AbstractItemModel::QPrivateSignal),
    [replace] submit() -> bool,
    [replace] revert(),
    reset_internal_data(),
    create_index(row: i32, column: i32, data: &void) -> ModelIndex,
    create_index(row: i32, column: i32, id: quintptr) -> ModelIndex,
    encode_data(indexes: &[ModelIndex], stream: &DataStreamType),
    decode_data(row: i32, column: i32, parent: &ModelIndexType, stream: &DataStreamType) -> bool,
    begin_insert_rows(parent: &ModelIndexType, first: i32, last: i32),
    end_insert_rows(),
    begin_remove_rows(parent: &ModelIndexType, first: i32, last: i32),
    end_remove_rows(),
    begin_move_rows(source_parent: &ModelIndexType, source_first: i32, source_last: i32, destination_parent: &ModelIndexType, destination_row: i32) -> bool,
    end_move_rows(),
    begin_insert_columns(parent: &ModelIndexType, first: i32, last: i32),
    end_insert_columns(),
    begin_remove_columns(parent: &ModelIndexType, first: i32, last: i32),
    end_remove_columns(),
    begin_move_columns(source_parent: &ModelIndexType, source_first: i32, source_last: i32, destination_parent: &ModelIndexType, destination_column: i32) -> bool,
    end_move_columns(),
    begin_reset_model(),
    end_reset_model(),
    change_persistent_index(from: &ModelIndexType, to: &ModelIndexType),
    change_persistent_index_list(from: &[ModelIndex], to: &[ModelIndex]),
    persistent_index_list() -> [ModelIndex],
}

// vim: syntax=rust expandtab ts=4 sw=4
