struct AbstractItemModel : Object {
    has_index(row: i32, column: i32, parent: &ModelIndexType) -> bool,
    index(row: i32, column: i32, parent: &ModelIndexType) -> ModelIndexType,
    parent(child: &ModelIndexType) -> ModelIndexType,
    sibling(row: i32, column: i32, idx: &ModelIndexType) -> ModelIndexType,
    row_count(parent: &ModelIndexType) -> i32,
    column_count(parent: &ModelIndexType) -> i32,
    has_children(parent: &ModelIndexType) -> bool,
    data(index: &ModelIndexType, role: i32) -> VariantType,
    set_data(index: &ModelIndexType, value: &VariantType, role: i32) -> bool,
    header_data(section: i32, orientation: Rute::Orientation, role: i32) -> VariantType,
    set_header_data(section: i32, orientation: Rute::Orientation, value: &VariantType, role: i32) -> bool,
    item_data(index: &ModelIndexType) -> Map<int,Type,
    set_item_data(index: &ModelIndexType, roles: &Map<int,Type) -> bool,
    mime_types() -> StringListType,
    mime_data(indexes: &ModelIndexListType) -> &MimeDataType,
    can_drop_mime_data(data: &MimeDataType, action: Rute::DropAction, row: i32, column: i32, parent: &ModelIndexType) -> bool,
    drop_mime_data(data: &MimeDataType, action: Rute::DropAction, row: i32, column: i32, parent: &ModelIndexType) -> bool,
    supported_drop_actions() -> Rute::DropActions,
    supported_drag_actions() -> Rute::DropActions,
    insert_rows(row: i32, count: i32, parent: &ModelIndexType) -> bool,
    insert_columns(column: i32, count: i32, parent: &ModelIndexType) -> bool,
    remove_rows(row: i32, count: i32, parent: &ModelIndexType) -> bool,
    remove_columns(column: i32, count: i32, parent: &ModelIndexType) -> bool,
    move_rows(source_parent: &ModelIndexType, source_row: i32, count: i32, destination_parent: &ModelIndexType, destination_child: i32) -> bool,
    move_columns(source_parent: &ModelIndexType, source_column: i32, count: i32, destination_parent: &ModelIndexType, destination_child: i32) -> bool,
    insert_row(row: i32, parent: &ModelIndexType) -> bool,
    insert_column(column: i32, parent: &ModelIndexType) -> bool,
    remove_row(row: i32, parent: &ModelIndexType) -> bool,
    remove_column(column: i32, parent: &ModelIndexType) -> bool,
    move_row(source_parent: &ModelIndexType, source_row: i32, destination_parent: &ModelIndexType, destination_child: i32) -> bool,
    move_column(source_parent: &ModelIndexType, source_column: i32, destination_parent: &ModelIndexType, destination_child: i32) -> bool,
    fetch_more(parent: &ModelIndexType),
    can_fetch_more(parent: &ModelIndexType) -> bool,
    flags(index: &ModelIndexType) -> Rute::ItemFlags,
    sort(column: i32, order: Rute::SortOrder),
    buddy(index: &ModelIndexType) -> ModelIndexType,
    match(start: &ModelIndexType, role: i32, value: &VariantType, hits: i32, flags: Rute::MatchFlags) -> ModelIndexListType,
    span(index: &ModelIndexType) -> SizeType,
    role_names() -> Hash<int,Type,
    [callback] data_changed(top_left: &ModelIndexType, bottom_right: &ModelIndexType, roles: [i32]),
    [callback] header_data_changed(orientation: Rute::Orientation, first: i32, last: i32),
    [callback] layout_changed(parents: [PersistentModelIndexType], hint: AbstractItemModel::LayoutChangeHint),
    [callback] layout_about_to_be_changed(parents: [PersistentModelIndexType], hint: AbstractItemModel::LayoutChangeHint),
    [callback] rows_about_to_be_inserted(parent: &ModelIndexType, first: i32, last: i32, arg0: AbstractItemModel::QPrivateSignal),
    [callback] rows_inserted(parent: &ModelIndexType, first: i32, last: i32, arg0: AbstractItemModel::QPrivateSignal),
    [callback] rows_about_to_be_removed(parent: &ModelIndexType, first: i32, last: i32, arg0: AbstractItemModel::QPrivateSignal),
    [callback] rows_removed(parent: &ModelIndexType, first: i32, last: i32, arg0: AbstractItemModel::QPrivateSignal),
    [callback] columns_about_to_be_inserted(parent: &ModelIndexType, first: i32, last: i32, arg0: AbstractItemModel::QPrivateSignal),
    [callback] columns_inserted(parent: &ModelIndexType, first: i32, last: i32, arg0: AbstractItemModel::QPrivateSignal),
    [callback] columns_about_to_be_removed(parent: &ModelIndexType, first: i32, last: i32, arg0: AbstractItemModel::QPrivateSignal),
    [callback] columns_removed(parent: &ModelIndexType, first: i32, last: i32, arg0: AbstractItemModel::QPrivateSignal),
    [callback] model_about_to_be_reset(arg0: AbstractItemModel::QPrivateSignal),
    [callback] model_reset(arg0: AbstractItemModel::QPrivateSignal),
    [callback] rows_about_to_be_moved(source_parent: &ModelIndexType, source_start: i32, source_end: i32, destination_parent: &ModelIndexType, destination_row: i32, arg0: AbstractItemModel::QPrivateSignal),
    [callback] rows_moved(parent: &ModelIndexType, start: i32, end: i32, destination: &ModelIndexType, row: i32, arg0: AbstractItemModel::QPrivateSignal),
    [callback] columns_about_to_be_moved(source_parent: &ModelIndexType, source_start: i32, source_end: i32, destination_parent: &ModelIndexType, destination_column: i32, arg0: AbstractItemModel::QPrivateSignal),
    [callback] columns_moved(parent: &ModelIndexType, start: i32, end: i32, destination: &ModelIndexType, column: i32, arg0: AbstractItemModel::QPrivateSignal),
    submit() -> bool,
    revert(),
    reset_internal_data(),
    create_index(row: i32, column: i32, data: &void) -> ModelIndexType,
    create_index(row: i32, column: i32, id: quintptr) -> ModelIndexType,
    encode_data(indexes: &ModelIndexListType, stream: &DataStreamType),
    decode_data(row: i32, column: i32, parent: &ModelIndexType, stream: &DataStreamType) -> bool,
    begin_insert_rows(parent: &ModelIndexType, first: i32, last: i32),
    end_insert_rows(),
    begin_remove_rows(parent: &ModelIndexType, first: i32, last: i32),
    end_remove_rows(),
    begin_move_rows(source_parent: &ModelIndexType, source_first: i32, source_last: i32, destination_parent: &ModelIndexType, destination_row: i32) -> bool,
    end_move_rows(),
    begin_insert_columns(parent: &ModelIndexType, first: i32, last: i32),
    end_insert_columns(),
    begin_remove_columns(parent: &ModelIndexType, first: i32, last: i32),
    end_remove_columns(),
    begin_move_columns(source_parent: &ModelIndexType, source_first: i32, source_last: i32, destination_parent: &ModelIndexType, destination_column: i32) -> bool,
    end_move_columns(),
    begin_reset_model(),
    end_reset_model(),
    change_persistent_index(from: &ModelIndexType, to: &ModelIndexType),
    change_persistent_index_list(from: &ModelIndexListType, to: &ModelIndexListType),
    persistent_index_list() -> ModelIndexListType,
}

// vim: syntax=rust expandtab ts=4 sw=4
