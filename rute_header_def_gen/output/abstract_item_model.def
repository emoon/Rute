struct AbstractItemModel : Object {
    has_index(i32 row, i32 column, &ModelIndexType parent) -> bool,
    index(i32 row, i32 column, &ModelIndexType parent) -> ModelIndexType,
    parent(&ModelIndexType child) -> ModelIndexType,
    sibling(i32 row, i32 column, &ModelIndexType idx) -> ModelIndexType,
    row_count(&ModelIndexType parent) -> i32,
    column_count(&ModelIndexType parent) -> i32,
    has_children(&ModelIndexType parent) -> bool,
    data(&ModelIndexType index, i32 role) -> VariantType,
    set_data(&ModelIndexType index, &VariantType value, i32 role) -> bool,
    header_data(i32 section, Rute::Orientation orientation, i32 role) -> VariantType,
    set_header_data(i32 section, Rute::Orientation orientation, &VariantType value, i32 role) -> bool,
    item_data(&ModelIndexType index) -> Map<int,Type,
    set_item_data(&ModelIndexType index, &Map<int,Type roles) -> bool,
    mime_types() -> StringListType,
    mime_data(&ModelIndexListType indexes) -> &MimeDataType,
    can_drop_mime_data(&MimeDataType data, Rute::DropAction action, i32 row, i32 column, &ModelIndexType parent) -> bool,
    drop_mime_data(&MimeDataType data, Rute::DropAction action, i32 row, i32 column, &ModelIndexType parent) -> bool,
    supported_drop_actions() -> Rute::DropActions,
    supported_drag_actions() -> Rute::DropActions,
    insert_rows(i32 row, i32 count, &ModelIndexType parent) -> bool,
    insert_columns(i32 column, i32 count, &ModelIndexType parent) -> bool,
    remove_rows(i32 row, i32 count, &ModelIndexType parent) -> bool,
    remove_columns(i32 column, i32 count, &ModelIndexType parent) -> bool,
    move_rows(&ModelIndexType source_parent, i32 source_row, i32 count, &ModelIndexType destination_parent, i32 destination_child) -> bool,
    move_columns(&ModelIndexType source_parent, i32 source_column, i32 count, &ModelIndexType destination_parent, i32 destination_child) -> bool,
    insert_row(i32 row, &ModelIndexType parent) -> bool,
    insert_column(i32 column, &ModelIndexType parent) -> bool,
    remove_row(i32 row, &ModelIndexType parent) -> bool,
    remove_column(i32 column, &ModelIndexType parent) -> bool,
    move_row(&ModelIndexType source_parent, i32 source_row, &ModelIndexType destination_parent, i32 destination_child) -> bool,
    move_column(&ModelIndexType source_parent, i32 source_column, &ModelIndexType destination_parent, i32 destination_child) -> bool,
    fetch_more(&ModelIndexType parent),
    can_fetch_more(&ModelIndexType parent) -> bool,
    flags(&ModelIndexType index) -> Rute::ItemFlags,
    sort(i32 column, Rute::SortOrder order),
    buddy(&ModelIndexType index) -> ModelIndexType,
    match(&ModelIndexType start, i32 role, &VariantType value, i32 hits, Rute::MatchFlags flags) -> ModelIndexListType,
    span(&ModelIndexType index) -> SizeType,
    role_names() -> Hash<int,Type,
    data_changed(&ModelIndexType top_left, &ModelIndexType bottom_right, &Vector<int>Type roles),
    header_data_changed(Rute::Orientation orientation, i32 first, i32 last),
    layout_changed(&List<QPersistentModelIndex>Type parents, AbstractItemModel::LayoutChangeHint hint),
    layout_about_to_be_changed(&List<QPersistentModelIndex>Type parents, AbstractItemModel::LayoutChangeHint hint),
    rows_about_to_be_inserted(&ModelIndexType parent, i32 first, i32 last, AbstractItemModel::QPrivateSignal arg0),
    rows_inserted(&ModelIndexType parent, i32 first, i32 last, AbstractItemModel::QPrivateSignal arg0),
    rows_about_to_be_removed(&ModelIndexType parent, i32 first, i32 last, AbstractItemModel::QPrivateSignal arg0),
    rows_removed(&ModelIndexType parent, i32 first, i32 last, AbstractItemModel::QPrivateSignal arg0),
    columns_about_to_be_inserted(&ModelIndexType parent, i32 first, i32 last, AbstractItemModel::QPrivateSignal arg0),
    columns_inserted(&ModelIndexType parent, i32 first, i32 last, AbstractItemModel::QPrivateSignal arg0),
    columns_about_to_be_removed(&ModelIndexType parent, i32 first, i32 last, AbstractItemModel::QPrivateSignal arg0),
    columns_removed(&ModelIndexType parent, i32 first, i32 last, AbstractItemModel::QPrivateSignal arg0),
    model_about_to_be_reset(AbstractItemModel::QPrivateSignal arg0),
    model_reset(AbstractItemModel::QPrivateSignal arg0),
    rows_about_to_be_moved(&ModelIndexType source_parent, i32 source_start, i32 source_end, &ModelIndexType destination_parent, i32 destination_row, AbstractItemModel::QPrivateSignal arg0),
    rows_moved(&ModelIndexType parent, i32 start, i32 end, &ModelIndexType destination, i32 row, AbstractItemModel::QPrivateSignal arg0),
    columns_about_to_be_moved(&ModelIndexType source_parent, i32 source_start, i32 source_end, &ModelIndexType destination_parent, i32 destination_column, AbstractItemModel::QPrivateSignal arg0),
    columns_moved(&ModelIndexType parent, i32 start, i32 end, &ModelIndexType destination, i32 column, AbstractItemModel::QPrivateSignal arg0),
    submit() -> bool,
    revert(),
    reset_internal_data(),
    create_index(i32 row, i32 column, &void data) -> ModelIndexType,
    create_index(i32 row, i32 column, quintptr id) -> ModelIndexType,
    encode_data(&ModelIndexListType indexes, &DataStreamType stream),
    decode_data(i32 row, i32 column, &ModelIndexType parent, &DataStreamType stream) -> bool,
    begin_insert_rows(&ModelIndexType parent, i32 first, i32 last),
    end_insert_rows(),
    begin_remove_rows(&ModelIndexType parent, i32 first, i32 last),
    end_remove_rows(),
    begin_move_rows(&ModelIndexType source_parent, i32 source_first, i32 source_last, &ModelIndexType destination_parent, i32 destination_row) -> bool,
    end_move_rows(),
    begin_insert_columns(&ModelIndexType parent, i32 first, i32 last),
    end_insert_columns(),
    begin_remove_columns(&ModelIndexType parent, i32 first, i32 last),
    end_remove_columns(),
    begin_move_columns(&ModelIndexType source_parent, i32 source_first, i32 source_last, &ModelIndexType destination_parent, i32 destination_column) -> bool,
    end_move_columns(),
    begin_reset_model(),
    end_reset_model(),
    change_persistent_index(&ModelIndexType from, &ModelIndexType to),
    change_persistent_index_list(&ModelIndexListType from, &ModelIndexListType to),
    persistent_index_list() -> ModelIndexListType,
    do_set_role_names(&Hash<int,Type role_names),
    do_set_supported_drag_actions(Rute::DropActions actions),
}

// vim: syntax=rust expandtab ts=4 sw=4
