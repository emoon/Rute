/// 
/// QGraphicsView inherits the drag and drop functionality provided
/// by QWidget. When it receives a drag and drop event, it translates
/// it to a QGraphicsSceneDragDropEvent.
/// 
/// QGraphicsSceneDragDropEvent stores events of type
/// GraphicsSceneDragEnter, GraphicsSceneDragLeave,
/// GraphicsSceneDragMove, or GraphicsSceneDrop.
/// 
/// QGraphicsSceneDragDropEvent contains the position of the mouse
/// cursor in both item, scene, and screen coordinates; this can be
/// retrieved with pos(), scenePos(), and screenPos().
/// 
/// The scene sends the event to the first QGraphicsItem under the
/// mouse cursor that accepts drops; a graphics item is set to accept
/// drops with [setAcceptDrops()](QGraphicsItem::)
/// 
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GraphicsSceneDragDropEvent : GraphicsSceneEvent {
    /// 
    /// Returns the mouse position of the event relative to the
    /// view that sent the event.
    /// 
    /// **See also:** QGraphicsView
    /// screenPos()
    /// scenePos()
    /// 
    /// Returns the possible drop actions that the drag and
    /// drop can result in.
    /// 
    /// **See also:** Qt::DropActions
    pos() -> PointF,
    set_pos(pos: &PointFType),
    /// 
    /// Returns the position of the mouse in scene coordinates.
    /// 
    /// **See also:** pos()
    /// screenPos()
    scene_pos() -> PointF,
    set_scene_pos(pos: &PointFType),
    /// 
    /// Returns the position of the mouse relative to the screen.
    /// 
    /// **See also:** pos()
    /// scenePos()
    screen_pos() -> Point,
    set_screen_pos(pos: &PointType),
    /// 
    /// Returns a Qt::MouseButtons value indicating which buttons
    /// were pressed on the mouse when this mouse event was
    /// generated.
    /// 
    /// **See also:** Qt::MouseButtons
    buttons() -> Rute::MouseButtons,
    set_buttons(buttons: Rute::MouseButtons),
    /// 
    /// Returns the keyboard modifiers that were pressed when the drag
    /// and drop event was created.
    /// 
    /// **See also:** Qt::KeyboardModifiers
    modifiers() -> Rute::KeyboardModifiers,
    set_modifiers(modifiers: Rute::KeyboardModifiers),
    /// 
    /// Returns the possible drop actions that the drag and
    /// drop can result in.
    /// 
    /// **See also:** Qt::DropActions
    possible_actions() -> Rute::DropActions,
    set_possible_actions(actions: Rute::DropActions),
    /// 
    /// Returns the drop action that is proposed, i.e., preferred.
    /// The action must be one of the possible actions as defined by
    /// `possibleActions().`
    /// 
    /// **See also:** Qt::DropAction
    /// possibleActions()
    proposed_action() -> Rute::DropAction,
    set_proposed_action(action: Rute::DropAction),
    /// 
    /// Sets the proposed action as accepted, i.e, the drop action
    /// is set to the proposed action. This is equal to:
    /// 
    /// When using this function, one should not call `accept().`
    /// 
    /// **See also:** dropAction()
    /// setDropAction()
    /// proposedAction()
    accept_proposed_action(),
    /// 
    /// Returns the action that was performed in this drag and drop.
    /// This should be set by the receiver of the drop and is
    /// returned by QDrag::exec().
    /// 
    /// **See also:** setDropAction()
    /// acceptProposedAction()
    drop_action() -> Rute::DropAction,
    /// 
    /// This function lets the receiver of the drop set the drop
    /// action that was performed to *action,* which should be one
    /// of the
    /// [possible
    /// actions](QGraphicsSceneDragDropEvent::possibleActions())
    /// . Call `accept()` in stead of `acceptProposedAction()` if you use this function.
    /// 
    /// **See also:** dropAction()
    /// accept()
    /// possibleActions()
    set_drop_action(action: Rute::DropAction),
    /// 
    /// This function returns the QGraphicsView that created the
    /// QGraphicsSceneDragDropEvent.
    source() -> Widget?,
    set_source(source: *WidgetType),
    /// 
    /// This function returns the MIME data of the event.
    mime_data() -> MimeData?,
    set_mime_data(data: *MimeDataType),
}

// vim: syntax=rust expandtab ts=4 sw=4
