///     \class QGraphicsSceneDragDropEvent
///     \brief The QGraphicsSceneDragDropEvent class provides events for
///            drag and drop in the graphics view framework.
///     \since 4.2
///     \ingroup graphicsview-api
///     \inmodule QtWidgets
/// 
///     QGraphicsView inherits the drag and drop functionality provided
///     by QWidget. When it receives a drag and drop event, it translates
///     it to a QGraphicsSceneDragDropEvent.
/// 
///     QGraphicsSceneDragDropEvent stores events of type
///     GraphicsSceneDragEnter, GraphicsSceneDragLeave,
///     GraphicsSceneDragMove, or GraphicsSceneDrop.
/// 
///     QGraphicsSceneDragDropEvent contains the position of the mouse
///     cursor in both item, scene, and screen coordinates; this can be
///     retrieved with pos(), scenePos(), and screenPos().
/// 
///     The scene sends the event to the first QGraphicsItem under the
///     mouse cursor that accepts drops; a graphics item is set to accept
///     drops with \l{QGraphicsItem::}{setAcceptDrops()}.
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GraphicsSceneDragDropEvent : GraphicsSceneEvent {
    ///     Returns the mouse position of the event relative to the
    ///     view that sent the event.
    /// 
    ///     \sa QGraphicsView, screenPos(), scenePos()
    pos() -> PointF,
    ///     \internal
    ///     Sets the position of the mouse to \a pos; this should be
    ///     relative to the widget that generated the event, which normally
    ///     is a QGraphicsView.
    /// 
    ///     \sa pos(), setScenePos(), setScreenPos()
    set_pos(pos: &PointFType),
    ///     Returns the position of the mouse in scene coordinates.
    /// 
    ///     \sa pos(), screenPos()
    scene_pos() -> PointF,
    ///     \internal
    ///     Sets the scene position of the mouse to \a pos.
    /// 
    ///     \sa scenePos(), setScreenPos(), setPos()
    set_scene_pos(pos: &PointFType),
    ///     Returns the position of the mouse relative to the screen.
    /// 
    ///     \sa pos(), scenePos()
    screen_pos() -> Point,
    ///     \internal
    ///     Sets the mouse position relative to the screen to \a pos.
    /// 
    ///     \sa screenPos(), setScenePos(), setPos()
    set_screen_pos(pos: &PointType),
    ///     Returns a Qt::MouseButtons value indicating which buttons
    ///     were pressed on the mouse when this mouse event was
    ///     generated.
    /// 
    ///     \sa Qt::MouseButtons
    buttons() -> Rute::MouseButtons,
    ///     \internal
    ///     Sets the mouse buttons that were pressed when the event was
    ///     created to \a buttons.
    /// 
    ///     \sa Qt::MouseButtons, buttons()
    set_buttons(buttons: Rute::MouseButtons),
    ///     Returns the keyboard modifiers that were pressed when the drag
    ///     and drop event was created.
    /// 
    ///     \sa Qt::KeyboardModifiers
    modifiers() -> Rute::KeyboardModifiers,
    ///     \internal
    ///     Sets the keyboard modifiers that were pressed when the event
    ///     was created to \a modifiers.
    /// 
    ///     \sa Qt::KeyboardModifiers, modifiers()
    set_modifiers(modifiers: Rute::KeyboardModifiers),
    ///     Returns the possible drop actions that the drag and
    ///     drop can result in.
    /// 
    ///     \sa Qt::DropActions
    possible_actions() -> Rute::DropActions,
    ///     \internal
    ///     Sets the possible drop actions that the drag can
    ///     result in to \a actions.
    /// 
    ///     \sa Qt::DropActions, possibleActions()
    set_possible_actions(actions: Rute::DropActions),
    ///     Returns the drop action that is proposed, i.e., preferred.
    ///     The action must be one of the possible actions as defined by
    ///     \c possibleActions().
    /// 
    ///     \sa Qt::DropAction, possibleActions()
    proposed_action() -> Rute::DropAction,
    ///     \internal
    ///     Sets the proposed action to \a action. The proposed action
    ///     is a Qt::DropAction that is one of the possible actions as
    ///     given by \c possibleActions().
    /// 
    ///     \sa proposedAction(), Qt::DropAction, possibleActions()
    set_proposed_action(action: Rute::DropAction),
    ///     Sets the proposed action as accepted, i.e, the drop action
    ///     is set to the proposed action. This is equal to:
    /// 
    ///     \snippet code/src_gui_graphicsview_qgraphicssceneevent.cpp 0
    /// 
    ///     When using this function, one should not call \c accept().
    /// 
    ///     \sa dropAction(), setDropAction(), proposedAction()
    accept_proposed_action(),
    ///     Returns the action that was performed in this drag and drop.
    ///     This should be set by the receiver of the drop and is
    ///     returned by QDrag::exec().
    /// 
    ///     \sa setDropAction(), acceptProposedAction()
    drop_action() -> Rute::DropAction,
    ///     This function lets the receiver of the drop set the drop
    ///     action that was performed to \a action, which should be one
    ///     of the
    ///     \l{QGraphicsSceneDragDropEvent::possibleActions()}{possible
    ///     actions}. Call \c accept() in stead of \c
    ///     acceptProposedAction() if you use this function.
    /// 
    ///     \sa dropAction(), accept(), possibleActions()
    set_drop_action(action: Rute::DropAction),
    ///     This function returns the QGraphicsView that created the
    ///     QGraphicsSceneDragDropEvent.
    source() -> Widget?,
    ///     \internal
    ///     This function set the source widget, i.e., the widget that
    ///     created the drop event, to \a source.
    set_source(source: *WidgetType),
    ///     This function returns the MIME data of the event.
    mime_data() -> MimeData?,
    ///     \internal
    ///     This function sets the MIME data for the event.
    set_mime_data(data: *MimeDataType),
}

// vim: syntax=rust expandtab ts=4 sw=4
