enum Movement {
    Static,
    Free,
    Snap,
}

enum Flow {
    LeftToRight,
    TopToBottom,
}

enum ResizeMode {
    Fixed,
    Adjust,
}

enum LayoutMode {
    SinglePass,
    Batched,
}

enum ViewMode {
    ListMode,
    IconMode,
}

struct ListView : AbstractItemView {
    set_movement(movement: ListView::Movement),
    movement() -> ListView::Movement,
    set_flow(flow: ListView::Flow),
    flow() -> ListView::Flow,
    set_wrapping(enable: bool),
    is_wrapping() -> bool,
    set_resize_mode(mode: ListView::ResizeMode),
    resize_mode() -> ListView::ResizeMode,
    set_layout_mode(mode: ListView::LayoutMode),
    layout_mode() -> ListView::LayoutMode,
    set_spacing(space: i32),
    spacing() -> i32,
    set_batch_size(batch_size: i32),
    batch_size() -> i32,
    set_grid_size(size: &SizeType),
    grid_size() -> Size,
    set_view_mode(mode: ListView::ViewMode),
    view_mode() -> ListView::ViewMode,
    clear_property_flags(),
    is_row_hidden(row: i32) -> bool,
    set_row_hidden(row: i32, hide: bool),
    set_model_column(column: i32),
    model_column() -> i32,
    set_uniform_item_sizes(enable: bool),
    uniform_item_sizes() -> bool,
    set_word_wrap(on: bool),
    word_wrap() -> bool,
    set_selection_rect_visible(show: bool),
    is_selection_rect_visible() -> bool,
    [override] visual_rect(index: &ModelIndexType) -> Rect,
    [override] scroll_to(index: &ModelIndexType, hint: AbstractItemView::ScrollHint),
    [override] index_at(p: &PointType) -> ModelIndex,
    [override] do_items_layout(),
    [override] reset(),
    [override] set_root_index(index: &ModelIndexType),
    [event] indexes_moved(indexes: &ModelIndexListType),
    [override] event(e: &EventType) -> bool,
    [override] scroll_contents_by(dx: i32, dy: i32),
    resize_contents(width: i32, height: i32),
    contents_size() -> Size,
    [override] data_changed(top_left: &ModelIndexType, bottom_right: &ModelIndexType, roles: [i32]),
    [override] rows_inserted(parent: &ModelIndexType, start: i32, end: i32),
    [override] rows_about_to_be_removed(parent: &ModelIndexType, start: i32, end: i32),
    [override] mouse_move_event(e: &MouseEventType),
    [override] mouse_release_event(e: &MouseEventType),
    [override] wheel_event(e: &WheelEventType),
    [override] timer_event(e: &TimerEventType),
    [override] resize_event(e: &ResizeEventType),
    [override] drag_move_event(e: &DragMoveEventType),
    [override] drag_leave_event(e: &DragLeaveEventType),
    [override] drop_event(e: &DropEventType),
    [override] start_drag(supported_actions: Rute::DropActions),
    [override] view_options() -> StyleOptionViewItem,
    [override] paint_event(e: &PaintEventType),
    [override] horizontal_offset() -> i32,
    [override] vertical_offset() -> i32,
    [override] move_cursor(cursor_action: AbstractItemView::CursorAction, modifiers: Rute::KeyboardModifiers) -> ModelIndex,
    rect_for_index(index: &ModelIndexType) -> Rect,
    set_position_for_index(position: &PointType, index: &ModelIndexType),
    [override] set_selection(rect: &RectType, command: ItemSelectionModel::SelectionFlags),
    [override] visual_region_for_selection(selection: &ItemSelectionType) -> Region,
    [override] selected_indexes() -> ModelIndexList,
    [override] is_index_hidden(index: &ModelIndexType) -> bool,
    [override] selection_changed(selected: &ItemSelectionType, deselected: &ItemSelectionType),
    [override] current_changed(current: &ModelIndexType, previous: &ModelIndexType),
    [override] viewport_size_hint() -> Size,
}

// vim: syntax=rust expandtab ts=4 sw=4
