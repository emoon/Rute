/// 
/// ![windows-listview.png](windows-listview.png)
/// 
/// A QListView presents items stored in a model, either as a simple
/// non-hierarchical list, or as a collection of icons. This class is used
/// to provide lists and icon views that were previously provided by the
/// `QListBox` and `QIconView` classes, but using the more flexible
/// approach provided by Qt's model/view architecture.
/// 
/// The QListView class is one of the [Model/View Classes](Model/View%20Classes)
/// and is part of Qt's [model/view framework](Model/View%20Programming)
/// 
/// 
/// This view does not display horizontal or vertical headers; to display
/// a list of items with a horizontal header, use QTreeView instead.
/// 
/// QListView implements the interfaces defined by the
/// QAbstractItemView class to allow it to display data provided by
/// models derived from the QAbstractItemModel class.
/// 
/// Items in a list view can be displayed using one of two view modes:
/// In [ListMode,](ListMode,)
/// the items are displayed in the form of a simple list;
/// in [IconMode,](IconMode,)
/// the list view takes the form of an *icon view* in
/// which the items are displayed with icons like files in a file manager.
/// By default, the list view is in [ListMode.](ListMode.)
/// To change the view mode,
/// use the setViewMode() function, and to determine the current view mode,
/// use viewMode().
/// 
/// Items in these views are laid out in the direction specified by the
/// flow() of the list view. The items may be fixed in place, or allowed
/// to move, depending on the view's movement() state.
/// 
/// If the items in the model cannot be completely laid out in the
/// direction of flow, they can be wrapped at the boundary of the view
/// widget; this depends on isWrapping(). This property is useful when the
/// items are being represented by an icon view.
/// 
/// The resizeMode() and layoutMode() govern how and when the items are
/// laid out. Items are spaced according to their spacing(), and can exist
/// within a notional grid of size specified by gridSize(). The items can
/// be rendered as large or small icons depending on their iconSize().
/// 
/// # Improving Performance
/// 
/// It is possible to give the view hints about the data it is handling in order
/// to improve its performance when displaying large numbers of items. One approach
/// that can be taken for views that are intended to display items with equal sizes
/// is to set the [uniformItemSizes](uniformItemSizes)
/// property to true.
/// 
/// **See also:** {View Classes}
/// {Item Views Puzzle Example}
/// [`TreeView`]
/// [`TableView`]
/// [`ListWidget`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct ListView : AbstractItemView {
    set_movement(movement: ListView::Movement),
    /// 
    /// This property determines how the user can move the items in the
    /// view. [Static](Static)
    /// means that the items can't be moved the user. [Free](Free)
    /// means that the user can drag and drop the items to any
    /// position in the view. [Snap](Snap)
    /// means that the user can drag and
    /// drop the items, but only to the positions in a notional grid
    /// signified by the gridSize property.
    /// 
    /// Setting this property when the view is visible will cause the
    /// items to be laid out again.
    /// 
    /// By default, this property is set to [Static.](Static.)
    /// 
    /// **See also:** gridSize
    /// resizeMode
    /// viewMode
    movement() -> ListView::Movement,
    set_flow(flow: ListView::Flow),
    /// 
    /// If this property is [LeftToRight,](LeftToRight,)
    /// the items will be laid out left
    /// to right. If the [isWrapping](isWrapping)
    /// property is `true,` the layout will wrap
    /// when it reaches the right side of the visible area. If this
    /// property is [TopToBottom,](TopToBottom,)
    /// the items will be laid out from the top
    /// of the visible area, wrapping when it reaches the bottom.
    /// 
    /// Setting this property when the view is visible will cause the
    /// items to be laid out again.
    /// 
    /// By default, this property is set to [TopToBottom.](TopToBottom.)
    /// 
    /// **See also:** viewMode
    flow() -> ListView::Flow,
    set_wrapping(enable: bool),
    /// 
    /// This property holds whether the layout should wrap when there is
    /// no more space in the visible area. The point at which the layout wraps
    /// depends on the [flow](flow)
    /// property.
    /// 
    /// Setting this property when the view is visible will cause the
    /// items to be laid out again.
    /// 
    /// By default, this property is `false.`
    /// 
    /// **See also:** viewMode
    is_wrapping() -> bool,
    set_resize_mode(mode: ListView::ResizeMode),
    /// 
    /// If this property is [Adjust,](Adjust,)
    /// the items will be laid out again
    /// when the view is resized. If the value is [Fixed,](Fixed,)
    /// the items will
    /// not be laid out when the view is resized.
    /// 
    /// By default, this property is set to [Fixed.](Fixed.)
    /// 
    /// **See also:** movement
    /// gridSize
    /// viewMode
    resize_mode() -> ListView::ResizeMode,
    set_layout_mode(mode: ListView::LayoutMode),
    /// 
    /// This property holds the layout mode for the items. When the mode
    /// is [SinglePass](SinglePass)
    /// (the default), the items are laid out all in one go.
    /// When the mode is [Batched,](Batched,)
    /// the items are laid out in batches of [batchSize](batchSize)
    /// 
    /// items, while processing events. This makes it possible to
    /// instantly view and interact with the visible items while the rest
    /// are being laid out.
    /// 
    /// **See also:** viewMode
    layout_mode() -> ListView::LayoutMode,
    set_spacing(space: i32),
    /// 
    /// This property is the size of the empty space that is padded around
    /// an item in the layout.
    /// 
    /// Setting this property when the view is visible will cause the
    /// items to be laid out again.
    /// 
    /// By default, this property contains a value of 0.
    /// 
    /// **See also:** viewMode
    spacing() -> i32,
    set_batch_size(batch_size: i32),
    /// 
    /// [layoutMode](layoutMode)
    /// is
    /// set to [Batched](Batched)
    /// 
    /// The default value is 100.
    /// 
    batch_size() -> i32,
    set_grid_size(size: &SizeType),
    /// 
    /// This property is the size of the grid in which the items are laid
    /// out. The default is an empty size which means that there is no
    /// grid and the layout is not done in a grid. Setting this property
    /// to a non-empty size switches on the grid layout. (When a grid
    /// layout is in force the [spacing](spacing)
    /// property is ignored.)
    /// 
    /// Setting this property when the view is visible will cause the
    /// items to be laid out again.
    /// 
    /// **See also:** viewMode
    grid_size() -> Size,
    set_view_mode(mode: ListView::ViewMode),
    /// 
    /// This property will change the other unset properties to conform
    /// with the set view mode. QListView-specific properties that have already been set
    /// will not be changed, unless clearPropertyFlags() has been called.
    /// 
    /// Setting the view mode will enable or disable drag and drop based on the
    /// selected movement. For ListMode, the default movement is [Static](Static)
    /// 
    /// (drag and drop disabled); for IconMode, the default movement is
    /// [Free](Free)
    /// (drag and drop enabled).
    /// 
    /// **See also:** isWrapping
    /// spacing
    /// gridSize
    /// flow
    /// movement
    /// resizeMode
    view_mode() -> ListView::ViewMode,
    /// 
    /// Clears the QListView-specific property flags. See [viewMode](viewMode)
    /// 
    /// 
    /// Properties inherited from QAbstractItemView are not covered by the
    /// property flags. Specifically, [dragEnabled](QAbstractItemView::dragEnabled)
    /// and [acceptsDrops](QAbstractItemView::acceptDrops)
    /// are computed by QListView when calling
    /// setMovement() or setViewMode().
    clear_property_flags(),
    /// 
    /// Returns `true` if the *row* is hidden; otherwise returns `false.`
    is_row_hidden(row: i32) -> bool,
    /// 
    /// If *hide* is true, the given *row* will be hidden; otherwise
    /// the *row* will be shown.
    set_row_hidden(row: i32, hide: bool),
    set_model_column(column: i32),
    /// 
    /// By default, this property contains 0, indicating that the first
    /// column in the model will be shown.
    model_column() -> i32,
    set_uniform_item_sizes(enable: bool),
    /// 
    /// This property should only be set to true if it is guaranteed that all items
    /// in the view have the same size. This enables the view to do some
    /// optimizations for performance purposes.
    /// 
    /// By default, this property is `false.`
    uniform_item_sizes() -> bool,
    set_word_wrap(on: bool),
    /// 
    /// If this property is `true` then the item text is wrapped where
    /// necessary at word-breaks; otherwise it is not wrapped at all.
    /// This property is `false` by default.
    /// 
    /// Please note that even if wrapping is enabled, the cell will not be
    /// expanded to make room for the text. It will print ellipsis for
    /// text that cannot be shown, according to the view's
    /// [textElideMode](QAbstractItemView::)
    /// 
    word_wrap() -> bool,
    set_selection_rect_visible(show: bool),
    is_selection_rect_visible() -> bool,
    /// 
    [event] visual_rect(index: &ModelIndexType) -> Rect,
    /// 
    [event] scroll_to(index: &ModelIndexType, hint: AbstractItemView::ScrollHint),
    /// 
    [event] index_at(p: &PointType) -> ModelIndex,
    [event] do_items_layout(),
    [event] reset(),
    [event] set_root_index(index: &ModelIndexType),
    /// 
    /// This signal is emitted when the specified *indexes* are moved in the view.
    [signal] indexes_moved(indexes: &[ModelIndex]),
    /// 
    [event] event(e: *EventType) -> bool,
    [event] scroll_contents_by(dx: i32, dy: i32),
    resize_contents(width: i32, height: i32),
    contents_size() -> Size,
    /// 
    [event] data_changed(top_left: &ModelIndexType, bottom_right: &ModelIndexType, roles: [i32]),
    /// 
    [event] rows_inserted(parent: &ModelIndexType, start: i32, end: i32),
    /// 
    [event] rows_about_to_be_removed(parent: &ModelIndexType, start: i32, end: i32),
    /// 
    [event] mouse_move_event(e: *MouseEventType),
    /// 
    [event] mouse_release_event(e: *MouseEventType),
    /// 
    [event] wheel_event(e: *WheelEventType),
    /// 
    [event] timer_event(e: *TimerEventType),
    /// 
    [event] resize_event(e: *ResizeEventType),
    /// 
    [event] drag_move_event(e: *DragMoveEventType),
    /// 
    [event] drag_leave_event(e: *DragLeaveEventType),
    /// 
    [event] drop_event(e: *DropEventType),
    /// 
    [event] start_drag(supported_actions: Rute::DropActions),
    /// 
    [event] view_options() -> StyleOptionViewItem,
    /// 
    [event] paint_event(e: *PaintEventType),
    /// 
    [event] horizontal_offset() -> i32,
    /// 
    [event] vertical_offset() -> i32,
    /// 
    [event] move_cursor(cursor_action: AbstractItemView::CursorAction, modifiers: Rute::KeyboardModifiers) -> ModelIndex,
    /// 
    /// Returns the rectangle of the item at position *index* in the
    /// model. The rectangle is in contents coordinates.
    /// 
    /// **See also:** [`visual_rect()`]
    rect_for_index(index: &ModelIndexType) -> Rect,
    /// 
    /// Sets the contents position of the item at *index* in the model to the given
    /// *position.*
    /// If the list view's movement mode is Static or its view mode is ListView,
    /// this function will have no effect.
    set_position_for_index(position: &PointType, index: &ModelIndexType),
    /// 
    [event] set_selection(rect: &RectType, command: ItemSelectionModel::SelectionFlags),
    /// 
    /// Since 4.7, the returned region only contains rectangles intersecting
    /// (or included in) the viewport.
    [event] visual_region_for_selection(selection: &ItemSelectionType) -> Region,
    /// 
    [event] selected_indexes() -> [ModelIndex],
    /// 
    [event] is_index_hidden(index: &ModelIndexType) -> bool,
    /// 
    [event] selection_changed(selected: &ItemSelectionType, deselected: &ItemSelectionType),
    /// 
    [event] current_changed(current: &ModelIndexType, previous: &ModelIndexType),
    /// 
    [event] viewport_size_hint() -> Size,
}

[org_name(QListView)]
enum Movement {
    /// The items cannot be moved by the user.
    Static = 0,
    /// The items can be moved freely by the user.
    Free = 1,
    /// The items snap to the specified grid when moved; see setGridSize().
    Snap = 2,
}

[org_name(QListView)]
enum Flow {
    /// The items are laid out in the view from the left to the right.
    LeftToRight = 0,
    /// The items are laid out in the view from the top to the bottom.
    TopToBottom = 1,
}

[org_name(QListView)]
enum ResizeMode {
    /// The items will only be laid out the first time the view is shown.
    Fixed = 0,
    /// The items will be laid out every time the view is resized.
    Adjust = 1,
}

[org_name(QListView)]
enum LayoutMode {
    /// The items are laid out all at once.
    SinglePass = 0,
    /// The items are laid out in batches of [batchSize](batchSize)
 items.
    Batched = 1,
}

[org_name(QListView)]
enum ViewMode {
    /// The items are laid out using TopToBottom flow, with Small size and Static movement
    ListMode = 0,
    /// The items are laid out using LeftToRight flow, with Large size and Free movement
    IconMode = 1,
}

// vim: syntax=rust expandtab ts=4 sw=4
