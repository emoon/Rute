[org_name(QKeySequence)]
enum StandardKey {
    UnknownKey,
    HelpContents,
    WhatsThis,
    Open,
    Close,
    Save,
    New,
    Delete,
    Cut,
    Copy,
    Paste,
    Undo,
    Redo,
    Back,
    Forward,
    Refresh,
    ZoomIn,
    ZoomOut,
    Print,
    AddTab,
    NextChild,
    PreviousChild,
    Find,
    FindNext,
    FindPrevious,
    Replace,
    SelectAll,
    Bold,
    Italic,
    Underline,
    MoveToNextChar,
    MoveToPreviousChar,
    MoveToNextWord,
    MoveToPreviousWord,
    MoveToNextLine,
    MoveToPreviousLine,
    MoveToNextPage,
    MoveToPreviousPage,
    MoveToStartOfLine,
    MoveToEndOfLine,
    MoveToStartOfBlock,
    MoveToEndOfBlock,
    MoveToStartOfDocument,
    MoveToEndOfDocument,
    SelectNextChar,
    SelectPreviousChar,
    SelectNextWord,
    SelectPreviousWord,
    SelectNextLine,
    SelectPreviousLine,
    SelectNextPage,
    SelectPreviousPage,
    SelectStartOfLine,
    SelectEndOfLine,
    SelectStartOfBlock,
    SelectEndOfBlock,
    SelectStartOfDocument,
    SelectEndOfDocument,
    DeleteStartOfWord,
    DeleteEndOfWord,
    DeleteEndOfLine,
    InsertParagraphSeparator,
    InsertLineSeparator,
    SaveAs,
    Preferences,
    Quit,
    FullScreen,
    Deselect,
    DeleteCompleteLine,
    Backspace,
    Cancel,
}

[org_name(QKeySequence)]
enum SequenceFormat {
    NativeText,
    PortableText,
}

[org_name(QKeySequence)]
enum SequenceMatch {
    NoMatch,
    PartialMatch,
    ExactMatch,
}


struct KeySequence {
    qt_check_for_qgadget_macro(),
    count() -> i32,
    is_empty() -> bool,
    matches(seq: &KeySequenceType) -> KeySequence::SequenceMatch,
    [static] mnemonic(text: String) -> KeySequence,
    [static] key_bindings(key: KeySequence::StandardKey) -> [KeySequence],
    swap(other: &KeySequenceType),
    is_detached() -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
