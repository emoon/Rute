///     \class QAbstractTextDocumentLayout
///     \reentrant
/// 
///     \brief The QAbstractTextDocumentLayout class is an abstract base
///     class used to implement custom layouts for QTextDocuments.
///     \inmodule QtGui
/// 
///     \ingroup richtext-processing
/// 
///     The standard layout provided by Qt can handle simple word processing
///     including inline images, lists and tables.
/// 
///     Some applications, e.g., a word processor or a DTP application might need
///     more features than the ones provided by Qt's layout engine, in which case
///     you can subclass QAbstractTextDocumentLayout to provide custom layout
///     behavior for your text documents.
/// 
///     An instance of the QAbstractTextDocumentLayout subclass can be installed
///     on a QTextDocument object with the
///     \l{QTextDocument::}{setDocumentLayout()} function.
/// 
///     You can insert custom objects into a QTextDocument; see the
///     QTextObjectInterface class description for details.
/// 
///     \sa QTextObjectInterface
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct AbstractTextDocumentLayout : Object {
    [event] draw(painter: *PainterType, context: onst QAbstractTextDocumentLayout::PaintContext &),
    [event] hit_test(point: &PointFType, accuracy: Rute::HitTestAccuracy) -> i32,
    ///     \fn QString QAbstractTextDocumentLayout::anchorAt(const QPointF &position) const
    /// 
    ///     Returns the reference of the anchor the given \a position, or an empty
    ///     string if no anchor exists at that point.
    anchor_at(pos: &PointFType) -> String,
    ///     \since 5.8
    /// 
    ///     Returns the source of the image at the given position \a pos, or an empty
    ///     string if no image exists at that point.
    image_at(pos: &PointFType) -> String,
    ///     \since 5.8
    /// 
    ///     Returns the text format at the given position \a pos.
    format_at(pos: &PointFType) -> TextFormat,
    [event] page_count() -> i32,
    [event] document_size() -> SizeF,
    [event] frame_bounding_rect(frame: *TextFrameType) -> RectF,
    [event] block_bounding_rect(block: &TextBlockType) -> RectF,
    ///     Sets the paint device used for rendering the document's layout to the given
    ///     \a device.
    /// 
    ///     \sa paintDevice()
    set_paint_device(device: *PaintDeviceType),
    ///     Returns the paint device used to render the document's layout.
    /// 
    ///     \sa setPaintDevice()
    paint_device() -> PaintDevice?,
    ///     Returns the text document that this layout is operating on.
    document() -> TextDocument?,
    ///     Registers the given \a component as a handler for items of the given \a objectType.
    /// 
    ///     \note registerHandler() has to be called once for each object type. This
    ///     means that there is only one handler for multiple replacement characters
    ///     of the same object type.
    /// 
    ///     The text document layout does not take ownership of \c component.
    register_handler(object_type: i32, component: *ObjectType),
    ///     \since 5.2
    /// 
    ///     Unregisters the given \a component as a handler for items of the given \a objectType, or
    ///     any handler if the \a component is not specified.
    unregister_handler(object_type: i32, component: *ObjectType),
    ///     Returns a handler for objects of the given \a objectType.
    handler_for_object(object_type: i32) -> TextObjectInterface?,
    [signal] update(arg0: &RectFType),
    [signal] update_block(block: &TextBlockType),
    [signal] document_size_changed(new_size: &SizeFType),
    [signal] page_count_changed(new_pages: i32),
    [event] document_changed(from: i32, chars_removed: i32, chars_added: i32),
    ///     Sets the size of the inline object \a item corresponding to the text
    ///     \a format.
    /// 
    ///     \a posInDocument specifies the position of the object within the document.
    /// 
    ///     The default implementation resizes the \a item to the size returned by
    ///     the object handler's intrinsicSize() function. This function is called only
    ///     within Qt. Subclasses can reimplement this function to customize the
    ///     resizing of inline objects.
    [event] resize_inline_object(item: TextInlineObjectType, pos_in_document: i32, format: &TextFormatType),
    ///     Lays out the inline object \a item using the given text \a format.
    /// 
    ///     \a posInDocument specifies the position of the object within the document.
    /// 
    ///     The default implementation does nothing. This function is called only
    ///     within Qt. Subclasses can reimplement this function to customize the
    ///     position of inline objects.
    /// 
    ///     \sa drawInlineObject()
    [event] position_inline_object(item: TextInlineObjectType, pos_in_document: i32, format: &TextFormatType),
    [event] draw_inline_object(painter: *PainterType, rect: &RectFType, object: TextInlineObjectType, pos_in_document: i32, format: &TextFormatType),
    ///     \internal
    /// 
    ///     Returns the index of the format at position \a pos.
    format_index(pos: i32) -> i32,
    ///     \fn QTextCharFormat QAbstractTextDocumentLayout::format(int position)
    /// 
    ///     Returns the character format that is applicable at the given \a position.
    format(pos: i32) -> TextCharFormat,
}

// vim: syntax=rust expandtab ts=4 sw=4
