/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct PlatformCursor : Object {
    /// 
    /// This method is called by Qt whenever a QMouseEvent is generated by the
    /// underlying pointer input. *event* is a reference to the QMouseEvent in
    /// question. A default do-nothing implementation is provided.
    [event] pointer_event(event: &MouseEventType),
    /// 
    /// Implementation of this method is mandatory for a subclass of QPlatformCursor.
    /// 
    /// *windowCursor* is a pointer to the QCursor that should be displayed.
    /// 
    /// To unset the cursor of *window,* 0 is passed. This means *window* does not have
    /// a cursor set and the cursor of a the first parent window which has a cursor explicitly
    /// set or the system default cursor should take effect.
    /// 
    /// *window* is a pointer to the window currently displayed at QCursor::pos(). Note
    /// that this may be 0 if the current position is not occupied by a displayed widget.
    /// 
    /// **See also:** [`Cursor::pos`]
    [event] change_cursor(window_cursor: *CursorType, window: *WindowType),
    /// 
    /// Reimplement this function in subclass to set an override cursor
    /// on the associated screen and return true to indicate success.
    /// 
    /// This function can be implemented on platforms where the cursor is a
    /// property of the application or the screen rather than a property
    /// of the window. On these platforms, the OverrideCursor capability
    /// should be set.
    /// 
    /// **See also:** [`GuiApplication::set_override_cursor`]
    /// Capabilities
    /// 
    [event] set_override_cursor(arg0: &CursorType),
    /// 
    /// Reimplement this function in subclass to clear the override cursor.
    /// 
    /// **See also:** [`GuiApplication::clear_override_cursor`]
    /// Capabilities
    /// 
    [event] clear_override_cursor(),
    [event] pos() -> Point,
    [event] set_pos(pos: &PointType),
    [static] capabilities() -> PlatformCursor::Capabilities,
    [static] set_capabilities(c: PlatformCursor::Capabilities),
    [static] set_capability(c: PlatformCursor::Capability),
}

[org_name(QPlatformCursor)]
enum Capability {
    /// Indicates that the platform implements
    OverrideCursor,
}

// vim: syntax=rust expandtab ts=4 sw=4
