/// 
/// Paged paint devices are used to generate output for printing or for formats like PDF.
/// QPdfWriter and QPrinter inherit from it.
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QPagedPaintDevice)]
enum PageSize {
    A4,
    B5,
    Letter,
    Legal,
    Executive,
    A0,
    A1,
    A2,
    A3,
    A5,
    A6,
    A7,
    A8,
    A9,
    B0,
    B1,
    B10,
    B2,
    B3,
    B4,
    B6,
    B7,
    B8,
    B9,
    C5E,
    Comm10E,
    DLE,
    Folio,
    Ledger,
    Tabloid,
    Custom,
    A10,
    A3Extra,
    A4Extra,
    A4Plus,
    A4Small,
    A5Extra,
    B5Extra,
    JisB0,
    JisB1,
    JisB2,
    JisB3,
    JisB4,
    JisB5,
    JisB6,
    JisB7,
    JisB8,
    JisB9,
    JisB10,
    AnsiC,
    AnsiD,
    AnsiE,
    LegalExtra,
    LetterExtra,
    LetterPlus,
    LetterSmall,
    TabloidExtra,
    ArchA,
    ArchB,
    ArchC,
    ArchD,
    ArchE,
    Imperial7x9,
    Imperial8x10,
    Imperial9x11,
    Imperial9x12,
    Imperial10x11,
    Imperial10x13,
    Imperial10x14,
    Imperial12x11,
    Imperial15x11,
    ExecutiveStandard,
    Note,
    Quarto,
    Statement,
    SuperA,
    SuperB,
    Postcard,
    DoublePostcard,
    Prc16K,
    Prc32K,
    Prc32KBig,
    FanFoldUS,
    FanFoldGerman,
    FanFoldGermanLegal,
    EnvelopeB4,
    EnvelopeB5,
    EnvelopeB6,
    EnvelopeC0,
    EnvelopeC1,
    EnvelopeC2,
    EnvelopeC3,
    EnvelopeC4,
    EnvelopeC6,
    EnvelopeC65,
    EnvelopeC7,
    Envelope9,
    Envelope11,
    Envelope12,
    Envelope14,
    EnvelopeMonarch,
    EnvelopePersonal,
    EnvelopeChou3,
    EnvelopeChou4,
    EnvelopeInvite,
    EnvelopeItalian,
    EnvelopeKaku2,
    EnvelopeKaku3,
    EnvelopePrc1,
    EnvelopePrc2,
    EnvelopePrc3,
    EnvelopePrc4,
    EnvelopePrc5,
    EnvelopePrc6,
    EnvelopePrc7,
    EnvelopePrc8,
    EnvelopePrc9,
    EnvelopePrc10,
    EnvelopeYou4,
    LastPageSize,
    NPageSize,
    NPaperSize,
    AnsiA,
    AnsiB,
    EnvelopeC5,
    EnvelopeDL,
    Envelope10,
}

[org_name(QPagedPaintDevice)]
enum PdfVersion {
    PdfVersion_1_4,
    PdfVersion_A1b,
}

struct PagedPaintDevice : PaintDevice {
    /// 
    /// Starts a new page. Returns `true` on success.
    [event] new_page() -> bool,
    /// 
    /// Sets the page layout to *newPageLayout.*
    /// 
    /// You should call this before calling QPainter::begin(), or immediately
    /// before calling newPage() to apply the new page layout to a new page.
    /// You should not call any painting methods between a call to setPageLayout()
    /// and newPage() as the wrong paint metrics may be used.
    /// 
    /// Returns true if the page layout was successfully set to *newPageLayout.*
    /// 
    /// **See also:** pageLayout()
    set_page_layout(page_layout: &PageLayoutType) -> bool,
    /// 
    /// Sets the size of the a page to *size.*
    /// 
    /// **See also:** setPageSizeMM()
    /// 
    /// Sets the page size to *size.* *size* is specified in millimeters.
    /// 
    /// If the size matches a standard QPagedPaintDevice::PageSize then that page
    /// size will be used, otherwise QPagedPaintDevice::Custom will be set.
    /// 
    /// Sets the page size to *pageSize.*
    /// 
    /// To get the current QPageSize use pageLayout().pageSize().
    /// 
    /// You should call this before calling QPainter::begin(), or immediately
    /// before calling newPage() to apply the new page size to a new page.
    /// You should not call any painting methods between a call to setPageSize()
    /// and newPage() as the wrong paint metrics may be used.
    /// 
    /// Returns true if the page size was successfully set to *pageSize.*
    /// 
    /// **See also:** pageLayout()
    set_page_size(page_size: &PageSizeType) -> bool,
    /// 
    /// Sets the page *orientation.*
    /// 
    /// The page orientation is used to define the orientation of the
    /// page size when obtaining the page rect.
    /// 
    /// You should call this before calling QPainter::begin(), or immediately
    /// before calling newPage() to apply the new orientation to a new page.
    /// You should not call any painting methods between a call to setPageOrientation()
    /// and newPage() as the wrong paint metrics may be used.
    /// 
    /// To get the current QPageLayout::Orientation use pageLayout().pageOrientation().
    /// 
    /// Returns true if the page orientation was successfully set to *orientation.*
    /// 
    /// **See also:** pageLayout()
    set_page_orientation(orientation: PageLayout::Orientation) -> bool,
    /// 
    /// Set the page *margins* in the current page layout units.
    /// 
    /// You should call this before calling QPainter::begin(), or immediately
    /// before calling newPage() to apply the new margins to a new page.
    /// You should not call any painting methods between a call to setPageMargins()
    /// and newPage() as the wrong paint metrics may be used.
    /// 
    /// To get the current page margins use pageLayout().pageMargins().
    /// 
    /// Returns true if the page margins were successfully set to *margins.*
    /// 
    /// **See also:** pageLayout()
    /// 
    /// Set the page *margins* defined in the given *units.*
    /// 
    /// You should call this before calling QPainter::begin(), or immediately
    /// before calling newPage() to apply the new margins to a new page.
    /// You should not call any painting methods between a call to setPageMargins()
    /// and newPage() as the wrong paint metrics may be used.
    /// 
    /// To get the current page margins use pageLayout().pageMargins().
    /// 
    /// Returns true if the page margins were successfully set to *margins.*
    /// 
    /// **See also:** pageLayout()
    set_page_margins(margins: &MarginsFType) -> bool,
    /// 
    /// Set the page *margins* in the current page layout units.
    /// 
    /// You should call this before calling QPainter::begin(), or immediately
    /// before calling newPage() to apply the new margins to a new page.
    /// You should not call any painting methods between a call to setPageMargins()
    /// and newPage() as the wrong paint metrics may be used.
    /// 
    /// To get the current page margins use pageLayout().pageMargins().
    /// 
    /// Returns true if the page margins were successfully set to *margins.*
    /// 
    /// **See also:** pageLayout()
    /// 
    /// Set the page *margins* defined in the given *units.*
    /// 
    /// You should call this before calling QPainter::begin(), or immediately
    /// before calling newPage() to apply the new margins to a new page.
    /// You should not call any painting methods between a call to setPageMargins()
    /// and newPage() as the wrong paint metrics may be used.
    /// 
    /// To get the current page margins use pageLayout().pageMargins().
    /// 
    /// Returns true if the page margins were successfully set to *margins.*
    /// 
    /// **See also:** pageLayout()
    set_page_margins(margins: &MarginsFType, units: PageLayout::Unit) -> bool,
    /// 
    /// Returns the current page layout. Use this method to access the current
    /// QPageSize, QPageLayout::Orientation, QMarginsF, fullRect() and paintRect().
    /// 
    /// Note that you cannot use the setters on the returned object, you must either
    /// call the individual QPagedPaintDevice setters or use setPageLayout().
    /// 
    /// **See also:** setPageLayout()
    /// setPageSize()
    /// setPageOrientation()
    /// setPageMargins()
    page_layout() -> PageLayout,
    /// 
    /// Sets the size of the a page to *size.*
    /// 
    /// **See also:** setPageSizeMM()
    /// 
    /// Sets the page size to *size.* *size* is specified in millimeters.
    /// 
    /// If the size matches a standard QPagedPaintDevice::PageSize then that page
    /// size will be used, otherwise QPagedPaintDevice::Custom will be set.
    /// 
    /// Sets the page size to *pageSize.*
    /// 
    /// To get the current QPageSize use pageLayout().pageSize().
    /// 
    /// You should call this before calling QPainter::begin(), or immediately
    /// before calling newPage() to apply the new page size to a new page.
    /// You should not call any painting methods between a call to setPageSize()
    /// and newPage() as the wrong paint metrics may be used.
    /// 
    /// Returns true if the page size was successfully set to *pageSize.*
    /// 
    /// **See also:** pageLayout()
    [event] set_page_size(size: PagedPaintDevice::PageSize),
    /// 
    /// Returns the currently used page size.
    /// 
    /// Returns the page size in millimeters.
    page_size() -> PagedPaintDevice::PageSize,
    /// 
    /// Sets the page size to *size.* *size* is specified in millimeters.
    /// 
    /// If the size matches a standard QPagedPaintDevice::PageSize then that page
    /// size will be used, otherwise QPagedPaintDevice::Custom will be set.
    [event] set_page_size_mm(size: &SizeFType),
    /// 
    /// Returns the page size in millimeters.
    page_size_mm() -> SizeF,
    /// 
    /// Sets the margins to be used to *margins.*
    /// 
    /// Margins are specified in millimeters.
    /// 
    /// The margins are purely a hint to the drawing method. They don't affect the
    /// coordinate system or clipping.
    /// 
    /// **See also:** margins()
    [event] set_margins(margins: onst QPagedPaintDevice::Margins &),
    /// 
    /// Returns the current margins of the paint device. The default is 0.
    /// 
    /// Margins are specified in millimeters.
    /// 
    /// **See also:** setMargins()
    margins() -> PagedPaintDevice::Margins,
    dd() -> PagedPaintDevicePrivate?,
    device_page_layout() -> PageLayout,
    device_page_layout() -> PageLayout?,
}

// vim: syntax=rust expandtab ts=4 sw=4
