/// 
/// Paged paint devices are used to generate output for printing or for formats like PDF.
/// QPdfWriter and QPrinter inherit from it.
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct PagedPaintDevice : PaintDevice {
    /// 
    /// Starts a new page. Returns `true` on success.
    [event] new_page() -> bool,
    /// 
    /// Sets the page layout to *newPageLayout.*
    /// 
    /// You should call this before calling QPainter::begin(), or immediately
    /// before calling newPage() to apply the new page layout to a new page.
    /// You should not call any painting methods between a call to setPageLayout()
    /// and newPage() as the wrong paint metrics may be used.
    /// 
    /// Returns true if the page layout was successfully set to *newPageLayout.*
    /// 
    /// **See also:** [`page_layout()`]
    set_page_layout(page_layout: &PageLayoutType) -> bool,
    /// 
    /// Sets the size of the a page to *size.*
    /// 
    /// **See also:** [`set_page_size_mm()`]
    /// 
    /// Sets the page size to *size.* *size* is specified in millimeters.
    /// 
    /// If the size matches a standard QPagedPaintDevice::PageSize then that page
    /// size will be used, otherwise QPagedPaintDevice::Custom will be set.
    /// 
    /// Sets the page size to *pageSize.*
    /// 
    /// To get the current QPageSize use pageLayout().pageSize().
    /// 
    /// You should call this before calling QPainter::begin(), or immediately
    /// before calling newPage() to apply the new page size to a new page.
    /// You should not call any painting methods between a call to setPageSize()
    /// and newPage() as the wrong paint metrics may be used.
    /// 
    /// Returns true if the page size was successfully set to *pageSize.*
    /// 
    /// **See also:** [`page_layout()`]
    set_page_size(page_size: &PageSizeType) -> bool,
    /// 
    /// Sets the page *orientation.*
    /// 
    /// The page orientation is used to define the orientation of the
    /// page size when obtaining the page rect.
    /// 
    /// You should call this before calling QPainter::begin(), or immediately
    /// before calling newPage() to apply the new orientation to a new page.
    /// You should not call any painting methods between a call to setPageOrientation()
    /// and newPage() as the wrong paint metrics may be used.
    /// 
    /// To get the current QPageLayout::Orientation use pageLayout().pageOrientation().
    /// 
    /// Returns true if the page orientation was successfully set to *orientation.*
    /// 
    /// **See also:** [`page_layout()`]
    set_page_orientation(orientation: PageLayout::Orientation) -> bool,
    /// 
    /// Set the page *margins* in the current page layout units.
    /// 
    /// You should call this before calling QPainter::begin(), or immediately
    /// before calling newPage() to apply the new margins to a new page.
    /// You should not call any painting methods between a call to setPageMargins()
    /// and newPage() as the wrong paint metrics may be used.
    /// 
    /// To get the current page margins use pageLayout().pageMargins().
    /// 
    /// Returns true if the page margins were successfully set to *margins.*
    /// 
    /// **See also:** [`page_layout()`]
    /// 
    /// Set the page *margins* defined in the given *units.*
    /// 
    /// You should call this before calling QPainter::begin(), or immediately
    /// before calling newPage() to apply the new margins to a new page.
    /// You should not call any painting methods between a call to setPageMargins()
    /// and newPage() as the wrong paint metrics may be used.
    /// 
    /// To get the current page margins use pageLayout().pageMargins().
    /// 
    /// Returns true if the page margins were successfully set to *margins.*
    /// 
    /// **See also:** [`page_layout()`]
    set_page_margins(margins: &MarginsFType) -> bool,
    /// 
    /// Set the page *margins* in the current page layout units.
    /// 
    /// You should call this before calling QPainter::begin(), or immediately
    /// before calling newPage() to apply the new margins to a new page.
    /// You should not call any painting methods between a call to setPageMargins()
    /// and newPage() as the wrong paint metrics may be used.
    /// 
    /// To get the current page margins use pageLayout().pageMargins().
    /// 
    /// Returns true if the page margins were successfully set to *margins.*
    /// 
    /// **See also:** [`page_layout()`]
    /// 
    /// Set the page *margins* defined in the given *units.*
    /// 
    /// You should call this before calling QPainter::begin(), or immediately
    /// before calling newPage() to apply the new margins to a new page.
    /// You should not call any painting methods between a call to setPageMargins()
    /// and newPage() as the wrong paint metrics may be used.
    /// 
    /// To get the current page margins use pageLayout().pageMargins().
    /// 
    /// Returns true if the page margins were successfully set to *margins.*
    /// 
    /// **See also:** [`page_layout()`]
    [org_name(setPageMargins)]
    set_page_margins_2(margins: &MarginsFType, units: PageLayout::Unit) -> bool,
    /// 
    /// Returns the current page layout. Use this method to access the current
    /// QPageSize, QPageLayout::Orientation, QMarginsF, fullRect() and paintRect().
    /// 
    /// Note that you cannot use the setters on the returned object, you must either
    /// call the individual QPagedPaintDevice setters or use setPageLayout().
    /// 
    /// **See also:** [`set_page_layout()`]
    /// [`set_page_size()`]
    /// [`set_page_orientation()`]
    /// [`set_page_margins()`]
    page_layout() -> PageLayout,
    /// 
    /// Sets the size of the a page to *size.*
    /// 
    /// **See also:** [`set_page_size_mm()`]
    /// 
    /// Sets the page size to *size.* *size* is specified in millimeters.
    /// 
    /// If the size matches a standard QPagedPaintDevice::PageSize then that page
    /// size will be used, otherwise QPagedPaintDevice::Custom will be set.
    /// 
    /// Sets the page size to *pageSize.*
    /// 
    /// To get the current QPageSize use pageLayout().pageSize().
    /// 
    /// You should call this before calling QPainter::begin(), or immediately
    /// before calling newPage() to apply the new page size to a new page.
    /// You should not call any painting methods between a call to setPageSize()
    /// and newPage() as the wrong paint metrics may be used.
    /// 
    /// Returns true if the page size was successfully set to *pageSize.*
    /// 
    /// **See also:** [`page_layout()`]
    [org_name(setPageSize)]
    [event] set_page_size_2(size: PagedPaintDevice::PageSize),
    /// 
    /// Returns the currently used page size.
    /// 
    /// Returns the page size in millimeters.
    page_size() -> PagedPaintDevice::PageSize,
    /// 
    /// Sets the page size to *size.* *size* is specified in millimeters.
    /// 
    /// If the size matches a standard QPagedPaintDevice::PageSize then that page
    /// size will be used, otherwise QPagedPaintDevice::Custom will be set.
    [event] set_page_size_mm(size: &SizeFType),
    /// 
    /// Returns the page size in millimeters.
    page_size_mm() -> SizeF,
    /// 
    /// Sets the margins to be used to *margins.*
    /// 
    /// Margins are specified in millimeters.
    /// 
    /// The margins are purely a hint to the drawing method. They don't affect the
    /// coordinate system or clipping.
    /// 
    /// **See also:** [`margins()`]
    [event] set_margins(margins: onst QPagedPaintDevice::Margins &),
    /// 
    /// Returns the current margins of the paint device. The default is 0.
    /// 
    /// Margins are specified in millimeters.
    /// 
    /// **See also:** [`set_margins()`]
    margins() -> PagedPaintDevice::Margins,
    dd() -> PagedPaintDevicePrivate?,
    device_page_layout() -> PageLayout,
    [org_name(devicePageLayout)]
    device_page_layout_2() -> PageLayout?,
}

[org_name(QPagedPaintDevice)]
enum PageSize {
    /// 210 x 297 mm, 8.26 x 11.69 inches
    A4 = 0,
    /// 176 x 250 mm, 6.93 x 9.84 inches
    B5 = 1,
    /// 8.5 x 11 inches, 215.9 x 279.4 mm
    Letter = 2,
    /// 8.5 x 14 inches, 215.9 x 355.6 mm
    Legal = 3,
    /// 7.5 x 10 inches, 190.5 x 254 mm
    Executive = 4,
    /// 841 x 1189 mm
    A0 = 5,
    /// 594 x 841 mm
    A1 = 6,
    /// 420 x 594 mm
    A2 = 7,
    /// 297 x 420 mm
    A3 = 8,
    /// 148 x 210 mm
    A5 = 9,
    /// 105 x 148 mm
    A6 = 10,
    /// 74 x 105 mm
    A7 = 11,
    /// 52 x 74 mm
    A8 = 12,
    /// 37 x 52 mm
    A9 = 13,
    /// 1000 x 1414 mm
    B0 = 14,
    /// 707 x 1000 mm
    B1 = 15,
    /// 31 x 44 mm
    B10 = 16,
    /// 500 x 707 mm
    B2 = 17,
    /// 353 x 500 mm
    B3 = 18,
    /// 250 x 353 mm
    B4 = 19,
    /// 125 x 176 mm
    B6 = 20,
    /// 88 x 125 mm
    B7 = 21,
    /// 62 x 88 mm
    B8 = 22,
    /// 33 x 62 mm
    B9 = 23,
    /// 163 x 229 mm
    C5E = 24,
    /// 105 x 241 mm, U.S. Common 10 Envelope
    Comm10E = 25,
    /// 110 x 220 mm
    DLE = 26,
    /// 210 x 330 mm
    Folio = 27,
    /// 431.8 x 279.4 mm
    Ledger = 28,
    /// 279.4 x 431.8 mm
    Tabloid = 29,
    /// Unknown, or a user defined size.
    Custom = 30,
    /// 
    A10 = 31,
    /// 
    A3Extra = 32,
    /// 
    A4Extra = 33,
    /// 
    A4Plus = 34,
    /// 
    A4Small = 35,
    /// 
    A5Extra = 36,
    /// 
    B5Extra = 37,
    /// 
    JisB0 = 38,
    /// 
    JisB1 = 39,
    /// 
    JisB2 = 40,
    /// 
    JisB3 = 41,
    /// 
    JisB4 = 42,
    /// 
    JisB5 = 43,
    JisB6 = 44,
    /// 
    JisB7 = 45,
    /// 
    JisB8 = 46,
    /// 
    JisB9 = 47,
    /// 
    JisB10 = 48,
    /// 
    AnsiC = 49,
    /// 
    AnsiD = 50,
    /// 
    AnsiE = 51,
    /// 
    LegalExtra = 52,
    /// 
    LetterExtra = 53,
    /// 
    LetterPlus = 54,
    /// 
    LetterSmall = 55,
    /// 
    TabloidExtra = 56,
    /// 
    ArchA = 57,
    /// 
    ArchB = 58,
    /// 
    ArchC = 59,
    /// 
    ArchD = 60,
    /// 
    ArchE = 61,
    /// 
    Imperial7x9 = 62,
    /// 
    Imperial8x10 = 63,
    /// 
    Imperial9x11 = 64,
    /// 
    Imperial9x12 = 65,
    /// 
    Imperial10x11 = 66,
    /// 
    Imperial10x13 = 67,
    /// 
    Imperial10x14 = 68,
    /// 
    Imperial12x11 = 69,
    /// 
    Imperial15x11 = 70,
    /// 
    ExecutiveStandard = 71,
    /// 
    Note = 72,
    /// 
    Quarto = 73,
    /// 
    Statement = 74,
    /// 
    SuperA = 75,
    /// 
    SuperB = 76,
    /// 
    Postcard = 77,
    /// 
    DoublePostcard = 78,
    /// 
    Prc16K = 79,
    /// 
    Prc32K = 80,
    /// 
    Prc32KBig = 81,
    /// 
    FanFoldUS = 82,
    /// 
    FanFoldGerman = 83,
    /// 
    FanFoldGermanLegal = 84,
    /// 
    EnvelopeB4 = 85,
    /// 
    EnvelopeB5 = 86,
    /// 
    EnvelopeB6 = 87,
    /// 
    EnvelopeC0 = 88,
    /// 
    EnvelopeC1 = 89,
    /// 
    EnvelopeC2 = 90,
    /// 
    EnvelopeC3 = 91,
    /// 
    EnvelopeC4 = 92,
    /// 
    EnvelopeC6 = 93,
    /// 
    EnvelopeC65 = 94,
    /// 
    EnvelopeC7 = 95,
    /// 
    Envelope9 = 96,
    /// 
    Envelope11 = 97,
    /// 
    Envelope12 = 98,
    /// 
    Envelope14 = 99,
    /// 
    EnvelopeMonarch = 100,
    /// 
    EnvelopePersonal = 101,
    /// 
    EnvelopeChou3 = 102,
    /// 
    EnvelopeChou4 = 103,
    /// 
    EnvelopeInvite = 104,
    /// 
    EnvelopeItalian = 105,
    /// 
    EnvelopeKaku2 = 106,
    /// 
    EnvelopeKaku3 = 107,
    /// 
    EnvelopePrc1 = 108,
    /// 
    EnvelopePrc2 = 109,
    /// 
    EnvelopePrc3 = 110,
    /// 
    EnvelopePrc4 = 111,
    /// 
    EnvelopePrc5 = 112,
    /// 
    EnvelopePrc6 = 113,
    /// 
    EnvelopePrc7 = 114,
    /// 
    EnvelopePrc8 = 115,
    /// 
    EnvelopePrc9 = 116,
    /// 
    EnvelopePrc10 = 117,
    /// 
    EnvelopeYou4 = 118,
    /// = EnvelopeYou4
    LastPageSize = 118,
    NPageSize = 118,
    NPaperSize = 118,
    /// = Letter
    AnsiA = 2,
    /// = Ledger
    AnsiB = 28,
    /// = C5E
    EnvelopeC5 = 24,
    /// = DLE
    EnvelopeDL = 26,
    /// = Comm10E
    Envelope10 = 25,
}

[org_name(QPagedPaintDevice)]
enum PdfVersion {
    /// A PDF 1.4 compatible document is produced.
    PdfVersion_1_4 = 0,
    /// A PDF/A-1b compatible document is produced.
    PdfVersion_A1b = 1,
}

// vim: syntax=rust expandtab ts=4 sw=4
