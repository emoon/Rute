enum ColorGroup {
    Active,
    Disabled,
    Inactive,
    NColorGroups,
    Current,
    All,
    Normal,
}

enum ColorRole {
    WindowText,
    Button,
    Light,
    Midlight,
    Dark,
    Mid,
    Text,
    BrightText,
    ButtonText,
    Base,
    Window,
    Shadow,
    Highlight,
    HighlightedText,
    Link,
    LinkVisited,
    AlternateBase,
    NoRole,
    ToolTipBase,
    ToolTipText,
    NColorRoles,
    Foreground,
    Background,
}


struct Palette {
    qt_check_for_qgadget_macro(),
    swap(other: &PaletteType),
    current_color_group() -> Palette::ColorGroup,
    set_current_color_group(cg: Palette::ColorGroup),
    color(cg: Palette::ColorGroup, cr: Palette::ColorRole) -> &ColorType,
    brush(cg: Palette::ColorGroup, cr: Palette::ColorRole) -> &BrushType,
    set_color(cg: Palette::ColorGroup, cr: Palette::ColorRole, color: &ColorType),
    set_color(cr: Palette::ColorRole, color: &ColorType),
    set_brush(cr: Palette::ColorRole, brush: &BrushType),
    is_brush_set(cg: Palette::ColorGroup, cr: Palette::ColorRole) -> bool,
    set_brush(cg: Palette::ColorGroup, cr: Palette::ColorRole, brush: &BrushType),
    set_color_group(cr: Palette::ColorGroup, window_text: &BrushType, button: &BrushType, light: &BrushType, dark: &BrushType, mid: &BrushType, text: &BrushType, bright_text: &BrushType, base: &BrushType, window: &BrushType),
    is_equal(cr1: Palette::ColorGroup, cr2: Palette::ColorGroup) -> bool,
    color(cr: Palette::ColorRole) -> &ColorType,
    brush(cr: Palette::ColorRole) -> &BrushType,
    foreground() -> &BrushType,
    window_text() -> &BrushType,
    button() -> &BrushType,
    light() -> &BrushType,
    dark() -> &BrushType,
    mid() -> &BrushType,
    text() -> &BrushType,
    base() -> &BrushType,
    alternate_base() -> &BrushType,
    tool_tip_base() -> &BrushType,
    tool_tip_text() -> &BrushType,
    background() -> &BrushType,
    window() -> &BrushType,
    midlight() -> &BrushType,
    bright_text() -> &BrushType,
    button_text() -> &BrushType,
    shadow() -> &BrushType,
    highlight() -> &BrushType,
    highlighted_text() -> &BrushType,
    link() -> &BrushType,
    link_visited() -> &BrushType,
    is_copy_of(p: &PaletteType) -> bool,
    cache_key() -> i64,
    resolve(arg0: &PaletteType) -> PaletteType,
    resolve() -> uint,
    resolve(mask: uint),
}

// vim: syntax=rust expandtab ts=4 sw=4
