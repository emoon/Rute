[org_name(QTransform)]
enum TransformationType {
    TxNone,
    TxTranslate,
    TxScale,
    TxRotate,
    TxShear,
    TxProject,
}


struct Transform {
    is_affine() -> bool,
    is_identity() -> bool,
    is_invertible() -> bool,
    is_scaling() -> bool,
    is_rotating() -> bool,
    is_translating() -> bool,
    type() -> Transform::TransformationType,
    determinant() -> f32,
    det() -> f32,
    m11() -> f32,
    m12() -> f32,
    m13() -> f32,
    m21() -> f32,
    m22() -> f32,
    m23() -> f32,
    m31() -> f32,
    m32() -> f32,
    m33() -> f32,
    dx() -> f32,
    dy() -> f32,
    inverted(invertible: &bool) -> Transform,
    adjoint() -> Transform,
    scale(sx: f32, sy: f32) -> Transform?,
    shear(sh: f32, sv: f32) -> Transform?,
    rotate(a: f32, axis: Rute::Axis) -> Transform?,
    rotate_radians(a: f32, axis: Rute::Axis) -> Transform?,
    [static] square_to_quad(square: &PolygonFType, result: &TransformType) -> bool,
    [static] quad_to_square(quad: &PolygonFType, result: &TransformType) -> bool,
    [static] quad_to_quad(one: &PolygonFType, two: &PolygonFType, result: &TransformType) -> bool,
    reset(),
    map(p: &PointType) -> Point,
    map(p: &PointFType) -> PointF,
    map(l: &LineType) -> Line,
    map(l: &LineFType) -> LineF,
    map(a: &PolygonFType) -> PolygonF,
    map(a: &PolygonType) -> Polygon,
    map(r: &RegionType) -> Region,
    map(p: &PainterPathType) -> PainterPath,
    map_to_polygon(r: &RectType) -> Polygon,
    map_rect(arg0: &RectType) -> Rect,
    map_rect(arg0: &RectFType) -> RectF,
    map(x: i32, y: i32, tx: &i32, ty: &i32),
    map(x: f32, y: f32, tx: &f32, ty: &f32),
    to_affine() -> Matrix?,
    [static] from_translate(dx: f32, dy: f32) -> Transform,
    [static] from_scale(dx: f32, dy: f32) -> Transform,
}

// vim: syntax=rust expandtab ts=4 sw=4
