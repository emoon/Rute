
struct Transform {
    is_affine() -> bool,
    is_identity() -> bool,
    is_invertible() -> bool,
    is_scaling() -> bool,
    is_rotating() -> bool,
    is_translating() -> bool,
    type() -> Transform::TransformationType,
    determinant() -> f32,
    det() -> f32,
    m11() -> f32,
    m12() -> f32,
    m13() -> f32,
    m21() -> f32,
    m22() -> f32,
    m23() -> f32,
    m31() -> f32,
    m32() -> f32,
    m33() -> f32,
    dx() -> f32,
    dy() -> f32,
    inverted(&bool invertible) -> TransformType,
    adjoint() -> TransformType,
    scale(f32 sx, f32 sy) -> &TransformType,
    shear(f32 sh, f32 sv) -> &TransformType,
    rotate(f32 a, Rute::Axis axis) -> &TransformType,
    rotate_radians(f32 a, Rute::Axis axis) -> &TransformType,
    square_to_quad(&PolygonFType square, &TransformType result) -> bool,
    quad_to_square(&PolygonFType quad, &TransformType result) -> bool,
    quad_to_quad(&PolygonFType one, &PolygonFType two, &TransformType result) -> bool,
    reset(),
    map(&PointType p) -> PointType,
    map(&PointFType p) -> PointFType,
    map(&LineType l) -> LineType,
    map(&LineFType l) -> LineFType,
    map(&PolygonFType a) -> PolygonFType,
    map(&PolygonType a) -> PolygonType,
    map(&RegionType r) -> RegionType,
    map(&PainterPathType p) -> PainterPathType,
    map_to_polygon(&RectType r) -> PolygonType,
    map_rect(&RectType arg0) -> RectType,
    map_rect(&RectFType arg0) -> RectFType,
    map(i32 x, i32 y, &i32 tx, &i32 ty),
    map(f32 x, f32 y, &f32 tx, &f32 ty),
    to_affine() -> &MatrixType,
    from_translate(f32 dx, f32 dy) -> TransformType,
    from_scale(f32 dx, f32 dy) -> TransformType,
}

// vim: syntax=rust expandtab ts=4 sw=4
