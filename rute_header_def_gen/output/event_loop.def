/// 
/// At any time, you can create a QEventLoop object and call exec()
/// on it to start a local event loop. From within the event loop,
/// calling exit() will force exec() to return.
/// 
/// **See also:** [`AbstractEventDispatcher`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct EventLoop : Object {
    /// 
    /// Processes pending events that match *flags* until there are no
    /// more events to process. Returns `true` if pending events were handled;
    /// otherwise returns `false.`
    /// 
    /// This function is especially useful if you have a long running
    /// operation and want to show its progress without allowing user
    /// input; i.e. by using the [ExcludeUserInputEvents](ExcludeUserInputEvents)
    /// flag.
    /// 
    /// This function is simply a wrapper for
    /// QAbstractEventDispatcher::processEvents(). See the documentation
    /// for that function for details.
    /// 
    /// Process pending events that match *flags* for a maximum of *maxTime* milliseconds, or until there are no more events to
    /// process, whichever is shorter.
    /// This function is especially useful if you have a long running
    /// operation and want to show its progress without allowing user
    /// input, i.e. by using the [ExcludeUserInputEvents](ExcludeUserInputEvents)
    /// flag.
    /// 
    /// **Notes:**
    /// * This function does not process events continuously; it returns after all available events are processed.
    /// * Specifying the [WaitForMoreEvents](WaitForMoreEvents)
    /// flag makes no sense and will be ignored.
    process_events(flags: EventLoop::ProcessEventsFlags) -> bool,
    /// 
    /// Processes pending events that match *flags* until there are no
    /// more events to process. Returns `true` if pending events were handled;
    /// otherwise returns `false.`
    /// 
    /// This function is especially useful if you have a long running
    /// operation and want to show its progress without allowing user
    /// input; i.e. by using the [ExcludeUserInputEvents](ExcludeUserInputEvents)
    /// flag.
    /// 
    /// This function is simply a wrapper for
    /// QAbstractEventDispatcher::processEvents(). See the documentation
    /// for that function for details.
    /// 
    /// Process pending events that match *flags* for a maximum of *maxTime* milliseconds, or until there are no more events to
    /// process, whichever is shorter.
    /// This function is especially useful if you have a long running
    /// operation and want to show its progress without allowing user
    /// input, i.e. by using the [ExcludeUserInputEvents](ExcludeUserInputEvents)
    /// flag.
    /// 
    /// **Notes:**
    /// * This function does not process events continuously; it returns after all available events are processed.
    /// * Specifying the [WaitForMoreEvents](WaitForMoreEvents)
    /// flag makes no sense and will be ignored.
    [org_name(processEvents)]
    process_events_2(flags: EventLoop::ProcessEventsFlags, maximum_time: i32),
    /// 
    /// Enters the main event loop and waits until exit() is called.
    /// Returns the value that was passed to exit().
    /// 
    /// If *flags* are specified, only events of the types allowed by
    /// the *flags* will be processed.
    /// 
    /// It is necessary to call this function to start event handling. The
    /// main event loop receives events from the window system and
    /// dispatches these to the application widgets.
    /// 
    /// Generally speaking, no user interaction can take place before
    /// calling exec(). As a special case, modal widgets like QMessageBox
    /// can be used before calling exec(), because modal widgets
    /// use their own local event loop.
    /// 
    /// To make your application perform idle processing (i.e. executing a
    /// special function whenever there are no pending events), use a
    /// QTimer with 0 timeout. More sophisticated idle processing schemes
    /// can be achieved using processEvents().
    /// 
    /// **See also:** [`CoreApplication::quit`]
    /// [`exit()`]
    /// [`process_events()`]
    exec(flags: EventLoop::ProcessEventsFlags) -> i32,
    /// 
    /// Tells the event loop to exit with a return code.
    /// 
    /// After this function has been called, the event loop returns from
    /// the call to exec(). The exec() function returns *returnCode.*
    /// 
    /// By convention, a *returnCode* of 0 means success, and any non-zero
    /// value indicates an error.
    /// 
    /// Note that unlike the C library function of the same name, this
    /// function *does* return to the caller -- it is event processing that
    /// stops.
    /// 
    /// **See also:** [`CoreApplication::quit`]
    /// [`quit()`]
    /// [`exec()`]
    exit(return_code: i32),
    /// 
    /// Returns `true` if the event loop is running; otherwise returns
    /// false. The event loop is considered running from the time when
    /// exec() is called until exit() is called.
    /// 
    /// **See also:** [`exec()`]
    /// [`exit()`]
    is_running() -> bool,
    /// 
    /// Wakes up the event loop.
    /// 
    /// **See also:** [`AbstractEventDispatcher::wake_up`]
    wake_up(),
    /// 
    [event] event(event: *EventType) -> bool,
    /// 
    /// Tells the event loop to exit normally.
    /// 
    /// Same as exit(0).
    /// 
    /// **See also:** [`CoreApplication::quit`]
    /// [`exit()`]
    quit(),
}

[org_name(QEventLoop)]
enum ProcessEventsFlag {
    /// All events. Note that
    AllEvents,
    /// Do not process user input events,
    ExcludeUserInputEvents,
    /// Do not process socket notifier
    ExcludeSocketNotifiers,
    /// Wait for events if no pending events are
    WaitForMoreEvents,
    X11ExcludeTimers,
    EventLoopExec,
    DialogExec,
}

// vim: syntax=rust expandtab ts=4 sw=4
