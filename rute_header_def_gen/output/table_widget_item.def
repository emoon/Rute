/// 
/// Table items are used to hold pieces of information for table widgets.
/// Items usually contain text, icons, or checkboxes
/// 
/// The QTableWidgetItem class is a convenience class that replaces the
/// `QTableItem` class in Qt 3. It provides an item for use with
/// the QTableWidget class.
/// 
/// Top-level items are constructed without a parent then inserted at the
/// position specified by a pair of row and column numbers:
/// 
/// Each item can have its own background brush which is set with
/// the setBackground() function. The current background brush can be
/// found with background().
/// The text label for each item can be rendered with its own font and brush.
/// These are specified with the setFont() and setForeground() functions,
/// and read with font() and foreground().
/// 
/// By default, items are enabled, editable, selectable, checkable, and can be
/// used both as the source of a drag and drop operation and as a drop target.
/// Each item's flags can be changed by calling setFlags() with the appropriate
/// value (see [Qt::ItemFlags](Qt::ItemFlags)
/// ). Checkable items can be checked and unchecked
/// with the setCheckState() function. The corresponding checkState() function
/// indicates whether the item is currently checked.
/// 
/// # Subclassing
/// 
/// When subclassing QTableWidgetItem to provide custom items, it is possible to
/// define new types for them so that they can be distinguished from standard
/// items. The constructors for subclasses that require this feature need to
/// call the base class constructor with a new type value equal to or greater
/// than [UserType.](UserType.)
/// 
/// **See also:** [`TableWidget`]
/// {Model/View Programming}
/// [`ListWidgetItem`]
/// [`TreeWidgetItem`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TableWidgetItem {
    /// 
    /// Creates a copy of the item.
    [event] clone() -> TableWidgetItem?,
    /// 
    /// Returns the table widget that contains the item.
    table_widget() -> TableWidget?,
    /// 
    /// Returns the row of the item in the table.
    /// If the item is not in a table, this function will return -1.
    /// 
    /// **See also:** [`column()`]
    row() -> i32,
    /// 
    /// Returns the column of the item in the table.
    /// If the item is not in a table, this function will return -1.
    /// 
    /// **See also:** [`row()`]
    column() -> i32,
    /// 
    /// Sets the selected state of the item to *select.*
    /// 
    /// **See also:** [`is_selected()`]
    set_selected(select: bool),
    /// 
    /// Returns `true` if the item is selected, otherwise returns `false.`
    /// 
    /// **See also:** [`set_selected()`]
    is_selected() -> bool,
    /// 
    /// Returns the flags used to describe the item. These determine whether
    /// the item can be checked, edited, and selected.
    /// 
    /// **See also:** [`set_flags()`]
    flags() -> Rute::ItemFlags,
    /// 
    /// Sets the flags for the item to the given *flags.* These determine whether
    /// the item can be selected or modified.
    /// 
    /// **See also:** [`flags()`]
    set_flags(flags: Rute::ItemFlags),
    /// 
    /// Returns the item's text.
    /// 
    /// **See also:** [`set_text()`]
    /// 
    /// This function is deprecated. Use foreground() instead.
    /// 
    /// Returns the text alignment for the item's text.
    /// 
    /// **See also:** [`t::alignment()`]
    text() -> String,
    /// 
    /// Sets the item's text to the *text* specified.
    /// 
    /// **See also:** [`text()`]
    /// [`set_font()`]
    /// [`set_foreground()`]
    /// 
    /// This function is deprecated. Use setForeground() instead.
    /// 
    /// Sets the text alignment for the item's text to the *alignment*
    /// specified.
    /// 
    /// **See also:** [`t::alignment()`]
    set_text(text: String),
    /// 
    /// Returns the item's icon.
    /// 
    /// **See also:** [`set_icon()`]
    /// {QAbstractItemView::iconSize}{iconSize}
    icon() -> Icon,
    /// 
    /// Sets the item's icon to the *icon* specified.
    /// 
    /// **See also:** [`icon()`]
    /// [`set_text()`]
    /// {QAbstractItemView::iconSize}{iconSize}
    set_icon(icon: &IconType),
    /// 
    /// Returns the item's status tip.
    /// 
    /// **See also:** [`set_status_tip()`]
    status_tip() -> String,
    /// 
    /// Sets the status tip for the table item to the text specified by
    /// *statusTip.* QTableWidget mouse tracking needs to be enabled for this
    /// feature to work.
    /// 
    /// **See also:** [`status_tip()`]
    /// [`set_tool_tip()`]
    /// [`set_whats_this()`]
    set_status_tip(status_tip: String),
    /// 
    /// Returns the item's tooltip.
    /// 
    /// **See also:** [`set_tool_tip()`]
    tool_tip() -> String,
    /// 
    /// Sets the item's tooltip to the string specified by *toolTip.*
    /// 
    /// **See also:** [`tool_tip()`]
    /// [`set_status_tip()`]
    /// [`set_whats_this()`]
    set_tool_tip(tool_tip: String),
    /// 
    /// Returns the item's help.
    /// 
    /// **See also:** [`set_whats_this()`]
    whats_this() -> String,
    /// 
    /// Sets the item's help to the string specified by *whatsThis.*
    /// 
    /// **See also:** [`whats_this()`]
    /// [`set_status_tip()`]
    /// [`set_tool_tip()`]
    set_whats_this(whats_this: String),
    /// 
    /// Returns the font used to render the item's text.
    /// 
    /// **See also:** [`set_font()`]
    font() -> Font,
    /// 
    /// Sets the font used to display the item's text to the given *font.*
    /// 
    /// **See also:** [`font()`]
    /// [`set_text()`]
    /// [`set_foreground()`]
    set_font(font: &FontType),
    /// 
    /// Returns the text alignment for the item's text.
    /// 
    /// **See also:** [`t::alignment()`]
    text_alignment() -> i32,
    /// 
    /// Sets the text alignment for the item's text to the *alignment*
    /// specified.
    /// 
    /// **See also:** [`t::alignment()`]
    set_text_alignment(alignment: i32),
    /// 
    /// This function is deprecated. Use background() instead.
    background_color() -> Color,
    /// 
    /// This function is deprecated. Use setBackground() instead.
    set_background_color(color: &ColorType),
    /// 
    /// This function is deprecated. Use background() instead.
    /// 
    /// Returns the brush used to render the item's background.
    /// 
    /// **See also:** [`foreground()`]
    background() -> Brush,
    /// 
    /// This function is deprecated. Use setBackground() instead.
    /// 
    /// Sets the item's background brush to the specified *brush.*
    /// 
    /// **See also:** [`set_foreground()`]
    set_background(brush: &BrushType),
    /// 
    /// This function is deprecated. Use foreground() instead.
    text_color() -> Color,
    /// 
    /// This function is deprecated. Use setForeground() instead.
    set_text_color(color: &ColorType),
    /// 
    /// Returns the brush used to render the item's foreground (e.g. text).
    /// 
    /// **See also:** [`background()`]
    foreground() -> Brush,
    /// 
    /// Sets the item's foreground brush to the specified *brush.*
    /// 
    /// **See also:** [`set_background()`]
    set_foreground(brush: &BrushType),
    /// 
    /// Returns the checked state of the table item.
    /// 
    /// **See also:** [`flags()`]
    check_state() -> Rute::CheckState,
    /// 
    /// Sets the check state of the table item to be *state.*
    set_check_state(state: Rute::CheckState),
    /// 
    /// Returns the size hint set for the table item.
    size_hint() -> Size,
    /// 
    /// Sets the size hint for the table item to be *size.*
    /// If no size hint is set, the item delegate will compute the
    /// size hint based on the item data.
    set_size_hint(size: &SizeType),
    /// 
    /// Returns the item's data for the given *role.*
    [event] data(role: i32) -> Variant,
    /// 
    /// Sets the item's data for the given *role* to the specified *value.*
    /// 
    /// **Note**: The default implementation treats Qt::EditRole and Qt::DisplayRole as
    /// referring to the same data.
    /// 
    /// **See also:** [`t::item_data_role()`]
    /// [`data()`]
    [event] set_data(role: i32, value: &VariantType),
    /// 
    /// Reads the item from stream *in.*
    /// 
    /// **See also:** [`write()`]
    [event] read(in: &DataStreamType),
    /// 
    /// Writes the item to stream *out.*
    /// 
    /// **See also:** [`read()`]
    [event] write(out: &DataStreamType),
    /// 
    /// Returns the type passed to the QTableWidgetItem constructor.
    type() -> i32,
}

[org_name(QTableWidgetItem)]
enum ItemType {
    /// The default type for table widget items.
    Type,
    /// The minimum value for custom types. Values below UserType are reserved by Qt. You can define new user types in QTableWidgetItem subclasses to ensure that custom items are treated specially.
    UserType,
}

// vim: syntax=rust expandtab ts=4 sw=4
