///     \class QTableWidgetItem
///     \brief The QTableWidgetItem class provides an item for use with the
///     QTableWidget class.
/// 
///     \ingroup model-view
///     \inmodule QtWidgets
/// 
///     Table items are used to hold pieces of information for table widgets.
///     Items usually contain text, icons, or checkboxes
/// 
///     The QTableWidgetItem class is a convenience class that replaces the
///     \c QTableItem class in Qt 3. It provides an item for use with
///     the QTableWidget class.
/// 
///     Top-level items are constructed without a parent then inserted at the
///     position specified by a pair of row and column numbers:
/// 
///     \snippet qtablewidget-using/mainwindow.cpp 3
/// 
///     Each item can have its own background brush which is set with
///     the setBackground() function. The current background brush can be
///     found with background().
///     The text label for each item can be rendered with its own font and brush.
///     These are specified with the setFont() and setForeground() functions,
///     and read with font() and foreground().
/// 
///     By default, items are enabled, editable, selectable, checkable, and can be
///     used both as the source of a drag and drop operation and as a drop target.
///     Each item's flags can be changed by calling setFlags() with the appropriate
///     value (see \l{Qt::ItemFlags}). Checkable items can be checked and unchecked
///     with the setCheckState() function. The corresponding checkState() function
///     indicates whether the item is currently checked.
/// 
///     \section1 Subclassing
/// 
///     When subclassing QTableWidgetItem to provide custom items, it is possible to
///     define new types for them so that they can be distinguished from standard
///     items. The constructors for subclasses that require this feature need to
///     call the base class constructor with a new type value equal to or greater
///     than \l UserType.
/// 
///     \sa QTableWidget, {Model/View Programming}, QListWidgetItem, QTreeWidgetItem
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QTableWidgetItem)]
enum ItemType {
    Type,
    UserType,
}


struct TableWidgetItem {
    ///     Creates a copy of the item.
    [event] clone() -> TableWidgetItem?,
    table_widget() -> TableWidget?,
    row() -> i32,
    column() -> i32,
    set_selected(select: bool),
    is_selected() -> bool,
    flags() -> Rute::ItemFlags,
    ///     \fn void QTableWidgetItem::setFlags(Qt::ItemFlags flags)
    /// 
    ///     Sets the flags for the item to the given \a flags. These determine whether
    ///     the item can be selected or modified.
    /// 
    ///     \sa flags()
    set_flags(flags: Rute::ItemFlags),
    text() -> String,
    set_text(text: String),
    icon() -> Icon,
    set_icon(icon: &IconType),
    status_tip() -> String,
    set_status_tip(status_tip: String),
    tool_tip() -> String,
    set_tool_tip(tool_tip: String),
    whats_this() -> String,
    set_whats_this(whats_this: String),
    font() -> Font,
    set_font(font: &FontType),
    text_alignment() -> i32,
    set_text_alignment(alignment: i32),
    background_color() -> Color,
    set_background_color(color: &ColorType),
    background() -> Brush,
    set_background(brush: &BrushType),
    text_color() -> Color,
    set_text_color(color: &ColorType),
    foreground() -> Brush,
    set_foreground(brush: &BrushType),
    check_state() -> Rute::CheckState,
    set_check_state(state: Rute::CheckState),
    size_hint() -> Size,
    set_size_hint(size: &SizeType),
    ///     Returns the item's data for the given \a role.
    [event] data(role: i32) -> Variant,
    ///     Sets the item's data for the given \a role to the specified \a value.
    /// 
    ///     \note The default implementation treats Qt::EditRole and Qt::DisplayRole as
    ///     referring to the same data.
    /// 
    ///     \sa Qt::ItemDataRole, data()
    [event] set_data(role: i32, value: &VariantType),
    ///     Reads the item from stream \a in.
    /// 
    ///     \sa write()
    [event] read(in: &DataStreamType),
    ///     Writes the item to stream \a out.
    /// 
    ///     \sa read()
    [event] write(out: &DataStreamType),
    type() -> i32,
}

// vim: syntax=rust expandtab ts=4 sw=4
