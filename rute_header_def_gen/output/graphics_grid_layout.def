/// 
/// The most common way to use QGraphicsGridLayout is to construct an object
/// on the heap with no parent, add widgets and layouts by calling addItem(),
/// and finally assign the layout to a widget by calling
/// QGraphicsWidget::setLayout(). QGraphicsGridLayout automatically computes
/// the dimensions of the grid as you add items.
/// 
/// The layout takes ownership of the items. In some cases when the layout
/// item also inherits from QGraphicsItem (such as QGraphicsWidget) there will be a
/// ambiguity in ownership because the layout item belongs to two ownership hierarchies.
/// See the documentation of QGraphicsLayoutItem::setOwnedByLayout() how to handle
/// this.
/// You can access each item in the layout by calling count() and itemAt(). Calling
/// removeAt() will remove an item from the layout, without
/// destroying it.
/// 
/// # Size Hints and Size Policies in QGraphicsGridLayout
/// 
/// QGraphicsGridLayout respects each item's size hints and size policies,
/// and when a cell in the grid has more space than the items can fill, each item
/// is arranged according to the layout's alignment for that item. You can set
/// an alignment for each item by calling setAlignment(), and check the
/// alignment for any item by calling alignment(). You can also set the alignment
/// for an entire row or column by calling setRowAlignment() and setColumnAlignment()
/// respectively. By default, items are aligned to the top left.
/// 
/// **See also:** QGraphicsLinearLayout
/// QGraphicsWidget
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GraphicsGridLayout : GraphicsLayout {
    /// 
    /// Adds *item* to the grid on *row* and *column.* You can specify a
    /// *rowSpan* and *columnSpan* and an optional *alignment.*
    /// 
    /// Adds *item* to the grid on *row* and *column.* You can specify
    /// an optional *alignment* for *item.*
    add_item(item: *GraphicsLayoutItemType, row: i32, column: i32, row_span: i32, column_span: i32, alignment: Rute::Alignment),
    /// 
    /// Adds *item* to the grid on *row* and *column.* You can specify a
    /// *rowSpan* and *columnSpan* and an optional *alignment.*
    /// 
    /// Adds *item* to the grid on *row* and *column.* You can specify
    /// an optional *alignment* for *item.*
    add_item_2(item: *GraphicsLayoutItemType, row: i32, column: i32, alignment: Rute::Alignment),
    /// 
    /// Sets the default horizontal spacing for the grid layout to *spacing.*
    set_horizontal_spacing(spacing: f32),
    /// 
    /// Returns the default horizontal spacing for the grid layout.
    horizontal_spacing() -> f32,
    /// 
    /// Sets the default vertical spacing for the grid layout to *spacing.*
    set_vertical_spacing(spacing: f32),
    /// 
    /// Returns the default vertical spacing for the grid layout.
    vertical_spacing() -> f32,
    /// 
    /// Sets the grid layout's default spacing, both vertical and
    /// horizontal, to *spacing.*
    /// 
    /// **See also:** rowSpacing()
    /// columnSpacing()
    set_spacing(spacing: f32),
    /// 
    /// Sets the spacing for *row* to *spacing.*
    set_row_spacing(row: i32, spacing: f32),
    /// 
    /// Returns the row spacing for *row.*
    row_spacing(row: i32) -> f32,
    /// 
    /// Sets the spacing for *column* to *spacing.*
    set_column_spacing(column: i32, spacing: f32),
    /// 
    /// Returns the column spacing for *column.*
    column_spacing(column: i32) -> f32,
    /// 
    /// Sets the minimum height for row, *row,* to *height.*
    set_row_minimum_height(row: i32, height: f32),
    /// 
    /// Returns the minimum height for row, *row.*
    row_minimum_height(row: i32) -> f32,
    /// 
    /// Sets the preferred height for row, *row,* to *height.*
    set_row_preferred_height(row: i32, height: f32),
    /// 
    /// Returns the preferred height for row, *row.*
    row_preferred_height(row: i32) -> f32,
    /// 
    /// Sets the maximum height for row, *row,* to *height.*
    set_row_maximum_height(row: i32, height: f32),
    /// 
    /// Returns the maximum height for row, *row.*
    row_maximum_height(row: i32) -> f32,
    /// 
    /// Sets the fixed height for row, *row,* to *height.*
    set_row_fixed_height(row: i32, height: f32),
    /// 
    /// Sets the minimum width for *column* to *width.*
    set_column_minimum_width(column: i32, width: f32),
    /// 
    /// Returns the minimum width for *column.*
    column_minimum_width(column: i32) -> f32,
    /// 
    /// Sets the preferred width for *column* to *width.*
    set_column_preferred_width(column: i32, width: f32),
    /// 
    /// Returns the preferred width for *column.*
    column_preferred_width(column: i32) -> f32,
    /// 
    /// Sets the maximum width of *column* to *width.*
    set_column_maximum_width(column: i32, width: f32),
    /// 
    /// Returns the maximum width for *column.*
    column_maximum_width(column: i32) -> f32,
    /// 
    /// Sets the fixed width of *column* to *width.*
    set_column_fixed_width(column: i32, width: f32),
    /// 
    /// Sets the alignment of *row* to *alignment.*
    set_row_alignment(row: i32, alignment: Rute::Alignment),
    /// 
    /// Returns the alignment of *row.*
    row_alignment(row: i32) -> Rute::Alignment,
    /// 
    /// Sets the alignment for *column* to *alignment.*
    set_column_alignment(column: i32, alignment: Rute::Alignment),
    /// 
    /// Returns the alignment for *column.*
    column_alignment(column: i32) -> Rute::Alignment,
    /// 
    /// Sets the alignment for *item* to *alignment.*
    set_alignment(item: *GraphicsLayoutItemType, alignment: Rute::Alignment),
    /// 
    /// Returns the alignment for *item.*
    alignment(item: *GraphicsLayoutItemType) -> Rute::Alignment,
    /// 
    /// Returns the number of rows in the grid layout. This is always one more
    /// than the index of the last row that is occupied by a layout item (empty
    /// rows are counted except for those at the end).
    row_count() -> i32,
    /// 
    /// Returns the number of columns in the grid layout. This is always one more
    /// than the index of the last column that is occupied by a layout item (empty
    /// columns are counted except for those at the end).
    column_count() -> i32,
    /// 
    /// Returns a pointer to the layout item at ( *row,* *column).*
    /// 
    /// Returns the layout item at *index,* or 0 if there is no layout item at
    /// this index.
    item_at(row: i32, column: i32) -> GraphicsLayoutItem?,
    /// 
    /// Returns the number of layout items in this grid layout.
    [event] count() -> i32,
    /// 
    /// Returns a pointer to the layout item at ( *row,* *column).*
    /// 
    /// Returns the layout item at *index,* or 0 if there is no layout item at
    /// this index.
    [event] item_at_2(index: i32) -> GraphicsLayoutItem?,
    /// 
    /// Removes the layout item at *index* without destroying it. Ownership of
    /// the item is transferred to the caller.
    /// 
    /// **See also:** addItem()
    [event] remove_at(index: i32),
    /// 
    /// Removes the layout item *item* without destroying it.
    /// Ownership of the item is transferred to the caller.
    /// 
    /// **See also:** addItem()
    remove_item(item: *GraphicsLayoutItemType),
    /// 
    [event] invalidate(),
    /// 
    [event] size_hint(which: Rute::SizeHint, constraint: &SizeFType) -> SizeF,
}

// vim: syntax=rust expandtab ts=4 sw=4
