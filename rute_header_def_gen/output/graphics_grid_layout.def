///     \class QGraphicsGridLayout
///     \brief The QGraphicsGridLayout class provides a grid layout for managing
///     widgets in Graphics View.
///     \since 4.4
/// 
///     \ingroup graphicsview-api
///     \inmodule QtWidgets
/// 
///     The most common way to use QGraphicsGridLayout is to construct an object
///     on the heap with no parent, add widgets and layouts by calling addItem(),
///     and finally assign the layout to a widget by calling
///     QGraphicsWidget::setLayout(). QGraphicsGridLayout automatically computes
///     the dimensions of the grid as you add items.
/// 
///     \snippet code/src_gui_graphicsview_qgraphicsgridlayout.cpp 0
/// 
///     The layout takes ownership of the items. In some cases when the layout
///     item also inherits from QGraphicsItem (such as QGraphicsWidget) there will be a
///     ambiguity in ownership because the layout item belongs to two ownership hierarchies.
///     See the documentation of QGraphicsLayoutItem::setOwnedByLayout() how to handle
///     this.
///     You can access each item in the layout by calling count() and itemAt(). Calling
///     removeAt() will remove an item from the layout, without
///     destroying it.
/// 
///     \section1 Size Hints and Size Policies in QGraphicsGridLayout
/// 
///     QGraphicsGridLayout respects each item's size hints and size policies,
///     and when a cell in the grid has more space than the items can fill, each item
///     is arranged according to the layout's alignment for that item. You can set
///     an alignment for each item by calling setAlignment(), and check the
///     alignment for any item by calling alignment(). You can also set the alignment
///     for an entire row or column by calling setRowAlignment() and setColumnAlignment()
///     respectively.  By default, items are aligned to the top left.
/// 
/// 
///     \sa QGraphicsLinearLayout, QGraphicsWidget
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GraphicsGridLayout : GraphicsLayout {
    add_item(item: *GraphicsLayoutItemType, row: i32, column: i32, row_span: i32, column_span: i32, alignment: Rute::Alignment),
    add_item(item: *GraphicsLayoutItemType, row: i32, column: i32, alignment: Rute::Alignment),
    ///     Sets the default horizontal spacing for the grid layout to \a spacing.
    set_horizontal_spacing(spacing: f32),
    ///     Returns the default horizontal spacing for the grid layout.
    horizontal_spacing() -> f32,
    ///     Sets the default vertical spacing for the grid layout to \a spacing.
    set_vertical_spacing(spacing: f32),
    ///     Returns the default vertical spacing for the grid layout.
    vertical_spacing() -> f32,
    ///     Sets the grid layout's default spacing, both vertical and
    ///     horizontal, to \a spacing.
    /// 
    ///     \sa rowSpacing(), columnSpacing()
    set_spacing(spacing: f32),
    ///     Sets the spacing for \a row to \a spacing.
    set_row_spacing(row: i32, spacing: f32),
    ///     Returns the row spacing for \a row.
    row_spacing(row: i32) -> f32,
    ///     Sets the spacing for \a column to \a spacing.
    set_column_spacing(column: i32, spacing: f32),
    ///     Returns the column spacing for \a column.
    column_spacing(column: i32) -> f32,
    ///     Sets the minimum height for row, \a row, to \a height.
    set_row_minimum_height(row: i32, height: f32),
    ///     Returns the minimum height for row, \a row.
    row_minimum_height(row: i32) -> f32,
    ///     Sets the preferred height for row, \a row, to \a height.
    set_row_preferred_height(row: i32, height: f32),
    ///     Returns the preferred height for row, \a row.
    row_preferred_height(row: i32) -> f32,
    ///     Sets the maximum height for row, \a row, to \a height.
    set_row_maximum_height(row: i32, height: f32),
    ///     Returns the maximum height for row, \a row.
    row_maximum_height(row: i32) -> f32,
    ///     Sets the fixed height for row, \a row, to \a height.
    set_row_fixed_height(row: i32, height: f32),
    ///     Sets the minimum width for \a column to \a width.
    set_column_minimum_width(column: i32, width: f32),
    ///     Returns the minimum width for \a column.
    column_minimum_width(column: i32) -> f32,
    ///     Sets the preferred width for \a column to \a width.
    set_column_preferred_width(column: i32, width: f32),
    ///     Returns the preferred width for \a column.
    column_preferred_width(column: i32) -> f32,
    ///     Sets the maximum width of \a column to \a width.
    set_column_maximum_width(column: i32, width: f32),
    ///     Returns the maximum width for \a column.
    column_maximum_width(column: i32) -> f32,
    ///     Sets the fixed width of \a column to \a width.
    set_column_fixed_width(column: i32, width: f32),
    ///     Sets the alignment of \a row to \a alignment.
    set_row_alignment(row: i32, alignment: Rute::Alignment),
    ///     Returns the alignment of \a row.
    row_alignment(row: i32) -> Rute::Alignment,
    ///     Sets the alignment for \a column to \a alignment.
    set_column_alignment(column: i32, alignment: Rute::Alignment),
    ///     Returns the alignment for \a column.
    column_alignment(column: i32) -> Rute::Alignment,
    ///     Sets the alignment for \a item to \a alignment.
    set_alignment(item: *GraphicsLayoutItemType, alignment: Rute::Alignment),
    ///     Returns the alignment for \a item.
    alignment(item: *GraphicsLayoutItemType) -> Rute::Alignment,
    ///     Returns the number of rows in the grid layout. This is always one more
    ///     than the index of the last row that is occupied by a layout item (empty
    ///     rows are counted except for those at the end).
    row_count() -> i32,
    ///     Returns the number of columns in the grid layout. This is always one more
    ///     than the index of  the last column that is occupied by a layout item (empty
    ///     columns are counted except for those at the end).
    column_count() -> i32,
    ///     Returns the layout item at \a index, or 0 if there is no layout item at
    ///     this index.
    item_at(row: i32, column: i32) -> GraphicsLayoutItem?,
    ///     Returns the number of layout items in this grid layout.
    [event] count() -> i32,
    ///     Returns the layout item at \a index, or 0 if there is no layout item at
    ///     this index.
    [event] item_at(index: i32) -> GraphicsLayoutItem?,
    ///     Removes the layout item at \a index without destroying it. Ownership of
    ///     the item is transferred to the caller.
    /// 
    ///     \sa addItem()
    [event] remove_at(index: i32),
    ///     Removes the layout item \a item without destroying it.
    ///     Ownership of the item is transferred to the caller.
    /// 
    ///     \sa addItem()
    remove_item(item: *GraphicsLayoutItemType),
    ///     \reimp
    [event] invalidate(),
    ///     \reimp
    [event] size_hint(which: Rute::SizeHint, constraint: &SizeFType) -> SizeF,
}

// vim: syntax=rust expandtab ts=4 sw=4
