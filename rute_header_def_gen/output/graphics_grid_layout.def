struct GraphicsGridLayout : GraphicsLayout {
    add_item(&GraphicsLayoutItemType item, i32 row, i32 column, i32 row_span, i32 column_span, Rute::Alignment alignment),
    add_item(&GraphicsLayoutItemType item, i32 row, i32 column, Rute::Alignment alignment),
    set_horizontal_spacing(f32 spacing),
    horizontal_spacing() -> f32,
    set_vertical_spacing(f32 spacing),
    vertical_spacing() -> f32,
    set_spacing(f32 spacing),
    set_row_spacing(i32 row, f32 spacing),
    row_spacing(i32 row) -> f32,
    set_column_spacing(i32 column, f32 spacing),
    column_spacing(i32 column) -> f32,
    set_row_minimum_height(i32 row, f32 height),
    row_minimum_height(i32 row) -> f32,
    set_row_preferred_height(i32 row, f32 height),
    row_preferred_height(i32 row) -> f32,
    set_row_maximum_height(i32 row, f32 height),
    row_maximum_height(i32 row) -> f32,
    set_row_fixed_height(i32 row, f32 height),
    set_column_minimum_width(i32 column, f32 width),
    column_minimum_width(i32 column) -> f32,
    set_column_preferred_width(i32 column, f32 width),
    column_preferred_width(i32 column) -> f32,
    set_column_maximum_width(i32 column, f32 width),
    column_maximum_width(i32 column) -> f32,
    set_column_fixed_width(i32 column, f32 width),
    set_row_alignment(i32 row, Rute::Alignment alignment),
    row_alignment(i32 row) -> Rute::Alignment,
    set_column_alignment(i32 column, Rute::Alignment alignment),
    column_alignment(i32 column) -> Rute::Alignment,
    set_alignment(&GraphicsLayoutItemType item, Rute::Alignment alignment),
    alignment(&GraphicsLayoutItemType item) -> Rute::Alignment,
    row_count() -> i32,
    column_count() -> i32,
    item_at(i32 row, i32 column) -> &GraphicsLayoutItemType,
    count() -> i32,
    item_at(i32 index) -> &GraphicsLayoutItemType,
    remove_at(i32 index),
    remove_item(&GraphicsLayoutItemType item),
    invalidate(),
    size_hint(Rute::SizeHint which, &SizeFType constraint) -> SizeFType,
}

// vim: syntax=rust expandtab ts=4 sw=4
