///     \class QDoubleSpinBox
///     \brief The QDoubleSpinBox class provides a spin box widget that
///     takes doubles.
/// 
///     \ingroup basicwidgets
///     \inmodule QtWidgets
/// 
///     QDoubleSpinBox allows the user to choose a value by clicking the
///     up and down buttons or by pressing Up or Down on the keyboard to
///     increase or decrease the value currently displayed. The user can
///     also type the value in manually. The spin box supports double
///     values but can be extended to use different strings with
///     validate(), textFromValue() and valueFromText().
/// 
///     Every time the value changes QDoubleSpinBox emits two
///     valueChanged() signals, one taking providing a double and the other
///     a QString. The QString overload provides the value with both
///     prefix() and suffix(). The current value can be fetched with
///     value() and set with setValue().
/// 
///     Note: QDoubleSpinBox will round numbers so they can be displayed
///     with the current precision. In a QDoubleSpinBox with decimals set
///     to 2, calling setValue(2.555) will cause value() to return 2.56.
/// 
///     Clicking the up and down buttons or using the keyboard accelerator's
///     Up and Down arrows will increase or decrease the current value in
///     steps of size singleStep(). If you want to change this behavior you
///     can reimplement the virtual function stepBy(). The minimum and
///     maximum value and the step size can be set using one of the
///     constructors, and can be changed later with setMinimum(),
///     setMaximum() and setSingleStep(). The spinbox has a default
///     precision of 2 decimal places but this can be changed using
///     setDecimals().
/// 
///     Most spin boxes are directional, but QDoubleSpinBox can also
///     operate as a circular spin box, i.e. if the range is 0.0-99.9 and
///     the current value is 99.9, clicking "up" will give 0 if wrapping()
///     is set to true. Use setWrapping() if you want circular behavior.
/// 
///     The displayed value can be prepended and appended with arbitrary
///     strings indicating, for example, currency or the unit of
///     measurement. See setPrefix() and setSuffix(). The text in the spin
///     box is retrieved with text() (which includes any prefix() and
///     suffix()), or with cleanText() (which has no prefix(), no suffix()
///     and no leading or trailing whitespace).
/// 
///     It is often desirable to give the user a special (often default)
///     choice in addition to the range of numeric values. See
///     setSpecialValueText() for how to do this with QDoubleSpinBox.
/// 
///     \note The displayed value of the QDoubleSpinBox is limited to 18 characters
///     in addition to eventual prefix and suffix content. This limitation is used
///     to keep the double spin box usable even with extremely large values.
///     \sa QSpinBox, QDateTimeEdit, QSlider, {Spin Boxes Example}
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct DoubleSpinBox : AbstractSpinBox {
    ///     \property QDoubleSpinBox::value
    ///     \brief the value of the spin box
    /// 
    ///     setValue() will emit valueChanged() if the new value is different
    ///     from the old one. The value property has a second notifier
    ///     signal which includes the spin box's prefix and suffix.
    /// 
    ///     Note: The value will be rounded so it can be displayed with the
    ///     current setting of decimals.
    /// 
    ///     \sa decimals
    value() -> double,
    ///     \property QDoubleSpinBox::prefix
    ///     \brief the spin box's prefix
    /// 
    ///     The prefix is prepended to the start of the displayed value.
    ///     Typical use is to display a unit of measurement or a currency
    ///     symbol. For example:
    /// 
    ///     \snippet code/src_gui_widgets_qspinbox.cpp 4
    /// 
    ///     To turn off the prefix display, set this property to an empty
    ///     string. The default is no prefix. The prefix is not displayed when
    ///     value() == minimum() and specialValueText() is set.
    /// 
    ///     If no prefix is set, prefix() returns an empty string.
    /// 
    ///     \sa suffix(), setSuffix(), specialValueText(), setSpecialValueText()
    prefix() -> String,
    set_prefix(prefix: String),
    ///     \property QDoubleSpinBox::suffix
    ///     \brief the suffix of the spin box
    /// 
    ///     The suffix is appended to the end of the displayed value. Typical
    ///     use is to display a unit of measurement or a currency symbol. For
    ///     example:
    /// 
    ///     \snippet code/src_gui_widgets_qspinbox.cpp 5
    /// 
    ///     To turn off the suffix display, set this property to an empty
    ///     string. The default is no suffix. The suffix is not displayed for
    ///     the minimum() if specialValueText() is set.
    /// 
    ///     If no suffix is set, suffix() returns an empty string.
    /// 
    ///     \sa prefix(), setPrefix(), specialValueText(), setSpecialValueText()
    suffix() -> String,
    set_suffix(suffix: String),
    ///     \property QDoubleSpinBox::cleanText
    /// 
    ///     \brief the text of the spin box excluding any prefix, suffix,
    ///     or leading or trailing whitespace.
    /// 
    ///     \sa text, QDoubleSpinBox::prefix, QDoubleSpinBox::suffix
    clean_text() -> String,
    ///     \property QDoubleSpinBox::singleStep
    ///     \brief the step value
    /// 
    ///     When the user uses the arrows to change the spin box's value the
    ///     value will be incremented/decremented by the amount of the
    ///     singleStep. The default value is 1.0. Setting a singleStep value
    ///     of less than 0 does nothing.
    single_step() -> double,
    set_single_step(val: double),
    ///     \property QDoubleSpinBox::minimum
    /// 
    ///     \brief the minimum value of the spin box
    /// 
    ///     When setting this property the \l maximum is adjusted
    ///     if necessary to ensure that the range remains valid.
    /// 
    ///     The default minimum value is 0.0.
    /// 
    ///     Note: The minimum value will be rounded to match the decimals
    ///     property.
    /// 
    ///     \sa decimals, setRange(), specialValueText
    minimum() -> double,
    set_minimum(min: double),
    ///     \property QDoubleSpinBox::maximum
    /// 
    ///     \brief the maximum value of the spin box
    /// 
    ///     When setting this property the \l minimum is adjusted
    ///     if necessary, to ensure that the range remains valid.
    /// 
    ///     The default maximum value is 99.99.
    /// 
    ///     Note: The maximum value will be rounded to match the decimals
    ///     property.
    /// 
    ///     \sa decimals, setRange()
    maximum() -> double,
    set_maximum(max: double),
    ///     Convenience function to set the \a minimum and \a maximum values
    ///     with a single function call.
    /// 
    ///     Note: The maximum and minimum values will be rounded to match the
    ///     decimals property.
    /// 
    ///     \snippet code/src_gui_widgets_qspinbox.cpp 6
    ///     is equivalent to:
    ///     \snippet code/src_gui_widgets_qspinbox.cpp 7
    /// 
    ///     \sa minimum, maximum
    set_range(min: double, max: double),
    ///      \property QDoubleSpinBox::decimals
    /// 
    ///      \brief the precision of the spin box, in decimals
    /// 
    ///      Sets how many decimals the spinbox will use for displaying and
    ///      interpreting doubles.
    /// 
    ///      \warning The maximum value for \a decimals is DBL_MAX_10_EXP +
    ///      DBL_DIG (ie. 323) because of the limitations of the double type.
    /// 
    ///      Note: The maximum, minimum and value might change as a result of
    ///      changing this property.
    decimals() -> i32,
    set_decimals(prec: i32),
    ///   \reimp
    [event] validate(input: String, pos: &i32) -> Validator::State,
    ///     This virtual function is used by the spin box whenever it needs to
    ///     interpret \a text entered by the user as a value.
    /// 
    ///     Subclasses that need to display spin box values in a non-numeric
    ///     way need to reimplement this function.
    /// 
    ///     Note: QDoubleSpinBox handles specialValueText() separately; this
    ///     function is only concerned with the other values.
    /// 
    ///     \sa textFromValue(), validate()
    [event] value_from_text(text: String) -> double,
    ///     This virtual function is used by the spin box whenever it needs to
    ///     display the given \a value. The default implementation returns a string
    ///     containing \a value printed using QWidget::locale().toString(\a value,
    ///     QLatin1Char('f'), decimals()) and will remove the thousand
    ///     separator unless setGroupSeparatorShown() is set. Reimplementations may
    ///     return anything.
    /// 
    ///     Note: QDoubleSpinBox does not call this function for
    ///     specialValueText() and that neither prefix() nor suffix() should
    ///     be included in the return value.
    /// 
    ///     If you reimplement this, you may also need to reimplement
    ///     valueFromText().
    /// 
    ///     \sa valueFromText(), QLocale::groupSeparator()
    [event] text_from_value(val: double) -> String,
    ///   \reimp
    [event] fixup(str: String),
    set_value(val: double),
    [signal] value_changed(arg0: double),
    [signal] value_changed(arg0: String),
}

// vim: syntax=rust expandtab ts=4 sw=4
