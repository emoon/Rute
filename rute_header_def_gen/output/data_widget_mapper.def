/// 
/// QDataWidgetMapper can be used to create data-aware widgets by mapping
/// them to sections of an item model. A section is a column of a model
/// if the orientation is horizontal (the default), otherwise a row.
/// 
/// Every time the current index changes, each widget is updated with data
/// from the model via the property specified when its mapping was made.
/// If the user edits the contents of a widget, the changes are read using
/// the same property and written back to the model.
/// By default, each widget's [user property](Q_PROPERTY())
/// is used to
/// transfer data between the model and the widget. Since Qt 4.3, an
/// additional addMapping() function enables a named property to be used
/// instead of the default user property.
/// 
/// It is possible to set an item delegate to support custom widgets. By default,
/// a QItemDelegate is used to synchronize the model with the widgets.
/// 
/// Let us assume that we have an item model named `model` with the following contents:
/// 
/// * 1
/// * Qt Norway
/// * Oslo
/// * 2
/// * Qt Australia
/// * Brisbane
/// * 3
/// * Qt USA
/// * Palo Alto
/// * 4
/// * Qt China
/// * Beijing
/// * 5
/// * Qt Germany
/// * Berlin
/// 
/// The following code will map the columns of the model to widgets called `mySpinBox,`
/// `myLineEdit` and `myCountryChooser` :
/// 
/// After the call to toFirst(), `mySpinBox` displays the value `1` , `myLineEdit`
/// displays `Qt Norway` and `myCountryChooser` displays `Oslo` . The
/// navigational functions toFirst(), toNext(), toPrevious(), toLast() and setCurrentIndex()
/// can be used to navigate in the model and update the widgets with contents from
/// the model.
/// 
/// The setRootIndex() function enables a particular item in a model to be
/// specified as the root index - children of this item will be mapped to
/// the relevant widgets in the user interface.
/// 
/// QDataWidgetMapper supports two submit policies, `AutoSubmit` and `ManualSubmit` .
/// `AutoSubmit` will update the model as soon as the current widget loses focus,
/// `ManualSubmit` will not update the model unless submit() is called. `ManualSubmit`
/// is useful when displaying a dialog that lets the user cancel all modifications.
/// Also, other views that display the model won't update until the user finishes
/// all their modifications and submits.
/// 
/// Note that QDataWidgetMapper keeps track of external modifications. If the contents
/// of the model are updated in another module of the application, the widgets are
/// updated as well.
/// 
/// **See also:** [`AbstractItemModel`]
/// [`AbstractItemDelegate`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct DataWidgetMapper : Object {
    /// 
    /// Sets the current model to *model.* If another model was set,
    /// all mappings to that old model are cleared.
    /// 
    /// **See also:** [`model()`]
    set_model(model: *AbstractItemModelType),
    /// 
    /// Returns the current model.
    /// 
    /// **See also:** [`set_model()`]
    model() -> AbstractItemModel?,
    /// 
    /// Sets the item delegate to *delegate.* The delegate will be used to write
    /// data from the model into the widget and from the widget to the model,
    /// using QAbstractItemDelegate::setEditorData() and QAbstractItemDelegate::setModelData().
    /// 
    /// The delegate also decides when to apply data and when to change the editor,
    /// using QAbstractItemDelegate::commitData() and QAbstractItemDelegate::closeEditor().
    /// 
    /// **Warning**: You should not share the same instance of a delegate between widget mappers
    /// or views. Doing so can cause incorrect or unintuitive editing behavior since each
    /// view connected to a given delegate may receive the [closeEditor()](QAbstractItemDelegate::)
    /// 
    /// signal, and attempt to access, modify or close an editor that has already been closed.
    set_item_delegate(delegate: *AbstractItemDelegateType),
    /// 
    /// Returns the current item delegate.
    item_delegate() -> AbstractItemDelegate?,
    /// 
    /// Sets the root item to *index.* This can be used to display
    /// a branch of a tree. Pass an invalid model index to display
    /// the top-most branch.
    /// 
    /// **See also:** [`root_index()`]
    set_root_index(index: &ModelIndexType),
    /// 
    /// Returns the current root index.
    /// 
    /// **See also:** [`set_root_index()`]
    root_index() -> ModelIndex,
    set_orientation(a_orientation: Rute::Orientation),
    /// 
    /// If the orientation is Qt::Horizontal (the default), a widget is
    /// mapped to a column of a data model. The widget will be populated
    /// with the model's data from its mapped column and the row that
    /// currentIndex() points at.
    /// 
    /// Use Qt::Horizontal for tabular data that looks like this:
    /// 
    /// * 1
    /// * Qt Norway
    /// * Oslo
    /// * 2
    /// * Qt Australia
    /// * Brisbane
    /// * 3
    /// * Qt USA
    /// * Silicon Valley
    /// * 4
    /// * Qt China
    /// * Beijing
    /// * 5
    /// * Qt Germany
    /// * Berlin
    /// 
    /// If the orientation is set to Qt::Vertical, a widget is mapped to
    /// a row. Calling setCurrentIndex() will change the current column.
    /// The widget will be populates with the model's data from its
    /// mapped row and the column that currentIndex() points at.
    /// 
    /// Use Qt::Vertical for tabular data that looks like this:
    /// 
    /// * 1
    /// * 2
    /// * 3
    /// * 4
    /// * 5
    /// * Qt Norway
    /// * Qt Australia
    /// * Qt USA
    /// * Qt China
    /// * Qt Germany
    /// * Oslo
    /// * Brisbane
    /// * Silicon Valley
    /// * Beijing
    /// * Berlin
    /// 
    /// Changing the orientation clears all existing mappings.
    orientation() -> Rute::Orientation,
    set_submit_policy(policy: DataWidgetMapper::SubmitPolicy),
    /// 
    /// Changing the current submit policy will revert all widgets
    /// to the current data from the model.
    submit_policy() -> DataWidgetMapper::SubmitPolicy,
    /// 
    /// Adds a mapping between a *widget* and a *section* from the model.
    /// The *section* is a column in the model if the orientation is
    /// horizontal (the default), otherwise a row.
    /// 
    /// For the following example, we assume a model `myModel` that
    /// has two columns: the first one contains the names of people in a
    /// group, and the second column contains their ages. The first column
    /// is mapped to the QLineEdit `nameLineEdit,` and the second is
    /// mapped to the QSpinBox `ageSpinBox` :
    /// 
    /// **Notes:**
    /// * If the *widget* is already mapped to a section, the old mapping will be replaced by the new one.
    /// * Only one-to-one mappings between sections and widgets are allowed. It is not possible to map a single section to multiple widgets, or to map a single widget to multiple sections.
    /// 
    /// **See also:** [`remove_mapping()`]
    /// [`mapped_section()`]
    /// [`clear_mapping()`]
    /// 
    /// Essentially the same as addMapping(), but adds the possibility to specify
    /// the property to use specifying *propertyName.*
    /// 
    /// **See also:** [`add_mapping()`]
    add_mapping(widget: *WidgetType, section: i32),
    /// 
    /// Adds a mapping between a *widget* and a *section* from the model.
    /// The *section* is a column in the model if the orientation is
    /// horizontal (the default), otherwise a row.
    /// 
    /// For the following example, we assume a model `myModel` that
    /// has two columns: the first one contains the names of people in a
    /// group, and the second column contains their ages. The first column
    /// is mapped to the QLineEdit `nameLineEdit,` and the second is
    /// mapped to the QSpinBox `ageSpinBox` :
    /// 
    /// **Notes:**
    /// * If the *widget* is already mapped to a section, the old mapping will be replaced by the new one.
    /// * Only one-to-one mappings between sections and widgets are allowed. It is not possible to map a single section to multiple widgets, or to map a single widget to multiple sections.
    /// 
    /// **See also:** [`remove_mapping()`]
    /// [`mapped_section()`]
    /// [`clear_mapping()`]
    /// 
    /// Essentially the same as addMapping(), but adds the possibility to specify
    /// the property to use specifying *propertyName.*
    /// 
    /// **See also:** [`add_mapping()`]
    [org_name(addMapping)]
    add_mapping_2(widget: *WidgetType, section: i32, property_name: &ByteArrayType),
    /// 
    /// Removes the mapping for the given *widget.*
    /// 
    /// **See also:** [`add_mapping()`]
    /// [`clear_mapping()`]
    remove_mapping(widget: *WidgetType),
    /// 
    /// Returns the section the *widget* is mapped to or -1
    /// if the widget is not mapped.
    /// 
    /// **See also:** [`add_mapping()`]
    /// [`remove_mapping()`]
    mapped_section(widget: *WidgetType) -> i32,
    /// 
    /// Returns the name of the property that is used when mapping
    /// data to the given *widget.*
    /// 
    /// **See also:** [`mapped_section()`]
    /// [`add_mapping()`]
    /// [`remove_mapping()`]
    mapped_property_name(widget: *WidgetType) -> ByteArray,
    /// 
    /// Returns the widget that is mapped at *section,* or
    /// 0 if no widget is mapped at that section.
    /// 
    /// **See also:** [`add_mapping()`]
    /// [`remove_mapping()`]
    mapped_widget_at(section: i32) -> Widget?,
    /// 
    /// Clears all mappings.
    /// 
    /// **See also:** [`add_mapping()`]
    /// [`remove_mapping()`]
    clear_mapping(),
    /// 
    /// This signal is emitted after the current index has changed and
    /// all widgets were populated with new data. *index* is the new
    /// current index.
    /// 
    /// **See also:** [`current_index()`]
    /// [`set_current_index()`]
    /// 
    /// The widgets are populated with with data from the row at *index*
    /// if the orientation is horizontal (the default), otherwise with
    /// data from the column at *index.*
    /// 
    /// **See also:** [`set_current_model_index()`]
    /// [`to_first()`]
    /// [`to_next()`]
    /// [`to_previous()`]
    /// [`to_last()`]
    current_index() -> i32,
    /// 
    /// Repopulates all widgets with the current data of the model.
    /// All unsubmitted changes will be lost.
    /// 
    /// **See also:** [`submit()`]
    /// [`set_submit_policy()`]
    revert(),
    /// 
    /// Submits all changes from the mapped widgets to the model.
    /// 
    /// For every mapped section, the item delegate reads the current
    /// value from the widget and sets it in the model. Finally, the
    /// model's [submit()](QAbstractItemModel::)
    /// method is invoked.
    /// 
    /// Returns `true` if all the values were submitted, otherwise false.
    /// 
    /// Note: For database models, QSqlQueryModel::lastError() can be
    /// used to retrieve the last error.
    /// 
    /// **See also:** [`revert()`]
    /// [`set_submit_policy()`]
    /// 
    /// Changing the current submit policy will revert all widgets
    /// to the current data from the model.
    submit() -> bool,
    /// 
    /// Populates the widgets with data from the first row of the model
    /// if the orientation is horizontal (the default), otherwise
    /// with data from the first column.
    /// 
    /// This is equivalent to calling `setCurrentIndex(0).`
    /// 
    /// **See also:** [`to_last()`]
    /// [`set_current_index()`]
    to_first(),
    /// 
    /// Populates the widgets with data from the last row of the model
    /// if the orientation is horizontal (the default), otherwise
    /// with data from the last column.
    /// 
    /// Calls setCurrentIndex() internally.
    /// 
    /// **See also:** [`to_first()`]
    /// [`set_current_index()`]
    to_last(),
    /// 
    /// Populates the widgets with data from the next row of the model
    /// if the orientation is horizontal (the default), otherwise
    /// with data from the next column.
    /// 
    /// Calls setCurrentIndex() internally. Does nothing if there is
    /// no next row in the model.
    /// 
    /// **See also:** [`to_previous()`]
    /// [`set_current_index()`]
    to_next(),
    /// 
    /// Populates the widgets with data from the previous row of the model
    /// if the orientation is horizontal (the default), otherwise
    /// with data from the previous column.
    /// 
    /// Calls setCurrentIndex() internally. Does nothing if there is
    /// no previous row in the model.
    /// 
    /// **See also:** [`to_next()`]
    /// [`set_current_index()`]
    to_previous(),
    [event] set_current_index(index: i32),
    /// 
    /// Sets the current index to the row of the *index* if the
    /// orientation is horizontal (the default), otherwise to the
    /// column of the *index.*
    /// 
    /// Calls setCurrentIndex() internally. This convenience slot can be
    /// connected to the signal [currentRowChanged()](QItemSelectionModel::)
    /// or [currentColumnChanged()](QItemSelectionModel::)
    /// of another view's
    /// [selection model](QItemSelectionModel)
    /// 
    /// 
    /// The following example illustrates how to update all widgets
    /// with new data whenever the selection of a QTableView named
    /// `myTableView` changes:
    /// 
    /// **See also:** [`current_index()`]
    set_current_model_index(index: &ModelIndexType),
    /// 
    /// This signal is emitted after the current index has changed and
    /// all widgets were populated with new data. *index* is the new
    /// current index.
    /// 
    /// **See also:** [`current_index()`]
    /// [`set_current_index()`]
    [signal] current_index_changed(index: i32),
}

[org_name(QDataWidgetMapper)]
enum SubmitPolicy {
    /// Whenever a widget loses focus, the widget's current
    AutoSubmit,
    /// The model is not updated until submit() is called.
    ManualSubmit,
}

// vim: syntax=rust expandtab ts=4 sw=4
