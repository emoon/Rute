enum MetaInformation {
    DocumentTitle,
    DocumentUrl,
}

enum FindFlag {
    FindBackward,
    FindCaseSensitively,
    FindWholeWords,
}

enum ResourceType {
    HtmlResource,
    ImageResource,
    StyleSheetResource,
    UserResource,
}

enum Stacks {
    UndoStack,
    RedoStack,
    UndoAndRedoStacks,
}

struct TextDocument : Object {
    clone(parent: &ObjectType) -> TextDocument?,
    is_empty() -> bool,
    [override] clear(),
    set_undo_redo_enabled(enable: bool),
    is_undo_redo_enabled() -> bool,
    is_undo_available() -> bool,
    is_redo_available() -> bool,
    available_undo_steps() -> i32,
    available_redo_steps() -> i32,
    revision() -> i32,
    set_document_layout(layout: &AbstractTextDocumentLayoutType),
    document_layout() -> AbstractTextDocumentLayout?,
    set_meta_information(info: TextDocument::MetaInformation, arg0: String),
    meta_information(info: TextDocument::MetaInformation) -> String,
    to_html(encoding: &ByteArrayType) -> String,
    set_html(html: String),
    to_raw_text() -> String,
    to_plain_text() -> String,
    set_plain_text(text: String),
    character_at(pos: i32) -> Char,
    find(sub_string: String, from: i32, options: FindFlags) -> TextCursor,
    find(sub_string: String, cursor: &TextCursorType, options: FindFlags) -> TextCursor,
    find(expr: &RegExpType, from: i32, options: FindFlags) -> TextCursor,
    find(expr: &RegExpType, cursor: &TextCursorType, options: FindFlags) -> TextCursor,
    find(expr: &RegularExpressionType, from: i32, options: FindFlags) -> TextCursor,
    find(expr: &RegularExpressionType, cursor: &TextCursorType, options: FindFlags) -> TextCursor,
    frame_at(pos: i32) -> TextFrame?,
    root_frame() -> TextFrame?,
    object(object_index: i32) -> TextObject?,
    object_for_format(arg0: &TextFormatType) -> TextObject?,
    find_block(pos: i32) -> TextBlock,
    find_block_by_number(block_number: i32) -> TextBlock,
    find_block_by_line_number(block_number: i32) -> TextBlock,
    begin() -> TextBlock,
    end() -> TextBlock,
    first_block() -> TextBlock,
    last_block() -> TextBlock,
    set_page_size(size: &SizeFType),
    page_size() -> SizeF,
    set_default_font(font: &FontType),
    default_font() -> Font,
    page_count() -> i32,
    is_modified() -> bool,
    print(printer: &PagedPaintDeviceType),
    resource(type: i32, name: &UrlType) -> Variant,
    add_resource(type: i32, name: &UrlType, resource: &VariantType),
    all_formats() -> [TextFormat],
    mark_contents_dirty(from: i32, length: i32),
    draw_contents(painter: &PainterType, rect: &RectFType),
    set_text_width(width: f32),
    text_width() -> f32,
    ideal_width() -> f32,
    indent_width() -> f32,
    set_indent_width(width: f32),
    document_margin() -> f32,
    set_document_margin(margin: f32),
    adjust_size(),
    size() -> SizeF,
    block_count() -> i32,
    line_count() -> i32,
    character_count() -> i32,
    set_default_style_sheet(sheet: String),
    default_style_sheet() -> String,
    undo(cursor: &TextCursorType),
    redo(cursor: &TextCursorType),
    clear_undo_redo_stacks(history_to_clear: TextDocument::Stacks),
    maximum_block_count() -> i32,
    set_maximum_block_count(maximum: i32),
    default_text_option() -> TextOption,
    set_default_text_option(option: &TextOptionType),
    base_url() -> Url,
    set_base_url(url: &UrlType),
    default_cursor_move_style() -> Rute::CursorMoveStyle,
    set_default_cursor_move_style(style: Rute::CursorMoveStyle),
    [event] contents_change(from: i32, chars_removed: i32, chars_added: i32),
    [event] contents_changed(),
    [event] undo_available(arg0: bool),
    [event] redo_available(arg0: bool),
    [event] undo_command_added(),
    [event] modification_changed(m: bool),
    [event] cursor_position_changed(cursor: &TextCursorType),
    [event] block_count_changed(new_block_count: i32),
    [event] base_url_changed(url: &UrlType),
    [event] document_layout_changed(),
    undo(),
    redo(),
    append_undo_item(arg0: &AbstractUndoItemType),
    set_modified(m: bool),
    [override] create_object(f: &TextFormatType) -> TextObject?,
    [override] load_resource(type: i32, name: &UrlType) -> Variant,
    doc_handle() -> TextDocumentPrivate?,
}

// vim: syntax=rust expandtab ts=4 sw=4
