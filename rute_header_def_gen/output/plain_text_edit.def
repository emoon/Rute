enum LineWrapMode {
    NoWrap,
    WidgetWidth,
}

struct PlainTextEdit : AbstractScrollArea {
    set_document(document: &TextDocumentType),
    document() -> &TextDocumentType,
    set_placeholder_text(placeholder_text: String),
    placeholder_text() -> String,
    set_text_cursor(cursor: &TextCursorType),
    text_cursor() -> TextCursorType,
    is_read_only() -> bool,
    set_read_only(ro: bool),
    set_text_interaction_flags(flags: Rute::TextInteractionFlags),
    text_interaction_flags() -> Rute::TextInteractionFlags,
    merge_current_char_format(modifier: &TextCharFormatType),
    set_current_char_format(format: &TextCharFormatType),
    current_char_format() -> TextCharFormatType,
    tab_changes_focus() -> bool,
    set_tab_changes_focus(b: bool),
    set_document_title(title: String),
    document_title() -> String,
    is_undo_redo_enabled() -> bool,
    set_undo_redo_enabled(enable: bool),
    set_maximum_block_count(maximum: i32),
    maximum_block_count() -> i32,
    line_wrap_mode() -> PlainTextEdit::LineWrapMode,
    set_line_wrap_mode(mode: PlainTextEdit::LineWrapMode),
    word_wrap_mode() -> TextOption::WrapMode,
    set_word_wrap_mode(policy: TextOption::WrapMode),
    set_background_visible(visible: bool),
    background_visible() -> bool,
    set_center_on_scroll(enabled: bool),
    center_on_scroll() -> bool,
    find(exp: String, options: TextDocument::FindFlags) -> bool,
    find(exp: &RegExpType, options: TextDocument::FindFlags) -> bool,
    to_plain_text() -> String,
    ensure_cursor_visible(),
    [override] load_resource(type: i32, name: &UrlType) -> VariantType,
    create_standard_context_menu() -> &MenuType,
    create_standard_context_menu(position: &PointType) -> &MenuType,
    cursor_for_position(pos: &PointType) -> TextCursorType,
    cursor_rect(cursor: &TextCursorType) -> RectType,
    cursor_rect() -> RectType,
    anchor_at(pos: &PointType) -> String,
    overwrite_mode() -> bool,
    set_overwrite_mode(overwrite: bool),
    tab_stop_width() -> i32,
    set_tab_stop_width(width: i32),
    tab_stop_distance() -> f32,
    set_tab_stop_distance(distance: f32),
    cursor_width() -> i32,
    set_cursor_width(width: i32),
    move_cursor(operation: TextCursor::MoveOperation, mode: TextCursor::MoveMode),
    can_paste() -> bool,
    print(printer: &PagedPaintDeviceType),
    block_count() -> i32,
    [override] input_method_query(property: Rute::InputMethodQuery) -> VariantType,
    input_method_query(query: Rute::InputMethodQuery, argument: VariantType) -> VariantType,
    set_plain_text(text: String),
    cut(),
    copy(),
    paste(),
    undo(),
    redo(),
    clear(),
    select_all(),
    insert_plain_text(text: String),
    append_plain_text(text: String),
    append_html(html: String),
    center_cursor(),
    zoom_in(range: i32),
    zoom_out(range: i32),
    [event] text_changed(),
    [event] undo_available(b: bool),
    [event] redo_available(b: bool),
    [event] copy_available(b: bool),
    [event] selection_changed(),
    [event] cursor_position_changed(),
    [event] update_request(rect: &RectType, dy: i32),
    [event] block_count_changed(new_block_count: i32),
    [event] modification_changed(arg0: bool),
    [override] event(e: &EventType) -> bool,
    [override] timer_event(e: &TimerEventType),
    [override] key_press_event(e: &KeyEventType),
    [override] key_release_event(e: &KeyEventType),
    [override] resize_event(e: &ResizeEventType),
    [override] paint_event(e: &PaintEventType),
    [override] mouse_press_event(e: &MouseEventType),
    [override] mouse_move_event(e: &MouseEventType),
    [override] mouse_release_event(e: &MouseEventType),
    [override] mouse_double_click_event(e: &MouseEventType),
    [override] focus_next_prev_child(next: bool) -> bool,
    [override] context_menu_event(e: &ContextMenuEventType),
    [override] drag_enter_event(e: &DragEnterEventType),
    [override] drag_leave_event(e: &DragLeaveEventType),
    [override] drag_move_event(e: &DragMoveEventType),
    [override] drop_event(e: &DropEventType),
    [override] focus_in_event(e: &FocusEventType),
    [override] focus_out_event(e: &FocusEventType),
    [override] show_event(arg0: &ShowEventType),
    [override] change_event(e: &EventType),
    [override] wheel_event(e: &WheelEventType),
    [override] create_mime_data_from_selection() -> &MimeDataType,
    [override] can_insert_from_mime_data(source: &MimeDataType) -> bool,
    [override] insert_from_mime_data(source: &MimeDataType),
    [override] input_method_event(arg0: &InputMethodEventType),
    [override] scroll_contents_by(dx: i32, dy: i32),
    [override] do_set_text_cursor(cursor: &TextCursorType),
    first_visible_block() -> TextBlockType,
    content_offset() -> PointFType,
    block_bounding_rect(block: &TextBlockType) -> RectFType,
    get_paint_context() -> AbstractTextDocumentLayout::PaintContext,
    zoom_in_f(range: f32),
}

// vim: syntax=rust expandtab ts=4 sw=4
