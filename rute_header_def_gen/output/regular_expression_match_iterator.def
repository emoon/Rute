/// 
/// **Keyword**: regular expression iterator
/// 
/// A QRegularExpressionMatchIterator object is a forward only Java-like
/// iterator; it can be obtained by calling the
/// QRegularExpression::globalMatch() function. A new
/// QRegularExpressionMatchIterator will be positioned before the first result.
/// You can then call the hasNext() function to check if there are more
/// results available; if so, the next() function will return the next
/// result and advance the iterator.
/// 
/// Each result is a QRegularExpressionMatch object holding all the information
/// for that result (including captured substrings).
/// 
/// For instance:
/// 
/// Moreover, QRegularExpressionMatchIterator offers a peekNext() function
/// to get the next result *without* advancing the iterator.
/// 
/// You can retrieve the QRegularExpression object the subject string was
/// matched against by calling the regularExpression() function; the
/// match type and the match options are available as well by calling
/// the matchType() and the matchOptions() respectively.
/// 
/// Please refer to the QRegularExpression documentation for more information
/// about the Qt regular expression classes.
/// 
/// **See also:** [`RegularExpression`]
/// [`RegularExpressionMatch`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct RegularExpressionMatchIterator {
    /// 
    /// Swaps the iterator *other* with this iterator object. This operation is
    /// very fast and never fails.
    swap(other: &RegularExpressionMatchIteratorType),
    /// 
    /// Returns `true` if the iterator object was obtained as a result from the
    /// QRegularExpression::globalMatch() function invoked on a valid
    /// QRegularExpression object; returns `false` if the QRegularExpression was
    /// invalid.
    /// 
    /// **See also:** [`RegularExpression::global_match`]
    /// [`RegularExpression::is_valid`]
    is_valid() -> bool,
    /// 
    /// Returns `true` if there is at least one match result ahead of the iterator;
    /// otherwise it returns `false.`
    /// 
    /// **See also:** [`next()`]
    has_next() -> bool,
    /// 
    /// Returns the next match result and advances the iterator by one position.
    /// 
    /// **Note**: Calling this function when the iterator is at the end of the result
    /// set leads to undefined results.
    next() -> RegularExpressionMatch,
    /// 
    /// Returns the next match result without moving the iterator.
    /// 
    /// **Note**: Calling this function when the iterator is at the end of the result
    /// set leads to undefined results.
    peek_next() -> RegularExpressionMatch,
    /// 
    /// Returns the QRegularExpression object whose globalMatch() function returned
    /// this object.
    /// 
    /// **See also:** [`RegularExpression::global_match`]
    /// [`match_type()`]
    /// [`match_options()`]
    regular_expression() -> RegularExpression,
    /// 
    /// Returns the match type that was used to get this
    /// QRegularExpressionMatchIterator object, that is, the match type that was
    /// passed to QRegularExpression::globalMatch().
    /// 
    /// **See also:** [`RegularExpression::global_match`]
    /// [`regular_expression()`]
    /// [`match_options()`]
    match_type() -> RegularExpression::MatchType,
    /// 
    /// Returns the match options that were used to get this
    /// QRegularExpressionMatchIterator object, that is, the match options that
    /// were passed to QRegularExpression::globalMatch().
    /// 
    /// **See also:** [`RegularExpression::global_match`]
    /// [`regular_expression()`]
    /// [`match_type()`]
    match_options() -> RegularExpression::MatchOptions,
}

// vim: syntax=rust expandtab ts=4 sw=4
