///     \class QRegularExpressionMatchIterator
///     \inmodule QtCore
///     \reentrant
/// 
///     \brief The QRegularExpressionMatchIterator class provides an iterator on
///     the results of a global match of a QRegularExpression object against a string.
/// 
///     \since 5.0
/// 
///     \ingroup tools
///     \ingroup shared
/// 
///     \keyword regular expression iterator
/// 
///     A QRegularExpressionMatchIterator object is a forward only Java-like
///     iterator; it can be obtained by calling the
///     QRegularExpression::globalMatch() function. A new
///     QRegularExpressionMatchIterator will be positioned before the first result.
///     You can then call the hasNext() function to check if there are more
///     results available; if so, the next() function will return the next
///     result and advance the iterator.
/// 
///     Each result is a QRegularExpressionMatch object holding all the information
///     for that result (including captured substrings).
/// 
///     For instance:
/// 
///     \snippet code/src_corelib_tools_qregularexpression.cpp 30
/// 
///     Moreover, QRegularExpressionMatchIterator offers a peekNext() function
///     to get the next result \e{without} advancing the iterator.
/// 
///     You can retrieve the QRegularExpression object the subject string was
///     matched against by calling the regularExpression() function; the
///     match type and the match options are available as well by calling
///     the matchType() and the matchOptions() respectively.
/// 
///     Please refer to the QRegularExpression documentation for more information
///     about the Qt regular expression classes.
/// 
///     \sa QRegularExpression, QRegularExpressionMatch

struct RegularExpressionMatchIterator {
    swap(other: &RegularExpressionMatchIteratorType),
    ///     Returns \c true if the iterator object was obtained as a result from the
    ///     QRegularExpression::globalMatch() function invoked on a valid
    ///     QRegularExpression object; returns \c false if the QRegularExpression was
    ///     invalid.
    /// 
    ///     \sa QRegularExpression::globalMatch(), QRegularExpression::isValid()
    is_valid() -> bool,
    ///     Returns \c true if there is at least one match result ahead of the iterator;
    ///     otherwise it returns \c false.
    /// 
    ///     \sa next()
    has_next() -> bool,
    ///     Returns the next match result and advances the iterator by one position.
    /// 
    ///     \note Calling this function when the iterator is at the end of the result
    ///     set leads to undefined results.
    next() -> RegularExpressionMatch,
    ///     Returns the next match result without moving the iterator.
    /// 
    ///     \note Calling this function when the iterator is at the end of the result
    ///     set leads to undefined results.
    peek_next() -> RegularExpressionMatch,
    ///     Returns the QRegularExpression object whose globalMatch() function returned
    ///     this object.
    /// 
    ///     \sa QRegularExpression::globalMatch(), matchType(), matchOptions()
    regular_expression() -> RegularExpression,
    ///     Returns the match type that was used to get this
    ///     QRegularExpressionMatchIterator object, that is, the match type that was
    ///     passed to QRegularExpression::globalMatch().
    /// 
    ///     \sa QRegularExpression::globalMatch(), regularExpression(), matchOptions()
    match_type() -> RegularExpression::MatchType,
    ///     Returns the match options that were used to get this
    ///     QRegularExpressionMatchIterator object, that is, the match options that
    ///     were passed to QRegularExpression::globalMatch().
    /// 
    ///     \sa QRegularExpression::globalMatch(), regularExpression(), matchType()
    match_options() -> RegularExpression::MatchOptions,
}

// vim: syntax=rust expandtab ts=4 sw=4
