/// 
/// Normally, you do not need to create a QTextInlineObject. It is
/// used by QAbstractTextDocumentLayout to handle inline objects when
/// implementing a custom layout.
/// 
/// The inline object has various attributes that can be set, for
/// example using, setWidth(), setAscent(), and setDescent(). The
/// rectangle it occupies is given by rect(), and its direction by
/// textDirection(). Its position in the text layout is given by
/// textPosition(), and its format is given by format().
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct TextInlineObject {
    /// 
    /// Returns `true` if this inline object is valid; otherwise returns
    /// false.
    is_valid() -> bool,
    /// 
    /// Returns the inline object's rectangle.
    /// 
    /// **See also:** ascent()
    /// descent()
    /// width()
    rect() -> RectF,
    /// 
    /// Returns the inline object's width.
    /// 
    /// **See also:** ascent()
    /// descent()
    /// rect()
    width() -> f32,
    /// 
    /// Returns the inline object's ascent.
    /// 
    /// **See also:** descent()
    /// width()
    /// rect()
    ascent() -> f32,
    /// 
    /// Returns the inline object's descent.
    /// 
    /// **See also:** ascent()
    /// width()
    /// rect()
    descent() -> f32,
    /// 
    /// Returns the inline object's total height. This is equal to
    /// ascent() + descent() + 1.
    /// 
    /// **See also:** ascent()
    /// descent()
    /// width()
    /// rect()
    height() -> f32,
    /// 
    /// Returns if the object should be laid out right-to-left or left-to-right.
    text_direction() -> Rute::LayoutDirection,
    /// 
    /// Sets the inline object's width to *w.*
    /// 
    /// **See also:** width()
    /// ascent()
    /// descent()
    /// rect()
    set_width(w: f32),
    /// 
    /// Sets the inline object's ascent to *a.*
    /// 
    /// **See also:** ascent()
    /// setDescent()
    /// width()
    /// rect()
    set_ascent(a: f32),
    /// 
    /// Sets the inline object's descent to *d.*
    /// 
    /// **See also:** descent()
    /// setAscent()
    /// width()
    /// rect()
    set_descent(d: f32),
    /// 
    /// The position of the inline object within the text layout.
    text_position() -> i32,
    /// 
    /// Returns an integer describing the format of the inline object
    /// within the text layout.
    format_index() -> i32,
    /// 
    /// Returns an integer describing the format of the inline object
    /// within the text layout.
    /// 
    /// Returns format of the inline object within the text layout.
    format() -> TextFormat,
}

// vim: syntax=rust expandtab ts=4 sw=4
