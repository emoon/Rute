///     \class QPlatformGraphicsBuffer
///     \inmodule QtGui
///     \since 5.5
///     \brief The QPlatformGraphicsBuffer is a windowsystem abstraction for native graphics buffers
/// 
///     Different platforms have different ways of representing graphics buffers. On
///     some platforms, it is possible to create one graphics buffer that you can bind
///     to a texture and also get main memory access to the image bits. On the
///     other hand, on some platforms all graphics buffer abstraction is completely
///     hidden.
/// 
///     QPlatformGraphicsBuffer is an abstraction of a single Graphics Buffer.
/// 
///     There is no public constructor nor any public factory function.
/// 
///     QPlatformGraphicsBuffer is intended to be created by using platform specific
///     APIs available from QtPlatformHeaders, or there might be accessor functions
///     similar to the accessor function that QPlatformBackingstore has.
/// 
///     \internal
[org_name(QPlatformGraphicsBuffer)]
enum AccessType {
    None,
    SWReadAccess,
    SWWriteAccess,
    TextureAccess,
    HWCompositor,
}

[org_name(QPlatformGraphicsBuffer)]
enum Origin {
    OriginBottomLeft,
    OriginTopLeft,
}

struct PlatformGraphicsBuffer : Object {
    is_locked() -> PlatformGraphicsBuffer::AccessTypes,
    ///     Before the data can be retrieved or before a buffer can be bound to a
    ///     texture it needs to be locked. This is a separate function call since this
    ///     operation might be time consuming, and it would not be satisfactory to do
    ///     it per function call.
    /// 
    ///     \a access is the access type wanted.
    /// 
    ///     \a rect is the subrect which is desired to be locked. This
    ///     argument has a no less than semantic, meaning more (if not all) of the buffer
    ///     can be locked. An empty QRect is interpreted as entire buffer should be locked.
    /// 
    ///     Return true on successfully locking all AccessTypes specified \a access
    ///     otherwise returns false and no locks have been granted.
    lock(access: PlatformGraphicsBuffer::AccessTypes, rect: &RectType) -> bool,
    ///     Unlocks the current buffer lock.
    /// 
    ///     This function calls doUnlock, and then emits the unlocked signal with the
    ///     AccessTypes from before doUnlock was called.
    unlock(),
    ///     Binds the content of this graphics buffer into the currently bound texture.
    /// 
    ///     This function should fail for buffers not capable of locking to TextureAccess.
    /// 
    ///     \a rect is the subrect which is desired to be bounded to the texture. This
    ///     argument has a no less than semantic, meaning more (if not all) of the buffer
    ///     can be bounded to the texture. An empty QRect is interpreted as entire buffer
    ///     should be bound.
    /// 
    ///     This function only supports binding buffers to the GL_TEXTURE_2D texture
    ///     target.
    /// 
    ///     Returns true on success, otherwise false.
    [event] bind_to_texture(rect: &RectType) -> bool,
    ///     Accessor for the bytes of the buffer. This function needs to be called on a
    ///     buffer with SWReadAccess access lock. Behavior is undefined for modifying
    ///     the memory returned when not having a SWWriteAccess.
    [event] data() -> uchar?,
    ///     Accessor for the bytes of the buffer. This function needs to be called on a
    ///     buffer with SWReadAccess access lock. Behavior is undefined for modifying
    ///     the memory returned when not having a SWWriteAccess.
    [event] data() -> uchar?,
    ///     Accessor for bytes per line in the graphics buffer.
    [event] bytes_per_line() -> i32,
    ///     Accessor for the length of the data buffer. This function is a convenience
    ///     function multiplying height of buffer with bytesPerLine().
    /// 
    ///     \sa data() bytesPerLine() size()
    byte_count() -> i32,
    ///     In origin of the content of the graphics buffer.
    /// 
    ///     Default implementation is OriginTopLeft, as this is the coordinate
    ///     system default for Qt. However, for most regular OpenGL textures
    ///     this will be OriginBottomLeft.
    [event] origin() -> PlatformGraphicsBuffer::Origin,
    size() -> Size,
    format() -> PixelFormat,
    [signal] unlocked(previous_access_types: PlatformGraphicsBuffer::AccessTypes),
    [event] do_lock(access: PlatformGraphicsBuffer::AccessTypes, rect: &RectType) -> bool,
    [event] do_unlock(),
}

// vim: syntax=rust expandtab ts=4 sw=4
