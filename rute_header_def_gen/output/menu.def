struct Menu : Widget {
    add_action(text: String) -> Action?,
    add_action(icon: &IconType, text: String) -> Action?,
    add_action(text: String, receiver: &ObjectType, member: &char, shortcut: &KeySequenceType) -> Action?,
    add_action(icon: &IconType, text: String, receiver: &ObjectType, member: &char, shortcut: &KeySequenceType) -> Action?,
    add_menu(title: String) -> Menu?,
    add_menu(icon: &IconType, title: String) -> Menu?,
    add_separator() -> Action?,
    add_section(text: String) -> Action?,
    add_section(icon: &IconType, text: String) -> Action?,
    insert_menu(before: &ActionType, menu: &MenuType) -> Action?,
    insert_separator(before: &ActionType) -> Action?,
    insert_section(before: &ActionType, text: String) -> Action?,
    insert_section(before: &ActionType, icon: &IconType, text: String) -> Action?,
    is_empty() -> bool,
    clear(),
    set_tear_off_enabled(arg0: bool),
    is_tear_off_enabled() -> bool,
    is_tear_off_menu_visible() -> bool,
    show_tear_off_menu(),
    show_tear_off_menu(pos: &PointType),
    hide_tear_off_menu(),
    set_default_action(arg0: &ActionType),
    default_action() -> Action?,
    set_active_action(act: &ActionType),
    active_action() -> Action?,
    popup(pos: &PointType, at: &ActionType),
    exec() -> Action?,
    exec(pos: &PointType, at: &ActionType) -> Action?,
    [static] exec(actions: [&ActionType], pos: &PointType, at: &ActionType, parent: &WidgetType) -> Action?,
    [replace] size_hint() -> Size,
    action_at(arg0: &PointType) -> Action?,
    menu_action() -> Action?,
    title() -> String,
    set_title(title: String),
    icon() -> Icon,
    set_icon(icon: &IconType),
    set_no_replay_for(widget: &WidgetType),
    platform_menu() -> PlatformMenu?,
    set_platform_menu(platform_menu: &PlatformMenuType),
    to_ns_menu() -> NSMenu?,
    set_as_dock_menu(),
    separators_collapsible() -> bool,
    set_separators_collapsible(collapse: bool),
    tool_tips_visible() -> bool,
    set_tool_tips_visible(visible: bool),
    [event] about_to_show(),
    [event] about_to_hide(),
    [event] hovered(action: &ActionType),
    column_count() -> i32,
    [replace] change_event(arg0: &EventType),
    [replace] key_press_event(arg0: &KeyEventType),
    [replace] mouse_release_event(arg0: &MouseEventType),
    [replace] mouse_press_event(arg0: &MouseEventType),
    [replace] mouse_move_event(arg0: &MouseEventType),
    [replace] wheel_event(arg0: &WheelEventType),
    [replace] enter_event(arg0: &EventType),
    [replace] leave_event(arg0: &EventType),
    [replace] hide_event(arg0: &HideEventType),
    [replace] paint_event(arg0: &PaintEventType),
    [replace] action_event(arg0: &ActionEventType),
    [replace] timer_event(arg0: &TimerEventType),
    [replace] event(arg0: &EventType) -> bool,
    [replace] focus_next_prev_child(next: bool) -> bool,
    init_style_option(option: &StyleOptionMenuItemType, action: &ActionType),
}

// vim: syntax=rust expandtab ts=4 sw=4
