
struct Quaternion {
    is_null() -> bool,
    is_identity() -> bool,
    vector() -> Vector3D,
    set_vector(vector: &Vector3DType),
    set_vector(x: f32, y: f32, z: f32),
    x() -> f32,
    y() -> f32,
    z() -> f32,
    scalar() -> f32,
    set_x(x: f32),
    set_y(y: f32),
    set_z(z: f32),
    set_scalar(scalar: f32),
    [static] dot_product(q1: &QuaternionType, q2: &QuaternionType) -> f32,
    length() -> f32,
    length_squared() -> f32,
    normalized() -> Quaternion,
    normalize(),
    inverted() -> Quaternion,
    conjugated() -> Quaternion,
    conjugate() -> Quaternion,
    rotated_vector(vector: &Vector3DType) -> Vector3D,
    to_vector4_d() -> Vector4D,
    get_axis_and_angle(axis: *Vector3DType, angle: *f32),
    [static] from_axis_and_angle(axis: &Vector3DType, angle: f32) -> Quaternion,
    get_axis_and_angle(x: *f32, y: *f32, z: *f32, angle: *f32),
    [static] from_axis_and_angle(x: f32, y: f32, z: f32, angle: f32) -> Quaternion,
    to_euler_angles() -> Vector3D,
    [static] from_euler_angles(euler_angles: &Vector3DType) -> Quaternion,
    get_euler_angles(pitch: *f32, yaw: *f32, roll: *f32),
    [static] from_euler_angles(pitch: f32, yaw: f32, roll: f32) -> Quaternion,
    get_axes(x_axis: *Vector3DType, y_axis: *Vector3DType, z_axis: *Vector3DType),
    [static] from_axes(x_axis: &Vector3DType, y_axis: &Vector3DType, z_axis: &Vector3DType) -> Quaternion,
    [static] from_direction(direction: &Vector3DType, up: &Vector3DType) -> Quaternion,
    [static] rotation_to(from: &Vector3DType, to: &Vector3DType) -> Quaternion,
    [static] slerp(q1: &QuaternionType, q2: &QuaternionType, t: f32) -> Quaternion,
    [static] nlerp(q1: &QuaternionType, q2: &QuaternionType, t: f32) -> Quaternion,
}

// vim: syntax=rust expandtab ts=4 sw=4
