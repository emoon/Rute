/// 
/// Quaternions are used to represent rotations in 3D space, and
/// consist of a 3D rotation axis specified by the x, y, and z
/// coordinates, and a scalar representing the rotation angle.
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct Quaternion {
    /// 
    /// Returns `true` if the x, y, z, and scalar components of this
    /// quaternion are set to 0.0; otherwise returns `false.`
    is_null() -> bool,
    /// 
    /// Returns `true` if the x, y, and z components of this
    /// quaternion are set to 0.0, and the scalar component is set
    /// to 1.0; otherwise returns `false.`
    is_identity() -> bool,
    /// 
    /// Returns the vector component of this quaternion.
    /// 
    /// **See also:** setVector()
    /// scalar()
    vector() -> Vector3D,
    /// 
    /// Sets the vector component of this quaternion to *vector.*
    /// 
    /// **See also:** vector()
    /// setScalar()
    /// 
    /// Sets the vector component of this quaternion to ( *x,* *y,* *z).*
    /// 
    /// **See also:** vector()
    /// setScalar()
    set_vector(vector: &Vector3DType),
    /// 
    /// Sets the vector component of this quaternion to *vector.*
    /// 
    /// **See also:** vector()
    /// setScalar()
    /// 
    /// Sets the vector component of this quaternion to ( *x,* *y,* *z).*
    /// 
    /// **See also:** vector()
    /// setScalar()
    set_vector_2(x: f32, y: f32, z: f32),
    /// 
    /// Returns the x coordinate of this quaternion's vector.
    /// 
    /// **See also:** setX()
    /// y()
    /// z()
    /// scalar()
    x() -> f32,
    /// 
    /// Returns the y coordinate of this quaternion's vector.
    /// 
    /// **See also:** setY()
    /// x()
    /// z()
    /// scalar()
    y() -> f32,
    /// 
    /// Returns the z coordinate of this quaternion's vector.
    /// 
    /// **See also:** setZ()
    /// x()
    /// y()
    /// scalar()
    z() -> f32,
    /// 
    /// Returns the scalar component of this quaternion.
    /// 
    /// **See also:** setScalar()
    /// x()
    /// y()
    /// z()
    scalar() -> f32,
    /// 
    /// Sets the x coordinate of this quaternion's vector to the given
    /// *x* coordinate.
    /// 
    /// **See also:** x()
    /// setY()
    /// setZ()
    /// setScalar()
    set_x(x: f32),
    /// 
    /// Sets the y coordinate of this quaternion's vector to the given
    /// *y* coordinate.
    /// 
    /// **See also:** y()
    /// setX()
    /// setZ()
    /// setScalar()
    set_y(y: f32),
    /// 
    /// Sets the z coordinate of this quaternion's vector to the given
    /// *z* coordinate.
    /// 
    /// **See also:** z()
    /// setX()
    /// setY()
    /// setScalar()
    set_z(z: f32),
    /// 
    /// Sets the scalar component of this quaternion to *scalar.*
    /// 
    /// **See also:** scalar()
    /// setX()
    /// setY()
    /// setZ()
    set_scalar(scalar: f32),
    /// 
    /// Returns the dot product of *q1* and *q2.*
    /// 
    /// **See also:** length()
    [static] dot_product(q1: &QuaternionType, q2: &QuaternionType) -> f32,
    /// 
    /// Returns the length of the quaternion. This is also called the .
    /// 
    /// **See also:** lengthSquared()
    /// normalized()
    /// dotProduct()
    /// 
    /// Returns the squared length of the quaternion.
    /// 
    /// **See also:** length()
    /// dotProduct()
    length() -> f32,
    /// 
    /// Returns the squared length of the quaternion.
    /// 
    /// **See also:** length()
    /// dotProduct()
    length_squared() -> f32,
    /// 
    /// Returns the normalized unit form of this quaternion.
    /// 
    /// If this quaternion is null, then a null quaternion is returned.
    /// If the length of the quaternion is very close to 1, then the quaternion
    /// will be returned as-is. Otherwise the normalized form of the
    /// quaternion of length 1 will be returned.
    /// 
    /// **See also:** normalize()
    /// length()
    /// dotProduct()
    normalized() -> Quaternion,
    /// 
    /// Returns the normalized unit form of this quaternion.
    /// 
    /// If this quaternion is null, then a null quaternion is returned.
    /// If the length of the quaternion is very close to 1, then the quaternion
    /// will be returned as-is. Otherwise the normalized form of the
    /// quaternion of length 1 will be returned.
    /// 
    /// **See also:** normalize()
    /// length()
    /// dotProduct()
    /// 
    /// Normalizes the current quaternion in place. Nothing happens if this
    /// is a null quaternion or the length of the quaternion is very close to 1.
    /// 
    /// **See also:** length()
    /// normalized()
    normalize(),
    /// 
    /// Returns the inverse of this quaternion.
    /// If this quaternion is null, then a null quaternion is returned.
    /// 
    /// **See also:** isNull()
    /// length()
    inverted() -> Quaternion,
    /// 
    /// Returns the conjugate of this quaternion, which is
    /// (-x, -y, -z, scalar).
    conjugated() -> Quaternion,
    /// 
    /// Returns the conjugate of this quaternion, which is
    /// (-x, -y, -z, scalar).
    /// 
    /// Use conjugated() instead.
    conjugate() -> Quaternion,
    /// 
    /// Rotates *vector* with this quaternion to produce a new vector
    /// in 3D space. The following code:
    /// 
    /// ```
    /// QVector3D result = q.rotatedVector(vector);
    /// ```
    /// 
    /// is equivalent to the following:
    /// 
    /// ```
    /// QVector3D result = (q * QQuaternion(0, vector) * q.conjugated()).vector();
    /// ```
    /// 
    rotated_vector(vector: &Vector3DType) -> Vector3D,
    /// 
    /// Returns this quaternion as a 4D vector.
    to_vector4_d() -> Vector4D,
    /// 
    /// **Overloads**
    /// Extracts a 3D axis *axis* and a rotating angle *angle* (in degrees)
    /// that corresponds to this quaternion.
    /// 
    /// **See also:** fromAxisAndAngle()
    /// 
    /// Extracts a 3D axis ( *x,* *y,* *z)* and a rotating angle *angle* (in degrees)
    /// that corresponds to this quaternion.
    /// 
    /// **See also:** fromAxisAndAngle()
    get_axis_and_angle(axis: *Vector3DType, angle: *f32),
    /// 
    /// Creates a normalized quaternion that corresponds to rotating through
    /// *angle* degrees about the specified 3D *axis.*
    /// 
    /// **See also:** getAxisAndAngle()
    /// 
    /// Creates a normalized quaternion that corresponds to rotating through
    /// *angle* degrees about the 3D axis ( *x,* *y,* *z).*
    /// 
    /// **See also:** getAxisAndAngle()
    [static] from_axis_and_angle(axis: &Vector3DType, angle: f32) -> Quaternion,
    /// 
    /// **Overloads**
    /// Extracts a 3D axis *axis* and a rotating angle *angle* (in degrees)
    /// that corresponds to this quaternion.
    /// 
    /// **See also:** fromAxisAndAngle()
    /// 
    /// Extracts a 3D axis ( *x,* *y,* *z)* and a rotating angle *angle* (in degrees)
    /// that corresponds to this quaternion.
    /// 
    /// **See also:** fromAxisAndAngle()
    get_axis_and_angle_2(x: *f32, y: *f32, z: *f32, angle: *f32),
    /// 
    /// Creates a normalized quaternion that corresponds to rotating through
    /// *angle* degrees about the specified 3D *axis.*
    /// 
    /// **See also:** getAxisAndAngle()
    /// 
    /// Creates a normalized quaternion that corresponds to rotating through
    /// *angle* degrees about the 3D axis ( *x,* *y,* *z).*
    /// 
    /// **See also:** getAxisAndAngle()
    [static] from_axis_and_angle_2(x: f32, y: f32, z: f32, angle: f32) -> Quaternion,
    /// 
    /// **Overloads**
    /// Calculates roll, pitch, and yaw Euler angles (in degrees)
    /// that corresponds to this quaternion.
    /// 
    /// **See also:** fromEulerAngles()
    to_euler_angles() -> Vector3D,
    /// 
    /// **Overloads**
    /// Creates a quaternion that corresponds to a rotation of *eulerAngles:*
    /// eulerAngles.z() degrees around the z axis, eulerAngles.x() degrees around the x axis,
    /// and eulerAngles.y() degrees around the y axis (in that order).
    /// 
    /// **See also:** toEulerAngles()
    /// 
    /// Creates a quaternion that corresponds to a rotation of
    /// *roll* degrees around the z axis, *pitch* degrees around the x axis,
    /// and *yaw* degrees around the y axis (in that order).
    /// 
    /// **See also:** getEulerAngles()
    [static] from_euler_angles(euler_angles: &Vector3DType) -> Quaternion,
    /// 
    /// Calculates *roll,* *pitch,* and *yaw* Euler angles (in degrees)
    /// that corresponds to this quaternion.
    /// 
    /// **See also:** fromEulerAngles()
    get_euler_angles(pitch: *f32, yaw: *f32, roll: *f32),
    /// 
    /// **Overloads**
    /// Creates a quaternion that corresponds to a rotation of *eulerAngles:*
    /// eulerAngles.z() degrees around the z axis, eulerAngles.x() degrees around the x axis,
    /// and eulerAngles.y() degrees around the y axis (in that order).
    /// 
    /// **See also:** toEulerAngles()
    /// 
    /// Creates a quaternion that corresponds to a rotation of
    /// *roll* degrees around the z axis, *pitch* degrees around the x axis,
    /// and *yaw* degrees around the y axis (in that order).
    /// 
    /// **See also:** getEulerAngles()
    [static] from_euler_angles_2(pitch: f32, yaw: f32, roll: f32) -> Quaternion,
    /// 
    /// Returns the 3 orthonormal axes ( *xAxis,* *yAxis,* *zAxis)* defining the quaternion.
    /// 
    /// **See also:** fromAxes()
    /// toRotationMatrix()
    get_axes(x_axis: *Vector3DType, y_axis: *Vector3DType, z_axis: *Vector3DType),
    /// 
    /// Constructs the quaternion using 3 axes ( *xAxis,* *yAxis,* *zAxis).*
    /// 
    /// **Note**: The axes are assumed to be orthonormal.
    /// 
    /// **See also:** getAxes()
    /// fromRotationMatrix()
    [static] from_axes(x_axis: &Vector3DType, y_axis: &Vector3DType, z_axis: &Vector3DType) -> Quaternion,
    /// 
    /// Constructs the quaternion using specified forward direction *direction*
    /// and upward direction *up.*
    /// If the upward direction was not specified or the forward and upward
    /// vectors are collinear, a new orthonormal upward direction will be generated.
    /// 
    /// **See also:** fromAxes()
    /// rotationTo()
    [static] from_direction(direction: &Vector3DType, up: &Vector3DType) -> Quaternion,
    /// 
    /// Returns the shortest arc quaternion to rotate from the direction described by the vector *from*
    /// to the direction described by the vector *to.*
    /// 
    /// **See also:** fromDirection()
    [static] rotation_to(from: &Vector3DType, to: &Vector3DType) -> Quaternion,
    /// 
    /// Interpolates along the shortest spherical path between the
    /// rotational positions *q1* and *q2.* The value *t* should
    /// be between 0 and 1, indicating the spherical distance to travel
    /// between *q1* and *q2.*
    /// 
    /// If *t* is less than or equal to 0, then *q1* will be returned.
    /// If *t* is greater than or equal to 1, then *q2* will be returned.
    /// 
    /// **See also:** nlerp()
    [static] slerp(q1: &QuaternionType, q2: &QuaternionType, t: f32) -> Quaternion,
    /// 
    /// Interpolates along the shortest linear path between the rotational
    /// positions *q1* and *q2.* The value *t* should be between 0 and 1,
    /// indicating the distance to travel between *q1* and *q2.*
    /// The result will be normalized().
    /// 
    /// If *t* is less than or equal to 0, then *q1* will be returned.
    /// If *t* is greater than or equal to 1, then *q2* will be returned.
    /// 
    /// The nlerp() function is typically faster than slerp() and will
    /// give approximate results to spherical interpolation that are
    /// good enough for some applications.
    /// 
    /// **See also:** slerp()
    [static] nlerp(q1: &QuaternionType, q2: &QuaternionType, t: f32) -> Quaternion,
}

// vim: syntax=rust expandtab ts=4 sw=4
