
struct Quaternion {
    is_null() -> bool,
    is_identity() -> bool,
    vector() -> Vector3DType,
    set_vector(&Vector3DType vector),
    set_vector(float x, float y, float z),
    x() -> float,
    y() -> float,
    z() -> float,
    scalar() -> float,
    set_x(float x),
    set_y(float y),
    set_z(float z),
    set_scalar(float scalar),
    dot_product(&QuaternionType q1, &QuaternionType q2) -> float,
    length() -> float,
    length_squared() -> float,
    normalized() -> QuaternionType,
    normalize(),
    inverted() -> QuaternionType,
    conjugated() -> QuaternionType,
    conjugate() -> QuaternionType,
    rotated_vector(&Vector3DType vector) -> Vector3DType,
    to_vector4_d() -> Vector4DType,
    get_axis_and_angle(&Vector3DType axis, &float angle),
    from_axis_and_angle(&Vector3DType axis, float angle) -> QuaternionType,
    get_axis_and_angle(&float x, &float y, &float z, &float angle),
    from_axis_and_angle(float x, float y, float z, float angle) -> QuaternionType,
    to_euler_angles() -> Vector3DType,
    from_euler_angles(&Vector3DType euler_angles) -> QuaternionType,
    get_euler_angles(&float pitch, &float yaw, &float roll),
    from_euler_angles(float pitch, float yaw, float roll) -> QuaternionType,
    get_axes(&Vector3DType x_axis, &Vector3DType y_axis, &Vector3DType z_axis),
    from_axes(&Vector3DType x_axis, &Vector3DType y_axis, &Vector3DType z_axis) -> QuaternionType,
    from_direction(&Vector3DType direction, &Vector3DType up) -> QuaternionType,
    rotation_to(&Vector3DType from, &Vector3DType to) -> QuaternionType,
    slerp(&QuaternionType q1, &QuaternionType q2, float t) -> QuaternionType,
    nlerp(&QuaternionType q1, &QuaternionType q2, float t) -> QuaternionType,
}

