/// 
/// The tip is a short piece of text reminding the user of the
/// widget's function. It is drawn immediately below the given
/// position in a distinctive black-on-yellow color combination. The
/// tip can be any [rich text](QTextEdit)
/// formatted string.
/// 
/// Rich text displayed in a tool tip is implicitly word-wrapped unless
/// specified differently with `<p style='white-space:pre'>` .
/// 
/// The simplest and most common way to set a widget's tool tip is by
/// calling its QWidget::setToolTip() function.
/// 
/// It is also possible to show different tool tips for different
/// regions of a widget, by using a QHelpEvent of type
/// QEvent::ToolTip. Intercept the help event in your widget's [event()](QWidget::)
/// function and call QToolTip::showText() with
/// the text you want to display. The [Tooltips](widgets/tooltips)
/// 
/// example illustrates this technique.
/// 
/// If you are calling QToolTip::hideText(), or QToolTip::showText()
/// with an empty string, as a result of a [ToolTip](QEvent::)
/// -event you
/// should also call [ignore()](QEvent::)
/// on the event, to signal
/// that you don't want to start any tooltip specific modes.
/// 
/// Note that, if you want to show tooltips in an item view, the
/// model/view architecture provides functionality to set an item's
/// tool tip; e.g., the QTableWidgetItem::setToolTip() function.
/// However, if you want to provide custom tool tips in an item view,
/// you must intercept the help event in the
/// QAbstractItemView::viewportEvent() function and handle it yourself.
/// 
/// The default tool tip color and font can be customized with
/// setPalette() and setFont(). When a tooltip is currently on
/// display, isVisible() returns `true` and text() the currently visible
/// text.
/// 
/// **Note**: Tool tips use the inactive color group of QPalette, because tool
/// tips are not active windows.
/// 
/// **See also:** [`Widget::tool_tip()`]
/// [`Action::tool_tip()`]
/// {Tool Tips Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct ToolTip {
    /// 
    /// Shows *text* as a tool tip, with the global position *pos* as
    /// the point of interest. The tool tip will be shown with a platform
    /// specific offset from this point of interest.
    /// 
    /// If you specify a non-empty rect the tip will be hidden as soon
    /// as you move your cursor out of this area.
    /// 
    /// The *rect* is in the coordinates of the widget you specify with
    /// *w.* If the *rect* is not empty you must specify a widget.
    /// Otherwise this argument can be 0 but it is used to determine the
    /// appropriate screen on multi-head systems.
    /// 
    /// If *text* is empty the tool tip is hidden. If the text is the
    /// same as the currently shown tooltip, the tip will *not* move.
    /// You can force moving by first hiding the tip with an empty text,
    /// and then showing the new tip at the new position.
    /// 
    /// **Overloads**  This is similar to QToolTip::showText( *pos,* *text,* *w,* *rect)* but with an extra parameter *msecDisplayTime*
    /// that specifies how long the tool tip will be displayed, in milliseconds.
    /// 
    /// **Overloads**
    /// This is analogous to calling QToolTip::showText( *pos,* *text,* *w,* QRect())
    [static] show_text(pos: &PointType, text: String, w: *WidgetType),
    /// 
    /// Shows *text* as a tool tip, with the global position *pos* as
    /// the point of interest. The tool tip will be shown with a platform
    /// specific offset from this point of interest.
    /// 
    /// If you specify a non-empty rect the tip will be hidden as soon
    /// as you move your cursor out of this area.
    /// 
    /// The *rect* is in the coordinates of the widget you specify with
    /// *w.* If the *rect* is not empty you must specify a widget.
    /// Otherwise this argument can be 0 but it is used to determine the
    /// appropriate screen on multi-head systems.
    /// 
    /// If *text* is empty the tool tip is hidden. If the text is the
    /// same as the currently shown tooltip, the tip will *not* move.
    /// You can force moving by first hiding the tip with an empty text,
    /// and then showing the new tip at the new position.
    /// 
    /// **Overloads**  This is similar to QToolTip::showText( *pos,* *text,* *w,* *rect)* but with an extra parameter *msecDisplayTime*
    /// that specifies how long the tool tip will be displayed, in milliseconds.
    /// 
    /// **Overloads**
    /// This is analogous to calling QToolTip::showText( *pos,* *text,* *w,* QRect())
    [org_name(showText)]
    [static] show_text_2(pos: &PointType, text: String, w: *WidgetType, rect: &RectType),
    /// 
    /// Shows *text* as a tool tip, with the global position *pos* as
    /// the point of interest. The tool tip will be shown with a platform
    /// specific offset from this point of interest.
    /// 
    /// If you specify a non-empty rect the tip will be hidden as soon
    /// as you move your cursor out of this area.
    /// 
    /// The *rect* is in the coordinates of the widget you specify with
    /// *w.* If the *rect* is not empty you must specify a widget.
    /// Otherwise this argument can be 0 but it is used to determine the
    /// appropriate screen on multi-head systems.
    /// 
    /// If *text* is empty the tool tip is hidden. If the text is the
    /// same as the currently shown tooltip, the tip will *not* move.
    /// You can force moving by first hiding the tip with an empty text,
    /// and then showing the new tip at the new position.
    /// 
    /// **Overloads**  This is similar to QToolTip::showText( *pos,* *text,* *w,* *rect)* but with an extra parameter *msecDisplayTime*
    /// that specifies how long the tool tip will be displayed, in milliseconds.
    /// 
    /// **Overloads**
    /// This is analogous to calling QToolTip::showText( *pos,* *text,* *w,* QRect())
    [org_name(showText)]
    [static] show_text_3(pos: &PointType, text: String, w: *WidgetType, rect: &RectType, msec_show_time: i32),
    /// 
    /// Hides the tool tip. This is the same as calling showText() with an
    /// empty string.
    /// 
    /// **See also:** [`show_text()`]
    [static] hide_text(),
    /// 
    /// Returns `true` if this tooltip is currently shown.
    /// 
    /// **See also:** [`show_text()`]
    [static] is_visible() -> bool,
    /// 
    /// Returns the tooltip text, if a tooltip is visible, or an
    /// empty string if a tooltip is not visible.
    [static] text() -> String,
    /// 
    /// Returns the palette used to render tooltips.
    /// 
    /// **Note**: Tool tips use the inactive color group of QPalette, because tool
    /// tips are not active windows.
    [static] palette() -> Palette,
    /// 
    /// Sets the *palette* used to render tooltips.
    /// 
    /// **Note**: Tool tips use the inactive color group of QPalette, because tool
    /// tips are not active windows.
    [static] set_palette(arg0: &PaletteType),
    /// 
    /// Returns the font used to render tooltips.
    [static] font() -> Font,
    /// 
    /// Sets the *font* used to render tooltips.
    [static] set_font(arg0: &FontType),
}

// vim: syntax=rust expandtab ts=4 sw=4
