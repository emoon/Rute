/// 
/// Table cells are pieces of document structure that belong to a table.
/// The table orders cells into particular rows and columns; cells can
/// also span multiple columns and rows.
/// 
/// Cells are usually created when a table is inserted into a document with
/// QTextCursor::insertTable(), but they are also created and destroyed when
/// a table is resized.
/// 
/// Cells contain information about their location in a table; you can
/// obtain the row() and column() numbers of a cell, and its rowSpan()
/// and columnSpan().
/// 
/// The format() of a cell describes the default character format of its
/// contents. The firstCursorPosition() and lastCursorPosition() functions
/// are used to obtain the extent of the cell in the document.
/// 
/// **See also:** [`TextTable`]
/// [`TextTableFormat`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TextTableCell {
    /// 
    /// Sets the cell's character format to *format.* This can for example be used to change
    /// the background color of the entire cell:
    /// 
    /// QTextTableCell cell = table->cellAt(2, 3);
    /// QTextCharFormat format = cell.format();
    /// format.setBackground(Qt::blue);
    /// cell.setFormat(format);
    /// 
    /// Note that the cell's row or column span cannot be changed through this function. You have
    /// to use QTextTable::mergeCells and QTextTable::splitCell instead.
    /// 
    /// **See also:** [`format()`]
    set_format(format: &TextCharFormatType),
    /// 
    /// Returns the cell's character format.
    format() -> TextCharFormat,
    /// 
    /// Returns the number of the row in the table that contains this cell.
    /// 
    /// **See also:** [`column()`]
    /// 
    /// Returns the number of rows this cell spans. The default is 1.
    /// 
    /// **See also:** [`column_span()`]
    row() -> i32,
    /// 
    /// Returns the number of the column in the table that contains this cell.
    /// 
    /// **See also:** [`row()`]
    /// 
    /// Returns the number of columns this cell spans. The default is 1.
    /// 
    /// **See also:** [`row_span()`]
    column() -> i32,
    /// 
    /// Returns the number of rows this cell spans. The default is 1.
    /// 
    /// **See also:** [`column_span()`]
    row_span() -> i32,
    /// 
    /// Returns the number of columns this cell spans. The default is 1.
    /// 
    /// **See also:** [`row_span()`]
    column_span() -> i32,
    /// 
    /// Returns `true` if this is a valid table cell; otherwise returns
    /// false.
    is_valid() -> bool,
    /// 
    /// Returns the first valid cursor position in this cell.
    /// 
    /// **See also:** [`last_cursor_position()`]
    first_cursor_position() -> TextCursor,
    /// 
    /// Returns the last valid cursor position in this cell.
    /// 
    /// **See also:** [`first_cursor_position()`]
    last_cursor_position() -> TextCursor,
    first_position() -> i32,
    last_position() -> i32,
    /// 
    /// Returns a frame iterator pointing to the beginning of the table's cell.
    /// 
    /// **See also:** [`end()`]
    begin() -> TextFrame::iterator,
    /// 
    /// Returns a frame iterator pointing to the end of the table's cell.
    /// 
    /// **See also:** [`begin()`]
    end() -> TextFrame::iterator,
    /// 
    /// Returns the index of the tableCell's format in the document's internal list of formats.
    /// 
    /// **See also:** [`TextDocument::all_formats`]
    table_cell_format_index() -> i32,
}

// vim: syntax=rust expandtab ts=4 sw=4
