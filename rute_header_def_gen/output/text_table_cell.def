///     \class QTextTableCell
///     \reentrant
/// 
///     \brief The QTextTableCell class represents the properties of a
///     cell in a QTextTable.
///     \inmodule QtGui
/// 
///     \ingroup richtext-processing
/// 
///     Table cells are pieces of document structure that belong to a table.
///     The table orders cells into particular rows and columns; cells can
///     also span multiple columns and rows.
/// 
///     Cells are usually created when a table is inserted into a document with
///     QTextCursor::insertTable(), but they are also created and destroyed when
///     a table is resized.
/// 
///     Cells contain information about their location in a table; you can
///     obtain the row() and column() numbers of a cell, and its rowSpan()
///     and columnSpan().
/// 
///     The format() of a cell describes the default character format of its
///     contents. The firstCursorPosition() and lastCursorPosition() functions
///     are used to obtain the extent of the cell in the document.
/// 
///     \sa QTextTable, QTextTableFormat

struct TextTableCell {
    ///     \since 4.2
    /// 
    ///     Sets the cell's character format to \a format. This can for example be used to change
    ///     the background color of the entire cell:
    /// 
    ///     QTextTableCell cell = table->cellAt(2, 3);
    ///     QTextCharFormat format = cell.format();
    ///     format.setBackground(Qt::blue);
    ///     cell.setFormat(format);
    /// 
    ///     Note that the cell's row or column span cannot be changed through this function. You have
    ///     to use QTextTable::mergeCells and QTextTable::splitCell instead.
    /// 
    ///     \sa format()
    set_format(format: &TextCharFormatType),
    ///     Returns the cell's character format.
    format() -> TextCharFormat,
    ///     Returns the number of the row in the table that contains this cell.
    /// 
    ///     \sa column()
    row() -> i32,
    ///     Returns the number of the column in the table that contains this cell.
    /// 
    ///     \sa row()
    column() -> i32,
    ///     Returns the number of rows this cell spans. The default is 1.
    /// 
    ///     \sa columnSpan()
    row_span() -> i32,
    ///     Returns the number of columns this cell spans. The default is 1.
    /// 
    ///     \sa rowSpan()
    column_span() -> i32,
    is_valid() -> bool,
    ///     Returns the first valid cursor position in this cell.
    /// 
    ///     \sa lastCursorPosition()
    first_cursor_position() -> TextCursor,
    ///     Returns the last valid cursor position in this cell.
    /// 
    ///     \sa firstCursorPosition()
    last_cursor_position() -> TextCursor,
    ///     \internal
    /// 
    ///     Returns the first valid position in the document occupied by this cell.
    first_position() -> i32,
    ///     \internal
    /// 
    ///     Returns the last valid position in the document occupied by this cell.
    last_position() -> i32,
    ///     Returns a frame iterator pointing to the beginning of the table's cell.
    /// 
    ///     \sa end()
    begin() -> TextFrame::iterator,
    ///     Returns a frame iterator pointing to the end of the table's cell.
    /// 
    ///     \sa begin()
    end() -> TextFrame::iterator,
    ///     \since 4.5
    /// 
    ///     Returns the index of the tableCell's format in the document's internal list of formats.
    /// 
    ///     \sa QTextDocument::allFormats()
    table_cell_format_index() -> i32,
}

// vim: syntax=rust expandtab ts=4 sw=4
