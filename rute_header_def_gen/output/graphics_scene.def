enum ItemIndexMethod {
    BspTreeIndex,
    NoIndex,
}

enum SceneLayer {
    ItemLayer,
    BackgroundLayer,
    ForegroundLayer,
    AllLayers,
}

struct GraphicsScene : Object {
    scene_rect() -> RectFType,
    width() -> f32,
    height() -> f32,
    set_scene_rect(rect: &RectFType),
    set_scene_rect(x: f32, y: f32, w: f32, h: f32),
    render(painter: &PainterType, target: &RectFType, source: &RectFType, aspect_ratio_mode: Rute::AspectRatioMode),
    item_index_method() -> GraphicsScene::ItemIndexMethod,
    set_item_index_method(method: GraphicsScene::ItemIndexMethod),
    is_sort_cache_enabled() -> bool,
    set_sort_cache_enabled(enabled: bool),
    bsp_tree_depth() -> i32,
    set_bsp_tree_depth(depth: i32),
    items_bounding_rect() -> RectFType,
    items(order: Rute::SortOrder) -> [&GraphicsItemType],
    items(pos: &PointFType, mode: Rute::ItemSelectionMode, order: Rute::SortOrder, device_transform: &TransformType) -> [&GraphicsItemType],
    items(rect: &RectFType, mode: Rute::ItemSelectionMode, order: Rute::SortOrder, device_transform: &TransformType) -> [&GraphicsItemType],
    items(polygon: &PolygonFType, mode: Rute::ItemSelectionMode, order: Rute::SortOrder, device_transform: &TransformType) -> [&GraphicsItemType],
    items(path: &PainterPathType, mode: Rute::ItemSelectionMode, order: Rute::SortOrder, device_transform: &TransformType) -> [&GraphicsItemType],
    colliding_items(item: &GraphicsItemType, mode: Rute::ItemSelectionMode) -> [&GraphicsItemType],
    item_at(pos: &PointFType, device_transform: &TransformType) -> &GraphicsItemType,
    items(x: f32, y: f32, w: f32, h: f32, mode: Rute::ItemSelectionMode, order: Rute::SortOrder, device_transform: &TransformType) -> [&GraphicsItemType],
    item_at(x: f32, y: f32, device_transform: &TransformType) -> &GraphicsItemType,
    selected_items() -> [&GraphicsItemType],
    selection_area() -> PainterPathType,
    set_selection_area(path: &PainterPathType, device_transform: &TransformType),
    set_selection_area(path: &PainterPathType, mode: Rute::ItemSelectionMode, device_transform: &TransformType),
    set_selection_area(path: &PainterPathType, selection_operation: Rute::ItemSelectionOperation, mode: Rute::ItemSelectionMode, device_transform: &TransformType),
    create_item_group(items: [&GraphicsItemType]) -> &GraphicsItemGroupType,
    add_item(item: &GraphicsItemType),
    add_ellipse(rect: &RectFType, pen: &PenType, brush: &BrushType) -> &GraphicsEllipseItemType,
    add_line(line: &LineFType, pen: &PenType) -> &GraphicsLineItemType,
    add_path(path: &PainterPathType, pen: &PenType, brush: &BrushType) -> &GraphicsPathItemType,
    add_pixmap(pixmap: &PixmapType) -> &GraphicsPixmapItemType,
    add_polygon(polygon: &PolygonFType, pen: &PenType, brush: &BrushType) -> &GraphicsPolygonItemType,
    add_rect(rect: &RectFType, pen: &PenType, brush: &BrushType) -> &GraphicsRectItemType,
    add_text(text: String, font: &FontType) -> &GraphicsTextItemType,
    add_simple_text(text: String, font: &FontType) -> &GraphicsSimpleTextItemType,
    add_widget(widget: &WidgetType, w_flags: Rute::WindowFlags) -> &GraphicsProxyWidgetType,
    add_ellipse(x: f32, y: f32, w: f32, h: f32, pen: &PenType, brush: &BrushType) -> &GraphicsEllipseItemType,
    add_line(x1: f32, y1: f32, x2: f32, y2: f32, pen: &PenType) -> &GraphicsLineItemType,
    add_rect(x: f32, y: f32, w: f32, h: f32, pen: &PenType, brush: &BrushType) -> &GraphicsRectItemType,
    remove_item(item: &GraphicsItemType),
    focus_item() -> &GraphicsItemType,
    set_focus_item(item: &GraphicsItemType, focus_reason: Rute::FocusReason),
    has_focus() -> bool,
    set_focus(focus_reason: Rute::FocusReason),
    clear_focus(),
    set_sticky_focus(enabled: bool),
    sticky_focus() -> bool,
    mouse_grabber_item() -> &GraphicsItemType,
    background_brush() -> BrushType,
    set_background_brush(brush: &BrushType),
    foreground_brush() -> BrushType,
    set_foreground_brush(brush: &BrushType),
    [override] input_method_query(query: Rute::InputMethodQuery) -> VariantType,
    views() -> [&GraphicsViewType],
    update(x: f32, y: f32, w: f32, h: f32),
    invalidate(x: f32, y: f32, w: f32, h: f32, layers: SceneLayers),
    style() -> &StyleType,
    set_style(style: &StyleType),
    font() -> FontType,
    set_font(font: &FontType),
    palette() -> PaletteType,
    set_palette(palette: &PaletteType),
    is_active() -> bool,
    active_panel() -> &GraphicsItemType,
    set_active_panel(item: &GraphicsItemType),
    active_window() -> &GraphicsWidgetType,
    set_active_window(widget: &GraphicsWidgetType),
    send_event(item: &GraphicsItemType, event: &EventType) -> bool,
    minimum_render_size() -> f32,
    set_minimum_render_size(min_size: f32),
    update(rect: &RectFType),
    invalidate(rect: &RectFType, layers: SceneLayers),
    advance(),
    clear_selection(),
    clear(),
    [override] event(event: &EventType) -> bool,
    [override] event_filter(watched: &ObjectType, event: &EventType) -> bool,
    [override] context_menu_event(event: &GraphicsSceneContextMenuEventType),
    [override] drag_enter_event(event: &GraphicsSceneDragDropEventType),
    [override] drag_move_event(event: &GraphicsSceneDragDropEventType),
    [override] drag_leave_event(event: &GraphicsSceneDragDropEventType),
    [override] drop_event(event: &GraphicsSceneDragDropEventType),
    [override] focus_in_event(event: &FocusEventType),
    [override] focus_out_event(event: &FocusEventType),
    [override] help_event(event: &GraphicsSceneHelpEventType),
    [override] key_press_event(event: &KeyEventType),
    [override] key_release_event(event: &KeyEventType),
    [override] mouse_press_event(event: &GraphicsSceneMouseEventType),
    [override] mouse_move_event(event: &GraphicsSceneMouseEventType),
    [override] mouse_release_event(event: &GraphicsSceneMouseEventType),
    [override] mouse_double_click_event(event: &GraphicsSceneMouseEventType),
    [override] wheel_event(event: &GraphicsSceneWheelEventType),
    [override] input_method_event(event: &InputMethodEventType),
    [override] draw_background(painter: &PainterType, rect: &RectFType),
    [override] draw_foreground(painter: &PainterType, rect: &RectFType),
    [override] draw_items(painter: &PainterType, num_items: i32, items: &GraphicsItemType, options: StyleOptionGraphicsItemType, widget: &WidgetType),
    focus_next_prev_child(next: bool) -> bool,
    [event] changed(region: [RectFType]),
    [event] scene_rect_changed(rect: &RectFType),
    [event] selection_changed(),
    [event] focus_item_changed(new_focus: &GraphicsItemType, old_focus: &GraphicsItemType, reason: Rute::FocusReason),
}

// vim: syntax=rust expandtab ts=4 sw=4
