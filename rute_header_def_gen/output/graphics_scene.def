struct GraphicsScene : Object {
    scene_rect() -> RectFType,
    width() -> f32,
    height() -> f32,
    set_scene_rect(&RectFType rect),
    set_scene_rect(f32 x, f32 y, f32 w, f32 h),
    render(&PainterType painter, &RectFType target, &RectFType source, Rute::AspectRatioMode aspect_ratio_mode),
    item_index_method() -> GraphicsScene::ItemIndexMethod,
    set_item_index_method(GraphicsScene::ItemIndexMethod method),
    is_sort_cache_enabled() -> bool,
    set_sort_cache_enabled(bool enabled),
    bsp_tree_depth() -> i32,
    set_bsp_tree_depth(i32 depth),
    items_bounding_rect() -> RectFType,
    items(Rute::SortOrder order) -> <&GraphicsItemType>,
    items(&PointFType pos, Rute::ItemSelectionMode mode, Rute::SortOrder order, &TransformType device_transform) -> <&GraphicsItemType>,
    items(&RectFType rect, Rute::ItemSelectionMode mode, Rute::SortOrder order, &TransformType device_transform) -> <&GraphicsItemType>,
    items(&PolygonFType polygon, Rute::ItemSelectionMode mode, Rute::SortOrder order, &TransformType device_transform) -> <&GraphicsItemType>,
    items(&PainterPathType path, Rute::ItemSelectionMode mode, Rute::SortOrder order, &TransformType device_transform) -> <&GraphicsItemType>,
    colliding_items(&GraphicsItemType item, Rute::ItemSelectionMode mode) -> <&GraphicsItemType>,
    item_at(&PointFType pos, &TransformType device_transform) -> &GraphicsItemType,
    items(f32 x, f32 y, f32 w, f32 h, Rute::ItemSelectionMode mode, Rute::SortOrder order, &TransformType device_transform) -> <&GraphicsItemType>,
    item_at(f32 x, f32 y, &TransformType device_transform) -> &GraphicsItemType,
    selected_items() -> <&GraphicsItemType>,
    selection_area() -> PainterPathType,
    set_selection_area(&PainterPathType path, &TransformType device_transform),
    set_selection_area(&PainterPathType path, Rute::ItemSelectionMode mode, &TransformType device_transform),
    set_selection_area(&PainterPathType path, Rute::ItemSelectionOperation selection_operation, Rute::ItemSelectionMode mode, &TransformType device_transform),
    create_item_group(&List<QGraphicsItemType items) -> &GraphicsItemGroupType,
    add_item(&GraphicsItemType item),
    add_ellipse(&RectFType rect, &PenType pen, &BrushType brush) -> &GraphicsEllipseItemType,
    add_line(&LineFType line, &PenType pen) -> &GraphicsLineItemType,
    add_path(&PainterPathType path, &PenType pen, &BrushType brush) -> &GraphicsPathItemType,
    add_pixmap(&PixmapType pixmap) -> &GraphicsPixmapItemType,
    add_polygon(&PolygonFType polygon, &PenType pen, &BrushType brush) -> &GraphicsPolygonItemType,
    add_rect(&RectFType rect, &PenType pen, &BrushType brush) -> &GraphicsRectItemType,
    add_text(String text, &FontType font) -> &GraphicsTextItemType,
    add_simple_text(String text, &FontType font) -> &GraphicsSimpleTextItemType,
    add_widget(&WidgetType widget, Rute::WindowFlags w_flags) -> &GraphicsProxyWidgetType,
    add_ellipse(f32 x, f32 y, f32 w, f32 h, &PenType pen, &BrushType brush) -> &GraphicsEllipseItemType,
    add_line(f32 x1, f32 y1, f32 x2, f32 y2, &PenType pen) -> &GraphicsLineItemType,
    add_rect(f32 x, f32 y, f32 w, f32 h, &PenType pen, &BrushType brush) -> &GraphicsRectItemType,
    remove_item(&GraphicsItemType item),
    focus_item() -> &GraphicsItemType,
    set_focus_item(&GraphicsItemType item, Rute::FocusReason focus_reason),
    has_focus() -> bool,
    set_focus(Rute::FocusReason focus_reason),
    clear_focus(),
    set_sticky_focus(bool enabled),
    sticky_focus() -> bool,
    mouse_grabber_item() -> &GraphicsItemType,
    background_brush() -> BrushType,
    set_background_brush(&BrushType brush),
    foreground_brush() -> BrushType,
    set_foreground_brush(&BrushType brush),
    input_method_query(Rute::InputMethodQuery query) -> VariantType,
    views() -> <&GraphicsViewType>,
    update(f32 x, f32 y, f32 w, f32 h),
    invalidate(f32 x, f32 y, f32 w, f32 h, SceneLayers layers),
    style() -> &StyleType,
    set_style(&StyleType style),
    font() -> FontType,
    set_font(&FontType font),
    palette() -> PaletteType,
    set_palette(&PaletteType palette),
    is_active() -> bool,
    active_panel() -> &GraphicsItemType,
    set_active_panel(&GraphicsItemType item),
    active_window() -> &GraphicsWidgetType,
    set_active_window(&GraphicsWidgetType widget),
    send_event(&GraphicsItemType item, &EventType event) -> bool,
    minimum_render_size() -> f32,
    set_minimum_render_size(f32 min_size),
    update(&RectFType rect),
    invalidate(&RectFType rect, SceneLayers layers),
    advance(),
    clear_selection(),
    clear(),
    event(&EventType event) -> bool,
    event_filter(&ObjectType watched, &EventType event) -> bool,
    context_menu_event(&GraphicsSceneContextMenuEventType event),
    drag_enter_event(&GraphicsSceneDragDropEventType event),
    drag_move_event(&GraphicsSceneDragDropEventType event),
    drag_leave_event(&GraphicsSceneDragDropEventType event),
    drop_event(&GraphicsSceneDragDropEventType event),
    focus_in_event(&FocusEventType event),
    focus_out_event(&FocusEventType event),
    help_event(&GraphicsSceneHelpEventType event),
    key_press_event(&KeyEventType event),
    key_release_event(&KeyEventType event),
    mouse_press_event(&GraphicsSceneMouseEventType event),
    mouse_move_event(&GraphicsSceneMouseEventType event),
    mouse_release_event(&GraphicsSceneMouseEventType event),
    mouse_double_click_event(&GraphicsSceneMouseEventType event),
    wheel_event(&GraphicsSceneWheelEventType event),
    input_method_event(&InputMethodEventType event),
    draw_background(&PainterType painter, &RectFType rect),
    draw_foreground(&PainterType painter, &RectFType rect),
    draw_items(&PainterType painter, i32 num_items, &GraphicsItemType items, StyleOptionGraphicsItemType options, &WidgetType widget),
    focus_next_prev_child(bool next) -> bool,
    changed(&List<QRectF>Type region),
    scene_rect_changed(&RectFType rect),
    selection_changed(),
    focus_item_changed(&GraphicsItemType new_focus, &GraphicsItemType old_focus, Rute::FocusReason reason),
}

