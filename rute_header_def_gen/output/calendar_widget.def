/// 
/// ![fusion-calendarwidget.png](fusion-calendarwidget.png)
/// 
/// The widget is initialized with the current month and year, but
/// QCalendarWidget provides several public slots to change the year
/// and month that is shown.
/// 
/// By default, today's date is selected, and the user can select a
/// date using both mouse and keyboard. The currently selected date
/// can be retrieved using the selectedDate() function. It is
/// possible to constrain the user selection to a given date range by
/// setting the minimumDate and maximumDate properties.
/// Alternatively, both properties can be set in one go using the
/// setDateRange() convenience slot. Set the [selectionMode](selectionMode)
/// 
/// property to NoSelection to prohibit the user from selecting at
/// all. Note that a date also can be selected programmatically using
/// the setSelectedDate() slot.
/// 
/// The currently displayed month and year can be retrieved using the
/// monthShown() and yearShown() functions, respectively.
/// 
/// A newly created calendar widget uses abbreviated day names, and
/// both Saturdays and Sundays are marked in red. The calendar grid is
/// not visible. The week numbers are displayed, and the first column
/// day is the first day of the week for the calendar's locale.
/// 
/// The notation of the days can be altered to a single letter
/// abbreviations ("M" for ) by setting the
/// horizontalHeaderFormat property to
/// QCalendarWidget::SingleLetterDayNames. Setting the same property
/// to QCalendarWidget::LongDayNames makes the header display the
/// complete day names. The week numbers can be removed by setting
/// the verticalHeaderFormat property to
/// QCalendarWidget::NoVerticalHeader. The calendar grid can be
/// turned on by setting the gridVisible property to true using the
/// setGridVisible() function:
/// 
/// * ![qcalendarwidget-grid.png](qcalendarwidget-grid.png)
/// 
/// 
/// 
/// Finally, the day in the first column can be altered using the
/// setFirstDayOfWeek() function.
/// 
/// The QCalendarWidget class also provides three signals,
/// selectionChanged(), activated() and currentPageChanged() making it
/// possible to respond to user interaction.
/// 
/// The rendering of the headers, weekdays or single days can be
/// largely customized by setting QTextCharFormat's for some special
/// weekday, a special date or for the rendering of the headers.
/// 
/// Only a subset of the properties in QTextCharFormat are used by the
/// calendar widget. Currently, the foreground, background and font
/// properties are used to determine the rendering of individual cells
/// in the widget.
/// 
/// **See also:** [`Date`]
/// [`DateEdit`]
/// [`TextCharFormat`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct CalendarWidget : Widget {
    /// 
    [event] size_hint() -> Size,
    /// 
    [event] minimum_size_hint() -> Size,
    /// 
    /// The selected date must be within the date range specified by the
    /// minimumDate and maximumDate properties. By default, the selected
    /// date is the current date.
    /// 
    /// **See also:** [`set_date_range()`]
    selected_date() -> Date,
    /// 
    /// Returns the year of the currently displayed month. Months are
    /// numbered from 1 to 12.
    /// 
    /// **See also:** [`month_shown()`]
    /// [`set_current_page()`]
    year_shown() -> i32,
    /// 
    /// Returns the currently displayed month. Months are numbered from 1 to
    /// 12.
    /// 
    /// **See also:** [`year_shown()`]
    /// [`set_current_page()`]
    month_shown() -> i32,
    /// 
    /// The user will not be able to select a date that is before the
    /// currently set minimum date.
    /// 
    /// * ![qcalendarwidget-minimum.png](qcalendarwidget-minimum.png)
    /// 
    /// 
    /// 
    /// By default, the minimum date is the earliest date that the QDate
    /// class can handle.
    /// 
    /// When setting a minimum date, the maximumDate and selectedDate
    /// properties are adjusted if the selection range becomes invalid. If
    /// the provided date is not a valid QDate object, the
    /// setMinimumDate() function does nothing.
    /// 
    /// **See also:** [`set_date_range()`]
    minimum_date() -> Date,
    set_minimum_date(date: &DateType),
    /// 
    /// The user will not be able to select a date which is after the
    /// currently set maximum date.
    /// 
    /// * ![qcalendarwidget-maximum.png](qcalendarwidget-maximum.png)
    /// 
    /// 
    /// 
    /// By default, the maximum date is the last day the QDate class can
    /// handle.
    /// 
    /// When setting a maximum date, the minimumDate and selectedDate
    /// properties are adjusted if the selection range becomes invalid. If
    /// the provided date is not a valid QDate object, the
    /// setMaximumDate() function does nothing.
    /// 
    /// **See also:** [`set_date_range()`]
    maximum_date() -> Date,
    set_maximum_date(date: &DateType),
    /// 
    /// By default, the day displayed in the first column
    /// is the first day of the week for the calendar's locale.
    first_day_of_week() -> Rute::DayOfWeek,
    set_first_day_of_week(day_of_week: Rute::DayOfWeek),
    is_navigation_bar_visible() -> bool,
    is_grid_visible() -> bool,
    /// 
    /// When this property is set to SingleSelection, the user can select a date
    /// within the minimum and maximum allowed dates, using either the mouse or
    /// the keyboard.
    /// 
    /// When the property is set to NoSelection, the user will be unable to select
    /// dates, but they can still be selected programmatically. Note that the date
    /// that is selected when the property is set to NoSelection will still be
    /// the selected date of the calendar.
    /// 
    /// The default value is SingleSelection.
    selection_mode() -> CalendarWidget::SelectionMode,
    set_selection_mode(mode: CalendarWidget::SelectionMode),
    /// 
    /// The default value is QCalendarWidget::ShortDayNames.
    horizontal_header_format() -> CalendarWidget::HorizontalHeaderFormat,
    set_horizontal_header_format(format: CalendarWidget::HorizontalHeaderFormat),
    /// 
    /// The default value is QCalendarWidget::ISOWeekNumber.
    vertical_header_format() -> CalendarWidget::VerticalHeaderFormat,
    set_vertical_header_format(format: CalendarWidget::VerticalHeaderFormat),
    /// 
    /// Returns the text char format for rendering the header.
    header_text_format() -> TextCharFormat,
    /// 
    /// Sets the text char format for rendering the header to *format.*
    /// If you also set a weekday text format, this format's foreground and
    /// background color will take precedence over the header's format.
    /// The other formatting information will still be decided by
    /// the header's format.
    set_header_text_format(format: &TextCharFormatType),
    /// 
    /// Returns the text char format for rendering of day in the week *dayOfWeek.*
    /// 
    /// **See also:** [`header_text_format()`]
    weekday_text_format(day_of_week: Rute::DayOfWeek) -> TextCharFormat,
    /// 
    /// Sets the text char format for rendering of day in the week *dayOfWeek* to *format.*
    /// The format will take precedence over the header format in case of foreground
    /// and background color. Other text formatting information is taken from the headers format.
    /// 
    /// **See also:** [`set_header_text_format()`]
    set_weekday_text_format(day_of_week: Rute::DayOfWeek, format: &TextCharFormatType),
    /// 
    /// Returns a QMap from QDate to QTextCharFormat showing all dates
    /// that use a special format that alters their rendering.
    /// 
    /// Returns a QTextCharFormat for *date.* The char format can be be
    /// empty if the date is not renderd specially.
    date_text_format() -> Map<QDate,,
    /// 
    /// Returns a QMap from QDate to QTextCharFormat showing all dates
    /// that use a special format that alters their rendering.
    /// 
    /// Returns a QTextCharFormat for *date.* The char format can be be
    /// empty if the date is not renderd specially.
    [org_name(dateTextFormat)]
    date_text_format_2(date: &DateType) -> TextCharFormat,
    /// 
    /// Sets the format used to render the given *date* to that specified by *format.*
    /// 
    /// If *date* is null, all date formats are cleared.
    set_date_text_format(date: &DateType, format: &TextCharFormatType),
    is_date_edit_enabled() -> bool,
    set_date_edit_enabled(enable: bool),
    /// 
    /// If the calendar widget's [date edit is enabled](dateEditEnabled)
    /// , this
    /// property specifies the amount of time (in millseconds) that the date edit
    /// remains open after the most recent user input. Once this time has elapsed,
    /// the date specified in the date edit is accepted and the popup is closed.
    /// 
    /// By default, the delay is defined to be 1500 milliseconds (1.5 seconds).
    date_edit_accept_delay() -> i32,
    set_date_edit_accept_delay(delay: i32),
    /// 
    /// 
    [event] event(event: *EventType) -> bool,
    /// 
    [event] event_filter(watched: *ObjectType, event: *EventType) -> bool,
    /// 
    [event] mouse_press_event(event: *MouseEventType),
    /// 
    [event] resize_event(event: *ResizeEventType),
    /// 
    [event] key_press_event(event: *KeyEventType),
    /// 
    /// Paints the cell specified by the given *date,* using the given *painter* and *rect.*
    [event] paint_cell(painter: *PainterType, rect: &RectType, date: &DateType),
    /// 
    /// Updates the cell specified by the given *date* unless updates
    /// are disabled or the cell is hidden.
    /// 
    /// **See also:** [`update_cells()`]
    /// [`year_shown()`]
    /// [`month_shown()`]
    /// 
    /// Updates all visible cells unless updates are disabled.
    /// 
    /// **See also:** [`update_cell()`]
    update_cell(date: &DateType),
    /// 
    /// Updates all visible cells unless updates are disabled.
    /// 
    /// **See also:** [`update_cell()`]
    update_cells(),
    set_selected_date(date: &DateType),
    /// 
    /// Defines a date range by setting the minimumDate and maximumDate
    /// properties.
    /// 
    /// The date range restricts the user selection, i.e. the user can
    /// only select dates within the specified date range. Note that
    /// 
    /// is analogous to
    /// 
    /// If either the *min* or *max* parameters are not valid QDate
    /// objects, this function does nothing.
    /// 
    /// **See also:** [`set_minimum_date()`]
    /// [`set_maximum_date()`]
    set_date_range(min: &DateType, max: &DateType),
    /// 
    /// Displays the given *month* of the given *year* without changing
    /// the selected date. Use the setSelectedDate() function to alter the
    /// selected date.
    /// 
    /// The currently displayed month and year can be retrieved using the
    /// monthShown() and yearShown() functions respectively.
    /// 
    /// **See also:** [`year_shown()`]
    /// [`month_shown()`]
    /// [`show_previous_month()`]
    /// [`show_next_month()`]
    /// [`show_previous_year()`]
    /// [`show_next_year()`]
    set_current_page(year: i32, month: i32),
    set_grid_visible(show: bool),
    set_navigation_bar_visible(visible: bool),
    /// 
    /// Shows the next month relative to the currently displayed
    /// month. Note that the selected date is not changed.
    /// 
    /// **See also:** [`show_previous_month()`]
    /// [`set_current_page()`]
    /// [`set_selected_date()`]
    show_next_month(),
    /// 
    /// Shows the previous month relative to the currently displayed
    /// month. Note that the selected date is not changed.
    /// 
    /// **See also:** [`show_next_month()`]
    /// [`set_current_page()`]
    /// [`set_selected_date()`]
    show_previous_month(),
    /// 
    /// Shows the currently displayed month in the *next* year relative
    /// to the currently displayed year. Note that the selected date is
    /// not changed.
    /// 
    /// **See also:** [`show_previous_year()`]
    /// [`set_current_page()`]
    /// [`set_selected_date()`]
    show_next_year(),
    /// 
    /// Shows the currently displayed month in the *previous* year
    /// relative to the currently displayed year. Note that the selected
    /// date is not changed.
    /// 
    /// **See also:** [`show_next_year()`]
    /// [`set_current_page()`]
    /// [`set_selected_date()`]
    show_previous_year(),
    /// 
    /// Shows the month of the selected date.
    /// 
    /// **See also:** [`selected_date()`]
    /// [`set_current_page()`]
    show_selected_date(),
    /// 
    /// Shows the month of the today's date.
    /// 
    /// **See also:** [`selected_date()`]
    /// [`set_current_page()`]
    show_today(),
    /// 
    /// This signal is emitted when the currently selected date is
    /// changed.
    /// 
    /// The currently selected date can be changed by the user using the
    /// mouse or keyboard, or by the programmer using setSelectedDate().
    /// 
    /// **See also:** [`selected_date()`]
    [signal] selection_changed(),
    /// 
    /// This signal is emitted when a mouse button is clicked. The date
    /// the mouse was clicked on is specified by *date.* The signal is
    /// only emitted when clicked on a valid date, e.g., dates are not
    /// outside the minimumDate() and maximumDate(). If the selection mode
    /// is NoSelection, this signal will not be emitted.
    /// 
    [signal] clicked(date: &DateType),
    /// 
    /// This signal is emitted whenever the user presses the Return or
    /// Enter key or double-clicks a *date* in the calendar
    /// widget.
    [signal] activated(date: &DateType),
    /// 
    /// This signal is emitted when the currently shown month is changed.
    /// The new *year* and *month* are passed as parameters.
    /// 
    /// **See also:** [`set_current_page()`]
    [signal] current_page_changed(year: i32, month: i32),
}

[org_name(QCalendarWidget)]
enum HorizontalHeaderFormat {
    /// The header is hidden.
    NoHorizontalHeader,
    /// The header displays a single letter abbreviation for day names (e.g. M for Monday).
    SingleLetterDayNames,
    /// The header displays a short abbreviation for day names (e.g. Mon for Monday).
    ShortDayNames,
    /// The header displays complete day names (e.g. Monday).
    LongDayNames,
}

[org_name(QCalendarWidget)]
enum VerticalHeaderFormat {
    /// The header is hidden.
    NoVerticalHeader,
    /// The header displays ISO week numbers as described by
    ISOWeekNumbers,
}

[org_name(QCalendarWidget)]
enum SelectionMode {
    /// Dates cannot be selected.
    NoSelection,
    /// Single dates can be selected.
    SingleSelection,
}

// vim: syntax=rust expandtab ts=4 sw=4
