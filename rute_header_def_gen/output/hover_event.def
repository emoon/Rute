/// 
/// Mouse events occur when a mouse cursor is moved into, out of, or within a
/// widget, and if the widget has the Qt::WA_Hover attribute.
/// 
/// The function pos() gives the current cursor position, while oldPos() gives
/// the old mouse position.
/// 
/// There are a few similarities between the events QEvent::HoverEnter
/// and QEvent::HoverLeave, and the events QEvent::Enter and QEvent::Leave.
/// However, they are slightly different because we do an update() in the event
/// handler of HoverEnter and HoverLeave.
/// 
/// QEvent::HoverMove is also slightly different from QEvent::MouseMove. Let us
/// consider a top-level window A containing a child B which in turn contains a
/// child C (all with mouse tracking enabled):
/// 
/// ![hoverevents.png](hoverevents.png)
/// 
/// Now, if you move the cursor from the top to the bottom in the middle of A,
/// you will get the following QEvent::MouseMove events:
/// 
/// * A::MouseMove
/// * B::MouseMove
/// * C::MouseMove
/// 
/// You will get the same events for QEvent::HoverMove, except that the event
/// always propagates to the top-level regardless whether the event is accepted
/// or not. It will only stop propagating with the Qt::WA_NoMousePropagation
/// attribute.
/// 
/// In this case the events will occur in the following way:
/// 
/// * A::HoverMove
/// * A::HoverMove, B::HoverMove
/// * A::HoverMove, B::HoverMove, C::HoverMove
/// 
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct HoverEvent : InputEvent {
    /// 
    /// Returns the position of the mouse cursor, relative to the widget
    /// that received the event.
    /// 
    /// On QEvent::HoverLeave events, this position will always be
    /// QPoint(-1, -1).
    /// 
    /// **See also:** oldPos()
    /// 
    /// Returns the position of the mouse cursor, relative to the widget
    /// that received the event.
    /// 
    /// On QEvent::HoverLeave events, this position will always be
    /// QPointF(-1, -1).
    /// 
    /// **See also:** oldPosF()
    pos() -> Point,
    /// 
    /// Returns the previous position of the mouse cursor, relative to the widget
    /// that received the event. If there is no previous position, oldPos() will
    /// return the same position as pos().
    /// 
    /// On QEvent::HoverEnter events, this position will always be
    /// QPoint(-1, -1).
    /// 
    /// **See also:** pos()
    /// 
    /// Returns the previous position of the mouse cursor, relative to the widget
    /// that received the event. If there is no previous position, oldPosF() will
    /// return the same position as posF().
    /// 
    /// On QEvent::HoverEnter events, this position will always be
    /// QPointF(-1, -1).
    /// 
    /// **See also:** posF()
    old_pos() -> Point,
    /// 
    /// Returns the position of the mouse cursor, relative to the widget
    /// that received the event.
    /// 
    /// On QEvent::HoverLeave events, this position will always be
    /// QPointF(-1, -1).
    /// 
    /// **See also:** oldPosF()
    pos_f() -> PointF?,
    /// 
    /// Returns the previous position of the mouse cursor, relative to the widget
    /// that received the event. If there is no previous position, oldPosF() will
    /// return the same position as posF().
    /// 
    /// On QEvent::HoverEnter events, this position will always be
    /// QPointF(-1, -1).
    /// 
    /// **See also:** posF()
    old_pos_f() -> PointF?,
}

// vim: syntax=rust expandtab ts=4 sw=4
