/// 
/// QStyleOptionViewItem contains all the information that QStyle
/// functions need to draw the items for Qt's model/view classes.
/// 
/// For performance reasons, the access to the member variables is
/// direct (i.e., using the `.` or `->` operator). This low-level feel
/// makes the structures straightforward to use and emphasizes that
/// these are simply parameters used by the style functions.
/// 
/// For an example demonstrating how style options can be used, see
/// the [Styles](widgets/styles)
/// example.
/// 
/// **See also:** [`StyleOption`]
/// {model-view-programming.html}{Model/View
/// Programming}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct StyleOptionViewItem : StyleOption {
}

[org_name(QStyleOptionViewItem)]
enum StyleOptionType {
    /// The type of style option provided ( [SO_ViewItem](SO_ViewItem)
 for this class). The type is used internally by QStyleOption, its subclasses, and qstyleoption_cast() to determine the type of style option. In general you do not need to worry about this unless you want to create your own QStyleOption subclass and your own styles.
    Type = 10,
}

[org_name(QStyleOptionViewItem)]
enum StyleOptionVersion {
    /// 4 The version is used by QStyleOption subclasses to implement extensions without breaking compatibility. If you use qstyleoption_cast(), you normally do not need to check it.
    Version = 4,
}

[org_name(QStyleOptionViewItem)]
enum Position {
    /// On the left of the text.
    Left = 0,
    /// On the right of the text.
    Right = 1,
    /// Above the text.
    Top = 2,
    /// Below the text.
    Bottom = 3,
}

[org_name(QStyleOptionViewItem)]
enum ViewItemFeature {
    /// Indicates a normal item.
    None = 0,
    /// Indicates an item with wrapped text.
    WrapText = 1,
    /// Indicates that the item's background is rendered using alternateBase.
    Alternate = 2,
    /// Indicates that the item has a check state indicator.
    HasCheckIndicator = 4,
    /// Indicates that the item has a display role.
    HasDisplay = 8,
    /// Indicates that the item has a decoration role.
    HasDecoration = 16,
}

[org_name(QStyleOptionViewItem)]
enum ViewItemPosition {
    /// The ViewItemPosition is unknown and should be disregarded.
    Invalid = 0,
    /// The item appears at the beginning of the row.
    Beginning = 1,
    /// The item appears in the middle of the row.
    Middle = 2,
    /// The item appears at the end of the row.
    End = 3,
    /// The item is the only one on the row, and is therefore both at the beginning and the end.
    OnlyOne = 4,
}

// vim: syntax=rust expandtab ts=4 sw=4
