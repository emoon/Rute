///     \class QGraphicsOpacityEffect
///     \brief The QGraphicsOpacityEffect class provides an opacity effect.
///     \since 4.6
///     \inmodule QtWidgets
/// 
///     An opacity effect renders the source with an opacity. This effect is useful
///     for making the source semi-transparent, similar to a fade-in/fade-out
///     sequence. The opacity can be modified using the setOpacity() function.
/// 
///     By default, the opacity is 0.7.
/// 
///     \image graphicseffect-opacity.png
/// 
///     \sa QGraphicsDropShadowEffect, QGraphicsBlurEffect, QGraphicsColorizeEffect
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GraphicsOpacityEffect : GraphicsEffect {
    ///     \property QGraphicsOpacityEffect::opacity
    ///     \brief the opacity of the effect.
    /// 
    ///     The value should be in the range of 0.0 to 1.0, where 0.0 is
    ///     fully transparent and 1.0 is fully opaque.
    /// 
    ///     By default, the opacity is 0.7.
    /// 
    ///     \sa setOpacityMask()
    opacity() -> f32,
    ///     \property QGraphicsOpacityEffect::opacityMask
    ///     \brief the opacity mask of the effect.
    /// 
    ///     An opacity mask allows you apply opacity to portions of an element.
    /// 
    ///     For example:
    /// 
    ///     \snippet code/src_gui_effects_qgraphicseffect.cpp 2
    /// 
    ///     There is no opacity mask by default.
    /// 
    ///     \sa setOpacity()
    opacity_mask() -> Brush,
    set_opacity(opacity: f32),
    set_opacity_mask(mask: &BrushType),
    [signal] opacity_changed(opacity: f32),
    [signal] opacity_mask_changed(mask: &BrushType),
    ///     \reimp
    [event] draw(painter: *PainterType),
}

// vim: syntax=rust expandtab ts=4 sw=4
