/// 
/// An opacity effect renders the source with an opacity. This effect is useful
/// for making the source semi-transparent, similar to a fade-in/fade-out
/// sequence. The opacity can be modified using the setOpacity() function.
/// 
/// By default, the opacity is 0.7.
/// 
/// ![graphicseffect-opacity.png](graphicseffect-opacity.png)
/// 
/// **See also:** [`GraphicsDropShadowEffect`]
/// [`GraphicsBlurEffect`]
/// [`GraphicsColorizeEffect`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GraphicsOpacityEffect : GraphicsEffect {
    /// 
    /// The value should be in the range of 0.0 to 1.0, where 0.0 is
    /// fully transparent and 1.0 is fully opaque.
    /// 
    /// By default, the opacity is 0.7.
    /// 
    /// **See also:** [`set_opacity_mask()`]
    /// 
    /// This signal is emitted whenever the effect's opacity changes.
    /// The *opacity* parameter holds the effect's new opacity.
    /// 
    /// An opacity mask allows you apply opacity to portions of an element.
    /// 
    /// For example:
    /// 
    /// There is no opacity mask by default.
    /// 
    /// **See also:** [`set_opacity()`]
    /// 
    /// This signal is emitted whenever the effect's opacity mask changes.
    /// The *mask* parameter holds the effect's new opacity mask.
    opacity() -> f32,
    /// 
    /// An opacity mask allows you apply opacity to portions of an element.
    /// 
    /// For example:
    /// 
    /// There is no opacity mask by default.
    /// 
    /// **See also:** [`set_opacity()`]
    /// 
    /// This signal is emitted whenever the effect's opacity mask changes.
    /// The *mask* parameter holds the effect's new opacity mask.
    opacity_mask() -> Brush,
    set_opacity(opacity: f32),
    set_opacity_mask(mask: &BrushType),
    /// 
    /// This signal is emitted whenever the effect's opacity changes.
    /// The *opacity* parameter holds the effect's new opacity.
    [signal] opacity_changed(opacity: f32),
    /// 
    /// This signal is emitted whenever the effect's opacity mask changes.
    /// The *mask* parameter holds the effect's new opacity mask.
    [signal] opacity_mask_changed(mask: &BrushType),
    /// 
    [event] draw(painter: *PainterType),
}

// vim: syntax=rust expandtab ts=4 sw=4
