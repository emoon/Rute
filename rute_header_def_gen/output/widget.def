struct Widget : Object, PaintDevice {
    dev_type() -> i32,
    win_id() -> WId,
    create_win_id(),
    internal_win_id() -> WId,
    effective_win_id() -> WId,
    style() -> &StyleType,
    set_style(arg0: &StyleType),
    is_top_level() -> bool,
    is_window() -> bool,
    is_modal() -> bool,
    window_modality() -> Rute::WindowModality,
    set_window_modality(window_modality: Rute::WindowModality),
    is_enabled() -> bool,
    is_enabled_to(arg0: &WidgetType) -> bool,
    is_enabled_to_tlw() -> bool,
    set_enabled(arg0: bool),
    set_disabled(arg0: bool),
    set_window_modified(arg0: bool),
    x() -> i32,
    y() -> i32,
    pos() -> PointType,
    frame_size() -> SizeType,
    size() -> SizeType,
    width() -> i32,
    height() -> i32,
    rect() -> RectType,
    children_rect() -> RectType,
    children_region() -> RegionType,
    minimum_size() -> SizeType,
    maximum_size() -> SizeType,
    minimum_width() -> i32,
    minimum_height() -> i32,
    maximum_width() -> i32,
    maximum_height() -> i32,
    set_minimum_size(arg0: &SizeType),
    set_minimum_size(minw: i32, minh: i32),
    set_maximum_size(arg0: &SizeType),
    set_maximum_size(maxw: i32, maxh: i32),
    set_minimum_width(minw: i32),
    set_minimum_height(minh: i32),
    set_maximum_width(maxw: i32),
    set_maximum_height(maxh: i32),
    size_increment() -> SizeType,
    set_size_increment(arg0: &SizeType),
    set_size_increment(w: i32, h: i32),
    base_size() -> SizeType,
    set_base_size(arg0: &SizeType),
    set_base_size(basew: i32, baseh: i32),
    set_fixed_size(arg0: &SizeType),
    set_fixed_size(w: i32, h: i32),
    set_fixed_width(w: i32),
    set_fixed_height(h: i32),
    map_to_global(arg0: &PointType) -> PointType,
    map_from_global(arg0: &PointType) -> PointType,
    map_to_parent(arg0: &PointType) -> PointType,
    map_from_parent(arg0: &PointType) -> PointType,
    map_to(arg0: &WidgetType, arg1: &PointType) -> PointType,
    map_from(arg0: &WidgetType, arg1: &PointType) -> PointType,
    window() -> &WidgetType,
    native_parent_widget() -> &WidgetType,
    top_level_widget() -> &WidgetType,
    palette() -> &PaletteType,
    set_palette(arg0: &PaletteType),
    set_background_role(arg0: Palette::ColorRole),
    background_role() -> Palette::ColorRole,
    set_foreground_role(arg0: Palette::ColorRole),
    foreground_role() -> Palette::ColorRole,
    font() -> &FontType,
    set_font(arg0: &FontType),
    font_info() -> FontInfoType,
    cursor() -> CursorType,
    set_cursor(arg0: &CursorType),
    unset_cursor(),
    set_mouse_tracking(enable: bool),
    has_mouse_tracking() -> bool,
    under_mouse() -> bool,
    set_tablet_tracking(enable: bool),
    has_tablet_tracking() -> bool,
    set_mask(arg0: &BitmapType),
    set_mask(arg0: &RegionType),
    mask() -> RegionType,
    clear_mask(),
    render(target: &PaintDeviceType, target_offset: &PointType, source_region: &RegionType, render_flags: RenderFlags),
    render(painter: &PainterType, target_offset: &PointType, source_region: &RegionType, render_flags: RenderFlags),
    grab(rectangle: &RectType) -> PixmapType,
    graphics_effect() -> &GraphicsEffectType,
    set_graphics_effect(effect: &GraphicsEffectType),
    grab_gesture(type: Rute::GestureType, flags: Rute::GestureFlags),
    ungrab_gesture(type: Rute::GestureType),
    set_window_title(arg0: String),
    set_style_sheet(style_sheet: String),
    style_sheet() -> String,
    window_title() -> String,
    set_window_icon(icon: &IconType),
    window_icon() -> IconType,
    set_window_icon_text(arg0: String),
    window_icon_text() -> String,
    set_window_role(arg0: String),
    window_role() -> String,
    set_window_file_path(file_path: String),
    window_file_path() -> String,
    set_window_opacity(level: f32),
    window_opacity() -> f32,
    is_window_modified() -> bool,
    set_tool_tip(arg0: String),
    tool_tip() -> String,
    set_tool_tip_duration(msec: i32),
    tool_tip_duration() -> i32,
    set_status_tip(arg0: String),
    status_tip() -> String,
    set_whats_this(arg0: String),
    whats_this() -> String,
    accessible_name() -> String,
    set_accessible_name(name: String),
    accessible_description() -> String,
    set_accessible_description(description: String),
    set_layout_direction(direction: Rute::LayoutDirection),
    layout_direction() -> Rute::LayoutDirection,
    unset_layout_direction(),
    set_locale(locale: &LocaleType),
    locale() -> LocaleType,
    unset_locale(),
    is_right_to_left() -> bool,
    is_left_to_right() -> bool,
    set_focus(),
    is_active_window() -> bool,
    activate_window(),
    clear_focus(),
    set_focus(reason: Rute::FocusReason),
    focus_policy() -> Rute::FocusPolicy,
    set_focus_policy(policy: Rute::FocusPolicy),
    has_focus() -> bool,
    set_tab_order(arg0: &WidgetType, arg1: &WidgetType),
    set_focus_proxy(arg0: &WidgetType),
    focus_proxy() -> &WidgetType,
    context_menu_policy() -> Rute::ContextMenuPolicy,
    set_context_menu_policy(policy: Rute::ContextMenuPolicy),
    grab_mouse(),
    grab_mouse(arg0: &CursorType),
    release_mouse(),
    grab_keyboard(),
    release_keyboard(),
    grab_shortcut(key: &KeySequenceType, context: Rute::ShortcutContext) -> i32,
    release_shortcut(id: i32),
    set_shortcut_enabled(id: i32, enable: bool),
    set_shortcut_auto_repeat(id: i32, enable: bool),
    mouse_grabber() -> &WidgetType,
    keyboard_grabber() -> &WidgetType,
    updates_enabled() -> bool,
    set_updates_enabled(enable: bool),
    graphics_proxy_widget() -> &GraphicsProxyWidgetType,
    update(),
    repaint(),
    update(x: i32, y: i32, w: i32, h: i32),
    update(arg0: &RectType),
    update(arg0: &RegionType),
    repaint(x: i32, y: i32, w: i32, h: i32),
    repaint(arg0: &RectType),
    repaint(arg0: &RegionType),
    set_visible(visible: bool),
    set_hidden(hidden: bool),
    show(),
    hide(),
    show_minimized(),
    show_maximized(),
    show_full_screen(),
    show_normal(),
    close() -> bool,
    raise(),
    lower(),
    stack_under(arg0: &WidgetType),
    move(x: i32, y: i32),
    move(arg0: &PointType),
    resize(w: i32, h: i32),
    resize(arg0: &SizeType),
    adjust_size(),
    is_visible() -> bool,
    is_visible_to(arg0: &WidgetType) -> bool,
    is_hidden() -> bool,
    is_minimized() -> bool,
    is_maximized() -> bool,
    is_full_screen() -> bool,
    window_state() -> Rute::WindowStates,
    set_window_state(state: Rute::WindowStates),
    override_window_state(state: Rute::WindowStates),
    size_hint() -> SizeType,
    minimum_size_hint() -> SizeType,
    size_policy() -> SizePolicyType,
    set_size_policy(arg0: SizePolicyType),
    set_size_policy(horizontal: SizePolicy::Policy, vertical: SizePolicy::Policy),
    height_for_width(arg0: i32) -> i32,
    has_height_for_width() -> bool,
    visible_region() -> RegionType,
    set_contents_margins(left: i32, top: i32, right: i32, bottom: i32),
    set_contents_margins(margins: &MarginsType),
    get_contents_margins(left: &i32, top: &i32, right: &i32, bottom: &i32),
    contents_margins() -> MarginsType,
    contents_rect() -> RectType,
    layout() -> &LayoutType,
    set_layout(arg0: &LayoutType),
    set_parent(parent: &WidgetType),
    set_parent(parent: &WidgetType, f: Rute::WindowFlags),
    scroll(dx: i32, dy: i32),
    scroll(dx: i32, dy: i32, arg0: &RectType),
    focus_widget() -> &WidgetType,
    next_in_focus_chain() -> &WidgetType,
    previous_in_focus_chain() -> &WidgetType,
    accept_drops() -> bool,
    set_accept_drops(on: bool),
    add_action(action: &ActionType),
    add_actions(actions: [&ActionType]),
    insert_actions(before: &ActionType, actions: [&ActionType]),
    insert_action(before: &ActionType, action: &ActionType),
    remove_action(action: &ActionType),
    actions() -> [&ActionType],
    parent_widget() -> &WidgetType,
    set_window_flags(type: Rute::WindowFlags),
    window_flags() -> Rute::WindowFlags,
    set_window_flag(arg0: Rute::WindowType, on: bool),
    override_window_flags(type: Rute::WindowFlags),
    window_type() -> Rute::WindowType,
    find(arg0: WId) -> &WidgetType,
    child_at(x: i32, y: i32) -> &WidgetType,
    child_at(p: &PointType) -> &WidgetType,
    paint_engine() -> &PaintEngineType,
    ensure_polished(),
    is_ancestor_of(child: &WidgetType) -> bool,
    auto_fill_background() -> bool,
    set_auto_fill_background(enabled: bool),
    backing_store() -> &BackingStoreType,
    window_handle() -> &WindowType,
    create_window_container(window: &WindowType, parent: &WidgetType, flags: Rute::WindowFlags) -> &WidgetType,
    [callback] window_title_changed(title: String),
    [callback] window_icon_changed(icon: &IconType),
    [callback] window_icon_text_changed(icon_text: String),
    [callback] custom_context_menu_requested(pos: &PointType),
    event(event: &EventType) -> bool,
    mouse_press_event(event: &MouseEventType),
    mouse_release_event(event: &MouseEventType),
    mouse_double_click_event(event: &MouseEventType),
    mouse_move_event(event: &MouseEventType),
    wheel_event(event: &WheelEventType),
    key_press_event(event: &KeyEventType),
    key_release_event(event: &KeyEventType),
    focus_in_event(event: &FocusEventType),
    focus_out_event(event: &FocusEventType),
    enter_event(event: &EventType),
    leave_event(event: &EventType),
    paint_event(event: &PaintEventType),
    move_event(event: &MoveEventType),
    resize_event(event: &ResizeEventType),
    close_event(event: &CloseEventType),
    context_menu_event(event: &ContextMenuEventType),
    tablet_event(event: &TabletEventType),
    action_event(event: &ActionEventType),
    drag_enter_event(event: &DragEnterEventType),
    drag_move_event(event: &DragMoveEventType),
    drag_leave_event(event: &DragLeaveEventType),
    drop_event(event: &DropEventType),
    show_event(event: &ShowEventType),
    hide_event(event: &HideEventType),
    native_event(event_type: &ByteArrayType, message: &void, result: &long) -> bool,
    change_event(arg0: &EventType),
    init_painter(painter: &PainterType),
    redirected(offset: &PointType) -> &PaintDeviceType,
    shared_painter() -> &PainterType,
    input_method_event(arg0: &InputMethodEventType),
    input_method_query(arg0: Rute::InputMethodQuery) -> VariantType,
    input_method_hints() -> Rute::InputMethodHints,
    set_input_method_hints(hints: Rute::InputMethodHints),
    update_micro_focus(),
    create(arg0: WId, initialize_window: bool, destroy_old_window: bool),
    focus_next_prev_child(next: bool) -> bool,
    focus_next_child() -> bool,
    focus_previous_child() -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
