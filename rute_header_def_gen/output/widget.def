/// 
/// The widget is the atom of the user interface: it receives mouse, keyboard
/// and other events from the window system, and paints a representation of
/// itself on the screen. Every widget is rectangular, and they are sorted in a
/// Z-order. A widget is clipped by its parent and by the widgets in front of
/// it.
/// 
/// A widget that is not embedded in a parent widget is called a window.
/// Usually, windows have a frame and a title bar, although it is also possible
/// to create windows without such decoration using suitable
/// [window flags](Qt::WindowFlags)
/// ). In Qt, QMainWindow and the various
/// subclasses of QDialog are the most common window types.
/// 
/// Every widget's constructor accepts one or two standard arguments:
/// 
/// * `QWidget *parent = 0` is the parent of the new widget. If it is 0 (the default), the new widget will be a window. If not, it will be a child of *parent,* and be constrained by *parent's* geometry (unless you specify Qt::Window as window flag).
/// * `Qt::WindowFlags f = 0` (where available) sets the window flags; the default is suitable for almost all widgets, but to get, for example, a window without a window system frame, you must use special flags.
/// 
/// QWidget has many member functions, but some of them have little direct
/// functionality; for example, QWidget has a font property, but never uses
/// this itself. There are many subclasses which provide real functionality,
/// such as QLabel, QPushButton, QListWidget, and QTabWidget.
/// 
/// # Top-Level and Child Widgets
/// 
/// A widget without a parent widget is always an independent window (top-level
/// widget). For these widgets, setWindowTitle() and setWindowIcon() set the
/// title bar and icon respectively.
/// 
/// Non-window widgets are child widgets, displayed within their parent
/// widgets. Most widgets in Qt are mainly useful as child widgets. For
/// example, it is possible to display a button as a top-level window, but most
/// people prefer to put their buttons inside other widgets, such as QDialog.
/// 
/// ![A parent widget containing various child widgets.](parent-child-widgets.png)
/// 
/// The diagram above shows a QGroupBox widget being used to hold various child
/// widgets in a layout provided by QGridLayout. The QLabel child widgets have
/// been outlined to indicate their full sizes.
/// 
/// If you want to use a QWidget to hold child widgets you will usually want to
/// add a layout to the parent QWidget. See [Layout Management](Layout%20Management)
/// for more
/// information.
/// 
/// # Composite Widgets
/// 
/// When a widget is used as a container to group a number of child widgets, it
/// is known as a composite widget. These can be created by constructing a
/// widget with the required visual properties - a QFrame, for example - and
/// adding child widgets to it, usually managed by a layout. The above diagram
/// shows such a composite widget that was created using Qt Designer.
/// 
/// Composite widgets can also be created by subclassing a standard widget,
/// such as QWidget or QFrame, and adding the necessary layout and child
/// widgets in the constructor of the subclass. Many of the [examples provided with Qt](Qt%20Widgets%20Examples)
/// use this approach, and it is also covered in
/// the Qt [Tutorials](Tutorials)
/// 
/// 
/// # Custom Widgets and Painting
/// 
/// Since QWidget is a subclass of QPaintDevice, subclasses can be used to
/// display custom content that is composed using a series of painting
/// operations with an instance of the QPainter class. This approach contrasts
/// with the canvas-style approach used by the [Graphics View Framework](Graphics%20View)
/// where items are added to a scene by the
/// application and are rendered by the framework itself.
/// 
/// Each widget performs all painting operations from within its paintEvent()
/// function. This is called whenever the widget needs to be redrawn, either
/// as a result of some external change or when requested by the application.
/// 
/// The [Analog Clock example](widgets/analogclock)
/// shows how a simple widget
/// can handle paint events.
/// 
/// # Size Hints and Size Policies
/// 
/// When implementing a new widget, it is almost always useful to reimplement
/// sizeHint() to provide a reasonable default size for the widget and to set
/// the correct size policy with setSizePolicy().
/// 
/// By default, composite widgets which do not provide a size hint will be
/// sized according to the space requirements of their child widgets.
/// 
/// The size policy lets you supply good default behavior for the layout
/// management system, so that other widgets can contain and manage yours
/// easily. The default size policy indicates that the size hint represents
/// the preferred size of the widget, and this is often good enough for many
/// widgets.
/// 
/// **Note**: The size of top-level widgets are constrained to 2/3 of the desktop's
/// height and width. You can resize() the widget manually if these bounds are
/// inadequate.
/// 
/// # Events
/// 
/// Widgets respond to events that are typically caused by user actions. Qt
/// delivers events to widgets by calling specific event handler functions with
/// instances of QEvent subclasses containing information about each event.
/// 
/// If your widget only contains child widgets, you probably do not need to
/// implement any event handlers. If you want to detect a mouse click in a
/// child widget call the child's underMouse() function inside the widget's
/// mousePressEvent().
/// 
/// The [Scribble example](widgets/scribble)
/// implements a wider set of
/// events to handle mouse movement, button presses, and window resizing.
/// 
/// You will need to supply the behavior and content for your own widgets, but
/// here is a brief overview of the events that are relevant to QWidget,
/// starting with the most common ones:
/// 
/// * paintEvent() is called whenever the widget needs to be repainted. Every widget displaying custom content must implement it. Painting using a QPainter can only take place in a paintEvent() or a function called by a paintEvent().
/// * resizeEvent() is called when the widget has been resized.
/// * mousePressEvent() is called when a mouse button is pressed while the mouse cursor is inside the widget, or when the widget has grabbed the mouse using grabMouse(). Pressing the mouse without releasing it is effectively the same as calling grabMouse().
/// * mouseReleaseEvent() is called when a mouse button is released. A widget receives mouse release events when it has received the corresponding mouse press event. This means that if the user presses the mouse inside *your* widget, then drags the mouse somewhere else before releasing the mouse button, *your* widget receives the release event. There is one exception: if a popup menu appears while the mouse button is held down, this popup immediately steals the mouse events.
/// * mouseDoubleClickEvent() is called when the user double-clicks in the widget. If the user double-clicks, the widget receives a mouse press event, a mouse release event, (a mouse click event,) a second mouse press, this event and finally a second mouse release event. (Some mouse move events may also be received if the mouse is not held steady during this operation.) It is *not possible* to distinguish a click from a double-click until the second click arrives. (This is one reason why most GUI books recommend that double-clicks be an extension of single-clicks, rather than trigger a different action.)
/// 
/// Widgets that accept keyboard input need to reimplement a few more event
/// handlers:
/// 
/// * keyPressEvent() is called whenever a key is pressed, and again when a key has been held down long enough for it to auto-repeat. The **Tab** and **Shift+Tab** keys are only passed to the widget if they are not used by the focus-change mechanisms. To force those keys to be processed by your widget, you must reimplement QWidget::event().
/// * focusInEvent() is called when the widget gains keyboard focus (assuming you have called setFocusPolicy()). Well-behaved widgets indicate that they own the keyboard focus in a clear but discreet way.
/// * focusOutEvent() is called when the widget loses keyboard focus.
/// 
/// You may be required to also reimplement some of the less common event
/// handlers:
/// 
/// * mouseMoveEvent() is called whenever the mouse moves while a mouse button is held down. This can be useful during drag and drop operations. If you call [setMouseTracking](setMouseTracking())
/// (true), you get mouse move events even when no buttons are held down. (See also the [Drag and Drop](Drag%20and%20Drop)
/// guide.)
/// * keyReleaseEvent() is called whenever a key is released and while it is held down (if the key is auto-repeating). In that case, the widget will receive a pair of key release and key press event for every repeat. The **Tab** and **Shift+Tab** keys are only passed to the widget if they are not used by the focus-change mechanisms. To force those keys to be processed by your widget, you must reimplement QWidget::event().
/// * wheelEvent() is called whenever the user turns the mouse wheel while the widget has the focus.
/// * enterEvent() is called when the mouse enters the widget's screen space. (This excludes screen space owned by any of the widget's children.)
/// * leaveEvent() is called when the mouse leaves the widget's screen space. If the mouse enters a child widget it will not cause a leaveEvent().
/// * moveEvent() is called when the widget has been moved relative to its parent.
/// * closeEvent() is called when the user closes the widget (or when close() is called).
/// 
/// There are also some rather obscure events described in the documentation
/// for QEvent::Type. To handle these events, you need to reimplement event()
/// directly.
/// 
/// The default implementation of event() handles **Tab** and **Shift+Tab**
/// (to move the keyboard focus), and passes on most of the other events to
/// one of the more specialized handlers above.
/// 
/// Events and the mechanism used to deliver them are covered in
/// [The Event System](The%20Event%20System)
/// 
/// 
/// # Groups of Functions and Properties
/// 
/// * Context
/// * Functions and Properties
/// * Window functions
/// * show(), hide(), raise(), lower(), close().
/// * Top-level windows
/// * [windowModified,](windowModified,)
/// [windowTitle,](windowTitle,)
/// [windowIcon,](windowIcon,)
/// [isActiveWindow,](isActiveWindow,)
/// activateWindow(), [minimized,](minimized,)
/// showMinimized(), [maximized,](maximized,)
/// showMaximized(), [fullScreen,](fullScreen,)
/// showFullScreen(), showNormal().
/// * Window contents
/// * update(), repaint(), scroll().
/// * Geometry
/// * [pos,](pos,)
/// x(), y(), [rect,](rect,)
/// [size,](size,)
/// width(), height(), move(), resize(), [sizePolicy,](sizePolicy,)
/// sizeHint(), minimumSizeHint(), updateGeometry(), layout(), [frameGeometry,](frameGeometry,)
/// [geometry,](geometry,)
/// [childrenRect,](childrenRect,)
/// [childrenRegion,](childrenRegion,)
/// adjustSize(), mapFromGlobal(), mapToGlobal(), mapFromParent(), mapToParent(), [maximumSize,](maximumSize,)
/// [minimumSize,](minimumSize,)
/// [sizeIncrement,](sizeIncrement,)
/// [baseSize,](baseSize,)
/// setFixedSize()
/// * Mode
/// * [visible,](visible,)
/// isVisibleTo(), [enabled,](enabled,)
/// isEnabledTo(), [modal,](modal,)
/// isWindow(), [mouseTracking,](mouseTracking,)
/// [updatesEnabled,](updatesEnabled,)
/// visibleRegion().
/// * Look and feel
/// * style(), setStyle(), [styleSheet,](styleSheet,)
/// [cursor,](cursor,)
/// [font,](font,)
/// [palette,](palette,)
/// backgroundRole(), setBackgroundRole(), fontInfo(), fontMetrics().
/// * Keyboard focus functions
/// * [focus,](focus,)
/// [focusPolicy,](focusPolicy,)
/// setFocus(), clearFocus(), setTabOrder(), setFocusProxy(), focusNextChild(), focusPreviousChild().
/// * Mouse and keyboard grabbing
/// * grabMouse(), releaseMouse(), grabKeyboard(), releaseKeyboard(), mouseGrabber(), keyboardGrabber().
/// * Event handlers
/// * event(), mousePressEvent(), mouseReleaseEvent(), mouseDoubleClickEvent(), mouseMoveEvent(), keyPressEvent(), keyReleaseEvent(), focusInEvent(), focusOutEvent(), wheelEvent(), enterEvent(), leaveEvent(), paintEvent(), moveEvent(), resizeEvent(), closeEvent(), dragEnterEvent(), dragMoveEvent(), dragLeaveEvent(), dropEvent(), childEvent(), showEvent(), hideEvent(), customEvent(). changeEvent(),
/// * System functions
/// * parentWidget(), window(), setParent(), winId(), find(), metric().
/// * Context menu
/// * contextMenuPolicy, contextMenuEvent(), customContextMenuRequested(), actions()
/// * Interactive help
/// * setToolTip(), setWhatsThis()
/// 
/// # Widget Style Sheets
/// 
/// In addition to the standard widget styles for each platform, widgets can
/// also be styled according to rules specified in a [style sheet](styleSheet)
/// . This feature enables you to customize the appearance of
/// specific widgets to provide visual cues to users about their purpose. For
/// example, a button could be styled in a particular way to indicate that it
/// performs a destructive action.
/// 
/// The use of widget style sheets is described in more detail in the
/// [Qt Style Sheets](Qt%20Style%20Sheets)
/// document.
/// 
/// # Transparency and Double Buffering
/// 
/// Since Qt 4.0, QWidget automatically double-buffers its painting, so there
/// is no need to write double-buffering code in paintEvent() to avoid
/// flicker.
/// 
/// Since Qt 4.1, the Qt::WA_ContentsPropagated widget attribute has been
/// deprecated. Instead, the contents of parent widgets are propagated by
/// default to each of their children as long as Qt::WA_PaintOnScreen is not
/// set. Custom widgets can be written to take advantage of this feature by
/// updating irregular regions (to create non-rectangular child widgets), or
/// painting with colors that have less than full alpha component. The
/// following diagram shows how attributes and properties of a custom widget
/// can be fine-tuned to achieve different effects.
/// 
/// ![propagation-custom.png](propagation-custom.png)
/// 
/// In the above diagram, a semi-transparent rectangular child widget with an
/// area removed is constructed and added to a parent widget (a QLabel showing
/// a pixmap). Then, different properties and widget attributes are set to
/// achieve different effects:
/// 
/// * The left widget has no additional properties or widget attributes set. This default state suits most custom widgets using transparency, are irregularly-shaped, or do not paint over their entire area with an opaque brush.
/// * The center widget has the [autoFillBackground](autoFillBackground)
/// property set. This property is used with custom widgets that rely on the widget to supply a default background, and do not paint over their entire area with an opaque brush.
/// * The right widget has the Qt::WA_OpaquePaintEvent widget attribute set. This indicates that the widget will paint over its entire area with opaque colors. The widget's area will initially be *uninitialized* , represented in the diagram with a red diagonal grid pattern that shines through the overpainted area. The Qt::WA_OpaquePaintArea attribute is useful for widgets that need to paint their own specialized contents quickly and do not need a default filled background.
/// 
/// To rapidly update custom widgets with simple background colors, such as
/// real-time plotting or graphing widgets, it is better to define a suitable
/// background color (using setBackgroundRole() with the
/// QPalette::Window role), set the [autoFillBackground](autoFillBackground)
/// property, and only
/// implement the necessary drawing functionality in the widget's paintEvent().
/// 
/// To rapidly update custom widgets that constantly paint over their entire
/// areas with opaque content, e.g., video streaming widgets, it is better to
/// set the widget's Qt::WA_OpaquePaintEvent, avoiding any unnecessary overhead
/// associated with repainting the widget's background.
/// 
/// If a widget has both the Qt::WA_OpaquePaintEvent widget attribute *and*
/// the [autoFillBackground](autoFillBackground)
/// property set, the Qt::WA_OpaquePaintEvent
/// attribute takes precedence. Depending on your requirements, you should
/// choose either one of them.
/// 
/// Since Qt 4.1, the contents of parent widgets are also propagated to
/// standard Qt widgets. This can lead to some unexpected results if the
/// parent widget is decorated in a non-standard way, as shown in the diagram
/// below.
/// 
/// ![propagation-standard.png](propagation-standard.png)
/// 
/// The scope for customizing the painting behavior of standard Qt widgets,
/// without resorting to subclassing, is slightly less than that possible for
/// custom widgets. Usually, the desired appearance of a standard widget can be
/// achieved by setting its [autoFillBackground](autoFillBackground)
/// property.
/// 
/// # Creating Translucent Windows
/// 
/// Since Qt 4.5, it has been possible to create windows with translucent regions
/// on window systems that support compositing.
/// 
/// To enable this feature in a top-level widget, set its Qt::WA_TranslucentBackground
/// attribute with setAttribute() and ensure that its background is painted with
/// non-opaque colors in the regions you want to be partially transparent.
/// 
/// Platform notes:
/// 
/// * X11: This feature relies on the use of an X server that supports ARGB visuals and a compositing window manager.
/// * Windows: The widget needs to have the Qt::FramelessWindowHint window flag set for the translucency to work.
/// 
/// # Native Widgets vs Alien Widgets
/// 
/// Introduced in Qt 4.4, alien widgets are widgets unknown to the windowing
/// system. They do not have a native window handle associated with them. This
/// feature significantly speeds up widget painting, resizing, and removes flicker.
/// 
/// Should you require the old behavior with native windows, you can choose
/// one of the following options:
/// 
/// * Use the `QT_USE_NATIVE_WINDOWS=1` in your environment.
/// * Set the Qt::AA_NativeWindows attribute on your application. All widgets will be native widgets.
/// * Set the Qt::WA_NativeWindow attribute on widgets: The widget itself and all of its ancestors will become native (unless Qt::WA_DontCreateNativeAncestors is set).
/// * Call QWidget::winId to enforce a native window (this implies 3).
/// * Set the Qt::WA_PaintOnScreen attribute to enforce a native window (this implies 3).
/// 
/// **See also:** QEvent
/// QPainter
/// QGridLayout
/// QBoxLayout
/// 
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QWidget)]
enum RenderFlag {
    DrawWindowBackground,
    DrawChildren,
    IgnoreMask,
}

struct Widget : Object, PaintDevice {
    [event] dev_type() -> i32,
    /// 
    /// Returns the window system identifier of the widget.
    /// 
    /// Portable in principle, but if you use it you are probably about to
    /// do something non-portable. Be careful.
    /// 
    /// If a widget is non-native (alien) and winId() is invoked on it, that widget
    /// will be provided a native handle.
    /// 
    /// This value may change at run-time. An event with type QEvent::WinIdChange
    /// will be sent to the widget following a change in window system identifier.
    /// 
    /// **See also:** find()
    win_id() -> WId,
    create_win_id(),
    internal_win_id() -> WId,
    /// 
    /// Returns the effective window system identifier of the widget, i.e. the
    /// native parent's window system identifier.
    /// 
    /// If the widget is native, this function returns the native widget ID.
    /// Otherwise, the window ID of the first native parent widget, i.e., the
    /// top-level widget that contains this widget, is returned.
    /// 
    /// **Note**: We recommend that you do not store this value as it is likely to
    /// change at run-time.
    /// 
    /// **See also:** nativeParentWidget()
    effective_win_id() -> WId,
    /// 
    /// The style sheet contains a textual description of customizations to the
    /// widget's style, as described in the [Qt Style Sheets](Qt%20Style%20Sheets)
    /// document.
    /// 
    /// Since Qt 4.5, Qt style sheets fully supports MacOS .
    /// 
    /// **Warning**: Qt style sheets are currently not supported for custom QStyle
    /// subclasses. We plan to address this in some future release.
    /// 
    /// **See also:** setStyle()
    /// QApplication::styleSheet
    /// {Qt Style Sheets}
    /// 
    /// **See also:** QWidget::setStyle()
    /// QApplication::setStyle()
    /// QApplication::style()
    style() -> Style?,
    /// 
    /// Sets the widget's GUI style to *style.* The ownership of the style
    /// object is not transferred.
    /// 
    /// If no style is set, the widget uses the application's style,
    /// QApplication::style() instead.
    /// 
    /// Setting a widget's style has no effect on existing or future child
    /// widgets.
    /// 
    /// **Warning**: This function is particularly useful for demonstration
    /// purposes, where you want to show Qt's styling capabilities. Real
    /// applications should avoid it and use one consistent GUI style
    /// instead.
    /// 
    /// **Warning**: Qt style sheets are currently not supported for custom QStyle
    /// subclasses. We plan to address this in some future release.
    /// 
    /// **See also:** style()
    /// QStyle
    /// QApplication::style()
    /// QApplication::setStyle()
    set_style(arg0: *StyleType),
    /// 
    /// Use isWindow() instead.
    is_top_level() -> bool,
    /// 
    /// Returns `true` if the widget is an independent window, otherwise
    /// returns `false.`
    /// 
    /// A window is a widget that isn't visually the child of any other
    /// widget and that usually has a frame and a
    /// [window title](QWidget::setWindowTitle())
    /// 
    /// 
    /// A window can have a [parent widget](QWidget::parentWidget())
    /// 
    /// It will then be grouped with its parent and deleted when the
    /// parent is deleted, minimized when the parent is minimized etc. If
    /// supported by the window manager, it will also have a common
    /// taskbar entry with its parent.
    /// 
    /// QDialog and QMainWindow widgets are by default windows, even if a
    /// parent widget is specified in the constructor. This behavior is
    /// specified by the Qt::Window flag.
    /// 
    /// **See also:** window()
    /// isModal()
    /// parentWidget()
    is_window() -> bool,
    is_modal() -> bool,
    /// 
    /// This property only makes sense for windows. A modal widget
    /// prevents widgets in other windows from getting input. The value of
    /// this property controls which windows are blocked when the widget
    /// is visible. Changing this property while the window is visible has
    /// no effect; you must hide() the widget first, then show() it again.
    /// 
    /// By default, this property is Qt::NonModal.
    /// 
    /// **See also:** isWindow()
    /// QWidget::modal
    /// QDialog
    window_modality() -> Rute::WindowModality,
    set_window_modality(window_modality: Rute::WindowModality),
    /// 
    /// Returns `true` if this widget would become enabled if *ancestor* is
    /// enabled; otherwise returns `false.`
    /// 
    /// This is the case if neither the widget itself nor every parent up
    /// to but excluding *ancestor* has been explicitly disabled.
    /// 
    /// isEnabledTo(0) returns false if this widget or any if its ancestors
    /// was explicitly disabled.
    /// 
    /// The word ancestor here means a parent widget within the same window.
    /// 
    /// Therefore isEnabledTo(0) stops at this widget's window, unlike
    /// isEnabled() which also takes parent windows into considerations.
    /// 
    /// **See also:** setEnabled()
    /// enabled
    /// 
    /// This function is deprecated. It is equivalent to isEnabled()
    is_enabled() -> bool,
    /// 
    /// Returns `true` if this widget would become enabled if *ancestor* is
    /// enabled; otherwise returns `false.`
    /// 
    /// This is the case if neither the widget itself nor every parent up
    /// to but excluding *ancestor* has been explicitly disabled.
    /// 
    /// isEnabledTo(0) returns false if this widget or any if its ancestors
    /// was explicitly disabled.
    /// 
    /// The word ancestor here means a parent widget within the same window.
    /// 
    /// Therefore isEnabledTo(0) stops at this widget's window, unlike
    /// isEnabled() which also takes parent windows into considerations.
    /// 
    /// **See also:** setEnabled()
    /// enabled
    /// 
    /// This function is deprecated. It is equivalent to isEnabled()
    is_enabled_to(arg0: *WidgetType) -> bool,
    /// 
    /// This function is deprecated. It is equivalent to isEnabled()
    is_enabled_to_tlw() -> bool,
    set_enabled(arg0: bool),
    /// 
    /// Disables widget input events if *disable* is true; otherwise
    /// enables input events.
    /// 
    /// See the [enabled](enabled)
    /// documentation for more information.
    /// 
    /// **See also:** isEnabledTo()
    /// QKeyEvent
    /// QMouseEvent
    /// changeEvent()
    set_disabled(arg0: bool),
    set_window_modified(arg0: bool),
    /// 
    /// See the [Window Geometry](Window%20Geometry)
    /// documentation for an overview of geometry
    /// issues with windows.
    /// 
    /// By default, this property has a value of 0.
    /// 
    /// **See also:** frameGeometry
    /// 
    /// pos
    x() -> i32,
    /// 
    /// See the [Window Geometry](Window%20Geometry)
    /// documentation for an overview of geometry
    /// issues with windows.
    /// 
    /// By default, this property has a value of 0.
    /// 
    /// **See also:** frameGeometry
    /// 
    /// pos
    y() -> i32,
    /// 
    /// If the widget is a window, the position is that of the widget on
    /// the desktop, including its frame.
    /// 
    /// When changing the position, the widget, if visible, receives a
    /// move event (moveEvent()) immediately. If the widget is not
    /// currently visible, it is guaranteed to receive an event before it
    /// is shown.
    /// 
    /// By default, this property contains a position that refers to the
    /// origin.
    /// 
    /// **Warning**: Calling move() or setGeometry() inside moveEvent() can
    /// lead to infinite recursion.
    /// 
    /// See the [Window Geometry](Window%20Geometry)
    /// documentation for an overview of geometry
    /// issues with windows.
    /// 
    /// **See also:** frameGeometry
    /// size
    /// x()
    /// y()
    pos() -> Point,
    /// 
    /// By default, this property contains a value that depends on the user's
    /// platform and screen geometry.
    frame_size() -> Size,
    /// 
    /// If the widget is visible when it is being resized, it receives a resize event
    /// (resizeEvent()) immediately. If the widget is not currently
    /// visible, it is guaranteed to receive an event before it is shown.
    /// 
    /// The size is adjusted if it lies outside the range defined by
    /// minimumSize() and maximumSize().
    /// 
    /// By default, this property contains a value that depends on the user's
    /// platform and screen geometry.
    /// 
    /// **Warning**: Calling resize() or setGeometry() inside resizeEvent() can
    /// lead to infinite recursion.
    /// 
    /// **Note**: Setting the size to `QSize(0, 0)` will cause the widget to not
    /// appear on screen. This also applies to windows.
    /// 
    /// **See also:** pos
    /// geometry
    /// minimumSize
    /// maximumSize
    /// resizeEvent()
    /// adjustSize()
    /// 
    /// When the user resizes the window, the size will move in steps of
    /// sizeIncrement().width() pixels horizontally and
    /// sizeIncrement.height() pixels vertically, with baseSize() as the
    /// basis. Preferred widget sizes are for non-negative integers *i*
    /// and *j:*
    /// 
    /// Note that while you can set the size increment for all widgets, it
    /// only affects windows.
    /// 
    /// By default, this property contains a size with zero width and height.
    /// 
    /// **Warning**: The size increment has no effect under Windows, and may
    /// be disregarded by the window manager on X11.
    /// 
    /// **See also:** size
    /// minimumSize
    /// maximumSize
    /// 
    /// If the value of this property is an invalid size, no size is
    /// recommended.
    /// 
    /// The default implementation of sizeHint() returns an invalid size
    /// if there is no layout for this widget, and returns the layout's
    /// preferred size otherwise.
    /// 
    /// **See also:** QSize::isValid()
    /// minimumSizeHint()
    /// sizePolicy()
    /// setMinimumSize()
    /// updateGeometry()
    /// 
    /// If there is a QLayout that manages this widget's children, the
    /// size policy specified by that layout is used. If there is no such
    /// QLayout, the result of this function is used.
    /// 
    /// The default policy is Preferred/Preferred, which means that the
    /// widget can be freely resized, but prefers to be the size
    /// sizeHint() returns. Button-like widgets set the size policy to
    /// specify that they may stretch horizontally, but are fixed
    /// vertically. The same applies to lineedit controls (such as
    /// QLineEdit, QSpinBox or an editable QComboBox) and other
    /// horizontally orientated widgets (such as QProgressBar).
    /// QToolButton's are normally square, so they allow growth in both
    /// directions. Widgets that support different directions (such as
    /// QSlider, QScrollBar or QHeader) specify stretching in the
    /// respective direction only. Widgets that can provide scroll bars
    /// (usually subclasses of QScrollArea) tend to specify that they can
    /// use additional space, and that they can make do with less than
    /// sizeHint().
    /// 
    /// **See also:** sizeHint()
    /// QLayout
    /// QSizePolicy
    /// updateGeometry()
    size() -> Size,
    /// 
    /// See the [Window Geometry](Window%20Geometry)
    /// documentation for an overview of geometry
    /// issues with windows.
    /// 
    /// **Note**: Do not use this function to find the width of a screen on
    /// a [multiple screen desktop](QDesktopWidget)
    /// . Read
    /// [this note](QDesktopWidget%23Screen%20Geometry)
    /// for details.
    /// 
    /// By default, this property contains a value that depends on the user's
    /// platform and screen geometry.
    /// 
    /// **See also:** geometry
    /// height
    /// size
    width() -> i32,
    /// 
    /// See the [Window Geometry](Window%20Geometry)
    /// documentation for an overview of geometry
    /// issues with windows.
    /// 
    /// **Note**: Do not use this function to find the height of a screen
    /// on a [multiple screen desktop](QDesktopWidget)
    /// . Read
    /// [this note](QDesktopWidget%23Screen%20Geometry)
    /// for details.
    /// 
    /// By default, this property contains a value that depends on the user's
    /// platform and screen geometry.
    /// 
    /// **See also:** geometry
    /// width
    /// size
    /// 
    /// Returns the preferred height for this widget, given the width *w.*
    /// 
    /// If this widget has a layout, the default implementation returns
    /// the layout's preferred height. if there is no layout, the default
    /// implementation returns -1 indicating that the preferred height
    /// does not depend on the width.
    height() -> i32,
    /// 
    /// The rect property equals QRect(0, 0, width(), height()).
    /// 
    /// See the [Window Geometry](Window%20Geometry)
    /// documentation for an overview of geometry
    /// issues with windows.
    /// 
    /// By default, this property contains a value that depends on the user's
    /// platform and screen geometry.
    /// 
    /// **See also:** size
    rect() -> Rect,
    /// 
    /// Hidden children are excluded.
    /// 
    /// By default, for a widget with no children, this property contains a
    /// rectangle with zero width and height located at the origin.
    /// 
    /// **See also:** childrenRegion()
    /// geometry()
    children_rect() -> Rect,
    /// 
    /// Hidden children are excluded.
    /// 
    /// By default, for a widget with no children, this property contains an
    /// empty region.
    /// 
    /// **See also:** childrenRect()
    /// geometry()
    /// mask()
    children_region() -> Region,
    /// 
    /// The widget cannot be resized to a smaller size than the minimum
    /// widget size. The widget's size is forced to the minimum size if
    /// the current size is smaller.
    /// 
    /// The minimum size set by this function will override the minimum size
    /// defined by QLayout. In order to unset the minimum size, use a
    /// value of `QSize(0, 0)` .
    /// 
    /// By default, this property contains a size with zero width and height.
    /// 
    /// **See also:** minimumWidth
    /// minimumHeight
    /// maximumSize
    /// sizeIncrement
    /// 
    /// If the value of this property is an invalid size, no minimum size
    /// is recommended.
    /// 
    /// The default implementation of minimumSizeHint() returns an invalid
    /// size if there is no layout for this widget, and returns the
    /// layout's minimum size otherwise. Most built-in widgets reimplement
    /// minimumSizeHint().
    /// 
    /// [QLayout](QLayout)
    /// will never resize a widget to a size smaller than the
    /// minimum size hint unless minimumSize() is set or the size policy is
    /// set to QSizePolicy::Ignore. If minimumSize() is set, the minimum
    /// size hint will be ignored.
    /// 
    /// **See also:** QSize::isValid()
    /// resize()
    /// setMinimumSize()
    /// sizePolicy()
    minimum_size() -> Size,
    /// 
    /// The widget cannot be resized to a larger size than the maximum
    /// widget size.
    /// 
    /// By default, this property contains a size in which both width and height
    /// have values of 16777215.
    /// 
    /// **Note**: The definition of the `QWIDGETSIZE_MAX` macro limits the maximum size
    /// of widgets.
    /// 
    /// **See also:** maximumWidth
    /// maximumHeight
    /// minimumSize
    /// sizeIncrement
    maximum_size() -> Size,
    /// 
    /// This property corresponds to the width held by the [minimumSize](minimumSize)
    /// property.
    /// 
    /// By default, this property has a value of 0.
    /// 
    /// **See also:** minimumSize
    /// minimumHeight
    minimum_width() -> i32,
    /// 
    /// This property corresponds to the height held by the [minimumSize](minimumSize)
    /// property.
    /// 
    /// By default, this property has a value of 0.
    /// 
    /// **See also:** minimumSize
    /// minimumWidth
    minimum_height() -> i32,
    /// 
    /// This property corresponds to the width held by the [maximumSize](maximumSize)
    /// property.
    /// 
    /// By default, this property contains a value of 16777215.
    /// 
    /// **Note**: The definition of the `QWIDGETSIZE_MAX` macro limits the maximum size
    /// of widgets.
    /// 
    /// **See also:** maximumSize
    /// maximumHeight
    maximum_width() -> i32,
    /// 
    /// This property corresponds to the height held by the [maximumSize](maximumSize)
    /// property.
    /// 
    /// By default, this property contains a value of 16777215.
    /// 
    /// **Note**: The definition of the `QWIDGETSIZE_MAX` macro limits the maximum size
    /// of widgets.
    /// 
    /// **See also:** maximumSize
    /// maximumWidth
    maximum_height() -> i32,
    /// 
    /// **Overloads**
    /// This function corresponds to setMinimumSize(QSize(minw, minh)).
    /// Sets the minimum width to *minw* and the minimum height to *minh.*
    set_minimum_size(arg0: &SizeType),
    /// 
    /// **Overloads**
    /// This function corresponds to setMinimumSize(QSize(minw, minh)).
    /// Sets the minimum width to *minw* and the minimum height to *minh.*
    set_minimum_size(minw: i32, minh: i32),
    /// 
    /// **Overloads**
    /// This function corresponds to setMaximumSize(QSize( *maxw,* *maxh)).* Sets the maximum width to *maxw* and the maximum height
    /// to *maxh.*
    set_maximum_size(arg0: &SizeType),
    /// 
    /// **Overloads**
    /// This function corresponds to setMaximumSize(QSize( *maxw,* *maxh)).* Sets the maximum width to *maxw* and the maximum height
    /// to *maxh.*
    set_maximum_size(maxw: i32, maxh: i32),
    set_minimum_width(minw: i32),
    set_minimum_height(minh: i32),
    set_maximum_width(maxw: i32),
    set_maximum_height(maxh: i32),
    /// 
    /// When the user resizes the window, the size will move in steps of
    /// sizeIncrement().width() pixels horizontally and
    /// sizeIncrement.height() pixels vertically, with baseSize() as the
    /// basis. Preferred widget sizes are for non-negative integers *i*
    /// and *j:*
    /// 
    /// Note that while you can set the size increment for all widgets, it
    /// only affects windows.
    /// 
    /// By default, this property contains a size with zero width and height.
    /// 
    /// **Warning**: The size increment has no effect under Windows, and may
    /// be disregarded by the window manager on X11.
    /// 
    /// **See also:** size
    /// minimumSize
    /// maximumSize
    size_increment() -> Size,
    /// 
    /// **Overloads**
    /// Sets the x (width) size increment to *w* and the y (height) size
    /// increment to *h.*
    set_size_increment(arg0: &SizeType),
    /// 
    /// **Overloads**
    /// Sets the x (width) size increment to *w* and the y (height) size
    /// increment to *h.*
    set_size_increment(w: i32, h: i32),
    /// 
    /// The base size is used to calculate a proper widget size if the
    /// widget defines sizeIncrement().
    /// 
    /// By default, for a newly-created widget, this property contains a size with
    /// zero width and height.
    /// 
    /// **See also:** setSizeIncrement()
    base_size() -> Size,
    /// 
    /// **Overloads**
    /// This corresponds to setBaseSize(QSize( *basew,* *baseh)).* Sets
    /// the widgets base size to width *basew* and height *baseh.*
    set_base_size(arg0: &SizeType),
    /// 
    /// **Overloads**
    /// This corresponds to setBaseSize(QSize( *basew,* *baseh)).* Sets
    /// the widgets base size to width *basew* and height *baseh.*
    set_base_size(basew: i32, baseh: i32),
    /// 
    /// Sets both the minimum and maximum sizes of the widget to *s,*
    /// thereby preventing it from ever growing or shrinking.
    /// 
    /// This will override the default size constraints set by QLayout.
    /// 
    /// To remove constraints, set the size to QWIDGETSIZE_MAX.
    /// 
    /// Alternatively, if you want the widget to have a
    /// fixed size based on its contents, you can call
    /// QLayout::setSizeConstraint(QLayout::SetFixedSize);
    /// 
    /// **See also:** maximumSize
    /// minimumSize
    /// 
    /// **Overloads**
    /// Sets the width of the widget to *w* and the height to *h.*
    set_fixed_size(arg0: &SizeType),
    /// 
    /// Sets both the minimum and maximum sizes of the widget to *s,*
    /// thereby preventing it from ever growing or shrinking.
    /// 
    /// This will override the default size constraints set by QLayout.
    /// 
    /// To remove constraints, set the size to QWIDGETSIZE_MAX.
    /// 
    /// Alternatively, if you want the widget to have a
    /// fixed size based on its contents, you can call
    /// QLayout::setSizeConstraint(QLayout::SetFixedSize);
    /// 
    /// **See also:** maximumSize
    /// minimumSize
    /// 
    /// **Overloads**
    /// Sets the width of the widget to *w* and the height to *h.*
    set_fixed_size(w: i32, h: i32),
    /// 
    /// Sets both the minimum and maximum width of the widget to *w*
    /// without changing the heights. Provided for convenience.
    /// 
    /// **See also:** sizeHint()
    /// minimumSize()
    /// maximumSize()
    /// setFixedSize()
    set_fixed_width(w: i32),
    /// 
    /// Sets both the minimum and maximum heights of the widget to *h*
    /// without changing the widths. Provided for convenience.
    /// 
    /// **See also:** sizeHint()
    /// minimumSize()
    /// maximumSize()
    /// setFixedSize()
    set_fixed_height(h: i32),
    /// 
    /// Translates the widget coordinate *pos* to global screen
    /// coordinates. For example, `mapToGlobal(QPoint(0,0))` would give
    /// the global coordinates of the top-left pixel of the widget.
    /// 
    /// **See also:** mapFromGlobal()
    /// mapTo()
    /// mapToParent()
    map_to_global(arg0: &PointType) -> Point,
    /// 
    /// Translates the global screen coordinate *pos* to widget
    /// coordinates.
    /// 
    /// **See also:** mapToGlobal()
    /// mapFrom()
    /// mapFromParent()
    map_from_global(arg0: &PointType) -> Point,
    /// 
    /// Translates the widget coordinate *pos* to a coordinate in the
    /// parent widget.
    /// 
    /// Same as mapToGlobal() if the widget has no parent.
    /// 
    /// **See also:** mapFromParent()
    /// mapTo()
    /// mapToGlobal()
    /// underMouse()
    map_to_parent(arg0: &PointType) -> Point,
    /// 
    /// Translates the parent widget coordinate *pos* to widget
    /// coordinates.
    /// 
    /// Same as mapFromGlobal() if the widget has no parent.
    /// 
    /// **See also:** mapToParent()
    /// mapFrom()
    /// mapFromGlobal()
    /// underMouse()
    map_from_parent(arg0: &PointType) -> Point,
    /// 
    /// Translates the widget coordinate *pos* to the coordinate system
    /// of *parent.* The *parent* must not be 0 and must be a parent
    /// of the calling widget.
    /// 
    /// **See also:** mapFrom()
    /// mapToParent()
    /// mapToGlobal()
    /// underMouse()
    /// 
    /// Translates the widget coordinate *pos* to a coordinate in the
    /// parent widget.
    /// 
    /// Same as mapToGlobal() if the widget has no parent.
    /// 
    /// **See also:** mapFromParent()
    /// mapTo()
    /// mapToGlobal()
    /// underMouse()
    /// 
    /// Translates the widget coordinate *pos* to global screen
    /// coordinates. For example, `mapToGlobal(QPoint(0,0))` would give
    /// the global coordinates of the top-left pixel of the widget.
    /// 
    /// **See also:** mapFromGlobal()
    /// mapTo()
    /// mapToParent()
    map_to(arg0: *WidgetType, arg1: &PointType) -> Point,
    /// 
    /// Translates the widget coordinate *pos* from the coordinate system
    /// of *parent* to this widget's coordinate system. The *parent*
    /// must not be 0 and must be a parent of the calling widget.
    /// 
    /// **See also:** mapTo()
    /// mapFromParent()
    /// mapFromGlobal()
    /// underMouse()
    /// 
    /// Translates the parent widget coordinate *pos* to widget
    /// coordinates.
    /// 
    /// Same as mapFromGlobal() if the widget has no parent.
    /// 
    /// **See also:** mapToParent()
    /// mapFrom()
    /// mapFromGlobal()
    /// underMouse()
    /// 
    /// Translates the global screen coordinate *pos* to widget
    /// coordinates.
    /// 
    /// **See also:** mapToGlobal()
    /// mapFrom()
    /// mapFromParent()
    map_from(arg0: *WidgetType, arg1: &PointType) -> Point,
    /// 
    /// If this is a native widget, return the associated QWindow.
    /// Otherwise return null.
    /// 
    /// Native widgets include toplevel widgets, QGLWidget, and child widgets
    /// on which winId() was called.
    /// 
    /// **See also:** winId()
    /// 
    /// This property only makes sense for windows. A modal widget
    /// prevents widgets in other windows from getting input. The value of
    /// this property controls which windows are blocked when the widget
    /// is visible. Changing this property while the window is visible has
    /// no effect; you must hide() the widget first, then show() it again.
    /// 
    /// By default, this property is Qt::NonModal.
    /// 
    /// **See also:** isWindow()
    /// QWidget::modal
    /// QDialog
    /// 
    /// Returns the current window state. The window state is a OR'ed
    /// combination of Qt::WindowState: Qt::WindowMinimized,
    /// Qt::WindowMaximized, Qt::WindowFullScreen, and Qt::WindowActive.
    /// 
    /// **See also:** Qt::WindowState
    /// setWindowState()
    /// 
    /// Returns the window for this widget, i.e. the next ancestor widget
    /// that has (or could have) a window-system frame.
    /// 
    /// If the widget is a window, the widget itself is returned.
    /// 
    /// Typical usage is changing the window title:
    /// 
    /// **See also:** isWindow()
    /// 
    /// This property only makes sense for top-level widgets, such as
    /// windows and dialogs. If no caption has been set, the title is based of the
    /// [windowFilePath.](windowFilePath.)
    /// If neither of these is set, then the title is
    /// an empty string.
    /// 
    /// If you use the [windowModified](windowModified)
    /// mechanism, the window title must
    /// contain a placeholder, which indicates where the '*' should
    /// appear. Normally, it should appear right after the file name
    /// (e.g., ). If the [windowModified](windowModified)
    /// property is `false` (the default), the placeholder
    /// is simply removed.
    /// 
    /// On some desktop platforms (including Windows and Unix), the application name
    /// (from QGuiApplication::applicationDisplayName) is added at the end of the
    /// window title, if set. This is done by the QPA plugin, so it is shown to the
    /// user, but isn't part of the windowTitle string.
    /// 
    /// **See also:** windowIcon
    /// windowModified
    /// windowFilePath
    /// 
    /// This signal is emitted when the window's icon text has changed, with the
    /// new *iconText* as an argument.
    /// 
    /// This signal is deprecated.
    /// 
    /// This signal is emitted when the window's title has changed, with the
    /// new *title* as an argument.
    /// 
    /// 
    /// This property only makes sense for windows. If no icon
    /// has been set, windowIcon() returns the application icon
    /// (QApplication::windowIcon()).
    /// 
    /// **See also:** windowTitle
    /// 
    /// This signal is emitted when the window's icon has changed, with the
    /// new *icon* as an argument.
    /// 
    /// 
    /// This property only makes sense for windows. If no icon
    /// text has been set, this accessor returns an empty string.
    /// It is only implemented on the X11 platform, and only certain
    /// window managers use this window property.
    /// 
    /// This property is deprecated.
    /// 
    /// **See also:** windowIcon
    /// windowTitle
    /// 
    /// This property only makes sense for windows. It associates a file path with
    /// a window. If you set the file path, but have not set the window title, Qt
    /// sets the window title to the file name of the specified path, obtained using
    /// QFileInfo::fileName().
    /// 
    /// If the window title is set at any point, then the window title takes precedence and
    /// will be shown instead of the file path string.
    /// 
    /// Additionally, on MacOS , this has an added benefit that it sets the
    /// [proxy icon](http://developer.apple.com/documentation/UserExperience/Conceptual/OSXHIGuidelines/XHIGWindows/chapter_17_section_3.html)
    /// 
    /// for the window, assuming that the file path exists.
    /// 
    /// If no file path is set, this property contains an empty string.
    /// 
    /// By default, this property contains an empty string.
    /// 
    /// **See also:** windowTitle
    /// windowIcon
    /// 
    /// Returns the window's role, or an empty string.
    /// 
    /// **See also:** windowIcon
    /// windowTitle
    /// 
    /// Window flags are a combination of a type (e.g. Qt::Dialog) and
    /// zero or more hints to the window system (e.g.
    /// Qt::FramelessWindowHint).
    /// 
    /// If the widget had type Qt::Widget or Qt::SubWindow and becomes a
    /// window (Qt::Window, Qt::Dialog, etc.), it is put at position (0,
    /// 0) on the desktop. If the widget is a window and becomes a
    /// Qt::Widget or Qt::SubWindow, it is put at position (0, 0)
    /// relative to its parent widget.
    /// 
    /// **Note**: This function calls setParent() when changing the flags for
    /// a window, causing the widget to be hidden. You must call show() to make
    /// the widget visible again..
    /// 
    /// **See also:** windowType()
    /// setWindowFlag()
    /// {Window Flags Example}
    /// 
    /// Returns the window type of this widget. This is identical to
    /// windowFlags() & Qt::WindowType_Mask.
    /// 
    /// **See also:** windowFlags
    /// 
    /// The valid range of opacity is from 1.0 (completely opaque) to
    /// 0.0 (completely transparent).
    /// 
    /// By default the value of this property is 1.0.
    /// 
    /// This feature is available on Embedded Linux, MacOS , Windows,
    /// and X11 platforms that support the Composite extension.
    /// 
    /// **Note**: On X11 you need to have a composite manager running,
    /// and the X11 specific _NET_WM_WINDOW_OPACITY atom needs to be
    /// supported by the window manager you are using.
    /// 
    /// **Warning**: Changing this property from opaque to transparent might issue a
    /// paint event that needs to be processed before the window is displayed
    /// correctly. This affects mainly the use of QPixmap::grabWindow(). Also note
    /// that semi-transparent windows update and resize significantly slower than
    /// opaque windows.
    /// 
    /// **See also:** setMask()
    /// 
    /// A modified window is a window whose content has changed but has
    /// not been saved to disk. This flag will have different effects
    /// varied by the platform. On MacOS the close button will have a
    /// modified look; on other platforms, the window title will have an
    /// '*' (asterisk).
    /// 
    /// The window title must contain a placeholder, which
    /// indicates where the '*' should appear. Normally, it should appear
    /// right after the file name (e.g., ). If the window isn't modified, the placeholder is simply
    /// removed.
    /// 
    /// Note that if a widget is set as modified, all its ancestors will
    /// also be set as modified. However, if you call `setWindowModified(false)` on a widget, this will not propagate to
    /// its parent because other children of the parent might have been
    /// modified.
    /// 
    /// **See also:** windowTitle
    /// {Application Example}
    /// {SDI Example}
    /// {MDI Example}
    window() -> Widget?,
    /// 
    /// Returns the native parent for this widget, i.e. the next ancestor widget
    /// that has a system identifier, or 0 if it does not have any native parent.
    /// 
    /// **See also:** effectiveWinId()
    native_parent_widget() -> Widget?,
    /// 
    /// Use window() instead.
    top_level_widget() -> Widget?,
    /// 
    /// This property describes the widget's palette. The palette is used by the
    /// widget's style when rendering standard components, and is available as a
    /// means to ensure that custom widgets can maintain consistency with the
    /// native platform's look and feel. It's common that different platforms, or
    /// different styles, have different palettes.
    /// 
    /// When you assign a new palette to a widget, the color roles from this
    /// palette are combined with the widget's default palette to form the
    /// widget's final palette. The palette entry for the widget's background role
    /// is used to fill the widget's background (see QWidget::autoFillBackground),
    /// and the foreground role initializes QPainter's pen.
    /// 
    /// The default depends on the system environment. QApplication maintains a
    /// system/theme palette which serves as a default for all widgets. There may
    /// also be special palette defaults for certain types of widgets (e.g., on
    /// Windows Vista, all classes that derive from QMenuBar have a special
    /// default palette). You can also define default palettes for widgets
    /// yourself by passing a custom palette and the name of a widget to
    /// QApplication::setPalette(). Finally, the style always has the option of
    /// polishing the palette as it's assigned (see QStyle::polish()).
    /// 
    /// QWidget propagates explicit palette roles from parent to child. If you
    /// assign a brush or color to a specific role on a palette and assign that
    /// palette to a widget, that role will propagate to all the widget's
    /// children, overriding any system defaults for that role. Note that palettes
    /// by default don't propagate to windows (see isWindow()) unless the
    /// Qt::WA_WindowPropagation attribute is enabled.
    /// 
    /// QWidget's palette propagation is similar to its font propagation.
    /// 
    /// The current style, which is used to render the content of all standard Qt
    /// widgets, is free to choose colors and brushes from the widget palette, or
    /// in some cases, to ignore the palette (partially, or completely). In
    /// particular, certain styles like GTK style, Mac style, and Windows Vista
    /// style, depend on third party APIs to render the content of widgets,
    /// and these styles typically do not follow the palette. Because of this,
    /// assigning roles to a widget's palette is not guaranteed to change the
    /// appearance of the widget. Instead, you may choose to apply a [styleSheet.](styleSheet.)
    /// You can refer to our Knowledge Base article
    /// [here](http://qt.nokia.com/developer/knowledgebase/22)
    /// for more
    /// information.
    /// 
    /// **Warning**: Do not use this function in conjunction with [Qt Style Sheets](Qt%20Style%20Sheets)
    /// 
    /// When using style sheets, the palette of a widget can be customized using
    /// the , , ,
    /// and .
    /// 
    /// **See also:** QApplication::palette()
    /// QWidget::font()
    palette() -> Palette?,
    set_palette(arg0: &PaletteType),
    /// 
    /// Sets the background role of the widget to *role.*
    /// 
    /// The background role defines the brush from the widget's [palette](palette)
    /// that
    /// is used to render the background.
    /// 
    /// If *role* is QPalette::NoRole, then the widget inherits its
    /// parent's background role.
    /// 
    /// Note that styles are free to choose any color from the palette.
    /// You can modify the palette or set a style sheet if you don't
    /// achieve the result you want with setBackgroundRole().
    /// 
    /// **See also:** backgroundRole()
    /// foregroundRole()
    set_background_role(arg0: Palette::ColorRole),
    /// 
    /// Returns the background role of the widget.
    /// 
    /// The background role defines the brush from the widget's [palette](palette)
    /// that
    /// is used to render the background.
    /// 
    /// If no explicit background role is set, the widget inherts its parent
    /// widget's background role.
    /// 
    /// **See also:** setBackgroundRole()
    /// foregroundRole()
    background_role() -> Palette::ColorRole,
    /// 
    /// Sets the foreground role of the widget to *role.*
    /// 
    /// The foreground role defines the color from the widget's [palette](palette)
    /// that
    /// is used to draw the foreground.
    /// 
    /// If *role* is QPalette::NoRole, the widget uses a foreground role
    /// that contrasts with the background role.
    /// 
    /// Note that styles are free to choose any color from the palette.
    /// You can modify the palette or set a style sheet if you don't
    /// achieve the result you want with setForegroundRole().
    /// 
    /// **See also:** foregroundRole()
    /// backgroundRole()
    set_foreground_role(arg0: Palette::ColorRole),
    /// 
    /// Returns the foreground role.
    /// 
    /// The foreground role defines the color from the widget's [palette](palette)
    /// that
    /// is used to draw the foreground.
    /// 
    /// If no explicit foreground role is set, the function returns a role
    /// that contrasts with the background role.
    /// 
    /// **See also:** setForegroundRole()
    /// backgroundRole()
    foreground_role() -> Palette::ColorRole,
    /// 
    /// This property describes the widget's requested font. The font is used by
    /// the widget's style when rendering standard components, and is available as
    /// a means to ensure that custom widgets can maintain consistency with the
    /// native platform's look and feel. It's common that different platforms, or
    /// different styles, define different fonts for an application.
    /// 
    /// When you assign a new font to a widget, the properties from this font are
    /// combined with the widget's default font to form the widget's final
    /// font. You can call fontInfo() to get a copy of the widget's final
    /// font. The final font is also used to initialize QPainter's font.
    /// 
    /// The default depends on the system environment. QApplication maintains a
    /// system/theme font which serves as a default for all widgets. There may
    /// also be special font defaults for certain types of widgets. You can also
    /// define default fonts for widgets yourself by passing a custom font and the
    /// name of a widget to QApplication::setFont(). Finally, the font is matched
    /// against Qt's font database to find the best match.
    /// 
    /// QWidget propagates explicit font properties from parent to child. If you
    /// change a specific property on a font and assign that font to a widget,
    /// that property will propagate to all the widget's children, overriding any
    /// system defaults for that property. Note that fonts by default don't
    /// propagate to windows (see isWindow()) unless the Qt::WA_WindowPropagation
    /// attribute is enabled.
    /// 
    /// QWidget's font propagation is similar to its palette propagation.
    /// 
    /// The current style, which is used to render the content of all standard Qt
    /// widgets, is free to choose to use the widget font, or in some cases, to
    /// ignore it (partially, or completely). In particular, certain styles like
    /// GTK style, Mac style, and Windows Vista style, apply special
    /// modifications to the widget font to match the platform's native look and
    /// feel. Because of this, assigning properties to a widget's font is not
    /// guaranteed to change the appearance of the widget. Instead, you may choose
    /// to apply a [styleSheet.](styleSheet.)
    /// 
    /// **Note**: If [Qt Style Sheets](Qt%20Style%20Sheets)
    /// are used on the same widget as setFont(),
    /// style sheets will take precedence if the settings conflict.
    /// 
    /// **See also:** fontInfo()
    /// fontMetrics()
    /// 
    /// Returns the font metrics for the widget's current font.
    /// Equivalent to `QFontMetrics(widget->font()).`
    /// 
    /// **See also:** font()
    /// fontInfo()
    /// setFont()
    /// 
    /// Returns the font info for the widget's current font.
    /// Equivalent to `QFontInfo(widget->font()).`
    /// 
    /// **See also:** font()
    /// fontMetrics()
    /// setFont()
    font() -> Font?,
    set_font(arg0: &FontType),
    /// 
    /// Returns the font info for the widget's current font.
    /// Equivalent to `QFontInfo(widget->font()).`
    /// 
    /// **See also:** font()
    /// fontMetrics()
    /// setFont()
    font_info() -> FontInfo,
    /// 
    /// The mouse cursor will assume this shape when it's over this
    /// widget. See the [list of predefined cursor objects](Qt::CursorShape)
    /// for a range of useful shapes.
    /// 
    /// An editor widget might use an I-beam cursor:
    /// 
    /// If no cursor has been set, or after a call to unsetCursor(), the
    /// parent's cursor is used.
    /// 
    /// By default, this property contains a cursor with the Qt::ArrowCursor
    /// shape.
    /// 
    /// Some underlying window implementations will reset the cursor if it
    /// leaves a widget even if the mouse is grabbed. If you want to have
    /// a cursor set for all widgets, even when outside the window, consider
    /// QApplication::setOverrideCursor().
    /// 
    /// **See also:** QApplication::setOverrideCursor()
    cursor() -> Cursor,
    set_cursor(arg0: &CursorType),
    unset_cursor(),
    set_mouse_tracking(enable: bool),
    has_mouse_tracking() -> bool,
    /// 
    /// Returns `true` if the widget is under the mouse cursor; otherwise
    /// returns `false.`
    /// 
    /// This value is not updated properly during drag and drop
    /// operations.
    /// 
    /// **See also:** enterEvent()
    /// leaveEvent()
    under_mouse() -> bool,
    set_tablet_tracking(enable: bool),
    has_tablet_tracking() -> bool,
    /// 
    /// **Overloads**
    /// Causes only the parts of the widget which overlap *region* to be
    /// visible. If the region includes pixels outside the rect() of the
    /// widget, window system controls in that area may or may not be
    /// visible, depending on the platform.
    /// 
    /// Note that this effect can be slow if the region is particularly
    /// complex.
    /// 
    /// **See also:** windowOpacity
    /// 
    /// Causes only the pixels of the widget for which *bitmap* has a
    /// corresponding 1 bit to be visible. If the region includes pixels
    /// outside the rect() of the widget, window system controls in that
    /// area may or may not be visible, depending on the platform.
    /// 
    /// Note that this effect can be slow if the region is particularly
    /// complex.
    /// 
    /// The following code shows how an image with an alpha channel can be
    /// used to generate a mask for a widget:
    /// 
    /// The label shown by this code is masked using the image it contains,
    /// giving the appearance that an irregularly-shaped image is being drawn
    /// directly onto the screen.
    /// 
    /// Masked widgets receive mouse events only on their visible
    /// portions.
    /// 
    /// **See also:** clearMask()
    /// windowOpacity()
    /// {Shaped Clock Example}
    set_mask(arg0: &BitmapType),
    /// 
    /// **Overloads**
    /// Causes only the parts of the widget which overlap *region* to be
    /// visible. If the region includes pixels outside the rect() of the
    /// widget, window system controls in that area may or may not be
    /// visible, depending on the platform.
    /// 
    /// Note that this effect can be slow if the region is particularly
    /// complex.
    /// 
    /// **See also:** windowOpacity
    /// 
    /// Causes only the pixels of the widget for which *bitmap* has a
    /// corresponding 1 bit to be visible. If the region includes pixels
    /// outside the rect() of the widget, window system controls in that
    /// area may or may not be visible, depending on the platform.
    /// 
    /// Note that this effect can be slow if the region is particularly
    /// complex.
    /// 
    /// The following code shows how an image with an alpha channel can be
    /// used to generate a mask for a widget:
    /// 
    /// The label shown by this code is masked using the image it contains,
    /// giving the appearance that an irregularly-shaped image is being drawn
    /// directly onto the screen.
    /// 
    /// Masked widgets receive mouse events only on their visible
    /// portions.
    /// 
    /// **See also:** clearMask()
    /// windowOpacity()
    /// {Shaped Clock Example}
    set_mask(arg0: &RegionType),
    /// 
    /// Returns the mask currently set on a widget. If no mask is set the
    /// return value will be an empty region.
    /// 
    /// **See also:** setMask()
    /// clearMask()
    /// QRegion::isEmpty()
    /// {Shaped Clock Example}
    mask() -> Region,
    /// 
    /// Removes any mask set by setMask().
    /// 
    /// **See also:** setMask()
    clear_mask(),
    /// 
    /// Renders the *sourceRegion* of this widget into the *target*
    /// using *renderFlags* to determine how to render. Rendering
    /// starts at *targetOffset* in the *target.* For example:
    /// 
    /// If *sourceRegion* is a null region, this function will use QWidget::rect() as
    /// the region, i.e. the entire widget.
    /// 
    /// Ensure that you call QPainter::end() for the *target* device's
    /// active painter (if any) before rendering. For example:
    /// 
    /// **Note**: To obtain the contents of a QOpenGLWidget, use QOpenGLWidget::grabFramebuffer()
    /// instead.
    /// 
    /// **Note**: To obtain the contents of a QGLWidget (deprecated), use
    /// QGLWidget::grabFrameBuffer() or QGLWidget::renderPixmap() instead.
    /// 
    /// **Overloads**
    /// Renders the widget into the *painter's* QPainter::device().
    /// 
    /// Transformations and settings applied to the *painter* will be used
    /// when rendering.
    /// 
    /// **Note**: The *painter* must be active. On MacOS the widget will be
    /// rendered into a QPixmap and then drawn by the *painter.*
    /// 
    /// **See also:** QPainter::device()
    render(target: *PaintDeviceType, target_offset: &PointType, source_region: &RegionType, render_flags: Widget::RenderFlags),
    /// 
    /// Renders the *sourceRegion* of this widget into the *target*
    /// using *renderFlags* to determine how to render. Rendering
    /// starts at *targetOffset* in the *target.* For example:
    /// 
    /// If *sourceRegion* is a null region, this function will use QWidget::rect() as
    /// the region, i.e. the entire widget.
    /// 
    /// Ensure that you call QPainter::end() for the *target* device's
    /// active painter (if any) before rendering. For example:
    /// 
    /// **Note**: To obtain the contents of a QOpenGLWidget, use QOpenGLWidget::grabFramebuffer()
    /// instead.
    /// 
    /// **Note**: To obtain the contents of a QGLWidget (deprecated), use
    /// QGLWidget::grabFrameBuffer() or QGLWidget::renderPixmap() instead.
    /// 
    /// **Overloads**
    /// Renders the widget into the *painter's* QPainter::device().
    /// 
    /// Transformations and settings applied to the *painter* will be used
    /// when rendering.
    /// 
    /// **Note**: The *painter* must be active. On MacOS the widget will be
    /// rendered into a QPixmap and then drawn by the *painter.*
    /// 
    /// **See also:** QPainter::device()
    render(painter: *PainterType, target_offset: &PointType, source_region: &RegionType, render_flags: Widget::RenderFlags),
    /// 
    /// Renders the widget into a pixmap restricted by the
    /// given *rectangle.* If the widget has any children, then
    /// they are also painted in the appropriate positions.
    /// 
    /// If a rectangle with an invalid size is specified (the default),
    /// the entire widget is painted.
    /// 
    /// **See also:** render()
    /// QPixmap
    /// 
    /// Adds a shortcut to Qt's shortcut system that watches for the given
    /// *key* sequence in the given *context.* If the *context* is
    /// Qt::ApplicationShortcut, the shortcut applies to the application as a
    /// whole. Otherwise, it is either local to this widget, Qt::WidgetShortcut,
    /// or to the window itself, Qt::WindowShortcut.
    /// 
    /// If the same *key* sequence has been grabbed by several widgets,
    /// when the *key* sequence occurs a QEvent::Shortcut event is sent
    /// to all the widgets to which it applies in a non-deterministic
    /// order, but with the ``ambiguous'' flag set to true.
    /// 
    /// **Warning**: You should not normally need to use this function;
    /// instead create [QAction](QAction)
    /// s with the shortcut key sequences you
    /// require (if you also want equivalent menu options and toolbar
    /// buttons), or create [QShortcut](QShortcut)
    /// s if you just need key sequences.
    /// Both QAction and QShortcut handle all the event filtering for you,
    /// and provide signals which are triggered when the user triggers the
    /// key sequence, so are much easier to use than this low-level
    /// function.
    /// 
    /// **See also:** releaseShortcut()
    /// setShortcutEnabled()
    /// 
    /// Subscribes the widget to a given *gesture* with specific *flags.*
    /// 
    /// **See also:** ungrabGesture()
    /// QGestureEvent
    /// 
    /// Grabs the mouse input.
    /// 
    /// This widget receives all mouse events until releaseMouse() is
    /// called; other widgets get no mouse events at all. Keyboard
    /// events are not affected. Use grabKeyboard() if you want to grab
    /// that.
    /// 
    /// **Warning**: Bugs in mouse-grabbing applications very often lock the
    /// terminal. Use this function with extreme caution, and consider
    /// using the `-nograb` command line option while debugging.
    /// 
    /// It is almost never necessary to grab the mouse when using Qt, as
    /// Qt grabs and releases it sensibly. In particular, Qt grabs the
    /// mouse when a mouse button is pressed and keeps it until the last
    /// button is released.
    /// 
    /// **Note**: Only visible widgets can grab mouse input. If isVisible()
    /// returns `false` for a widget, that widget cannot call grabMouse().
    /// 
    /// **Note**: On Windows, grabMouse() only works when the mouse is inside a window
    /// owned by the process.
    /// On MacOS , grabMouse() only works when the mouse is inside the frame of that widget.
    /// 
    /// **See also:** releaseMouse()
    /// grabKeyboard()
    /// releaseKeyboard()
    /// 
    /// **Overloads** grabMouse()
    /// Grabs the mouse input and changes the cursor shape.
    /// 
    /// The cursor will assume shape *cursor* (for as long as the mouse
    /// focus is grabbed) and this widget will be the only one to receive
    /// mouse events until releaseMouse() is called().
    /// 
    /// **Warning**: Grabbing the mouse might lock the terminal.
    /// 
    /// **Note**: See the note in QWidget::grabMouse().
    /// 
    /// **See also:** releaseMouse()
    /// grabKeyboard()
    /// releaseKeyboard()
    /// setCursor()
    /// 
    /// Grabs the keyboard input.
    /// 
    /// This widget receives all keyboard events until releaseKeyboard()
    /// is called; other widgets get no keyboard events at all. Mouse
    /// events are not affected. Use grabMouse() if you want to grab that.
    /// 
    /// The focus widget is not affected, except that it doesn't receive
    /// any keyboard events. setFocus() moves the focus as usual, but the
    /// new focus widget receives keyboard events only after
    /// releaseKeyboard() is called.
    /// 
    /// If a different widget is currently grabbing keyboard input, that
    /// widget's grab is released first.
    /// 
    /// **See also:** releaseKeyboard()
    /// grabMouse()
    /// releaseMouse()
    /// focusWidget()
    grab(rectangle: &RectType) -> Pixmap,
    graphics_effect() -> GraphicsEffect?,
    set_graphics_effect(effect: *GraphicsEffectType),
    /// 
    /// Subscribes the widget to a given *gesture* with specific *flags.*
    /// 
    /// **See also:** ungrabGesture()
    /// QGestureEvent
    grab_gesture(type: Rute::GestureType, flags: Rute::GestureFlags),
    /// 
    /// Unsubscribes the widget from a given *gesture* type
    /// 
    /// **See also:** grabGesture()
    /// QGestureEvent
    ungrab_gesture(type: Rute::GestureType),
    set_window_title(arg0: String),
    set_style_sheet(style_sheet: String),
    /// 
    /// The style sheet contains a textual description of customizations to the
    /// widget's style, as described in the [Qt Style Sheets](Qt%20Style%20Sheets)
    /// document.
    /// 
    /// Since Qt 4.5, Qt style sheets fully supports MacOS .
    /// 
    /// **Warning**: Qt style sheets are currently not supported for custom QStyle
    /// subclasses. We plan to address this in some future release.
    /// 
    /// **See also:** setStyle()
    /// QApplication::styleSheet
    /// {Qt Style Sheets}
    style_sheet() -> String,
    /// 
    /// This property only makes sense for top-level widgets, such as
    /// windows and dialogs. If no caption has been set, the title is based of the
    /// [windowFilePath.](windowFilePath.)
    /// If neither of these is set, then the title is
    /// an empty string.
    /// 
    /// If you use the [windowModified](windowModified)
    /// mechanism, the window title must
    /// contain a placeholder, which indicates where the '*' should
    /// appear. Normally, it should appear right after the file name
    /// (e.g., ). If the [windowModified](windowModified)
    /// property is `false` (the default), the placeholder
    /// is simply removed.
    /// 
    /// On some desktop platforms (including Windows and Unix), the application name
    /// (from QGuiApplication::applicationDisplayName) is added at the end of the
    /// window title, if set. This is done by the QPA plugin, so it is shown to the
    /// user, but isn't part of the windowTitle string.
    /// 
    /// **See also:** windowIcon
    /// windowModified
    /// windowFilePath
    /// 
    /// This signal is emitted when the window's title has changed, with the
    /// new *title* as an argument.
    /// 
    window_title() -> String,
    set_window_icon(icon: &IconType),
    /// 
    /// This signal is emitted when the window's icon text has changed, with the
    /// new *iconText* as an argument.
    /// 
    /// This signal is deprecated.
    /// 
    /// This property only makes sense for windows. If no icon
    /// has been set, windowIcon() returns the application icon
    /// (QApplication::windowIcon()).
    /// 
    /// **See also:** windowTitle
    /// 
    /// This signal is emitted when the window's icon has changed, with the
    /// new *icon* as an argument.
    /// 
    /// 
    /// This property only makes sense for windows. If no icon
    /// text has been set, this accessor returns an empty string.
    /// It is only implemented on the X11 platform, and only certain
    /// window managers use this window property.
    /// 
    /// This property is deprecated.
    /// 
    /// **See also:** windowIcon
    /// windowTitle
    window_icon() -> Icon,
    set_window_icon_text(arg0: String),
    /// 
    /// This signal is emitted when the window's icon text has changed, with the
    /// new *iconText* as an argument.
    /// 
    /// This signal is deprecated.
    /// 
    /// This property only makes sense for windows. If no icon
    /// text has been set, this accessor returns an empty string.
    /// It is only implemented on the X11 platform, and only certain
    /// window managers use this window property.
    /// 
    /// This property is deprecated.
    /// 
    /// **See also:** windowIcon
    /// windowTitle
    window_icon_text() -> String,
    /// 
    /// Sets the window's role to *role.* This only makes sense for
    /// windows on X11.
    set_window_role(arg0: String),
    /// 
    /// Returns the window's role, or an empty string.
    /// 
    /// **See also:** windowIcon
    /// windowTitle
    window_role() -> String,
    set_window_file_path(file_path: String),
    /// 
    /// This property only makes sense for windows. It associates a file path with
    /// a window. If you set the file path, but have not set the window title, Qt
    /// sets the window title to the file name of the specified path, obtained using
    /// QFileInfo::fileName().
    /// 
    /// If the window title is set at any point, then the window title takes precedence and
    /// will be shown instead of the file path string.
    /// 
    /// Additionally, on MacOS , this has an added benefit that it sets the
    /// [proxy icon](http://developer.apple.com/documentation/UserExperience/Conceptual/OSXHIGuidelines/XHIGWindows/chapter_17_section_3.html)
    /// 
    /// for the window, assuming that the file path exists.
    /// 
    /// If no file path is set, this property contains an empty string.
    /// 
    /// By default, this property contains an empty string.
    /// 
    /// **See also:** windowTitle
    /// windowIcon
    window_file_path() -> String,
    set_window_opacity(level: f32),
    /// 
    /// The valid range of opacity is from 1.0 (completely opaque) to
    /// 0.0 (completely transparent).
    /// 
    /// By default the value of this property is 1.0.
    /// 
    /// This feature is available on Embedded Linux, MacOS , Windows,
    /// and X11 platforms that support the Composite extension.
    /// 
    /// **Note**: On X11 you need to have a composite manager running,
    /// and the X11 specific _NET_WM_WINDOW_OPACITY atom needs to be
    /// supported by the window manager you are using.
    /// 
    /// **Warning**: Changing this property from opaque to transparent might issue a
    /// paint event that needs to be processed before the window is displayed
    /// correctly. This affects mainly the use of QPixmap::grabWindow(). Also note
    /// that semi-transparent windows update and resize significantly slower than
    /// opaque windows.
    /// 
    /// **See also:** setMask()
    window_opacity() -> f32,
    is_window_modified() -> bool,
    set_tool_tip(arg0: String),
    /// 
    /// Note that by default tooltips are only shown for widgets that are
    /// children of the active window. You can change this behavior by
    /// setting the attribute Qt::WA_AlwaysShowToolTips on the *window,*
    /// not on the widget with the tooltip.
    /// 
    /// If you want to control a tooltip's behavior, you can intercept the
    /// event() function and catch the QEvent::ToolTip event (e.g., if you
    /// want to customize the area for which the tooltip should be shown).
    /// 
    /// By default, this property contains an empty string.
    /// 
    /// **See also:** QToolTip
    /// statusTip
    /// whatsThis
    /// 
    /// Specifies how long time the tooltip will be displayed, in milliseconds.
    /// If the value is -1 (default) the duration is calculated depending on the length of the tooltip.
    /// 
    /// **See also:** toolTip
    tool_tip() -> String,
    set_tool_tip_duration(msec: i32),
    /// 
    /// Specifies how long time the tooltip will be displayed, in milliseconds.
    /// If the value is -1 (default) the duration is calculated depending on the length of the tooltip.
    /// 
    /// **See also:** toolTip
    tool_tip_duration() -> i32,
    set_status_tip(arg0: String),
    /// 
    /// By default, this property contains an empty string.
    /// 
    /// **See also:** toolTip
    /// whatsThis
    status_tip() -> String,
    set_whats_this(arg0: String),
    /// 
    /// By default, this property contains an empty string.
    /// 
    /// **See also:** QWhatsThis
    /// QWidget::toolTip
    /// QWidget::statusTip
    whats_this() -> String,
    /// 
    /// This is the primary name by which assistive technology such as screen readers
    /// announce this widget. For most widgets setting this property is not required.
    /// For example for QPushButton the button's text will be used.
    /// 
    /// It is important to set this property when the widget does not provide any
    /// text. For example a button that only contains an icon needs to set this
    /// property to work with screen readers.
    /// The name should be short and equivalent to the visual information conveyed
    /// by the widget.
    /// 
    /// This property has to be [localized](Internationalization%20with%20Qt)
    /// 
    /// 
    /// By default, this property contains an empty string.
    /// 
    /// **See also:** QWidget::accessibleDescription
    /// QAccessibleInterface::text()
    accessible_name() -> String,
    set_accessible_name(name: String),
    /// 
    /// The accessible description of a widget should convey what a widget does.
    /// While the [accessibleName](accessibleName)
    /// should be a short and consise string (e.g. **Save** ),
    /// the description should give more context, such as **Saves the current document** .
    /// 
    /// This property has to be [localized](Internationalization%20with%20Qt)
    /// 
    /// 
    /// By default, this property contains an empty string and Qt falls back
    /// to using the tool tip to provide this information.
    /// 
    /// **See also:** QWidget::accessibleName
    /// QAccessibleInterface::text()
    accessible_description() -> String,
    set_accessible_description(description: String),
    set_layout_direction(direction: Rute::LayoutDirection),
    /// 
    /// By default, this property is set to Qt::LeftToRight.
    /// 
    /// When the layout direction is set on a widget, it will propagate to
    /// the widget's children, but not to a child that is a window and not
    /// to a child for which setLayoutDirection() has been explicitly
    /// called. Also, child widgets added *after* setLayoutDirection()
    /// has been called for the parent do not inherit the parent's layout
    /// direction.
    /// 
    /// This method no longer affects text layout direction since Qt 4.7.
    /// 
    /// **See also:** QApplication::layoutDirection
    layout_direction() -> Rute::LayoutDirection,
    unset_layout_direction(),
    set_locale(locale: &LocaleType),
    /// 
    /// As long as no special locale has been set, this is either
    /// the parent's locale or (if this widget is a top level widget),
    /// the default locale.
    /// 
    /// If the widget displays dates or numbers, these should be formatted
    /// using the widget's locale.
    /// 
    /// **See also:** QLocale
    /// QLocale::setDefault()
    locale() -> Locale,
    unset_locale(),
    is_right_to_left() -> bool,
    is_left_to_right() -> bool,
    /// 
    /// Sets the widget's focus proxy to widget *w.* If *w* is 0, the
    /// function resets this widget to have no focus proxy.
    /// 
    /// Some widgets can , but create a child widget, such as
    /// QLineEdit, to actually handle the focus. In this case, the widget
    /// can set the line edit to be its focus proxy.
    /// 
    /// setFocusProxy() sets the widget which will actually get focus when
    /// gets it. If there is a focus proxy, setFocus() and
    /// hasFocus() operate on the focus proxy.
    /// 
    /// **See also:** focusProxy()
    /// 
    /// Gives the keyboard input focus to this widget (or its focus
    /// proxy) if this widget or one of its parents is the [active window](isActiveWindow())
    /// . The *reason* argument will
    /// be passed into any focus event sent from this function, it is used
    /// to give an explanation of what caused the widget to get focus.
    /// If the window is not active, the widget will be given the focus when
    /// the window becomes active.
    /// 
    /// First, a focus about to change event is sent to the focus widget (if any) to
    /// tell it that it is about to lose the focus. Then focus is changed, a
    /// focus out event is sent to the previous focus item and a focus in event is sent
    /// to the new item to tell it that it just received the focus.
    /// (Nothing happens if the focus in and focus out widgets are the
    /// same.)
    /// 
    /// **Note**: On embedded platforms, setFocus() will not cause an input panel
    /// to be opened by the input method. If you want this to happen, you
    /// have to send a QEvent::RequestSoftwareInputPanel event to the
    /// widget yourself.
    /// 
    /// setFocus() gives focus to a widget regardless of its focus policy,
    /// but does not clear any keyboard grab (see grabKeyboard()).
    /// 
    /// Be aware that if the widget is hidden, it will not accept focus
    /// until it is shown.
    /// 
    /// **Warning**: If you call setFocus() in a function which may itself be
    /// called from focusOutEvent() or focusInEvent(), you may get an
    /// infinite recursion.
    /// 
    /// **See also:** hasFocus()
    /// clearFocus()
    /// focusInEvent()
    /// focusOutEvent()
    /// setFocusPolicy()
    /// focusWidget()
    /// QApplication::focusWidget()
    /// grabKeyboard()
    /// grabMouse()
    /// {Keyboard Focus in Widgets}
    /// QEvent::RequestSoftwareInputPanel
    /// 
    /// **Overloads**
    /// Gives the keyboard input focus to this widget (or its focus
    /// proxy) if this widget or one of its parents is the
    /// [active window](isActiveWindow())
    /// 
    set_focus(),
    /// 
    /// The active window is the window that contains the widget that has
    /// keyboard focus (The window may still have focus if it has no
    /// widgets or none of its widgets accepts keyboard focus).
    /// 
    /// When popup windows are visible, this property is `true` for both the
    /// active window *and* for the popup.
    /// 
    /// By default, this property is `false.`
    /// 
    /// **See also:** activateWindow()
    /// QApplication::activeWindow()
    is_active_window() -> bool,
    /// 
    /// Sets the top-level widget containing this widget to be the active
    /// window.
    /// 
    /// An active window is a visible top-level window that has the
    /// keyboard input focus.
    /// 
    /// This function performs the same operation as clicking the mouse on
    /// the title bar of a top-level window. On X11, the result depends on
    /// the Window Manager. If you want to ensure that the window is
    /// stacked on top as well you should also call raise(). Note that the
    /// window must be visible, otherwise activateWindow() has no effect.
    /// 
    /// On Windows, if you are calling this when the application is not
    /// currently the active one then it will not make it the active
    /// window. It will change the color of the taskbar entry to indicate
    /// that the window has changed in some way. This is because Microsoft
    /// does not allow an application to interrupt what the user is currently
    /// doing in another application.
    /// 
    /// **See also:** isActiveWindow()
    /// window()
    /// show()
    /// QWindowsWindowFunctions::setWindowActivationBehavior()
    activate_window(),
    /// 
    /// Takes keyboard input focus from the widget.
    /// 
    /// If the widget has active focus, a [focus out event](focusOutEvent())
    /// is sent to this widget to tell it that it has
    /// lost the focus.
    /// 
    /// This widget must enable focus setting in order to get the keyboard
    /// input focus, i.e. it must call setFocusPolicy().
    /// 
    /// **See also:** hasFocus()
    /// setFocus()
    /// focusInEvent()
    /// focusOutEvent()
    /// setFocusPolicy()
    /// QApplication::focusWidget()
    clear_focus(),
    /// 
    /// Sets the widget's focus proxy to widget *w.* If *w* is 0, the
    /// function resets this widget to have no focus proxy.
    /// 
    /// Some widgets can , but create a child widget, such as
    /// QLineEdit, to actually handle the focus. In this case, the widget
    /// can set the line edit to be its focus proxy.
    /// 
    /// setFocusProxy() sets the widget which will actually get focus when
    /// gets it. If there is a focus proxy, setFocus() and
    /// hasFocus() operate on the focus proxy.
    /// 
    /// **See also:** focusProxy()
    /// 
    /// Gives the keyboard input focus to this widget (or its focus
    /// proxy) if this widget or one of its parents is the [active window](isActiveWindow())
    /// . The *reason* argument will
    /// be passed into any focus event sent from this function, it is used
    /// to give an explanation of what caused the widget to get focus.
    /// If the window is not active, the widget will be given the focus when
    /// the window becomes active.
    /// 
    /// First, a focus about to change event is sent to the focus widget (if any) to
    /// tell it that it is about to lose the focus. Then focus is changed, a
    /// focus out event is sent to the previous focus item and a focus in event is sent
    /// to the new item to tell it that it just received the focus.
    /// (Nothing happens if the focus in and focus out widgets are the
    /// same.)
    /// 
    /// **Note**: On embedded platforms, setFocus() will not cause an input panel
    /// to be opened by the input method. If you want this to happen, you
    /// have to send a QEvent::RequestSoftwareInputPanel event to the
    /// widget yourself.
    /// 
    /// setFocus() gives focus to a widget regardless of its focus policy,
    /// but does not clear any keyboard grab (see grabKeyboard()).
    /// 
    /// Be aware that if the widget is hidden, it will not accept focus
    /// until it is shown.
    /// 
    /// **Warning**: If you call setFocus() in a function which may itself be
    /// called from focusOutEvent() or focusInEvent(), you may get an
    /// infinite recursion.
    /// 
    /// **See also:** hasFocus()
    /// clearFocus()
    /// focusInEvent()
    /// focusOutEvent()
    /// setFocusPolicy()
    /// focusWidget()
    /// QApplication::focusWidget()
    /// grabKeyboard()
    /// grabMouse()
    /// {Keyboard Focus in Widgets}
    /// QEvent::RequestSoftwareInputPanel
    /// 
    /// **Overloads**
    /// Gives the keyboard input focus to this widget (or its focus
    /// proxy) if this widget or one of its parents is the
    /// [active window](isActiveWindow())
    /// 
    set_focus(reason: Rute::FocusReason),
    /// 
    /// The policy is Qt::TabFocus if the widget accepts keyboard
    /// focus by tabbing, Qt::ClickFocus if the widget accepts
    /// focus by clicking, Qt::StrongFocus if it accepts both, and
    /// Qt::NoFocus (the default) if it does not accept focus at
    /// all.
    /// 
    /// You must enable keyboard focus for a widget if it processes
    /// keyboard events. This is normally done from the widget's
    /// constructor. For instance, the QLineEdit constructor calls
    /// setFocusPolicy(Qt::StrongFocus).
    /// 
    /// If the widget has a focus proxy, then the focus policy will
    /// be propagated to it.
    /// 
    /// **See also:** focusInEvent()
    /// focusOutEvent()
    /// keyPressEvent()
    /// keyReleaseEvent()
    /// enabled
    focus_policy() -> Rute::FocusPolicy,
    set_focus_policy(policy: Rute::FocusPolicy),
    has_focus() -> bool,
    /// 
    /// Puts the *second* widget after the *first* widget in the focus order.
    /// 
    /// It effectively removes the *second* widget from its focus chain and
    /// inserts it after the *first* widget.
    /// 
    /// Note that since the tab order of the *second* widget is changed, you
    /// should order a chain like this:
    /// 
    /// *not* like this:
    /// 
    /// If *first* or *second* has a focus proxy, setTabOrder()
    /// correctly substitutes the proxy.
    /// 
    /// **Note**: Since Qt 5.10: A widget that has a child as focus proxy is understood as
    /// a compound widget. When setting a tab order between one or two compound widgets, the
    /// local tab order inside each will be preserved. This means that if both widgets are
    /// compound widgets, the resulting tab order will be from the last child inside
    /// *first,* to the first child inside *second.*
    /// 
    /// **See also:** setFocusPolicy()
    /// setFocusProxy()
    /// {Keyboard Focus in Widgets}
    [static] set_tab_order(arg0: *WidgetType, arg1: *WidgetType),
    /// 
    /// Sets the widget's focus proxy to widget *w.* If *w* is 0, the
    /// function resets this widget to have no focus proxy.
    /// 
    /// Some widgets can , but create a child widget, such as
    /// QLineEdit, to actually handle the focus. In this case, the widget
    /// can set the line edit to be its focus proxy.
    /// 
    /// setFocusProxy() sets the widget which will actually get focus when
    /// gets it. If there is a focus proxy, setFocus() and
    /// hasFocus() operate on the focus proxy.
    /// 
    /// **See also:** focusProxy()
    set_focus_proxy(arg0: *WidgetType),
    /// 
    /// Returns the focus proxy, or 0 if there is no focus proxy.
    /// 
    /// **See also:** setFocusProxy()
    focus_proxy() -> Widget?,
    /// 
    /// The default value of this property is Qt::DefaultContextMenu,
    /// which means the contextMenuEvent() handler is called. Other values
    /// are Qt::NoContextMenu, Qt::PreventContextMenu,
    /// Qt::ActionsContextMenu, and Qt::CustomContextMenu. With
    /// Qt::CustomContextMenu, the signal customContextMenuRequested() is
    /// emitted.
    /// 
    /// **See also:** contextMenuEvent()
    /// customContextMenuRequested()
    /// actions()
    context_menu_policy() -> Rute::ContextMenuPolicy,
    set_context_menu_policy(policy: Rute::ContextMenuPolicy),
    /// 
    /// Grabs the mouse input.
    /// 
    /// This widget receives all mouse events until releaseMouse() is
    /// called; other widgets get no mouse events at all. Keyboard
    /// events are not affected. Use grabKeyboard() if you want to grab
    /// that.
    /// 
    /// **Warning**: Bugs in mouse-grabbing applications very often lock the
    /// terminal. Use this function with extreme caution, and consider
    /// using the `-nograb` command line option while debugging.
    /// 
    /// It is almost never necessary to grab the mouse when using Qt, as
    /// Qt grabs and releases it sensibly. In particular, Qt grabs the
    /// mouse when a mouse button is pressed and keeps it until the last
    /// button is released.
    /// 
    /// **Note**: Only visible widgets can grab mouse input. If isVisible()
    /// returns `false` for a widget, that widget cannot call grabMouse().
    /// 
    /// **Note**: On Windows, grabMouse() only works when the mouse is inside a window
    /// owned by the process.
    /// On MacOS , grabMouse() only works when the mouse is inside the frame of that widget.
    /// 
    /// **See also:** releaseMouse()
    /// grabKeyboard()
    /// releaseKeyboard()
    /// 
    /// **Overloads** grabMouse()
    /// Grabs the mouse input and changes the cursor shape.
    /// 
    /// The cursor will assume shape *cursor* (for as long as the mouse
    /// focus is grabbed) and this widget will be the only one to receive
    /// mouse events until releaseMouse() is called().
    /// 
    /// **Warning**: Grabbing the mouse might lock the terminal.
    /// 
    /// **Note**: See the note in QWidget::grabMouse().
    /// 
    /// **See also:** releaseMouse()
    /// grabKeyboard()
    /// releaseKeyboard()
    /// setCursor()
    grab_mouse(),
    /// 
    /// Grabs the mouse input.
    /// 
    /// This widget receives all mouse events until releaseMouse() is
    /// called; other widgets get no mouse events at all. Keyboard
    /// events are not affected. Use grabKeyboard() if you want to grab
    /// that.
    /// 
    /// **Warning**: Bugs in mouse-grabbing applications very often lock the
    /// terminal. Use this function with extreme caution, and consider
    /// using the `-nograb` command line option while debugging.
    /// 
    /// It is almost never necessary to grab the mouse when using Qt, as
    /// Qt grabs and releases it sensibly. In particular, Qt grabs the
    /// mouse when a mouse button is pressed and keeps it until the last
    /// button is released.
    /// 
    /// **Note**: Only visible widgets can grab mouse input. If isVisible()
    /// returns `false` for a widget, that widget cannot call grabMouse().
    /// 
    /// **Note**: On Windows, grabMouse() only works when the mouse is inside a window
    /// owned by the process.
    /// On MacOS , grabMouse() only works when the mouse is inside the frame of that widget.
    /// 
    /// **See also:** releaseMouse()
    /// grabKeyboard()
    /// releaseKeyboard()
    /// 
    /// **Overloads** grabMouse()
    /// Grabs the mouse input and changes the cursor shape.
    /// 
    /// The cursor will assume shape *cursor* (for as long as the mouse
    /// focus is grabbed) and this widget will be the only one to receive
    /// mouse events until releaseMouse() is called().
    /// 
    /// **Warning**: Grabbing the mouse might lock the terminal.
    /// 
    /// **Note**: See the note in QWidget::grabMouse().
    /// 
    /// **See also:** releaseMouse()
    /// grabKeyboard()
    /// releaseKeyboard()
    /// setCursor()
    grab_mouse(arg0: &CursorType),
    /// 
    /// Releases the mouse grab.
    /// 
    /// **See also:** grabMouse()
    /// grabKeyboard()
    /// releaseKeyboard()
    release_mouse(),
    /// 
    /// Grabs the keyboard input.
    /// 
    /// This widget receives all keyboard events until releaseKeyboard()
    /// is called; other widgets get no keyboard events at all. Mouse
    /// events are not affected. Use grabMouse() if you want to grab that.
    /// 
    /// The focus widget is not affected, except that it doesn't receive
    /// any keyboard events. setFocus() moves the focus as usual, but the
    /// new focus widget receives keyboard events only after
    /// releaseKeyboard() is called.
    /// 
    /// If a different widget is currently grabbing keyboard input, that
    /// widget's grab is released first.
    /// 
    /// **See also:** releaseKeyboard()
    /// grabMouse()
    /// releaseMouse()
    /// focusWidget()
    grab_keyboard(),
    /// 
    /// Releases the keyboard grab.
    /// 
    /// **See also:** grabKeyboard()
    /// grabMouse()
    /// releaseMouse()
    release_keyboard(),
    /// 
    /// Adds a shortcut to Qt's shortcut system that watches for the given
    /// *key* sequence in the given *context.* If the *context* is
    /// Qt::ApplicationShortcut, the shortcut applies to the application as a
    /// whole. Otherwise, it is either local to this widget, Qt::WidgetShortcut,
    /// or to the window itself, Qt::WindowShortcut.
    /// 
    /// If the same *key* sequence has been grabbed by several widgets,
    /// when the *key* sequence occurs a QEvent::Shortcut event is sent
    /// to all the widgets to which it applies in a non-deterministic
    /// order, but with the ``ambiguous'' flag set to true.
    /// 
    /// **Warning**: You should not normally need to use this function;
    /// instead create [QAction](QAction)
    /// s with the shortcut key sequences you
    /// require (if you also want equivalent menu options and toolbar
    /// buttons), or create [QShortcut](QShortcut)
    /// s if you just need key sequences.
    /// Both QAction and QShortcut handle all the event filtering for you,
    /// and provide signals which are triggered when the user triggers the
    /// key sequence, so are much easier to use than this low-level
    /// function.
    /// 
    /// **See also:** releaseShortcut()
    /// setShortcutEnabled()
    grab_shortcut(key: &KeySequenceType, context: Rute::ShortcutContext) -> i32,
    /// 
    /// Removes the shortcut with the given *id* from Qt's shortcut
    /// system. The widget will no longer receive QEvent::Shortcut events
    /// for the shortcut's key sequence (unless it has other shortcuts
    /// with the same key sequence).
    /// 
    /// **Warning**: You should not normally need to use this function since
    /// Qt's shortcut system removes shortcuts automatically when their
    /// parent widget is destroyed. It is best to use QAction or
    /// QShortcut to handle shortcuts, since they are easier to use than
    /// this low-level function. Note also that this is an expensive
    /// operation.
    /// 
    /// **See also:** grabShortcut()
    /// setShortcutEnabled()
    release_shortcut(id: i32),
    /// 
    /// If *enable* is true, the shortcut with the given *id* is
    /// enabled; otherwise the shortcut is disabled.
    /// 
    /// **Warning**: You should not normally need to use this function since
    /// Qt's shortcut system enables/disables shortcuts automatically as
    /// widgets become hidden/visible and gain or lose focus. It is best
    /// to use QAction or QShortcut to handle shortcuts, since they are
    /// easier to use than this low-level function.
    /// 
    /// **See also:** grabShortcut()
    /// releaseShortcut()
    set_shortcut_enabled(id: i32, enable: bool),
    /// 
    /// If *enable* is true, auto repeat of the shortcut with the
    /// given *id* is enabled; otherwise it is disabled.
    /// 
    /// **See also:** grabShortcut()
    /// releaseShortcut()
    set_shortcut_auto_repeat(id: i32, enable: bool),
    /// 
    /// Returns the widget that is currently grabbing the mouse input.
    /// 
    /// If no widget in this application is currently grabbing the mouse,
    /// 0 is returned.
    /// 
    /// **See also:** grabMouse()
    /// keyboardGrabber()
    [static] mouse_grabber() -> Widget?,
    /// 
    /// Returns the widget that is currently grabbing the keyboard input.
    /// 
    /// If no widget in this application is currently grabbing the
    /// keyboard, 0 is returned.
    /// 
    /// **See also:** grabMouse()
    /// mouseGrabber()
    [static] keyboard_grabber() -> Widget?,
    /// 
    /// An updates enabled widget receives paint events and has a system
    /// background; a disabled widget does not. This also implies that
    /// calling update() and repaint() has no effect if updates are
    /// disabled.
    /// 
    /// By default, this property is `true.`
    /// 
    /// setUpdatesEnabled() is normally used to disable updates for a
    /// short period of time, for instance to avoid screen flicker during
    /// large changes. In Qt, widgets normally do not generate screen
    /// flicker, but on X11 the server might erase regions on the screen
    /// when widgets get hidden before they can be replaced by other
    /// widgets. Disabling updates solves this.
    /// 
    /// Example:
    /// 
    /// Disabling a widget implicitly disables all its children. Enabling a widget
    /// enables all child widgets *except* top-level widgets or those that
    /// have been explicitly disabled. Re-enabling updates implicitly calls
    /// update() on the widget.
    /// 
    /// **See also:** paintEvent()
    updates_enabled() -> bool,
    set_updates_enabled(enable: bool),
    /// 
    /// Returns the proxy widget for the corresponding embedded widget in a graphics
    /// view; otherwise returns 0.
    /// 
    /// **See also:** QGraphicsProxyWidget::createProxyForChildWidget()
    /// QGraphicsScene::addWidget()
    graphics_proxy_widget() -> GraphicsProxyWidget?,
    /// 
    /// An updates enabled widget receives paint events and has a system
    /// background; a disabled widget does not. This also implies that
    /// calling update() and repaint() has no effect if updates are
    /// disabled.
    /// 
    /// By default, this property is `true.`
    /// 
    /// setUpdatesEnabled() is normally used to disable updates for a
    /// short period of time, for instance to avoid screen flicker during
    /// large changes. In Qt, widgets normally do not generate screen
    /// flicker, but on X11 the server might erase regions on the screen
    /// when widgets get hidden before they can be replaced by other
    /// widgets. Disabling updates solves this.
    /// 
    /// Example:
    /// 
    /// Disabling a widget implicitly disables all its children. Enabling a widget
    /// enables all child widgets *except* top-level widgets or those that
    /// have been explicitly disabled. Re-enabling updates implicitly calls
    /// update() on the widget.
    /// 
    /// **See also:** paintEvent()
    /// 
    /// Notifies the layout system that this widget has changed and may
    /// need to change geometry.
    /// 
    /// Call this function if the sizeHint() or sizePolicy() have changed.
    /// 
    /// For explicitly hidden widgets, updateGeometry() is a no-op. The
    /// layout system will be notified as soon as the widget is shown.
    /// 
    /// Updates the widget unless updates are disabled or the widget is
    /// hidden.
    /// 
    /// This function does not cause an immediate repaint; instead it
    /// schedules a paint event for processing when Qt returns to the main
    /// event loop. This permits Qt to optimize for more speed and less
    /// flicker than a call to repaint() does.
    /// 
    /// Calling update() several times normally results in just one
    /// paintEvent() call.
    /// 
    /// Qt normally erases the widget's area before the paintEvent() call.
    /// If the Qt::WA_OpaquePaintEvent widget attribute is set, the widget is
    /// responsible for painting all its pixels with an opaque color.
    /// 
    /// **See also:** repaint()
    /// paintEvent()
    /// setUpdatesEnabled()
    /// {Analog Clock Example}
    /// **Overloads**
    /// This version updates a rectangle ( *x,* *y,* *w,* *h)* inside
    /// the widget.
    /// 
    /// **Overloads**
    /// This version updates a rectangle *rect* inside the widget.
    /// 
    /// **Overloads**
    /// This version repaints a region *rgn* inside the widget.
    /// 
    /// Updates the widget's micro focus.
    update(),
    /// 
    /// Repaints the widget directly by calling paintEvent() immediately,
    /// unless updates are disabled or the widget is hidden.
    /// 
    /// We suggest only using repaint() if you need an immediate repaint,
    /// for example during animation. In almost all circumstances update()
    /// is better, as it permits Qt to optimize for speed and minimize
    /// flicker.
    /// 
    /// **Warning**: If you call repaint() in a function which may itself be
    /// called from paintEvent(), you may get infinite recursion. The
    /// update() function never causes recursion.
    /// 
    /// **See also:** update()
    /// paintEvent()
    /// setUpdatesEnabled()
    /// **Overloads**
    /// This version repaints a rectangle ( *x,* *y,* *w,* *h)* inside
    /// the widget.
    /// 
    /// If *w* is negative, it is replaced with `width() - x` , and if
    /// *h* is negative, it is replaced width `height() - y` .
    /// **Overloads**
    /// This version repaints a rectangle *rect* inside the widget.
    /// 
    /// **Overloads**
    /// This version repaints a region *rgn* inside the widget.
    repaint(),
    /// 
    /// An updates enabled widget receives paint events and has a system
    /// background; a disabled widget does not. This also implies that
    /// calling update() and repaint() has no effect if updates are
    /// disabled.
    /// 
    /// By default, this property is `true.`
    /// 
    /// setUpdatesEnabled() is normally used to disable updates for a
    /// short period of time, for instance to avoid screen flicker during
    /// large changes. In Qt, widgets normally do not generate screen
    /// flicker, but on X11 the server might erase regions on the screen
    /// when widgets get hidden before they can be replaced by other
    /// widgets. Disabling updates solves this.
    /// 
    /// Example:
    /// 
    /// Disabling a widget implicitly disables all its children. Enabling a widget
    /// enables all child widgets *except* top-level widgets or those that
    /// have been explicitly disabled. Re-enabling updates implicitly calls
    /// update() on the widget.
    /// 
    /// **See also:** paintEvent()
    /// 
    /// Notifies the layout system that this widget has changed and may
    /// need to change geometry.
    /// 
    /// Call this function if the sizeHint() or sizePolicy() have changed.
    /// 
    /// For explicitly hidden widgets, updateGeometry() is a no-op. The
    /// layout system will be notified as soon as the widget is shown.
    /// 
    /// Updates the widget unless updates are disabled or the widget is
    /// hidden.
    /// 
    /// This function does not cause an immediate repaint; instead it
    /// schedules a paint event for processing when Qt returns to the main
    /// event loop. This permits Qt to optimize for more speed and less
    /// flicker than a call to repaint() does.
    /// 
    /// Calling update() several times normally results in just one
    /// paintEvent() call.
    /// 
    /// Qt normally erases the widget's area before the paintEvent() call.
    /// If the Qt::WA_OpaquePaintEvent widget attribute is set, the widget is
    /// responsible for painting all its pixels with an opaque color.
    /// 
    /// **See also:** repaint()
    /// paintEvent()
    /// setUpdatesEnabled()
    /// {Analog Clock Example}
    /// **Overloads**
    /// This version updates a rectangle ( *x,* *y,* *w,* *h)* inside
    /// the widget.
    /// 
    /// **Overloads**
    /// This version updates a rectangle *rect* inside the widget.
    /// 
    /// **Overloads**
    /// This version repaints a region *rgn* inside the widget.
    /// 
    /// Updates the widget's micro focus.
    update(x: i32, y: i32, w: i32, h: i32),
    /// 
    /// An updates enabled widget receives paint events and has a system
    /// background; a disabled widget does not. This also implies that
    /// calling update() and repaint() has no effect if updates are
    /// disabled.
    /// 
    /// By default, this property is `true.`
    /// 
    /// setUpdatesEnabled() is normally used to disable updates for a
    /// short period of time, for instance to avoid screen flicker during
    /// large changes. In Qt, widgets normally do not generate screen
    /// flicker, but on X11 the server might erase regions on the screen
    /// when widgets get hidden before they can be replaced by other
    /// widgets. Disabling updates solves this.
    /// 
    /// Example:
    /// 
    /// Disabling a widget implicitly disables all its children. Enabling a widget
    /// enables all child widgets *except* top-level widgets or those that
    /// have been explicitly disabled. Re-enabling updates implicitly calls
    /// update() on the widget.
    /// 
    /// **See also:** paintEvent()
    /// 
    /// Notifies the layout system that this widget has changed and may
    /// need to change geometry.
    /// 
    /// Call this function if the sizeHint() or sizePolicy() have changed.
    /// 
    /// For explicitly hidden widgets, updateGeometry() is a no-op. The
    /// layout system will be notified as soon as the widget is shown.
    /// 
    /// Updates the widget unless updates are disabled or the widget is
    /// hidden.
    /// 
    /// This function does not cause an immediate repaint; instead it
    /// schedules a paint event for processing when Qt returns to the main
    /// event loop. This permits Qt to optimize for more speed and less
    /// flicker than a call to repaint() does.
    /// 
    /// Calling update() several times normally results in just one
    /// paintEvent() call.
    /// 
    /// Qt normally erases the widget's area before the paintEvent() call.
    /// If the Qt::WA_OpaquePaintEvent widget attribute is set, the widget is
    /// responsible for painting all its pixels with an opaque color.
    /// 
    /// **See also:** repaint()
    /// paintEvent()
    /// setUpdatesEnabled()
    /// {Analog Clock Example}
    /// **Overloads**
    /// This version updates a rectangle ( *x,* *y,* *w,* *h)* inside
    /// the widget.
    /// 
    /// **Overloads**
    /// This version updates a rectangle *rect* inside the widget.
    /// 
    /// **Overloads**
    /// This version repaints a region *rgn* inside the widget.
    /// 
    /// Updates the widget's micro focus.
    update(arg0: &RectType),
    /// 
    /// An updates enabled widget receives paint events and has a system
    /// background; a disabled widget does not. This also implies that
    /// calling update() and repaint() has no effect if updates are
    /// disabled.
    /// 
    /// By default, this property is `true.`
    /// 
    /// setUpdatesEnabled() is normally used to disable updates for a
    /// short period of time, for instance to avoid screen flicker during
    /// large changes. In Qt, widgets normally do not generate screen
    /// flicker, but on X11 the server might erase regions on the screen
    /// when widgets get hidden before they can be replaced by other
    /// widgets. Disabling updates solves this.
    /// 
    /// Example:
    /// 
    /// Disabling a widget implicitly disables all its children. Enabling a widget
    /// enables all child widgets *except* top-level widgets or those that
    /// have been explicitly disabled. Re-enabling updates implicitly calls
    /// update() on the widget.
    /// 
    /// **See also:** paintEvent()
    /// 
    /// Notifies the layout system that this widget has changed and may
    /// need to change geometry.
    /// 
    /// Call this function if the sizeHint() or sizePolicy() have changed.
    /// 
    /// For explicitly hidden widgets, updateGeometry() is a no-op. The
    /// layout system will be notified as soon as the widget is shown.
    /// 
    /// Updates the widget unless updates are disabled or the widget is
    /// hidden.
    /// 
    /// This function does not cause an immediate repaint; instead it
    /// schedules a paint event for processing when Qt returns to the main
    /// event loop. This permits Qt to optimize for more speed and less
    /// flicker than a call to repaint() does.
    /// 
    /// Calling update() several times normally results in just one
    /// paintEvent() call.
    /// 
    /// Qt normally erases the widget's area before the paintEvent() call.
    /// If the Qt::WA_OpaquePaintEvent widget attribute is set, the widget is
    /// responsible for painting all its pixels with an opaque color.
    /// 
    /// **See also:** repaint()
    /// paintEvent()
    /// setUpdatesEnabled()
    /// {Analog Clock Example}
    /// **Overloads**
    /// This version updates a rectangle ( *x,* *y,* *w,* *h)* inside
    /// the widget.
    /// 
    /// **Overloads**
    /// This version updates a rectangle *rect* inside the widget.
    /// 
    /// **Overloads**
    /// This version repaints a region *rgn* inside the widget.
    /// 
    /// Updates the widget's micro focus.
    update(arg0: &RegionType),
    /// 
    /// Repaints the widget directly by calling paintEvent() immediately,
    /// unless updates are disabled or the widget is hidden.
    /// 
    /// We suggest only using repaint() if you need an immediate repaint,
    /// for example during animation. In almost all circumstances update()
    /// is better, as it permits Qt to optimize for speed and minimize
    /// flicker.
    /// 
    /// **Warning**: If you call repaint() in a function which may itself be
    /// called from paintEvent(), you may get infinite recursion. The
    /// update() function never causes recursion.
    /// 
    /// **See also:** update()
    /// paintEvent()
    /// setUpdatesEnabled()
    /// **Overloads**
    /// This version repaints a rectangle ( *x,* *y,* *w,* *h)* inside
    /// the widget.
    /// 
    /// If *w* is negative, it is replaced with `width() - x` , and if
    /// *h* is negative, it is replaced width `height() - y` .
    /// **Overloads**
    /// This version repaints a rectangle *rect* inside the widget.
    /// 
    /// **Overloads**
    /// This version repaints a region *rgn* inside the widget.
    repaint(x: i32, y: i32, w: i32, h: i32),
    /// 
    /// Repaints the widget directly by calling paintEvent() immediately,
    /// unless updates are disabled or the widget is hidden.
    /// 
    /// We suggest only using repaint() if you need an immediate repaint,
    /// for example during animation. In almost all circumstances update()
    /// is better, as it permits Qt to optimize for speed and minimize
    /// flicker.
    /// 
    /// **Warning**: If you call repaint() in a function which may itself be
    /// called from paintEvent(), you may get infinite recursion. The
    /// update() function never causes recursion.
    /// 
    /// **See also:** update()
    /// paintEvent()
    /// setUpdatesEnabled()
    /// **Overloads**
    /// This version repaints a rectangle ( *x,* *y,* *w,* *h)* inside
    /// the widget.
    /// 
    /// If *w* is negative, it is replaced with `width() - x` , and if
    /// *h* is negative, it is replaced width `height() - y` .
    /// **Overloads**
    /// This version repaints a rectangle *rect* inside the widget.
    /// 
    /// **Overloads**
    /// This version repaints a region *rgn* inside the widget.
    repaint(arg0: &RectType),
    /// 
    /// Repaints the widget directly by calling paintEvent() immediately,
    /// unless updates are disabled or the widget is hidden.
    /// 
    /// We suggest only using repaint() if you need an immediate repaint,
    /// for example during animation. In almost all circumstances update()
    /// is better, as it permits Qt to optimize for speed and minimize
    /// flicker.
    /// 
    /// **Warning**: If you call repaint() in a function which may itself be
    /// called from paintEvent(), you may get infinite recursion. The
    /// update() function never causes recursion.
    /// 
    /// **See also:** update()
    /// paintEvent()
    /// setUpdatesEnabled()
    /// **Overloads**
    /// This version repaints a rectangle ( *x,* *y,* *w,* *h)* inside
    /// the widget.
    /// 
    /// If *w* is negative, it is replaced with `width() - x` , and if
    /// *h* is negative, it is replaced width `height() - y` .
    /// **Overloads**
    /// This version repaints a rectangle *rect* inside the widget.
    /// 
    /// **Overloads**
    /// This version repaints a region *rgn* inside the widget.
    repaint(arg0: &RegionType),
    [event] set_visible(visible: bool),
    /// 
    /// Convenience function, equivalent to setVisible(! *hidden).*
    set_hidden(hidden: bool),
    /// 
    /// Shows the widget minimized, as an icon.
    /// 
    /// Calling this function only affects [windows](isWindow())
    /// 
    /// 
    /// **See also:** showNormal()
    /// showMaximized()
    /// show()
    /// hide()
    /// isVisible()
    /// isMinimized()
    /// 
    /// Shows the widget in full-screen mode.
    /// 
    /// Calling this function only affects [windows](isWindow())
    /// 
    /// 
    /// To return from full-screen mode, call showNormal().
    /// 
    /// Full-screen mode works fine under Windows, but has certain
    /// problems under X. These problems are due to limitations of the
    /// ICCCM protocol that specifies the communication between X11
    /// clients and the window manager. ICCCM simply does not understand
    /// the concept of non-decorated full-screen windows. Therefore, the
    /// best we can do is to request a borderless window and place and
    /// resize it to fill the entire screen. Depending on the window
    /// manager, this may or may not work. The borderless window is
    /// requested using MOTIF hints, which are at least partially
    /// supported by virtually all modern window managers.
    /// 
    /// An alternative would be to bypass the window manager entirely and
    /// create a window with the Qt::X11BypassWindowManagerHint flag. This
    /// has other severe problems though, like totally broken keyboard focus
    /// and very strange effects on desktop changes or when the user raises
    /// other windows.
    /// 
    /// X11 window managers that follow modern post-ICCCM specifications
    /// support full-screen mode properly.
    /// 
    /// **See also:** showNormal()
    /// showMaximized()
    /// show()
    /// hide()
    /// isVisible()
    /// 
    /// Shows the widget maximized.
    /// 
    /// Calling this function only affects [windows](isWindow())
    /// 
    /// 
    /// On X11, this function may not work properly with certain window
    /// managers. See the [Window Geometry](Window%20Geometry)
    /// documentation for an explanation.
    /// 
    /// **See also:** setWindowState()
    /// showNormal()
    /// showMinimized()
    /// show()
    /// hide()
    /// isVisible()
    /// 
    /// Restores the widget after it has been maximized or minimized.
    /// 
    /// Calling this function only affects [windows](isWindow())
    /// 
    /// 
    /// **See also:** setWindowState()
    /// showMinimized()
    /// showMaximized()
    /// show()
    /// hide()
    /// isVisible()
    /// 
    /// Shows the widget and its child widgets.
    /// 
    /// This is equivalent to calling showFullScreen(), showMaximized(), or setVisible(true),
    /// depending on the platform's default behavior for the window flags.
    /// 
    /// **See also:** raise()
    /// showEvent()
    /// hide()
    /// setVisible()
    /// showMinimized()
    /// showMaximized()
    /// showNormal()
    /// isVisible()
    /// windowFlags()
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// widget show events which are passed in the *event* parameter.
    /// 
    /// Non-spontaneous show events are sent to widgets immediately
    /// before they are shown. The spontaneous show events of windows are
    /// delivered afterwards.
    /// 
    /// Note: A widget receives spontaneous show and hide events when its
    /// mapping status is changed by the window system, e.g. a spontaneous
    /// hide event when the user minimizes the window, and a spontaneous
    /// show event when the window is restored again. After receiving a
    /// spontaneous hide event, a widget is still considered visible in
    /// the sense of isVisible().
    /// 
    /// **See also:** visible
    /// event()
    /// QShowEvent
    show(),
    /// 
    /// Hides the widget. This function is equivalent to
    /// setVisible(false).
    /// 
    /// **Note**: If you are working with QDialog or its subclasses and you invoke
    /// the show() function after this function, the dialog will be displayed in
    /// its original position.
    /// 
    /// **See also:** hideEvent()
    /// isHidden()
    /// show()
    /// setVisible()
    /// isVisible()
    /// close()
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// widget hide events. The event is passed in the *event* parameter.
    /// 
    /// Hide events are sent to widgets immediately after they have been
    /// hidden.
    /// 
    /// Note: A widget receives spontaneous show and hide events when its
    /// mapping status is changed by the window system, e.g. a spontaneous
    /// hide event when the user minimizes the window, and a spontaneous
    /// show event when the window is restored again. After receiving a
    /// spontaneous hide event, a widget is still considered visible in
    /// the sense of isVisible().
    /// 
    /// **See also:** visible
    /// event()
    /// QHideEvent
    hide(),
    /// 
    /// Shows the widget minimized, as an icon.
    /// 
    /// Calling this function only affects [windows](isWindow())
    /// 
    /// 
    /// **See also:** showNormal()
    /// showMaximized()
    /// show()
    /// hide()
    /// isVisible()
    /// isMinimized()
    show_minimized(),
    /// 
    /// Shows the widget maximized.
    /// 
    /// Calling this function only affects [windows](isWindow())
    /// 
    /// 
    /// On X11, this function may not work properly with certain window
    /// managers. See the [Window Geometry](Window%20Geometry)
    /// documentation for an explanation.
    /// 
    /// **See also:** setWindowState()
    /// showNormal()
    /// showMinimized()
    /// show()
    /// hide()
    /// isVisible()
    show_maximized(),
    /// 
    /// Shows the widget in full-screen mode.
    /// 
    /// Calling this function only affects [windows](isWindow())
    /// 
    /// 
    /// To return from full-screen mode, call showNormal().
    /// 
    /// Full-screen mode works fine under Windows, but has certain
    /// problems under X. These problems are due to limitations of the
    /// ICCCM protocol that specifies the communication between X11
    /// clients and the window manager. ICCCM simply does not understand
    /// the concept of non-decorated full-screen windows. Therefore, the
    /// best we can do is to request a borderless window and place and
    /// resize it to fill the entire screen. Depending on the window
    /// manager, this may or may not work. The borderless window is
    /// requested using MOTIF hints, which are at least partially
    /// supported by virtually all modern window managers.
    /// 
    /// An alternative would be to bypass the window manager entirely and
    /// create a window with the Qt::X11BypassWindowManagerHint flag. This
    /// has other severe problems though, like totally broken keyboard focus
    /// and very strange effects on desktop changes or when the user raises
    /// other windows.
    /// 
    /// X11 window managers that follow modern post-ICCCM specifications
    /// support full-screen mode properly.
    /// 
    /// **See also:** showNormal()
    /// showMaximized()
    /// show()
    /// hide()
    /// isVisible()
    show_full_screen(),
    /// 
    /// Restores the widget after it has been maximized or minimized.
    /// 
    /// Calling this function only affects [windows](isWindow())
    /// 
    /// 
    /// **See also:** setWindowState()
    /// showMinimized()
    /// showMaximized()
    /// show()
    /// hide()
    /// isVisible()
    show_normal(),
    /// 
    /// Closes this widget. Returns `true` if the widget was closed;
    /// otherwise returns `false.`
    /// 
    /// First it sends the widget a QCloseEvent. The widget is
    /// [hidden](hide())
    /// if it [accepts](QEvent::accept())
    /// 
    /// the close event. If it [ignores](QEvent::ignore())
    /// 
    /// the event, nothing happens. The default
    /// implementation of QWidget::closeEvent() accepts the close event.
    /// 
    /// If the widget has the Qt::WA_DeleteOnClose flag, the widget
    /// is also deleted. A close events is delivered to the widget no
    /// matter if the widget is visible or not.
    /// 
    /// The [QApplication::lastWindowClosed()](QApplication::lastWindowClosed())
    /// signal is emitted when the
    /// last visible primary window (i.e. window with no parent) with the
    /// Qt::WA_QuitOnClose attribute set is closed. By default this
    /// attribute is set for all widgets except transient windows such as
    /// splash screens, tool windows, and popup menus.
    /// 
    /// 
    /// This event handler is called with the given *event* when Qt receives a window
    /// close request for a top-level widget from the window system.
    /// 
    /// By default, the event is accepted and the widget is closed. You can reimplement
    /// this function to change the way the widget responds to window close requests.
    /// For example, you can prevent the window from closing by calling [ignore()](QEvent::)
    /// 
    /// on all events.
    /// 
    /// Main window applications typically use reimplementations of this function to check
    /// whether the user's work has been saved and ask for permission before closing.
    /// For example, the [Application Example](Application%20Example)
    /// uses a helper function to determine whether
    /// or not to close the window:
    /// 
    /// **See also:** event()
    /// hide()
    /// close()
    /// QCloseEvent
    /// {Application Example}
    close() -> bool,
    /// 
    /// Raises this widget to the top of the parent widget's stack.
    /// 
    /// After this call the widget will be visually in front of any
    /// overlapping sibling widgets.
    /// 
    /// **Note**: When using activateWindow(), you can call this function to
    /// ensure that the window is stacked on top.
    /// 
    /// **See also:** lower()
    /// stackUnder()
    raise(),
    /// 
    /// Lowers the widget to the bottom of the parent widget's stack.
    /// 
    /// After this call the widget will be visually behind (and therefore
    /// obscured by) any overlapping sibling widgets.
    /// 
    /// **See also:** raise()
    /// stackUnder()
    lower(),
    /// 
    /// Places the widget under *w* in the parent widget's stack.
    /// 
    /// To make this work, the widget itself and *w* must be siblings.
    /// 
    /// **See also:** raise()
    /// lower()
    stack_under(arg0: *WidgetType),
    /// 
    /// **Overloads**
    /// This corresponds to move(QPoint( *x,* *y)).*
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// widget move events which are passed in the *event* parameter.
    /// When the widget receives this event, it is already at the new
    /// position.
    /// 
    /// The old position is accessible through QMoveEvent::oldPos().
    /// 
    /// **See also:** resizeEvent()
    /// event()
    /// move()
    /// QMoveEvent
    move(x: i32, y: i32),
    /// 
    /// **Overloads**
    /// This corresponds to move(QPoint( *x,* *y)).*
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// widget move events which are passed in the *event* parameter.
    /// When the widget receives this event, it is already at the new
    /// position.
    /// 
    /// The old position is accessible through QMoveEvent::oldPos().
    /// 
    /// **See also:** resizeEvent()
    /// event()
    /// move()
    /// QMoveEvent
    move(arg0: &PointType),
    /// **Overloads**
    /// This corresponds to resize(QSize( *w,* *h)).*
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// widget resize events which are passed in the *event* parameter.
    /// When resizeEvent() is called, the widget already has its new
    /// geometry. The old size is accessible through
    /// QResizeEvent::oldSize().
    /// 
    /// The widget will be erased and receive a paint event immediately
    /// after processing the resize event. No drawing need be (or should
    /// be) done inside this handler.
    /// 
    /// **See also:** moveEvent()
    /// event()
    /// resize()
    /// QResizeEvent
    /// paintEvent()
    /// {Scribble Example}
    resize(w: i32, h: i32),
    /// **Overloads**
    /// This corresponds to resize(QSize( *w,* *h)).*
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// widget resize events which are passed in the *event* parameter.
    /// When resizeEvent() is called, the widget already has its new
    /// geometry. The old size is accessible through
    /// QResizeEvent::oldSize().
    /// 
    /// The widget will be erased and receive a paint event immediately
    /// after processing the resize event. No drawing need be (or should
    /// be) done inside this handler.
    /// 
    /// **See also:** moveEvent()
    /// event()
    /// resize()
    /// QResizeEvent
    /// paintEvent()
    /// {Scribble Example}
    resize(arg0: &SizeType),
    /// 
    /// Adjusts the size of the widget to fit its contents.
    /// 
    /// This function uses sizeHint() if it is valid, i.e., the size hint's width
    /// and height are \>= 0. Otherwise, it sets the size to the children
    /// rectangle that covers all child widgets (the union of all child widget
    /// rectangles).
    /// 
    /// For windows, the screen size is also taken into account. If the sizeHint()
    /// is less than (200, 100) and the size policy is [expanding](QSizePolicy::Expanding)
    /// , the window will be at least (200, 100). The maximum size of
    /// a window is 2/3 of the screen's width and height.
    /// 
    /// **See also:** sizeHint()
    /// childrenRect()
    adjust_size(),
    /// 
    /// Returns `true` if this widget would become visible if *ancestor* is
    /// shown; otherwise returns `false.`
    /// 
    /// The true case occurs if neither the widget itself nor any parent
    /// up to but excluding *ancestor* has been explicitly hidden.
    /// 
    /// This function will still return true if the widget is obscured by
    /// other windows on the screen, but could be physically visible if it
    /// or they were to be moved.
    /// 
    /// isVisibleTo(0) is identical to isVisible().
    /// 
    /// **See also:** show()
    /// hide()
    /// isVisible()
    is_visible() -> bool,
    /// 
    /// Returns `true` if this widget would become visible if *ancestor* is
    /// shown; otherwise returns `false.`
    /// 
    /// The true case occurs if neither the widget itself nor any parent
    /// up to but excluding *ancestor* has been explicitly hidden.
    /// 
    /// This function will still return true if the widget is obscured by
    /// other windows on the screen, but could be physically visible if it
    /// or they were to be moved.
    /// 
    /// isVisibleTo(0) is identical to isVisible().
    /// 
    /// **See also:** show()
    /// hide()
    /// isVisible()
    is_visible_to(arg0: *WidgetType) -> bool,
    /// 
    /// Returns `true` if the widget is hidden, otherwise returns `false.`
    /// 
    /// A hidden widget will only become visible when show() is called on
    /// it. It will not be automatically shown when the parent is shown.
    /// 
    /// To check visibility, use !isVisible() instead (notice the exclamation mark).
    /// 
    /// isHidden() implies !isVisible(), but a widget can be not visible
    /// and not hidden at the same time. This is the case for widgets that are children of
    /// widgets that are not visible.
    /// 
    /// Widgets are hidden if:
    /// * they were created as independent windows,
    /// * they were created as children of visible widgets,
    /// * hide() or setVisible(false) was called.
    is_hidden() -> bool,
    is_minimized() -> bool,
    is_maximized() -> bool,
    is_full_screen() -> bool,
    /// 
    /// Returns the current window state. The window state is a OR'ed
    /// combination of Qt::WindowState: Qt::WindowMinimized,
    /// Qt::WindowMaximized, Qt::WindowFullScreen, and Qt::WindowActive.
    /// 
    /// **See also:** Qt::WindowState
    /// setWindowState()
    window_state() -> Rute::WindowStates,
    /// 
    /// Sets the window state to *windowState.* The window state is a OR'ed
    /// combination of Qt::WindowState: Qt::WindowMinimized,
    /// Qt::WindowMaximized, Qt::WindowFullScreen, and Qt::WindowActive.
    /// 
    /// If the window is not visible (i.e. isVisible() returns `false),` the
    /// window state will take effect when show() is called. For visible
    /// windows, the change is immediate. For example, to toggle between
    /// full-screen and normal mode, use the following code:
    /// 
    /// In order to restore and activate a minimized window (while
    /// preserving its maximized and/or full-screen state), use the following:
    /// 
    /// Calling this function will hide the widget. You must call show() to make
    /// the widget visible again.
    /// 
    /// **Note**: On some window systems Qt::WindowActive is not immediate, and may be
    /// ignored in certain cases.
    /// 
    /// When the window state changes, the widget receives a changeEvent()
    /// of type QEvent::WindowStateChange.
    /// 
    /// **See also:** Qt::WindowState
    /// windowState()
    set_window_state(state: Rute::WindowStates),
    override_window_state(state: Rute::WindowStates),
    /// 
    /// If the value of this property is an invalid size, no size is
    /// recommended.
    /// 
    /// The default implementation of sizeHint() returns an invalid size
    /// if there is no layout for this widget, and returns the layout's
    /// preferred size otherwise.
    /// 
    /// **See also:** QSize::isValid()
    /// minimumSizeHint()
    /// sizePolicy()
    /// setMinimumSize()
    /// updateGeometry()
    [event] size_hint() -> Size,
    /// 
    /// If the value of this property is an invalid size, no minimum size
    /// is recommended.
    /// 
    /// The default implementation of minimumSizeHint() returns an invalid
    /// size if there is no layout for this widget, and returns the
    /// layout's minimum size otherwise. Most built-in widgets reimplement
    /// minimumSizeHint().
    /// 
    /// [QLayout](QLayout)
    /// will never resize a widget to a size smaller than the
    /// minimum size hint unless minimumSize() is set or the size policy is
    /// set to QSizePolicy::Ignore. If minimumSize() is set, the minimum
    /// size hint will be ignored.
    /// 
    /// **See also:** QSize::isValid()
    /// resize()
    /// setMinimumSize()
    /// sizePolicy()
    [event] minimum_size_hint() -> Size,
    /// 
    /// If there is a QLayout that manages this widget's children, the
    /// size policy specified by that layout is used. If there is no such
    /// QLayout, the result of this function is used.
    /// 
    /// The default policy is Preferred/Preferred, which means that the
    /// widget can be freely resized, but prefers to be the size
    /// sizeHint() returns. Button-like widgets set the size policy to
    /// specify that they may stretch horizontally, but are fixed
    /// vertically. The same applies to lineedit controls (such as
    /// QLineEdit, QSpinBox or an editable QComboBox) and other
    /// horizontally orientated widgets (such as QProgressBar).
    /// QToolButton's are normally square, so they allow growth in both
    /// directions. Widgets that support different directions (such as
    /// QSlider, QScrollBar or QHeader) specify stretching in the
    /// respective direction only. Widgets that can provide scroll bars
    /// (usually subclasses of QScrollArea) tend to specify that they can
    /// use additional space, and that they can make do with less than
    /// sizeHint().
    /// 
    /// **See also:** sizeHint()
    /// QLayout
    /// QSizePolicy
    /// updateGeometry()
    size_policy() -> SizePolicy,
    /// 
    /// **Overloads**
    /// Sets the size policy of the widget to *horizontal* and *vertical,* with standard stretch and no height-for-width.
    /// 
    /// **See also:** QSizePolicy::QSizePolicy()
    set_size_policy(arg0: SizePolicyType),
    /// 
    /// **Overloads**
    /// Sets the size policy of the widget to *horizontal* and *vertical,* with standard stretch and no height-for-width.
    /// 
    /// **See also:** QSizePolicy::QSizePolicy()
    set_size_policy(horizontal: SizePolicy::Policy, vertical: SizePolicy::Policy),
    /// 
    /// Returns the preferred height for this widget, given the width *w.*
    /// 
    /// If this widget has a layout, the default implementation returns
    /// the layout's preferred height. if there is no layout, the default
    /// implementation returns -1 indicating that the preferred height
    /// does not depend on the width.
    [event] height_for_width(arg0: i32) -> i32,
    /// 
    /// Returns `true` if the widget's preferred height depends on its width; otherwise returns `false.`
    [event] has_height_for_width() -> bool,
    /// 
    /// Returns the unobscured region where paint events can occur.
    /// 
    /// For visible widgets, this is an approximation of the area not
    /// covered by other widgets; otherwise, this is an empty region.
    /// 
    /// The repaint() function calls this function if necessary, so in
    /// general you do not need to call it.
    /// 
    visible_region() -> Region,
    /// 
    /// Sets the margins around the contents of the widget to have the sizes
    /// *left,* *top,* *right,* and *bottom.* The margins are used by
    /// the layout system, and may be used by subclasses to specify the area
    /// to draw in (e.g. excluding the frame).
    /// 
    /// Changing the margins will trigger a resizeEvent().
    /// 
    /// **See also:** contentsRect()
    /// getContentsMargins()
    /// 
    /// **Overloads**
    /// 
    /// Sets the margins around the contents of the widget to have the
    /// sizes determined by *margins.* The margins are
    /// used by the layout system, and may be used by subclasses to
    /// specify the area to draw in (e.g. excluding the frame).
    /// 
    /// Changing the margins will trigger a resizeEvent().
    /// 
    /// **See also:** contentsRect()
    /// getContentsMargins()
    set_contents_margins(left: i32, top: i32, right: i32, bottom: i32),
    /// 
    /// Sets the margins around the contents of the widget to have the sizes
    /// *left,* *top,* *right,* and *bottom.* The margins are used by
    /// the layout system, and may be used by subclasses to specify the area
    /// to draw in (e.g. excluding the frame).
    /// 
    /// Changing the margins will trigger a resizeEvent().
    /// 
    /// **See also:** contentsRect()
    /// getContentsMargins()
    /// 
    /// **Overloads**
    /// 
    /// Sets the margins around the contents of the widget to have the
    /// sizes determined by *margins.* The margins are
    /// used by the layout system, and may be used by subclasses to
    /// specify the area to draw in (e.g. excluding the frame).
    /// 
    /// Changing the margins will trigger a resizeEvent().
    /// 
    /// **See also:** contentsRect()
    /// getContentsMargins()
    set_contents_margins(margins: &MarginsType),
    /// 
    /// Returns the widget's contents margins for *left,* *top,* *right,* and *bottom.*
    /// 
    /// **See also:** setContentsMargins()
    /// contentsRect()
    get_contents_margins(left: *i32, top: *i32, right: *i32, bottom: *i32),
    /// 
    /// **See also:** getContentsMargins()
    /// setContentsMargins()
    /// contentsRect()
    contents_margins() -> Margins,
    /// 
    /// Returns the area inside the widget's margins.
    /// 
    /// **See also:** setContentsMargins()
    /// getContentsMargins()
    contents_rect() -> Rect,
    /// 
    /// By default, this property is set to Qt::LeftToRight.
    /// 
    /// When the layout direction is set on a widget, it will propagate to
    /// the widget's children, but not to a child that is a window and not
    /// to a child for which setLayoutDirection() has been explicitly
    /// called. Also, child widgets added *after* setLayoutDirection()
    /// has been called for the parent do not inherit the parent's layout
    /// direction.
    /// 
    /// This method no longer affects text layout direction since Qt 4.7.
    /// 
    /// **See also:** QApplication::layoutDirection
    /// 
    /// Returns the layout manager that is installed on this widget, or 0
    /// if no layout manager is installed.
    /// 
    /// The layout manager sets the geometry of the widget's children
    /// that have been added to the layout.
    /// 
    /// **See also:** setLayout()
    /// sizePolicy()
    /// {Layout Management}
    layout() -> Layout?,
    /// 
    /// Sets the layout manager for this widget to *layout.*
    /// 
    /// If there already is a layout manager installed on this widget,
    /// QWidget won't let you install another. You must first delete the
    /// existing layout manager (returned by layout()) before you can
    /// call setLayout() with the new layout.
    /// 
    /// If *layout* is the layout manager on a different widget, setLayout()
    /// will reparent the layout and make it the layout manager for this widget.
    /// 
    /// Example:
    /// 
    /// An alternative to calling this function is to pass this widget to
    /// the layout's constructor.
    /// 
    /// The QWidget will take ownership of *layout.*
    /// 
    /// **See also:** layout()
    /// {Layout Management}
    set_layout(arg0: *LayoutType),
    /// 
    /// Sets the parent of the widget to *parent,* and resets the window
    /// flags. The widget is moved to position (0, 0) in its new parent.
    /// 
    /// If the new parent widget is in a different window, the
    /// reparented widget and its children are appended to the end of the
    /// [tab chain](setFocusPolicy())
    /// of the new parent
    /// widget, in the same internal order as before. If one of the moved
    /// widgets had keyboard focus, setParent() calls clearFocus() for that
    /// widget.
    /// 
    /// If the new parent widget is in the same window as the
    /// old parent, setting the parent doesn't change the tab order or
    /// keyboard focus.
    /// 
    /// If the parent widget is the old parent widget, this function
    /// does nothing.
    /// 
    /// **Note**: The widget becomes invisible as part of changing its parent,
    /// even if it was previously visible. You must call show() to make the
    /// widget visible again.
    /// 
    /// **Warning**: It is very unlikely that you will ever need this
    /// function. If you have a widget that changes its content
    /// dynamically, it is far easier to use [QStackedWidget.](QStackedWidget.)
    /// 
    /// **See also:** setWindowFlags()
    /// 
    /// **Overloads**
    /// This function also takes widget flags, *f* as an argument.
    set_parent(parent: *WidgetType),
    /// 
    /// Sets the parent of the widget to *parent,* and resets the window
    /// flags. The widget is moved to position (0, 0) in its new parent.
    /// 
    /// If the new parent widget is in a different window, the
    /// reparented widget and its children are appended to the end of the
    /// [tab chain](setFocusPolicy())
    /// of the new parent
    /// widget, in the same internal order as before. If one of the moved
    /// widgets had keyboard focus, setParent() calls clearFocus() for that
    /// widget.
    /// 
    /// If the new parent widget is in the same window as the
    /// old parent, setting the parent doesn't change the tab order or
    /// keyboard focus.
    /// 
    /// If the parent widget is the old parent widget, this function
    /// does nothing.
    /// 
    /// **Note**: The widget becomes invisible as part of changing its parent,
    /// even if it was previously visible. You must call show() to make the
    /// widget visible again.
    /// 
    /// **Warning**: It is very unlikely that you will ever need this
    /// function. If you have a widget that changes its content
    /// dynamically, it is far easier to use [QStackedWidget.](QStackedWidget.)
    /// 
    /// **See also:** setWindowFlags()
    /// 
    /// **Overloads**
    /// This function also takes widget flags, *f* as an argument.
    set_parent(parent: *WidgetType, f: Rute::WindowFlags),
    /// 
    /// Scrolls the widget including its children *dx* pixels to the
    /// right and *dy* downward. Both *dx* and *dy* may be negative.
    /// 
    /// After scrolling, the widgets will receive paint events for
    /// the areas that need to be repainted. For widgets that Qt knows to
    /// be opaque, this is only the newly exposed parts.
    /// For example, if an opaque widget is scrolled 8 pixels to the left,
    /// only an 8-pixel wide stripe at the right edge needs updating.
    /// 
    /// Since widgets propagate the contents of their parents by default,
    /// you need to set the [autoFillBackground](autoFillBackground)
    /// property, or use
    /// setAttribute() to set the Qt::WA_OpaquePaintEvent attribute, to make
    /// a widget opaque.
    /// 
    /// For widgets that use contents propagation, a scroll will cause an
    /// update of the entire scroll area.
    /// 
    /// **See also:** {Transparency and Double Buffering}
    /// 
    /// **Overloads**
    /// This version only scrolls *r* and does not move the children of
    /// the widget.
    /// 
    /// If *r* is empty or invalid, the result is undefined.
    /// 
    /// **See also:** QScrollArea
    scroll(dx: i32, dy: i32),
    /// 
    /// Scrolls the widget including its children *dx* pixels to the
    /// right and *dy* downward. Both *dx* and *dy* may be negative.
    /// 
    /// After scrolling, the widgets will receive paint events for
    /// the areas that need to be repainted. For widgets that Qt knows to
    /// be opaque, this is only the newly exposed parts.
    /// For example, if an opaque widget is scrolled 8 pixels to the left,
    /// only an 8-pixel wide stripe at the right edge needs updating.
    /// 
    /// Since widgets propagate the contents of their parents by default,
    /// you need to set the [autoFillBackground](autoFillBackground)
    /// property, or use
    /// setAttribute() to set the Qt::WA_OpaquePaintEvent attribute, to make
    /// a widget opaque.
    /// 
    /// For widgets that use contents propagation, a scroll will cause an
    /// update of the entire scroll area.
    /// 
    /// **See also:** {Transparency and Double Buffering}
    /// 
    /// **Overloads**
    /// This version only scrolls *r* and does not move the children of
    /// the widget.
    /// 
    /// If *r* is empty or invalid, the result is undefined.
    /// 
    /// **See also:** QScrollArea
    scroll(dx: i32, dy: i32, arg0: &RectType),
    /// 
    /// Returns the last child of this widget that setFocus had been
    /// called on. For top level widgets this is the widget that will get
    /// focus in case this window gets activated
    /// 
    /// This is not the same as QApplication::focusWidget(), which returns
    /// the focus widget in the currently active window.
    focus_widget() -> Widget?,
    /// 
    /// Returns the next widget in this widget's focus chain.
    /// 
    /// **See also:** previousInFocusChain()
    next_in_focus_chain() -> Widget?,
    /// 
    /// **See also:** nextInFocusChain()
    /// 
    previous_in_focus_chain() -> Widget?,
    /// 
    /// Setting this property to true announces to the system that this
    /// widget *may* be able to accept drop events.
    /// 
    /// If the widget is the desktop (windowType() == Qt::Desktop), this may
    /// fail if another application is using the desktop; you can call
    /// acceptDrops() to test if this occurs.
    /// 
    /// **Warning**: Do not modify this property in a drag and drop event handler.
    /// 
    /// By default, this property is `false.`
    /// 
    /// **See also:** {Drag and Drop}
    accept_drops() -> bool,
    set_accept_drops(on: bool),
    /// 
    /// Appends the action *action* to this widget's list of actions.
    /// 
    /// All QWidgets have a list of [QAction](QAction)
    /// s, however they can be
    /// represented graphically in many different ways. The default use of
    /// the QAction list (as returned by actions()) is to create a context
    /// QMenu.
    /// 
    /// A QWidget should only have one of each action and adding an action
    /// it already has will not cause the same action to be in the widget twice.
    /// 
    /// The ownership of *action* is not transferred to this QWidget.
    /// 
    /// **See also:** removeAction()
    /// insertAction()
    /// actions()
    /// QMenu
    add_action(action: *ActionType),
    add_actions(actions: [*ActionType]),
    insert_actions(before: *ActionType, actions: [*ActionType]),
    /// 
    /// Inserts the action *action* to this widget's list of actions,
    /// before the action *before.* It appends the action if *before* is 0 or
    /// *before* is not a valid action for this widget.
    /// 
    /// A QWidget should only have one of each action.
    /// 
    /// **See also:** removeAction()
    /// addAction()
    /// QMenu
    /// contextMenuPolicy
    /// actions()
    insert_action(before: *ActionType, action: *ActionType),
    /// 
    /// Removes the action *action* from this widget's list of actions.
    /// **See also:** insertAction()
    /// actions()
    /// insertAction()
    remove_action(action: *ActionType),
    /// 
    /// Returns the (possibly empty) list of this widget's actions.
    /// 
    /// **See also:** contextMenuPolicy
    /// insertAction()
    /// removeAction()
    actions() -> [Action?],
    /// 
    /// Returns the parent of this widget, or 0 if it does not have any
    /// parent widget.
    parent_widget() -> Widget?,
    set_window_flags(type: Rute::WindowFlags),
    /// 
    /// Window flags are a combination of a type (e.g. Qt::Dialog) and
    /// zero or more hints to the window system (e.g.
    /// Qt::FramelessWindowHint).
    /// 
    /// If the widget had type Qt::Widget or Qt::SubWindow and becomes a
    /// window (Qt::Window, Qt::Dialog, etc.), it is put at position (0,
    /// 0) on the desktop. If the widget is a window and becomes a
    /// Qt::Widget or Qt::SubWindow, it is put at position (0, 0)
    /// relative to its parent widget.
    /// 
    /// **Note**: This function calls setParent() when changing the flags for
    /// a window, causing the widget to be hidden. You must call show() to make
    /// the widget visible again..
    /// 
    /// **See also:** windowType()
    /// setWindowFlag()
    /// {Window Flags Example}
    window_flags() -> Rute::WindowFlags,
    /// 
    /// Sets the window flag *flag* on this widget if *on* is true;
    /// otherwise clears the flag.
    /// 
    /// **See also:** setWindowFlags()
    /// windowFlags()
    /// windowType()
    set_window_flag(arg0: Rute::WindowType, on: bool),
    /// 
    /// Sets the window flags for the widget to *flags,*
    /// *without* telling the window system.
    /// 
    /// **Warning**: Do not call this function unless you really know what
    /// you're doing.
    /// 
    /// **See also:** setWindowFlags()
    override_window_flags(type: Rute::WindowFlags),
    /// 
    /// Returns the window type of this widget. This is identical to
    /// windowFlags() & Qt::WindowType_Mask.
    /// 
    /// **See also:** windowFlags
    window_type() -> Rute::WindowType,
    /// 
    /// Returns a pointer to the widget with window identifer/handle *id.*
    /// 
    /// The window identifier type depends on the underlying window
    /// system, see `qwindowdefs.h` for the actual definition. If there
    /// is no widget with this identifier, 0 is returned.
    [static] find(arg0: WId) -> Widget?,
    /// 
    /// Returns the visible child widget at the position ( *x* , *y* )
    /// in the widget's coordinate system. If there is no visible child
    /// widget at the specified position, the function returns 0.
    /// 
    /// **Overloads**
    /// Returns the visible child widget at point *p* in the widget's own
    /// coordinate system.
    child_at(x: i32, y: i32) -> Widget?,
    /// 
    /// Returns the visible child widget at the position ( *x* , *y* )
    /// in the widget's coordinate system. If there is no visible child
    /// widget at the specified position, the function returns 0.
    /// 
    /// **Overloads**
    /// Returns the visible child widget at point *p* in the widget's own
    /// coordinate system.
    child_at(p: &PointType) -> Widget?,
    /// 
    /// Returns the widget's paint engine.
    /// 
    /// Note that this function should not be called explicitly by the
    /// user, since it's meant for reimplementation purposes only. The
    /// function is called by Qt internally, and the default
    /// implementation may not always return a valid pointer.
    [event] paint_engine() -> PaintEngine?,
    /// 
    /// Ensures that the widget and its children have been polished by
    /// QStyle (i.e., have a proper font and palette).
    /// 
    /// QWidget calls this function after it has been fully constructed
    /// but before it is shown the very first time. You can call this
    /// function if you want to ensure that the widget is polished before
    /// doing an operation, e.g., the correct font size might be needed in
    /// the widget's sizeHint() reimplementation. Note that this function
    /// *is* called from the default implementation of sizeHint().
    /// 
    /// Polishing is useful for final initialization that must happen after
    /// all constructors (from base classes as well as from subclasses)
    /// have been called.
    /// 
    /// If you need to change some settings when a widget is polished,
    /// reimplement event() and handle the QEvent::Polish event type.
    /// 
    /// **Note:** The function is declared const so that it can be called from
    /// other const functions (e.g., sizeHint()).
    /// 
    /// **See also:** event()
    ensure_polished(),
    /// 
    /// Returns `true` if this widget is a parent, (or grandparent and so on
    /// to any level), of the given *child,* and both widgets are within
    /// the same window; otherwise returns `false.`
    is_ancestor_of(child: *WidgetType) -> bool,
    /// 
    /// If enabled, this property will cause Qt to fill the background of the
    /// widget before invoking the paint event. The color used is defined by the
    /// QPalette::Window color role from the widget's [palette](QPalette)
    /// 
    /// 
    /// In addition, Windows are always filled with QPalette::Window, unless the
    /// WA_OpaquePaintEvent or WA_NoSystemBackground attributes are set.
    /// 
    /// This property cannot be turned off (i.e., set to false) if a widget's
    /// parent has a static gradient for its background.
    /// 
    /// **Warning**: Use this property with caution in conjunction with
    /// [Qt Style Sheets](Qt%20Style%20Sheets)
    /// . When a widget has a style sheet with a valid
    /// background or a border-image, this property is automatically disabled.
    /// 
    /// By default, this property is `false.`
    /// 
    /// **See also:** Qt::WA_OpaquePaintEvent
    /// Qt::WA_NoSystemBackground
    /// {QWidget#Transparency and Double Buffering}{Transparency and Double Buffering}
    auto_fill_background() -> bool,
    set_auto_fill_background(enabled: bool),
    /// 
    /// Returns the QBackingStore this widget will be drawn into.
    backing_store() -> BackingStore?,
    /// 
    /// If this is a native widget, return the associated QWindow.
    /// Otherwise return null.
    /// 
    /// Native widgets include toplevel widgets, QGLWidget, and child widgets
    /// on which winId() was called.
    /// 
    /// **See also:** winId()
    window_handle() -> Window?,
    /// 
    /// Creates a QWidget that makes it possible to embed *window* into
    /// a QWidget-based application.
    /// 
    /// The window container is created as a child of *parent* and with
    /// window flags *flags.*
    /// 
    /// Once the window has been embedded into the container, the
    /// container will control the window's geometry and
    /// visibility. Explicit calls to QWindow::setGeometry(),
    /// QWindow::show() or QWindow::hide() on an embedded window is not
    /// recommended.
    /// 
    /// The container takes over ownership of *window.* The window can
    /// be removed from the window container with a call to
    /// QWindow::setParent().
    /// 
    /// The window container is attached as a native child window to the
    /// toplevel window it is a child of. When a window container is used
    /// as a child of a QAbstractScrollArea or QMdiArea, it will
    /// create a [native window](Native%20Widgets%20vs%20Alien%20Widgets)
    /// for
    /// every widget in its parent chain to allow for proper stacking and
    /// clipping in this use case. Creating a native window for the window
    /// container also allows for proper stacking and clipping. This must
    /// be done before showing the window container. Applications with
    /// many native child windows may suffer from performance issues.
    /// 
    /// The window container has a number of known limitations:
    /// 
    /// * Stacking order; The embedded window will stack on top of the widget hierarchy as an opaque box. The stacking order of multiple overlapping window container instances is undefined.
    /// * Rendering Integration; The window container does not interoperate with QGraphicsProxyWidget, QWidget::render() or similar functionality.
    /// * Focus Handling; It is possible to let the window container instance have any focus policy and it will delegate focus to the window via a call to QWindow::requestActivate(). However, returning to the normal focus chain from the QWindow instance will be up to the QWindow instance implementation itself. For instance, when entering a Qt Quick based window with tab focus, it is quite likely that further tab presses will only cycle inside the QML application. Also, whether QWindow::requestActivate() actually gives the window focus, is platform dependent.
    /// * Using many window container instances in a QWidget-based application can greatly hurt the overall performance of the application.
    [static] create_window_container(window: *WindowType, parent: *WidgetType, flags: Rute::WindowFlags) -> Widget?,
    /// 
    /// This signal is emitted when the window's title has changed, with the
    /// new *title* as an argument.
    /// 
    [signal] window_title_changed(title: String),
    /// 
    /// This signal is emitted when the window's icon has changed, with the
    /// new *icon* as an argument.
    /// 
    [signal] window_icon_changed(icon: &IconType),
    /// 
    /// This signal is emitted when the window's icon text has changed, with the
    /// new *iconText* as an argument.
    /// 
    /// This signal is deprecated.
    [signal] window_icon_text_changed(icon_text: String),
    /// 
    /// This signal is emitted when the widget's [contextMenuPolicy](contextMenuPolicy)
    /// is
    /// Qt::CustomContextMenu, and the user has requested a context menu on
    /// the widget. The position *pos* is the position of the context menu
    /// event that the widget receives. Normally this is in widget
    /// coordinates. The exception to this rule is QAbstractScrollArea and
    /// its subclasses that map the context menu event to coordinates of the
    /// [viewport()](QAbstractScrollArea::viewport())
    /// 
    /// 
    /// **See also:** mapToGlobal()
    /// QMenu
    /// contextMenuPolicy
    [signal] custom_context_menu_requested(pos: &PointType),
    /// 
    /// This is the main event handler; it handles event *event.* You can
    /// reimplement this function in a subclass, but we recommend using
    /// one of the specialized event handlers instead.
    /// 
    /// Key press and release events are treated differently from other
    /// events. event() checks for Tab and Shift+Tab and tries to move the
    /// focus appropriately. If there is no widget to move the focus to
    /// (or the key press is not Tab or Shift+Tab), event() calls
    /// keyPressEvent().
    /// 
    /// Mouse and tablet event handling is also slightly special: only
    /// when the widget is [enabled,](enabled,)
    /// event() will call the specialized
    /// handlers such as mousePressEvent(); otherwise it will discard the
    /// event.
    /// 
    /// This function returns `true` if the event was recognized, otherwise
    /// it returns `false.` If the recognized event was accepted (see [QEvent::accepted),](QEvent::accepted),)
    /// any further processing such as event
    /// propagation to the parent widget stops.
    /// 
    /// **See also:** closeEvent()
    /// focusInEvent()
    /// focusOutEvent()
    /// enterEvent()
    /// keyPressEvent()
    /// keyReleaseEvent()
    /// leaveEvent()
    /// mouseDoubleClickEvent()
    /// mouseMoveEvent()
    /// mousePressEvent()
    /// mouseReleaseEvent()
    /// moveEvent()
    /// paintEvent()
    /// resizeEvent()
    /// QObject::event()
    /// QObject::timerEvent()
    [event] event(event: *EventType) -> bool,
    /// 
    /// This event handler, for event *event,* can be reimplemented in a
    /// subclass to receive mouse press events for the widget.
    /// 
    /// If you create new widgets in the mousePressEvent() the
    /// mouseReleaseEvent() may not end up where you expect, depending on
    /// the underlying window system (or X11 window manager), the widgets'
    /// location and maybe more.
    /// 
    /// The default implementation implements the closing of popup widgets
    /// when you click outside the window. For other widget types it does
    /// nothing.
    /// 
    /// **See also:** mouseReleaseEvent()
    /// mouseDoubleClickEvent()
    /// mouseMoveEvent()
    /// event()
    /// QMouseEvent
    /// {Scribble Example}
    [event] mouse_press_event(event: *MouseEventType),
    /// 
    /// This event handler, for event *event,* can be reimplemented in a
    /// subclass to receive mouse release events for the widget.
    /// 
    /// **See also:** mousePressEvent()
    /// mouseDoubleClickEvent()
    /// mouseMoveEvent()
    /// event()
    /// QMouseEvent
    /// {Scribble Example}
    [event] mouse_release_event(event: *MouseEventType),
    /// 
    /// This event handler, for event *event,* can be reimplemented in a
    /// subclass to receive mouse double click events for the widget.
    /// 
    /// The default implementation calls mousePressEvent().
    /// 
    /// **Note**: The widget will also receive mouse press and mouse release
    /// events in addition to the double click event. It is up to the
    /// developer to ensure that the application interprets these events
    /// correctly.
    /// 
    /// **See also:** mousePressEvent()
    /// mouseReleaseEvent()
    /// mouseMoveEvent()
    /// event()
    /// QMouseEvent
    [event] mouse_double_click_event(event: *MouseEventType),
    /// 
    /// This event handler, for event *event,* can be reimplemented in a
    /// subclass to receive mouse move events for the widget.
    /// 
    /// If mouse tracking is switched off, mouse move events only occur if
    /// a mouse button is pressed while the mouse is being moved. If mouse
    /// tracking is switched on, mouse move events occur even if no mouse
    /// button is pressed.
    /// 
    /// QMouseEvent::pos() reports the position of the mouse cursor,
    /// relative to this widget. For press and release events, the
    /// position is usually the same as the position of the last mouse
    /// move event, but it might be different if the user's hand shakes.
    /// This is a feature of the underlying window system, not Qt.
    /// 
    /// If you want to show a tooltip immediately, while the mouse is
    /// moving (e.g., to get the mouse coordinates with QMouseEvent::pos()
    /// and show them as a tooltip), you must first enable mouse tracking
    /// as described above. Then, to ensure that the tooltip is updated
    /// immediately, you must call QToolTip::showText() instead of
    /// setToolTip() in your implementation of mouseMoveEvent().
    /// 
    /// **See also:** setMouseTracking()
    /// mousePressEvent()
    /// mouseReleaseEvent()
    /// mouseDoubleClickEvent()
    /// event()
    /// QMouseEvent
    /// {Scribble Example}
    [event] mouse_move_event(event: *MouseEventType),
    /// 
    /// This event handler, for event *event,* can be reimplemented in a
    /// subclass to receive wheel events for the widget.
    /// 
    /// If you reimplement this handler, it is very important that you
    /// [ignore()](QEvent)
    /// the event if you do not handle
    /// it, so that the widget's parent can interpret it.
    /// 
    /// The default implementation ignores the event.
    /// 
    /// **See also:** QEvent::ignore()
    /// QEvent::accept()
    /// event()
    /// QWheelEvent
    [event] wheel_event(event: *WheelEventType),
    /// 
    /// This event handler, for event *event,* can be reimplemented in a
    /// subclass to receive key press events for the widget.
    /// 
    /// A widget must call setFocusPolicy() to accept focus initially and
    /// have focus in order to receive a key press event.
    /// 
    /// If you reimplement this handler, it is very important that you
    /// call the base class implementation if you do not act upon the key.
    /// 
    /// The default implementation closes popup widgets if the user
    /// presses the key sequence for QKeySequence::Cancel (typically the
    /// Escape key). Otherwise the event is ignored, so that the widget's
    /// parent can interpret it.
    /// 
    /// Note that QKeyEvent starts with isAccepted() == true, so you do not
    /// need to call QKeyEvent::accept() - just do not call the base class
    /// implementation if you act upon the key.
    /// 
    /// **See also:** keyReleaseEvent()
    /// setFocusPolicy()
    /// focusInEvent()
    /// focusOutEvent()
    /// event()
    /// QKeyEvent
    /// {Tetrix Example}
    [event] key_press_event(event: *KeyEventType),
    /// 
    /// This event handler, for event *event,* can be reimplemented in a
    /// subclass to receive key release events for the widget.
    /// 
    /// A widget must [accept focus](setFocusPolicy())
    /// 
    /// initially and [have focus](hasFocus())
    /// in order to
    /// receive a key release event.
    /// 
    /// If you reimplement this handler, it is very important that you
    /// call the base class implementation if you do not act upon the key.
    /// 
    /// The default implementation ignores the event, so that the widget's
    /// parent can interpret it.
    /// 
    /// Note that QKeyEvent starts with isAccepted() == true, so you do not
    /// need to call QKeyEvent::accept() - just do not call the base class
    /// implementation if you act upon the key.
    /// 
    /// **See also:** keyPressEvent()
    /// QEvent::ignore()
    /// setFocusPolicy()
    /// focusInEvent()
    /// focusOutEvent()
    /// event()
    /// QKeyEvent
    [event] key_release_event(event: *KeyEventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// keyboard focus events (focus received) for the widget. The event
    /// is passed in the *event* parameter
    /// 
    /// A widget normally must setFocusPolicy() to something other than
    /// Qt::NoFocus in order to receive focus events. (Note that the
    /// application programmer can call setFocus() on any widget, even
    /// those that do not normally accept focus.)
    /// 
    /// The default implementation updates the widget (except for windows
    /// that do not specify a focusPolicy()).
    /// 
    /// **See also:** focusOutEvent()
    /// setFocusPolicy()
    /// keyPressEvent()
    /// keyReleaseEvent()
    /// event()
    /// QFocusEvent
    [event] focus_in_event(event: *FocusEventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// keyboard focus events (focus lost) for the widget. The events is
    /// passed in the *event* parameter.
    /// 
    /// A widget normally must setFocusPolicy() to something other than
    /// Qt::NoFocus in order to receive focus events. (Note that the
    /// application programmer can call setFocus() on any widget, even
    /// those that do not normally accept focus.)
    /// 
    /// The default implementation updates the widget (except for windows
    /// that do not specify a focusPolicy()).
    /// 
    /// **See also:** focusInEvent()
    /// setFocusPolicy()
    /// keyPressEvent()
    /// keyReleaseEvent()
    /// event()
    /// QFocusEvent
    [event] focus_out_event(event: *FocusEventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// widget enter events which are passed in the *event* parameter.
    /// 
    /// An event is sent to the widget when the mouse cursor enters the
    /// widget.
    /// 
    /// **See also:** leaveEvent()
    /// mouseMoveEvent()
    /// event()
    [event] enter_event(event: *EventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// widget leave events which are passed in the *event* parameter.
    /// 
    /// A leave event is sent to the widget when the mouse cursor leaves
    /// the widget.
    /// 
    /// **See also:** enterEvent()
    /// mouseMoveEvent()
    /// event()
    [event] leave_event(event: *EventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive paint
    /// events passed in *event.*
    /// 
    /// A paint event is a request to repaint all or part of a widget. It can
    /// happen for one of the following reasons:
    /// 
    /// * repaint() or update() was invoked,
    /// * the widget was obscured and has now been uncovered, or
    /// * many other reasons.
    /// 
    /// Many widgets can simply repaint their entire surface when asked to, but
    /// some slow widgets need to optimize by painting only the requested region:
    /// QPaintEvent::region(). This speed optimization does not change the result,
    /// as painting is clipped to that region during event processing. QListView
    /// and QTableView do this, for example.
    /// 
    /// Qt also tries to speed up painting by merging multiple paint events into
    /// one. When update() is called several times or the window system sends
    /// several paint events, Qt merges these events into one event with a larger
    /// region (see QRegion::united()). The repaint() function does not permit this
    /// optimization, so we suggest using update() whenever possible.
    /// 
    /// When the paint event occurs, the update region has normally been erased, so
    /// you are painting on the widget's background.
    /// 
    /// The background can be set using setBackgroundRole() and setPalette().
    /// 
    /// Since Qt 4.0, QWidget automatically double-buffers its painting, so there
    /// is no need to write double-buffering code in paintEvent() to avoid flicker.
    /// 
    /// **Note**: Generally, you should refrain from calling update() or repaint()
    /// **inside** a paintEvent(). For example, calling update() or repaint() on
    /// children inside a paintEvent() results in undefined behavior; the child may
    /// or may not get a paint event.
    /// 
    /// **Warning**: If you are using a custom paint engine without Qt's backingstore,
    /// Qt::WA_PaintOnScreen must be set. Otherwise, QWidget::paintEngine() will
    /// never be called; the backingstore will be used instead.
    /// 
    /// **See also:** event()
    /// repaint()
    /// update()
    /// QPainter
    /// QPixmap
    /// QPaintEvent
    /// {Analog Clock Example}
    [event] paint_event(event: *PaintEventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// widget move events which are passed in the *event* parameter.
    /// When the widget receives this event, it is already at the new
    /// position.
    /// 
    /// The old position is accessible through QMoveEvent::oldPos().
    /// 
    /// **See also:** resizeEvent()
    /// event()
    /// move()
    /// QMoveEvent
    [event] move_event(event: *MoveEventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// widget resize events which are passed in the *event* parameter.
    /// When resizeEvent() is called, the widget already has its new
    /// geometry. The old size is accessible through
    /// QResizeEvent::oldSize().
    /// 
    /// The widget will be erased and receive a paint event immediately
    /// after processing the resize event. No drawing need be (or should
    /// be) done inside this handler.
    /// 
    /// **See also:** moveEvent()
    /// event()
    /// resize()
    /// QResizeEvent
    /// paintEvent()
    /// {Scribble Example}
    [event] resize_event(event: *ResizeEventType),
    /// 
    /// This event handler is called with the given *event* when Qt receives a window
    /// close request for a top-level widget from the window system.
    /// 
    /// By default, the event is accepted and the widget is closed. You can reimplement
    /// this function to change the way the widget responds to window close requests.
    /// For example, you can prevent the window from closing by calling [ignore()](QEvent::)
    /// 
    /// on all events.
    /// 
    /// Main window applications typically use reimplementations of this function to check
    /// whether the user's work has been saved and ask for permission before closing.
    /// For example, the [Application Example](Application%20Example)
    /// uses a helper function to determine whether
    /// or not to close the window:
    /// 
    /// **See also:** event()
    /// hide()
    /// close()
    /// QCloseEvent
    /// {Application Example}
    [event] close_event(event: *CloseEventType),
    /// 
    /// This event handler, for event *event,* can be reimplemented in a
    /// subclass to receive widget context menu events.
    /// 
    /// The handler is called when the widget's [contextMenuPolicy](contextMenuPolicy)
    /// is
    /// Qt::DefaultContextMenu.
    /// 
    /// The default implementation ignores the context event.
    /// See the [QContextMenuEvent](QContextMenuEvent)
    /// documentation for more details.
    /// 
    /// **See also:** event()
    /// QContextMenuEvent
    /// customContextMenuRequested()
    [event] context_menu_event(event: *ContextMenuEventType),
    /// 
    /// This event handler, for event *event,* can be reimplemented in a
    /// subclass to receive tablet events for the widget.
    /// 
    /// If you reimplement this handler, it is very important that you
    /// [ignore()](QEvent)
    /// the event if you do not handle
    /// it, so that the widget's parent can interpret it.
    /// 
    /// The default implementation ignores the event.
    /// 
    /// If tablet tracking is switched off, tablet move events only occur if the
    /// stylus is in contact with the tablet, or at least one stylus button is
    /// pressed, while the stylus is being moved. If tablet tracking is switched on,
    /// tablet move events occur even while the stylus is hovering in proximity of
    /// the tablet, with no buttons pressed.
    /// 
    /// **See also:** QEvent::ignore()
    /// QEvent::accept()
    /// event()
    /// setTabletTracking()
    /// QTabletEvent
    [event] tablet_event(event: *TabletEventType),
    /// 
    /// This event handler is called with the given *event* whenever the
    /// widget's actions are changed.
    /// 
    /// **See also:** addAction()
    /// insertAction()
    /// removeAction()
    /// actions()
    /// QActionEvent
    [event] action_event(event: *ActionEventType),
    /// 
    /// This event handler is called when a drag is in progress and the
    /// mouse enters this widget. The event is passed in the *event* parameter.
    /// 
    /// If the event is ignored, the widget won't receive any [drag
    /// move events](dragMoveEvent())
    /// 
    /// 
    /// See the [Drag-and-drop documentation](dnd.html)
    /// for an
    /// overview of how to provide drag-and-drop in your application.
    /// 
    /// **See also:** QDrag
    /// QDragEnterEvent
    [event] drag_enter_event(event: *DragEnterEventType),
    /// 
    /// This event handler is called if a drag is in progress, and when
    /// any of the following conditions occur: the cursor enters this widget,
    /// the cursor moves within this widget, or a modifier key is pressed on
    /// the keyboard while this widget has the focus. The event is passed
    /// in the *event* parameter.
    /// 
    /// See the [Drag-and-drop documentation](dnd.html)
    /// for an
    /// overview of how to provide drag-and-drop in your application.
    /// 
    /// **See also:** QDrag
    /// QDragMoveEvent
    [event] drag_move_event(event: *DragMoveEventType),
    /// 
    /// This event handler is called when a drag is in progress and the
    /// mouse leaves this widget. The event is passed in the *event*
    /// parameter.
    /// 
    /// See the [Drag-and-drop documentation](dnd.html)
    /// for an
    /// overview of how to provide drag-and-drop in your application.
    /// 
    /// **See also:** QDrag
    /// QDragLeaveEvent
    [event] drag_leave_event(event: *DragLeaveEventType),
    /// 
    /// This event handler is called when the drag is dropped on this
    /// widget. The event is passed in the *event* parameter.
    /// 
    /// See the [Drag-and-drop documentation](dnd.html)
    /// for an
    /// overview of how to provide drag-and-drop in your application.
    /// 
    /// **See also:** QDrag
    /// QDropEvent
    [event] drop_event(event: *DropEventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// widget show events which are passed in the *event* parameter.
    /// 
    /// Non-spontaneous show events are sent to widgets immediately
    /// before they are shown. The spontaneous show events of windows are
    /// delivered afterwards.
    /// 
    /// Note: A widget receives spontaneous show and hide events when its
    /// mapping status is changed by the window system, e.g. a spontaneous
    /// hide event when the user minimizes the window, and a spontaneous
    /// show event when the window is restored again. After receiving a
    /// spontaneous hide event, a widget is still considered visible in
    /// the sense of isVisible().
    /// 
    /// **See also:** visible
    /// event()
    /// QShowEvent
    [event] show_event(event: *ShowEventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// widget hide events. The event is passed in the *event* parameter.
    /// 
    /// Hide events are sent to widgets immediately after they have been
    /// hidden.
    /// 
    /// Note: A widget receives spontaneous show and hide events when its
    /// mapping status is changed by the window system, e.g. a spontaneous
    /// hide event when the user minimizes the window, and a spontaneous
    /// show event when the window is restored again. After receiving a
    /// spontaneous hide event, a widget is still considered visible in
    /// the sense of isVisible().
    /// 
    /// **See also:** visible
    /// event()
    /// QHideEvent
    [event] hide_event(event: *HideEventType),
    /// 
    /// This special event handler can be reimplemented in a subclass to
    /// receive native platform events identified by *eventType*
    /// which are passed in the *message* parameter.
    /// 
    /// In your reimplementation of this function, if you want to stop the
    /// event being handled by Qt, return true and set *result.*
    /// If you return false, this native event is passed back to Qt,
    /// which translates the event into a Qt event and sends it to the widget.
    /// 
    /// **Note**: Events are only delivered to this event handler if the widget is
    /// has a native Window handle.
    /// 
    /// **Note**: This function superseedes the event filter functions
    /// x11Event(), winEvent() and macEvent() of Qt 4.
    /// 
    /// * Platform
    /// * Event Type Identifier
    /// * Message Type
    /// * Result Type
    /// * Windows
    /// * "windows_generic_MSG"
    /// * MSG *
    /// * LRESULT
    /// * macOS
    /// * "NSEvent"
    /// * NSEvent *
    /// 
    [event] native_event(event_type: &ByteArrayType, message: *void, result: *long) -> bool,
    /// 
    /// This event handler can be reimplemented to handle state changes.
    /// 
    /// The state being changed in this event can be retrieved through the *event*
    /// supplied.
    /// 
    /// Change events include: QEvent::ToolBarChange,
    /// QEvent::ActivationChange, QEvent::EnabledChange, QEvent::FontChange,
    /// QEvent::StyleChange, QEvent::PaletteChange,
    /// QEvent::WindowTitleChange, QEvent::IconTextChange,
    /// QEvent::ModifiedChange, QEvent::MouseTrackingChange,
    /// QEvent::ParentChange, QEvent::WindowStateChange,
    /// QEvent::LanguageChange, QEvent::LocaleChange,
    /// QEvent::LayoutDirectionChange, QEvent::ReadOnlyChange.
    /// 
    [event] change_event(arg0: *EventType),
    /// 
    /// Initializes the *painter* pen, background and font to the same as
    /// the given widget's. This function is called automatically when the
    /// painter is opened on a QWidget.
    [event] init_painter(painter: *PainterType),
    [event] redirected(offset: *PointType) -> PaintDevice?,
    [event] shared_painter() -> Painter?,
    /// 
    /// This event handler, for event *event,* can be reimplemented in a
    /// subclass to receive Input Method composition events. This handler
    /// is called when the state of the input method changes.
    /// 
    /// Note that when creating custom text editing widgets, the
    /// Qt::WA_InputMethodEnabled window attribute must be set explicitly
    /// (using the setAttribute() function) in order to receive input
    /// method events.
    /// 
    /// The default implementation calls event->ignore(), which rejects the
    /// Input Method event. See the [QInputMethodEvent](QInputMethodEvent)
    /// documentation for more
    /// details.
    /// 
    /// **See also:** event()
    /// QInputMethodEvent
    [event] input_method_event(arg0: *InputMethodEventType),
    /// 
    /// This method is only relevant for input widgets. It is used by the
    /// input method to query a set of properties of the widget to be
    /// able to support complex input method operations as support for
    /// surrounding text and reconversions.
    /// 
    /// *query* specifies which property is queried.
    /// 
    /// **See also:** inputMethodEvent()
    /// QInputMethodEvent
    /// QInputMethodQueryEvent
    /// inputMethodHints
    [event] input_method_query(arg0: Rute::InputMethodQuery) -> Variant,
    /// 
    /// This is only relevant for input widgets. It is used by
    /// the input method to retrieve hints as to how the input method
    /// should operate. For example, if the Qt::ImhFormattedNumbersOnly flag
    /// is set, the input method may change its visual components to reflect
    /// that only numbers can be entered.
    /// 
    /// **Warning**: Some widgets require certain flags in order to work as
    /// intended. To set a flag, do `w->setInputMethodHints(w->inputMethodHints()|f)`
    /// instead of `w->setInputMethodHints(f)` .
    /// 
    /// **Note**: The flags are only hints, so the particular input method
    /// implementation is free to ignore them. If you want to be
    /// sure that a certain type of characters are entered,
    /// you should also set a QValidator on the widget.
    /// 
    /// The default value is Qt::ImhNone.
    /// 
    /// **See also:** inputMethodQuery()
    input_method_hints() -> Rute::InputMethodHints,
    set_input_method_hints(hints: Rute::InputMethodHints),
    /// 
    /// Updates the widget's micro focus.
    update_micro_focus(),
    /// 
    /// Creates a QWidget that makes it possible to embed *window* into
    /// a QWidget-based application.
    /// 
    /// The window container is created as a child of *parent* and with
    /// window flags *flags.*
    /// 
    /// Once the window has been embedded into the container, the
    /// container will control the window's geometry and
    /// visibility. Explicit calls to QWindow::setGeometry(),
    /// QWindow::show() or QWindow::hide() on an embedded window is not
    /// recommended.
    /// 
    /// The container takes over ownership of *window.* The window can
    /// be removed from the window container with a call to
    /// QWindow::setParent().
    /// 
    /// The window container is attached as a native child window to the
    /// toplevel window it is a child of. When a window container is used
    /// as a child of a QAbstractScrollArea or QMdiArea, it will
    /// create a [native window](Native%20Widgets%20vs%20Alien%20Widgets)
    /// for
    /// every widget in its parent chain to allow for proper stacking and
    /// clipping in this use case. Creating a native window for the window
    /// container also allows for proper stacking and clipping. This must
    /// be done before showing the window container. Applications with
    /// many native child windows may suffer from performance issues.
    /// 
    /// The window container has a number of known limitations:
    /// 
    /// * Stacking order; The embedded window will stack on top of the widget hierarchy as an opaque box. The stacking order of multiple overlapping window container instances is undefined.
    /// * Rendering Integration; The window container does not interoperate with QGraphicsProxyWidget, QWidget::render() or similar functionality.
    /// * Focus Handling; It is possible to let the window container instance have any focus policy and it will delegate focus to the window via a call to QWindow::requestActivate(). However, returning to the normal focus chain from the QWindow instance will be up to the QWindow instance implementation itself. For instance, when entering a Qt Quick based window with tab focus, it is quite likely that further tab presses will only cycle inside the QML application. Also, whether QWindow::requestActivate() actually gives the window focus, is platform dependent.
    /// * Using many window container instances in a QWidget-based application can greatly hurt the overall performance of the application.
    /// 
    /// Creates a new widget window.
    /// 
    /// The parameter *window* is ignored in Qt 5. Please use
    /// QWindow::fromWinId() to create a QWindow wrapping a foreign
    /// window and pass it to QWidget::createWindowContainer() instead.
    /// 
    /// Initializes the window (sets the geometry etc.) if *initializeWindow* is true. If *initializeWindow* is false, no
    /// initialization is performed. This parameter only makes sense if *window* is a valid window.
    /// 
    /// Destroys the old window if *destroyOldWindow* is true. If *destroyOldWindow* is false, you are responsible for destroying the
    /// window yourself (using platform native code).
    /// 
    /// The QWidget constructor calls create(0,true,true) to create a
    /// window for this widget.
    /// 
    /// **See also:** createWindowContainer()
    /// QWindow::fromWinId()
    create(arg0: WId, initialize_window: bool, destroy_old_window: bool),
    /// 
    /// Finds a new widget to give the keyboard focus to, as appropriate
    /// for Tab and Shift+Tab, and returns `true` if it can find a new
    /// widget, or false if it can't.
    /// 
    /// If *next* is true, this function searches forward, if *next*
    /// is false, it searches backward.
    /// 
    /// Sometimes, you will want to reimplement this function. For
    /// example, a web browser might reimplement it to move its forward or backward, and call
    /// focusNextPrevChild() only when it reaches the last or
    /// first link on the .
    /// 
    /// Child widgets call focusNextPrevChild() on their parent widgets,
    /// but only the window that contains the child widgets decides where
    /// to redirect focus. By reimplementing this function for an object,
    /// you thus gain control of focus traversal for all child widgets.
    /// 
    /// **See also:** focusNextChild()
    /// focusPreviousChild()
    [event] focus_next_prev_child(next: bool) -> bool,
    /// 
    /// Finds a new widget to give the keyboard focus to, as appropriate
    /// for **Tab,** and returns `true` if it can find a new widget, or
    /// false if it can't.
    /// 
    /// **See also:** focusPreviousChild()
    focus_next_child() -> bool,
    /// 
    /// Finds a new widget to give the keyboard focus to, as appropriate
    /// for **Shift+Tab,** and returns `true` if it can find a new widget,
    /// or false if it can't.
    /// 
    /// **See also:** focusNextChild()
    focus_previous_child() -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
