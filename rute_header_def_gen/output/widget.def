struct Widget : Object, PaintDevice {
    dev_type() -> i32,
    win_id() -> WId,
    create_win_id(),
    internal_win_id() -> WId,
    effective_win_id() -> WId,
    style() -> &StyleType,
    set_style(&StyleType arg0),
    is_top_level() -> bool,
    is_window() -> bool,
    is_modal() -> bool,
    window_modality() -> Rute::WindowModality,
    set_window_modality(Rute::WindowModality window_modality),
    is_enabled() -> bool,
    is_enabled_to(&WidgetType arg0) -> bool,
    is_enabled_to_tlw() -> bool,
    [callback] set_enabled(bool arg0),
    [callback] set_disabled(bool arg0),
    [callback] set_window_modified(bool arg0),
    x() -> i32,
    y() -> i32,
    pos() -> PointType,
    frame_size() -> SizeType,
    size() -> SizeType,
    width() -> i32,
    height() -> i32,
    rect() -> RectType,
    children_rect() -> RectType,
    children_region() -> RegionType,
    minimum_size() -> SizeType,
    maximum_size() -> SizeType,
    minimum_width() -> i32,
    minimum_height() -> i32,
    maximum_width() -> i32,
    maximum_height() -> i32,
    set_minimum_size(&SizeType arg0),
    set_minimum_size(i32 minw, i32 minh),
    set_maximum_size(&SizeType arg0),
    set_maximum_size(i32 maxw, i32 maxh),
    set_minimum_width(i32 minw),
    set_minimum_height(i32 minh),
    set_maximum_width(i32 maxw),
    set_maximum_height(i32 maxh),
    size_increment() -> SizeType,
    set_size_increment(&SizeType arg0),
    set_size_increment(i32 w, i32 h),
    base_size() -> SizeType,
    set_base_size(&SizeType arg0),
    set_base_size(i32 basew, i32 baseh),
    set_fixed_size(&SizeType arg0),
    set_fixed_size(i32 w, i32 h),
    set_fixed_width(i32 w),
    set_fixed_height(i32 h),
    map_to_global(&PointType arg0) -> PointType,
    map_from_global(&PointType arg0) -> PointType,
    map_to_parent(&PointType arg0) -> PointType,
    map_from_parent(&PointType arg0) -> PointType,
    map_to(&WidgetType arg0, &PointType arg1) -> PointType,
    map_from(&WidgetType arg0, &PointType arg1) -> PointType,
    window() -> &WidgetType,
    native_parent_widget() -> &WidgetType,
    top_level_widget() -> &WidgetType,
    palette() -> &PaletteType,
    set_palette(&PaletteType arg0),
    set_background_role(Palette::ColorRole arg0),
    background_role() -> Palette::ColorRole,
    set_foreground_role(Palette::ColorRole arg0),
    foreground_role() -> Palette::ColorRole,
    font() -> &FontType,
    set_font(&FontType arg0),
    font_info() -> FontInfoType,
    cursor() -> CursorType,
    set_cursor(&CursorType arg0),
    unset_cursor(),
    set_mouse_tracking(bool enable),
    has_mouse_tracking() -> bool,
    under_mouse() -> bool,
    set_tablet_tracking(bool enable),
    has_tablet_tracking() -> bool,
    set_mask(&BitmapType arg0),
    set_mask(&RegionType arg0),
    mask() -> RegionType,
    clear_mask(),
    render(&PaintDeviceType target, &PointType target_offset, &RegionType source_region, RenderFlags render_flags),
    render(&PainterType painter, &PointType target_offset, &RegionType source_region, RenderFlags render_flags),
    grab(&RectType rectangle) -> PixmapType,
    graphics_effect() -> &GraphicsEffectType,
    set_graphics_effect(&GraphicsEffectType effect),
    grab_gesture(Rute::GestureType type, Rute::GestureFlags flags),
    ungrab_gesture(Rute::GestureType type),
    [callback] set_window_title(String arg0),
    [callback] set_style_sheet(String style_sheet),
    style_sheet() -> String,
    window_title() -> String,
    set_window_icon(&IconType icon),
    window_icon() -> IconType,
    set_window_icon_text(String arg0),
    window_icon_text() -> String,
    set_window_role(String arg0),
    window_role() -> String,
    set_window_file_path(String file_path),
    window_file_path() -> String,
    set_window_opacity(f32 level),
    window_opacity() -> f32,
    is_window_modified() -> bool,
    set_tool_tip(String arg0),
    tool_tip() -> String,
    set_tool_tip_duration(i32 msec),
    tool_tip_duration() -> i32,
    set_status_tip(String arg0),
    status_tip() -> String,
    set_whats_this(String arg0),
    whats_this() -> String,
    accessible_name() -> String,
    set_accessible_name(String name),
    accessible_description() -> String,
    set_accessible_description(String description),
    set_layout_direction(Rute::LayoutDirection direction),
    layout_direction() -> Rute::LayoutDirection,
    unset_layout_direction(),
    set_locale(&LocaleType locale),
    locale() -> LocaleType,
    unset_locale(),
    is_right_to_left() -> bool,
    is_left_to_right() -> bool,
    [callback] set_focus(),
    is_active_window() -> bool,
    activate_window(),
    clear_focus(),
    set_focus(Rute::FocusReason reason),
    focus_policy() -> Rute::FocusPolicy,
    set_focus_policy(Rute::FocusPolicy policy),
    has_focus() -> bool,
    set_tab_order(&WidgetType arg0, &WidgetType arg1),
    set_focus_proxy(&WidgetType arg0),
    focus_proxy() -> &WidgetType,
    context_menu_policy() -> Rute::ContextMenuPolicy,
    set_context_menu_policy(Rute::ContextMenuPolicy policy),
    grab_mouse(),
    grab_mouse(&CursorType arg0),
    release_mouse(),
    grab_keyboard(),
    release_keyboard(),
    grab_shortcut(&KeySequenceType key, Rute::ShortcutContext context) -> i32,
    release_shortcut(i32 id),
    set_shortcut_enabled(i32 id, bool enable),
    set_shortcut_auto_repeat(i32 id, bool enable),
    mouse_grabber() -> &WidgetType,
    keyboard_grabber() -> &WidgetType,
    updates_enabled() -> bool,
    set_updates_enabled(bool enable),
    graphics_proxy_widget() -> &GraphicsProxyWidgetType,
    [callback] update(),
    [callback] repaint(),
    update(i32 x, i32 y, i32 w, i32 h),
    update(&RectType arg0),
    update(&RegionType arg0),
    repaint(i32 x, i32 y, i32 w, i32 h),
    repaint(&RectType arg0),
    repaint(&RegionType arg0),
    [callback] set_visible(bool visible),
    [callback] set_hidden(bool hidden),
    [callback] show(),
    [callback] hide(),
    [callback] show_minimized(),
    [callback] show_maximized(),
    [callback] show_full_screen(),
    [callback] show_normal(),
    [callback] close() -> bool,
    [callback] raise(),
    [callback] lower(),
    stack_under(&WidgetType arg0),
    move(i32 x, i32 y),
    move(&PointType arg0),
    resize(i32 w, i32 h),
    resize(&SizeType arg0),
    adjust_size(),
    is_visible() -> bool,
    is_visible_to(&WidgetType arg0) -> bool,
    is_hidden() -> bool,
    is_minimized() -> bool,
    is_maximized() -> bool,
    is_full_screen() -> bool,
    window_state() -> Rute::WindowStates,
    set_window_state(Rute::WindowStates state),
    override_window_state(Rute::WindowStates state),
    size_hint() -> SizeType,
    minimum_size_hint() -> SizeType,
    size_policy() -> SizePolicyType,
    set_size_policy(SizePolicyType arg0),
    set_size_policy(SizePolicy::Policy horizontal, SizePolicy::Policy vertical),
    height_for_width(i32 arg0) -> i32,
    has_height_for_width() -> bool,
    visible_region() -> RegionType,
    set_contents_margins(i32 left, i32 top, i32 right, i32 bottom),
    set_contents_margins(&MarginsType margins),
    get_contents_margins(&i32 left, &i32 top, &i32 right, &i32 bottom),
    contents_margins() -> MarginsType,
    contents_rect() -> RectType,
    layout() -> &LayoutType,
    set_layout(&LayoutType arg0),
    set_parent(&WidgetType parent),
    set_parent(&WidgetType parent, Rute::WindowFlags f),
    scroll(i32 dx, i32 dy),
    scroll(i32 dx, i32 dy, &RectType arg0),
    focus_widget() -> &WidgetType,
    next_in_focus_chain() -> &WidgetType,
    previous_in_focus_chain() -> &WidgetType,
    accept_drops() -> bool,
    set_accept_drops(bool on),
    add_action(&ActionType action),
    add_actions(<&ActionType> actions),
    insert_actions(&ActionType before, <&ActionType> actions),
    insert_action(&ActionType before, &ActionType action),
    remove_action(&ActionType action),
    actions() -> <&ActionType>,
    parent_widget() -> &WidgetType,
    set_window_flags(Rute::WindowFlags type),
    window_flags() -> Rute::WindowFlags,
    set_window_flag(Rute::WindowType arg0, bool on),
    override_window_flags(Rute::WindowFlags type),
    window_type() -> Rute::WindowType,
    find(WId arg0) -> &WidgetType,
    child_at(i32 x, i32 y) -> &WidgetType,
    child_at(&PointType p) -> &WidgetType,
    paint_engine() -> &PaintEngineType,
    ensure_polished(),
    is_ancestor_of(&WidgetType child) -> bool,
    auto_fill_background() -> bool,
    set_auto_fill_background(bool enabled),
    backing_store() -> &BackingStoreType,
    window_handle() -> &WindowType,
    create_window_container(&WindowType window, &WidgetType parent, Rute::WindowFlags flags) -> &WidgetType,
    window_title_changed(String title),
    window_icon_changed(&IconType icon),
    window_icon_text_changed(String icon_text),
    custom_context_menu_requested(&PointType pos),
    event(&EventType event) -> bool,
    mouse_press_event(&MouseEventType event),
    mouse_release_event(&MouseEventType event),
    mouse_double_click_event(&MouseEventType event),
    mouse_move_event(&MouseEventType event),
    wheel_event(&WheelEventType event),
    key_press_event(&KeyEventType event),
    key_release_event(&KeyEventType event),
    focus_in_event(&FocusEventType event),
    focus_out_event(&FocusEventType event),
    enter_event(&EventType event),
    leave_event(&EventType event),
    paint_event(&PaintEventType event),
    move_event(&MoveEventType event),
    resize_event(&ResizeEventType event),
    close_event(&CloseEventType event),
    context_menu_event(&ContextMenuEventType event),
    tablet_event(&TabletEventType event),
    action_event(&ActionEventType event),
    drag_enter_event(&DragEnterEventType event),
    drag_move_event(&DragMoveEventType event),
    drag_leave_event(&DragLeaveEventType event),
    drop_event(&DropEventType event),
    show_event(&ShowEventType event),
    hide_event(&HideEventType event),
    native_event(&ByteArrayType event_type, &void message, &long result) -> bool,
    change_event(&EventType arg0),
    init_painter(&PainterType painter),
    redirected(&PointType offset) -> &PaintDeviceType,
    shared_painter() -> &PainterType,
    input_method_event(&InputMethodEventType arg0),
    input_method_query(Rute::InputMethodQuery arg0) -> VariantType,
    input_method_hints() -> Rute::InputMethodHints,
    set_input_method_hints(Rute::InputMethodHints hints),
    update_micro_focus(),
    create(WId arg0, bool initialize_window, bool destroy_old_window),
    focus_next_prev_child(bool next) -> bool,
    focus_next_child() -> bool,
    focus_previous_child() -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
