/// 
/// The QGestureEvent class contains a list of gestures, which can be obtained using the
/// gestures() function.
/// 
/// The gestures are either active or canceled. A list of those that are currently being
/// executed can be obtained using the activeGestures() function. A list of those which
/// were previously active and have been canceled can be accessed using the
/// canceledGestures() function. A gesture might be canceled if the current window loses
/// focus, for example, or because of a timeout, or for other reasons.
/// 
/// If the event handler does not accept the event by calling the generic
/// QEvent::accept() function, all individual QGesture object that were not
/// accepted and in the Qt::GestureStarted state will be propagated up the
/// parent widget chain until a widget accepts them individually, by calling
/// QGestureEvent::accept() for each of them, or an event filter consumes the
/// event.
/// 
/// # Further Reading
/// 
/// For an overview of gesture handling in Qt and information on using gestures
/// in your applications, see the [Gestures in Widgets and Graphics View](Gestures%20in%20Widgets%20and%20Graphics%20View)
/// document.
/// 
/// **See also:** [`Gesture`]
/// [`GestureRecognizer`]
/// [`Widget::grab_gesture`]
/// [`GraphicsObject::grab_gesture`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GestureEvent : Event {
    /// 
    /// Returns all gestures that are delivered in the event.
    gestures() -> [Gesture?],
    /// 
    /// Returns all gestures that are delivered in the event.
    /// 
    /// Returns a gesture object by *type.*
    gesture(type: Rute::GestureType) -> Gesture?,
    /// 
    /// Returns a list of active (not canceled) gestures.
    active_gestures() -> [Gesture?],
    /// 
    /// Returns a list of canceled gestures.
    canceled_gestures() -> [Gesture?],
    /// 
    /// Sets the accept flag of the given *gesture* object to the specified *value.*
    /// 
    /// Setting the accept flag indicates that the event receiver wants the *gesture.*
    /// Unwanted gestures may be propagated to the parent widget.
    /// 
    /// By default, gestures in events of type QEvent::Gesture are accepted, and
    /// gestures in QEvent::GestureOverride events are ignored.
    /// 
    /// For convenience, the accept flag can also be set with
    /// [accept(gesture)](QGestureEvent::accept())
    /// , and cleared with
    /// [ignore(gesture)](QGestureEvent::ignore())
    /// 
    /// 
    /// Sets the accept flag of the given *gestureType* object to the specified
    /// *value.*
    /// 
    /// Setting the accept flag indicates that the event receiver wants to receive
    /// gestures of the specified type, *gestureType.* Unwanted gestures may be
    /// propagated to the parent widget.
    /// 
    /// By default, gestures in events of type QEvent::Gesture are accepted, and
    /// gestures in QEvent::GestureOverride events are ignored.
    /// 
    /// For convenience, the accept flag can also be set with
    /// [accept(gestureType)](QGestureEvent::accept())
    /// , and cleared with
    /// [ignore(gestureType)](QGestureEvent::ignore())
    /// 
    set_accepted(arg0: *GestureType, arg1: bool),
    /// 
    /// Sets the accept flag of the given *gesture* object, the equivalent of calling
    /// [setAccepted(gesture, true)](QGestureEvent::setAccepted())
    /// 
    /// 
    /// Setting the accept flag indicates that the event receiver wants the
    /// gesture. Unwanted gestures may be propagated to the parent widget.
    /// 
    /// **See also:** [`GestureEvent::ignore`]
    /// 
    /// Sets the accept flag of the given *gestureType,* the equivalent of calling
    /// [setAccepted(gestureType, true)](QGestureEvent::setAccepted())
    /// 
    /// 
    /// Setting the accept flag indicates that the event receiver wants the
    /// gesture. Unwanted gestures may be propagated to the parent widget.
    /// 
    /// **See also:** [`GestureEvent::ignore`]
    accept(arg0: *GestureType),
    /// 
    /// Clears the accept flag parameter of the given *gesture* object, the equivalent
    /// of calling [setAccepted(gesture, false)](QGestureEvent::setAccepted())
    /// 
    /// 
    /// Clearing the accept flag indicates that the event receiver does not
    /// want the gesture. Unwanted gestures may be propagated to the parent widget.
    /// 
    /// **See also:** [`GestureEvent::accept`]
    /// 
    /// Clears the accept flag parameter of the given *gestureType,* the equivalent
    /// of calling [setAccepted(gesture, false)](QGestureEvent::setAccepted())
    /// 
    /// 
    /// Clearing the accept flag indicates that the event receiver does not
    /// want the gesture. Unwanted gestures may be propgated to the parent widget.
    /// 
    /// **See also:** [`GestureEvent::accept`]
    ignore(arg0: *GestureType),
    /// 
    /// Returns `true` if the *gesture* is accepted; otherwise returns `false.`
    /// 
    /// Returns `true` if the gesture of type *gestureType* is accepted; otherwise
    /// returns `false.`
    is_accepted(arg0: *GestureType) -> bool,
    /// 
    /// Sets the accept flag of the given *gesture* object to the specified *value.*
    /// 
    /// Setting the accept flag indicates that the event receiver wants the *gesture.*
    /// Unwanted gestures may be propagated to the parent widget.
    /// 
    /// By default, gestures in events of type QEvent::Gesture are accepted, and
    /// gestures in QEvent::GestureOverride events are ignored.
    /// 
    /// For convenience, the accept flag can also be set with
    /// [accept(gesture)](QGestureEvent::accept())
    /// , and cleared with
    /// [ignore(gesture)](QGestureEvent::ignore())
    /// 
    /// 
    /// Sets the accept flag of the given *gestureType* object to the specified
    /// *value.*
    /// 
    /// Setting the accept flag indicates that the event receiver wants to receive
    /// gestures of the specified type, *gestureType.* Unwanted gestures may be
    /// propagated to the parent widget.
    /// 
    /// By default, gestures in events of type QEvent::Gesture are accepted, and
    /// gestures in QEvent::GestureOverride events are ignored.
    /// 
    /// For convenience, the accept flag can also be set with
    /// [accept(gestureType)](QGestureEvent::accept())
    /// , and cleared with
    /// [ignore(gestureType)](QGestureEvent::ignore())
    /// 
    [org_name(setAccepted)]
    set_accepted_2(arg0: Rute::GestureType, arg1: bool),
    /// 
    /// Sets the accept flag of the given *gesture* object, the equivalent of calling
    /// [setAccepted(gesture, true)](QGestureEvent::setAccepted())
    /// 
    /// 
    /// Setting the accept flag indicates that the event receiver wants the
    /// gesture. Unwanted gestures may be propagated to the parent widget.
    /// 
    /// **See also:** [`GestureEvent::ignore`]
    /// 
    /// Sets the accept flag of the given *gestureType,* the equivalent of calling
    /// [setAccepted(gestureType, true)](QGestureEvent::setAccepted())
    /// 
    /// 
    /// Setting the accept flag indicates that the event receiver wants the
    /// gesture. Unwanted gestures may be propagated to the parent widget.
    /// 
    /// **See also:** [`GestureEvent::ignore`]
    [org_name(accept)]
    accept_2(arg0: Rute::GestureType),
    /// 
    /// Clears the accept flag parameter of the given *gesture* object, the equivalent
    /// of calling [setAccepted(gesture, false)](QGestureEvent::setAccepted())
    /// 
    /// 
    /// Clearing the accept flag indicates that the event receiver does not
    /// want the gesture. Unwanted gestures may be propagated to the parent widget.
    /// 
    /// **See also:** [`GestureEvent::accept`]
    /// 
    /// Clears the accept flag parameter of the given *gestureType,* the equivalent
    /// of calling [setAccepted(gesture, false)](QGestureEvent::setAccepted())
    /// 
    /// 
    /// Clearing the accept flag indicates that the event receiver does not
    /// want the gesture. Unwanted gestures may be propgated to the parent widget.
    /// 
    /// **See also:** [`GestureEvent::accept`]
    [org_name(ignore)]
    ignore_2(arg0: Rute::GestureType),
    /// 
    /// Returns `true` if the *gesture* is accepted; otherwise returns `false.`
    /// 
    /// Returns `true` if the gesture of type *gestureType* is accepted; otherwise
    /// returns `false.`
    [org_name(isAccepted)]
    is_accepted_2(arg0: Rute::GestureType) -> bool,
    set_widget(widget: *WidgetType),
    /// 
    /// Returns the widget on which the event occurred.
    widget() -> Widget?,
    /// 
    /// Returns the scene-local coordinates if the *gesturePoint* is inside a
    /// graphics view.
    /// 
    /// This functional might be useful when the gesture event is delivered to a
    /// QGraphicsObject to translate a point in screen coordinates to scene-local
    /// coordinates.
    /// 
    /// **See also:** [`PointF::is_null`]
    map_to_graphics_scene(gesture_point: &PointFType) -> PointF,
}

// vim: syntax=rust expandtab ts=4 sw=4
