///     \class QOpenGLShader
///     \brief The QOpenGLShader class allows OpenGL shaders to be compiled.
///     \since 5.0
///     \ingroup painting-3D
///     \inmodule QtGui
/// 
///     This class supports shaders written in the OpenGL Shading Language (GLSL)
///     and in the OpenGL/ES Shading Language (GLSL/ES).
/// 
///     QOpenGLShader and QOpenGLShaderProgram shelter the programmer from the details of
///     compiling and linking vertex and fragment shaders.
/// 
///     \sa QOpenGLShaderProgram
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QOpenGLShader)]
enum ShaderTypeBit {
    Vertex,
    Fragment,
    Geometry,
    TessellationControl,
    TessellationEvaluation,
    Compute,
}

struct OpenGLShader : Object {
    ///     Returns the type of this shader.
    shader_type() -> OpenGLShader::ShaderType,
    ///     \overload
    /// 
    ///     Sets the \a source code for this shader and compiles it.
    ///     Returns \c true if the source was successfully compiled, false otherwise.
    /// 
    ///     \sa compileSourceFile()
    compile_source_code(source: *char) -> bool,
    ///     \overload
    /// 
    ///     Sets the \a source code for this shader and compiles it.
    ///     Returns \c true if the source was successfully compiled, false otherwise.
    /// 
    ///     \sa compileSourceFile()
    compile_source_code(source: &ByteArrayType) -> bool,
    ///     \overload
    /// 
    ///     Sets the \a source code for this shader and compiles it.
    ///     Returns \c true if the source was successfully compiled, false otherwise.
    /// 
    ///     \sa compileSourceFile()
    compile_source_code(source: String) -> bool,
    ///     Sets the source code for this shader to the contents of \a fileName
    ///     and compiles it.  Returns \c true if the file could be opened and the
    ///     source compiled, false otherwise.
    /// 
    ///     \sa compileSourceCode()
    compile_source_file(file_name: String) -> bool,
    ///     Returns the source code for this shader.
    /// 
    ///     \sa compileSourceCode()
    source_code() -> ByteArray,
    ///     Returns \c true if this shader has been compiled; false otherwise.
    /// 
    ///     \sa compileSourceCode(), compileSourceFile()
    is_compiled() -> bool,
    ///     Returns the errors and warnings that occurred during the last compile.
    /// 
    ///     \sa compileSourceCode(), compileSourceFile()
    log() -> String,
    ///     Returns the OpenGL identifier associated with this shader.
    /// 
    ///     \sa QOpenGLShaderProgram::programId()
    shader_id() -> i32,
    ///     Returns \c true if shader programs of type \a type are supported on
    ///     this system; false otherwise.
    /// 
    ///     The \a context is used to resolve the GLSL extensions.
    ///     If \a context is null, then QOpenGLContext::currentContext() is used.
    [static] has_open_gl_shaders(type: OpenGLShader::ShaderType, context: *OpenGLContextType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
