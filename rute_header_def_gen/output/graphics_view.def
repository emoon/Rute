struct GraphicsView : AbstractScrollArea {
    [override] size_hint() -> SizeType,
    render_hints() -> Painter::RenderHints,
    set_render_hint(hint: Painter::RenderHint, enabled: bool),
    set_render_hints(hints: Painter::RenderHints),
    alignment() -> Rute::Alignment,
    set_alignment(alignment: Rute::Alignment),
    set_transformation_anchor(anchor: GraphicsView::ViewportAnchor),
    resize_anchor() -> GraphicsView::ViewportAnchor,
    set_resize_anchor(anchor: GraphicsView::ViewportAnchor),
    viewport_update_mode() -> GraphicsView::ViewportUpdateMode,
    set_viewport_update_mode(mode: GraphicsView::ViewportUpdateMode),
    optimization_flags() -> OptimizationFlags,
    set_optimization_flag(flag: GraphicsView::OptimizationFlag, enabled: bool),
    set_optimization_flags(flags: OptimizationFlags),
    drag_mode() -> GraphicsView::DragMode,
    set_drag_mode(mode: GraphicsView::DragMode),
    rubber_band_selection_mode() -> Rute::ItemSelectionMode,
    set_rubber_band_selection_mode(mode: Rute::ItemSelectionMode),
    rubber_band_rect() -> RectType,
    cache_mode() -> CacheMode,
    set_cache_mode(mode: CacheMode),
    reset_cached_content(),
    is_interactive() -> bool,
    set_interactive(allowed: bool),
    scene() -> &GraphicsSceneType,
    set_scene(scene: &GraphicsSceneType),
    scene_rect() -> RectFType,
    set_scene_rect(rect: &RectFType),
    set_scene_rect(x: f32, y: f32, w: f32, h: f32),
    viewport_transform() -> TransformType,
    is_transformed() -> bool,
    set_transform(matrix: &TransformType, combine: bool),
    reset_transform(),
    rotate(angle: f32),
    scale(sx: f32, sy: f32),
    shear(sh: f32, sv: f32),
    center_on(pos: &PointFType),
    center_on(x: f32, y: f32),
    center_on(item: &GraphicsItemType),
    ensure_visible(rect: &RectFType, xmargin: i32, ymargin: i32),
    ensure_visible(x: f32, y: f32, w: f32, h: f32, xmargin: i32, ymargin: i32),
    ensure_visible(item: &GraphicsItemType, xmargin: i32, ymargin: i32),
    fit_in_view(rect: &RectFType, aspect_radio_mode: Rute::AspectRatioMode),
    fit_in_view(x: f32, y: f32, w: f32, h: f32, aspect_radio_mode: Rute::AspectRatioMode),
    fit_in_view(item: &GraphicsItemType, aspect_radio_mode: Rute::AspectRatioMode),
    render(painter: &PainterType, target: &RectFType, source: &RectType, aspect_ratio_mode: Rute::AspectRatioMode),
    items() -> [&GraphicsItemType],
    items(pos: &PointType) -> [&GraphicsItemType],
    items(x: i32, y: i32) -> [&GraphicsItemType],
    items(rect: &RectType, mode: Rute::ItemSelectionMode) -> [&GraphicsItemType],
    items(x: i32, y: i32, w: i32, h: i32, mode: Rute::ItemSelectionMode) -> [&GraphicsItemType],
    items(polygon: &PolygonType, mode: Rute::ItemSelectionMode) -> [&GraphicsItemType],
    items(path: &PainterPathType, mode: Rute::ItemSelectionMode) -> [&GraphicsItemType],
    item_at(pos: &PointType) -> &GraphicsItemType,
    item_at(x: i32, y: i32) -> &GraphicsItemType,
    map_to_scene(point: &PointType) -> PointFType,
    map_to_scene(rect: &RectType) -> PolygonFType,
    map_to_scene(polygon: &PolygonType) -> PolygonFType,
    map_to_scene(path: &PainterPathType) -> PainterPathType,
    map_from_scene(point: &PointFType) -> PointType,
    map_from_scene(rect: &RectFType) -> PolygonType,
    map_from_scene(polygon: &PolygonFType) -> PolygonType,
    map_from_scene(path: &PainterPathType) -> PainterPathType,
    map_to_scene(x: i32, y: i32) -> PointFType,
    map_to_scene(x: i32, y: i32, w: i32, h: i32) -> PolygonFType,
    map_from_scene(x: f32, y: f32) -> PointType,
    map_from_scene(x: f32, y: f32, w: f32, h: f32) -> PolygonType,
    [override] input_method_query(query: Rute::InputMethodQuery) -> VariantType,
    background_brush() -> BrushType,
    set_background_brush(brush: &BrushType),
    foreground_brush() -> BrushType,
    set_foreground_brush(brush: &BrushType),
    update_scene(rects: [RectFType]),
    invalidate_scene(rect: &RectFType, layers: GraphicsScene::SceneLayers),
    update_scene_rect(rect: &RectFType),
    [event] rubber_band_changed(viewport_rect: RectType, from_scene_point: PointFType, to_scene_point: PointFType),
    [override] setup_viewport(widget: &WidgetType),
    [override] event(event: &EventType) -> bool,
    [override] viewport_event(event: &EventType) -> bool,
    [override] context_menu_event(event: &ContextMenuEventType),
    [override] drag_enter_event(event: &DragEnterEventType),
    [override] drag_leave_event(event: &DragLeaveEventType),
    [override] drag_move_event(event: &DragMoveEventType),
    [override] drop_event(event: &DropEventType),
    [override] focus_in_event(event: &FocusEventType),
    [override] focus_next_prev_child(next: bool) -> bool,
    [override] focus_out_event(event: &FocusEventType),
    [override] key_press_event(event: &KeyEventType),
    [override] key_release_event(event: &KeyEventType),
    [override] mouse_double_click_event(event: &MouseEventType),
    [override] mouse_press_event(event: &MouseEventType),
    [override] mouse_move_event(event: &MouseEventType),
    [override] mouse_release_event(event: &MouseEventType),
    [override] wheel_event(event: &WheelEventType),
    [override] paint_event(event: &PaintEventType),
    [override] resize_event(event: &ResizeEventType),
    [override] scroll_contents_by(dx: i32, dy: i32),
    [override] show_event(event: &ShowEventType),
    [override] input_method_event(event: &InputMethodEventType),
    [override] draw_background(painter: &PainterType, rect: &RectFType),
    [override] draw_foreground(painter: &PainterType, rect: &RectFType),
    [override] draw_items(painter: &PainterType, num_items: i32, items: &GraphicsItemType, options: StyleOptionGraphicsItemType),
}

// vim: syntax=rust expandtab ts=4 sw=4
