///     \class QGraphicsEllipseItem
///     \brief The QGraphicsEllipseItem class provides an ellipse item that you
///     can add to a QGraphicsScene.
///     \since 4.2
///     \ingroup graphicsview-api
///     \inmodule QtWidgets
/// 
///     QGraphicsEllipseItem respresents an ellipse with a fill and an outline,
///     and you can also use it for ellipse segments (see startAngle(),
///     spanAngle()).
/// 
///     \table
///         \row
///             \li \inlineimage graphicsview-ellipseitem.png
///             \li \inlineimage graphicsview-ellipseitem-pie.png
///     \endtable
/// 
///     To set the item's ellipse, pass a QRectF to QGraphicsEllipseItem's
///     constructor, or call setRect(). The rect() function returns the
///     current ellipse geometry.
/// 
///     QGraphicsEllipseItem uses the rect and the pen width to provide a
///     reasonable implementation of boundingRect(), shape(), and contains(). The
///     paint() function draws the ellipse using the item's associated pen and
///     brush, which you can set by calling setPen() and setBrush().
/// 
///     \sa QGraphicsPathItem, QGraphicsRectItem, QGraphicsPolygonItem,
///     QGraphicsTextItem, QGraphicsLineItem, QGraphicsPixmapItem, {Graphics
///     View Framework}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QGraphicsEllipseItem)]
enum GraphicsEllipseItemFixMeEnums {
    Type,
}

struct GraphicsEllipseItem : AbstractGraphicsShapeItem {
    ///     Returns the item's ellipse geometry as a QRectF.
    /// 
    ///     \sa setRect(), QPainter::drawEllipse()
    rect() -> RectF,
    ///     Sets the item's ellipse geometry to \a rect. The rectangle's left edge
    ///     defines the left edge of the ellipse, and the rectangle's top edge
    ///     describes the top of the ellipse. The height and width of the rectangle
    ///     describe the height and width of the ellipse.
    /// 
    ///     \sa rect(), QPainter::drawEllipse()
    set_rect(rect: &RectFType),
    ///     Sets the item's ellipse geometry to \a rect. The rectangle's left edge
    ///     defines the left edge of the ellipse, and the rectangle's top edge
    ///     describes the top of the ellipse. The height and width of the rectangle
    ///     describe the height and width of the ellipse.
    /// 
    ///     \sa rect(), QPainter::drawEllipse()
    set_rect(x: f32, y: f32, w: f32, h: f32),
    ///     Returns the start angle for an ellipse segment in 16ths of a degree. This
    ///     angle is used together with spanAngle() for representing an ellipse
    ///     segment (a pie). By default, the start angle is 0.
    /// 
    ///     \sa setStartAngle(), spanAngle()
    start_angle() -> i32,
    ///     Sets the start angle for an ellipse segment to \a angle, which is in 16ths
    ///     of a degree. This angle is used together with spanAngle() for representing
    ///     an ellipse segment (a pie). By default, the start angle is 0.
    /// 
    ///     \sa startAngle(), setSpanAngle(), QPainter::drawPie()
    set_start_angle(angle: i32),
    ///     Returns the span angle of an ellipse segment in 16ths of a degree. This
    ///     angle is used together with startAngle() for representing an ellipse
    ///     segment (a pie). By default, this function returns 5760 (360 * 16, a full
    ///     ellipse).
    /// 
    ///     \sa setSpanAngle(), startAngle()
    span_angle() -> i32,
    ///     Sets the span angle for an ellipse segment to \a angle, which is in 16ths
    ///     of a degree. This angle is used together with startAngle() to represent an
    ///     ellipse segment (a pie). By default, the span angle is 5760 (360 * 16, a
    ///     full ellipse).
    /// 
    ///     \sa spanAngle(), setStartAngle(), QPainter::drawPie()
    set_span_angle(angle: i32),
    ///     \reimp
    [event] bounding_rect() -> RectF,
    ///     \reimp
    [event] shape() -> PainterPath,
    ///     \reimp
    [event] contains(point: &PointFType) -> bool,
    [event] paint(painter: *PainterType, option: *StyleOptionGraphicsItemType, widget: *WidgetType),
    ///     \reimp
    [event] is_obscured_by(item: *GraphicsItemType) -> bool,
    ///     \reimp
    [event] opaque_area() -> PainterPath,
    ///     \reimp
    [event] type() -> i32,
    ///     \internal
    [event] supports_extension(extension: GraphicsItem::Extension) -> bool,
    ///     \internal
    [event] set_extension(extension: GraphicsItem::Extension, variant: &VariantType),
    ///     \internal
    [event] extension(variant: &VariantType) -> Variant,
}

// vim: syntax=rust expandtab ts=4 sw=4
