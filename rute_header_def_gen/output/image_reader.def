enum ImageReaderError {
    UnknownError,
    FileNotFoundError,
    DeviceError,
    UnsupportedFormatError,
    InvalidDataError,
}


struct ImageReader {
    set_format(format: &ByteArrayType),
    format() -> ByteArray,
    set_auto_detect_image_format(enabled: bool),
    auto_detect_image_format() -> bool,
    set_decide_format_from_content(ignored: bool),
    decide_format_from_content() -> bool,
    set_device(device: &IODeviceType),
    device() -> IODevice?,
    set_file_name(file_name: String),
    file_name() -> String,
    size() -> Size,
    image_format() -> Image::Format,
    text_keys() -> [String],
    text(key: String) -> String,
    set_clip_rect(rect: &RectType),
    clip_rect() -> Rect,
    set_scaled_size(size: &SizeType),
    scaled_size() -> Size,
    set_quality(quality: i32),
    quality() -> i32,
    set_scaled_clip_rect(rect: &RectType),
    scaled_clip_rect() -> Rect,
    set_background_color(color: &ColorType),
    background_color() -> Color,
    supports_animation() -> bool,
    set_auto_transform(enabled: bool),
    auto_transform() -> bool,
    set_gamma(gamma: f32),
    gamma() -> f32,
    sub_type() -> ByteArray,
    supported_sub_types() -> [ByteArray],
    can_read() -> bool,
    read() -> Image,
    read(image: &ImageType) -> bool,
    jump_to_next_image() -> bool,
    jump_to_image(image_number: i32) -> bool,
    loop_count() -> i32,
    image_count() -> i32,
    next_image_delay() -> i32,
    current_image_number() -> i32,
    current_image_rect() -> Rect,
    error() -> ImageReader::ImageReaderError,
    supports_option(option: ImageIOHandler::ImageOption) -> bool,
    [static] image_format(file_name: String) -> ByteArray,
    [static] image_format(device: &IODeviceType) -> ByteArray,
    [static] supported_image_formats() -> [ByteArray],
    [static] supported_mime_types() -> [ByteArray],
}

// vim: syntax=rust expandtab ts=4 sw=4
