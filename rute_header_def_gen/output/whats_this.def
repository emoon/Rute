/// 
/// help is part of an application's online help
/// system, and provides users with information about the
/// functionality and usage of a particular widget.
/// help texts are typically longer and more detailed than
/// [tooltips](QToolTip)
/// , but generally provide less information
/// than that supplied by separate help windows.
/// 
/// QWhatsThis provides a single window with an explanatory text that
/// pops up when the user asks . The default way for
/// users to ask the question is to move the focus to the relevant
/// widget and press Shift+F1. The help text appears immediately; it
/// goes away as soon as the user does something else.
/// (Note that if there is a shortcut for Shift+F1, this mechanism
/// will not work.) Some dialogs provide a button that users can
/// click to enter mode; they then click the relevant
/// widget to pop up the window. It is also possible to
/// provide a a menu option or toolbar button to switch into mode.
/// 
/// To add text to a widget or an action, you simply
/// call QWidget::setWhatsThis() or QAction::setWhatsThis().
/// 
/// The text can be either rich text or plain text. If you specify a
/// rich text formatted string, it will be rendered using the default
/// stylesheet, making it possible to embed images in the displayed
/// text. To be as fast as possible, the default stylesheet uses a
/// simple method to determine whether the text can be rendered as
/// plain text. See Qt::mightBeRichText() for details.
/// 
/// An alternative way to enter mode is to call
/// createAction(), and add the returned QAction to either a menu or
/// a tool bar. By invoking this context help action (in the picture
/// below, the button with the arrow and question mark icon) the user
/// switches into mode. If they now click on a widget
/// the appropriate help text is shown. The mode is left when help is
/// given or when the user presses Esc.
/// 
/// ![whatsthis.png](whatsthis.png)
/// 
/// You can enter mode programmatically with
/// enterWhatsThisMode(), check the mode with inWhatsThisMode(), and
/// return to normal mode with leaveWhatsThisMode().
/// 
/// If you want to control the behavior of a widget
/// manually see Qt::WA_CustomWhatsThis.
/// 
/// It is also possible to show different help texts for different
/// regions of a widget, by using a QHelpEvent of type
/// QEvent::WhatsThis. Intercept the help event in your widget's
/// QWidget::event() function and call QWhatsThis::showText() with the
/// text you want to display for the position specified in
/// QHelpEvent::pos(). If the text is rich text and the user clicks
/// on a link, the widget also receives a QWhatsThisClickedEvent with
/// the link's reference as QWhatsThisClickedEvent::href(). If a
/// QWhatsThisClickedEvent is handled (i.e. QWidget::event() returns
/// true), the help window remains visible. Call
/// QWhatsThis::hideText() to hide it explicitly.
/// 
/// **See also:** [`ToolTip`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct WhatsThis {
    /// 
    /// This function switches the user interface into
    /// mode. The user interface can be switched back into normal mode by
    /// the user (e.g. by them clicking or pressing Esc), or
    /// programmatically by calling leaveWhatsThisMode().
    /// 
    /// When entering mode, a QEvent of type
    /// Qt::EnterWhatsThisMode is sent to all toplevel widgets.
    /// 
    /// **See also:** [`in_whats_this_mode()`]
    /// [`leave_whats_this_mode()`]
    [static] enter_whats_this_mode(),
    /// 
    /// Returns `true` if the user interface is in mode;
    /// otherwise returns `false.`
    /// 
    /// **See also:** [`enter_whats_this_mode()`]
    [static] in_whats_this_mode() -> bool,
    /// 
    /// If the user interface is in mode, this function
    /// switches back to normal mode; otherwise it does nothing.
    /// 
    /// When leaving mode, a QEvent of type
    /// Qt::LeaveWhatsThisMode is sent to all toplevel widgets.
    /// 
    /// **See also:** [`enter_whats_this_mode()`]
    /// [`in_whats_this_mode()`]
    [static] leave_whats_this_mode(),
    /// 
    /// Shows *text* as a window, at global position *pos.* The optional widget argument, *w,* is used to determine the
    /// appropriate screen on multi-head systems.
    /// 
    /// **See also:** [`hide_text()`]
    [static] show_text(pos: &PointType, text: String, w: *WidgetType),
    /// 
    /// If a window is showing, this destroys it.
    /// 
    /// **See also:** [`show_text()`]
    [static] hide_text(),
    /// 
    /// Returns a ready-made QAction, used to invoke context
    /// help, with the given *parent.*
    /// 
    /// The returned QAction provides a convenient way to let users enter
    /// mode.
    [static] create_action(parent: *ObjectType) -> Action?,
}

// vim: syntax=rust expandtab ts=4 sw=4
