/// 
/// In applications many common commands can be invoked via menus,
/// toolbar buttons, and keyboard shortcuts. Since the user expects
/// each command to be performed in the same way, regardless of the
/// user interface used, it is useful to represent each command as
/// an *action.*
/// 
/// Actions can be added to menus and toolbars, and will
/// automatically keep them in sync. For example, in a word processor,
/// if the user presses a Bold toolbar button, the Bold menu item
/// will automatically be checked.
/// 
/// Actions can be created as independent objects, but they may
/// also be created during the construction of menus; the QMenu class
/// contains convenience functions for creating actions suitable for
/// use as menu items.
/// 
/// A QAction may contain an icon, menu text, a shortcut, status text,
/// text, and a tooltip. Most of these can be set in
/// the constructor. They can also be set independently with
/// setIcon(), setText(), setIconText(), setShortcut(),
/// setStatusTip(), setWhatsThis(), and setToolTip(). For menu items,
/// it is possible to set an individual font with setFont().
/// 
/// Actions are added to widgets using QWidget::addAction() or
/// QGraphicsWidget::addAction(). Note that an action must be added to a
/// widget before it can be used; this is also true when the shortcut should
/// be global (i.e., Qt::ApplicationShortcut as Qt::ShortcutContext).
/// 
/// Once a QAction has been created it should be added to the relevant
/// menu and toolbar, then connected to the slot which will perform
/// the action. For example:
/// 
/// We recommend that actions are created as children of the window
/// they are used in. In most cases actions will be children of
/// the application's main window.
/// 
/// **See also:** QMenu
/// QToolBar
/// {Application Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QAction)]
enum MenuRole {
    NoRole,
    TextHeuristicRole,
    ApplicationSpecificRole,
    AboutQtRole,
    AboutRole,
    PreferencesRole,
    QuitRole,
}

[org_name(QAction)]
enum Priority {
    LowPriority,
    NormalPriority,
    HighPriority,
}

[org_name(QAction)]
enum ActionEvent {
    Trigger,
    Hover,
}

struct Action : Object {
    /// 
    /// Sets this action group to *group.* The action will be automatically
    /// added to the group's list of actions.
    /// 
    /// Actions within the group will be mutually exclusive.
    /// 
    /// **See also:** QActionGroup
    /// QAction::actionGroup()
    set_action_group(group: *ActionGroupType),
    /// 
    /// Returns the action group for this action. If no action group manages
    /// this action then 0 will be returned.
    /// 
    /// **See also:** QActionGroup
    /// QAction::setActionGroup()
    action_group() -> ActionGroup?,
    set_icon(icon: &IconType),
    /// 
    /// In toolbars, the icon is used as the tool button icon; in menus,
    /// it is displayed to the left of the menu text. There is no default
    /// icon.
    /// 
    /// If a null icon (QIcon::isNull()) is passed into this function,
    /// the icon of the action is cleared.
    /// 
    /// If QToolBar::toolButtonStyle is set to a value that permits text to
    /// be displayed, the text defined held in this property appears as a
    /// label in the relevant tool button.
    /// 
    /// It also serves as the default text in menus and tooltips if the action
    /// has not been defined with setText() or setToolTip(), and will
    /// also be used in toolbar buttons if no icon has been defined using setIcon().
    /// 
    /// If the icon text is not explicitly set, the action's normal text will be
    /// used for the icon text.
    /// 
    /// By default, this property contains an empty string.
    /// 
    /// **See also:** setToolTip()
    /// setStatusTip()
    /// 
    /// In some applications, it may make sense to have actions with icons in the
    /// toolbar, but not in menus. If true, the icon (if valid) is shown in the menu, when it
    /// is false, it is not shown.
    /// 
    /// The default is to follow whether the Qt::AA_DontShowIconsInMenus attribute
    /// is set for the application. Explicitly settings this property overrides
    /// the presence (or abscence) of the attribute.
    /// 
    /// For example:
    /// 
    /// **See also:** QAction::icon
    /// QCoreApplication::setAttribute()
    icon() -> Icon,
    set_text(text: String),
    /// 
    /// If the action is added to a menu, the menu option will consist of
    /// the icon (if there is one), the text, and the shortcut (if there
    /// is one). If the text is not explicitly set in the constructor, or
    /// by using setText(), the action's description icon text will be
    /// used as text. There is no default text.
    /// 
    /// **See also:** iconText
    text() -> String,
    set_icon_text(text: String),
    /// 
    /// If QToolBar::toolButtonStyle is set to a value that permits text to
    /// be displayed, the text defined held in this property appears as a
    /// label in the relevant tool button.
    /// 
    /// It also serves as the default text in menus and tooltips if the action
    /// has not been defined with setText() or setToolTip(), and will
    /// also be used in toolbar buttons if no icon has been defined using setIcon().
    /// 
    /// If the icon text is not explicitly set, the action's normal text will be
    /// used for the icon text.
    /// 
    /// By default, this property contains an empty string.
    /// 
    /// **See also:** setToolTip()
    /// setStatusTip()
    icon_text() -> String,
    set_tool_tip(tip: String),
    /// 
    /// This text is used for the tooltip. If no tooltip is specified,
    /// the action's text is used.
    /// 
    /// By default, this property contains the action's text.
    /// 
    /// **See also:** setStatusTip()
    /// setShortcut()
    tool_tip() -> String,
    set_status_tip(status_tip: String),
    /// 
    /// The status tip is displayed on all status bars provided by the
    /// action's top-level parent widget.
    /// 
    /// By default, this property contains an empty string.
    /// 
    /// **See also:** setToolTip()
    /// showStatusText()
    status_tip() -> String,
    set_whats_this(what: String),
    /// 
    /// The text is used to provide a brief description of
    /// the action. The text may contain rich text. There is no default
    /// text.
    /// 
    /// **See also:** QWhatsThis
    whats_this() -> String,
    set_priority(priority: Action::Priority),
    /// 
    /// This property can be set to indicate how the action should be prioritized
    /// in the user interface.
    /// 
    /// For instance, when toolbars have the Qt::ToolButtonTextBesideIcon
    /// mode set, then actions with LowPriority will not show the text
    /// labels.
    priority() -> Action::Priority,
    /// 
    /// Returns the menu contained by this action. Actions that contain
    /// menus can be used to create menu items with submenus, or inserted
    /// into toolbars to create buttons with popup menus.
    /// 
    /// **See also:** QMenu::addAction()
    /// 
    /// This indicates what role the action serves in the application menu on
    /// MacOS . By default all actions have the TextHeuristicRole, which means that
    /// the action is added based on its text (see QMenuBar for more information).
    /// 
    /// The menu role can only be changed before the actions are put into the menu
    /// bar in MacOS (usually just before the first application window is
    /// shown).
    menu() -> Menu?,
    /// 
    /// Sets the menu contained by this action to the specified *menu.*
    set_menu(menu: *MenuType),
    /// 
    /// If *b* is true then this action will be considered a separator.
    /// 
    /// How a separator is represented depends on the widget it is inserted
    /// into. Under most circumstances the text, submenu, and icon will be
    /// ignored for separator actions.
    /// 
    /// **See also:** QAction::isSeparator()
    set_separator(b: bool),
    /// 
    /// Returns `true` if this action is a separator action; otherwise it
    /// returns `false.`
    /// 
    /// **See also:** QAction::setSeparator()
    is_separator() -> bool,
    /// 
    /// Sets *shortcuts* as the list of shortcuts that trigger the
    /// action. The first element of the list is the primary shortcut.
    /// 
    /// **See also:** shortcut
    /// 
    /// Sets a platform dependent list of shortcuts based on the *key.*
    /// The result of calling this function will depend on the currently running platform.
    /// Note that more than one shortcut can assigned by this action.
    /// If only the primary shortcut is required, use setShortcut instead.
    /// 
    /// **See also:** QKeySequence::keyBindings()
    set_shortcut(shortcut: &KeySequenceType),
    /// 
    /// Valid keycodes for this property can be found in [Qt::Key](Qt::Key)
    /// and
    /// [Qt::Modifier.](Qt::Modifier.)
    /// There is no default shortcut key.
    /// 
    /// Returns the primary shortcut.
    /// 
    /// **See also:** setShortcuts()
    /// 
    /// Returns the list of shortcuts, with the primary shortcut as
    /// the first element of the list.
    /// 
    /// **See also:** setShortcuts()
    /// 
    /// Valid values for this property can be found in [Qt::ShortcutContext.](Qt::ShortcutContext.)
    /// 
    /// The default value is Qt::WindowShortcut.
    /// 
    /// In some applications, it may make sense to have actions with shortcuts in
    /// context menus. If true, the shortcut (if valid) is shown when the action is
    /// shown via a context menu, when it is false, it is not shown.
    /// 
    /// The default is to follow whether the Qt::AA_DontShowShortcutsInContextMenus attribute
    /// is set for the application, falling back to the widget style hint.
    /// Explicitly setting this property overrides the presence (or abscence) of the attribute.
    /// 
    /// **See also:** QAction::shortcut
    /// QCoreApplication::setAttribute()
    shortcut() -> KeySequence,
    /// 
    /// Sets *shortcuts* as the list of shortcuts that trigger the
    /// action. The first element of the list is the primary shortcut.
    /// 
    /// **See also:** shortcut
    /// 
    /// Sets a platform dependent list of shortcuts based on the *key.*
    /// The result of calling this function will depend on the currently running platform.
    /// Note that more than one shortcut can assigned by this action.
    /// If only the primary shortcut is required, use setShortcut instead.
    /// 
    /// **See also:** QKeySequence::keyBindings()
    set_shortcuts(shortcuts: [KeySequenceType]),
    /// 
    /// Sets *shortcuts* as the list of shortcuts that trigger the
    /// action. The first element of the list is the primary shortcut.
    /// 
    /// **See also:** shortcut
    /// 
    /// Sets a platform dependent list of shortcuts based on the *key.*
    /// The result of calling this function will depend on the currently running platform.
    /// Note that more than one shortcut can assigned by this action.
    /// If only the primary shortcut is required, use setShortcut instead.
    /// 
    /// **See also:** QKeySequence::keyBindings()
    set_shortcuts(arg0: KeySequence::StandardKey),
    /// 
    /// Returns the list of shortcuts, with the primary shortcut as
    /// the first element of the list.
    /// 
    /// **See also:** setShortcuts()
    shortcuts() -> [KeySequence],
    set_shortcut_context(context: Rute::ShortcutContext),
    /// 
    /// Valid values for this property can be found in [Qt::ShortcutContext.](Qt::ShortcutContext.)
    /// 
    /// The default value is Qt::WindowShortcut.
    shortcut_context() -> Rute::ShortcutContext,
    set_auto_repeat(arg0: bool),
    /// 
    /// If true, the action will auto repeat when the keyboard shortcut
    /// combination is held down, provided that keyboard auto repeat is
    /// enabled on the system.
    /// The default value is true.
    auto_repeat() -> bool,
    set_font(font: &FontType),
    /// 
    /// The font property is used to render the text set on the
    /// QAction. The font will can be considered a hint as it will not be
    /// consulted in all cases based upon application and style.
    /// 
    /// By default, this property contains the application's default font.
    /// 
    /// **See also:** QAction::setText()
    /// QStyle
    font() -> Font,
    set_checkable(arg0: bool),
    is_checkable() -> bool,
    /// 
    /// Returns the user data as set in QAction::setData.
    /// 
    /// **See also:** setData()
    data() -> Variant,
    /// 
    /// Sets the action's internal data to the given *userData.*
    /// 
    /// **See also:** data()
    set_data(var: &VariantType),
    is_checked() -> bool,
    is_enabled() -> bool,
    is_visible() -> bool,
    /// 
    /// Sends the relevant signals for ActionEvent *event.*
    /// 
    /// Action based widgets use this API to cause the QAction
    /// to emit signals as well as emitting their own.
    activate(event: Action::ActionEvent),
    /// 
    /// Updates the relevant status bar for the *widget* specified by sending a
    /// QStatusTipEvent to its parent widget. Returns `true` if an event was sent;
    /// otherwise returns `false.`
    /// 
    /// If a null widget is specified, the event is sent to the action's parent.
    /// 
    /// **See also:** statusTip
    show_status_text(widget: *WidgetType) -> bool,
    set_menu_role(menu_role: Action::MenuRole),
    /// 
    /// This indicates what role the action serves in the application menu on
    /// MacOS . By default all actions have the TextHeuristicRole, which means that
    /// the action is added based on its text (see QMenuBar for more information).
    /// 
    /// The menu role can only be changed before the actions are put into the menu
    /// bar in MacOS (usually just before the first application window is
    /// shown).
    menu_role() -> Action::MenuRole,
    set_icon_visible_in_menu(visible: bool),
    is_icon_visible_in_menu() -> bool,
    set_shortcut_visible_in_context_menu(show: bool),
    is_shortcut_visible_in_context_menu() -> bool,
    /// 
    /// Returns the parent widget.
    parent_widget() -> Widget?,
    /// 
    /// Returns a list of widgets this action has been added to.
    /// 
    /// **See also:** QWidget::addAction()
    /// associatedGraphicsWidgets()
    associated_widgets() -> [Widget?],
    /// 
    /// Returns a list of widgets this action has been added to.
    /// 
    /// **See also:** QWidget::addAction()
    /// associatedWidgets()
    associated_graphics_widgets() -> [GraphicsWidget?],
    /// 
    [event] event(arg0: *EventType) -> bool,
    /// 
    /// This is a convenience slot that calls activate(Hover).
    /// 
    /// This signal is emitted when an action is highlighted by the user;
    /// for example, when the user pauses with the cursor over a menu option,
    /// toolbar button, or presses an action's shortcut key combination.
    /// 
    /// **See also:** QAction::activate()
    hover(),
    set_checked(arg0: bool),
    /// 
    /// This is a convenience function for the [checked](checked)
    /// property.
    /// Connect to it to change the checked state to its opposite state.
    /// 
    /// This signal is emitted whenever a checkable action changes its
    /// isChecked() status. This can be the result of a user interaction,
    /// or because setChecked() was called. As setChecked() changes the
    /// QAction, it emits changed() in addition to toggled().
    /// 
    /// *checked* is true if the action is checked, or false if the
    /// action is unchecked.
    /// 
    /// **See also:** QAction::activate()
    /// QAction::triggered()
    /// checked
    toggle(),
    set_enabled(arg0: bool),
    /// 
    /// This is a convenience function for the [enabled](enabled)
    /// property, that
    /// is useful for signals--slots connections. If *b* is true the
    /// action is disabled; otherwise it is enabled.
    set_disabled(b: bool),
    set_visible(arg0: bool),
    /// 
    /// This signal is emitted when an action has changed. If you
    /// are only interested in actions in a given widget, you can
    /// watch for QWidget::actionEvent() sent with an
    /// QEvent::ActionChanged.
    /// 
    /// **See also:** QWidget::actionEvent()
    [signal] changed(),
    /// 
    /// This signal is emitted when an action is highlighted by the user;
    /// for example, when the user pauses with the cursor over a menu option,
    /// toolbar button, or presses an action's shortcut key combination.
    /// 
    /// **See also:** QAction::activate()
    [signal] hovered(),
    /// 
    /// This signal is emitted whenever a checkable action changes its
    /// isChecked() status. This can be the result of a user interaction,
    /// or because setChecked() was called. As setChecked() changes the
    /// QAction, it emits changed() in addition to toggled().
    /// 
    /// *checked* is true if the action is checked, or false if the
    /// action is unchecked.
    /// 
    /// **See also:** QAction::activate()
    /// QAction::triggered()
    /// checked
    [signal] toggled(arg0: bool),
}

// vim: syntax=rust expandtab ts=4 sw=4
