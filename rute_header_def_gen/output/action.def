#[org_name(QAction)]
enum MenuRole {
    NoRole,
    TextHeuristicRole,
    ApplicationSpecificRole,
    AboutQtRole,
    AboutRole,
    PreferencesRole,
    QuitRole,
}

#[org_name(QAction)]
enum Priority {
    LowPriority,
    NormalPriority,
    HighPriority,
}

#[org_name(QAction)]
enum ActionEvent {
    Trigger,
    Hover,
}

struct Action : Object {
    set_action_group(group: &ActionGroupType),
    action_group() -> ActionGroup?,
    set_icon(icon: &IconType),
    icon() -> Icon,
    set_text(text: String),
    text() -> String,
    set_icon_text(text: String),
    icon_text() -> String,
    set_tool_tip(tip: String),
    tool_tip() -> String,
    set_status_tip(status_tip: String),
    status_tip() -> String,
    set_whats_this(what: String),
    whats_this() -> String,
    set_priority(priority: Action::Priority),
    priority() -> Action::Priority,
    menu() -> Menu?,
    set_menu(menu: &MenuType),
    set_separator(b: bool),
    is_separator() -> bool,
    set_shortcut(shortcut: &KeySequenceType),
    shortcut() -> KeySequence,
    set_shortcuts(shortcuts: [KeySequenceType]),
    set_shortcuts(arg0: KeySequence::StandardKey),
    shortcuts() -> [KeySequence],
    set_shortcut_context(context: Rute::ShortcutContext),
    shortcut_context() -> Rute::ShortcutContext,
    set_auto_repeat(arg0: bool),
    auto_repeat() -> bool,
    set_font(font: &FontType),
    font() -> Font,
    set_checkable(arg0: bool),
    is_checkable() -> bool,
    data() -> Variant,
    set_data(var: &VariantType),
    is_checked() -> bool,
    is_enabled() -> bool,
    is_visible() -> bool,
    activate(event: Action::ActionEvent),
    show_status_text(widget: &WidgetType) -> bool,
    set_menu_role(menu_role: Action::MenuRole),
    menu_role() -> Action::MenuRole,
    set_icon_visible_in_menu(visible: bool),
    is_icon_visible_in_menu() -> bool,
    set_shortcut_visible_in_context_menu(show: bool),
    is_shortcut_visible_in_context_menu() -> bool,
    parent_widget() -> Widget?,
    associated_widgets() -> [Widget?],
    associated_graphics_widgets() -> [GraphicsWidget?],
    [replace] event(arg0: &EventType) -> bool,
    hover(),
    set_checked(arg0: bool),
    toggle(),
    set_enabled(arg0: bool),
    set_disabled(b: bool),
    set_visible(arg0: bool),
    [event] changed(),
    [event] hovered(),
    [event] toggled(arg0: bool),
}

// vim: syntax=rust expandtab ts=4 sw=4
