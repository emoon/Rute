///     \class QPixelFormat
///     \inmodule QtGui
///     \since 5.4
///     \brief QPixelFormat is a class for describing different pixel
///     layouts in graphics buffers.
/// 
///     In Qt there is a often a need to represent the layout of the pixels in a
///     graphics buffer. Internally QPixelFormat stores everything in a 64 bit
///     datastructure. This gives performance but also some limitations.
/// 
///     QPixelFormat can describe 5 color channels and 1 alpha channel, each can use
///     6 bits to describe the size of the color channel.
/// 
///     The position of the alpha channel is described with a separate enum. This is
///     to make it possible to describe QImage formats like ARGB32, and also
///     describe typical OpenGL formats like RBGA8888.
/// 
///     How pixels are suppose to be read is determined by the TypeInterpretation
///     enum.  It describes if color values are suppose to be read byte per byte,
///     or if a pixel is suppose to be read as a complete int and then masked.
///     \sa TypeInterpretation
/// 
///     There is no support for describing YUV's macro pixels. Instead a list of YUV
///     formats has been made. When a QPixelFormat is describing a YUV format, the
///     bitsPerPixel value has been deduced by the YUV Layout enum. Also, the color
///     channels should all be set to zero except the fifth color channel that
///     should store the bitsPerPixel value.
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QPixelFormat)]
enum FieldWidth {
    ModelFieldWidth,
    FirstFieldWidth,
    SecondFieldWidth,
    ThirdFieldWidth,
    FourthFieldWidth,
    FifthFieldWidth,
    AlphaFieldWidth,
    AlphaUsageFieldWidth,
    AlphaPositionFieldWidth,
    PremulFieldWidth,
    TypeInterpretationFieldWidth,
    ByteOrderFieldWidth,
    SubEnumFieldWidth,
    UnusedFieldWidth,
    TotalFieldWidthByWidths,
}

[org_name(QPixelFormat)]
enum Field {
    ModelField,
    FirstField,
    SecondField,
    ThirdField,
    FourthField,
    FifthField,
    AlphaField,
    AlphaUsageField,
    AlphaPositionField,
    PremulField,
    TypeInterpretationField,
    ByteOrderField,
    SubEnumField,
    UnusedField,
    TotalFieldWidthByOffsets,
}

[org_name(QPixelFormat)]
enum ColorModel {
    RGB,
    BGR,
    Indexed,
    Grayscale,
    CMYK,
    HSL,
    HSV,
    YUV,
    Alpha,
}

[org_name(QPixelFormat)]
enum AlphaUsage {
    UsesAlpha,
    IgnoresAlpha,
}

[org_name(QPixelFormat)]
enum AlphaPosition {
    AtBeginning,
    AtEnd,
}

[org_name(QPixelFormat)]
enum AlphaPremultiplied {
    NotPremultiplied,
    Premultiplied,
}

[org_name(QPixelFormat)]
enum TypeInterpretation {
    UnsignedInteger,
    UnsignedShort,
    UnsignedByte,
    FloatingPoint,
}

[org_name(QPixelFormat)]
enum YUVLayout {
    YUV444,
    YUV422,
    YUV411,
    YUV420P,
    YUV420SP,
    YV12,
    UYVY,
    YUYV,
    NV12,
    NV21,
    IMC1,
    IMC2,
    IMC3,
    IMC4,
    Y8,
    Y16,
}

[org_name(QPixelFormat)]
enum ByteOrder {
    LittleEndian,
    BigEndian,
    CurrentSystemEndian,
}


struct PixelFormat {
    get(offset: PixelFormat::Field, width: PixelFormat::FieldWidth) -> uchar,
    [static] set(offset: PixelFormat::Field, width: PixelFormat::FieldWidth, value: uchar) -> quint64,
    color_model() -> PixelFormat::ColorModel,
    channel_count() -> uchar,
    red_size() -> uchar,
    green_size() -> uchar,
    blue_size() -> uchar,
    cyan_size() -> uchar,
    magenta_size() -> uchar,
    yellow_size() -> uchar,
    black_size() -> uchar,
    hue_size() -> uchar,
    saturation_size() -> uchar,
    lightness_size() -> uchar,
    brightness_size() -> uchar,
    alpha_size() -> uchar,
    bits_per_pixel() -> uchar,
    alpha_usage() -> PixelFormat::AlphaUsage,
    alpha_position() -> PixelFormat::AlphaPosition,
    premultiplied() -> PixelFormat::AlphaPremultiplied,
    type_interpretation() -> PixelFormat::TypeInterpretation,
    byte_order() -> PixelFormat::ByteOrder,
    yuv_layout() -> PixelFormat::YUVLayout,
    sub_enum() -> uchar,
}

// vim: syntax=rust expandtab ts=4 sw=4
