/// 
/// When a QGraphicsView receives a QMouseEvent, it translates it to a
/// QGraphicsSceneMouseEvent. The event is then forwarded to the
/// QGraphicsScene associated with the view. If the event is not
/// handled by the scene, the view may use it, e.g., for the
/// [DragMode](QGraphicsView::)
/// 
/// 
/// In addition to containing the item, scene, and screen coordinates
/// of the event (as pos(), scenePos(), and screenPos()), mouse
/// events also contain the coordinates of the previous mouse
/// event received by the view. These can be retrieved with
/// lastPos(), lastScreenPos(), and lastScenePos().
/// 
/// **See also:** [`GraphicsSceneContextMenuEvent`]
/// [`GraphicsSceneHoverEvent`]
/// [`GraphicsSceneWheelEvent`]
/// [`MouseEvent`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GraphicsSceneMouseEvent : GraphicsSceneEvent {
    /// 
    /// Returns the mouse cursor position in item coordinates.
    /// 
    /// **See also:** [`scene_pos()`]
    /// [`screen_pos()`]
    /// [`last_pos()`]
    pos() -> PointF,
    set_pos(pos: &PointFType),
    /// 
    /// Returns the mouse cursor position in scene coordinates.
    /// 
    /// **See also:** [`pos()`]
    /// [`screen_pos()`]
    /// [`last_scene_pos()`]
    scene_pos() -> PointF,
    set_scene_pos(pos: &PointFType),
    /// 
    /// Returns the mouse cursor position in screen coordinates.
    /// 
    /// **See also:** [`pos()`]
    /// [`scene_pos()`]
    /// [`last_screen_pos()`]
    screen_pos() -> Point,
    set_screen_pos(pos: &PointType),
    /// 
    /// Returns the mouse cursor position in item coordinates where the specified
    /// *button* was clicked.
    /// 
    /// **See also:** [`button_down_scene_pos()`]
    /// [`button_down_screen_pos()`]
    /// [`pos()`]
    button_down_pos(button: Rute::MouseButton) -> PointF,
    set_button_down_pos(button: Rute::MouseButton, pos: &PointFType),
    /// 
    /// Returns the mouse cursor position in scene coordinates where the
    /// specified *button* was clicked.
    /// 
    /// **See also:** [`button_down_pos()`]
    /// [`button_down_screen_pos()`]
    /// [`scene_pos()`]
    button_down_scene_pos(button: Rute::MouseButton) -> PointF,
    set_button_down_scene_pos(button: Rute::MouseButton, pos: &PointFType),
    /// 
    /// Returns the mouse cursor position in screen coordinates where the
    /// specified *button* was clicked.
    /// 
    /// **See also:** [`screen_pos()`]
    /// [`button_down_pos()`]
    /// [`button_down_scene_pos()`]
    button_down_screen_pos(button: Rute::MouseButton) -> Point,
    set_button_down_screen_pos(button: Rute::MouseButton, pos: &PointType),
    /// 
    /// Returns the last recorded mouse cursor position in item
    /// coordinates.
    /// 
    /// **See also:** [`last_scene_pos()`]
    /// [`last_screen_pos()`]
    /// [`pos()`]
    last_pos() -> PointF,
    set_last_pos(pos: &PointFType),
    /// 
    /// Returns the last recorded mouse cursor position in scene
    /// coordinates. The last recorded position is the position of
    /// the previous mouse event received by the view that created
    /// the event.
    /// 
    /// **See also:** [`last_pos()`]
    /// [`last_screen_pos()`]
    /// [`scene_pos()`]
    last_scene_pos() -> PointF,
    set_last_scene_pos(pos: &PointFType),
    /// 
    /// Returns the last recorded mouse cursor position in screen
    /// coordinates. The last recorded position is the position of
    /// the previous mouse event received by the view that created
    /// the event.
    /// 
    /// **See also:** [`last_pos()`]
    /// [`last_scene_pos()`]
    /// [`screen_pos()`]
    last_screen_pos() -> Point,
    set_last_screen_pos(pos: &PointType),
    /// 
    /// Returns the combination of mouse buttons that were pressed at the
    /// time the event was sent.
    /// 
    /// **See also:** [`button()`]
    /// [`modifiers()`]
    buttons() -> Rute::MouseButtons,
    set_buttons(buttons: Rute::MouseButtons),
    /// 
    /// Returns the mouse cursor position in item coordinates where the specified
    /// *button* was clicked.
    /// 
    /// **See also:** [`button_down_scene_pos()`]
    /// [`button_down_screen_pos()`]
    /// [`pos()`]
    /// 
    /// Returns the mouse cursor position in scene coordinates where the
    /// specified *button* was clicked.
    /// 
    /// **See also:** [`button_down_pos()`]
    /// [`button_down_screen_pos()`]
    /// [`scene_pos()`]
    /// 
    /// Returns the mouse cursor position in screen coordinates where the
    /// specified *button* was clicked.
    /// 
    /// **See also:** [`screen_pos()`]
    /// [`button_down_pos()`]
    /// [`button_down_scene_pos()`]
    /// 
    /// Returns the combination of mouse buttons that were pressed at the
    /// time the event was sent.
    /// 
    /// **See also:** [`button()`]
    /// [`modifiers()`]
    /// 
    /// Returns the mouse button (if any) that caused the event.
    /// 
    /// **See also:** [`buttons()`]
    /// [`modifiers()`]
    button() -> Rute::MouseButton,
    set_button(button: Rute::MouseButton),
    /// 
    /// Returns the keyboard modifiers in use at the time the event was
    /// sent.
    /// 
    /// **See also:** [`buttons()`]
    /// [`button()`]
    modifiers() -> Rute::KeyboardModifiers,
    set_modifiers(modifiers: Rute::KeyboardModifiers),
    /// 
    /// Returns information about the mouse event source.
    /// 
    /// The mouse event source can be used to distinguish between genuine
    /// and artificial mouse events. The latter are events that are
    /// synthesized from touch events by the operating system or Qt itself.
    /// 
    /// **See also:** [`t::mouse_event_source()`]
    /// **See also:** [`MouseEvent::source`]
    source() -> Rute::MouseEventSource,
    set_source(source: Rute::MouseEventSource),
    /// 
    /// Returns the mouse event flags.
    /// 
    /// The mouse event flags provide additional information about a mouse event.
    /// 
    /// **See also:** [`t::mouse_event_flag()`]
    /// **See also:** [`MouseEvent::flags`]
    flags() -> Rute::MouseEventFlags,
    set_flags(arg0: Rute::MouseEventFlags),
}

// vim: syntax=rust expandtab ts=4 sw=4
