///     \class QGraphicsSceneMouseEvent
///     \brief The QGraphicsSceneMouseEvent class provides mouse events
///            in the graphics view framework.
///     \since 4.2
///     \ingroup graphicsview-api
///     \inmodule QtWidgets
/// 
///     When a QGraphicsView receives a QMouseEvent, it translates it to a
///     QGraphicsSceneMouseEvent. The event is then forwarded to the
///     QGraphicsScene associated with the view. If the event is not
///     handled by the scene, the view may use it, e.g., for the
///     \l{QGraphicsView::}{DragMode}.
/// 
///     In addition to containing the item, scene, and screen coordinates
///     of the event (as pos(), scenePos(), and screenPos()), mouse
///     events also contain the coordinates of the previous mouse
///     event received by the view. These can be retrieved with
///     lastPos(), lastScreenPos(), and lastScenePos().
/// 
///     \sa QGraphicsSceneContextMenuEvent,
///         QGraphicsSceneHoverEvent, QGraphicsSceneWheelEvent,
///         QMouseEvent
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GraphicsSceneMouseEvent : GraphicsSceneEvent {
    ///     Returns the mouse cursor position in item coordinates.
    /// 
    ///     \sa scenePos(), screenPos(), lastPos()
    pos() -> PointF,
    ///     \internal
    set_pos(pos: &PointFType),
    ///     Returns the mouse cursor position in scene coordinates.
    /// 
    ///     \sa pos(), screenPos(), lastScenePos()
    scene_pos() -> PointF,
    ///     \internal
    set_scene_pos(pos: &PointFType),
    ///     Returns the mouse cursor position in screen coordinates.
    /// 
    ///     \sa pos(), scenePos(), lastScreenPos()
    screen_pos() -> Point,
    ///     \internal
    set_screen_pos(pos: &PointType),
    ///     Returns the mouse cursor position in item coordinates where the specified
    ///     \a button was clicked.
    /// 
    ///     \sa buttonDownScenePos(), buttonDownScreenPos(), pos()
    button_down_pos(button: Rute::MouseButton) -> PointF,
    ///     \internal
    set_button_down_pos(button: Rute::MouseButton, pos: &PointFType),
    ///     Returns the mouse cursor position in scene coordinates where the
    ///     specified \a button was clicked.
    /// 
    ///     \sa buttonDownPos(), buttonDownScreenPos(), scenePos()
    button_down_scene_pos(button: Rute::MouseButton) -> PointF,
    ///     \internal
    set_button_down_scene_pos(button: Rute::MouseButton, pos: &PointFType),
    ///     Returns the mouse cursor position in screen coordinates where the
    ///     specified \a button was clicked.
    /// 
    ///     \sa screenPos(), buttonDownPos(), buttonDownScenePos()
    button_down_screen_pos(button: Rute::MouseButton) -> Point,
    ///     \internal
    set_button_down_screen_pos(button: Rute::MouseButton, pos: &PointType),
    ///     Returns the last recorded mouse cursor position in item
    ///     coordinates.
    /// 
    ///     \sa lastScenePos(), lastScreenPos(), pos()
    last_pos() -> PointF,
    ///     \internal
    set_last_pos(pos: &PointFType),
    ///     Returns the last recorded mouse cursor position in scene
    ///     coordinates. The last recorded position is the position of
    ///     the previous mouse event received by the view that created
    ///     the event.
    /// 
    ///     \sa lastPos(), lastScreenPos(), scenePos()
    last_scene_pos() -> PointF,
    ///     \internal
    set_last_scene_pos(pos: &PointFType),
    ///     Returns the last recorded mouse cursor position in screen
    ///     coordinates. The last recorded position is the position of
    ///     the previous mouse event received by the view that created
    ///     the event.
    /// 
    ///     \sa lastPos(), lastScenePos(), screenPos()
    last_screen_pos() -> Point,
    ///     \internal
    set_last_screen_pos(pos: &PointType),
    ///     Returns the combination of mouse buttons that were pressed at the
    ///     time the event was sent.
    /// 
    ///     \sa button(), modifiers()
    buttons() -> Rute::MouseButtons,
    ///     \internal
    set_buttons(buttons: Rute::MouseButtons),
    ///     Returns the mouse button (if any) that caused the event.
    /// 
    ///     \sa buttons(), modifiers()
    button() -> Rute::MouseButton,
    ///     \internal
    set_button(button: Rute::MouseButton),
    ///     Returns the keyboard modifiers in use at the time the event was
    ///     sent.
    /// 
    ///     \sa buttons(), button()
    modifiers() -> Rute::KeyboardModifiers,
    ///     \internal
    set_modifiers(modifiers: Rute::KeyboardModifiers),
    source() -> Rute::MouseEventSource,
    set_source(source: Rute::MouseEventSource),
    flags() -> Rute::MouseEventFlags,
    set_flags(arg0: Rute::MouseEventFlags),
}

// vim: syntax=rust expandtab ts=4 sw=4
