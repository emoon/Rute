/// 
/// A wizard (also called an assistant on MacOS ) is a special type
/// of input dialog that consists of a sequence of pages. A wizard's
/// purpose is to guide the user through a process step by step.
/// Wizards are useful for complex or infrequent tasks that users may
/// find difficult to learn.
/// 
/// QWizard inherits QDialog and represents a wizard. Each page is a
/// QWizardPage (a QWidget subclass). To create your own wizards, you
/// can use these classes directly, or you can subclass them for more
/// control.
/// 
/// Topics:
/// 
/// # A Trivial Example
/// 
/// The following example illustrates how to create wizard pages and
/// add them to a wizard. For more advanced examples, see
/// [Class Wizard](dialogs/classwizard)
/// and [License
/// Wizard](dialogs/licensewizard)
/// 
/// 
/// ...
/// 
/// # Wizard Look and Feel
/// 
/// QWizard supports four wizard looks:
/// 
/// * ClassicStyle
/// * ModernStyle
/// * MacStyle
/// * AeroStyle
/// 
/// You can explicitly set the look to use using setWizardStyle()
/// (e.g., if you want the same look on all platforms).
/// 
/// * ClassicStyle
/// * ModernStyle
/// * MacStyle
/// * AeroStyle
/// * ![qtwizard-classic1.png](qtwizard-classic1.png)
/// 
/// * ![qtwizard-modern1.png](qtwizard-modern1.png)
/// 
/// * ![qtwizard-mac1.png](qtwizard-mac1.png)
/// 
/// * ![qtwizard-aero1.png](qtwizard-aero1.png)
/// 
/// * ![qtwizard-classic2.png](qtwizard-classic2.png)
/// 
/// * ![qtwizard-modern2.png](qtwizard-modern2.png)
/// 
/// * ![qtwizard-mac2.png](qtwizard-mac2.png)
/// 
/// * ![qtwizard-aero2.png](qtwizard-aero2.png)
/// 
/// Note: AeroStyle has effect only on a Windows Vista system with alpha compositing enabled.
/// ModernStyle is used as a fallback when this condition is not met.
/// 
/// In addition to the wizard style, there are several options that
/// control the look and feel of the wizard. These can be set using
/// setOption() or setOptions(). For example, HaveHelpButton makes
/// QWizard show a **Help** button along with the other wizard
/// buttons.
/// 
/// You can even change the order of the wizard buttons to any
/// arbitrary order using setButtonLayout(), and you can add up to
/// three custom buttons (e.g., a **Print** button) to the button
/// row. This is achieved by calling setButton() or setButtonText()
/// with CustomButton1, CustomButton2, or CustomButton3 to set up the
/// button, and by enabling the HaveCustomButton1, HaveCustomButton2,
/// or HaveCustomButton3 options. Whenever the user clicks a custom
/// button, customButtonClicked() is emitted. For example:
/// 
/// # Elements of a Wizard Page
/// 
/// Wizards consist of a sequence of [QWizardPage](QWizardPage)
/// s. At any time,
/// only one page is shown. A page has the following attributes:
/// 
/// * A [title](QWizardPage::)
/// 
/// * A [subTitle](QWizardPage::)
/// 
/// * A set of pixmaps, which may or may not be honored, depending on the wizard's style:
/// * WatermarkPixmap (used by ClassicStyle and ModernStyle)
/// * BannerPixmap (used by ModernStyle)
/// * LogoPixmap (used by ClassicStyle and ModernStyle)
/// * BackgroundPixmap (used by MacStyle)
/// 
/// The diagram belows shows how QWizard renders these attributes,
/// assuming they are all present and ModernStyle is used:
/// 
/// ![qtwizard-nonmacpage.png](qtwizard-nonmacpage.png)
/// 
/// When a [subTitle](QWizardPage::)
/// is set, QWizard displays it
/// in a header, in which case it also uses the BannerPixmap and the
/// LogoPixmap to decorate the header. The WatermarkPixmap is
/// displayed on the left side, below the header. At the bottom,
/// there is a row of buttons allowing the user to navigate through
/// the pages.
/// 
/// The page itself (the [QWizardPage](QWizardPage)
/// widget) occupies the area
/// between the header, the watermark, and the button row. Typically,
/// the page is a QWizardPage on which a QGridLayout is installed,
/// with standard child widgets ( [QLabel](QLabel)
/// s, [QLineEdit](QLineEdit)
/// s, etc.).
/// 
/// If the wizard's style is MacStyle, the page looks radically
/// different:
/// 
/// ![qtwizard-macpage.png](qtwizard-macpage.png)
/// 
/// The watermark, banner, and logo pixmaps are ignored by the
/// MacStyle. If the BackgroundPixmap is set, it is used as the
/// background for the wizard; otherwise, a default image
/// is used.
/// 
/// The title and subtitle are set by calling
/// QWizardPage::setTitle() and QWizardPage::setSubTitle() on the
/// individual pages. They may be plain text or HTML (see titleFormat
/// and subTitleFormat). The pixmaps can be set globally for the
/// entire wizard using setPixmap(), or on a per-page basis using
/// QWizardPage::setPixmap().
/// 
/// # Registering and Using Fields
/// 
/// In many wizards, the contents of a page may affect the default
/// values of the fields of a later page. To make it easy to
/// communicate between pages, QWizard supports a mechanism
/// that allows you to register a field (e.g., a QLineEdit) on a page
/// and to access its value from any page. It is also possible to
/// specify mandatory fields (i.e., fields that must be filled before
/// the user can advance to the next page).
/// 
/// To register a field, call QWizardPage::registerField() field.
/// For example:
/// 
/// ...
/// 
/// The above code registers three fields, `className,` `baseClass,` and `qobjectMacro,` which are associated with three
/// child widgets. The asterisk ( `*)` next to `className` denotes a
/// mandatory field.
/// 
/// The fields of any page are accessible from any other page. For
/// example:
/// 
/// Here, we call QWizardPage::field() to access the contents of the
/// `className` field (which was defined in the `ClassInfoPage)`
/// and use it to initialize the `OutputFilePage.` The field's
/// contents is returned as a QVariant.
/// 
/// When we create a field using QWizardPage::registerField(), we
/// pass a unique field name and a widget. We can also provide a Qt
/// property name and a signal (a signal that is emitted
/// when the property changes) as third and fourth arguments;
/// however, this is not necessary for the most common Qt widgets,
/// such as QLineEdit, QCheckBox, and QComboBox, because QWizard
/// knows which properties to look for.
/// 
/// If an asterisk ( `*)` is appended to the name when the property
/// is registered, the field is a *mandatory field* . When a page has
/// mandatory fields, the **Next** and/or **Finish** buttons are
/// enabled only when all mandatory fields are filled.
/// 
/// To consider a field , QWizard simply checks that the
/// field's current value doesn't equal the original value (the value
/// it had when initializePage() was called). For QLineEdit and
/// QAbstractSpinBox subclasses, QWizard also checks that
/// [hasAcceptableInput()](QLineEdit::hasAcceptableInput())
/// returns
/// true, to honor any validator or mask.
/// 
/// QWizard's mandatory field mechanism is provided for convenience.
/// A more powerful (but also more cumbersome) alternative is to
/// reimplement QWizardPage::isComplete() and to emit the
/// QWizardPage::completeChanged() signal whenever the page becomes
/// complete or incomplete.
/// 
/// The enabled/disabled state of the **Next** and/or **Finish**
/// buttons is one way to perform validation on the user input.
/// Another way is to reimplement validateCurrentPage() (or
/// QWizardPage::validatePage()) to perform some last-minute
/// validation (and show an error message if the user has entered
/// incomplete or invalid information). If the function returns `true,`
/// the next page is shown (or the wizard finishes); otherwise, the
/// current page stays up.
/// 
/// # Creating Linear Wizards
/// 
/// Most wizards have a linear structure, with page 1 followed by
/// page 2 and so on until the last page. The [Class
/// Wizard](dialogs/classwizard)
/// example is such a wizard. With QWizard, linear wizards
/// are created by instantiating the [QWizardPage](QWizardPage)
/// s and inserting
/// them using addPage(). By default, the pages are shown in the
/// order in which they were added. For example:
/// 
/// ...
/// 
/// When a page is about to be shown, QWizard calls initializePage()
/// (which in turn calls QWizardPage::initializePage()) to fill the
/// page with default values. By default, this function does nothing,
/// but it can be reimplemented to initialize the page's contents
/// based on other pages' fields (see the [example
/// above](initialize%20page)
/// ).
/// 
/// If the user presses **Back,** cleanupPage() is called (which in
/// turn calls QWizardPage::cleanupPage()). The default
/// implementation resets the page's fields to their original values
/// (the values they had before initializePage() was called). If you
/// want the **Back** button to be non-destructive and keep the
/// values entered by the user, simply enable the IndependentPages
/// option.
/// 
/// # Creating Non-Linear Wizards
/// 
/// Some wizards are more complex in that they allow different
/// traversal paths based on the information provided by the user.
/// The [License Wizard](dialogs/licensewizard)
/// example illustrates this.
/// It provides five wizard pages; depending on which options are
/// selected, the user can reach different pages.
/// 
/// ![licensewizard-flow.png](licensewizard-flow.png)
/// 
/// In complex wizards, pages are identified by IDs. These IDs are
/// typically defined using an enum. For example:
/// 
/// ...
/// 
/// The pages are inserted using setPage(), which takes an ID and an
/// instance of QWizardPage (or of a subclass):
/// 
/// ...
/// 
/// By default, the pages are shown in increasing ID order. To
/// provide a dynamic order that depends on the options chosen by the
/// user, we must reimplement QWizardPage::nextId(). For example:
/// 
/// It would also be possible to put all the logic in one place, in a
/// QWizard::nextId() reimplementation. For example:
/// 
/// To start at another page than the page with the lowest ID, call
/// setStartId().
/// 
/// To test whether a page has been visited or not, call
/// hasVisitedPage(). For example:
/// 
/// **See also:** [`WizardPage`]
/// {Class Wizard Example}
/// {License Wizard Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Wizard : Dialog {
    /// 
    /// Adds the given *page* to the wizard, and returns the page's ID.
    /// 
    /// The ID is guaranteed to be larger than any other ID in the
    /// QWizard so far.
    /// 
    /// **See also:** [`set_page()`]
    /// [`page()`]
    /// [`page_added()`]
    add_page(page: *WizardPageType) -> i32,
    /// 
    /// Adds the given *page* to the wizard with the given *id.*
    /// 
    /// **Note**: Adding a page may influence the value of the startId property
    /// in case it was not set explicitly.
    /// 
    /// **See also:** [`add_page()`]
    /// [`page()`]
    /// [`page_added()`]
    set_page(id: i32, page: *WizardPageType),
    /// 
    /// Removes the page with the given *id.* cleanupPage() will be called if necessary.
    /// 
    /// **Note**: Removing a page may influence the value of the startId property.
    /// 
    /// **See also:** [`add_page()`]
    /// [`set_page()`]
    /// [`page_removed()`]
    /// [`start_id()`]
    remove_page(id: i32),
    /// 
    /// Returns the page with the given *id,* or 0 if there is no such
    /// page.
    /// 
    /// **See also:** [`add_page()`]
    /// [`set_page()`]
    /// 
    /// Returns the list of page IDs.
    /// 
    /// This signal is emitted whenever a page is added to the
    /// wizard. The page's *id* is passed as parameter.
    /// 
    /// **See also:** [`add_page()`]
    /// [`set_page()`]
    /// [`start_id()`]
    /// 
    /// This signal is emitted whenever a page is removed from the
    /// wizard. The page's *id* is passed as parameter.
    /// 
    /// **See also:** [`remove_page()`]
    /// [`start_id()`]
    page(id: i32) -> WizardPage?,
    /// 
    /// Returns `true` if the page history contains page *id;* otherwise,
    /// returns `false.`
    /// 
    /// Pressing **Back** marks the current page as again.
    /// 
    /// **See also:** [`visited_pages()`]
    has_visited_page(id: i32) -> bool,
    /// 
    /// Returns the list of IDs of visited pages, in the order in which the pages
    /// were visited.
    /// 
    /// Pressing **Back** marks the current page as again.
    /// 
    /// **See also:** [`has_visited_page()`]
    visited_pages() -> [i32],
    /// 
    /// Returns the list of page IDs.
    page_ids() -> [i32],
    set_start_id(id: i32),
    /// 
    /// If this property isn't explicitly set, this property defaults to
    /// the lowest page ID in this wizard, or -1 if no page has been
    /// inserted yet.
    /// 
    /// **See also:** [`restart()`]
    /// [`next_id()`]
    start_id() -> i32,
    /// 
    /// Returns a pointer to the current page, or 0 if there is no current
    /// page (e.g., before the wizard is shown).
    /// 
    /// This is equivalent to calling page(currentId()).
    /// 
    /// **See also:** [`page()`]
    /// [`current_id()`]
    /// [`restart()`]
    current_page() -> WizardPage?,
    /// 
    /// This property cannot be set directly. To change the current page,
    /// call next(), back(), or restart().
    /// 
    /// By default, this property has a value of -1, indicating that no page is
    /// currently shown.
    /// 
    /// **See also:** [`current_page()`]
    /// 
    /// This signal is emitted when the current page changes, with the new
    /// current *id.*
    /// 
    /// **See also:** [`current_id()`]
    /// [`current_page()`]
    current_id() -> i32,
    /// 
    /// This virtual function is called by QWizard when the user clicks
    /// **Next** or **Finish** to perform some last-minute validation.
    /// If it returns `true,` the next page is shown (or the wizard
    /// finishes); otherwise, the current page stays up.
    /// 
    /// The default implementation calls QWizardPage::validatePage() on
    /// the currentPage().
    /// 
    /// When possible, it is usually better style to disable the **Next** or **Finish** button (by specifying [mandatory fields](mandatory%20fields)
    /// or
    /// by reimplementing QWizardPage::isComplete()) than to reimplement
    /// validateCurrentPage().
    /// 
    /// **See also:** [`WizardPage::validate_page`]
    /// [`current_page()`]
    [event] validate_current_page() -> bool,
    /// 
    /// This virtual function is called by QWizard to find out which page
    /// to show when the user clicks the **Next** button.
    /// 
    /// The return value is the ID of the next page, or -1 if no page follows.
    /// 
    /// The default implementation calls QWizardPage::nextId() on the
    /// currentPage().
    /// 
    /// By reimplementing this function, you can specify a dynamic page
    /// order.
    /// 
    /// **See also:** [`WizardPage::next_id`]
    /// [`current_page()`]
    [event] next_id() -> i32,
    /// 
    /// Sets the value of the field called *name* to *value.*
    /// 
    /// This function can be used to set fields on any page of the wizard.
    /// 
    /// **See also:** [`WizardPage::register_field`]
    /// [`WizardPage::set_field`]
    /// [`field()`]
    set_field(name: String, value: &VariantType),
    /// 
    /// Returns the value of the field called *name.*
    /// 
    /// This function can be used to access fields on any page of the wizard.
    /// 
    /// **See also:** [`WizardPage::register_field`]
    /// [`WizardPage::field`]
    /// [`set_field()`]
    field(name: String) -> Variant,
    set_wizard_style(style: Wizard::WizardStyle),
    /// 
    /// By default, QWizard uses the AeroStyle on a Windows Vista system with alpha compositing
    /// enabled, regardless of the current widget style. If this is not the case, the default
    /// wizard style depends on the current widget style as follows: MacStyle is the default if
    /// the current widget style is QMacStyle, ModernStyle is the default if the current widget
    /// style is QWindowsStyle, and ClassicStyle is the default in all other cases.
    /// 
    /// **See also:** {Wizard Look and Feel}
    /// options
    wizard_style() -> Wizard::WizardStyle,
    /// 
    /// Sets the given *option* to be enabled if *on* is true;
    /// otherwise, clears the given *option.*
    /// 
    /// **See also:** options
    /// [`test_option()`]
    /// [`set_wizard_style()`]
    set_option(option: Wizard::WizardOption, on: bool),
    /// 
    /// Returns `true` if the given *option* is enabled; otherwise, returns
    /// false.
    /// 
    /// **See also:** options
    /// [`set_option()`]
    /// [`set_wizard_style()`]
    test_option(option: Wizard::WizardOption) -> bool,
    set_options(options: Wizard::WizardOptions),
    /// 
    /// By default, the following options are set (depending on the platform):
    /// 
    /// * Windows: HelpButtonOnRight.
    /// * MacOS : NoDefaultButton and NoCancelButton.
    /// * X11 and QWS (Qt for Embedded Linux): none.
    /// 
    /// **See also:** wizardStyle
    options() -> Wizard::WizardOptions,
    /// 
    /// Sets the text on button *which* to be *text.*
    /// 
    /// By default, the text on buttons depends on the wizardStyle. For
    /// example, on MacOS , the **Next** button is called **Continue.**
    /// 
    /// To add extra buttons to the wizard (e.g., a **Print** button),
    /// one way is to call setButtonText() with CustomButton1,
    /// CustomButton2, or CustomButton3 to set their text, and make the
    /// buttons visible using the HaveCustomButton1, HaveCustomButton2,
    /// and/or HaveCustomButton3 options.
    /// 
    /// Button texts may also be set on a per-page basis using QWizardPage::setButtonText().
    /// 
    /// **See also:** [`set_button()`]
    /// [`button()`]
    /// [`set_button_layout()`]
    /// [`set_options()`]
    /// [`WizardPage::set_button_text`]
    set_button_text(which: Wizard::WizardButton, text: String),
    /// 
    /// Returns the text on button *which.*
    /// 
    /// If a text has ben set using setButtonText(), this text is returned.
    /// 
    /// By default, the text on buttons depends on the wizardStyle. For
    /// example, on MacOS , the **Next** button is called **Continue.**
    /// 
    /// **See also:** [`button()`]
    /// [`set_button()`]
    /// [`set_button_text()`]
    /// [`WizardPage::button_text`]
    /// [`WizardPage::set_button_text`]
    button_text(which: Wizard::WizardButton) -> String,
    /// 
    /// Sets the order in which buttons are displayed to *layout,* where
    /// *layout* is a list of [WizardButton](WizardButton)
    /// s.
    /// 
    /// The default layout depends on the options (e.g., whether
    /// HelpButtonOnRight) that are set. You can call this function if
    /// you need more control over the buttons' layout than what [options](options)
    /// already provides.
    /// 
    /// You can specify horizontal stretches in the layout using [Stretch.](Stretch.)
    /// 
    /// Example:
    /// 
    /// **See also:** [`set_button()`]
    /// [`set_button_text()`]
    /// [`set_options()`]
    set_button_layout(layout: onst QList<QWizard::WizardButton> &),
    /// 
    /// Sets the text on button *which* to be *text.*
    /// 
    /// By default, the text on buttons depends on the wizardStyle. For
    /// example, on MacOS , the **Next** button is called **Continue.**
    /// 
    /// To add extra buttons to the wizard (e.g., a **Print** button),
    /// one way is to call setButtonText() with CustomButton1,
    /// CustomButton2, or CustomButton3 to set their text, and make the
    /// buttons visible using the HaveCustomButton1, HaveCustomButton2,
    /// and/or HaveCustomButton3 options.
    /// 
    /// Button texts may also be set on a per-page basis using QWizardPage::setButtonText().
    /// 
    /// **See also:** [`set_button()`]
    /// [`button()`]
    /// [`set_button_layout()`]
    /// [`set_options()`]
    /// [`WizardPage::set_button_text`]
    /// 
    /// Sets the order in which buttons are displayed to *layout,* where
    /// *layout* is a list of [WizardButton](WizardButton)
    /// s.
    /// 
    /// The default layout depends on the options (e.g., whether
    /// HelpButtonOnRight) that are set. You can call this function if
    /// you need more control over the buttons' layout than what [options](options)
    /// already provides.
    /// 
    /// You can specify horizontal stretches in the layout using [Stretch.](Stretch.)
    /// 
    /// Example:
    /// 
    /// **See also:** [`set_button()`]
    /// [`set_button_text()`]
    /// [`set_options()`]
    /// 
    /// Sets the button corresponding to role *which* to *button.*
    /// 
    /// To add extra buttons to the wizard (e.g., a **Print** button),
    /// one way is to call setButton() with CustomButton1 to
    /// CustomButton3, and make the buttons visible using the
    /// HaveCustomButton1 to HaveCustomButton3 options.
    /// 
    /// **See also:** [`set_button_text()`]
    /// [`set_button_layout()`]
    /// options
    set_button(which: Wizard::WizardButton, button: *AbstractButtonType),
    /// 
    /// Returns the text on button *which.*
    /// 
    /// If a text has ben set using setButtonText(), this text is returned.
    /// 
    /// By default, the text on buttons depends on the wizardStyle. For
    /// example, on MacOS , the **Next** button is called **Continue.**
    /// 
    /// **See also:** [`button()`]
    /// [`set_button()`]
    /// [`set_button_text()`]
    /// [`WizardPage::button_text`]
    /// [`WizardPage::set_button_text`]
    /// 
    /// Returns the button corresponding to role *which.*
    /// 
    /// **See also:** [`set_button()`]
    /// [`set_button_text()`]
    button(which: Wizard::WizardButton) -> AbstractButton?,
    set_title_format(format: Rute::TextFormat),
    /// 
    /// The default format is Qt::AutoText.
    /// 
    /// **See also:** [`WizardPage::title()`]
    /// subTitleFormat
    title_format() -> Rute::TextFormat,
    set_sub_title_format(format: Rute::TextFormat),
    /// 
    /// The default format is Qt::AutoText.
    /// 
    /// **See also:** [`WizardPage::title()`]
    /// titleFormat
    sub_title_format() -> Rute::TextFormat,
    /// 
    /// Sets the pixmap for role *which* to *pixmap.*
    /// 
    /// The pixmaps are used by QWizard when displaying a page. Which
    /// pixmaps are actually used depend on the [wizard style](Wizard%20Look%20and%0A%20%20%20%20Feel)
    /// 
    /// 
    /// Pixmaps can also be set for a specific page using
    /// QWizardPage::setPixmap().
    /// 
    /// **See also:** [`WizardPage::set_pixmap`]
    /// {Elements of a Wizard Page}
    set_pixmap(which: Wizard::WizardPixmap, pixmap: &PixmapType),
    /// 
    /// Returns the pixmap set for role *which.*
    /// 
    /// By default, the only pixmap that is set is the BackgroundPixmap on
    /// MacOS .
    /// 
    /// **See also:** [`WizardPage::pixmap`]
    /// {Elements of a Wizard Page}
    pixmap(which: Wizard::WizardPixmap) -> Pixmap,
    /// 
    /// Sets the given *widget* to be shown on the left side of the wizard.
    /// For styles which use the WatermarkPixmap (ClassicStyle and ModernStyle)
    /// the side widget is displayed on top of the watermark, for other styles
    /// or when the watermark is not provided the side widget is displayed
    /// on the left side of the wizard.
    /// 
    /// Passing 0 shows no side widget.
    /// 
    /// When the *widget* is not 0 the wizard reparents it.
    /// 
    /// Any previous side widget is hidden.
    /// 
    /// You may call setSideWidget() with the same widget at different
    /// times.
    /// 
    /// All widgets set here will be deleted by the wizard when it is
    /// destroyed unless you separately reparent the widget after setting
    /// some other side widget (or 0).
    /// 
    /// By default, no side widget is present.
    set_side_widget(widget: *WidgetType),
    /// 
    /// Returns the widget on the left side of the wizard or 0.
    /// 
    /// By default, no side widget is present.
    side_widget() -> Widget?,
    /// 
    /// Sets the default property for *className* to be *property,*
    /// and the associated change signal to be *changedSignal.*
    /// 
    /// The default property is used when an instance of *className* (or
    /// of one of its subclasses) is passed to
    /// QWizardPage::registerField() and no property is specified.
    /// 
    /// QWizard knows the most common Qt widgets. For these (or their
    /// subclasses), you don't need to specify a *property* or a *changedSignal.* The table below lists these widgets:
    /// 
    /// * Widget
    /// * Property
    /// * Change Notification Signal
    /// * QAbstractButton
    /// * bool [checked](QAbstractButton::)
    /// 
    /// * [toggled()](QAbstractButton::)
    /// 
    /// * QAbstractSlider
    /// * int [value](QAbstractSlider::)
    /// 
    /// * [valueChanged()](QAbstractSlider::)
    /// 
    /// * QComboBox
    /// * int [currentIndex](QComboBox::)
    /// 
    /// * [currentIndexChanged()](QComboBox::)
    /// 
    /// * QDateTimeEdit
    /// * QDateTime [dateTime](QDateTimeEdit::)
    /// 
    /// * [dateTimeChanged()](QDateTimeEdit::)
    /// 
    /// * QLineEdit
    /// * QString [text](QLineEdit::)
    /// 
    /// * [textChanged()](QLineEdit::)
    /// 
    /// * QListWidget
    /// * int [currentRow](QListWidget::)
    /// 
    /// * [currentRowChanged()](QListWidget::)
    /// 
    /// * QSpinBox
    /// * int [value](QSpinBox::)
    /// 
    /// * [valueChanged()](QSpinBox::)
    /// 
    /// **See also:** [`WizardPage::register_field`]
    set_default_property(class_name: *char, property: *char, changed_signal: *char),
    /// 
    [event] set_visible(visible: bool),
    /// 
    [event] size_hint() -> Size,
    /// 
    /// This signal is emitted when the current page changes, with the new
    /// current *id.*
    /// 
    /// **See also:** [`current_id()`]
    /// [`current_page()`]
    [signal] current_id_changed(id: i32),
    /// 
    /// This signal is emitted when the user clicks the **Help** button.
    /// 
    /// By default, no **Help** button is shown. Call
    /// setOption(HaveHelpButton, true) to have one.
    /// 
    /// Example:
    /// 
    /// ...
    /// 
    /// **See also:** [`custom_button_clicked()`]
    [signal] help_requested(),
    /// 
    /// This signal is emitted when the user clicks a custom button. *which* can be CustomButton1, CustomButton2, or CustomButton3.
    /// 
    /// By default, no custom button is shown. Call setOption() with
    /// HaveCustomButton1, HaveCustomButton2, or HaveCustomButton3 to have
    /// one, and use setButtonText() or setButton() to configure it.
    /// 
    /// **See also:** [`help_requested()`]
    [signal] custom_button_clicked(which: i32),
    /// 
    /// This signal is emitted whenever a page is added to the
    /// wizard. The page's *id* is passed as parameter.
    /// 
    /// **See also:** [`add_page()`]
    /// [`set_page()`]
    /// [`start_id()`]
    [signal] page_added(id: i32),
    /// 
    /// This signal is emitted whenever a page is removed from the
    /// wizard. The page's *id* is passed as parameter.
    /// 
    /// **See also:** [`remove_page()`]
    /// [`start_id()`]
    [signal] page_removed(id: i32),
    /// 
    /// Goes back to the previous page.
    /// 
    /// This is equivalent to pressing the **Back** button.
    /// 
    /// **See also:** [`next()`]
    /// [`accept()`]
    /// [`reject()`]
    /// [`restart()`]
    back(),
    /// 
    /// Advances to the next page.
    /// 
    /// This is equivalent to pressing the **Next** or **Commit** button.
    /// 
    /// **See also:** [`next_id()`]
    /// [`back()`]
    /// [`accept()`]
    /// [`reject()`]
    /// [`restart()`]
    /// 
    /// This virtual function is called by QWizard to find out which page
    /// to show when the user clicks the **Next** button.
    /// 
    /// The return value is the ID of the next page, or -1 if no page follows.
    /// 
    /// The default implementation calls QWizardPage::nextId() on the
    /// currentPage().
    /// 
    /// By reimplementing this function, you can specify a dynamic page
    /// order.
    /// 
    /// **See also:** [`WizardPage::next_id`]
    /// [`current_page()`]
    next(),
    /// 
    /// Restarts the wizard at the start page. This function is called automatically when the
    /// wizard is shown.
    /// 
    /// **See also:** [`start_id()`]
    restart(),
    /// 
    [event] event(event: *EventType) -> bool,
    /// 
    [event] resize_event(event: *ResizeEventType),
    /// 
    [event] paint_event(event: *PaintEventType),
    /// 
    [event] done(result: i32),
    /// 
    /// This virtual function is called by QWizard to prepare page *id*
    /// just before it is shown either as a result of QWizard::restart()
    /// being called, or as a result of the user clicking **Next.** (However, if the [QWizard::IndependentPages](QWizard::IndependentPages)
    /// option is set, this function is only
    /// called the first time the page is shown.)
    /// 
    /// By reimplementing this function, you can ensure that the page's
    /// fields are properly initialized based on fields from previous
    /// pages.
    /// 
    /// The default implementation calls QWizardPage::initializePage() on
    /// page( *id).*
    /// 
    /// **See also:** [`WizardPage::initialize_page`]
    /// [`cleanup_page()`]
    [event] initialize_page(id: i32),
    /// 
    /// This virtual function is called by QWizard to clean up page *id* just before the
    /// user leaves it by clicking **Back** (unless the [QWizard::IndependentPages](QWizard::IndependentPages)
    /// option is set).
    /// 
    /// The default implementation calls QWizardPage::cleanupPage() on
    /// page( *id).*
    /// 
    /// **See also:** [`WizardPage::cleanup_page`]
    /// [`initialize_page()`]
    [event] cleanup_page(id: i32),
}

[org_name(QWizard)]
enum WizardButton {
    BackButton,
    NextButton,
    CommitButton,
    FinishButton,
    CancelButton,
    HelpButton,
    CustomButton1,
    CustomButton2,
    CustomButton3,
    Stretch,
    NoButton,
    NStandardButtons,
    NButtons,
}

[org_name(QWizard)]
enum WizardPixmap {
    WatermarkPixmap,
    LogoPixmap,
    BannerPixmap,
    BackgroundPixmap,
    NPixmaps,
}

[org_name(QWizard)]
enum WizardStyle {
    ClassicStyle,
    ModernStyle,
    MacStyle,
    AeroStyle,
    NStyles,
}

[org_name(QWizard)]
enum WizardOption {
    IndependentPages,
    IgnoreSubTitles,
    ExtendedWatermarkPixmap,
    NoDefaultButton,
    NoBackButtonOnStartPage,
    NoBackButtonOnLastPage,
    DisabledBackButtonOnLastPage,
    HaveNextButtonOnLastPage,
    HaveFinishButtonOnEarlyPages,
    NoCancelButton,
    CancelButtonOnLeft,
    HaveHelpButton,
    HelpButtonOnRight,
    HaveCustomButton1,
    HaveCustomButton2,
    HaveCustomButton3,
    NoCancelButtonOnLastPage,
}

// vim: syntax=rust expandtab ts=4 sw=4
