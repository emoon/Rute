[org_name(QWizard)]
enum WizardButton {
    BackButton,
    NextButton,
    CommitButton,
    FinishButton,
    CancelButton,
    HelpButton,
    CustomButton1,
    CustomButton2,
    CustomButton3,
    Stretch,
    NoButton,
    NStandardButtons,
    NButtons,
}

[org_name(QWizard)]
enum WizardPixmap {
    WatermarkPixmap,
    LogoPixmap,
    BannerPixmap,
    BackgroundPixmap,
    NPixmaps,
}

[org_name(QWizard)]
enum WizardStyle {
    ClassicStyle,
    ModernStyle,
    MacStyle,
    AeroStyle,
    NStyles,
}

[org_name(QWizard)]
enum WizardOption {
    IndependentPages,
    IgnoreSubTitles,
    ExtendedWatermarkPixmap,
    NoDefaultButton,
    NoBackButtonOnStartPage,
    NoBackButtonOnLastPage,
    DisabledBackButtonOnLastPage,
    HaveNextButtonOnLastPage,
    HaveFinishButtonOnEarlyPages,
    NoCancelButton,
    CancelButtonOnLeft,
    HaveHelpButton,
    HelpButtonOnRight,
    HaveCustomButton1,
    HaveCustomButton2,
    HaveCustomButton3,
    NoCancelButtonOnLastPage,
}

struct Wizard : Dialog {
    add_page(page: *WizardPageType) -> i32,
    set_page(id: i32, page: *WizardPageType),
    remove_page(id: i32),
    page(id: i32) -> WizardPage?,
    has_visited_page(id: i32) -> bool,
    visited_pages() -> [i32],
    page_ids() -> [i32],
    set_start_id(id: i32),
    start_id() -> i32,
    current_page() -> WizardPage?,
    current_id() -> i32,
    [event] validate_current_page() -> bool,
    [event] next_id() -> i32,
    set_field(name: String, value: &VariantType),
    field(name: String) -> Variant,
    set_wizard_style(style: Wizard::WizardStyle),
    wizard_style() -> Wizard::WizardStyle,
    set_option(option: Wizard::WizardOption, on: bool),
    test_option(option: Wizard::WizardOption) -> bool,
    set_options(options: WizardOptions),
    options() -> WizardOptions,
    set_button_text(which: Wizard::WizardButton, text: String),
    button_text(which: Wizard::WizardButton) -> String,
    set_button_layout(layout: onst QList<QWizard::WizardButton> &),
    set_button(which: Wizard::WizardButton, button: *AbstractButtonType),
    button(which: Wizard::WizardButton) -> AbstractButton?,
    set_title_format(format: Rute::TextFormat),
    title_format() -> Rute::TextFormat,
    set_sub_title_format(format: Rute::TextFormat),
    sub_title_format() -> Rute::TextFormat,
    set_pixmap(which: Wizard::WizardPixmap, pixmap: &PixmapType),
    pixmap(which: Wizard::WizardPixmap) -> Pixmap,
    set_side_widget(widget: *WidgetType),
    side_widget() -> Widget?,
    set_default_property(class_name: *char, property: *char, changed_signal: *char),
    [event] set_visible(visible: bool),
    [event] size_hint() -> Size,
    [signal] current_id_changed(id: i32),
    [signal] help_requested(),
    [signal] custom_button_clicked(which: i32),
    [signal] page_added(id: i32),
    [signal] page_removed(id: i32),
    back(),
    next(),
    restart(),
    [event] event(event: *EventType) -> bool,
    [event] resize_event(event: *ResizeEventType),
    [event] paint_event(event: *PaintEventType),
    [event] done(result: i32),
    [event] initialize_page(id: i32),
    [event] cleanup_page(id: i32),
}

// vim: syntax=rust expandtab ts=4 sw=4
