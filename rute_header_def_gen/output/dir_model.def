struct DirModel : AbstractItemModel {
    index(row: i32, column: i32, parent: &ModelIndexType) -> ModelIndexType,
    parent(child: &ModelIndexType) -> ModelIndexType,
    row_count(parent: &ModelIndexType) -> i32,
    column_count(parent: &ModelIndexType) -> i32,
    data(index: &ModelIndexType, role: i32) -> VariantType,
    set_data(index: &ModelIndexType, value: &VariantType, role: i32) -> bool,
    header_data(section: i32, orientation: Rute::Orientation, role: i32) -> VariantType,
    has_children(index: &ModelIndexType) -> bool,
    flags(index: &ModelIndexType) -> Rute::ItemFlags,
    sort(column: i32, order: Rute::SortOrder),
    mime_types() -> StringListType,
    mime_data(indexes: &ModelIndexListType) -> &MimeDataType,
    drop_mime_data(data: &MimeDataType, action: Rute::DropAction, row: i32, column: i32, parent: &ModelIndexType) -> bool,
    supported_drop_actions() -> Rute::DropActions,
    set_icon_provider(provider: &FileIconProviderType),
    icon_provider() -> &FileIconProviderType,
    set_name_filters(filters: &StringListType),
    name_filters() -> StringListType,
    set_filter(filters: Dir::Filters),
    filter() -> Dir::Filters,
    set_sorting(sort: Dir::SortFlags),
    sorting() -> Dir::SortFlags,
    set_resolve_symlinks(enable: bool),
    resolve_symlinks() -> bool,
    set_read_only(enable: bool),
    is_read_only() -> bool,
    set_lazy_child_count(enable: bool),
    lazy_child_count() -> bool,
    index(path: String, column: i32) -> ModelIndexType,
    is_dir(index: &ModelIndexType) -> bool,
    mkdir(parent: &ModelIndexType, name: String) -> ModelIndexType,
    rmdir(index: &ModelIndexType) -> bool,
    remove(index: &ModelIndexType) -> bool,
    file_path(index: &ModelIndexType) -> String,
    file_name(index: &ModelIndexType) -> String,
    file_icon(index: &ModelIndexType) -> IconType,
    file_info(index: &ModelIndexType) -> FileInfoType,
    refresh(parent: &ModelIndexType),
}

// vim: syntax=rust expandtab ts=4 sw=4
