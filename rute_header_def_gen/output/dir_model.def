/// 
/// The usage of QDirModel is not recommended anymore. The
/// QFileSystemModel class is a more performant alternative.
/// 
/// This class provides access to the local filesystem, providing functions
/// for renaming and removing files and directories, and for creating new
/// directories. In the simplest case, it can be used with a suitable display
/// widget as part of a browser or filer.
/// 
/// QDirModel keeps a cache with file information. The cache needs to be
/// updated with refresh().
/// 
/// QDirModel can be accessed using the standard interface provided by
/// QAbstractItemModel, but it also provides some convenience functions
/// that are specific to a directory model. The fileInfo() and isDir()
/// functions provide information about the underlying files and directories
/// related to items in the model.
/// 
/// Directories can be created and removed using mkdir(), rmdir(), and the
/// model will be automatically updated to take the changes into account.
/// 
/// **Note**: QDirModel requires an instance of [QApplication.](QApplication.)
/// 
/// **See also:** nameFilters()
/// setFilter()
/// filter()
/// QListView
/// QTreeView
/// QFileSystemModel
/// {Dir View Example}
/// {Model Classes}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QDirModel)]
enum Roles {
    FileIconRole,
    FilePathRole,
    FileNameRole,
}

struct DirModel : AbstractItemModel {
    /// 
    /// Returns the model item index for the item in the *parent* with the
    /// given *row* and *column.*
    /// 
    /// 
    /// **Overloads**
    /// Returns the model item index for the given *path.*
    [event] index(row: i32, column: i32, parent: &ModelIndexType) -> ModelIndex,
    /// 
    /// Return the parent of the given *child* model item.
    [event] parent(child: &ModelIndexType) -> ModelIndex,
    /// 
    /// Returns the number of rows in the *parent* model item.
    /// 
    [event] row_count(parent: &ModelIndexType) -> i32,
    /// 
    /// Returns the number of columns in the *parent* model item.
    /// 
    [event] column_count(parent: &ModelIndexType) -> i32,
    /// 
    /// Returns the data for the model item *index* with the given *role.*
    [event] data(index: &ModelIndexType, role: i32) -> Variant,
    /// 
    /// Sets the data for the model item *index* with the given *role* to
    /// the data referenced by the *value.* Returns `true` if successful;
    /// otherwise returns `false.`
    /// 
    /// **See also:** Qt::ItemDataRole
    [event] set_data(index: &ModelIndexType, value: &VariantType, role: i32) -> bool,
    /// 
    /// Returns the data stored under the given *role* for the specified *section*
    /// of the header with the given *orientation.*
    [event] header_data(section: i32, orientation: Rute::Orientation, role: i32) -> Variant,
    /// 
    /// Returns `true` if the *parent* model item has children; otherwise
    /// returns `false.`
    [event] has_children(index: &ModelIndexType) -> bool,
    /// 
    /// Returns the item flags for the given *index* in the model.
    /// 
    /// **See also:** Qt::ItemFlags
    [event] flags(index: &ModelIndexType) -> Rute::ItemFlags,
    /// 
    /// Sort the model items in the *column* using the *order* given.
    /// The order is a value defined in [Qt::SortOrder.](Qt::SortOrder.)
    /// 
    /// 
    /// Returns the sorting method used for the directory model.
    /// 
    /// **See also:** QDir::SortFlags
    [event] sort(column: i32, order: Rute::SortOrder),
    /// 
    /// Returns a list of MIME types that can be used to describe a list of items
    /// in the model.
    [event] mime_types() -> [String],
    /// 
    /// Returns an object that contains a serialized description of the specified
    /// *indexes.* The format used to describe the items corresponding to the
    /// indexes is obtained from the mimeTypes() function.
    /// 
    /// If the list of indexes is empty, 0 is returned rather than a serialized
    /// empty list.
    [event] mime_data(indexes: &[ModelIndex]) -> MimeData?,
    /// 
    /// Handles the *data* supplied by a drag and drop operation that ended with
    /// the given *action* over the row in the model specified by the *row* and
    /// *column* and by the *parent* index.
    /// 
    /// Returns `true` if the drop was successful, and false otherwise.
    /// 
    /// **See also:** supportedDropActions()
    [event] drop_mime_data(data: *MimeDataType, action: Rute::DropAction, row: i32, column: i32, parent: &ModelIndexType) -> bool,
    /// 
    /// Returns the drop actions supported by this model.
    /// 
    /// **See also:** Qt::DropActions
    [event] supported_drop_actions() -> Rute::DropActions,
    /// 
    /// Sets the *provider* of file icons for the directory model.
    /// 
    set_icon_provider(provider: *FileIconProviderType),
    /// 
    /// Returns the file icon provider for this directory model.
    icon_provider() -> FileIconProvider?,
    /// 
    /// Sets the name *filters* for the directory model.
    set_name_filters(filters: &[String]),
    /// 
    /// Returns a list of filters applied to the names in the model.
    name_filters() -> [String],
    /// 
    /// Sets the directory model's filter to that specified by *filters.*
    /// 
    /// Note that the filter you set should always include the QDir::AllDirs enum value,
    /// otherwise QDirModel won't be able to read the directory structure.
    /// 
    /// **See also:** QDir::Filters
    set_filter(filters: Dir::Filters),
    /// 
    /// Returns the filter specification for the directory model.
    /// 
    /// **See also:** QDir::Filters
    filter() -> Dir::Filters,
    /// 
    /// Sets the directory model's sorting order to that specified by *sort.*
    /// 
    /// **See also:** QDir::SortFlags
    set_sorting(sort: Dir::SortFlags),
    /// 
    /// Returns the sorting method used for the directory model.
    /// 
    /// **See also:** QDir::SortFlags
    sorting() -> Dir::SortFlags,
    set_resolve_symlinks(enable: bool),
    /// 
    /// This is only relevant on operating systems that support symbolic
    /// links.
    resolve_symlinks() -> bool,
    set_read_only(enable: bool),
    is_read_only() -> bool,
    set_lazy_child_count(enable: bool),
    /// 
    /// If this property is set to false, the directory model will make sure that a directory
    /// actually containes any files before reporting that it has children.
    /// Otherwise the directory model will report that an item has children if the item
    /// is a directory.
    /// 
    /// This property is `false` by default
    lazy_child_count() -> bool,
    /// 
    /// Returns the model item index for the item in the *parent* with the
    /// given *row* and *column.*
    /// 
    /// 
    /// **Overloads**
    /// Returns the model item index for the given *path.*
    index_2(path: String, column: i32) -> ModelIndex,
    /// 
    /// Returns `true` if the model item *index* represents a directory;
    /// otherwise returns `false.`
    is_dir(index: &ModelIndexType) -> bool,
    /// 
    /// Create a directory with the *name* in the *parent* model item.
    mkdir(parent: &ModelIndexType, name: String) -> ModelIndex,
    /// 
    /// Removes the directory corresponding to the model item *index* in the
    /// directory model and **deletes the corresponding directory from the
    /// file system** , returning true if successful. If the directory cannot be
    /// removed, false is returned.
    /// 
    /// **Warning**: This function deletes directories from the file system; it does
    /// **not** move them to a location where they can be recovered.
    /// 
    /// **See also:** remove()
    rmdir(index: &ModelIndexType) -> bool,
    /// 
    /// Removes the model item *index* from the directory model and **deletes the
    /// corresponding file from the file system** , returning true if successful. If the
    /// item cannot be removed, false is returned.
    /// 
    /// **Warning**: This function deletes files from the file system; it does **not**
    /// move them to a location where they can be recovered.
    /// 
    /// **See also:** rmdir()
    remove(index: &ModelIndexType) -> bool,
    /// 
    /// Returns the path of the item stored in the model under the
    /// *index* given.
    /// 
    file_path(index: &ModelIndexType) -> String,
    /// 
    /// Returns the name of the item stored in the model under the
    /// *index* given.
    /// 
    file_name(index: &ModelIndexType) -> String,
    /// 
    /// Returns the icons for the item stored in the model under the given
    /// *index.*
    file_icon(index: &ModelIndexType) -> Icon,
    /// 
    /// Returns the file information for the specified model *index.*
    /// 
    /// **Note:** If the model index represents a symbolic link in the
    /// underlying filing system, the file information returned will contain
    /// information about the symbolic link itself, regardless of whether
    /// resolveSymlinks is enabled or not.
    /// 
    /// **See also:** QFileInfo::symLinkTarget()
    file_info(index: &ModelIndexType) -> FileInfo,
    /// 
    /// QDirModel caches file information. This function updates the
    /// cache. The *parent* parameter is the directory from which the
    /// model is updated; the default value will update the model from
    /// root directory of the file system (the entire model).
    refresh(parent: &ModelIndexType),
}

// vim: syntax=rust expandtab ts=4 sw=4
