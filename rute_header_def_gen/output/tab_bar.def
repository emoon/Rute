///     \class QTabBar
///     \brief The QTabBar class provides a tab bar, e.g. for use in tabbed dialogs.
/// 
///     \ingroup basicwidgets
///     \inmodule QtWidgets
/// 
///     QTabBar is straightforward to use; it draws the tabs using one of
///     the predefined \l{QTabBar::Shape}{shapes}, and emits a
///     signal when a tab is selected. It can be subclassed to tailor the
///     look and feel. Qt also provides a ready-made \l{QTabWidget}.
/// 
///     Each tab has a tabText(), an optional tabIcon(), an optional
///     tabToolTip(), optional tabWhatsThis() and optional tabData().
///     The tabs's attributes can be changed with setTabText(), setTabIcon(),
///     setTabToolTip(), setTabWhatsThis and setTabData(). Each tabs can be
///     enabled or disabled individually with setTabEnabled().
/// 
///     Each tab can display text in a distinct color. The current text color
///     for a tab can be found with the tabTextColor() function. Set the text
///     color for a particular tab with setTabTextColor().
/// 
///     Tabs are added using addTab(), or inserted at particular positions
///     using insertTab(). The total number of tabs is given by
///     count(). Tabs can be removed from the tab bar with
///     removeTab(). Combining removeTab() and insertTab() allows you to
///     move tabs to different positions.
/// 
///     The \l shape property defines the tabs' appearance. The choice of
///     shape is a matter of taste, although tab dialogs (for preferences
///     and similar) invariably use \l RoundedNorth.
///     Tab controls in windows other than dialogs almost
///     always use either \l RoundedSouth or \l TriangularSouth. Many
///     spreadsheets and other tab controls in which all the pages are
///     essentially similar use \l TriangularSouth, whereas \l
///     RoundedSouth is used mostly when the pages are different (e.g. a
///     multi-page tool palette). The default in QTabBar is \l
///     RoundedNorth.
/// 
///     The most important part of QTabBar's API is the currentChanged()
///     signal.  This is emitted whenever the current tab changes (even at
///     startup, when the current tab changes from 'none'). There is also
///     a slot, setCurrentIndex(), which can be used to select a tab
///     programmatically. The function currentIndex() returns the index of
///     the current tab, \l count holds the number of tabs.
/// 
///     QTabBar creates automatic mnemonic keys in the manner of QAbstractButton;
///     e.g. if a tab's label is "\&Graphics", Alt+G becomes a shortcut
///     key for switching to that tab.
/// 
///     The following virtual functions may need to be reimplemented in
///     order to tailor the look and feel or store extra data with each
///     tab:
/// 
///     \list
///     \li tabSizeHint() calcuates the size of a tab.
///     \li tabInserted() notifies that a new tab was added.
///     \li tabRemoved() notifies that a tab was removed.
///     \li tabLayoutChange() notifies that the tabs have been re-laid out.
///     \li paintEvent() paints all tabs.
///     \endlist
/// 
///     For subclasses, you might also need the tabRect() functions which
///     returns the visual geometry of a single tab.
/// 
///     \table 100%
///     \row \li \inlineimage fusion-tabbar.png Screenshot of a Fusion style tab bar
///          \li A tab bar shown in the \l{Qt Widget Gallery}{Fusion widget style}.
///     \row \li \inlineimage fusion-tabbar-truncated.png Screenshot of a truncated Fusion tab bar
///          \li A truncated tab bar shown in the Fusion widget style.
///     \endtable
/// 
///     \sa QTabWidget
[org_name(QTabBar)]
enum Shape {
    RoundedNorth,
    RoundedSouth,
    RoundedWest,
    RoundedEast,
    TriangularNorth,
    TriangularSouth,
    TriangularWest,
    TriangularEast,
}

[org_name(QTabBar)]
enum ButtonPosition {
    LeftSide,
    RightSide,
}

[org_name(QTabBar)]
enum SelectionBehavior {
    SelectLeftTab,
    SelectRightTab,
    SelectPreviousTab,
}

struct TabBar : Widget {
    shape() -> TabBar::Shape,
    set_shape(shape: TabBar::Shape),
    add_tab(text: String) -> i32,
    add_tab(icon: &IconType, text: String) -> i32,
    insert_tab(index: i32, text: String) -> i32,
    insert_tab(index: i32, icon: &IconType, text: String) -> i32,
    remove_tab(index: i32),
    move_tab(from: i32, to: i32),
    is_tab_enabled(index: i32) -> bool,
    set_tab_enabled(index: i32, arg0: bool),
    tab_text(index: i32) -> String,
    set_tab_text(index: i32, text: String),
    tab_text_color(index: i32) -> Color,
    set_tab_text_color(index: i32, color: &ColorType),
    tab_icon(index: i32) -> Icon,
    set_tab_icon(index: i32, icon: &IconType),
    elide_mode() -> Rute::TextElideMode,
    set_elide_mode(arg0: Rute::TextElideMode),
    set_tab_tool_tip(index: i32, tip: String),
    tab_tool_tip(index: i32) -> String,
    set_tab_whats_this(index: i32, text: String),
    tab_whats_this(index: i32) -> String,
    set_tab_data(index: i32, data: &VariantType),
    tab_data(index: i32) -> Variant,
    tab_rect(index: i32) -> Rect,
    tab_at(pos: &PointType) -> i32,
    current_index() -> i32,
    count() -> i32,
    [event] size_hint() -> Size,
    [event] minimum_size_hint() -> Size,
    set_draw_base(draw_the_base: bool),
    draw_base() -> bool,
    icon_size() -> Size,
    set_icon_size(size: &SizeType),
    uses_scroll_buttons() -> bool,
    set_uses_scroll_buttons(use_buttons: bool),
    tabs_closable() -> bool,
    set_tabs_closable(closable: bool),
    set_tab_button(index: i32, position: TabBar::ButtonPosition, widget: *WidgetType),
    tab_button(index: i32, position: TabBar::ButtonPosition) -> Widget?,
    selection_behavior_on_remove() -> TabBar::SelectionBehavior,
    set_selection_behavior_on_remove(behavior: TabBar::SelectionBehavior),
    expanding() -> bool,
    set_expanding(enabled: bool),
    is_movable() -> bool,
    set_movable(movable: bool),
    document_mode() -> bool,
    set_document_mode(set: bool),
    auto_hide() -> bool,
    set_auto_hide(hide: bool),
    change_current_on_drag() -> bool,
    set_change_current_on_drag(change: bool),
    accessible_tab_name(index: i32) -> String,
    set_accessible_tab_name(index: i32, name: String),
    set_current_index(index: i32),
    [signal] current_changed(index: i32),
    [signal] tab_close_requested(index: i32),
    [signal] tab_moved(from: i32, to: i32),
    [signal] tab_bar_clicked(index: i32),
    [signal] tab_bar_double_clicked(index: i32),
    [event] tab_size_hint(index: i32) -> Size,
    [event] minimum_tab_size_hint(index: i32) -> Size,
    [event] tab_inserted(index: i32),
    [event] tab_removed(index: i32),
    [event] tab_layout_change(),
    [event] event(arg0: *EventType) -> bool,
    [event] resize_event(arg0: *ResizeEventType),
    [event] show_event(arg0: *ShowEventType),
    [event] hide_event(arg0: *HideEventType),
    [event] paint_event(arg0: *PaintEventType),
    [event] mouse_press_event(arg0: *MouseEventType),
    [event] mouse_move_event(arg0: *MouseEventType),
    [event] mouse_release_event(arg0: *MouseEventType),
    [event] wheel_event(event: *WheelEventType),
    [event] key_press_event(arg0: *KeyEventType),
    [event] change_event(arg0: *EventType),
    [event] timer_event(event: *TimerEventType),
    init_style_option(option: *StyleOptionTabType, tab_index: i32),
}

// vim: syntax=rust expandtab ts=4 sw=4
