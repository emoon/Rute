/// 
/// QTabBar is straightforward to use; it draws the tabs using one of
/// the predefined [shapes](QTabBar::Shape)
/// , and emits a
/// signal when a tab is selected. It can be subclassed to tailor the
/// look and feel. Qt also provides a ready-made [QTabWidget](QTabWidget)
/// 
/// 
/// Each tab has a tabText(), an optional tabIcon(), an optional
/// tabToolTip(), optional tabWhatsThis() and optional tabData().
/// The tabs's attributes can be changed with setTabText(), setTabIcon(),
/// setTabToolTip(), setTabWhatsThis and setTabData(). Each tabs can be
/// enabled or disabled individually with setTabEnabled().
/// 
/// Each tab can display text in a distinct color. The current text color
/// for a tab can be found with the tabTextColor() function. Set the text
/// color for a particular tab with setTabTextColor().
/// 
/// Tabs are added using addTab(), or inserted at particular positions
/// using insertTab(). The total number of tabs is given by
/// count(). Tabs can be removed from the tab bar with
/// removeTab(). Combining removeTab() and insertTab() allows you to
/// move tabs to different positions.
/// 
/// The [shape](shape)
/// property defines the tabs' appearance. The choice of
/// shape is a matter of taste, although tab dialogs (for preferences
/// and similar) invariably use [RoundedNorth.](RoundedNorth.)
/// 
/// Tab controls in windows other than dialogs almost
/// always use either [RoundedSouth](RoundedSouth)
/// or [TriangularSouth.](TriangularSouth.)
/// Many
/// spreadsheets and other tab controls in which all the pages are
/// essentially similar use [TriangularSouth,](TriangularSouth,)
/// whereas [RoundedSouth](RoundedSouth)
/// is used mostly when the pages are different (e.g. a
/// multi-page tool palette). The default in QTabBar is [RoundedNorth.](RoundedNorth.)
/// 
/// The most important part of QTabBar's API is the currentChanged()
/// signal. This is emitted whenever the current tab changes (even at
/// startup, when the current tab changes from 'none'). There is also
/// a slot, setCurrentIndex(), which can be used to select a tab
/// programmatically. The function currentIndex() returns the index of
/// the current tab, [count](count)
/// holds the number of tabs.
/// 
/// QTabBar creates automatic mnemonic keys in the manner of QAbstractButton;
/// e.g. if a tab's label is , Alt+G becomes a shortcut
/// key for switching to that tab.
/// 
/// The following virtual functions may need to be reimplemented in
/// order to tailor the look and feel or store extra data with each
/// tab:
/// 
/// * tabSizeHint() calcuates the size of a tab.
/// * tabInserted() notifies that a new tab was added.
/// * tabRemoved() notifies that a tab was removed.
/// * tabLayoutChange() notifies that the tabs have been re-laid out.
/// * paintEvent() paints all tabs.
/// 
/// For subclasses, you might also need the tabRect() functions which
/// returns the visual geometry of a single tab.
/// 
/// * ![Screenshot of a Fusion style tab bar](fusion-tabbar.png)
/// 
/// * A tab bar shown in the [Fusion widget style](Qt%20Widget%20Gallery)
/// 
/// * ![Screenshot of a truncated Fusion tab bar](fusion-tabbar-truncated.png)
/// 
/// * A truncated tab bar shown in the Fusion widget style.
/// 
/// **See also:** [`TabWidget`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TabBar : Widget {
    /// 
    /// Possible values for this property are described by the Shape enum.
    shape() -> TabBar::Shape,
    set_shape(shape: TabBar::Shape),
    /// 
    /// Adds a new tab with text *text.* Returns the new
    /// tab's index.
    /// 
    /// **Overloads**
    /// Adds a new tab with icon *icon* and text *text.* Returns the new tab's index.
    add_tab(text: String) -> i32,
    /// 
    /// Adds a new tab with text *text.* Returns the new
    /// tab's index.
    /// 
    /// **Overloads**
    /// Adds a new tab with icon *icon* and text *text.* Returns the new tab's index.
    [org_name(addTab)]
    add_tab_2(icon: &IconType, text: String) -> i32,
    /// 
    /// Inserts a new tab with text *text* at position *index.* If *index* is out of range, the new tab is appened. Returns the new
    /// tab's index.
    /// **Overloads**
    /// Inserts a new tab with icon *icon* and text *text* at position
    /// *index.* If *index* is out of range, the new tab is
    /// appended. Returns the new tab's index.
    /// 
    /// If the QTabBar was empty before this function is called, the inserted tab
    /// becomes the current tab.
    /// 
    /// Inserting a new tab at an index less than or equal to the current index
    /// will increment the current index, but keep the current tab.
    insert_tab(index: i32, text: String) -> i32,
    /// 
    /// Inserts a new tab with text *text* at position *index.* If *index* is out of range, the new tab is appened. Returns the new
    /// tab's index.
    /// **Overloads**
    /// Inserts a new tab with icon *icon* and text *text* at position
    /// *index.* If *index* is out of range, the new tab is
    /// appended. Returns the new tab's index.
    /// 
    /// If the QTabBar was empty before this function is called, the inserted tab
    /// becomes the current tab.
    /// 
    /// Inserting a new tab at an index less than or equal to the current index
    /// will increment the current index, but keep the current tab.
    [org_name(insertTab)]
    insert_tab_2(index: i32, icon: &IconType, text: String) -> i32,
    /// 
    /// Removes the tab at position *index.*
    /// 
    /// **See also:** SelectionBehavior
    remove_tab(index: i32),
    /// 
    /// Moves the item at index position *from* to index position *to.*
    /// 
    /// **See also:** [`tab_moved()`]
    /// [`tab_layout_change()`]
    move_tab(from: i32, to: i32),
    /// 
    /// Returns `true` if the tab at position *index* is enabled; otherwise
    /// returns `false.`
    is_tab_enabled(index: i32) -> bool,
    /// 
    /// If *enabled* is true then the tab at position *index* is
    /// enabled; otherwise the item at position *index* is disabled.
    set_tab_enabled(index: i32, arg0: bool),
    /// 
    /// Returns the text of the tab at position *index,* or an empty
    /// string if *index* is out of range.
    /// 
    /// Returns the text color of the tab with the given *index,* or a invalid
    /// color if *index* is out of range.
    /// 
    /// **See also:** [`set_tab_text_color()`]
    tab_text(index: i32) -> String,
    /// 
    /// Sets the text of the tab at position *index* to *text.*
    /// 
    /// Sets the color of the text in the tab with the given *index* to the specified *color.*
    /// 
    /// If an invalid color is specified, the tab will use the QTabBar foreground role instead.
    /// 
    /// **See also:** [`tab_text_color()`]
    set_tab_text(index: i32, text: String),
    /// 
    /// Returns the text color of the tab with the given *index,* or a invalid
    /// color if *index* is out of range.
    /// 
    /// **See also:** [`set_tab_text_color()`]
    tab_text_color(index: i32) -> Color,
    /// 
    /// Sets the color of the text in the tab with the given *index* to the specified *color.*
    /// 
    /// If an invalid color is specified, the tab will use the QTabBar foreground role instead.
    /// 
    /// **See also:** [`tab_text_color()`]
    set_tab_text_color(index: i32, color: &ColorType),
    /// 
    /// Returns the icon of the tab at position *index,* or a null icon
    /// if *index* is out of range.
    tab_icon(index: i32) -> Icon,
    /// 
    /// Sets the icon of the tab at position *index* to *icon.*
    set_tab_icon(index: i32, icon: &IconType),
    /// 
    /// This property controls how items are elided when there is not
    /// enough space to show them for a given tab bar size.
    /// 
    /// By default the value is style dependent.
    /// 
    /// **See also:** [`TabWidget::elide_mode()`]
    /// usesScrollButtons
    /// [`Style::sh_tab_bar_elide_mode()`]
    elide_mode() -> Rute::TextElideMode,
    set_elide_mode(arg0: Rute::TextElideMode),
    /// 
    /// Sets the tool tip of the tab at position *index* to *tip.*
    set_tab_tool_tip(index: i32, tip: String),
    /// 
    /// Returns the tool tip of the tab at position *index,* or an empty
    /// string if *index* is out of range.
    tab_tool_tip(index: i32) -> String,
    /// 
    /// Sets the What's This help text of the tab at position *index*
    /// to *text.*
    set_tab_whats_this(index: i32, text: String),
    /// 
    /// Returns the What's This help text of the tab at position *index,*
    /// or an empty string if *index* is out of range.
    tab_whats_this(index: i32) -> String,
    /// 
    /// Sets the data of the tab at position *index* to *data.*
    set_tab_data(index: i32, data: &VariantType),
    /// 
    /// Returns the data of the tab at position *index,* or a null
    /// variant if *index* is out of range.
    tab_data(index: i32) -> Variant,
    /// 
    /// Returns the visual rectangle of the tab at position *index,* or a null rectangle if *index* is out of range.
    tab_rect(index: i32) -> Rect,
    /// 
    /// Returns the index of the tab that covers *position* or -1 if no
    /// tab covers *position;*
    tab_at(pos: &PointType) -> i32,
    /// 
    /// The current index is -1 if there is no current tab.
    current_index() -> i32,
    /// 
    count() -> i32,
    /// 
    [event] size_hint() -> Size,
    /// 
    [event] minimum_size_hint() -> Size,
    set_draw_base(draw_the_base: bool),
    /// 
    /// If true then QTabBar draws a base in relation to the styles overlab.
    /// Otherwise only the tabs are drawn.
    /// 
    /// **See also:** [`Style::pixel_metric`]
    /// [`Style::pm_tab_bar_base_overlap()`]
    /// [`StyleOptionTabBarBase`]
    draw_base() -> bool,
    /// 
    /// The default value is style-dependent. `iconSize` is a maximum
    /// size; icons that are smaller are not scaled up.
    /// 
    /// **See also:** [`TabWidget::icon_size()`]
    icon_size() -> Size,
    set_icon_size(size: &SizeType),
    /// 
    /// When there are too many tabs in a tab bar for its size, the tab bar can either choose
    /// to expand its size or to add buttons that allow you to scroll through the tabs.
    /// 
    /// By default the value is style dependant.
    /// 
    /// **See also:** elideMode
    /// [`TabWidget::uses_scroll_buttons()`]
    /// [`Style::sh_tab_bar_prefer_no_arrows()`]
    uses_scroll_buttons() -> bool,
    set_uses_scroll_buttons(use_buttons: bool),
    /// 
    /// When tabsClosable is set to true a close button will appear on the tab on
    /// either the left or right hand side depending upon the style. When the button
    /// is clicked the tab the signal tabCloseRequested will be emitted.
    /// 
    /// By default the value is false.
    /// 
    /// **See also:** [`set_tab_button()`]
    /// [`tab_removed()`]
    tabs_closable() -> bool,
    set_tabs_closable(closable: bool),
    /// 
    /// Sets *widget* on the tab *index.* The widget is placed
    /// on the left or right hand side depending upon the *position.*
    /// 
    /// Any previously set widget in *position* is hidden.
    /// 
    /// The tab bar will take ownership of the widget and so all widgets set here
    /// will be deleted by the tab bar when it is destroyed unless you separately
    /// reparent the widget after setting some other widget (or 0).
    /// 
    /// **See also:** [`tabs_closable()`]
    set_tab_button(index: i32, position: TabBar::ButtonPosition, widget: *WidgetType),
    /// 
    /// Returns the widget set a tab *index* and *position* or 0 if
    /// one is not set.
    tab_button(index: i32, position: TabBar::ButtonPosition) -> Widget?,
    /// 
    /// By default the value is SelectRightTab.
    /// 
    /// **See also:** [`remove_tab()`]
    selection_behavior_on_remove() -> TabBar::SelectionBehavior,
    set_selection_behavior_on_remove(behavior: TabBar::SelectionBehavior),
    /// 
    /// By default the value is true.
    /// 
    /// **See also:** [`TabWidget::document_mode()`]
    expanding() -> bool,
    set_expanding(enabled: bool),
    is_movable() -> bool,
    set_movable(movable: bool),
    /// 
    /// This property is used as a hint for styles to draw the tabs in a different
    /// way then they would normally look in a tab widget. On MacOS this will
    /// look similar to the tabs in Safari or Sierra's Terminal.app.
    /// 
    /// **See also:** [`TabWidget::document_mode()`]
    document_mode() -> bool,
    set_document_mode(set: bool),
    /// 
    /// By default, this property is false.
    /// 
    /// **See also:** [`Widget::visible()`]
    auto_hide() -> bool,
    set_auto_hide(hide: bool),
    /// 
    /// **Note**: You should also set acceptDrops property to true to make this feature
    /// work.
    /// 
    /// By default, this property is false.
    change_current_on_drag() -> bool,
    set_change_current_on_drag(change: bool),
    /// 
    /// Returns the accessibleName of the tab at position *index,* or an empty
    /// string if *index* is out of range.
    accessible_tab_name(index: i32) -> String,
    /// 
    /// Sets the accessibleName of the tab at position *index* to *name.*
    set_accessible_tab_name(index: i32, name: String),
    set_current_index(index: i32),
    /// 
    /// This signal is emitted when the tab bar's current tab changes. The
    /// new current has the given *index,* or -1 if there isn't a new one
    /// (for example, if there are no tab in the QTabBar)
    [signal] current_changed(index: i32),
    /// 
    /// This signal is emitted when the close button on a tab is clicked.
    /// The *index* is the index that should be removed.
    /// 
    /// **See also:** [`set_tabs_closable()`]
    [signal] tab_close_requested(index: i32),
    /// 
    /// This signal is emitted when the tab has moved the tab
    /// at index position *from* to index position *to.*
    /// 
    /// note: QTabWidget will automatically move the page when
    /// this signal is emitted from its tab bar.
    /// 
    /// **See also:** [`move_tab()`]
    [signal] tab_moved(from: i32, to: i32),
    /// 
    /// This signal is emitted when user clicks on a tab at an *index.*
    /// 
    /// *index* is the index of a clicked tab, or -1 if no tab is under the cursor.
    /// 
    [signal] tab_bar_clicked(index: i32),
    /// 
    /// This signal is emitted when the user double clicks on a tab at *index.*
    /// 
    /// *index* refers to the tab clicked, or -1 if no tab is under the cursor.
    /// 
    [signal] tab_bar_double_clicked(index: i32),
    /// 
    /// Returns the size hint for the tab at position *index.*
    [event] tab_size_hint(index: i32) -> Size,
    /// 
    /// Returns the minimum tab size hint for the tab at position *index.*
    [event] minimum_tab_size_hint(index: i32) -> Size,
    /// 
    /// This virtual handler is called after a new tab was added or
    /// inserted at position *index.*
    /// 
    /// **See also:** [`tab_removed()`]
    [event] tab_inserted(index: i32),
    /// 
    /// This virtual handler is called after a tab was removed from
    /// position *index.*
    /// 
    /// **See also:** [`tab_inserted()`]
    [event] tab_removed(index: i32),
    /// 
    /// This virtual handler is called whenever the tab layout changes.
    /// 
    /// **See also:** [`tab_rect()`]
    [event] tab_layout_change(),
    /// 
    [event] event(arg0: *EventType) -> bool,
    /// 
    [event] resize_event(arg0: *ResizeEventType),
    /// 
    [event] show_event(arg0: *ShowEventType),
    /// 
    [event] hide_event(arg0: *HideEventType),
    /// 
    [event] paint_event(arg0: *PaintEventType),
    /// 
    [event] mouse_press_event(arg0: *MouseEventType),
    /// 
    [event] mouse_move_event(arg0: *MouseEventType),
    /// 
    [event] mouse_release_event(arg0: *MouseEventType),
    [event] wheel_event(event: *WheelEventType),
    /// 
    [event] key_press_event(arg0: *KeyEventType),
    /// 
    [event] change_event(arg0: *EventType),
    /// 
    [event] timer_event(event: *TimerEventType),
    /// 
    /// Initialize *option* with the values from the tab at *tabIndex.* This method
    /// is useful for subclasses when they need a QStyleOptionTab,
    /// but don't want to fill in all the information themselves.
    /// 
    /// **See also:** [`StyleOption::init_from`]
    /// [`TabWidget::init_style_option`]
    init_style_option(option: *StyleOptionTabType, tab_index: i32),
}

[org_name(QTabBar)]
enum Shape {
    /// The normal rounded look above the pages
    RoundedNorth,
    /// The normal rounded look below the pages
    RoundedSouth,
    /// The normal rounded look on the left side of the pages
    RoundedWest,
    /// The normal rounded look on the right side the pages
    RoundedEast,
    /// Triangular tabs above the pages.
    TriangularNorth,
    /// Triangular tabs similar to those used in the Excel spreadsheet, for example
    TriangularSouth,
    /// Triangular tabs on the left of the pages.
    TriangularWest,
    /// Triangular tabs on the right of the pages.
    TriangularEast,
}

[org_name(QTabBar)]
enum ButtonPosition {
    /// Left side of the tab.
    LeftSide,
    /// Right side of the tab.
    RightSide,
}

[org_name(QTabBar)]
enum SelectionBehavior {
    /// Select the tab to the left of the one being removed.
    SelectLeftTab,
    /// Select the tab to the right of the one being removed.
    SelectRightTab,
    /// Select the previously selected tab.
    SelectPreviousTab,
}

// vim: syntax=rust expandtab ts=4 sw=4
