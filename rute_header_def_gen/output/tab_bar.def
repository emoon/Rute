#[org_name(QTabBar)]
enum Shape {
    RoundedNorth,
    RoundedSouth,
    RoundedWest,
    RoundedEast,
    TriangularNorth,
    TriangularSouth,
    TriangularWest,
    TriangularEast,
}

#[org_name(QTabBar)]
enum ButtonPosition {
    LeftSide,
    RightSide,
}

#[org_name(QTabBar)]
enum SelectionBehavior {
    SelectLeftTab,
    SelectRightTab,
    SelectPreviousTab,
}

struct TabBar : Widget {
    shape() -> TabBar::Shape,
    set_shape(shape: TabBar::Shape),
    add_tab(text: String) -> i32,
    add_tab(icon: &IconType, text: String) -> i32,
    insert_tab(index: i32, text: String) -> i32,
    insert_tab(index: i32, icon: &IconType, text: String) -> i32,
    remove_tab(index: i32),
    move_tab(from: i32, to: i32),
    is_tab_enabled(index: i32) -> bool,
    set_tab_enabled(index: i32, arg0: bool),
    tab_text(index: i32) -> String,
    set_tab_text(index: i32, text: String),
    tab_text_color(index: i32) -> Color,
    set_tab_text_color(index: i32, color: &ColorType),
    tab_icon(index: i32) -> Icon,
    set_tab_icon(index: i32, icon: &IconType),
    elide_mode() -> Rute::TextElideMode,
    set_elide_mode(arg0: Rute::TextElideMode),
    set_tab_tool_tip(index: i32, tip: String),
    tab_tool_tip(index: i32) -> String,
    set_tab_whats_this(index: i32, text: String),
    tab_whats_this(index: i32) -> String,
    set_tab_data(index: i32, data: &VariantType),
    tab_data(index: i32) -> Variant,
    tab_rect(index: i32) -> Rect,
    tab_at(pos: &PointType) -> i32,
    current_index() -> i32,
    count() -> i32,
    [replace] size_hint() -> Size,
    [replace] minimum_size_hint() -> Size,
    set_draw_base(draw_the_base: bool),
    draw_base() -> bool,
    icon_size() -> Size,
    set_icon_size(size: &SizeType),
    uses_scroll_buttons() -> bool,
    set_uses_scroll_buttons(use_buttons: bool),
    tabs_closable() -> bool,
    set_tabs_closable(closable: bool),
    set_tab_button(index: i32, position: TabBar::ButtonPosition, widget: &WidgetType),
    tab_button(index: i32, position: TabBar::ButtonPosition) -> Widget?,
    selection_behavior_on_remove() -> TabBar::SelectionBehavior,
    set_selection_behavior_on_remove(behavior: TabBar::SelectionBehavior),
    expanding() -> bool,
    set_expanding(enabled: bool),
    is_movable() -> bool,
    set_movable(movable: bool),
    document_mode() -> bool,
    set_document_mode(set: bool),
    auto_hide() -> bool,
    set_auto_hide(hide: bool),
    change_current_on_drag() -> bool,
    set_change_current_on_drag(change: bool),
    accessible_tab_name(index: i32) -> String,
    set_accessible_tab_name(index: i32, name: String),
    set_current_index(index: i32),
    [event] current_changed(index: i32),
    [event] tab_close_requested(index: i32),
    [event] tab_moved(from: i32, to: i32),
    [event] tab_bar_clicked(index: i32),
    [event] tab_bar_double_clicked(index: i32),
    [replace] tab_size_hint(index: i32) -> Size,
    [replace] minimum_tab_size_hint(index: i32) -> Size,
    [replace] tab_inserted(index: i32),
    [replace] tab_removed(index: i32),
    [replace] tab_layout_change(),
    [replace] event(arg0: &EventType) -> bool,
    [replace] resize_event(arg0: &ResizeEventType),
    [replace] show_event(arg0: &ShowEventType),
    [replace] hide_event(arg0: &HideEventType),
    [replace] paint_event(arg0: &PaintEventType),
    [replace] mouse_press_event(arg0: &MouseEventType),
    [replace] mouse_move_event(arg0: &MouseEventType),
    [replace] mouse_release_event(arg0: &MouseEventType),
    [replace] wheel_event(event: &WheelEventType),
    [replace] key_press_event(arg0: &KeyEventType),
    [replace] change_event(arg0: &EventType),
    [replace] timer_event(event: &TimerEventType),
    init_style_option(option: &StyleOptionTabType, tab_index: i32),
}

// vim: syntax=rust expandtab ts=4 sw=4
