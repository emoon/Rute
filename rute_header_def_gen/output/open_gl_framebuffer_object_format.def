/// 
/// A framebuffer object has several characteristics:
/// * [Number of samples per pixels.](setSamples())
/// 
/// * [Depth and/or stencil attachments.](setAttachment())
/// 
/// * [Texture target.](setTextureTarget())
/// 
/// * [Internal texture format.](setInternalTextureFormat())
/// 
/// Note that the desired attachments or number of samples per pixels might not
/// be supported by the hardware driver. Call QOpenGLFramebufferObject::format()
/// after creating a QOpenGLFramebufferObject to find the exact format that was
/// used to create the frame buffer object.
/// 
/// **See also:** [`OpenGLFramebufferObject`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct OpenGLFramebufferObjectFormat {
    /// 
    /// Sets the number of samples per pixel for a multisample framebuffer object
    /// to *samples.* The default sample count of 0 represents a regular
    /// non-multisample framebuffer object.
    /// 
    /// If the desired amount of samples per pixel is not supported by the hardware
    /// then the maximum number of samples per pixel will be used. Note that
    /// multisample framebuffer objects can not be bound as textures. Also, the
    /// `GL_EXT_framebuffer_multisample` extension is required to create a
    /// framebuffer with more than one sample per pixel.
    /// 
    /// **See also:** [`samples()`]
    set_samples(samples: i32),
    /// 
    /// Returns the number of samples per pixel if a framebuffer object
    /// is a multisample framebuffer object. Otherwise, returns 0.
    /// The default value is 0.
    /// 
    /// **See also:** [`set_samples()`]
    samples() -> i32,
    /// 
    /// Enables mipmapping if *enabled* is true; otherwise disables it.
    /// 
    /// Mipmapping is disabled by default.
    /// 
    /// If mipmapping is enabled, additional memory will be allocated for
    /// the mipmap levels. The mipmap levels can be updated by binding the
    /// texture and calling glGenerateMipmap(). Mipmapping cannot be enabled
    /// for multisampled framebuffer objects.
    /// 
    /// **See also:** [`mipmap()`]
    /// [`OpenGLFramebufferObject::texture`]
    set_mipmap(enabled: bool),
    /// 
    /// Returns `true` if mipmapping is enabled.
    /// 
    /// **See also:** [`set_mipmap()`]
    mipmap() -> bool,
    /// 
    /// Sets the attachment configuration of a framebuffer object to *attachment.*
    /// 
    /// **See also:** [`attachment()`]
    set_attachment(attachment: OpenGLFramebufferObject::Attachment),
    /// 
    /// Returns the configuration of the depth and stencil buffers attached to
    /// a framebuffer object. The default is QOpenGLFramebufferObject::NoAttachment.
    /// 
    /// **See also:** [`set_attachment()`]
    attachment() -> OpenGLFramebufferObject::Attachment,
    /// 
    /// Sets the texture target of the texture attached to a framebuffer object to
    /// *target.* Ignored for multisample framebuffer objects.
    /// 
    /// **See also:** [`texture_target()`]
    /// [`samples()`]
    set_texture_target(target: GLenum),
    /// 
    /// Returns the texture target of the texture attached to a framebuffer object.
    /// Ignored for multisample framebuffer objects. The default is
    /// `GL_TEXTURE_2D.`
    /// 
    /// **See also:** [`set_texture_target()`]
    /// [`samples()`]
    texture_target() -> GLenum,
    /// 
    /// Sets the internal format of a framebuffer object's texture or
    /// multisample framebuffer object's color buffer to
    /// *internalTextureFormat.*
    /// 
    /// **See also:** [`internal_texture_format()`]
    set_internal_texture_format(internal_texture_format: GLenum),
    /// 
    /// Returns the internal format of a framebuffer object's texture or
    /// multisample framebuffer object's color buffer. The default is
    /// `GL_RGBA8` on desktop OpenGL systems, and `GL_RGBA` on
    /// OpenGL/ES systems.
    /// 
    /// **See also:** [`set_internal_texture_format()`]
    internal_texture_format() -> GLenum,
}

// vim: syntax=rust expandtab ts=4 sw=4
