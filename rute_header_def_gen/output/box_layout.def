enum Direction {
    LeftToRight,
    RightToLeft,
    TopToBottom,
    BottomToTop,
    Down,
    Up,
}

struct BoxLayout : Layout {
    direction() -> BoxLayout::Direction,
    set_direction(arg0: BoxLayout::Direction),
    add_spacing(size: i32),
    add_spacer_item(spacer_item: &SpacerItemType),
    add_widget(arg0: &WidgetType, stretch: i32, alignment: Rute::Alignment),
    add_layout(layout: &LayoutType, stretch: i32),
    [override] add_item(arg0: &LayoutItemType),
    insert_spacing(index: i32, size: i32),
    insert_spacer_item(index: i32, spacer_item: &SpacerItemType),
    insert_widget(index: i32, widget: &WidgetType, stretch: i32, alignment: Rute::Alignment),
    insert_layout(index: i32, layout: &LayoutType, stretch: i32),
    insert_item(index: i32, arg0: &LayoutItemType),
    spacing() -> i32,
    set_spacing(spacing: i32),
    [override] size_hint() -> Size,
    [override] minimum_size() -> Size,
    [override] maximum_size() -> Size,
    [override] has_height_for_width() -> bool,
    [override] height_for_width(arg0: i32) -> i32,
    [override] minimum_height_for_width(arg0: i32) -> i32,
    [override] expanding_directions() -> Rute::Orientations,
    [override] invalidate(),
    [override] item_at(arg0: i32) -> LayoutItem?,
    [override] take_at(arg0: i32) -> LayoutItem?,
    [override] count() -> i32,
}

// vim: syntax=rust expandtab ts=4 sw=4
