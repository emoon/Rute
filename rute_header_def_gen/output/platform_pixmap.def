/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct PlatformPixmap {
    [event] create_compatible_platform_pixmap() -> PlatformPixmap?,
    [event] resize(width: i32, height: i32),
    [event] from_image(image: &ImageType, flags: Rute::ImageConversionFlags),
    [event] from_image_in_place(image: &ImageType, flags: Rute::ImageConversionFlags),
    [event] from_image_reader(image_reader: *ImageReaderType, flags: Rute::ImageConversionFlags),
    [event] from_file(filename: String, format: *char, flags: Rute::ImageConversionFlags) -> bool,
    [event] from_data(buffer: *uchar, len: uint, format: *char, flags: Rute::ImageConversionFlags) -> bool,
    [event] copy(data: *PlatformPixmapType, rect: &RectType),
    [event] scroll(dx: i32, dy: i32, rect: &RectType) -> bool,
    [event] fill(color: &ColorType),
    [event] mask() -> Bitmap,
    [event] set_mask(mask: &BitmapType),
    [event] has_alpha_channel() -> bool,
    [event] to_image() -> Image,
    [org_name(toImage)]
    [event] to_image_2(rect: &RectType) -> Image,
    [event] paint_engine() -> PaintEngine?,
    serial_number() -> i32,
    pixel_type() -> PlatformPixmap::PixelType,
    class_id() -> PlatformPixmap::ClassId,
    [event] device_pixel_ratio() -> f32,
    [event] set_device_pixel_ratio(scale_factor: f32),
    [event] buffer() -> Image?,
    width() -> i32,
    height() -> i32,
    color_count() -> i32,
    depth() -> i32,
    is_null() -> bool,
    cache_key() -> i64,
    [static] create(w: i32, h: i32, type: PlatformPixmap::PixelType) -> PlatformPixmap?,
    set_serial_number(ser_no: i32),
    set_detach_number(det_no: i32),
}

[org_name(QPlatformPixmap)]
enum PixelType {
    PixmapType = 0,
    BitmapType = 1,
}

[org_name(QPlatformPixmap)]
enum ClassId {
    RasterClass = 0,
    DirectFBClass = 1,
    BlitterClass = 2,
    Direct2DClass = 3,
    X11Class = 4,
    CustomClass = 1024,
}

// vim: syntax=rust expandtab ts=4 sw=4
