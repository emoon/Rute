struct MenuBar : Widget {
    add_action(text: String) -> Action?,
    add_action(text: String, receiver: &ObjectType, member: &char) -> Action?,
    add_menu(menu: &MenuType) -> Action?,
    add_menu(title: String) -> Menu?,
    add_menu(icon: &IconType, title: String) -> Menu?,
    add_separator() -> Action?,
    insert_separator(before: &ActionType) -> Action?,
    insert_menu(before: &ActionType, menu: &MenuType) -> Action?,
    clear(),
    active_action() -> Action?,
    set_active_action(action: &ActionType),
    set_default_up(arg0: bool),
    is_default_up() -> bool,
    [replace] size_hint() -> Size,
    [replace] minimum_size_hint() -> Size,
    [replace] height_for_width(arg0: i32) -> i32,
    action_at(arg0: &PointType) -> Action?,
    set_corner_widget(w: &WidgetType, corner: Rute::Corner),
    corner_widget(corner: Rute::Corner) -> Widget?,
    to_ns_menu() -> NSMenu?,
    is_native_menu_bar() -> bool,
    set_native_menu_bar(native_menu_bar: bool),
    platform_menu_bar() -> PlatformMenuBar?,
    [replace] set_visible(visible: bool),
    [event] hovered(action: &ActionType),
    [replace] change_event(arg0: &EventType),
    [replace] key_press_event(arg0: &KeyEventType),
    [replace] mouse_release_event(arg0: &MouseEventType),
    [replace] mouse_press_event(arg0: &MouseEventType),
    [replace] mouse_move_event(arg0: &MouseEventType),
    [replace] leave_event(arg0: &EventType),
    [replace] paint_event(arg0: &PaintEventType),
    [replace] resize_event(arg0: &ResizeEventType),
    [replace] action_event(arg0: &ActionEventType),
    [replace] focus_out_event(arg0: &FocusEventType),
    [replace] focus_in_event(arg0: &FocusEventType),
    [replace] timer_event(arg0: &TimerEventType),
    [replace] event_filter(arg0: &ObjectType, arg1: &EventType) -> bool,
    [replace] event(arg0: &EventType) -> bool,
    init_style_option(option: &StyleOptionMenuItemType, action: &ActionType),
}

// vim: syntax=rust expandtab ts=4 sw=4
