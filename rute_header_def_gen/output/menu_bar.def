/// 
/// A menu bar consists of a list of pull-down menu items. You add
/// menu items with addMenu(). For example, asuming that `menubar`
/// is a pointer to a QMenuBar and `fileMenu` is a pointer to a
/// QMenu, the following statement inserts the menu into the menu bar:
/// 
/// The ampersand in the menu item's text sets Alt+F as a shortcut for
/// this menu. (You can use to get a real ampersand in the menu
/// bar.)
/// 
/// There is no need to lay out a menu bar. It automatically sets its
/// own geometry to the top of the parent widget and changes it
/// appropriately whenever the parent is resized.
/// 
/// # Usage
/// 
/// In most main window style applications you would use the
/// [menuBar()](QMainWindow::)
/// function provided in QMainWindow,
/// adding [QMenu](QMenu)
/// s to the menu bar and adding [QAction](QAction)
/// s to the
/// pop-up menus.
/// 
/// Example (from the [Menus](mainwindows/menus)
/// example):
/// 
/// Menu items may be removed with removeAction().
/// 
/// Widgets can be added to menus by using instances of the QWidgetAction
/// class to hold them. These actions can then be inserted into menus
/// in the usual way; see the QMenu documentation for more details.
/// 
/// # Platform Dependent Look and Feel
/// 
/// Different platforms have different requirements for the appearance
/// of menu bars and their behavior when the user interacts with them.
/// For example, Windows systems are often configured so that the
/// underlined character mnemonics that indicate keyboard shortcuts
/// for items in the menu bar are only shown when the **{Alt}** key is
/// pressed.
/// 
/// # QMenuBar as a Global Menu Bar
/// 
/// On MacOS and on certain Linux desktop environments such as
/// Ubuntu Unity, QMenuBar is a wrapper for using the system-wide menu bar.
/// If you have multiple menu bars in one dialog the outermost menu bar
/// (normally inside a widget with widget flag Qt::Window) will
/// be used for the system-wide menu bar.
/// 
/// Qt for MacOS also provides a menu bar merging feature to make
/// QMenuBar conform more closely to accepted MacOS menu bar layout.
/// The merging functionality is based on string matching the title of
/// a QMenu entry. These strings are translated (using QObject::tr())
/// in the context. If an entry is moved its slots will still
/// fire as if it was in the original place. The table below outlines
/// the strings looked for and where the entry is placed if matched:
/// 
/// * String matches
/// * Placement
/// * Notes
/// * about.*
/// * Application Menu | About <application name>
/// * The application name is fetched from the `Info.plist` file (see note below). If this entry is not found no About item will appear in the Application Menu.
/// * config, options, setup, settings or preferences
/// * Application Menu | Preferences
/// * If this entry is not found the Settings item will be disabled
/// * quit or exit
/// * Application Menu | Quit <application name>
/// * If this entry is not found a default Quit item will be created to call QCoreApplication::quit()
/// 
/// You can override this behavior by using the QAction::menuRole()
/// property.
/// 
/// If you want all windows in a Mac application to share one menu
/// bar, you must create a menu bar that does not have a parent.
/// Create a parent-less menu bar this way:
/// 
/// **Note:** Do *not* call QMainWindow::menuBar() to create the
/// shared menu bar, because that menu bar will have the QMainWindow
/// as its parent. That menu bar would only be displayed for the
/// parent QMainWindow.
/// 
/// **Note:** The text used for the application name in the MacOS menu
/// bar is obtained from the value set in the `Info.plist` file in
/// the application's bundle. See [Qt for macOS - Deployment](Qt%20for%20macOS%20-%20Deployment)
/// for more information.
/// 
/// **Note:** On Linux, if the com.canonical.AppMenu.Registrar
/// service is available on the D-Bus session bus, then Qt will
/// communicate with it to install the application's menus into the
/// global menu bar, as described.
/// 
/// # Examples
/// 
/// The [Menus](mainwindows/menus)
/// example shows how to use QMenuBar
/// and QMenu. The other [main window
/// application examples](Main%20Window%20Examples)
/// also provide menus using these classes.
/// 
/// **See also:** QMenu
/// QShortcut
/// QAction
/// {http://developer.apple.com/documentation/UserExperience/Conceptual/AppleHIGuidelines/XHIGIntro/XHIGIntro.html}{Introduction to Apple Human Interface Guidelines}
/// {fowler}{GUI Design Handbook: Menu Bar}
/// {Menus Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct MenuBar : Widget {
    /// 
    /// **Overloads**
    /// This convenience function creates a new action with *text.*
    /// The function adds the newly created action to the menu's
    /// list of actions, and returns it.
    /// 
    /// **See also:** QWidget::addAction()
    /// QWidget::actions()
    /// 
    /// **Overloads**
    /// This convenience function creates a new action with the given *text.* The action's triggered() signal is connected to the *receiver's* *member* slot. The function adds the newly created
    /// action to the menu's list of actions and returns it.
    /// 
    /// **See also:** QWidget::addAction()
    /// QWidget::actions()
    /// 
    /// **Overloads**
    /// This convenience function creates a new action with the given *text.* The action's triggered() signal is connected to the
    /// *method* of the *receiver.* The function adds the newly created
    /// action to the menu's list of actions and returns it.
    /// 
    /// QMenuBar takes ownership of the returned QAction.
    /// 
    /// **See also:** QWidget::addAction()
    /// QWidget::actions()
    /// 
    /// **Overloads**
    /// This convenience function creates a new action with the given *text.* The action's triggered() signal is connected to the
    /// *functor.* The function adds the newly created
    /// action to the menu's list of actions and returns it.
    /// 
    /// QMenuBar takes ownership of the returned QAction.
    /// 
    /// **See also:** QWidget::addAction()
    /// QWidget::actions()
    add_action(text: String) -> Action?,
    /// 
    /// **Overloads**
    /// This convenience function creates a new action with *text.*
    /// The function adds the newly created action to the menu's
    /// list of actions, and returns it.
    /// 
    /// **See also:** QWidget::addAction()
    /// QWidget::actions()
    /// 
    /// **Overloads**
    /// This convenience function creates a new action with the given *text.* The action's triggered() signal is connected to the *receiver's* *member* slot. The function adds the newly created
    /// action to the menu's list of actions and returns it.
    /// 
    /// **See also:** QWidget::addAction()
    /// QWidget::actions()
    /// 
    /// **Overloads**
    /// This convenience function creates a new action with the given *text.* The action's triggered() signal is connected to the
    /// *method* of the *receiver.* The function adds the newly created
    /// action to the menu's list of actions and returns it.
    /// 
    /// QMenuBar takes ownership of the returned QAction.
    /// 
    /// **See also:** QWidget::addAction()
    /// QWidget::actions()
    /// 
    /// **Overloads**
    /// This convenience function creates a new action with the given *text.* The action's triggered() signal is connected to the
    /// *functor.* The function adds the newly created
    /// action to the menu's list of actions and returns it.
    /// 
    /// QMenuBar takes ownership of the returned QAction.
    /// 
    /// **See also:** QWidget::addAction()
    /// QWidget::actions()
    add_action(text: String, receiver: *ObjectType, member: *char) -> Action?,
    /// 
    /// Appends a new QMenu with *title* to the menu bar. The menu bar
    /// takes ownership of the menu. Returns the new menu.
    /// 
    /// **See also:** QWidget::addAction()
    /// QMenu::menuAction()
    /// 
    /// Appends a new QMenu with *icon* and *title* to the menu bar. The menu bar
    /// takes ownership of the menu. Returns the new menu.
    /// 
    /// **See also:** QWidget::addAction()
    /// QMenu::menuAction()
    /// 
    /// Appends *menu* to the menu bar. Returns the menu's menuAction().
    /// 
    /// **Note**: The returned QAction object can be used to hide the corresponding
    /// menu.
    /// 
    /// **See also:** QWidget::addAction()
    /// QMenu::menuAction()
    add_menu(title: String) -> Menu?,
    /// 
    /// Appends a new QMenu with *title* to the menu bar. The menu bar
    /// takes ownership of the menu. Returns the new menu.
    /// 
    /// **See also:** QWidget::addAction()
    /// QMenu::menuAction()
    /// 
    /// Appends a new QMenu with *icon* and *title* to the menu bar. The menu bar
    /// takes ownership of the menu. Returns the new menu.
    /// 
    /// **See also:** QWidget::addAction()
    /// QMenu::menuAction()
    /// 
    /// Appends *menu* to the menu bar. Returns the menu's menuAction().
    /// 
    /// **Note**: The returned QAction object can be used to hide the corresponding
    /// menu.
    /// 
    /// **See also:** QWidget::addAction()
    /// QMenu::menuAction()
    add_menu(icon: &IconType, title: String) -> Menu?,
    /// 
    /// Appends a separator to the menu.
    add_separator() -> Action?,
    /// 
    /// This convenience function creates a new separator action, i.e. an
    /// action with QAction::isSeparator() returning true. The function inserts
    /// the newly created action into this menu bar's list of actions before
    /// action *before* and returns it.
    /// 
    /// **See also:** QWidget::insertAction()
    /// addSeparator()
    insert_separator(before: *ActionType) -> Action?,
    /// 
    /// This convenience function inserts *menu* before action *before*
    /// and returns the menus menuAction().
    /// 
    /// **See also:** QWidget::insertAction()
    /// addMenu()
    insert_menu(before: *ActionType, menu: *MenuType) -> Action?,
    /// 
    /// Removes all the actions from the menu bar.
    /// 
    /// **Note**: On MacOS , menu items that have been merged to the system
    /// menu bar are not removed by this function. One way to handle this
    /// would be to remove the extra actions yourself. You can set the
    /// [menu role](QAction::MenuRole)
    /// on the different menus, so that
    /// you know ahead of time which menu items get merged and which do
    /// not. Then decide what to recreate or remove yourself.
    /// 
    /// **See also:** removeAction()
    clear(),
    /// 
    /// Returns the QAction that is currently highlighted. A null pointer
    /// will be returned if no action is currently selected.
    active_action() -> Action?,
    /// 
    /// Sets the currently highlighted action to *act.*
    set_active_action(action: *ActionType),
    set_default_up(arg0: bool),
    is_default_up() -> bool,
    /// 
    [event] size_hint() -> Size,
    /// 
    [event] minimum_size_hint() -> Size,
    /// 
    [event] height_for_width(arg0: i32) -> i32,
    /// 
    /// Returns the QAction at *pt.* Returns 0 if there is no action at *pt* or if
    /// the location has a separator.
    /// 
    /// **See also:** addAction()
    /// addSeparator()
    action_at(arg0: &PointType) -> Action?,
    /// 
    /// This sets the given *widget* to be shown directly on the left of the first
    /// menu item, or on the right of the last menu item, depending on *corner.*
    /// 
    /// The menu bar takes ownership of *widget,* reparenting it into the menu bar.
    /// However, if the *corner* already contains a widget, this previous widget
    /// will no longer be managed and will still be a visible child of the menu bar.
    /// 
    /// **Note**: Using a corner other than Qt::TopRightCorner or Qt::TopLeftCorner
    /// will result in a warning.
    set_corner_widget(w: *WidgetType, corner: Rute::Corner),
    /// 
    /// Returns the widget on the left of the first or on the right of the last menu
    /// item, depending on *corner.*
    /// 
    /// **Note**: Using a corner other than Qt::TopRightCorner or Qt::TopLeftCorner
    /// will result in a warning.
    corner_widget(corner: Rute::Corner) -> Widget?,
    is_native_menu_bar() -> bool,
    set_native_menu_bar(native_menu_bar: bool),
    platform_menu_bar() -> PlatformMenuBar?,
    /// 
    [event] set_visible(visible: bool),
    /// 
    /// This signal is emitted when a menu action is highlighted; *action*
    /// is the action that caused the event to be sent.
    /// 
    /// Often this is used to update status information.
    /// 
    /// **See also:** triggered()
    /// QAction::hovered()
    [signal] hovered(action: *ActionType),
    /// 
    [event] change_event(arg0: *EventType),
    /// 
    [event] key_press_event(arg0: *KeyEventType),
    /// 
    [event] mouse_release_event(arg0: *MouseEventType),
    /// 
    [event] mouse_press_event(arg0: *MouseEventType),
    /// 
    [event] mouse_move_event(arg0: *MouseEventType),
    /// 
    [event] leave_event(arg0: *EventType),
    /// 
    [event] paint_event(arg0: *PaintEventType),
    /// 
    [event] resize_event(arg0: *ResizeEventType),
    /// 
    [event] action_event(arg0: *ActionEventType),
    /// 
    [event] focus_out_event(arg0: *FocusEventType),
    /// 
    [event] focus_in_event(arg0: *FocusEventType),
    /// 
    [event] timer_event(arg0: *TimerEventType),
    /// 
    [event] event_filter(arg0: *ObjectType, arg1: *EventType) -> bool,
    /// 
    /// 
    [event] event(arg0: *EventType) -> bool,
    /// 
    /// Initialize *option* with the values from the menu bar and information from *action.* This method
    /// is useful for subclasses when they need a QStyleOptionMenuItem, but don't want
    /// to fill in all the information themselves.
    /// 
    /// **See also:** QStyleOption::initFrom()
    /// QMenu::initStyleOption()
    init_style_option(option: *StyleOptionMenuItemType, action: *ActionType),
}

// vim: syntax=rust expandtab ts=4 sw=4
