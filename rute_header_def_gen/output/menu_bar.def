struct MenuBar : Widget {
    add_action(text: String) -> &ActionType,
    add_action(text: String, receiver: &ObjectType, member: &char) -> &ActionType,
    add_menu(menu: &MenuType) -> &ActionType,
    add_menu(title: String) -> &MenuType,
    add_menu(icon: &IconType, title: String) -> &MenuType,
    add_separator() -> &ActionType,
    insert_separator(before: &ActionType) -> &ActionType,
    insert_menu(before: &ActionType, menu: &MenuType) -> &ActionType,
    clear(),
    active_action() -> &ActionType,
    set_active_action(action: &ActionType),
    set_default_up(arg0: bool),
    is_default_up() -> bool,
    [override] size_hint() -> SizeType,
    [override] minimum_size_hint() -> SizeType,
    [override] height_for_width(arg0: i32) -> i32,
    action_at(arg0: &PointType) -> &ActionType,
    set_corner_widget(w: &WidgetType, corner: Rute::Corner),
    corner_widget(corner: Rute::Corner) -> &WidgetType,
    to_ns_menu() -> &NSMenu,
    is_native_menu_bar() -> bool,
    set_native_menu_bar(native_menu_bar: bool),
    platform_menu_bar() -> &PlatformMenuBarType,
    [override] set_visible(visible: bool),
    [event] hovered(action: &ActionType),
    [override] change_event(arg0: &EventType),
    [override] key_press_event(arg0: &KeyEventType),
    [override] mouse_release_event(arg0: &MouseEventType),
    [override] mouse_press_event(arg0: &MouseEventType),
    [override] mouse_move_event(arg0: &MouseEventType),
    [override] leave_event(arg0: &EventType),
    [override] paint_event(arg0: &PaintEventType),
    [override] resize_event(arg0: &ResizeEventType),
    [override] action_event(arg0: &ActionEventType),
    [override] focus_out_event(arg0: &FocusEventType),
    [override] focus_in_event(arg0: &FocusEventType),
    [override] timer_event(arg0: &TimerEventType),
    [override] event_filter(arg0: &ObjectType, arg1: &EventType) -> bool,
    [override] event(arg0: &EventType) -> bool,
    init_style_option(option: &StyleOptionMenuItemType, action: &ActionType),
}

// vim: syntax=rust expandtab ts=4 sw=4
