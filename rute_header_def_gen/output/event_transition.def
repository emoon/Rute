///   \class QEventTransition
///   \inmodule QtCore
/// 
///   \brief The QEventTransition class provides a QObject-specific transition for Qt events.
/// 
///   \since 4.6
///   \ingroup statemachine
/// 
///   A QEventTransition object binds an event to a particular QObject.
///   QEventTransition is part of \l{The State Machine Framework}.
/// 
///   Example:
/// 
///   \code
///   QPushButton *button = ...;
///   QState *s1 = ...;
///   QState *s2 = ...;
///   // If in s1 and the button receives an Enter event, transition to s2
///   QEventTransition *enterTransition = new QEventTransition(button, QEvent::Enter);
///   enterTransition->setTargetState(s2);
///   s1->addTransition(enterTransition);
///   // If in s2 and the button receives an Exit event, transition back to s1
///   QEventTransition *leaveTransition = new QEventTransition(button, QEvent::Leave);
///   leaveTransition->setTargetState(s1);
///   s2->addTransition(leaveTransition);
///   \endcode
/// 
///   \section1 Subclassing
/// 
///   When reimplementing the eventTest() function, you should first call the base
///   implementation to verify that the event is a QStateMachine::WrappedEvent for
///   the proper object and event type. You may then cast the event to a
///   QStateMachine::WrappedEvent and get the original event by calling
///   QStateMachine::WrappedEvent::event(), and perform additional checks on that
///   object.
/// 
///   \sa QState::addTransition()
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct EventTransition : AbstractTransition {
    ///   Returns the event source associated with this event transition.
    event_source() -> Object?,
    ///   Sets the event source associated with this event transition to be the given
    ///   \a object.
    set_event_source(object: *ObjectType),
    ///   Returns the event type that this event transition is associated with.
    event_type() -> Event::Type,
    ///   Sets the event \a type that this event transition is associated with.
    set_event_type(type: Event::Type),
    ///   \reimp
    [event] event_test(event: *EventType) -> bool,
    ///   \reimp
    [event] on_transition(event: *EventType),
    ///   \reimp
    [event] event(e: *EventType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
