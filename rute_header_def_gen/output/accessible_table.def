struct AccessibleTable : AccessibleTableInterface, AccessibleObject {
    is_valid() -> bool,
    role() -> Accessible::Role,
    state() -> Accessible::State,
    text(Accessible::Text t) -> String,
    rect() -> RectType,
    child_at(i32 x, i32 y) -> &AccessibleInterfaceType,
    child_count() -> i32,
    index_of_child(&AccessibleInterfaceType arg0) -> i32,
    parent() -> &AccessibleInterfaceType,
    child(i32 index) -> &AccessibleInterfaceType,
    interface_cast(Accessible::InterfaceType t),
    cell_at(i32 row, i32 column) -> &AccessibleInterfaceType,
    caption() -> &AccessibleInterfaceType,
    summary() -> &AccessibleInterfaceType,
    column_description(i32 column) -> String,
    row_description(i32 row) -> String,
    column_count() -> i32,
    row_count() -> i32,
    selected_cell_count() -> i32,
    selected_column_count() -> i32,
    selected_row_count() -> i32,
    selected_cells() -> <&AccessibleInterfaceType>,
    selected_columns() -> <i32>,
    selected_rows() -> <i32>,
    is_column_selected(i32 column) -> bool,
    is_row_selected(i32 row) -> bool,
    select_row(i32 row) -> bool,
    select_column(i32 column) -> bool,
    unselect_row(i32 row) -> bool,
    unselect_column(i32 column) -> bool,
    view() -> &AbstractItemViewType,
    model_change(&AccessibleTableModelChangeEventType event),
    cell_role() -> Accessible::Role,
    horizontal_header() -> &HeaderViewType,
    vertical_header() -> &HeaderViewType,
    logical_index(&ModelIndexType index) -> i32,
}

