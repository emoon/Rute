/// 
/// ![windows-tabwidget.png](windows-tabwidget.png)
/// 
/// A tab widget provides a tab bar (see QTabBar) and a
/// that is used to display pages related to each tab. By default, the
/// tab bar is shown above the page area, but different configurations
/// are available (see [TabPosition](TabPosition)
/// ). Each tab is associated with a
/// different widget (called a page). Only the current page is shown in
/// the page area; all the other pages are hidden. The user can show a
/// different page by clicking on its tab or by pressing its
/// Alt+ *letter* shortcut if it has one.
/// 
/// The normal way to use QTabWidget is to do the following:
/// * Create a QTabWidget.
/// * Create a QWidget for each of the pages in the tab dialog, but do not specify parent widgets for them.
/// * Insert child widgets into the page widget, using layouts to position them as normal.
/// * Call addTab() or insertTab() to put the page widgets into the tab widget, giving each tab a suitable label with an optional keyboard shortcut.
/// 
/// The position of the tabs is defined by [tabPosition,](tabPosition,)
/// their shape
/// by [tabShape.](tabShape.)
/// 
/// The signal currentChanged() is emitted when the user selects a
/// page.
/// 
/// The current page index is available as currentIndex(), the current
/// page widget with currentWidget(). You can retrieve a pointer to a
/// page widget with a given index using widget(), and can find the
/// index position of a widget with indexOf(). Use setCurrentWidget()
/// or setCurrentIndex() to show a particular page.
/// 
/// You can change a tab's text and icon using setTabText() or
/// setTabIcon(). A tab and its associated page can be removed with
/// removeTab().
/// 
/// Each tab is either enabled or disabled at any given time (see
/// setTabEnabled()). If a tab is enabled, the tab text is drawn
/// normally and the user can select that tab. If it is disabled, the
/// tab is drawn in a different way and the user cannot select that
/// tab. Note that even if a tab is disabled, the page can still be
/// visible, for example if all of the tabs happen to be disabled.
/// 
/// Tab widgets can be a very good way to split up a complex dialog.
/// An alternative is to use a QStackedWidget for which you provide some
/// means of navigating between pages, for example, a QToolBar or a
/// QListWidget.
/// 
/// Most of the functionality in QTabWidget is provided by a QTabBar
/// (at the top, providing the tabs) and a QStackedWidget (most of the
/// area, organizing the individual pages).
/// 
/// **See also:** [`TabBar`]
/// [`StackedWidget`]
/// [`ToolBox`]
/// {Tab Dialog Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TabWidget : Widget {
    /// 
    /// Adds a tab with the given *page* and *label* to the tab widget,
    /// and returns the index of the tab in the tab bar. Ownership of *page*
    /// is passed on to the QTabWidget.
    /// 
    /// If the tab's *label* contains an ampersand, the letter following
    /// the ampersand is used as a shortcut for the tab, e.g. if the
    /// label is then Alt+W becomes a shortcut which will
    /// move the focus to this tab.
    /// 
    /// **Note**: If you call addTab() after show(), the layout system will try
    /// to adjust to the changes in its widgets hierarchy and may cause
    /// flicker. To prevent this, you can set the QWidget::updatesEnabled
    /// property to false prior to changes; remember to set the property
    /// to true when the changes are done, making the widget receive paint
    /// events again.
    /// 
    /// **See also:** [`insert_tab()`]
    /// 
    /// **Overloads**
    /// Adds a tab with the given *page,* *icon,* and *label* to the tab
    /// widget, and returns the index of the tab in the tab bar. Ownership
    /// of *page* is passed on to the QTabWidget.
    /// 
    /// This function is the same as addTab(), but with an additional *icon.*
    add_tab(widget: *WidgetType, arg0: String) -> i32,
    /// 
    /// Adds a tab with the given *page* and *label* to the tab widget,
    /// and returns the index of the tab in the tab bar. Ownership of *page*
    /// is passed on to the QTabWidget.
    /// 
    /// If the tab's *label* contains an ampersand, the letter following
    /// the ampersand is used as a shortcut for the tab, e.g. if the
    /// label is then Alt+W becomes a shortcut which will
    /// move the focus to this tab.
    /// 
    /// **Note**: If you call addTab() after show(), the layout system will try
    /// to adjust to the changes in its widgets hierarchy and may cause
    /// flicker. To prevent this, you can set the QWidget::updatesEnabled
    /// property to false prior to changes; remember to set the property
    /// to true when the changes are done, making the widget receive paint
    /// events again.
    /// 
    /// **See also:** [`insert_tab()`]
    /// 
    /// **Overloads**
    /// Adds a tab with the given *page,* *icon,* and *label* to the tab
    /// widget, and returns the index of the tab in the tab bar. Ownership
    /// of *page* is passed on to the QTabWidget.
    /// 
    /// This function is the same as addTab(), but with an additional *icon.*
    [org_name(addTab)]
    add_tab_2(widget: *WidgetType, icon: &IconType, label: String) -> i32,
    /// 
    /// Inserts a tab with the given *label* and *page* into the tab
    /// widget at the specified *index,* and returns the index of the
    /// inserted tab in the tab bar. Ownership of *page* is passed on to the
    /// QTabWidget.
    /// 
    /// The label is displayed in the tab and may vary in appearance depending
    /// on the configuration of the tab widget.
    /// 
    /// If the tab's *label* contains an ampersand, the letter following
    /// the ampersand is used as a shortcut for the tab, e.g. if the
    /// label is then Alt+W becomes a shortcut which will
    /// move the focus to this tab.
    /// 
    /// If *index* is out of range, the tab is simply appended.
    /// Otherwise it is inserted at the specified position.
    /// 
    /// If the QTabWidget was empty before this function is called, the
    /// new page becomes the current page. Inserting a new tab at an index
    /// less than or equal to the current index will increment the current
    /// index, but keep the current page.
    /// 
    /// **Note**: If you call insertTab() after show(), the layout system will try
    /// to adjust to the changes in its widgets hierarchy and may cause
    /// flicker. To prevent this, you can set the QWidget::updatesEnabled
    /// property to false prior to changes; remember to set the property
    /// to true when the changes are done, making the widget receive paint
    /// events again.
    /// 
    /// **See also:** [`add_tab()`]
    /// 
    /// **Overloads**
    /// Inserts a tab with the given *label,* *page,* and *icon* into
    /// the tab widget at the specified *index,* and returns the index of the
    /// inserted tab in the tab bar. Ownership of *page* is passed on to the
    /// QTabWidget.
    /// 
    /// This function is the same as insertTab(), but with an additional
    /// *icon.*
    insert_tab(index: i32, widget: *WidgetType, arg0: String) -> i32,
    /// 
    /// Inserts a tab with the given *label* and *page* into the tab
    /// widget at the specified *index,* and returns the index of the
    /// inserted tab in the tab bar. Ownership of *page* is passed on to the
    /// QTabWidget.
    /// 
    /// The label is displayed in the tab and may vary in appearance depending
    /// on the configuration of the tab widget.
    /// 
    /// If the tab's *label* contains an ampersand, the letter following
    /// the ampersand is used as a shortcut for the tab, e.g. if the
    /// label is then Alt+W becomes a shortcut which will
    /// move the focus to this tab.
    /// 
    /// If *index* is out of range, the tab is simply appended.
    /// Otherwise it is inserted at the specified position.
    /// 
    /// If the QTabWidget was empty before this function is called, the
    /// new page becomes the current page. Inserting a new tab at an index
    /// less than or equal to the current index will increment the current
    /// index, but keep the current page.
    /// 
    /// **Note**: If you call insertTab() after show(), the layout system will try
    /// to adjust to the changes in its widgets hierarchy and may cause
    /// flicker. To prevent this, you can set the QWidget::updatesEnabled
    /// property to false prior to changes; remember to set the property
    /// to true when the changes are done, making the widget receive paint
    /// events again.
    /// 
    /// **See also:** [`add_tab()`]
    /// 
    /// **Overloads**
    /// Inserts a tab with the given *label,* *page,* and *icon* into
    /// the tab widget at the specified *index,* and returns the index of the
    /// inserted tab in the tab bar. Ownership of *page* is passed on to the
    /// QTabWidget.
    /// 
    /// This function is the same as insertTab(), but with an additional
    /// *icon.*
    [org_name(insertTab)]
    insert_tab_2(index: i32, widget: *WidgetType, icon: &IconType, label: String) -> i32,
    /// 
    /// Removes the tab at position *index* from this stack of widgets.
    /// The page widget itself is not deleted.
    /// 
    /// **See also:** [`add_tab()`]
    /// [`insert_tab()`]
    remove_tab(index: i32),
    /// 
    /// Returns `true` if the page at position *index* is enabled; otherwise returns `false.`
    /// 
    /// **See also:** [`set_tab_enabled()`]
    /// [`Widget::is_enabled`]
    is_tab_enabled(index: i32) -> bool,
    /// 
    /// If *enable* is true, the page at position *index* is enabled; otherwise the page at position *index* is
    /// disabled. The page's tab is redrawn appropriately.
    /// 
    /// QTabWidget uses QWidget::setEnabled() internally, rather than
    /// keeping a separate flag.
    /// 
    /// Note that even a disabled tab/page may be visible. If the page is
    /// visible already, QTabWidget will not hide it; if all the pages are
    /// disabled, QTabWidget will show one of them.
    /// 
    /// **See also:** [`is_tab_enabled()`]
    /// [`Widget::set_enabled`]
    set_tab_enabled(index: i32, arg0: bool),
    /// 
    /// Returns the label text for the tab on the page at position *index.*
    tab_text(index: i32) -> String,
    /// 
    /// Defines a new *label* for the page at position *index's* tab.
    /// 
    /// If the provided text contains an ampersand character ('&'), a
    /// shortcut is automatically created for it. The character that
    /// follows the '&' will be used as the shortcut key. Any previous
    /// shortcut will be overwritten, or cleared if no shortcut is defined
    /// by the text. See the [QShortcut](QShortcut%23mnemonic)
    /// 
    /// documentation for details (to display an actual ampersand, use
    /// '&&').
    /// 
    set_tab_text(index: i32, arg0: String),
    /// 
    /// Returns the icon for the tab on the page at position *index.*
    tab_icon(index: i32) -> Icon,
    /// 
    /// **Overloads**
    /// Sets the *icon* for the tab at position *index.*
    set_tab_icon(index: i32, icon: &IconType),
    /// 
    /// Sets the tab tool tip for the page at position *index* to *tip.*
    /// 
    /// **See also:** [`tab_tool_tip()`]
    set_tab_tool_tip(index: i32, tip: String),
    /// 
    /// Returns the tab tool tip for the page at position *index* or
    /// an empty string if no tool tip has been set.
    /// 
    /// **See also:** [`set_tab_tool_tip()`]
    tab_tool_tip(index: i32) -> String,
    /// 
    /// Sets the What's This help text for the page at position *index*
    /// to *text.*
    set_tab_whats_this(index: i32, text: String),
    /// 
    /// Returns the What's This help text for the page at position *index,*
    /// or an empty string if no help text has been set.
    tab_whats_this(index: i32) -> String,
    /// 
    /// The current index is -1 if there is no current widget.
    /// 
    /// By default, this property contains a value of -1 because there are initially
    /// no tabs in the widget.
    current_index() -> i32,
    /// 
    /// Returns a pointer to the page currently being displayed by the tab
    /// dialog. The tab dialog does its best to make sure that this value
    /// is never 0 (but if you try hard enough, it can be).
    /// 
    /// **See also:** [`current_index()`]
    /// [`set_current_widget()`]
    current_widget() -> Widget?,
    /// 
    /// Returns the tab page at index position *index* or 0 if the *index* is out of range.
    widget(index: i32) -> Widget?,
    /// 
    /// Returns the index position of the page occupied by the widget *w,* or -1 if the widget cannot be found.
    index_of(widget: *WidgetType) -> i32,
    /// 
    /// By default, this property contains a value of 0.
    count() -> i32,
    /// 
    /// Possible values for this property are described by the TabPosition
    /// enum.
    /// 
    /// By default, this property is set to [North.](North.)
    /// 
    /// **See also:** TabPosition
    tab_position() -> TabWidget::TabPosition,
    set_tab_position(arg0: TabWidget::TabPosition),
    /// 
    /// **See also:** [`TabBar::tabs_closable`]
    tabs_closable() -> bool,
    set_tabs_closable(closeable: bool),
    is_movable() -> bool,
    set_movable(movable: bool),
    /// 
    /// Possible values for this property are QTabWidget::Rounded
    /// (default) or QTabWidget::Triangular.
    /// 
    /// **See also:** TabShape
    tab_shape() -> TabWidget::TabShape,
    set_tab_shape(s: TabWidget::TabShape),
    /// 
    [event] size_hint() -> Size,
    /// 
    /// Returns a suitable minimum size for the tab widget.
    [event] minimum_size_hint() -> Size,
    /// 
    [event] height_for_width(width: i32) -> i32,
    /// 
    [event] has_height_for_width() -> bool,
    /// 
    /// Sets the given *widget* to be shown in the specified *corner* of the
    /// tab widget. The geometry of the widget is determined based on the widget's
    /// sizeHint() and the style().
    /// 
    /// Only the horizontal element of the *corner* will be used.
    /// 
    /// Passing 0 shows no widget in the corner.
    /// 
    /// Any previously set corner widget is hidden.
    /// 
    /// All widgets set here will be deleted by the tab widget when it is
    /// destroyed unless you separately reparent the widget after setting
    /// some other corner widget (or 0).
    /// 
    /// Note: Corner widgets are designed for [North](North)
    /// and [South](South)
    /// tab positions;
    /// other orientations are known to not work properly.
    /// 
    /// **See also:** [`corner_widget()`]
    /// [`set_tab_position()`]
    set_corner_widget(w: *WidgetType, corner: Rute::Corner),
    /// 
    /// Returns the widget shown in the *corner* of the tab widget or 0.
    corner_widget(corner: Rute::Corner) -> Widget?,
    /// 
    /// This property controls how items are elided when there is not
    /// enough space to show them for a given tab bar size.
    /// 
    /// By default the value is style dependant.
    /// 
    /// **See also:** [`TabBar::elide_mode()`]
    /// usesScrollButtons
    /// [`Style::sh_tab_bar_elide_mode()`]
    elide_mode() -> Rute::TextElideMode,
    set_elide_mode(arg0: Rute::TextElideMode),
    /// 
    /// The default value is style-dependent. This is the maximum size
    /// that the icons will have. Icons are not scaled up if they are of
    /// smaller size.
    /// 
    /// **See also:** [`TabBar::icon_size()`]
    icon_size() -> Size,
    set_icon_size(size: &SizeType),
    /// 
    /// When there are too many tabs in a tab bar for its size, the tab bar can either choose
    /// to expand its size or to add buttons that allow you to scroll through the tabs.
    /// 
    /// By default the value is style dependant.
    /// 
    /// **See also:** elideMode
    /// [`TabBar::uses_scroll_buttons()`]
    /// [`Style::sh_tab_bar_prefer_no_arrows()`]
    uses_scroll_buttons() -> bool,
    set_uses_scroll_buttons(use_buttons: bool),
    /// 
    /// MacOS .
    /// 
    /// When this property is set the tab widget frame is not rendered. This mode is useful
    /// for showing document-type pages where the page covers most of the tab widget
    /// area.
    /// 
    /// **See also:** elideMode
    /// [`TabBar::document_mode()`]
    /// [`TabBar::uses_scroll_buttons()`]
    /// [`Style::sh_tab_bar_prefer_no_arrows()`]
    document_mode() -> bool,
    set_document_mode(set: bool),
    /// 
    /// By default, this property is false.
    /// 
    /// **See also:** [`Widget::visible()`]
    tab_bar_auto_hide() -> bool,
    set_tab_bar_auto_hide(enabled: bool),
    /// 
    /// Removes all the pages, but does not delete them. Calling this function
    /// is equivalent to calling removeTab() until the tab widget is empty.
    clear(),
    /// 
    /// This signal is emitted when user clicks on a tab at an *index.*
    /// 
    /// *index* refers to the tab clicked, or -1 if no tab is under the cursor.
    /// 
    /// 
    /// This signal is emitted when the user double clicks on a tab at an *index.*
    /// 
    /// *index* is the index of a clicked tab, or -1 if no tab is under the cursor.
    /// 
    /// 
    /// Returns the current QTabBar.
    /// 
    /// **See also:** [`set_tab_bar()`]
    /// 
    /// By default, this property is false.
    /// 
    /// **See also:** [`Widget::visible()`]
    tab_bar() -> TabBar?,
    set_current_index(index: i32),
    /// 
    /// Makes *widget* the current widget. The *widget* used must be a page in
    /// this tab widget.
    /// 
    /// **See also:** [`add_tab()`]
    /// [`set_current_index()`]
    /// [`current_widget()`]
    set_current_widget(widget: *WidgetType),
    /// 
    /// This signal is emitted whenever the current page index changes.
    /// The parameter is the new current page *index* position, or -1
    /// if there isn't a new one (for example, if there are no widgets
    /// in the QTabWidget)
    /// 
    /// **See also:** [`current_widget()`]
    /// currentIndex
    [signal] current_changed(index: i32),
    /// 
    /// This signal is emitted when the close button on a tab is clicked.
    /// The *index* is the index that should be removed.
    /// 
    /// **See also:** [`set_tabs_closable()`]
    [signal] tab_close_requested(index: i32),
    /// 
    /// This signal is emitted when user clicks on a tab at an *index.*
    /// 
    /// *index* refers to the tab clicked, or -1 if no tab is under the cursor.
    /// 
    [signal] tab_bar_clicked(index: i32),
    /// 
    /// This signal is emitted when the user double clicks on a tab at an *index.*
    /// 
    /// *index* is the index of a clicked tab, or -1 if no tab is under the cursor.
    /// 
    [signal] tab_bar_double_clicked(index: i32),
    /// 
    /// This virtual handler is called after a new tab was added or
    /// inserted at position *index.*
    /// 
    /// **See also:** [`tab_removed()`]
    [event] tab_inserted(index: i32),
    /// 
    /// This virtual handler is called after a tab was removed from
    /// position *index.*
    /// 
    /// **See also:** [`tab_inserted()`]
    [event] tab_removed(index: i32),
    /// 
    [event] show_event(arg0: *ShowEventType),
    /// 
    [event] resize_event(arg0: *ResizeEventType),
    /// 
    [event] key_press_event(arg0: *KeyEventType),
    /// 
    /// Paints the tab widget's tab bar in response to the paint *event.*
    [event] paint_event(arg0: *PaintEventType),
    /// 
    /// Replaces the dialog's QTabBar heading with the tab bar *tb.* Note
    /// that this must be called *before* any tabs have been added, or
    /// the behavior is undefined.
    /// 
    /// **See also:** [`tab_bar()`]
    set_tab_bar(arg0: *TabBarType),
    /// 
    [event] change_event(arg0: *EventType),
    /// 
    [event] event(arg0: *EventType) -> bool,
    /// 
    /// Initialize *option* with the values from this QTabWidget. This method is useful
    /// for subclasses when they need a QStyleOptionTabWidgetFrame, but don't want to fill
    /// in all the information themselves.
    /// 
    /// **See also:** [`StyleOption::init_from`]
    /// [`TabBar::init_style_option`]
    init_style_option(option: *StyleOptionTabWidgetFrameType),
}

[org_name(QTabWidget)]
enum TabPosition {
    North,
    South,
    West,
    East,
}

[org_name(QTabWidget)]
enum TabShape {
    Rounded,
    Triangular,
}

// vim: syntax=rust expandtab ts=4 sw=4
