enum TabPosition {
    North,
    South,
    West,
    East,
}

enum TabShape {
    Rounded,
    Triangular,
}

struct TabWidget : Widget {
    add_tab(widget: &WidgetType, arg0: String) -> i32,
    add_tab(widget: &WidgetType, icon: &IconType, label: String) -> i32,
    insert_tab(index: i32, widget: &WidgetType, arg0: String) -> i32,
    insert_tab(index: i32, widget: &WidgetType, icon: &IconType, label: String) -> i32,
    remove_tab(index: i32),
    is_tab_enabled(index: i32) -> bool,
    set_tab_enabled(index: i32, arg0: bool),
    tab_text(index: i32) -> String,
    set_tab_text(index: i32, arg0: String),
    tab_icon(index: i32) -> Icon,
    set_tab_icon(index: i32, icon: &IconType),
    set_tab_tool_tip(index: i32, tip: String),
    tab_tool_tip(index: i32) -> String,
    set_tab_whats_this(index: i32, text: String),
    tab_whats_this(index: i32) -> String,
    current_index() -> i32,
    current_widget() -> Widget?,
    widget(index: i32) -> Widget?,
    index_of(widget: &WidgetType) -> i32,
    count() -> i32,
    tab_position() -> TabWidget::TabPosition,
    set_tab_position(arg0: TabWidget::TabPosition),
    tabs_closable() -> bool,
    set_tabs_closable(closeable: bool),
    is_movable() -> bool,
    set_movable(movable: bool),
    tab_shape() -> TabWidget::TabShape,
    set_tab_shape(s: TabWidget::TabShape),
    [replace] size_hint() -> Size,
    [replace] minimum_size_hint() -> Size,
    [replace] height_for_width(width: i32) -> i32,
    [replace] has_height_for_width() -> bool,
    set_corner_widget(w: &WidgetType, corner: Rute::Corner),
    corner_widget(corner: Rute::Corner) -> Widget?,
    elide_mode() -> Rute::TextElideMode,
    set_elide_mode(arg0: Rute::TextElideMode),
    icon_size() -> Size,
    set_icon_size(size: &SizeType),
    uses_scroll_buttons() -> bool,
    set_uses_scroll_buttons(use_buttons: bool),
    document_mode() -> bool,
    set_document_mode(set: bool),
    tab_bar_auto_hide() -> bool,
    set_tab_bar_auto_hide(enabled: bool),
    clear(),
    tab_bar() -> TabBar?,
    set_current_index(index: i32),
    set_current_widget(widget: &WidgetType),
    [event] current_changed(index: i32),
    [event] tab_close_requested(index: i32),
    [event] tab_bar_clicked(index: i32),
    [event] tab_bar_double_clicked(index: i32),
    [replace] tab_inserted(index: i32),
    [replace] tab_removed(index: i32),
    [replace] show_event(arg0: &ShowEventType),
    [replace] resize_event(arg0: &ResizeEventType),
    [replace] key_press_event(arg0: &KeyEventType),
    [replace] paint_event(arg0: &PaintEventType),
    set_tab_bar(arg0: &TabBarType),
    [replace] change_event(arg0: &EventType),
    [replace] event(arg0: &EventType) -> bool,
    init_style_option(option: &StyleOptionTabWidgetFrameType),
}

// vim: syntax=rust expandtab ts=4 sw=4
