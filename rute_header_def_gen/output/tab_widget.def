///     \class QTabWidget
///     \brief The QTabWidget class provides a stack of tabbed widgets.
/// 
///     \ingroup organizers
///     \ingroup basicwidgets
///     \inmodule QtWidgets
/// 
///     \image windows-tabwidget.png
/// 
///     A tab widget provides a tab bar (see QTabBar) and a "page area"
///     that is used to display pages related to each tab. By default, the
///     tab bar is shown above the page area, but different configurations
///     are available (see \l{TabPosition}). Each tab is associated with a
///     different widget (called a page). Only the current page is shown in
///     the page area; all the other pages are hidden. The user can show a
///     different page by clicking on its tab or by pressing its
///     Alt+\e{letter} shortcut if it has one.
/// 
///     The normal way to use QTabWidget is to do the following:
///     \list 1
///     \li Create a QTabWidget.
///     \li Create a QWidget for each of the pages in the tab dialog, but
///        do not specify parent widgets for them.
///     \li Insert child widgets into the page widget, using layouts to
///        position them as normal.
///     \li Call addTab() or insertTab() to put the page widgets into the
///        tab widget, giving each tab a suitable label with an optional
///        keyboard shortcut.
///     \endlist
/// 
///     The position of the tabs is defined by \l tabPosition, their shape
///     by \l tabShape.
/// 
///     The signal currentChanged() is emitted when the user selects a
///     page.
/// 
///     The current page index is available as currentIndex(), the current
///     page widget with currentWidget().  You can retrieve a pointer to a
///     page widget with a given index using widget(), and can find the
///     index position of a widget with indexOf(). Use setCurrentWidget()
///     or setCurrentIndex() to show a particular page.
/// 
///     You can change a tab's text and icon using setTabText() or
///     setTabIcon(). A tab and its associated page can be removed with
///     removeTab().
/// 
///     Each tab is either enabled or disabled at any given time (see
///     setTabEnabled()). If a tab is enabled, the tab text is drawn
///     normally and the user can select that tab. If it is disabled, the
///     tab is drawn in a different way and the user cannot select that
///     tab. Note that even if a tab is disabled, the page can still be
///     visible, for example if all of the tabs happen to be disabled.
/// 
///     Tab widgets can be a very good way to split up a complex dialog.
///     An alternative is to use a QStackedWidget for which you provide some
///     means of navigating between pages, for example, a QToolBar or a
///     QListWidget.
/// 
///     Most of the functionality in QTabWidget is provided by a QTabBar
///     (at the top, providing the tabs) and a QStackedWidget (most of the
///     area, organizing the individual pages).
/// 
///     \sa QTabBar, QStackedWidget, QToolBox, {Tab Dialog Example}
[org_name(QTabWidget)]
enum TabPosition {
    North,
    South,
    West,
    East,
}

[org_name(QTabWidget)]
enum TabShape {
    Rounded,
    Triangular,
}

struct TabWidget : Widget {
    add_tab(widget: *WidgetType, arg0: String) -> i32,
    add_tab(widget: *WidgetType, icon: &IconType, label: String) -> i32,
    insert_tab(index: i32, widget: *WidgetType, arg0: String) -> i32,
    insert_tab(index: i32, widget: *WidgetType, icon: &IconType, label: String) -> i32,
    remove_tab(index: i32),
    is_tab_enabled(index: i32) -> bool,
    set_tab_enabled(index: i32, arg0: bool),
    tab_text(index: i32) -> String,
    set_tab_text(index: i32, arg0: String),
    tab_icon(index: i32) -> Icon,
    set_tab_icon(index: i32, icon: &IconType),
    set_tab_tool_tip(index: i32, tip: String),
    tab_tool_tip(index: i32) -> String,
    set_tab_whats_this(index: i32, text: String),
    tab_whats_this(index: i32) -> String,
    current_index() -> i32,
    current_widget() -> Widget?,
    widget(index: i32) -> Widget?,
    index_of(widget: *WidgetType) -> i32,
    count() -> i32,
    tab_position() -> TabWidget::TabPosition,
    set_tab_position(arg0: TabWidget::TabPosition),
    tabs_closable() -> bool,
    set_tabs_closable(closeable: bool),
    is_movable() -> bool,
    set_movable(movable: bool),
    tab_shape() -> TabWidget::TabShape,
    set_tab_shape(s: TabWidget::TabShape),
    [event] size_hint() -> Size,
    [event] minimum_size_hint() -> Size,
    [event] height_for_width(width: i32) -> i32,
    [event] has_height_for_width() -> bool,
    set_corner_widget(w: *WidgetType, corner: Rute::Corner),
    corner_widget(corner: Rute::Corner) -> Widget?,
    elide_mode() -> Rute::TextElideMode,
    set_elide_mode(arg0: Rute::TextElideMode),
    icon_size() -> Size,
    set_icon_size(size: &SizeType),
    uses_scroll_buttons() -> bool,
    set_uses_scroll_buttons(use_buttons: bool),
    document_mode() -> bool,
    set_document_mode(set: bool),
    tab_bar_auto_hide() -> bool,
    set_tab_bar_auto_hide(enabled: bool),
    clear(),
    tab_bar() -> TabBar?,
    set_current_index(index: i32),
    set_current_widget(widget: *WidgetType),
    [signal] current_changed(index: i32),
    [signal] tab_close_requested(index: i32),
    [signal] tab_bar_clicked(index: i32),
    [signal] tab_bar_double_clicked(index: i32),
    [event] tab_inserted(index: i32),
    [event] tab_removed(index: i32),
    [event] show_event(arg0: *ShowEventType),
    [event] resize_event(arg0: *ResizeEventType),
    [event] key_press_event(arg0: *KeyEventType),
    [event] paint_event(arg0: *PaintEventType),
    set_tab_bar(arg0: *TabBarType),
    [event] change_event(arg0: *EventType),
    [event] event(arg0: *EventType) -> bool,
    init_style_option(option: *StyleOptionTabWidgetFrameType),
}

// vim: syntax=rust expandtab ts=4 sw=4
