///     \class QSpinBox
///     \brief The QSpinBox class provides a spin box widget.
/// 
///     \ingroup basicwidgets
///     \inmodule QtWidgets
/// 
///     \image windows-spinbox.png
/// 
///     QSpinBox is designed to handle integers and discrete sets of
///     values (e.g., month names); use QDoubleSpinBox for floating point
///     values.
/// 
///     QSpinBox allows the user to choose a value by clicking the up/down
///     buttons or pressing up/down on the keyboard to increase/decrease
///     the value currently displayed. The user can also type the value in
///     manually. The spin box supports integer values but can be extended to
///     use different strings with validate(), textFromValue() and valueFromText().
/// 
///     Every time the value changes QSpinBox emits two valueChanged() signals,
///     one providing an int and the other a QString. The QString overload
///     provides the value with both prefix() and suffix().
///     The current value can be fetched with value() and set with setValue().
/// 
///     Clicking the up/down buttons or using the keyboard accelerator's
///     up and down arrows will increase or decrease the current value in
///     steps of size singleStep(). If you want to change this behaviour you
///     can reimplement the virtual function stepBy(). The minimum and
///     maximum value and the step size can be set using one of the
///     constructors, and can be changed later with setMinimum(),
///     setMaximum() and setSingleStep().
/// 
///     Most spin boxes are directional, but QSpinBox can also operate as
///     a circular spin box, i.e. if the range is 0-99 and the current
///     value is 99, clicking "up" will give 0 if wrapping() is set to
///     true. Use setWrapping() if you want circular behavior.
/// 
///     The displayed value can be prepended and appended with arbitrary
///     strings indicating, for example, currency or the unit of
///     measurement. See setPrefix() and setSuffix(). The text in the spin
///     box is retrieved with text() (which includes any prefix() and
///     suffix()), or with cleanText() (which has no prefix(), no suffix()
///     and no leading or trailing whitespace).
/// 
///     It is often desirable to give the user a special (often default)
///     choice in addition to the range of numeric values. See
///     setSpecialValueText() for how to do this with QSpinBox.
/// 
///     \section1 Subclassing QSpinBox
/// 
///     If using prefix(), suffix(), and specialValueText() don't provide
///     enough control, you subclass QSpinBox and reimplement
///     valueFromText() and textFromValue(). For example, here's the code
///     for a custom spin box that allows the user to enter icon sizes
///     (e.g., "32 x 32"):
/// 
///     \snippet widgets/icons/iconsizespinbox.cpp 1
///     \codeline
///     \snippet widgets/icons/iconsizespinbox.cpp 2
/// 
///     See the \l{widgets/icons}{Icons} example for the full source
///     code.
/// 
///     \sa QDoubleSpinBox, QDateTimeEdit, QSlider, {Spin Boxes Example}
struct SpinBox : AbstractSpinBox {
    value() -> i32,
    prefix() -> String,
    set_prefix(prefix: String),
    suffix() -> String,
    set_suffix(suffix: String),
    clean_text() -> String,
    single_step() -> i32,
    set_single_step(val: i32),
    minimum() -> i32,
    set_minimum(min: i32),
    maximum() -> i32,
    set_maximum(max: i32),
    set_range(min: i32, max: i32),
    display_integer_base() -> i32,
    set_display_integer_base(base: i32),
    [event] event(event: *EventType) -> bool,
    [event] validate(input: String, pos: &i32) -> Validator::State,
    [event] value_from_text(text: String) -> i32,
    [event] text_from_value(val: i32) -> String,
    [event] fixup(str: String),
    set_value(val: i32),
    [signal] value_changed(arg0: i32),
    [signal] value_changed(arg0: String),
}

// vim: syntax=rust expandtab ts=4 sw=4
