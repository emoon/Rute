///     \class QSpinBox
///     \brief The QSpinBox class provides a spin box widget.
/// 
///     \ingroup basicwidgets
///     \inmodule QtWidgets
/// 
///     \image windows-spinbox.png
/// 
///     QSpinBox is designed to handle integers and discrete sets of
///     values (e.g., month names); use QDoubleSpinBox for floating point
///     values.
/// 
///     QSpinBox allows the user to choose a value by clicking the up/down
///     buttons or pressing up/down on the keyboard to increase/decrease
///     the value currently displayed. The user can also type the value in
///     manually. The spin box supports integer values but can be extended to
///     use different strings with validate(), textFromValue() and valueFromText().
/// 
///     Every time the value changes QSpinBox emits two valueChanged() signals,
///     one providing an int and the other a QString. The QString overload
///     provides the value with both prefix() and suffix().
///     The current value can be fetched with value() and set with setValue().
/// 
///     Clicking the up/down buttons or using the keyboard accelerator's
///     up and down arrows will increase or decrease the current value in
///     steps of size singleStep(). If you want to change this behaviour you
///     can reimplement the virtual function stepBy(). The minimum and
///     maximum value and the step size can be set using one of the
///     constructors, and can be changed later with setMinimum(),
///     setMaximum() and setSingleStep().
/// 
///     Most spin boxes are directional, but QSpinBox can also operate as
///     a circular spin box, i.e. if the range is 0-99 and the current
///     value is 99, clicking "up" will give 0 if wrapping() is set to
///     true. Use setWrapping() if you want circular behavior.
/// 
///     The displayed value can be prepended and appended with arbitrary
///     strings indicating, for example, currency or the unit of
///     measurement. See setPrefix() and setSuffix(). The text in the spin
///     box is retrieved with text() (which includes any prefix() and
///     suffix()), or with cleanText() (which has no prefix(), no suffix()
///     and no leading or trailing whitespace).
/// 
///     It is often desirable to give the user a special (often default)
///     choice in addition to the range of numeric values. See
///     setSpecialValueText() for how to do this with QSpinBox.
/// 
///     \section1 Subclassing QSpinBox
/// 
///     If using prefix(), suffix(), and specialValueText() don't provide
///     enough control, you subclass QSpinBox and reimplement
///     valueFromText() and textFromValue(). For example, here's the code
///     for a custom spin box that allows the user to enter icon sizes
///     (e.g., "32 x 32"):
/// 
///     \snippet widgets/icons/iconsizespinbox.cpp 1
///     \codeline
///     \snippet widgets/icons/iconsizespinbox.cpp 2
/// 
///     See the \l{widgets/icons}{Icons} example for the full source
///     code.
/// 
///     \sa QDoubleSpinBox, QDateTimeEdit, QSlider, {Spin Boxes Example}
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct SpinBox : AbstractSpinBox {
    ///     \property QSpinBox::value
    ///     \brief the value of the spin box
    /// 
    ///     setValue() will emit valueChanged() if the new value is different
    ///     from the old one. The value property has a second notifier
    ///     signal which includes the spin box's prefix and suffix.
    value() -> i32,
    ///     \property QSpinBox::prefix
    ///     \brief the spin box's prefix
    /// 
    ///     The prefix is prepended to the start of the displayed value.
    ///     Typical use is to display a unit of measurement or a currency
    ///     symbol. For example:
    /// 
    ///     \snippet code/src_gui_widgets_qspinbox.cpp 0
    /// 
    ///     To turn off the prefix display, set this property to an empty
    ///     string. The default is no prefix. The prefix is not displayed when
    ///     value() == minimum() and specialValueText() is set.
    /// 
    ///     If no prefix is set, prefix() returns an empty string.
    /// 
    ///     \sa suffix(), setSuffix(), specialValueText(), setSpecialValueText()
    prefix() -> String,
    set_prefix(prefix: String),
    ///     \property QSpinBox::suffix
    ///     \brief the suffix of the spin box
    /// 
    ///     The suffix is appended to the end of the displayed value. Typical
    ///     use is to display a unit of measurement or a currency symbol. For
    ///     example:
    /// 
    ///     \snippet code/src_gui_widgets_qspinbox.cpp 1
    /// 
    ///     To turn off the suffix display, set this property to an empty
    ///     string. The default is no suffix. The suffix is not displayed for
    ///     the minimum() if specialValueText() is set.
    /// 
    ///     If no suffix is set, suffix() returns an empty string.
    /// 
    ///     \sa prefix(), setPrefix(), specialValueText(), setSpecialValueText()
    suffix() -> String,
    set_suffix(suffix: String),
    ///     \property QSpinBox::cleanText
    /// 
    ///     \brief the text of the spin box excluding any prefix, suffix,
    ///     or leading or trailing whitespace.
    /// 
    ///     \sa text, QSpinBox::prefix, QSpinBox::suffix
    clean_text() -> String,
    ///     \property QSpinBox::singleStep
    ///     \brief the step value
    /// 
    ///     When the user uses the arrows to change the spin box's value the
    ///     value will be incremented/decremented by the amount of the
    ///     singleStep. The default value is 1. Setting a singleStep value of
    ///     less than 0 does nothing.
    single_step() -> i32,
    set_single_step(val: i32),
    ///     \property QSpinBox::minimum
    /// 
    ///     \brief the minimum value of the spin box
    /// 
    ///     When setting this property the \l maximum is adjusted
    ///     if necessary to ensure that the range remains valid.
    /// 
    ///     The default minimum value is 0.
    /// 
    ///     \sa setRange(), specialValueText
    minimum() -> i32,
    set_minimum(min: i32),
    ///     \property QSpinBox::maximum
    /// 
    ///     \brief the maximum value of the spin box
    /// 
    ///     When setting this property the minimum is adjusted
    ///     if necessary, to ensure that the range remains valid.
    /// 
    ///     The default maximum value is 99.
    /// 
    ///     \sa setRange(), specialValueText
    /// 
    maximum() -> i32,
    set_maximum(max: i32),
    ///     Convenience function to set the \a minimum, and \a maximum values
    ///     with a single function call.
    /// 
    ///     \snippet code/src_gui_widgets_qspinbox.cpp 2
    ///     is equivalent to:
    ///     \snippet code/src_gui_widgets_qspinbox.cpp 3
    /// 
    ///     \sa minimum, maximum
    set_range(min: i32, max: i32),
    ///     \property QSpinBox::displayIntegerBase
    /// 
    ///     \brief the base used to display the value of the spin box
    /// 
    ///     The default displayIntegerBase value is 10.
    /// 
    ///     \sa textFromValue(), valueFromText()
    ///     \since 5.2
    display_integer_base() -> i32,
    set_display_integer_base(base: i32),
    [event] event(event: *EventType) -> bool,
    ///   \reimp
    [event] validate(input: String, pos: &i32) -> Validator::State,
    ///     \fn int QSpinBox::valueFromText(const QString &text) const
    /// 
    ///     This virtual function is used by the spin box whenever it needs to
    ///     interpret \a text entered by the user as a value.
    /// 
    ///     Subclasses that need to display spin box values in a non-numeric
    ///     way need to reimplement this function.
    /// 
    ///     Note: QSpinBox handles specialValueText() separately; this
    ///     function is only concerned with the other values.
    /// 
    ///     \sa textFromValue(), validate()
    [event] value_from_text(text: String) -> i32,
    ///     This virtual function is used by the spin box whenever it needs to
    ///     display the given \a value. The default implementation returns a
    ///     string containing \a value printed in the standard way using
    ///     QWidget::locale().toString(), but with the thousand separator
    ///     removed unless setGroupSeparatorShown() is set. Reimplementations may
    ///     return anything. (See the example in the detailed description.)
    /// 
    ///     Note: QSpinBox does not call this function for specialValueText()
    ///     and that neither prefix() nor suffix() should be included in the
    ///     return value.
    /// 
    ///     If you reimplement this, you may also need to reimplement
    ///     valueFromText() and validate()
    /// 
    ///     \sa valueFromText(), validate(), QLocale::groupSeparator()
    [event] text_from_value(val: i32) -> String,
    ///   \reimp
    [event] fixup(str: String),
    set_value(val: i32),
    [signal] value_changed(arg0: i32),
    [signal] value_changed(arg0: String),
}

// vim: syntax=rust expandtab ts=4 sw=4
