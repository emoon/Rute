/// 
/// To write a document, construct a QTextDocumentWriter object with either a
/// file name or a device object, and specify the document format to be
/// written. You can construct a writer and set the format using setFormat()
/// later.
/// 
/// Call write() to write the document to the device. If the document is
/// successfully written, this function returns `true.` However, if an error
/// occurs when writing the document, it will return false.
/// 
/// Call supportedDocumentFormats() for a list of formats that
/// QTextDocumentWriter can write.
/// 
/// Since the capabilities of the supported output formats vary considerably,
/// the writer simply outputs the appropriate subset of objects for each format.
/// This typically includes the formatted text and images contained in a
/// document.
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct TextDocumentWriter {
    /// 
    /// Sets the format used to write documents to the *format* specified.
    /// *format* is a case insensitive text string. For example:
    /// 
    /// You can call supportedDocumentFormats() for the full list of formats
    /// QTextDocumentWriter supports.
    /// 
    /// **See also:** format()
    set_format(format: &ByteArrayType),
    /// 
    /// Returns the format used for writing documents.
    /// 
    /// **See also:** setFormat()
    format() -> ByteArray,
    /// 
    /// Sets the writer's device to the *device* specified. If a device has
    /// already been set, the old device is removed but otherwise left
    /// unchanged.
    /// 
    /// If the device is not already open, QTextDocumentWriter will attempt to
    /// open the device in [QIODevice::WriteOnly](QIODevice::WriteOnly)
    /// mode by calling open().
    /// 
    /// **Note**: This will not work for certain devices, such as QProcess,
    /// QTcpSocket and QUdpSocket, where some configuration is required before
    /// the device can be opened.
    /// 
    /// **See also:** device()
    /// setFileName()
    set_device(device: *IODeviceType),
    /// 
    /// Returns the device currently assigned, or 0 if no device has been
    /// assigned.
    device() -> IODevice?,
    /// 
    /// Sets the name of the file to be written to *fileName.* Internally,
    /// QTextDocumentWriter will create a QFile and open it in [QIODevice::WriteOnly](QIODevice::WriteOnly)
    /// mode, and use this file when writing the document.
    /// 
    /// **See also:** fileName()
    /// setDevice()
    set_file_name(file_name: String),
    /// 
    /// If the currently assigned device is a QFile, or if setFileName()
    /// has been called, this function returns the name of the file
    /// to be written to. In all other cases, it returns an empty string.
    /// 
    /// **See also:** setFileName()
    /// setDevice()
    file_name() -> String,
    /// 
    /// Writes the given *document* to the assigned device or file and
    /// returns `true` if successful; otherwise returns `false.`
    /// 
    /// Writes the document fragment specified by *fragment* to the assigned device
    /// or file and returns `true` if successful; otherwise returns `false.`
    write(document: *TextDocumentType) -> bool,
    /// 
    /// Writes the given *document* to the assigned device or file and
    /// returns `true` if successful; otherwise returns `false.`
    /// 
    /// Writes the document fragment specified by *fragment* to the assigned device
    /// or file and returns `true` if successful; otherwise returns `false.`
    write(fragment: &TextDocumentFragmentType) -> bool,
    set_codec(codec: *TextCodecType),
    codec() -> TextCodec?,
    /// 
    /// Returns the list of document formats supported by QTextDocumentWriter.
    /// 
    /// By default, Qt can write the following formats:
    /// 
    /// * Format
    /// * Description
    /// * plaintext
    /// * Plain text
    /// * HTML
    /// * HyperText Markup Language
    /// * ODF
    /// * OpenDocument Format
    /// 
    /// **See also:** setFormat()
    [static] supported_document_formats() -> [ByteArray],
}

// vim: syntax=rust expandtab ts=4 sw=4
