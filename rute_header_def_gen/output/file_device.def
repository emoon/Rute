enum FileError {
    NoError,
    ReadError,
    WriteError,
    FatalError,
    ResourceError,
    OpenError,
    AbortError,
    TimeOutError,
    UnspecifiedError,
    RemoveError,
    RenameError,
    PositionError,
    ResizeError,
    PermissionsError,
    CopyError,
}

enum FileTime {
    FileAccessTime,
    FileBirthTime,
    FileMetadataChangeTime,
    FileModificationTime,
}

enum Permission {
    ReadOwner,
    WriteOwner,
    ExeOwner,
    ReadUser,
    WriteUser,
    ExeUser,
    ReadGroup,
    WriteGroup,
    ExeGroup,
    ReadOther,
    WriteOther,
    ExeOther,
}

enum FileHandleFlag {
    AutoCloseHandle,
    DontCloseHandle,
}

enum MemoryMapFlags {
    NoOptions,
    MapPrivateOption,
}

struct FileDevice : IODevice {
    error() -> FileDevice::FileError,
    unset_error(),
    [replace] close(),
    [replace] is_sequential() -> bool,
    handle() -> i32,
    [replace] file_name() -> String,
    [replace] pos() -> i64,
    [replace] seek(offset: i64) -> bool,
    [replace] at_end() -> bool,
    flush() -> bool,
    [replace] size() -> i64,
    [replace] resize(sz: i64) -> bool,
    [replace] permissions() -> Permissions,
    [replace] set_permissions(permission_spec: Permissions) -> bool,
    map(offset: i64, size: i64, flags: FileDevice::MemoryMapFlags) -> uchar?,
    unmap(address: &uchar) -> bool,
    file_time(time: FileDevice::FileTime) -> DateTime,
    set_file_time(new_date: &DateTimeType, file_time: FileDevice::FileTime) -> bool,
    [replace] read_data(data: &char, maxlen: i64) -> i64,
    [replace] write_data(data: &char, len: i64) -> i64,
    [replace] read_line_data(data: &char, maxlen: i64) -> i64,
}

// vim: syntax=rust expandtab ts=4 sw=4
