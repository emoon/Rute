
struct Variant {
    swap(other: &VariantType),
    type() -> Variant::Type,
    user_type() -> i32,
    type_name() -> &char,
    can_convert(target_type_id: i32) -> bool,
    convert(target_type_id: i32) -> bool,
    is_valid() -> bool,
    is_null() -> bool,
    clear(),
    detach(),
    is_detached() -> bool,
    to_int(ok: &bool) -> i32,
    to_u_int(ok: &bool) -> uint,
    to_long_long(ok: &bool) -> i64,
    to_u_long_long(ok: &bool) -> qulonglong,
    to_bool() -> bool,
    to_double(ok: &bool) -> double,
    to_float(ok: &bool) -> f32,
    to_real(ok: &bool) -> f32,
    to_byte_array() -> ByteArrayType,
    to_bit_array() -> BitArrayType,
    to_char() -> CharType,
    to_date() -> DateType,
    to_time() -> TimeType,
    to_date_time() -> DateTimeType,
    to_list() -> [VariantType],
    to_map() -> Map<QString,Type,
    to_hash() -> Hash<QString,Type,
    to_point() -> PointType,
    to_point_f() -> PointFType,
    to_rect() -> RectType,
    to_size() -> SizeType,
    to_size_f() -> SizeFType,
    to_line() -> LineType,
    to_line_f() -> LineFType,
    to_rect_f() -> RectFType,
    to_locale() -> LocaleType,
    to_reg_exp() -> RegExpType,
    to_regular_expression() -> RegularExpressionType,
    to_url() -> UrlType,
    to_easing_curve() -> EasingCurveType,
    to_uuid() -> UuidType,
    to_model_index() -> ModelIndexType,
    to_persistent_model_index() -> PersistentModelIndexType,
    to_json_value() -> JsonValueType,
    to_json_object() -> JsonObjectType,
    to_json_array() -> JsonArrayType,
    to_json_document() -> JsonDocumentType,
    load(ds: &DataStreamType),
    save(ds: &DataStreamType),
    [static] type_to_name(type_id: i32) -> &char,
    [static] name_to_type(name: &char) -> Variant::Type,
    data(),
    const_data(),
    data(),
    create(type: i32, copy: &void),
    cmp(other: &VariantType) -> bool,
    compare(other: &VariantType) -> i32,
    convert(t: i32, ptr: &void) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
