
struct Variant {
    swap(&VariantType other),
    type() -> Variant::Type,
    user_type() -> i32,
    type_name() -> &char,
    can_convert(i32 target_type_id) -> bool,
    convert(i32 target_type_id) -> bool,
    is_valid() -> bool,
    is_null() -> bool,
    clear(),
    detach(),
    is_detached() -> bool,
    to_int(&bool ok) -> i32,
    to_u_int(&bool ok) -> uint,
    to_long_long(&bool ok) -> qlonglong,
    to_u_long_long(&bool ok) -> qulonglong,
    to_bool() -> bool,
    to_double(&bool ok) -> double,
    to_float(&bool ok) -> float,
    to_real(&bool ok) -> f32,
    to_byte_array() -> ByteArrayType,
    to_bit_array() -> BitArrayType,
    to_char() -> CharType,
    to_date() -> DateType,
    to_time() -> TimeType,
    to_date_time() -> DateTimeType,
    to_list() -> <VariantType>,
    to_map() -> Map<QString,Type,
    to_hash() -> Hash<QString,Type,
    to_point() -> PointType,
    to_point_f() -> PointFType,
    to_rect() -> RectType,
    to_size() -> SizeType,
    to_size_f() -> SizeFType,
    to_line() -> LineType,
    to_line_f() -> LineFType,
    to_rect_f() -> RectFType,
    to_locale() -> LocaleType,
    to_reg_exp() -> RegExpType,
    to_regular_expression() -> RegularExpressionType,
    to_url() -> UrlType,
    to_easing_curve() -> EasingCurveType,
    to_uuid() -> UuidType,
    to_model_index() -> ModelIndexType,
    to_persistent_model_index() -> PersistentModelIndexType,
    to_json_value() -> JsonValueType,
    to_json_object() -> JsonObjectType,
    to_json_array() -> JsonArrayType,
    to_json_document() -> JsonDocumentType,
    load(&DataStreamType ds),
    save(&DataStreamType ds),
    type_to_name(i32 type_id) -> &char,
    name_to_type(&char name) -> Variant::Type,
    data(),
    const_data(),
    data(),
    create(i32 type, &void copy),
    cmp(&VariantType other) -> bool,
    compare(&VariantType other) -> i32,
    convert(i32 t, &void ptr) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
