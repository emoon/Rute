#[org_name(QVariant)]
enum Type {
    Invalid,
    Bool,
    Int,
    UInt,
    LongLong,
    ULongLong,
    Double,
    Char,
    Map,
    List,
    String,
    StringList,
    ByteArray,
    BitArray,
    Date,
    Time,
    DateTime,
    Url,
    Locale,
    Rect,
    RectF,
    Size,
    SizeF,
    Line,
    LineF,
    Point,
    PointF,
    RegExp,
    RegularExpression,
    Hash,
    EasingCurve,
    Uuid,
    ModelIndex,
    PersistentModelIndex,
    LastCoreType,
    Font,
    Pixmap,
    Brush,
    Color,
    Palette,
    Image,
    Polygon,
    Region,
    Bitmap,
    Cursor,
    KeySequence,
    Pen,
    TextLength,
    TextFormat,
    Matrix,
    Transform,
    Matrix4x4,
    Vector2D,
    Vector3D,
    Vector4D,
    Quaternion,
    PolygonF,
    Icon,
    LastGuiType,
    SizePolicy,
    UserType,
    LastType,
}


struct Variant {
    swap(other: &VariantType),
    type() -> Variant::Type,
    user_type() -> i32,
    type_name() -> char?,
    can_convert(target_type_id: i32) -> bool,
    convert(target_type_id: i32) -> bool,
    is_valid() -> bool,
    is_null() -> bool,
    clear(),
    detach(),
    is_detached() -> bool,
    to_int(ok: &bool) -> i32,
    to_u_int(ok: &bool) -> uint,
    to_long_long(ok: &bool) -> i64,
    to_u_long_long(ok: &bool) -> qulonglong,
    to_bool() -> bool,
    to_double(ok: &bool) -> double,
    to_float(ok: &bool) -> f32,
    to_real(ok: &bool) -> f32,
    to_byte_array() -> ByteArray,
    to_bit_array() -> BitArray,
    to_char() -> Char,
    to_date() -> Date,
    to_time() -> Time,
    to_date_time() -> DateTime,
    to_list() -> [Variant],
    to_map() -> Map<QString,,
    to_hash() -> Hash<QString,,
    to_point() -> Point,
    to_point_f() -> PointF,
    to_rect() -> Rect,
    to_size() -> Size,
    to_size_f() -> SizeF,
    to_line() -> Line,
    to_line_f() -> LineF,
    to_rect_f() -> RectF,
    to_locale() -> Locale,
    to_reg_exp() -> RegExp,
    to_regular_expression() -> RegularExpression,
    to_url() -> Url,
    to_easing_curve() -> EasingCurve,
    to_uuid() -> Uuid,
    to_model_index() -> ModelIndex,
    to_persistent_model_index() -> PersistentModelIndex,
    to_json_value() -> JsonValue,
    to_json_object() -> JsonObject,
    to_json_array() -> JsonArray,
    to_json_document() -> JsonDocument,
    load(ds: &DataStreamType),
    save(ds: &DataStreamType),
    [static] type_to_name(type_id: i32) -> char?,
    [static] name_to_type(name: &char) -> Variant::Type,
    data(),
    const_data(),
    data(),
    create(type: i32, copy: &void),
    cmp(other: &VariantType) -> bool,
    compare(other: &VariantType) -> i32,
    convert(t: i32, ptr: &void) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
