/// 
/// Because C++ forbids unions from including types that have
/// non-default constructors or destructors, most interesting Qt
/// classes cannot be used in unions. Without QVariant, this would be
/// a problem for QObject::property() and for database work, etc.
/// 
/// A QVariant object holds a single value of a single type() at a
/// time. (Some type()s are multi-valued, for example a string list.)
/// You can find out what type, T, the variant holds, convert it to a
/// different type using convert(), get its value using one of the
/// toT() functions (e.g., toSize()) and check whether the type can
/// be converted to a particular type using canConvert().
/// 
/// The methods named toT() (e.g., toInt(), toString()) are const. If
/// you ask for the stored type, they return a copy of the stored
/// object. If you ask for a type that can be generated from the
/// stored type, toT() copies and converts and leaves the object
/// itself unchanged. If you ask for a type that cannot be generated
/// from the stored type, the result depends on the type; see the
/// function documentation for details.
/// 
/// Here is some example code to demonstrate the use of QVariant:
/// 
/// You can even store QList<QVariant> and QMap<QString, QVariant>
/// values in a variant, so you can easily construct arbitrarily
/// complex data structures of arbitrary types. This is very powerful
/// and versatile, but may prove less memory and speed efficient than
/// storing specific types in standard data structures.
/// 
/// QVariant also supports the notion of null values, where you can
/// have a defined type with no value set. However, note that QVariant
/// types can only be cast when they have had a value set.
/// 
/// QVariant can be extended to support other types than those
/// mentioned in the [Type](Type)
/// enum. See [Creating Custom Qt Types](Creating%20Custom%20Qt%20Types)
/// 
/// for details.
/// 
/// # A Note on GUI Types
/// 
/// Because QVariant is part of the Qt Core module, it cannot provide
/// conversion functions to data types defined in Qt GUI, such as
/// QColor, QImage, and QPixmap. In other words, there is no `toColor()` function. Instead, you can use the QVariant::value() or
/// the qvariant_cast() template function. For example:
/// 
/// The inverse conversion (e.g., from QColor to QVariant) is
/// automatic for all data types supported by QVariant, including
/// GUI-related types:
/// 
/// # Using canConvert() and convert() Consecutively
/// 
/// When using canConvert() and convert() consecutively, it is possible for
/// canConvert() to return true, but convert() to return false. This
/// is typically because canConvert() only reports the general ability of
/// QVariant to convert between types given suitable data; it is still
/// possible to supply data which cannot actually be converted.
/// 
/// For example, canConvert(Int) would return true when called on a variant
/// containing a string because, in principle, QVariant is able to convert
/// strings of numbers to integers.
/// However, if the string contains non-numeric characters, it cannot be
/// converted to an integer, and any attempt to convert it will fail.
/// Hence, it is important to have both functions return true for a
/// successful conversion.
/// 
/// **See also:** [`MetaType`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Variant {
    /// 
    /// Swaps variant *other* with this variant. This operation is very
    /// fast and never fails.
    swap(other: &VariantType),
    /// 
    /// Returns the storage type of the value stored in the variant.
    /// Although this function is declared as returning QVariant::Type,
    /// the return value should be interpreted as QMetaType::Type. In
    /// particular, QVariant::UserType is returned here only if the value
    /// is equal or greater than QMetaType::User.
    /// 
    /// Note that return values in the ranges QVariant::Char through
    /// QVariant::RegExp and QVariant::Font through QVariant::Transform
    /// correspond to the values in the ranges QMetaType::QChar through
    /// QMetaType::QRegExp and QMetaType::QFont through QMetaType::QQuaternion.
    /// 
    /// Pay particular attention when working with char and QChar
    /// variants. Note that there is no QVariant constructor specifically
    /// for type char, but there is one for QChar. For a variant of type
    /// QChar, this function returns QVariant::Char, which is the same as
    /// QMetaType::QChar, but for a variant of type `char,` this function
    /// returns QMetaType::Char, which is *not* the same as
    /// QVariant::Char.
    /// 
    /// Also note that the types `void*,` `long,` `short,` `unsigned`
    /// `long,` `unsigned` `short,` `unsigned` `char,` `float,` `QObject*,` and `QWidget*` are represented in QMetaType::Type but
    /// not in QVariant::Type, and they can be returned by this function.
    /// However, they are considered to be user defined types when tested
    /// against QVariant::Type.
    /// 
    /// To test whether an instance of QVariant contains a data type that
    /// is compatible with the data type you are interested in, use
    /// canConvert().
    /// 
    /// Returns the name of the type stored in the variant. The returned
    /// strings describe the C++ datatype used to store the data: for
    /// example, , , or . An Invalid
    /// variant returns 0.
    /// 
    /// Converts the int representation of the storage type, *typeId,* to
    /// its string representation.
    /// 
    /// Returns a null pointer if the type is QMetaType::UnknownType or doesn't exist.
    type() -> Variant::Type,
    /// 
    /// Returns the storage type of the value stored in the variant. For
    /// non-user types, this is the same as type().
    /// 
    /// **See also:** [`type()`]
    user_type() -> i32,
    /// 
    /// Returns the name of the type stored in the variant. The returned
    /// strings describe the C++ datatype used to store the data: for
    /// example, , , or . An Invalid
    /// variant returns 0.
    type_name() -> char?,
    /// 
    /// Returns `true` if the variant's type can be cast to the requested
    /// type, *targetTypeId.* Such casting is done automatically when calling the
    /// toInt(), toBool(), ... methods.
    /// 
    /// The following casts are done automatically:
    /// 
    /// * Type
    /// * Automatically Cast To
    /// * [QMetaType::Bool](QMetaType::Bool)
    /// 
    /// * [QMetaType::QChar,](QMetaType::QChar,)
    /// [QMetaType::Double,](QMetaType::Double,)
    /// [QMetaType::Int,](QMetaType::Int,)
    /// [QMetaType::LongLong,](QMetaType::LongLong,)
    /// [QMetaType::QString,](QMetaType::QString,)
    /// [QMetaType::UInt,](QMetaType::UInt,)
    /// [QMetaType::ULongLong](QMetaType::ULongLong)
    /// 
    /// * [QMetaType::QByteArray](QMetaType::QByteArray)
    /// 
    /// * [QMetaType::Double,](QMetaType::Double,)
    /// [QMetaType::Int,](QMetaType::Int,)
    /// [QMetaType::LongLong,](QMetaType::LongLong,)
    /// [QMetaType::QString,](QMetaType::QString,)
    /// [QMetaType::UInt,](QMetaType::UInt,)
    /// [QMetaType::ULongLong,](QMetaType::ULongLong,)
    /// [QMetaType::QUuid](QMetaType::QUuid)
    /// 
    /// * [QMetaType::QChar](QMetaType::QChar)
    /// 
    /// * [QMetaType::Bool,](QMetaType::Bool,)
    /// [QMetaType::Int,](QMetaType::Int,)
    /// [QMetaType::UInt,](QMetaType::UInt,)
    /// [QMetaType::LongLong,](QMetaType::LongLong,)
    /// [QMetaType::ULongLong](QMetaType::ULongLong)
    /// 
    /// * [QMetaType::QColor](QMetaType::QColor)
    /// 
    /// * [QMetaType::QString](QMetaType::QString)
    /// 
    /// * [QMetaType::QDate](QMetaType::QDate)
    /// 
    /// * [QMetaType::QDateTime,](QMetaType::QDateTime,)
    /// [QMetaType::QString](QMetaType::QString)
    /// 
    /// * [QMetaType::QDateTime](QMetaType::QDateTime)
    /// 
    /// * [QMetaType::QDate,](QMetaType::QDate,)
    /// [QMetaType::QString,](QMetaType::QString,)
    /// [QMetaType::QTime](QMetaType::QTime)
    /// 
    /// * [QMetaType::Double](QMetaType::Double)
    /// 
    /// * [QMetaType::Bool,](QMetaType::Bool,)
    /// [QMetaType::Int,](QMetaType::Int,)
    /// [QMetaType::LongLong,](QMetaType::LongLong,)
    /// [QMetaType::QString,](QMetaType::QString,)
    /// [QMetaType::UInt,](QMetaType::UInt,)
    /// [QMetaType::ULongLong](QMetaType::ULongLong)
    /// 
    /// * [QMetaType::QFont](QMetaType::QFont)
    /// 
    /// * [QMetaType::QString](QMetaType::QString)
    /// 
    /// * [QMetaType::Int](QMetaType::Int)
    /// 
    /// * [QMetaType::Bool,](QMetaType::Bool,)
    /// [QMetaType::QChar,](QMetaType::QChar,)
    /// [QMetaType::Double,](QMetaType::Double,)
    /// [QMetaType::LongLong,](QMetaType::LongLong,)
    /// [QMetaType::QString,](QMetaType::QString,)
    /// [QMetaType::UInt,](QMetaType::UInt,)
    /// [QMetaType::ULongLong](QMetaType::ULongLong)
    /// 
    /// * [QMetaType::QKeySequence](QMetaType::QKeySequence)
    /// 
    /// * [QMetaType::Int,](QMetaType::Int,)
    /// [QMetaType::QString](QMetaType::QString)
    /// 
    /// * [QMetaType::QVariantList](QMetaType::QVariantList)
    /// 
    /// * [QMetaType::QStringList](QMetaType::QStringList)
    /// (if the list's items can be converted to QStrings)
    /// * [QMetaType::LongLong](QMetaType::LongLong)
    /// 
    /// * [QMetaType::Bool,](QMetaType::Bool,)
    /// [QMetaType::QByteArray,](QMetaType::QByteArray,)
    /// [QMetaType::QChar,](QMetaType::QChar,)
    /// [QMetaType::Double,](QMetaType::Double,)
    /// [QMetaType::Int,](QMetaType::Int,)
    /// [QMetaType::QString,](QMetaType::QString,)
    /// [QMetaType::UInt,](QMetaType::UInt,)
    /// [QMetaType::ULongLong](QMetaType::ULongLong)
    /// 
    /// * [QMetaType::QPoint](QMetaType::QPoint)
    /// 
    /// * QMetaType::QPointF
    /// * [QMetaType::QRect](QMetaType::QRect)
    /// 
    /// * QMetaType::QRectF
    /// * [QMetaType::QString](QMetaType::QString)
    /// 
    /// * [QMetaType::Bool,](QMetaType::Bool,)
    /// [QMetaType::QByteArray,](QMetaType::QByteArray,)
    /// [QMetaType::QChar,](QMetaType::QChar,)
    /// [QMetaType::QColor,](QMetaType::QColor,)
    /// [QMetaType::QDate,](QMetaType::QDate,)
    /// [QMetaType::QDateTime,](QMetaType::QDateTime,)
    /// [QMetaType::Double,](QMetaType::Double,)
    /// [QMetaType::QFont,](QMetaType::QFont,)
    /// [QMetaType::Int,](QMetaType::Int,)
    /// [QMetaType::QKeySequence,](QMetaType::QKeySequence,)
    /// [QMetaType::LongLong,](QMetaType::LongLong,)
    /// [QMetaType::QStringList,](QMetaType::QStringList,)
    /// [QMetaType::QTime,](QMetaType::QTime,)
    /// [QMetaType::UInt,](QMetaType::UInt,)
    /// [QMetaType::ULongLong,](QMetaType::ULongLong,)
    /// [QMetaType::QUuid](QMetaType::QUuid)
    /// 
    /// * [QMetaType::QStringList](QMetaType::QStringList)
    /// 
    /// * [QMetaType::QVariantList,](QMetaType::QVariantList,)
    /// [QMetaType::QString](QMetaType::QString)
    /// (if the list contains exactly one item)
    /// * [QMetaType::QTime](QMetaType::QTime)
    /// 
    /// * [QMetaType::QString](QMetaType::QString)
    /// 
    /// * [QMetaType::UInt](QMetaType::UInt)
    /// 
    /// * [QMetaType::Bool,](QMetaType::Bool,)
    /// [QMetaType::QChar,](QMetaType::QChar,)
    /// [QMetaType::Double,](QMetaType::Double,)
    /// [QMetaType::Int,](QMetaType::Int,)
    /// [QMetaType::LongLong,](QMetaType::LongLong,)
    /// [QMetaType::QString,](QMetaType::QString,)
    /// [QMetaType::ULongLong](QMetaType::ULongLong)
    /// 
    /// * [QMetaType::ULongLong](QMetaType::ULongLong)
    /// 
    /// * [QMetaType::Bool,](QMetaType::Bool,)
    /// [QMetaType::QChar,](QMetaType::QChar,)
    /// [QMetaType::Double,](QMetaType::Double,)
    /// [QMetaType::Int,](QMetaType::Int,)
    /// [QMetaType::LongLong,](QMetaType::LongLong,)
    /// [QMetaType::QString,](QMetaType::QString,)
    /// [QMetaType::UInt](QMetaType::UInt)
    /// 
    /// * [QMetaType::QUuid](QMetaType::QUuid)
    /// 
    /// * [QMetaType::QByteArray,](QMetaType::QByteArray,)
    /// [QMetaType::QString](QMetaType::QString)
    /// 
    /// A QVariant containing a pointer to a type derived from QObject will also return true for this
    /// function if a qobject_cast to the type described by *targetTypeId* would succeed. Note that
    /// this only works for QObject subclasses which use the Q_OBJECT macro.
    /// 
    /// A QVariant containing a sequential container will also return true for this
    /// function if the *targetTypeId* is QVariantList. It is possible to iterate over
    /// the contents of the container without extracting it as a (copied) QVariantList:
    /// 
    /// This requires that the value_type of the container is itself a metatype.
    /// 
    /// Similarly, a QVariant containing a sequential container will also return true for this
    /// function the *targetTypeId* is QVariantHash or QVariantMap. It is possible to iterate over
    /// the contents of the container without extracting it as a (copied) QVariantHash or QVariantMap:
    /// 
    /// **See also:** [`convert()`]
    /// [`SequentialIterable`]
    /// [`q_declare_sequential_container_metatype()`]
    /// [`AssociativeIterable`]
    /// [`q_declare_associative_container_metatype()`]
    /// 
    /// Returns `true` if the variant can be converted to the template type `T` ,
    /// otherwise false.
    /// 
    /// Example:
    /// 
    /// A QVariant containing a pointer to a type derived from QObject will also return true for this
    /// function if a qobject_cast to the template type `T` would succeed. Note that this only works
    /// for QObject subclasses which use the Q_OBJECT macro.
    /// 
    /// **See also:** [`convert()`]
    can_convert(target_type_id: i32) -> bool,
    /// 
    /// Casts the variant to the requested type, *targetTypeId.* If the cast cannot be
    /// done, the variant is still changed to the requested type, but is left in a cleared
    /// null state similar to that constructed by QVariant(Type).
    /// 
    /// Returns `true` if the current type of the variant was successfully cast;
    /// otherwise returns `false.`
    /// 
    /// A QVariant containing a pointer to a type derived from QObject will also convert
    /// and return true for this function if a qobject_cast to the type described
    /// by *targetTypeId* would succeed. Note that this only works for QObject subclasses
    /// which use the Q_OBJECT macro.
    /// 
    /// **Note**: converting QVariants that are null due to not being initialized or having
    /// failed a previous conversion will always fail, changing the type, remaining null,
    /// and returning `false.`
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`clear()`]
    convert(target_type_id: i32) -> bool,
    /// 
    /// Returns `true` if the storage type of this variant is not
    /// QMetaType::UnknownType; otherwise returns `false.`
    is_valid() -> bool,
    /// 
    /// Returns `true` if this is a null variant, false otherwise. A variant is
    /// considered null if it contains no initialized value, or the contained value
    /// is a null pointer or is an instance of a built-in type that has an isNull
    /// method, in which case the result would be the same as calling isNull on the
    /// wrapped object.
    /// 
    /// **Warning**: Null variants is not a single state and two null variants may easily
    /// return `false` on the == operator if they do not contain similar null values.
    /// 
    /// **See also:** convert(int)
    is_null() -> bool,
    /// 
    /// Convert this variant to type QMetaType::UnknownType and free up any resources
    /// used.
    clear(),
    detach(),
    is_detached() -> bool,
    /// 
    /// Returns the variant as an int if the variant has userType()
    /// [QMetaType::Int,](QMetaType::Int,)
    /// [QMetaType::Bool,](QMetaType::Bool,)
    /// [QMetaType::QByteArray,](QMetaType::QByteArray,)
    /// 
    /// [QMetaType::QChar,](QMetaType::QChar,)
    /// [QMetaType::Double,](QMetaType::Double,)
    /// [QMetaType::LongLong,](QMetaType::LongLong,)
    /// 
    /// [QMetaType::QString,](QMetaType::QString,)
    /// [QMetaType::UInt,](QMetaType::UInt,)
    /// or [QMetaType::ULongLong;](QMetaType::ULongLong;)
    /// 
    /// otherwise returns 0.
    /// 
    /// If *ok* is non-null: `*` *ok* is set to true if the value could be
    /// converted to an int; otherwise `*` *ok* is set to false.
    /// 
    /// **Warning:** If the value is convertible to a [QMetaType::LongLong](QMetaType::LongLong)
    /// but is
    /// too large to be represented in an int, the resulting arithmetic overflow
    /// will not be reflected in *ok.* A simple workaround is to use
    /// QString::toInt().
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_int(ok: *bool) -> i32,
    /// 
    /// Returns the variant as an unsigned int if the variant has userType()
    /// [QMetaType::UInt,](QMetaType::UInt,)
    /// [QMetaType::Bool,](QMetaType::Bool,)
    /// [QMetaType::QByteArray,](QMetaType::QByteArray,)
    /// 
    /// [QMetaType::QChar,](QMetaType::QChar,)
    /// [QMetaType::Double,](QMetaType::Double,)
    /// [QMetaType::Int,](QMetaType::Int,)
    /// 
    /// [QMetaType::LongLong,](QMetaType::LongLong,)
    /// [QMetaType::QString,](QMetaType::QString,)
    /// or [QMetaType::ULongLong;](QMetaType::ULongLong;)
    /// 
    /// otherwise returns 0.
    /// 
    /// If *ok* is non-null: `*` *ok* is set to true if the value could be
    /// converted to an unsigned int; otherwise `*` *ok* is set to false.
    /// 
    /// **Warning:** If the value is convertible to a [QMetaType::ULongLong](QMetaType::ULongLong)
    /// but is
    /// too large to be represented in an unsigned int, the resulting arithmetic
    /// overflow will not be reflected in *ok.* A simple workaround is to use
    /// QString::toUInt().
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_u_int(ok: *bool) -> uint,
    /// 
    /// Returns the variant as a long long int if the variant has userType()
    /// [QMetaType::LongLong,](QMetaType::LongLong,)
    /// [QMetaType::Bool,](QMetaType::Bool,)
    /// [QMetaType::QByteArray,](QMetaType::QByteArray,)
    /// 
    /// [QMetaType::QChar,](QMetaType::QChar,)
    /// [QMetaType::Double,](QMetaType::Double,)
    /// [QMetaType::Int,](QMetaType::Int,)
    /// 
    /// [QMetaType::QString,](QMetaType::QString,)
    /// [QMetaType::UInt,](QMetaType::UInt,)
    /// or [QMetaType::ULongLong;](QMetaType::ULongLong;)
    /// 
    /// otherwise returns 0.
    /// 
    /// If *ok* is non-null: `*` `ok` is set to true if the value could be
    /// converted to an int; otherwise `*` `ok` is set to false.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_long_long(ok: *bool) -> i64,
    /// 
    /// Returns the variant as an unsigned long long int if the
    /// variant has type() [QMetaType::ULongLong,](QMetaType::ULongLong,)
    /// [QMetaType::Bool,](QMetaType::Bool,)
    /// 
    /// [QMetaType::QByteArray,](QMetaType::QByteArray,)
    /// [QMetaType::QChar,](QMetaType::QChar,)
    /// [QMetaType::Double,](QMetaType::Double,)
    /// 
    /// [QMetaType::Int,](QMetaType::Int,)
    /// [QMetaType::LongLong,](QMetaType::LongLong,)
    /// [QMetaType::QString,](QMetaType::QString,)
    /// or
    /// [QMetaType::UInt;](QMetaType::UInt;)
    /// otherwise returns 0.
    /// 
    /// If *ok* is non-null: `*` *ok* is set to true if the value could be
    /// converted to an int; otherwise `*` *ok* is set to false.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_u_long_long(ok: *bool) -> qulonglong,
    /// 
    /// Returns the variant as a bool if the variant has userType() Bool.
    /// 
    /// Returns `true` if the variant has userType() [QMetaType::Bool,](QMetaType::Bool,)
    /// 
    /// [QMetaType::QChar,](QMetaType::QChar,)
    /// [QMetaType::Double,](QMetaType::Double,)
    /// [QMetaType::Int,](QMetaType::Int,)
    /// 
    /// [QMetaType::LongLong,](QMetaType::LongLong,)
    /// [QMetaType::UInt,](QMetaType::UInt,)
    /// or [QMetaType::ULongLong](QMetaType::ULongLong)
    /// and
    /// the value is non-zero, or if the variant has type [QMetaType::QString](QMetaType::QString)
    /// or
    /// [QMetaType::QByteArray](QMetaType::QByteArray)
    /// and its lower-case content is not one of the
    /// following: empty, or ; otherwise returns `false.`
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_bool() -> bool,
    /// 
    /// Returns the variant as a double if the variant has userType()
    /// [QMetaType::Double,](QMetaType::Double,)
    /// [QMetaType::Float,](QMetaType::Float,)
    /// [QMetaType::Bool,](QMetaType::Bool,)
    /// 
    /// [QMetaType::QByteArray,](QMetaType::QByteArray,)
    /// [QMetaType::Int,](QMetaType::Int,)
    /// [QMetaType::LongLong,](QMetaType::LongLong,)
    /// 
    /// [QMetaType::QString,](QMetaType::QString,)
    /// [QMetaType::UInt,](QMetaType::UInt,)
    /// or [QMetaType::ULongLong;](QMetaType::ULongLong;)
    /// 
    /// otherwise returns 0.0.
    /// 
    /// If *ok* is non-null: `*` *ok* is set to true if the value could be
    /// converted to a double; otherwise `*` *ok* is set to false.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_double(ok: *bool) -> double,
    /// 
    /// Returns the variant as a float if the variant has userType()
    /// [QMetaType::Double,](QMetaType::Double,)
    /// [QMetaType::Float,](QMetaType::Float,)
    /// [QMetaType::Bool,](QMetaType::Bool,)
    /// 
    /// [QMetaType::QByteArray,](QMetaType::QByteArray,)
    /// [QMetaType::Int,](QMetaType::Int,)
    /// [QMetaType::LongLong,](QMetaType::LongLong,)
    /// 
    /// [QMetaType::QString,](QMetaType::QString,)
    /// [QMetaType::UInt,](QMetaType::UInt,)
    /// or [QMetaType::ULongLong;](QMetaType::ULongLong;)
    /// 
    /// otherwise returns 0.0.
    /// 
    /// If *ok* is non-null: `*` *ok* is set to true if the value could be
    /// converted to a double; otherwise `*` *ok* is set to false.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_float(ok: *bool) -> f32,
    /// 
    /// Returns the variant as a qreal if the variant has userType()
    /// [QMetaType::Double,](QMetaType::Double,)
    /// [QMetaType::Float,](QMetaType::Float,)
    /// [QMetaType::Bool,](QMetaType::Bool,)
    /// 
    /// [QMetaType::QByteArray,](QMetaType::QByteArray,)
    /// [QMetaType::Int,](QMetaType::Int,)
    /// [QMetaType::LongLong,](QMetaType::LongLong,)
    /// 
    /// [QMetaType::QString,](QMetaType::QString,)
    /// [QMetaType::UInt,](QMetaType::UInt,)
    /// or [QMetaType::ULongLong;](QMetaType::ULongLong;)
    /// 
    /// otherwise returns 0.0.
    /// 
    /// If *ok* is non-null: `*` *ok* is set to true if the value could be
    /// converted to a double; otherwise `*` *ok* is set to false.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_real(ok: *bool) -> f32,
    /// 
    /// Returns the variant as a QByteArray if the variant has userType()
    /// [QMetaType::QByteArray](QMetaType::QByteArray)
    /// or [QMetaType::QString](QMetaType::QString)
    /// (converted using
    /// QString::fromUtf8()); otherwise returns an empty byte array.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_byte_array() -> ByteArray,
    /// 
    /// Returns the variant as a QBitArray if the variant has userType()
    /// [QMetaType::QBitArray;](QMetaType::QBitArray;)
    /// otherwise returns an empty bit array.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_bit_array() -> BitArray,
    /// 
    /// Returns the variant as a QChar if the variant has userType()
    /// [QMetaType::QChar,](QMetaType::QChar,)
    /// [QMetaType::Int,](QMetaType::Int,)
    /// or [QMetaType::UInt;](QMetaType::UInt;)
    /// otherwise
    /// returns an invalid QChar.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_char() -> Char,
    /// 
    /// Returns the variant as a QDate if the variant has userType()
    /// [QMetaType::QDate,](QMetaType::QDate,)
    /// [QMetaType::QDateTime,](QMetaType::QDateTime,)
    /// or [QMetaType::QString;](QMetaType::QString;)
    /// 
    /// otherwise returns an invalid date.
    /// 
    /// If the type() is [QMetaType::QString,](QMetaType::QString,)
    /// an invalid date will be returned if
    /// the string cannot be parsed as a Qt::ISODate format date.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    /// 
    /// Returns the variant as a QDateTime if the variant has userType()
    /// [QMetaType::QDateTime,](QMetaType::QDateTime,)
    /// [QMetaType::QDate,](QMetaType::QDate,)
    /// or [QMetaType::QString;](QMetaType::QString;)
    /// 
    /// otherwise returns an invalid date/time.
    /// 
    /// If the type() is [QMetaType::QString,](QMetaType::QString,)
    /// an invalid date/time will be
    /// returned if the string cannot be parsed as a Qt::ISODate format date/time.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_date() -> Date,
    /// 
    /// Returns the variant as a QTime if the variant has userType()
    /// [QMetaType::QTime,](QMetaType::QTime,)
    /// [QMetaType::QDateTime,](QMetaType::QDateTime,)
    /// or [QMetaType::QString;](QMetaType::QString;)
    /// 
    /// otherwise returns an invalid time.
    /// 
    /// If the type() is [QMetaType::QString,](QMetaType::QString,)
    /// an invalid time will be returned if
    /// the string cannot be parsed as a Qt::ISODate format time.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_time() -> Time,
    /// 
    /// Returns the variant as a QDateTime if the variant has userType()
    /// [QMetaType::QDateTime,](QMetaType::QDateTime,)
    /// [QMetaType::QDate,](QMetaType::QDate,)
    /// or [QMetaType::QString;](QMetaType::QString;)
    /// 
    /// otherwise returns an invalid date/time.
    /// 
    /// If the type() is [QMetaType::QString,](QMetaType::QString,)
    /// an invalid date/time will be
    /// returned if the string cannot be parsed as a Qt::ISODate format date/time.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_date_time() -> DateTime,
    /// 
    /// Returns the variant as a QVariantList if the variant has userType()
    /// [QMetaType::QVariantList](QMetaType::QVariantList)
    /// or [QMetaType::QStringList;](QMetaType::QStringList;)
    /// otherwise returns
    /// an empty list.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_list() -> [Variant],
    /// 
    /// Returns the variant as a QMap<QString, QVariant> if the variant
    /// has type() [QMetaType::QVariantMap;](QMetaType::QVariantMap;)
    /// otherwise returns an empty map.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_map() -> Map<QString,,
    /// 
    /// Returns the variant as a QHash<QString, QVariant> if the variant
    /// has type() [QMetaType::QVariantHash;](QMetaType::QVariantHash;)
    /// otherwise returns an empty map.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_hash() -> Hash<QString,,
    /// 
    /// Returns the variant as a QPoint if the variant has userType()
    /// [QMetaType::QPoint](QMetaType::QPoint)
    /// or [QMetaType::QPointF;](QMetaType::QPointF;)
    /// otherwise returns a null
    /// QPoint.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    /// 
    /// Returns the variant as a QPointF if the variant has userType() [QMetaType::QPoint](QMetaType::QPoint)
    /// or [QMetaType::QPointF;](QMetaType::QPointF;)
    /// otherwise returns a null
    /// QPointF.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_point() -> Point,
    /// 
    /// Returns the variant as a QPointF if the variant has userType() [QMetaType::QPoint](QMetaType::QPoint)
    /// or [QMetaType::QPointF;](QMetaType::QPointF;)
    /// otherwise returns a null
    /// QPointF.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_point_f() -> PointF,
    /// 
    /// Returns the variant as a QRect if the variant has userType()
    /// [QMetaType::QRect;](QMetaType::QRect;)
    /// otherwise returns an invalid QRect.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    /// 
    /// Returns the variant as a QRectF if the variant has userType()
    /// [QMetaType::QRect](QMetaType::QRect)
    /// or [QMetaType::QRectF;](QMetaType::QRectF;)
    /// otherwise returns an invalid
    /// QRectF.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_rect() -> Rect,
    /// 
    /// Returns the variant as a QSize if the variant has userType()
    /// [QMetaType::QSize;](QMetaType::QSize;)
    /// otherwise returns an invalid QSize.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    /// 
    /// Returns the variant as a QSizeF if the variant has userType() [QMetaType::QSizeF;](QMetaType::QSizeF;)
    /// otherwise returns an invalid QSizeF.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_size() -> Size,
    /// 
    /// Returns the variant as a QSizeF if the variant has userType() [QMetaType::QSizeF;](QMetaType::QSizeF;)
    /// otherwise returns an invalid QSizeF.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_size_f() -> SizeF,
    /// 
    /// Returns the variant as a QLineF if the variant has userType()
    /// [QMetaType::QLineF;](QMetaType::QLineF;)
    /// otherwise returns an invalid QLineF.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    /// 
    /// Returns the variant as a QLine if the variant has userType()
    /// [QMetaType::QLine;](QMetaType::QLine;)
    /// otherwise returns an invalid QLine.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_line() -> Line,
    /// 
    /// Returns the variant as a QLineF if the variant has userType()
    /// [QMetaType::QLineF;](QMetaType::QLineF;)
    /// otherwise returns an invalid QLineF.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_line_f() -> LineF,
    /// 
    /// Returns the variant as a QRectF if the variant has userType()
    /// [QMetaType::QRect](QMetaType::QRect)
    /// or [QMetaType::QRectF;](QMetaType::QRectF;)
    /// otherwise returns an invalid
    /// QRectF.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_rect_f() -> RectF,
    /// 
    /// Returns the variant as a QLocale if the variant has userType()
    /// [QMetaType::QLocale;](QMetaType::QLocale;)
    /// otherwise returns an invalid QLocale.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_locale() -> Locale,
    /// 
    /// Returns the variant as a QRegExp if the variant has userType()
    /// [QMetaType::QRegExp;](QMetaType::QRegExp;)
    /// otherwise returns an empty QRegExp.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_reg_exp() -> RegExp,
    /// 
    /// Returns the variant as a QRegularExpression if the variant has userType() [QRegularExpression;](QRegularExpression;)
    /// otherwise returns an empty QRegularExpression.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_regular_expression() -> RegularExpression,
    /// 
    /// Returns the variant as a QUrl if the variant has userType()
    /// [QMetaType::QUrl;](QMetaType::QUrl;)
    /// otherwise returns an invalid QUrl.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_url() -> Url,
    /// 
    /// Returns the variant as a QEasingCurve if the variant has userType()
    /// [QMetaType::QEasingCurve;](QMetaType::QEasingCurve;)
    /// otherwise returns a default easing curve.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_easing_curve() -> EasingCurve,
    /// 
    /// Returns the variant as a QUuid if the variant has type()
    /// [QMetaType::QUuid,](QMetaType::QUuid,)
    /// [QMetaType::QByteArray](QMetaType::QByteArray)
    /// or [QMetaType::QString;](QMetaType::QString;)
    /// 
    /// otherwise returns a default-constructed QUuid.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_uuid() -> Uuid,
    /// 
    /// Returns the variant as a QJsonValue if the variant has userType() [QJsonValue;](QJsonValue;)
    /// otherwise returns a default constructed QJsonValue.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_json_value() -> JsonValue,
    /// 
    /// Returns the variant as a QJsonObject if the variant has userType() [QJsonObject;](QJsonObject;)
    /// otherwise returns a default constructed QJsonObject.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_json_object() -> JsonObject,
    /// 
    /// Returns the variant as a QJsonArray if the variant has userType() [QJsonArray;](QJsonArray;)
    /// otherwise returns a default constructed QJsonArray.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_json_array() -> JsonArray,
    /// 
    /// Returns the variant as a QJsonDocument if the variant has userType() [QJsonDocument;](QJsonDocument;)
    /// otherwise returns a default constructed QJsonDocument.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    to_json_document() -> JsonDocument,
    /// 
    /// Returns the variant as a QModelIndex if the variant has userType() [QModelIndex;](QModelIndex;)
    /// otherwise returns a default constructed QModelIndex.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    /// [`to_persistent_model_index()`]
    to_model_index() -> ModelIndex,
    /// 
    /// Returns the variant as a QPersistentModelIndex if the variant has userType() [QPersistentModelIndex;](QPersistentModelIndex;)
    /// otherwise returns a default constructed QPersistentModelIndex.
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`convert()`]
    /// [`to_model_index()`]
    to_persistent_model_index() -> PersistentModelIndex,
    load(ds: &DataStreamType),
    save(ds: &DataStreamType),
    /// 
    /// Converts the int representation of the storage type, *typeId,* to
    /// its string representation.
    /// 
    /// Returns a null pointer if the type is QMetaType::UnknownType or doesn't exist.
    [static] type_to_name(type_id: i32) -> char?,
    /// 
    /// Converts the string representation of the storage type given in *name,* to its enum representation.
    /// 
    /// If the string representation cannot be converted to any enum
    /// representation, the variant is set to `Invalid.`
    [static] name_to_type(name: *char) -> Variant::Type,
    data(),
    const_data(),
    [org_name(data)]
    data_2(),
    create(type: i32, copy: *void),
    cmp(other: &VariantType) -> bool,
    compare(other: &VariantType) -> i32,
    /// 
    /// Casts the variant to the requested type, *targetTypeId.* If the cast cannot be
    /// done, the variant is still changed to the requested type, but is left in a cleared
    /// null state similar to that constructed by QVariant(Type).
    /// 
    /// Returns `true` if the current type of the variant was successfully cast;
    /// otherwise returns `false.`
    /// 
    /// A QVariant containing a pointer to a type derived from QObject will also convert
    /// and return true for this function if a qobject_cast to the type described
    /// by *targetTypeId* would succeed. Note that this only works for QObject subclasses
    /// which use the Q_OBJECT macro.
    /// 
    /// **Note**: converting QVariants that are null due to not being initialized or having
    /// failed a previous conversion will always fail, changing the type, remaining null,
    /// and returning `false.`
    /// 
    /// **See also:** canConvert(int targetTypeId)
    /// [`clear()`]
    [org_name(convert)]
    convert_2(t: i32, ptr: *void) -> bool,
}

[org_name(QVariant)]
enum Type {
    /// no type
    Invalid = 0,
    /// a bool
    Bool = 1,
    /// an int
    Int = 2,
    /// a [uint](uint)

    UInt = 3,
    /// a [qlonglong](qlonglong)

    LongLong = 4,
    /// a [qulonglong](qulonglong)

    ULongLong = 5,
    /// a double
    Double = 6,
    /// a QChar
    Char = 7,
    /// a QVariantMap
    Map = 8,
    /// a QVariantList
    List = 9,
    /// a QString
    String = 10,
    /// a QStringList
    StringList = 11,
    /// a QByteArray
    ByteArray = 12,
    /// a QBitArray
    BitArray = 13,
    /// a QDate
    Date = 14,
    /// a QTime
    Time = 15,
    /// a QDateTime
    DateTime = 16,
    /// a QUrl
    Url = 17,
    /// a QLocale
    Locale = 18,
    /// a QRect
    Rect = 19,
    /// a QRectF
    RectF = 20,
    /// a QSize
    Size = 21,
    /// a QSizeF
    SizeF = 22,
    /// a QLine
    Line = 23,
    /// a QLineF
    LineF = 24,
    /// a QPoint
    Point = 25,
    /// a QPointF
    PointF = 26,
    /// a QRegExp
    RegExp = 27,
    /// a QRegularExpression
    RegularExpression = 44,
    /// a QVariantHash
    Hash = 28,
    /// a QEasingCurve
    EasingCurve = 29,
    /// a QUuid
    Uuid = 30,
    /// a QModelIndex
    ModelIndex = 42,
    /// a QPersistentModelIndex (since 5.5)
    PersistentModelIndex = 50,
    LastCoreType = 51,
    /// a QFont
    Font = 64,
    /// a QPixmap
    Pixmap = 65,
    /// a QBrush
    Brush = 66,
    /// a QColor
    Color = 67,
    /// a QPalette
    Palette = 68,
    /// a QImage
    Image = 70,
    /// a QPolygon
    Polygon = 71,
    /// a QRegion
    Region = 72,
    /// a QBitmap
    Bitmap = 73,
    /// a QCursor
    Cursor = 74,
    /// a QKeySequence
    KeySequence = 75,
    /// a QPen
    Pen = 76,
    /// a QTextLength
    TextLength = 77,
    /// a QTextFormat
    TextFormat = 78,
    /// a QMatrix
    Matrix = 79,
    /// a QTransform
    Transform = 80,
    /// a QMatrix4x4
    Matrix4x4 = 81,
    /// a QVector2D
    Vector2D = 82,
    /// a QVector3D
    Vector3D = 83,
    /// a QVector4D
    Vector4D = 84,
    /// a QQuaternion
    Quaternion = 85,
    /// a QPolygonF
    PolygonF = 86,
    /// a QIcon
    Icon = 69,
    LastGuiType = 86,
    /// a QSizePolicy
    SizePolicy = 121,
    /// Base value for user-defined types.
    UserType = 1024,
    LastType = 4294967295,
}

// vim: syntax=rust expandtab ts=4 sw=4
