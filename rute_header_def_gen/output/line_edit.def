struct LineEdit : Widget {
    text() -> String,
    display_text() -> String,
    placeholder_text() -> String,
    set_placeholder_text(arg0: String),
    max_length() -> i32,
    set_max_length(arg0: i32),
    set_frame(arg0: bool),
    has_frame() -> bool,
    set_clear_button_enabled(enable: bool),
    is_clear_button_enabled() -> bool,
    echo_mode() -> LineEdit::EchoMode,
    set_echo_mode(arg0: LineEdit::EchoMode),
    is_read_only() -> bool,
    set_read_only(arg0: bool),
    set_validator(arg0: &ValidatorType),
    validator() -> &ValidatorType,
    set_completer(completer: &CompleterType),
    completer() -> &CompleterType,
    size_hint() -> SizeType,
    minimum_size_hint() -> SizeType,
    cursor_position() -> i32,
    set_cursor_position(arg0: i32),
    cursor_position_at(pos: &PointType) -> i32,
    set_alignment(flag: Rute::Alignment),
    alignment() -> Rute::Alignment,
    cursor_forward(mark: bool, steps: i32),
    cursor_backward(mark: bool, steps: i32),
    cursor_word_forward(mark: bool),
    cursor_word_backward(mark: bool),
    backspace(),
    del(),
    home(mark: bool),
    end(mark: bool),
    is_modified() -> bool,
    set_modified(arg0: bool),
    set_selection(arg0: i32, arg1: i32),
    has_selected_text() -> bool,
    selected_text() -> String,
    selection_start() -> i32,
    selection_end() -> i32,
    selection_length() -> i32,
    is_undo_available() -> bool,
    is_redo_available() -> bool,
    set_drag_enabled(b: bool),
    drag_enabled() -> bool,
    set_cursor_move_style(style: Rute::CursorMoveStyle),
    cursor_move_style() -> Rute::CursorMoveStyle,
    input_mask() -> String,
    set_input_mask(input_mask: String),
    has_acceptable_input() -> bool,
    set_text_margins(left: i32, top: i32, right: i32, bottom: i32),
    set_text_margins(margins: &MarginsType),
    get_text_margins(left: &i32, top: &i32, right: &i32, bottom: &i32),
    text_margins() -> MarginsType,
    add_action(action: &ActionType, position: LineEdit::ActionPosition),
    add_action(icon: &IconType, position: LineEdit::ActionPosition) -> &ActionType,
    set_text(arg0: String),
    clear(),
    select_all(),
    undo(),
    redo(),
    cut(),
    copy(),
    paste(),
    deselect(),
    insert(arg0: String),
    create_standard_context_menu() -> &MenuType,
    [callback] text_changed(arg0: String),
    [callback] text_edited(arg0: String),
    [callback] cursor_position_changed(arg0: i32, arg1: i32),
    [callback] return_pressed(),
    [callback] editing_finished(),
    [callback] selection_changed(),
    mouse_press_event(arg0: &MouseEventType),
    mouse_move_event(arg0: &MouseEventType),
    mouse_release_event(arg0: &MouseEventType),
    mouse_double_click_event(arg0: &MouseEventType),
    key_press_event(arg0: &KeyEventType),
    focus_in_event(arg0: &FocusEventType),
    focus_out_event(arg0: &FocusEventType),
    paint_event(arg0: &PaintEventType),
    drag_enter_event(arg0: &DragEnterEventType),
    drag_move_event(e: &DragMoveEventType),
    drag_leave_event(e: &DragLeaveEventType),
    drop_event(arg0: &DropEventType),
    change_event(arg0: &EventType),
    context_menu_event(arg0: &ContextMenuEventType),
    input_method_event(arg0: &InputMethodEventType),
    init_style_option(option: &StyleOptionFrameType),
    input_method_query(arg0: Rute::InputMethodQuery) -> VariantType,
    input_method_query(property: Rute::InputMethodQuery, argument: VariantType) -> VariantType,
    event(arg0: &EventType) -> bool,
    cursor_rect() -> RectType,
}

// vim: syntax=rust expandtab ts=4 sw=4
