///     \class QLineEdit
///     \brief The QLineEdit widget is a one-line text editor.
/// 
///     \ingroup basicwidgets
///     \inmodule QtWidgets
/// 
///     \image windows-lineedit.png
/// 
///     A line edit allows the user to enter and edit a single line of
///     plain text with a useful collection of editing functions,
///     including undo and redo, cut and paste, and drag and drop (see
///     \l setDragEnabled()).
/// 
///     By changing the echoMode() of a line edit, it can also be used as
///     a "write-only" field, for inputs such as passwords.
/// 
///     The length of the text can be constrained to maxLength(). The text
///     can be arbitrarily constrained using a validator() or an
///     inputMask(), or both. When switching between a validator and an input mask
///     on the same line edit, it is best to clear the validator or input mask to
///     prevent undefined behavior.
/// 
///     A related class is QTextEdit which allows multi-line, rich text
///     editing.
/// 
///     You can change the text with setText() or insert(). The text is
///     retrieved with text(); the displayed text (which may be different,
///     see \l{EchoMode}) is retrieved with displayText(). Text can be
///     selected with setSelection() or selectAll(), and the selection can
///     be cut(), copy()ied and paste()d. The text can be aligned with
///     setAlignment().
/// 
///     When the text changes the textChanged() signal is emitted; when
///     the text changes other than by calling setText() the textEdited()
///     signal is emitted; when the cursor is moved the
///     cursorPositionChanged() signal is emitted; and when the Return or
///     Enter key is pressed the returnPressed() signal is emitted.
/// 
///     When editing is finished, either because the line edit lost focus
///     or Return/Enter is pressed the editingFinished() signal is
///     emitted.
/// 
///     Note that if there is a validator set on the line edit, the
///     returnPressed()/editingFinished() signals will only be emitted if
///     the validator returns QValidator::Acceptable.
/// 
///     By default, QLineEdits have a frame as specified by platform
///     style guides; you can turn it off by calling
///     setFrame(false).
/// 
///     The default key bindings are described below. The line edit also
///     provides a context menu (usually invoked by a right mouse click)
///     that presents some of these editing options.
///     \target desc
///     \table
///     \header \li Keypress \li Action
///     \row \li Left Arrow \li Moves the cursor one character to the left.
///     \row \li Shift+Left Arrow \li Moves and selects text one character to the left.
///     \row \li Right Arrow \li Moves the cursor one character to the right.
///     \row \li Shift+Right Arrow \li Moves and selects text one character to the right.
///     \row \li Home \li Moves the cursor to the beginning of the line.
///     \row \li End \li Moves the cursor to the end of the line.
///     \row \li Backspace \li Deletes the character to the left of the cursor.
///     \row \li Ctrl+Backspace \li Deletes the word to the left of the cursor.
///     \row \li Delete \li Deletes the character to the right of the cursor.
///     \row \li Ctrl+Delete \li Deletes the word to the right of the cursor.
///     \row \li Ctrl+A \li Select all.
///     \row \li Ctrl+C \li Copies the selected text to the clipboard.
///     \row \li Ctrl+Insert \li Copies the selected text to the clipboard.
///     \row \li Ctrl+K \li Deletes to the end of the line.
///     \row \li Ctrl+V \li Pastes the clipboard text into line edit.
///     \row \li Shift+Insert \li Pastes the clipboard text into line edit.
///     \row \li Ctrl+X \li Deletes the selected text and copies it to the clipboard.
///     \row \li Shift+Delete \li Deletes the selected text and copies it to the clipboard.
///     \row \li Ctrl+Z \li Undoes the last operation.
///     \row \li Ctrl+Y \li Redoes the last undone operation.
///     \endtable
/// 
///     Any other key sequence that represents a valid character, will
///     cause the character to be inserted into the line edit.
/// 
///     \sa QTextEdit, QLabel, QComboBox, {fowler}{GUI Design Handbook: Field, Entry}, {Line Edits Example}
[org_name(QLineEdit)]
enum ActionPosition {
    LeadingPosition,
    TrailingPosition,
}

[org_name(QLineEdit)]
enum EchoMode {
    Normal,
    NoEcho,
    Password,
    PasswordEchoOnEdit,
}

struct LineEdit : Widget {
    text() -> String,
    display_text() -> String,
    placeholder_text() -> String,
    set_placeholder_text(arg0: String),
    max_length() -> i32,
    set_max_length(arg0: i32),
    set_frame(arg0: bool),
    has_frame() -> bool,
    set_clear_button_enabled(enable: bool),
    is_clear_button_enabled() -> bool,
    echo_mode() -> LineEdit::EchoMode,
    set_echo_mode(arg0: LineEdit::EchoMode),
    is_read_only() -> bool,
    set_read_only(arg0: bool),
    set_validator(arg0: *ValidatorType),
    validator() -> Validator?,
    set_completer(completer: *CompleterType),
    completer() -> Completer?,
    [event] size_hint() -> Size,
    [event] minimum_size_hint() -> Size,
    cursor_position() -> i32,
    set_cursor_position(arg0: i32),
    cursor_position_at(pos: &PointType) -> i32,
    set_alignment(flag: Rute::Alignment),
    alignment() -> Rute::Alignment,
    cursor_forward(mark: bool, steps: i32),
    cursor_backward(mark: bool, steps: i32),
    cursor_word_forward(mark: bool),
    cursor_word_backward(mark: bool),
    backspace(),
    del(),
    home(mark: bool),
    end(mark: bool),
    is_modified() -> bool,
    set_modified(arg0: bool),
    set_selection(arg0: i32, arg1: i32),
    has_selected_text() -> bool,
    selected_text() -> String,
    selection_start() -> i32,
    selection_end() -> i32,
    selection_length() -> i32,
    is_undo_available() -> bool,
    is_redo_available() -> bool,
    set_drag_enabled(b: bool),
    drag_enabled() -> bool,
    set_cursor_move_style(style: Rute::CursorMoveStyle),
    cursor_move_style() -> Rute::CursorMoveStyle,
    input_mask() -> String,
    set_input_mask(input_mask: String),
    has_acceptable_input() -> bool,
    set_text_margins(left: i32, top: i32, right: i32, bottom: i32),
    set_text_margins(margins: &MarginsType),
    get_text_margins(left: *i32, top: *i32, right: *i32, bottom: *i32),
    text_margins() -> Margins,
    add_action(action: *ActionType, position: LineEdit::ActionPosition),
    add_action(icon: &IconType, position: LineEdit::ActionPosition) -> Action?,
    set_text(arg0: String),
    clear(),
    select_all(),
    undo(),
    redo(),
    cut(),
    copy(),
    paste(),
    deselect(),
    insert(arg0: String),
    create_standard_context_menu() -> Menu?,
    [signal] text_changed(arg0: String),
    [signal] text_edited(arg0: String),
    [signal] cursor_position_changed(arg0: i32, arg1: i32),
    [signal] return_pressed(),
    [signal] editing_finished(),
    [signal] selection_changed(),
    [event] mouse_press_event(arg0: *MouseEventType),
    [event] mouse_move_event(arg0: *MouseEventType),
    [event] mouse_release_event(arg0: *MouseEventType),
    [event] mouse_double_click_event(arg0: *MouseEventType),
    [event] key_press_event(arg0: *KeyEventType),
    [event] focus_in_event(arg0: *FocusEventType),
    [event] focus_out_event(arg0: *FocusEventType),
    [event] paint_event(arg0: *PaintEventType),
    [event] drag_enter_event(arg0: *DragEnterEventType),
    [event] drag_move_event(e: *DragMoveEventType),
    [event] drag_leave_event(e: *DragLeaveEventType),
    [event] drop_event(arg0: *DropEventType),
    [event] change_event(arg0: *EventType),
    [event] context_menu_event(arg0: *ContextMenuEventType),
    [event] input_method_event(arg0: *InputMethodEventType),
    init_style_option(option: *StyleOptionFrameType),
    [event] input_method_query(arg0: Rute::InputMethodQuery) -> Variant,
    input_method_query(property: Rute::InputMethodQuery, argument: VariantType) -> Variant,
    [event] event(arg0: *EventType) -> bool,
    cursor_rect() -> Rect,
}

// vim: syntax=rust expandtab ts=4 sw=4
