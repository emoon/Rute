/// 
/// ![windows-lineedit.png](windows-lineedit.png)
/// 
/// A line edit allows the user to enter and edit a single line of
/// plain text with a useful collection of editing functions,
/// including undo and redo, cut and paste, and drag and drop (see
/// [setDragEnabled()).](setDragEnabled()).)
/// 
/// By changing the echoMode() of a line edit, it can also be used as
/// a field, for inputs such as passwords.
/// 
/// The length of the text can be constrained to maxLength(). The text
/// can be arbitrarily constrained using a validator() or an
/// inputMask(), or both. When switching between a validator and an input mask
/// on the same line edit, it is best to clear the validator or input mask to
/// prevent undefined behavior.
/// 
/// A related class is QTextEdit which allows multi-line, rich text
/// editing.
/// 
/// You can change the text with setText() or insert(). The text is
/// retrieved with text(); the displayed text (which may be different,
/// see [EchoMode](EchoMode)
/// ) is retrieved with displayText(). Text can be
/// selected with setSelection() or selectAll(), and the selection can
/// be cut(), copy()ied and paste()d. The text can be aligned with
/// setAlignment().
/// 
/// When the text changes the textChanged() signal is emitted; when
/// the text changes other than by calling setText() the textEdited()
/// signal is emitted; when the cursor is moved the
/// cursorPositionChanged() signal is emitted; and when the Return or
/// Enter key is pressed the returnPressed() signal is emitted.
/// 
/// When editing is finished, either because the line edit lost focus
/// or Return/Enter is pressed the editingFinished() signal is
/// emitted.
/// 
/// Note that if there is a validator set on the line edit, the
/// returnPressed()/editingFinished() signals will only be emitted if
/// the validator returns QValidator::Acceptable.
/// 
/// By default, QLineEdits have a frame as specified by platform
/// style guides; you can turn it off by calling
/// setFrame(false).
/// 
/// The default key bindings are described below. The line edit also
/// provides a context menu (usually invoked by a right mouse click)
/// that presents some of these editing options.
/// * Keypress
/// * Action
/// * Left Arrow
/// * Moves the cursor one character to the left.
/// * Shift+Left Arrow
/// * Moves and selects text one character to the left.
/// * Right Arrow
/// * Moves the cursor one character to the right.
/// * Shift+Right Arrow
/// * Moves and selects text one character to the right.
/// * Home
/// * Moves the cursor to the beginning of the line.
/// * End
/// * Moves the cursor to the end of the line.
/// * Backspace
/// * Deletes the character to the left of the cursor.
/// * Ctrl+Backspace
/// * Deletes the word to the left of the cursor.
/// * Delete
/// * Deletes the character to the right of the cursor.
/// * Ctrl+Delete
/// * Deletes the word to the right of the cursor.
/// * Ctrl+A
/// * Select all.
/// * Ctrl+C
/// * Copies the selected text to the clipboard.
/// * Ctrl+Insert
/// * Copies the selected text to the clipboard.
/// * Ctrl+K
/// * Deletes to the end of the line.
/// * Ctrl+V
/// * Pastes the clipboard text into line edit.
/// * Shift+Insert
/// * Pastes the clipboard text into line edit.
/// * Ctrl+X
/// * Deletes the selected text and copies it to the clipboard.
/// * Shift+Delete
/// * Deletes the selected text and copies it to the clipboard.
/// * Ctrl+Z
/// * Undoes the last operation.
/// * Ctrl+Y
/// * Redoes the last undone operation.
/// 
/// Any other key sequence that represents a valid character, will
/// cause the character to be inserted into the line edit.
/// 
/// **See also:** QTextEdit
/// QLabel
/// QComboBox
/// {fowler}{GUI Design Handbook: Field
/// Entry}
/// {Line Edits Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QLineEdit)]
enum ActionPosition {
    LeadingPosition,
    TrailingPosition,
}

[org_name(QLineEdit)]
enum EchoMode {
    Normal,
    NoEcho,
    Password,
    PasswordEchoOnEdit,
}

struct LineEdit : Widget {
    /// 
    /// This signal is emitted whenever the text changes. The *text*
    /// argument is the new text.
    /// 
    /// Unlike textEdited(), this signal is also emitted when the text is
    /// changed programmatically, for example, by calling setText().
    /// 
    /// This signal is emitted whenever the text is edited. The *text*
    /// argument is the new text.
    /// 
    /// Unlike textChanged(), this signal is not emitted when the text is
    /// changed programmatically, for example, by calling setText().
    /// 
    /// Setting this property clears the selection, clears the undo/redo
    /// history, moves the cursor to the end of the line and resets the
    /// [modified](modified)
    /// property to false. The text is not validated when
    /// inserted with setText().
    /// 
    /// The text is truncated to maxLength() length.
    /// 
    /// By default, this property contains an empty string.
    /// 
    /// **See also:** insert()
    /// clear()
    /// 
    /// Returns the widget's text margins.
    /// 
    /// **See also:** setTextMargins()
    text() -> String,
    /// 
    /// If [echoMode](echoMode)
    /// is [Normal](Normal)
    /// this returns the same as text(); if
    /// [EchoMode](EchoMode)
    /// is [Password](Password)
    /// or [PasswordEchoOnEdit](PasswordEchoOnEdit)
    /// it returns a string of
    /// platform-dependent password mask characters text().length() in size,
    /// e.g. ; if [EchoMode](EchoMode)
    /// is [NoEcho](NoEcho)
    /// returns an empty string, .
    /// 
    /// By default, this property contains an empty string.
    /// 
    /// **See also:** setEchoMode()
    /// text()
    /// EchoMode
    display_text() -> String,
    /// 
    /// Setting this property makes the line edit display a grayed-out
    /// placeholder text as long as the line edit is empty.
    /// 
    /// Normally, an empty line edit shows the placeholder text even
    /// when it has focus. However, if the content is horizontally
    /// centered, the placeholder text is not displayed under
    /// the cursor when the line edit has focus.
    /// 
    /// By default, this property contains an empty string.
    /// 
    /// **See also:** text()
    placeholder_text() -> String,
    set_placeholder_text(arg0: String),
    /// 
    /// If the text is too long, it is truncated at the limit.
    /// 
    /// If truncation occurs any selected text will be unselected, the
    /// cursor position is set to 0 and the first part of the string is
    /// shown.
    /// 
    /// If the line edit has an input mask, the mask defines the maximum
    /// string length.
    /// 
    /// By default, this property contains a value of 32767.
    /// 
    /// **See also:** inputMask
    max_length() -> i32,
    set_max_length(arg0: i32),
    set_frame(arg0: bool),
    has_frame() -> bool,
    set_clear_button_enabled(enable: bool),
    is_clear_button_enabled() -> bool,
    /// 
    /// The echo mode determines how the text entered in the line edit is
    /// displayed (or echoed) to the user.
    /// 
    /// The most common setting is [Normal,](Normal,)
    /// in which the text entered by the
    /// user is displayed verbatim, but QLineEdit also supports modes that allow
    /// the entered text to be suppressed or obscured: these include [NoEcho,](NoEcho,)
    /// 
    /// [Password](Password)
    /// and [PasswordEchoOnEdit.](PasswordEchoOnEdit.)
    /// 
    /// The widget's display and the ability to copy or drag the text is
    /// affected by this setting.
    /// 
    /// By default, this property is set to [Normal.](Normal.)
    /// 
    /// **See also:** EchoMode
    /// displayText()
    echo_mode() -> LineEdit::EchoMode,
    set_echo_mode(arg0: LineEdit::EchoMode),
    is_read_only() -> bool,
    set_read_only(arg0: bool),
    /// 
    /// Sets this line edit to only accept input that the validator, *v,*
    /// will accept. This allows you to place any arbitrary constraints on
    /// the text which may be entered.
    /// 
    /// If *v* == 0, setValidator() removes the current input validator.
    /// The initial setting is to have no input validator (i.e. any input
    /// is accepted up to maxLength()).
    /// 
    /// **See also:** validator()
    /// hasAcceptableInput()
    /// QIntValidator
    /// QDoubleValidator
    /// QRegExpValidator
    set_validator(arg0: *ValidatorType),
    /// 
    /// Returns a pointer to the current input validator, or 0 if no
    /// validator has been set.
    /// 
    /// **See also:** setValidator()
    validator() -> Validator?,
    /// 
    /// Sets this line edit to provide auto completions from the completer, *c.*
    /// The completion mode is set using QCompleter::setCompletionMode().
    /// 
    /// To use a QCompleter with a QValidator or QLineEdit::inputMask, you need to
    /// ensure that the model provided to QCompleter contains valid entries. You can
    /// use the QSortFilterProxyModel to ensure that the QCompleter's model contains
    /// only valid entries.
    /// 
    /// If *c* == 0, setCompleter() removes the current completer, effectively
    /// disabling auto completion.
    /// 
    /// **See also:** QCompleter
    set_completer(completer: *CompleterType),
    /// 
    /// Returns the current QCompleter that provides completions.
    completer() -> Completer?,
    /// 
    /// Returns a recommended size for the widget.
    /// 
    /// The width returned, in pixels, is usually enough for about 15 to
    /// 20 characters.
    [event] size_hint() -> Size,
    /// 
    /// Returns a minimum size for the line edit.
    /// 
    /// The width returned is enough for at least one character.
    [event] minimum_size_hint() -> Size,
    /// 
    /// This signal is emitted whenever the cursor moves. The previous
    /// position is given by *oldPos,* and the new position by *newPos.*
    /// 
    /// **See also:** setCursorPosition()
    /// cursorPosition()
    /// 
    /// Setting the cursor position causes a repaint when appropriate.
    /// 
    /// By default, this property contains a value of 0.
    /// 
    /// Returns the cursor position under the point *pos.*
    cursor_position() -> i32,
    set_cursor_position(arg0: i32),
    /// 
    /// Returns the cursor position under the point *pos.*
    cursor_position_at(pos: &PointType) -> i32,
    set_alignment(flag: Rute::Alignment),
    /// 
    /// Both horizontal and vertical alignment is allowed here, Qt::AlignJustify
    /// will map to Qt::AlignLeft.
    /// 
    /// By default, this property contains a combination of Qt::AlignLeft and Qt::AlignVCenter.
    /// 
    /// **See also:** Qt::Alignment
    alignment() -> Rute::Alignment,
    /// 
    /// Moves the cursor forward *steps* characters. If *mark* is true
    /// each character moved over is added to the selection; if *mark* is
    /// false the selection is cleared.
    /// 
    /// **See also:** cursorBackward()
    cursor_forward(mark: bool, steps: i32),
    /// 
    /// Moves the cursor back *steps* characters. If *mark* is true each
    /// character moved over is added to the selection; if *mark* is
    /// false the selection is cleared.
    /// 
    /// **See also:** cursorForward()
    cursor_backward(mark: bool, steps: i32),
    /// 
    /// Moves the cursor one word forward. If *mark* is true, the word is
    /// also selected.
    /// 
    /// **See also:** cursorWordBackward()
    cursor_word_forward(mark: bool),
    /// 
    /// Moves the cursor one word backward. If *mark* is true, the word
    /// is also selected.
    /// 
    /// **See also:** cursorWordForward()
    cursor_word_backward(mark: bool),
    /// 
    /// If no text is selected, deletes the character to the left of the
    /// text cursor and moves the cursor one position to the left. If any
    /// text is selected, the cursor is moved to the beginning of the
    /// selected text and the selected text is deleted.
    /// 
    /// **See also:** del()
    backspace(),
    /// 
    /// If no text is selected, deletes the character to the right of the
    /// text cursor. If any text is selected, the cursor is moved to the
    /// beginning of the selected text and the selected text is deleted.
    /// 
    /// **See also:** backspace()
    del(),
    /// 
    /// Moves the text cursor to the beginning of the line unless it is
    /// already there. If *mark* is true, text is selected towards the
    /// first position; otherwise, any selected text is unselected if the
    /// cursor is moved.
    /// 
    /// **See also:** end()
    home(mark: bool),
    /// 
    /// Moves the text cursor to the end of the line unless it is already
    /// there. If *mark* is true, text is selected towards the last
    /// position; otherwise, any selected text is unselected if the cursor
    /// is moved.
    /// 
    /// **See also:** home()
    end(mark: bool),
    is_modified() -> bool,
    set_modified(arg0: bool),
    /// 
    /// Selects text from position *start* and for *length* characters.
    /// Negative lengths are allowed.
    /// 
    /// **See also:** deselect()
    /// selectAll()
    /// selectedText()
    set_selection(arg0: i32, arg1: i32),
    /// 
    /// hasSelectedText() returns `true` if some or all of the text has been
    /// selected by the user; otherwise returns `false.`
    /// 
    /// By default, this property is `false.`
    /// 
    /// **See also:** selectedText()
    has_selected_text() -> bool,
    /// 
    /// If there is no selected text this property's value is
    /// an empty string.
    /// 
    /// By default, this property contains an empty string.
    /// 
    /// **See also:** hasSelectedText()
    selected_text() -> String,
    /// 
    /// Returns the index of the first selected character in the
    /// line edit or -1 if no text is selected.
    /// 
    /// **See also:** selectedText()
    /// **See also:** selectionEnd()
    /// **See also:** selectionLength()
    selection_start() -> i32,
    /// 
    /// Returns the index of the character directly after the selection
    /// in the line edit or -1 if no text is selected.
    /// 
    /// **See also:** selectedText()
    /// **See also:** selectionStart()
    /// **See also:** selectionLength()
    selection_end() -> i32,
    /// 
    /// Returns the length of the selection.
    /// 
    /// **See also:** selectedText()
    /// **See also:** selectionStart()
    /// **See also:** selectionEnd()
    selection_length() -> i32,
    is_undo_available() -> bool,
    is_redo_available() -> bool,
    set_drag_enabled(b: bool),
    /// 
    /// Dragging is disabled by default.
    drag_enabled() -> bool,
    set_cursor_move_style(style: Rute::CursorMoveStyle),
    /// 
    /// When this property is set to Qt::VisualMoveStyle, the line edit will use visual
    /// movement style. Pressing the left arrow key will always cause the cursor to move
    /// left, regardless of the text's writing direction. The same behavior applies to
    /// right arrow key.
    /// 
    /// When the property is Qt::LogicalMoveStyle (the default), within a LTR text block,
    /// increase cursor position when pressing left arrow key, decrease cursor position
    /// when pressing the right arrow key. If the text block is right to left, the opposite
    /// behavior applies.
    cursor_move_style() -> Rute::CursorMoveStyle,
    /// 
    /// If no mask is set, inputMask() returns an empty string.
    /// 
    /// Sets the QLineEdit's validation mask. Validators can be used
    /// instead of, or in conjunction with masks; see setValidator().
    /// 
    /// Unset the mask and return to normal QLineEdit operation by passing
    /// an empty string ("").
    /// 
    /// The table below shows the characters that can be used in an input mask.
    /// A space character, the default character for a blank, is needed for cases
    /// where a character is *permitted but not required* .
    /// 
    /// * Character
    /// * Meaning
    /// * `A`
    /// * ASCII alphabetic character required. A-Z, a-z.
    /// * `a`
    /// * ASCII alphabetic character permitted but not required.
    /// * `N`
    /// * ASCII alphanumeric character required. A-Z, a-z, 0-9.
    /// * `n`
    /// * ASCII alphanumeric character permitted but not required.
    /// * `X`
    /// * Any character required.
    /// * `x`
    /// * Any character permitted but not required.
    /// * `9`
    /// * ASCII digit required. 0-9.
    /// * `0`
    /// * ASCII digit permitted but not required.
    /// * `D`
    /// * ASCII digit required. 1-9.
    /// * `d`
    /// * ASCII digit permitted but not required (1-9).
    /// * `#`
    /// * ASCII digit or plus/minus sign permitted but not required.
    /// * `H`
    /// * Hexadecimal character required. A-F, a-f, 0-9.
    /// * `h`
    /// * Hexadecimal character permitted but not required.
    /// * `B`
    /// * Binary character required. 0-1.
    /// * `b`
    /// * Binary character permitted but not required.
    /// * `>`
    /// * All following alphabetic characters are uppercased.
    /// * `<`
    /// * All following alphabetic characters are lowercased.
    /// * `!`
    /// * Switch off case conversion.
    /// * `[ ] {` }
    /// * Reserved.
    /// * `\\`
    /// * Use `\\` to escape the special characters listed above to use them as separators.
    /// 
    /// The mask consists of a string of mask characters and separators,
    /// optionally followed by a semicolon and the character used for
    /// blanks. The blank characters are always removed from the text
    /// after editing.
    /// 
    /// Examples:
    /// * Mask
    /// * Notes
    /// * `000.000.000.000;_`
    /// * IP address; blanks are `_` .
    /// * `HH:HH:HH:HH:HH:HH;_`
    /// * MAC address
    /// * `0000-00-00`
    /// * ISO Date; blanks are `space`
    /// * `>AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;#`
    /// * License number; blanks are `-` and all (alphabetic) characters are converted to uppercase.
    /// 
    /// To get range control (e.g., for an IP address) use masks together
    /// with [validators](setValidator())
    /// 
    /// 
    /// **See also:** maxLength
    input_mask() -> String,
    set_input_mask(input_mask: String),
    has_acceptable_input() -> bool,
    /// 
    /// Sets the margins around the text inside the frame to have the
    /// sizes *left,* *top,* *right,* and *bottom.*
    /// 
    /// See also getTextMargins().
    /// 
    /// Sets the *margins* around the text inside the frame.
    /// 
    /// See also textMargins().
    set_text_margins(left: i32, top: i32, right: i32, bottom: i32),
    /// 
    /// Sets the margins around the text inside the frame to have the
    /// sizes *left,* *top,* *right,* and *bottom.*
    /// 
    /// See also getTextMargins().
    /// 
    /// Sets the *margins* around the text inside the frame.
    /// 
    /// See also textMargins().
    set_text_margins_2(margins: &MarginsType),
    /// 
    /// Returns the widget's text margins for *left,* *top,* *right,* and *bottom.*
    /// 
    /// **See also:** setTextMargins()
    get_text_margins(left: *i32, top: *i32, right: *i32, bottom: *i32),
    /// 
    /// Returns the widget's text margins.
    /// 
    /// **See also:** setTextMargins()
    text_margins() -> Margins,
    /// 
    /// **Overloads**
    /// Adds the *action* to the list of actions at the *position.*
    /// 
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* at the *position.*
    /// 
    add_action(action: *ActionType, position: LineEdit::ActionPosition),
    /// 
    /// **Overloads**
    /// Adds the *action* to the list of actions at the *position.*
    /// 
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* at the *position.*
    /// 
    add_action_2(icon: &IconType, position: LineEdit::ActionPosition) -> Action?,
    /// 
    /// Sets the margins around the text inside the frame to have the
    /// sizes *left,* *top,* *right,* and *bottom.*
    /// 
    /// See also getTextMargins().
    /// 
    /// Sets the *margins* around the text inside the frame.
    /// 
    /// See also textMargins().
    set_text(arg0: String),
    /// 
    /// If enabled, the line edit displays a trailing *clear* button when it contains
    /// some text, otherwise the line edit does not show a clear button (the
    /// default).
    /// 
    /// **See also:** addAction()
    /// removeAction()
    /// 
    /// Clears the contents of the line edit.
    /// 
    /// **See also:** setText()
    /// insert()
    clear(),
    /// 
    /// Selects all the text (i.e. highlights it) and moves the cursor to
    /// the end. This is useful when a default value has been inserted
    /// because if the user types before clicking on the widget, the
    /// selected text will be deleted.
    /// 
    /// **See also:** setSelection()
    /// deselect()
    select_all(),
    /// 
    /// Undo becomes available once the user has modified the text in the line edit.
    /// 
    /// By default, this property is `false.`
    /// 
    /// Undoes the last operation if undo is [available](QLineEdit::undoAvailable)
    /// . Deselects any current
    /// selection, and updates the selection start to the current cursor
    /// position.
    undo(),
    /// 
    /// Redo becomes available once the user has performed one or more undo operations
    /// on text in the line edit.
    /// 
    /// By default, this property is `false.`
    /// 
    /// Redoes the last operation if redo is [available](QLineEdit::redoAvailable)
    /// 
    redo(),
    /// 
    /// Copies the selected text to the clipboard and deletes it, if there
    /// is any, and if echoMode() is [Normal.](Normal.)
    /// 
    /// If the current validator disallows deleting the selected text,
    /// cut() will copy without deleting.
    /// 
    /// **See also:** copy()
    /// paste()
    /// setValidator()
    cut(),
    /// 
    /// Copies the selected text to the clipboard, if there is any, and if
    /// echoMode() is [Normal.](Normal.)
    /// 
    /// **See also:** cut()
    /// paste()
    copy(),
    /// 
    /// Inserts the clipboard's text at the cursor position, deleting any
    /// selected text, providing the line edit is not [read-only](QLineEdit::readOnly)
    /// 
    /// 
    /// If the end result would not be acceptable to the current
    /// [validator](setValidator())
    /// , nothing happens.
    /// 
    /// **See also:** copy()
    /// cut()
    paste(),
    /// 
    /// Deselects any selected text.
    /// 
    /// **See also:** setSelection()
    /// selectAll()
    deselect(),
    /// 
    /// Deletes any selected text, inserts *newText,* and validates the
    /// result. If it is valid, it sets it as the new contents of the line
    /// edit.
    /// 
    /// **See also:** setText()
    /// clear()
    insert(arg0: String),
    /// This function creates the standard context menu which is shown
    /// when the user clicks on the line edit with the right mouse
    /// button. It is called from the default contextMenuEvent() handler.
    /// The popup menu's ownership is transferred to the caller.
    create_standard_context_menu() -> Menu?,
    /// 
    /// This signal is emitted whenever the text changes. The *text*
    /// argument is the new text.
    /// 
    /// Unlike textEdited(), this signal is also emitted when the text is
    /// changed programmatically, for example, by calling setText().
    [signal] text_changed(arg0: String),
    /// 
    /// This signal is emitted whenever the text is edited. The *text*
    /// argument is the new text.
    /// 
    /// Unlike textChanged(), this signal is not emitted when the text is
    /// changed programmatically, for example, by calling setText().
    [signal] text_edited(arg0: String),
    /// 
    /// This signal is emitted whenever the cursor moves. The previous
    /// position is given by *oldPos,* and the new position by *newPos.*
    /// 
    /// **See also:** setCursorPosition()
    /// cursorPosition()
    [signal] cursor_position_changed(arg0: i32, arg1: i32),
    /// 
    /// This signal is emitted when the Return or Enter key is pressed.
    /// Note that if there is a validator() or inputMask() set on the line
    /// edit, the returnPressed() signal will only be emitted if the input
    /// follows the inputMask() and the validator() returns
    /// QValidator::Acceptable.
    [signal] return_pressed(),
    /// 
    /// This signal is emitted when the Return or Enter key is pressed or
    /// the line edit loses focus. Note that if there is a validator() or
    /// inputMask() set on the line edit and enter/return is pressed, the
    /// editingFinished() signal will only be emitted if the input follows
    /// the inputMask() and the validator() returns QValidator::Acceptable.
    [signal] editing_finished(),
    /// 
    /// This signal is emitted whenever the selection changes.
    /// 
    /// **See also:** hasSelectedText()
    /// selectedText()
    [signal] selection_changed(),
    /// 
    [event] mouse_press_event(arg0: *MouseEventType),
    /// 
    [event] mouse_move_event(arg0: *MouseEventType),
    /// 
    [event] mouse_release_event(arg0: *MouseEventType),
    /// 
    [event] mouse_double_click_event(arg0: *MouseEventType),
    /// 
    /// Converts the given key press *event* into a line edit action.
    /// 
    /// If Return or Enter is pressed and the current text is valid (or
    /// can be [made valid](QValidator::fixup())
    /// by the
    /// validator), the signal returnPressed() is emitted.
    /// 
    /// The default key bindings are listed in the class's detailed
    /// description.
    [event] key_press_event(arg0: *KeyEventType),
    /// 
    [event] focus_in_event(arg0: *FocusEventType),
    /// 
    [event] focus_out_event(arg0: *FocusEventType),
    /// 
    [event] paint_event(arg0: *PaintEventType),
    /// 
    [event] drag_enter_event(arg0: *DragEnterEventType),
    /// 
    [event] drag_move_event(e: *DragMoveEventType),
    /// 
    [event] drag_leave_event(e: *DragLeaveEventType),
    /// 
    [event] drop_event(arg0: *DropEventType),
    /// 
    [event] change_event(arg0: *EventType),
    /// 
    /// Shows the standard context menu created with
    /// createStandardContextMenu().
    /// 
    /// If you do not want the line edit to have a context menu, you can set
    /// its [contextMenuPolicy](contextMenuPolicy)
    /// to Qt::NoContextMenu. If you want to
    /// customize the context menu, reimplement this function. If you want
    /// to extend the standard context menu, reimplement this function, call
    /// createStandardContextMenu() and extend the menu returned.
    /// 
    /// The *event* parameter is used to obtain the position where
    /// the mouse cursor was when the event was generated.
    /// 
    /// **See also:** setContextMenuPolicy()
    [event] context_menu_event(arg0: *ContextMenuEventType),
    /// 
    [event] input_method_event(arg0: *InputMethodEventType),
    /// 
    /// Initialize *option* with the values from this QLineEdit. This method
    /// is useful for subclasses when they need a QStyleOptionFrame, but don't want
    /// to fill in all the information themselves.
    /// 
    /// **See also:** QStyleOption::initFrom()
    init_style_option(option: *StyleOptionFrameType),
    /// 
    [event] input_method_query(arg0: Rute::InputMethodQuery) -> Variant,
    /// 
    input_method_query_2(property: Rute::InputMethodQuery, argument: VariantType) -> Variant,
    /// 
    [event] event(arg0: *EventType) -> bool,
    /// 
    /// Returns a rectangle that includes the lineedit cursor.
    cursor_rect() -> Rect,
}

// vim: syntax=rust expandtab ts=4 sw=4
