/// 
/// QStyleOptionMenuItem contains all the information that QStyle
/// functions need to draw the menu items from [QMenu.](QMenu.)
/// It is also
/// used for drawing other menu-related widgets.
/// 
/// For performance reasons, the access to the member variables is
/// direct (i.e., using the `.` or `->` operator). This low-level feel
/// makes the structures straightforward to use and emphasizes that
/// these are simply parameters used by the style functions.
/// 
/// For an example demonstrating how style options can be used, see
/// the [Styles](widgets/styles)
/// example.
/// 
/// **See also:** [`StyleOption`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct StyleOptionMenuItem : StyleOption {
}

[org_name(QStyleOptionMenuItem)]
enum StyleOptionType {
    /// The type of style option provided ( [SO_MenuItem](SO_MenuItem)
 for this class). The type is used internally by QStyleOption, its subclasses, and qstyleoption_cast() to determine the type of style option. In general you do not need to worry about this unless you want to create your own QStyleOption subclass and your own styles.
    Type,
}

[org_name(QStyleOptionMenuItem)]
enum StyleOptionVersion {
    /// 1 The version is used by QStyleOption subclasses to implement extensions without breaking compatibility. If you use qstyleoption_cast(), you normally do not need to check it.
    Version,
}

[org_name(QStyleOptionMenuItem)]
enum MenuItemType {
    /// A normal menu item.
    Normal,
    /// A menu item that is the default action as specified with [QMenu::defaultAction().](QMenu::defaultAction().)

    DefaultItem,
    /// A menu separator.
    Separator,
    /// Indicates the menu item points to a sub-menu.
    SubMenu,
    /// A popup menu scroller (currently only used on MacOS ).
    Scroller,
    /// A tear-off handle for the menu.
    TearOff,
    /// The margin of the menu.
    Margin,
    /// The empty area of the menu.
    EmptyArea,
}

[org_name(QStyleOptionMenuItem)]
enum CheckType {
    /// The item is not checkable.
    NotCheckable,
    /// The item is an exclusive check item (like a radio button).
    Exclusive,
    /// The item is a non-exclusive check item (like a check box).
    NonExclusive,
}

// vim: syntax=rust expandtab ts=4 sw=4
