/// 
/// QStackedWidget can be used to create a user interface similar to
/// the one provided by QTabWidget. It is a convenience layout widget
/// built on top of the QStackedLayout class.
/// 
/// Like QStackedLayout, QStackedWidget can be constructed and
/// populated with a number of child widgets ("pages"):
/// 
/// QStackedWidget provides no intrinsic means for the user to switch
/// page. This is typically done through a QComboBox or a QListWidget
/// that stores the titles of the QStackedWidget's pages. For
/// example:
/// 
/// When populating a stacked widget, the widgets are added to an
/// internal list. The indexOf() function returns the index of a
/// widget in that list. The widgets can either be added to the end of
/// the list using the addWidget() function, or inserted at a given
/// index using the insertWidget() function. The removeWidget()
/// function removes a widget from the stacked widget. The number of
/// widgets contained in the stacked widget can
/// be obtained using the count() function.
/// 
/// The widget() function returns the widget at a given index
/// position. The index of the widget that is shown on screen is given
/// by currentIndex() and can be changed using setCurrentIndex(). In a
/// similar manner, the currently shown widget can be retrieved using
/// the currentWidget() function, and altered using the
/// setCurrentWidget() function.
/// 
/// Whenever the current widget in the stacked widget changes or a
/// widget is removed from the stacked widget, the currentChanged()
/// and widgetRemoved() signals are emitted respectively.
/// 
/// **See also:** [`StackedLayout`]
/// [`TabWidget`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct StackedWidget : Frame {
    /// 
    /// Appends the given *widget* to the QStackedWidget and returns the
    /// index position. Ownership of *widget* is passed on to the
    /// QStackedWidget.
    /// 
    /// If the QStackedWidget is empty before this function is called,
    /// *widget* becomes the current widget.
    /// 
    /// **See also:** [`insert_widget()`]
    /// [`remove_widget()`]
    /// [`set_current_widget()`]
    add_widget(w: *WidgetType) -> i32,
    /// 
    /// Inserts the given *widget* at the given *index* in the
    /// QStackedWidget. Ownership of *widget* is passed on to the
    /// QStackedWidget. If *index* is out of range, the *widget* is
    /// appended (in which case it is the actual index of the *widget*
    /// that is returned).
    /// 
    /// If the QStackedWidget was empty before this function is called,
    /// the given *widget* becomes the current widget.
    /// 
    /// Inserting a new widget at an index less than or equal to the current index
    /// will increment the current index, but keep the current widget.
    /// 
    /// **See also:** [`add_widget()`]
    /// [`remove_widget()`]
    /// [`set_current_widget()`]
    insert_widget(index: i32, w: *WidgetType) -> i32,
    /// 
    /// Removes *widget* from the QStackedWidget. i.e., *widget* is *not* deleted but simply removed from the stacked layout, causing it
    /// to be hidden.
    /// 
    /// **Note**: Parent object and parent widget of *widget* will remain the
    /// QStackedWidget. If the application wants to reuse the removed
    /// *widget,* then it is recommended to re-parent it.
    /// 
    /// **See also:** [`add_widget()`]
    /// [`insert_widget()`]
    /// [`current_widget()`]
    remove_widget(w: *WidgetType),
    /// 
    /// Returns the current widget, or 0 if there are no child widgets.
    /// 
    /// **See also:** [`current_index()`]
    /// [`set_current_widget()`]
    current_widget() -> Widget?,
    /// 
    /// The current index is -1 if there is no current widget.
    /// 
    /// By default, this property contains a value of -1 because the stack
    /// is initially empty.
    /// 
    /// **See also:** [`current_widget()`]
    /// [`index_of()`]
    current_index() -> i32,
    /// 
    /// Returns the index of the given *widget,* or -1 if the given *widget* is not a child of the QStackedWidget.
    /// 
    /// **See also:** [`current_index()`]
    /// [`widget()`]
    index_of(arg0: *WidgetType) -> i32,
    /// 
    /// This signal is emitted whenever a widget is removed. The widget's
    /// *index* is passed as parameter.
    /// 
    /// **See also:** [`remove_widget()`]
    /// 
    /// Returns the widget at the given *index,* or 0 if there is no such
    /// widget.
    /// 
    /// **See also:** [`current_widget()`]
    /// [`index_of()`]
    widget(arg0: i32) -> Widget?,
    /// 
    /// By default, this property contains a value of 0.
    /// 
    /// **See also:** [`current_index()`]
    /// [`widget()`]
    count() -> i32,
    set_current_index(index: i32),
    /// 
    /// Sets the current widget to be the specified *widget.* The new
    /// current widget must already be contained in this stacked widget.
    /// 
    /// **See also:** [`current_widget()`]
    /// [`set_current_index()`]
    set_current_widget(w: *WidgetType),
    /// 
    /// This signal is emitted whenever the current widget changes.
    /// 
    /// The parameter holds the *index* of the new current widget, or -1
    /// if there isn't a new one (for example, if there are no widgets in
    /// the QStackedWidget).
    /// 
    /// **See also:** [`current_widget()`]
    /// [`set_current_widget()`]
    [signal] current_changed(arg0: i32),
    /// 
    /// This signal is emitted whenever a widget is removed. The widget's
    /// *index* is passed as parameter.
    /// 
    /// **See also:** [`remove_widget()`]
    [signal] widget_removed(index: i32),
    /// 
    [event] event(e: *EventType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
