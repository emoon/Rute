struct ProxyStyle : CommonStyle {
    base_style() -> &StyleType,
    set_base_style(style: &StyleType),
    draw_primitive(element: Style::PrimitiveElement, option: &StyleOptionType, painter: &PainterType, widget: &WidgetType),
    draw_item_text(painter: &PainterType, rect: &RectType, flags: i32, pal: &PaletteType, enabled: bool, text: String, text_role: Palette::ColorRole),
    draw_item_pixmap(painter: &PainterType, rect: &RectType, alignment: i32, pixmap: &PixmapType),
    size_from_contents(type: Style::ContentsType, option: &StyleOptionType, size: &SizeType, widget: &WidgetType) -> SizeType,
    sub_element_rect(element: Style::SubElement, option: &StyleOptionType, widget: &WidgetType) -> RectType,
    item_text_rect(fm: &FontMetricsType, r: &RectType, flags: i32, enabled: bool, text: String) -> RectType,
    item_pixmap_rect(r: &RectType, flags: i32, pixmap: &PixmapType) -> RectType,
    style_hint(hint: Style::StyleHint, option: &StyleOptionType, widget: &WidgetType, return_data: &StyleHintReturnType) -> i32,
    layout_spacing(control1: SizePolicy::ControlType, control2: SizePolicy::ControlType, orientation: Rute::Orientation, option: &StyleOptionType, widget: &WidgetType) -> i32,
    standard_icon(standard_icon: Style::StandardPixmap, option: &StyleOptionType, widget: &WidgetType) -> IconType,
    standard_pixmap(standard_pixmap: Style::StandardPixmap, opt: &StyleOptionType, widget: &WidgetType) -> PixmapType,
    generated_icon_pixmap(icon_mode: Icon::Mode, pixmap: &PixmapType, opt: &StyleOptionType) -> PixmapType,
    standard_palette() -> PaletteType,
    polish(widget: &WidgetType),
    polish(pal: &PaletteType),
    polish(app: &ApplicationType),
    unpolish(widget: &WidgetType),
    unpolish(app: &ApplicationType),
    event(e: &EventType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
