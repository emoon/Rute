struct ProxyStyle : CommonStyle {
    base_style() -> Style?,
    set_base_style(style: *StyleType),
    [event] draw_primitive(element: Style::PrimitiveElement, option: *StyleOptionType, painter: *PainterType, widget: *WidgetType),
    [event] draw_item_text(painter: *PainterType, rect: &RectType, flags: i32, pal: &PaletteType, enabled: bool, text: String, text_role: Palette::ColorRole),
    [event] draw_item_pixmap(painter: *PainterType, rect: &RectType, alignment: i32, pixmap: &PixmapType),
    [event] size_from_contents(type: Style::ContentsType, option: *StyleOptionType, size: &SizeType, widget: *WidgetType) -> Size,
    [event] sub_element_rect(element: Style::SubElement, option: *StyleOptionType, widget: *WidgetType) -> Rect,
    [event] item_text_rect(fm: &FontMetricsType, r: &RectType, flags: i32, enabled: bool, text: String) -> Rect,
    [event] item_pixmap_rect(r: &RectType, flags: i32, pixmap: &PixmapType) -> Rect,
    [event] style_hint(hint: Style::StyleHint, option: *StyleOptionType, widget: *WidgetType, return_data: *StyleHintReturnType) -> i32,
    [event] layout_spacing(control1: SizePolicy::ControlType, control2: SizePolicy::ControlType, orientation: Rute::Orientation, option: *StyleOptionType, widget: *WidgetType) -> i32,
    [event] standard_icon(standard_icon: Style::StandardPixmap, option: *StyleOptionType, widget: *WidgetType) -> Icon,
    [event] standard_pixmap(standard_pixmap: Style::StandardPixmap, opt: *StyleOptionType, widget: *WidgetType) -> Pixmap,
    [event] generated_icon_pixmap(icon_mode: Icon::Mode, pixmap: &PixmapType, opt: *StyleOptionType) -> Pixmap,
    [event] standard_palette() -> Palette,
    [event] polish(widget: *WidgetType),
    [event] polish(pal: &PaletteType),
    [event] polish(app: *ApplicationType),
    [event] unpolish(widget: *WidgetType),
    [event] unpolish(app: *ApplicationType),
    [event] event(e: *EventType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
