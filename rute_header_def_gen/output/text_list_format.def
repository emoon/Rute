/// 
/// A list is composed of one or more items, represented as text blocks.
/// The list's format specifies the appearance of items in the list.
/// In particular, it determines the indentation and the style of each item.
/// 
/// The indentation of the items is an integer value that causes each item to
/// be offset from the left margin by a certain amount. This value is read with
/// indent() and set with setIndent().
/// 
/// The style used to decorate each item is set with setStyle() and can be read
/// with the style() function. The style controls the type of bullet points and
/// numbering scheme used for items in the list. Note that lists that use the
/// decimal numbering scheme begin counting at 1 rather than 0.
/// 
/// Style properties can be set to further configure the appearance of list
/// items; for example, the ListNumberPrefix and ListNumberSuffix properties
/// can be used to customize the numbers used in an ordered list so that they
/// appear as (1), (2), (3), etc.:
/// 
/// **See also:** [`TextList`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TextListFormat : TextFormat {
    /// 
    /// Returns `true` if this list format is valid; otherwise
    /// returns `false.`
    is_valid() -> bool,
    /// 
    /// Sets the list format's *style.*
    /// 
    /// **See also:** [`style()`]
    /// Style
    set_style(style: TextListFormat::Style),
    /// 
    /// Returns the list format's style.
    /// 
    /// **See also:** [`set_style()`]
    /// Style
    style() -> TextListFormat::Style,
    /// 
    /// Sets the list format's *indentation.*
    /// The indentation is multiplied by the QTextDocument::indentWidth
    /// property to get the effective indent in pixels.
    /// 
    /// **See also:** [`indent()`]
    set_indent(indent: i32),
    /// 
    /// Returns the list format's indentation.
    /// The indentation is multiplied by the QTextDocument::indentWidth
    /// property to get the effective indent in pixels.
    /// 
    /// **See also:** [`set_indent()`]
    indent() -> i32,
    /// 
    /// Sets the list format's number prefix to the string specified by
    /// *numberPrefix.* This can be used with all sorted list types. It does not
    /// have any effect on unsorted list types.
    /// 
    /// The default prefix is an empty string.
    /// 
    /// **See also:** [`number_prefix()`]
    set_number_prefix(number_prefix: String),
    /// 
    /// Returns the list format's number prefix.
    /// 
    /// **See also:** [`set_number_prefix()`]
    number_prefix() -> String,
    /// 
    /// Sets the list format's number suffix to the string specified by
    /// *numberSuffix.* This can be used with all sorted list types. It does not
    /// have any effect on unsorted list types.
    /// 
    /// The default suffix is .
    /// 
    /// **See also:** [`number_suffix()`]
    set_number_suffix(number_suffix: String),
    /// 
    /// Returns the list format's number suffix.
    /// 
    /// **See also:** [`set_number_suffix()`]
    number_suffix() -> String,
}

[org_name(QTextListFormat)]
enum Style {
    /// a filled circle
    ListDisc,
    /// an empty circle
    ListCircle,
    /// a filled square
    ListSquare,
    /// decimal values in ascending order
    ListDecimal,
    /// lower case Latin characters in alphabetical order
    ListLowerAlpha,
    /// upper case Latin characters in alphabetical order
    ListUpperAlpha,
    /// lower case roman numerals (supports up to 4999 items only)
    ListLowerRoman,
    /// upper case roman numerals (supports up to 4999 items only)
    ListUpperRoman,
    ListStyleUndefined,
}

// vim: syntax=rust expandtab ts=4 sw=4
