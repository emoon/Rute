///     \class QTextListFormat
///     \reentrant
/// 
///     \brief The QTextListFormat class provides formatting information for
///     lists in a QTextDocument.
///     \inmodule QtGui
/// 
///     \ingroup richtext-processing
///     \ingroup shared
/// 
///     A list is composed of one or more items, represented as text blocks.
///     The list's format specifies the appearance of items in the list.
///     In particular, it determines the indentation and the style of each item.
/// 
///     The indentation of the items is an integer value that causes each item to
///     be offset from the left margin by a certain amount. This value is read with
///     indent() and set with setIndent().
/// 
///     The style used to decorate each item is set with setStyle() and can be read
///     with the style() function. The style controls the type of bullet points and
///     numbering scheme used for items in the list. Note that lists that use the
///     decimal numbering scheme begin counting at 1 rather than 0.
/// 
///     Style properties can be set to further configure the appearance of list
///     items; for example, the ListNumberPrefix and ListNumberSuffix properties
///     can be used to customize the numbers used in an ordered list so that they
///     appear as (1), (2), (3), etc.:
/// 
///     \snippet textdocument-listitemstyles/mainwindow.cpp add a styled, ordered list
/// 
///     \sa QTextList
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QTextListFormat)]
enum Style {
    ListDisc,
    ListCircle,
    ListSquare,
    ListDecimal,
    ListLowerAlpha,
    ListUpperAlpha,
    ListLowerRoman,
    ListUpperRoman,
    ListStyleUndefined,
}

struct TextListFormat : TextFormat {
    is_valid() -> bool,
    set_style(style: TextListFormat::Style),
    style() -> TextListFormat::Style,
    set_indent(indent: i32),
    indent() -> i32,
    set_number_prefix(number_prefix: String),
    number_prefix() -> String,
    set_number_suffix(number_suffix: String),
    number_suffix() -> String,
}

// vim: syntax=rust expandtab ts=4 sw=4
