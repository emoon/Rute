/// 
/// The input value can be a string, a number or an item from a list. A label
/// must be set to tell the user what they should enter.
/// 
/// Five static convenience functions are provided: getText(), getMultiLineText(),
/// getInt(), getDouble(), and getItem(). All the functions can be used in a similar way,
/// for example:
/// 
/// The `ok` variable is set to true if the user clicks **OK;** otherwise, it
/// is set to false.
/// 
/// ![Input Dialogs](inputdialogs.png)
/// 
/// The [Standard Dialogs](dialogs/standarddialogs)
/// example shows how to use
/// QInputDialog as well as other built-in Qt dialogs.
/// 
/// **See also:** [`MessageBox`]
/// {Standard Dialogs Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct InputDialog : Dialog {
    set_input_mode(mode: InputDialog::InputMode),
    /// 
    /// This property helps determine which widget is used for entering input into
    /// the dialog.
    input_mode() -> InputDialog::InputMode,
    set_label_text(text: String),
    /// 
    label_text() -> String,
    /// 
    /// Sets the given *option* to be enabled if *on* is true;
    /// otherwise, clears the given *option.*
    /// 
    /// **See also:** options
    /// [`test_option()`]
    set_option(option: InputDialog::InputDialogOption, on: bool),
    /// 
    /// Returns `true` if the given *option* is enabled; otherwise, returns
    /// false.
    /// 
    /// **See also:** options
    /// [`set_option()`]
    test_option(option: InputDialog::InputDialogOption) -> bool,
    set_options(options: InputDialog::InputDialogOptions),
    /// 
    /// By default, all options are disabled.
    /// 
    /// **See also:** [`set_option()`]
    /// [`test_option()`]
    options() -> InputDialog::InputDialogOptions,
    set_text_value(text: String),
    /// 
    /// This property is only relevant when the input dialog is used in
    /// TextInput mode.
    /// 
    /// This signal is emitted whenever the text string changes in the dialog.
    /// The current string is specified by *text.*
    /// 
    /// This signal is only relevant when the input dialog is used in
    /// TextInput mode.
    /// 
    /// This signal is emitted whenever the user selects a text string by
    /// accepting the dialog; for example, by clicking the **{OK}** button.
    /// The selected string is specified by *text.*
    /// 
    /// This signal is only relevant when the input dialog is used in
    /// TextInput mode.
    text_value() -> String,
    set_text_echo_mode(mode: LineEdit::EchoMode),
    /// 
    /// This property is only relevant when the input dialog is used in
    /// TextInput mode.
    text_echo_mode() -> LineEdit::EchoMode,
    set_combo_box_editable(editable: bool),
    is_combo_box_editable() -> bool,
    set_combo_box_items(items: &[String]),
    /// 
    combo_box_items() -> [String],
    set_int_value(value: i32),
    /// 
    /// This property is only relevant when the input dialog is used in
    /// IntInput mode.
    /// 
    /// This signal is emitted whenever the integer value changes in the dialog.
    /// The current value is specified by *value.*
    /// 
    /// This signal is only relevant when the input dialog is used in
    /// IntInput mode.
    /// 
    /// This signal is emitted whenever the user selects a integer value by
    /// accepting the dialog; for example, by clicking the **{OK}** button.
    /// The selected value is specified by *value.*
    /// 
    /// This signal is only relevant when the input dialog is used in
    /// IntInput mode.
    int_value() -> i32,
    set_int_minimum(min: i32),
    /// 
    /// This property is only relevant when the input dialog is used in
    /// IntInput mode.
    int_minimum() -> i32,
    set_int_maximum(max: i32),
    /// 
    /// This property is only relevant when the input dialog is used in
    /// IntInput mode.
    int_maximum() -> i32,
    /// 
    /// Sets the range of integer values accepted by the dialog when used in
    /// IntInput mode, with minimum and maximum values specified by *min* and
    /// *max* respectively.
    set_int_range(min: i32, max: i32),
    set_int_step(step: i32),
    /// 
    /// This property is only relevant when the input dialog is used in
    /// IntInput mode.
    int_step() -> i32,
    set_double_value(value: double),
    /// 
    /// This property is only relevant when the input dialog is used in
    /// DoubleInput mode.
    /// 
    /// This signal is emitted whenever the double value changes in the dialog.
    /// The current value is specified by *value.*
    /// 
    /// This signal is only relevant when the input dialog is used in
    /// DoubleInput mode.
    /// 
    /// This signal is emitted whenever the user selects a double value by
    /// accepting the dialog; for example, by clicking the **{OK}** button.
    /// The selected value is specified by *value.*
    /// 
    /// This signal is only relevant when the input dialog is used in
    /// DoubleInput mode.
    double_value() -> double,
    set_double_minimum(min: double),
    /// 
    /// This property is only relevant when the input dialog is used in
    /// DoubleInput mode.
    double_minimum() -> double,
    set_double_maximum(max: double),
    /// 
    /// This property is only relevant when the input dialog is used in
    /// DoubleInput mode.
    double_maximum() -> double,
    /// 
    /// Sets the range of double precision floating point values accepted by the
    /// dialog when used in DoubleInput mode, with minimum and maximum values
    /// specified by *min* and *max* respectively.
    set_double_range(min: double, max: double),
    set_double_decimals(decimals: i32),
    /// 
    /// **See also:** [`DoubleSpinBox::set_decimals`]
    double_decimals() -> i32,
    set_ok_button_text(text: String),
    /// 
    ok_button_text() -> String,
    set_cancel_button_text(text: String),
    /// 
    cancel_button_text() -> String,
    /// 
    /// **Overloads**
    /// This function connects one of its signals to the slot specified by *receiver*
    /// and *member.* The specific signal depends on the arguments that are specified
    /// in *member.* These are:
    /// 
    /// * textValueSelected() if *member* has a QString for its first argument.
    /// * intValueSelected() if *member* has an int for its first argument.
    /// * doubleValueSelected() if *member* has a double for its first argument.
    /// * accepted() if *member* has NO arguments.
    /// 
    /// The signal will be disconnected from the slot when the dialog is closed.
    open(receiver: *ObjectType, member: *char),
    /// 
    [event] minimum_size_hint() -> Size,
    /// 
    [event] size_hint() -> Size,
    /// 
    [event] set_visible(visible: bool),
    /// 
    /// Static convenience function to get a string from the user.
    /// 
    /// *title* is the text which is displayed in the title bar of the dialog.
    /// *label* is the text which is shown to the user (it should say what should
    /// be entered).
    /// *text* is the default text which is placed in the line edit.
    /// *mode* is the echo mode the line edit will use.
    /// *inputMethodHints* is the input method hints that will be used in the
    /// edit widget if an input method is active.
    /// 
    /// If *ok* is nonnull *** *ok* will be set to true if the user pressed
    /// **OK** and to false if the user pressed **Cancel.** The dialog's parent
    /// is *parent.* The dialog will be modal and uses the specified widget
    /// *flags.*
    /// 
    /// If the dialog is accepted, this function returns the text in the dialog's
    /// line edit. If the dialog is rejected, a null QString is returned.
    /// 
    /// Use this static function like this:
    /// 
    /// **See also:** [`get_int()`]
    /// [`get_double()`]
    /// [`get_item()`]
    /// [`get_multi_line_text()`]
    [static] get_text(parent: *WidgetType, title: String, label: String, echo: LineEdit::EchoMode, text: String, ok: *bool, flags: Rute::WindowFlags, input_method_hints: Rute::InputMethodHints) -> String,
    /// 
    /// Static convenience function to get a multiline string from the user.
    /// 
    /// *title* is the text which is displayed in the title bar of the dialog.
    /// *label* is the text which is shown to the user (it should say what should
    /// be entered).
    /// *text* is the default text which is placed in the plain text edit.
    /// *inputMethodHints* is the input method hints that will be used in the
    /// edit widget if an input method is active.
    /// 
    /// If *ok* is nonnull *** *ok* will be set to true if the user pressed
    /// **OK** and to false if the user pressed **Cancel.** The dialog's parent
    /// is *parent.* The dialog will be modal and uses the specified widget
    /// *flags.*
    /// 
    /// If the dialog is accepted, this function returns the text in the dialog's
    /// plain text edit. If the dialog is rejected, a null QString is returned.
    /// 
    /// Use this static function like this:
    /// 
    /// **See also:** [`get_int()`]
    /// [`get_double()`]
    /// [`get_item()`]
    /// [`get_text()`]
    [static] get_multi_line_text(parent: *WidgetType, title: String, label: String, text: String, ok: *bool, flags: Rute::WindowFlags, input_method_hints: Rute::InputMethodHints) -> String,
    /// 
    /// Static convenience function to let the user select an item from a string
    /// list.
    /// 
    /// *title* is the text which is displayed in the title bar of the dialog.
    /// *label* is the text which is shown to the user (it should say what should
    /// be entered).
    /// *items* is the string list which is inserted into the combo box.
    /// *current* is the number of the item which should be the current item.
    /// *inputMethodHints* is the input method hints that will be used if the
    /// combo box is editable and an input method is active.
    /// 
    /// If *editable* is true the user can enter their own text; otherwise, the
    /// user may only select one of the existing items.
    /// 
    /// If *ok* is nonnull *** *ok* will be set to true if the user pressed
    /// **OK** and to false if the user pressed **Cancel.** The dialog's parent
    /// is *parent.* The dialog will be modal and uses the widget *flags.*
    /// 
    /// This function returns the text of the current item, or if *editable* is
    /// true, the current text of the combo box.
    /// 
    /// Use this static function like this:
    /// 
    /// **See also:** [`get_text()`]
    /// [`get_int()`]
    /// [`get_double()`]
    /// [`get_multi_line_text()`]
    [static] get_item(parent: *WidgetType, title: String, label: String, items: &[String], current: i32, editable: bool, ok: *bool, flags: Rute::WindowFlags, input_method_hints: Rute::InputMethodHints) -> String,
    /// 
    /// Static convenience function to get an integer input from the user.
    /// 
    /// *title* is the text which is displayed in the title bar of the dialog.
    /// *label* is the text which is shown to the user (it should say what should
    /// be entered).
    /// *value* is the default integer which the spinbox will be set to.
    /// *min* and *max* are the minimum and maximum values the user may choose.
    /// *step* is the amount by which the values change as the user presses the
    /// arrow buttons to increment or decrement the value.
    /// 
    /// If *ok* is nonnull * *ok* will be set to true if the user pressed **OK**
    /// and to false if the user pressed **Cancel.** The dialog's parent is
    /// *parent.* The dialog will be modal and uses the widget *flags.*
    /// 
    /// On success, this function returns the integer which has been entered by the
    /// user; on failure, it returns the initial *value.*
    /// 
    /// Use this static function like this:
    /// 
    /// **See also:** [`get_text()`]
    /// [`get_double()`]
    /// [`get_item()`]
    /// [`get_multi_line_text()`]
    /// 
    /// Static convenience function to get an integer input from the user.
    /// 
    /// *title* is the text which is displayed in the title bar of the dialog.
    /// *label* is the text which is shown to the user (it should say what should
    /// be entered).
    /// *value* is the default integer which the spinbox will be set to.
    /// *min* and *max* are the minimum and maximum values the user may choose.
    /// *step* is the amount by which the values change as the user presses the
    /// arrow buttons to increment or decrement the value.
    /// 
    /// If *ok* is nonnull * *ok* will be set to true if the user pressed **OK**
    /// and to false if the user pressed **Cancel.** The dialog's parent is
    /// *parent.* The dialog will be modal and uses the widget *flags.*
    /// 
    /// On success, this function returns the integer which has been entered by the
    /// user; on failure, it returns the initial *value.*
    /// 
    /// Use this static function like this:
    /// 
    /// **See also:** [`get_text()`]
    /// [`get_double()`]
    /// [`get_item()`]
    /// [`get_multi_line_text()`]
    [static] get_int(parent: *WidgetType, title: String, label: String, value: i32, min_value: i32, max_value: i32, step: i32, ok: *bool, flags: Rute::WindowFlags) -> i32,
    /// 
    /// Static convenience function to get a floating point number from the user.
    /// 
    /// *title* is the text which is displayed in the title bar of the dialog.
    /// *label* is the text which is shown to the user (it should say what should
    /// be entered).
    /// *value* is the default floating point number that the line edit will be
    /// set to.
    /// *min* and *max* are the minimum and maximum values the user may choose.
    /// *decimals* is the maximum number of decimal places the number may have.
    /// 
    /// If *ok* is nonnull, * *ok* will be set to true if the user pressed **OK**
    /// and to false if the user pressed **Cancel.** The dialog's parent is
    /// *parent.* The dialog will be modal and uses the widget *flags.*
    /// 
    /// This function returns the floating point number which has been entered by
    /// the user.
    /// 
    /// Use this static function like this:
    /// 
    /// **See also:** [`get_text()`]
    /// [`get_int()`]
    /// [`get_item()`]
    /// [`get_multi_line_text()`]
    /// 
    /// **Overloads**  Static convenience function to get a floating point number from the user.
    /// 
    /// *title* is the text which is displayed in the title bar of the dialog.
    /// *label* is the text which is shown to the user (it should say what should
    /// be entered).
    /// *value* is the default floating point number that the line edit will be
    /// set to.
    /// *min* and *max* are the minimum and maximum values the user may choose.
    /// *decimals* is the maximum number of decimal places the number may have.
    /// *step* is the amount by which the values change as the user presses the
    /// arrow buttons to increment or decrement the value.
    /// 
    /// If *ok* is nonnull, * *ok* will be set to true if the user pressed **OK**
    /// and to false if the user pressed **Cancel.** The dialog's parent is
    /// *parent.* The dialog will be modal and uses the widget *flags.*
    /// 
    /// This function returns the floating point number which has been entered by
    /// the user.
    /// 
    /// Use this static function like this:
    /// 
    /// **See also:** [`get_text()`]
    /// [`get_int()`]
    /// [`get_item()`]
    /// [`get_multi_line_text()`]
    [static] get_double(parent: *WidgetType, title: String, label: String, value: double, min_value: double, max_value: double, decimals: i32, ok: *bool, flags: Rute::WindowFlags) -> double,
    /// 
    /// Static convenience function to get a floating point number from the user.
    /// 
    /// *title* is the text which is displayed in the title bar of the dialog.
    /// *label* is the text which is shown to the user (it should say what should
    /// be entered).
    /// *value* is the default floating point number that the line edit will be
    /// set to.
    /// *min* and *max* are the minimum and maximum values the user may choose.
    /// *decimals* is the maximum number of decimal places the number may have.
    /// 
    /// If *ok* is nonnull, * *ok* will be set to true if the user pressed **OK**
    /// and to false if the user pressed **Cancel.** The dialog's parent is
    /// *parent.* The dialog will be modal and uses the widget *flags.*
    /// 
    /// This function returns the floating point number which has been entered by
    /// the user.
    /// 
    /// Use this static function like this:
    /// 
    /// **See also:** [`get_text()`]
    /// [`get_int()`]
    /// [`get_item()`]
    /// [`get_multi_line_text()`]
    /// 
    /// **Overloads**  Static convenience function to get a floating point number from the user.
    /// 
    /// *title* is the text which is displayed in the title bar of the dialog.
    /// *label* is the text which is shown to the user (it should say what should
    /// be entered).
    /// *value* is the default floating point number that the line edit will be
    /// set to.
    /// *min* and *max* are the minimum and maximum values the user may choose.
    /// *decimals* is the maximum number of decimal places the number may have.
    /// *step* is the amount by which the values change as the user presses the
    /// arrow buttons to increment or decrement the value.
    /// 
    /// If *ok* is nonnull, * *ok* will be set to true if the user pressed **OK**
    /// and to false if the user pressed **Cancel.** The dialog's parent is
    /// *parent.* The dialog will be modal and uses the widget *flags.*
    /// 
    /// This function returns the floating point number which has been entered by
    /// the user.
    /// 
    /// Use this static function like this:
    /// 
    /// **See also:** [`get_text()`]
    /// [`get_int()`]
    /// [`get_item()`]
    /// [`get_multi_line_text()`]
    [org_name(getDouble)]
    [static] get_double_2(parent: *WidgetType, title: String, label: String, value: double, min_value: double, max_value: double, decimals: i32, ok: *bool, flags: Rute::WindowFlags, step: double) -> double,
    set_double_step(step: double),
    /// 
    /// This property is only relevant when the input dialog is used in
    /// DoubleInput mode.
    double_step() -> double,
    /// 
    /// This signal is emitted whenever the text string changes in the dialog.
    /// The current string is specified by *text.*
    /// 
    /// This signal is only relevant when the input dialog is used in
    /// TextInput mode.
    [signal] text_value_changed(text: String),
    /// 
    /// This signal is emitted whenever the user selects a text string by
    /// accepting the dialog; for example, by clicking the **{OK}** button.
    /// The selected string is specified by *text.*
    /// 
    /// This signal is only relevant when the input dialog is used in
    /// TextInput mode.
    [signal] text_value_selected(text: String),
    /// 
    /// This signal is emitted whenever the integer value changes in the dialog.
    /// The current value is specified by *value.*
    /// 
    /// This signal is only relevant when the input dialog is used in
    /// IntInput mode.
    [signal] int_value_changed(value: i32),
    /// 
    /// This signal is emitted whenever the user selects a integer value by
    /// accepting the dialog; for example, by clicking the **{OK}** button.
    /// The selected value is specified by *value.*
    /// 
    /// This signal is only relevant when the input dialog is used in
    /// IntInput mode.
    [signal] int_value_selected(value: i32),
    /// 
    /// This signal is emitted whenever the double value changes in the dialog.
    /// The current value is specified by *value.*
    /// 
    /// This signal is only relevant when the input dialog is used in
    /// DoubleInput mode.
    [signal] double_value_changed(value: double),
    /// 
    /// This signal is emitted whenever the user selects a double value by
    /// accepting the dialog; for example, by clicking the **{OK}** button.
    /// The selected value is specified by *value.*
    /// 
    /// This signal is only relevant when the input dialog is used in
    /// DoubleInput mode.
    [signal] double_value_selected(value: double),
    /// 
    /// Closes the dialog and sets its result code to *result.* If this dialog
    /// is shown with exec(), done() causes the local event loop to finish,
    /// and exec() to return *result.*
    /// 
    /// **See also:** [`Dialog::done`]
    [event] done(result: i32),
}

[org_name(QInputDialog)]
enum InputDialogOption {
    /// Don't display
    NoButtons,
    /// Use a QListView rather than a non-editable QComboBox for
    UseListViewForComboBoxItems,
    /// Use a QPlainTextEdit for multiline text input. This value was
    UsePlainTextEditForTextInput,
}

[org_name(QInputDialog)]
enum InputMode {
    /// Used to input text strings.
    TextInput,
    /// Used to input integers.
    IntInput,
    /// Used to input floating point numbers with double
    DoubleInput,
}

// vim: syntax=rust expandtab ts=4 sw=4
