///     \class QAccessibleTextInterface
///     \inmodule QtGui
/// 
///     \ingroup accessibility
/// 
///     \brief The QAccessibleTextInterface class implements support for text handling.
/// 
///     This interface corresponds to the IAccessibleText interface.
///     It should be implemented for widgets that display more text than a plain label.
///     Labels should be represented by only \l QAccessibleInterface
///     and return their text as name (\l QAccessibleInterface::text() with \l QAccessible::Name as type).
///     The QAccessibleTextInterface is typically for text that a screen reader
///     might want to read line by line, and for widgets that support text selection and input.
///     This interface is, for example, implemented for QLineEdit.
/// 
///     \l{IAccessible2 Specification}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct AccessibleTextInterface {
    [event] selection(selection_index: i32, start_offset: *i32, end_offset: *i32),
    [event] selection_count() -> i32,
    [event] add_selection(start_offset: i32, end_offset: i32),
    [event] remove_selection(selection_index: i32),
    [event] set_selection(selection_index: i32, start_offset: i32, end_offset: i32),
    [event] cursor_position() -> i32,
    [event] set_cursor_position(position: i32),
    [event] text(start_offset: i32, end_offset: i32) -> String,
    [event] text_before_offset(offset: i32, boundary_type: Accessible::TextBoundaryType, start_offset: *i32, end_offset: *i32) -> String,
    [event] text_after_offset(offset: i32, boundary_type: Accessible::TextBoundaryType, start_offset: *i32, end_offset: *i32) -> String,
    [event] text_at_offset(offset: i32, boundary_type: Accessible::TextBoundaryType, start_offset: *i32, end_offset: *i32) -> String,
    [event] character_count() -> i32,
    [event] character_rect(offset: i32) -> Rect,
    [event] offset_at_point(point: &PointType) -> i32,
}

// vim: syntax=rust expandtab ts=4 sw=4
