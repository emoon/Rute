///     \class QPixmap
///     \inmodule QtGui
/// 
///     \brief The QPixmap class is an off-screen image representation
///     that can be used as a paint device.
/// 
///     \ingroup painting
///     \ingroup shared
/// 
/// 
///     Qt provides four classes for handling image data: QImage, QPixmap,
///     QBitmap and QPicture. QImage is designed and optimized for I/O,
///     and for direct pixel access and manipulation, while QPixmap is
///     designed and optimized for showing images on screen. QBitmap is
///     only a convenience class that inherits QPixmap, ensuring a depth
///     of 1. The isQBitmap() function returns \c true if a QPixmap object is
///     really a bitmap, otherwise returns \c false. Finally, the QPicture class
///     is a paint device that records and replays QPainter commands.
/// 
///     A QPixmap can easily be displayed on the screen using QLabel or
///     one of QAbstractButton's subclasses (such as QPushButton and
///     QToolButton). QLabel has a pixmap property, whereas
///     QAbstractButton has an icon property.
/// 
///     QPixmap objects can be passed around by value since the QPixmap
///     class uses implicit data sharing. For more information, see the \l
///     {Implicit Data Sharing} documentation. QPixmap objects can also be
///     streamed.
/// 
///     Note that the pixel data in a pixmap is internal and is managed by
///     the underlying window system. Because QPixmap is a QPaintDevice
///     subclass, QPainter can be used to draw directly onto pixmaps.
///     Pixels can only be accessed through QPainter functions or by
///     converting the QPixmap to a QImage. However, the fill() function
///     is available for initializing the entire pixmap with a given color.
/// 
///     There are functions to convert between QImage and
///     QPixmap. Typically, the QImage class is used to load an image
///     file, optionally manipulating the image data, before the QImage
///     object is converted into a QPixmap to be shown on
///     screen. Alternatively, if no manipulation is desired, the image
///     file can be loaded directly into a QPixmap.
/// 
///     QPixmap provides a collection of functions that can be used to
///     obtain a variety of information about the pixmap. In addition,
///     there are several functions that enables transformation of the
///     pixmap.
/// 
///     \tableofcontents
/// 
///     \section1 Reading and Writing Image Files
/// 
///     QPixmap provides several ways of reading an image file: The file
///     can be loaded when constructing the QPixmap object, or by using
///     the load() or loadFromData() functions later on. When loading an
///     image, the file name can either refer to an actual file on disk or
///     to one of the application's embedded resources. See \l{The Qt
///     Resource System} overview for details on how to embed images and
///     other resource files in the application's executable.
/// 
///     Simply call the save() function to save a QPixmap object.
/// 
///     The complete list of supported file formats are available through
///     the QImageReader::supportedImageFormats() and
///     QImageWriter::supportedImageFormats() functions. New file formats
///     can be added as plugins. By default, Qt supports the following
///     formats:
/// 
///     \table
///     \header \li Format \li Description                      \li Qt's support
///     \row    \li BMP    \li Windows Bitmap                   \li Read/write
///     \row    \li GIF    \li Graphic Interchange Format (optional) \li Read
///     \row    \li JPG    \li Joint Photographic Experts Group \li Read/write
///     \row    \li JPEG   \li Joint Photographic Experts Group \li Read/write
///     \row    \li PNG    \li Portable Network Graphics        \li Read/write
///     \row    \li PBM    \li Portable Bitmap                  \li Read
///     \row    \li PGM    \li Portable Graymap                 \li Read
///     \row    \li PPM    \li Portable Pixmap                  \li Read/write
///     \row    \li XBM    \li X11 Bitmap                       \li Read/write
///     \row    \li XPM    \li X11 Pixmap                       \li Read/write
///     \endtable
/// 
///     \section1 Pixmap Information
/// 
///     QPixmap provides a collection of functions that can be used to
///     obtain a variety of information about the pixmap:
/// 
///     \table
///     \header
///     \li \li Available Functions
///     \row
///     \li Geometry
///     \li
///     The size(), width() and height() functions provide information
///     about the pixmap's size. The rect() function returns the image's
///     enclosing rectangle.
/// 
///     \row
///     \li Alpha component
///     \li
/// 
///     The hasAlphaChannel() returns \c true if the pixmap has a format that
///     respects the alpha channel, otherwise returns \c false. The hasAlpha(),
///     setMask() and mask() functions are legacy and should not be used.
///     They are potentially very slow.
/// 
///     The createHeuristicMask() function creates and returns a 1-bpp
///     heuristic mask (i.e. a QBitmap) for this pixmap. It works by
///     selecting a color from one of the corners and then chipping away
///     pixels of that color, starting at all the edges. The
///     createMaskFromColor() function creates and returns a mask (i.e. a
///     QBitmap) for the pixmap based on a given color.
/// 
///     \row
///     \li Low-level information
///     \li
/// 
///     The depth() function returns the depth of the pixmap. The
///     defaultDepth() function returns the default depth, i.e. the depth
///     used by the application on the given screen.
/// 
///     The cacheKey() function returns a number that uniquely
///     identifies the contents of the QPixmap object.
/// 
///     The x11Info() function returns information about the configuration
///     of the X display used by the screen to which the pixmap currently
///     belongs. The x11PictureHandle() function returns the X11 Picture
///     handle of the pixmap for XRender support. Note that the two latter
///     functions are only available on x11.
/// 
///     \endtable
/// 
///     \section1 Pixmap Conversion
/// 
///     A QPixmap object can be converted into a QImage using the
///     toImage() function. Likewise, a QImage can be converted into a
///     QPixmap using the fromImage(). If this is too expensive an
///     operation, you can use QBitmap::fromImage() instead.
/// 
///     To convert a QPixmap to and from HICON you can use the QtWinExtras
///     functions QtWin::toHICON() and QtWin::fromHICON() respectively.
/// 
///     \section1 Pixmap Transformations
/// 
///     QPixmap supports a number of functions for creating a new pixmap
///     that is a transformed version of the original:
/// 
///     The scaled(), scaledToWidth() and scaledToHeight() functions
///     return scaled copies of the pixmap, while the copy() function
///     creates a QPixmap that is a plain copy of the original one.
/// 
///     The transformed() function returns a copy of the pixmap that is
///     transformed with the given transformation matrix and
///     transformation mode: Internally, the transformation matrix is
///     adjusted to compensate for unwanted translation,
///     i.e. transformed() returns the smallest pixmap containing all
///     transformed points of the original pixmap. The static trueMatrix()
///     function returns the actual matrix used for transforming the
///     pixmap.
/// 
///     \note When using the native X11 graphics system, the pixmap
///     becomes invalid when the QApplication instance is destroyed.
/// 
///     \sa QBitmap, QImage, QImageReader, QImageWriter
struct Pixmap : PaintDevice {
    swap(other: &PixmapType),
    ///     \fn bool QPixmap::isNull() const
    /// 
    ///     Returns \c true if this is a null pixmap; otherwise returns \c false.
    /// 
    ///     A null pixmap has zero width, zero height and no contents. You
    ///     cannot draw in a null pixmap.
    is_null() -> bool,
    ///   \internal
    [event] dev_type() -> i32,
    ///     \fn int QPixmap::width() const
    /// 
    ///     Returns the width of the pixmap.
    /// 
    ///     \sa size(), {QPixmap#Pixmap Information}{Pixmap Information}
    width() -> i32,
    ///     \fn int QPixmap::height() const
    /// 
    ///     Returns the height of the pixmap.
    /// 
    ///     \sa size(), {QPixmap#Pixmap Information}{Pixmap Information}
    height() -> i32,
    ///     \fn QSize QPixmap::size() const
    /// 
    ///     Returns the size of the pixmap.
    /// 
    ///     \sa width(), height(), {QPixmap#Pixmap Information}{Pixmap
    ///     Information}
    size() -> Size,
    ///     \fn QRect QPixmap::rect() const
    /// 
    ///     Returns the pixmap's enclosing rectangle.
    /// 
    ///     \sa {QPixmap#Pixmap Information}{Pixmap Information}
    rect() -> Rect,
    ///     \fn int QPixmap::depth() const
    /// 
    ///     Returns the depth of the pixmap.
    /// 
    ///     The pixmap depth is also called bits per pixel (bpp) or bit planes
    ///     of a pixmap. A null pixmap has depth 0.
    /// 
    ///     \sa defaultDepth(), {QPixmap#Pixmap Information}{Pixmap
    ///     Information}
    depth() -> i32,
    ///     Returns the default pixmap depth used by the application.
    /// 
    ///     On all platforms the depth of the primary screen will be returned.
    /// 
    ///     \note QGuiApplication must be created before calling this function.
    /// 
    ///     \sa depth(), QColormap::depth(), {QPixmap#Pixmap Information}{Pixmap Information}
    /// 
    [static] default_depth() -> i32,
    ///     Fills the pixmap with the given \a color.
    /// 
    ///     The effect of this function is undefined when the pixmap is
    ///     being painted on.
    /// 
    ///     \sa {QPixmap#Pixmap Transformations}{Pixmap Transformations}
    fill(fill_color: &ColorType),
    ///     Fills the pixmap with the given \a color.
    /// 
    ///     The effect of this function is undefined when the pixmap is
    ///     being painted on.
    /// 
    ///     \sa {QPixmap#Pixmap Transformations}{Pixmap Transformations}
    fill(device: *PaintDeviceType, ofs: &PointType),
    ///     Fills the pixmap with the given \a color.
    /// 
    ///     The effect of this function is undefined when the pixmap is
    ///     being painted on.
    /// 
    ///     \sa {QPixmap#Pixmap Transformations}{Pixmap Transformations}
    fill(device: *PaintDeviceType, xofs: i32, yofs: i32),
    ///     \fn QBitmap QPixmap::mask() const
    /// 
    ///     Extracts a bitmap mask from the pixmap's alpha channel.
    /// 
    ///     \warning This is potentially an expensive operation. The mask of
    ///     the pixmap is extracted dynamically from the pixeldata.
    /// 
    ///     \sa setMask(), {QPixmap#Pixmap Information}{Pixmap Information}
    mask() -> Bitmap,
    ///     Sets a mask bitmap.
    /// 
    ///     This function merges the \a mask with the pixmap's alpha channel. A pixel
    ///     value of 1 on the mask means the pixmap's pixel is unchanged; a value of 0
    ///     means the pixel is transparent. The mask must have the same size as this
    ///     pixmap.
    /// 
    ///     Setting a null mask resets the mask, leaving the previously transparent
    ///     pixels black. The effect of this function is undefined when the pixmap is
    ///     being painted on.
    /// 
    ///     \warning This is potentially an expensive operation.
    /// 
    ///     \sa mask(), {QPixmap#Pixmap Transformations}{Pixmap Transformations},
    ///     QBitmap
    set_mask(arg0: &BitmapType),
    ///     Returns the device pixel ratio for the pixmap. This is the
    ///     ratio between \e{device pixels} and \e{device independent pixels}.
    /// 
    ///     Use this function when calculating layout geometry based on
    ///     the pixmap size: QSize layoutSize = image.size() / image.devicePixelRatio()
    /// 
    ///     The default value is 1.0.
    /// 
    ///     \sa setDevicePixelRatio(), QImageReader
    device_pixel_ratio() -> f32,
    ///     Sets the device pixel ratio for the pixmap. This is the
    ///     ratio between image pixels and device-independent pixels.
    /// 
    ///     The default \a scaleFactor is 1.0. Setting it to something else has
    ///     two effects:
    /// 
    ///     QPainters that are opened on the pixmap will be scaled. For
    ///     example, painting on a 200x200 image if with a ratio of 2.0
    ///     will result in effective (device-independent) painting bounds
    ///     of 100x100.
    /// 
    ///     Code paths in Qt that calculate layout geometry based on the
    ///     pixmap size will take the ratio into account:
    ///     QSize layoutSize = pixmap.size() / pixmap.devicePixelRatio()
    ///     The net effect of this is that the pixmap is displayed as
    ///     high-DPI pixmap rather than a large pixmap
    ///     (see \l{Drawing High Resolution Versions of Pixmaps and Images}).
    /// 
    ///     \sa devicePixelRatio()
    set_device_pixel_ratio(scale_factor: f32),
    ///     Returns \c true if this pixmap has an alpha channel, \e or has a
    ///     mask, otherwise returns \c false.
    /// 
    ///     \sa hasAlphaChannel(), mask()
    has_alpha() -> bool,
    ///     Returns \c true if the pixmap has a format that respects the alpha
    ///     channel, otherwise returns \c false.
    /// 
    ///     \sa hasAlpha()
    has_alpha_channel() -> bool,
    ///     Creates and returns a heuristic mask for this pixmap.
    /// 
    ///     The function works by selecting a color from one of the corners
    ///     and then chipping away pixels of that color, starting at all the
    ///     edges.  If \a clipTight is true (the default) the mask is just
    ///     large enough to cover the pixels; otherwise, the mask is larger
    ///     than the data pixels.
    /// 
    ///     The mask may not be perfect but it should be reasonable, so you
    ///     can do things such as the following:
    /// 
    ///     \snippet code/src_gui_image_qpixmap.cpp 1
    /// 
    ///     This function is slow because it involves converting to/from a
    ///     QImage, and non-trivial computations.
    /// 
    ///     \sa QImage::createHeuristicMask(), createMaskFromColor()
    create_heuristic_mask(clip_tight: bool) -> Bitmap,
    ///     Creates and returns a mask for this pixmap based on the given \a
    ///     maskColor. If the \a mode is Qt::MaskInColor, all pixels matching the
    ///     maskColor will be transparent. If \a mode is Qt::MaskOutColor, all pixels
    ///     matching the maskColor will be opaque.
    /// 
    ///     This function is slow because it involves converting to/from a
    ///     QImage.
    /// 
    ///     \sa createHeuristicMask(), QImage::createMaskFromColor()
    create_mask_from_color(mask_color: &ColorType, mode: Rute::MaskMode) -> Bitmap,
    ///     \fn QPixmap QPixmap::grabWindow(WId window, int x, int y, int
    ///     width, int height)
    /// 
    ///     Creates and returns a pixmap constructed by grabbing the contents
    ///     of the given \a window restricted by QRect(\a x, \a y, \a width,
    ///     \a height).
    /// 
    ///     The arguments (\a{x}, \a{y}) specify the offset in the window,
    ///     whereas (\a{width}, \a{height}) specify the area to be copied.  If
    ///     \a width is negative, the function copies everything to the right
    ///     border of the window. If \a height is negative, the function
    ///     copies everything to the bottom of the window.
    /// 
    ///     The window system identifier (\c WId) can be retrieved using the
    ///     QWidget::winId() function. The rationale for using a window
    ///     identifier and not a QWidget, is to enable grabbing of windows
    ///     that are not part of the application, window system frames, and so
    ///     on.
    /// 
    ///     The grabWindow() function grabs pixels from the screen, not from
    ///     the window, i.e. if there is another window partially or entirely
    ///     over the one you grab, you get pixels from the overlying window,
    ///     too. The mouse cursor is generally not grabbed.
    /// 
    ///     Note on X11 that if the given \a window doesn't have the same depth
    ///     as the root window, and another window partially or entirely
    ///     obscures the one you grab, you will \e not get pixels from the
    ///     overlying window.  The contents of the obscured areas in the
    ///     pixmap will be undefined and uninitialized.
    /// 
    ///     On Windows Vista and above grabbing a layered window, which is
    ///     created by setting the Qt::WA_TranslucentBackground attribute, will
    ///     not work. Instead grabbing the desktop widget should work.
    /// 
    ///     \warning In general, grabbing an area outside the screen is not
    ///     safe. This depends on the underlying window system.
    /// 
    ///     \warning The function is deprecated in Qt 5.0 since there might be
    ///     platform plugins in which window system identifiers (\c WId)
    ///     are local to a screen. Use QScreen::grabWindow() instead.
    /// 
    ///     \sa grabWidget(), {Screenshot Example}
    ///     \sa QScreen
    ///     \deprecated
    [static] grab_window(arg0: WId, x: i32, y: i32, w: i32, h: i32) -> Pixmap,
    ///     \obsolete
    /// 
    ///     Use QWidget::grab() instead.
    [static] grab_widget(widget: *ObjectType, rect: &RectType) -> Pixmap,
    ///     \obsolete
    /// 
    ///     Use QWidget::grab() instead.
    [static] grab_widget(widget: *ObjectType, x: i32, y: i32, w: i32, h: i32) -> Pixmap,
    ///     \fn QPixmap QPixmap::scaled(const QSize &size, Qt::AspectRatioMode
    ///     aspectRatioMode, Qt::TransformationMode transformMode) const
    /// 
    ///     Scales the pixmap to the given \a size, using the aspect ratio and
    ///     transformation modes specified by \a aspectRatioMode and \a
    ///     transformMode.
    /// 
    ///     \image qimage-scaling.png
    /// 
    ///     \list
    ///     \li If \a aspectRatioMode is Qt::IgnoreAspectRatio, the pixmap
    ///        is scaled to \a size.
    ///     \li If \a aspectRatioMode is Qt::KeepAspectRatio, the pixmap is
    ///        scaled to a rectangle as large as possible inside \a size, preserving the aspect ratio.
    ///     \li If \a aspectRatioMode is Qt::KeepAspectRatioByExpanding,
    ///        the pixmap is scaled to a rectangle as small as possible
    ///        outside \a size, preserving the aspect ratio.
    ///     \endlist
    /// 
    ///     If the given \a size is empty, this function returns a null
    ///     pixmap.
    /// 
    /// 
    ///     In some cases it can be more beneficial to draw the pixmap to a
    ///     painter with a scale set rather than scaling the pixmap. This is
    ///     the case when the painter is for instance based on OpenGL or when
    ///     the scale factor changes rapidly.
    /// 
    ///     \sa isNull(), {QPixmap#Pixmap Transformations}{Pixmap
    ///     Transformations}
    /// 
    scaled(w: i32, h: i32, aspect_mode: Rute::AspectRatioMode, mode: Rute::TransformationMode) -> Pixmap,
    ///     \fn QPixmap QPixmap::scaled(const QSize &size, Qt::AspectRatioMode
    ///     aspectRatioMode, Qt::TransformationMode transformMode) const
    /// 
    ///     Scales the pixmap to the given \a size, using the aspect ratio and
    ///     transformation modes specified by \a aspectRatioMode and \a
    ///     transformMode.
    /// 
    ///     \image qimage-scaling.png
    /// 
    ///     \list
    ///     \li If \a aspectRatioMode is Qt::IgnoreAspectRatio, the pixmap
    ///        is scaled to \a size.
    ///     \li If \a aspectRatioMode is Qt::KeepAspectRatio, the pixmap is
    ///        scaled to a rectangle as large as possible inside \a size, preserving the aspect ratio.
    ///     \li If \a aspectRatioMode is Qt::KeepAspectRatioByExpanding,
    ///        the pixmap is scaled to a rectangle as small as possible
    ///        outside \a size, preserving the aspect ratio.
    ///     \endlist
    /// 
    ///     If the given \a size is empty, this function returns a null
    ///     pixmap.
    /// 
    /// 
    ///     In some cases it can be more beneficial to draw the pixmap to a
    ///     painter with a scale set rather than scaling the pixmap. This is
    ///     the case when the painter is for instance based on OpenGL or when
    ///     the scale factor changes rapidly.
    /// 
    ///     \sa isNull(), {QPixmap#Pixmap Transformations}{Pixmap
    ///     Transformations}
    /// 
    scaled(s: &SizeType, aspect_mode: Rute::AspectRatioMode, mode: Rute::TransformationMode) -> Pixmap,
    ///     \fn QPixmap QPixmap::scaledToWidth(int width, Qt::TransformationMode
    ///     mode) const
    /// 
    ///     Returns a scaled copy of the image. The returned image is scaled
    ///     to the given \a width using the specified transformation \a mode.
    ///     The height of the pixmap is automatically calculated so that the
    ///     aspect ratio of the pixmap is preserved.
    /// 
    ///     If \a width is 0 or negative, a null pixmap is returned.
    /// 
    ///     \sa isNull(), {QPixmap#Pixmap Transformations}{Pixmap
    ///     Transformations}
    scaled_to_width(w: i32, mode: Rute::TransformationMode) -> Pixmap,
    ///     \fn QPixmap QPixmap::scaledToHeight(int height,
    ///     Qt::TransformationMode mode) const
    /// 
    ///     Returns a scaled copy of the image. The returned image is scaled
    ///     to the given \a height using the specified transformation \a mode.
    ///     The width of the pixmap is automatically calculated so that the
    ///     aspect ratio of the pixmap is preserved.
    /// 
    ///     If \a height is 0 or negative, a null pixmap is returned.
    /// 
    ///     \sa isNull(), {QPixmap#Pixmap Transformations}{Pixmap
    ///     Transformations}
    scaled_to_height(h: i32, mode: Rute::TransformationMode) -> Pixmap,
    ///     Converts the pixmap to a QImage. Returns a null image if the
    ///     conversion fails.
    /// 
    ///     If the pixmap has 1-bit depth, the returned image will also be 1
    ///     bit deep. Images with more bits will be returned in a format
    ///     closely represents the underlying system. Usually this will be
    ///     QImage::Format_ARGB32_Premultiplied for pixmaps with an alpha and
    ///     QImage::Format_RGB32 or QImage::Format_RGB16 for pixmaps without
    ///     alpha.
    /// 
    ///     Note that for the moment, alpha masks on monochrome images are
    ///     ignored.
    /// 
    ///     \sa fromImage(), {QImage#Image Formats}{Image Formats}
    to_image() -> Image,
    ///     \fn QPixmap QPixmap::fromImage(const QImage &image, Qt::ImageConversionFlags flags)
    /// 
    ///     Converts the given \a image to a pixmap using the specified \a
    ///     flags to control the conversion.  The \a flags argument is a
    ///     bitwise-OR of the \l{Qt::ImageConversionFlags}. Passing 0 for \a
    ///     flags sets all the default options.
    /// 
    ///     In case of monochrome and 8-bit images, the image is first
    ///     converted to a 32-bit pixmap and then filled with the colors in
    ///     the color table. If this is too expensive an operation, you can
    ///     use QBitmap::fromImage() instead.
    /// 
    ///     \sa fromImageReader(), toImage(), {QPixmap#Pixmap Conversion}{Pixmap Conversion}
    [static] from_image(image: &ImageType, flags: Rute::ImageConversionFlags) -> Pixmap,
    ///     \fn QPixmap QPixmap::fromImageReader(QImageReader *imageReader, Qt::ImageConversionFlags flags)
    /// 
    ///     Create a QPixmap from an image read directly from an \a imageReader.
    ///     The \a flags argument is a bitwise-OR of the \l{Qt::ImageConversionFlags}.
    ///     Passing 0 for \a flags sets all the default options.
    /// 
    ///     On some systems, reading an image directly to QPixmap can use less memory than
    ///     reading a QImage to convert it to QPixmap.
    /// 
    ///     \sa fromImage(), toImage(), {QPixmap#Pixmap Conversion}{Pixmap Conversion}
    [static] from_image_reader(image_reader: *ImageReaderType, flags: Rute::ImageConversionFlags) -> Pixmap,
    ///     \fn QPixmap QPixmap::fromImage(const QImage &image, Qt::ImageConversionFlags flags)
    /// 
    ///     Converts the given \a image to a pixmap using the specified \a
    ///     flags to control the conversion.  The \a flags argument is a
    ///     bitwise-OR of the \l{Qt::ImageConversionFlags}. Passing 0 for \a
    ///     flags sets all the default options.
    /// 
    ///     In case of monochrome and 8-bit images, the image is first
    ///     converted to a 32-bit pixmap and then filled with the colors in
    ///     the color table. If this is too expensive an operation, you can
    ///     use QBitmap::fromImage() instead.
    /// 
    ///     \sa fromImageReader(), toImage(), {QPixmap#Pixmap Conversion}{Pixmap Conversion}
    [static] from_image(image: &ImageType, flags: Rute::ImageConversionFlags) -> Pixmap,
    ///     Loads a pixmap from the file with the given \a fileName. Returns
    ///     true if the pixmap was successfully loaded; otherwise invalidates
    ///     the pixmap and returns \c false.
    /// 
    ///     The loader attempts to read the pixmap using the specified \a
    ///     format. If the \a format is not specified (which is the default),
    ///     the loader probes the file for a header to guess the file format.
    /// 
    ///     The file name can either refer to an actual file on disk or to one
    ///     of the application's embedded resources. See the
    ///     \l{resources.html}{Resource System} overview for details on how to
    ///     embed pixmaps and other resource files in the application's
    ///     executable.
    /// 
    ///     If the data needs to be modified to fit in a lower-resolution
    ///     result (e.g. converting from 32-bit to 8-bit), use the \a flags to
    ///     control the conversion.
    /// 
    ///     Note that QPixmaps are automatically added to the QPixmapCache
    ///     when loaded from a file; the key used is internal and can not
    ///     be acquired.
    /// 
    ///     \sa loadFromData(), {QPixmap#Reading and Writing Image
    ///     Files}{Reading and Writing Image Files}
    load(file_name: String, format: *char, flags: Rute::ImageConversionFlags) -> bool,
    ///     \fn bool QPixmap::loadFromData(const uchar *data, uint len, const char *format, Qt::ImageConversionFlags flags)
    /// 
    ///     Loads a pixmap from the \a len first bytes of the given binary \a
    ///     data.  Returns \c true if the pixmap was loaded successfully;
    ///     otherwise invalidates the pixmap and returns \c false.
    /// 
    ///     The loader attempts to read the pixmap using the specified \a
    ///     format. If the \a format is not specified (which is the default),
    ///     the loader probes the file for a header to guess the file format.
    /// 
    ///     If the data needs to be modified to fit in a lower-resolution
    ///     result (e.g. converting from 32-bit to 8-bit), use the \a flags to
    ///     control the conversion.
    /// 
    ///     \sa load(), {QPixmap#Reading and Writing Image Files}{Reading and
    ///     Writing Image Files}
    load_from_data(buf: *uchar, len: uint, format: *char, flags: Rute::ImageConversionFlags) -> bool,
    ///     \fn bool QPixmap::loadFromData(const uchar *data, uint len, const char *format, Qt::ImageConversionFlags flags)
    /// 
    ///     Loads a pixmap from the \a len first bytes of the given binary \a
    ///     data.  Returns \c true if the pixmap was loaded successfully;
    ///     otherwise invalidates the pixmap and returns \c false.
    /// 
    ///     The loader attempts to read the pixmap using the specified \a
    ///     format. If the \a format is not specified (which is the default),
    ///     the loader probes the file for a header to guess the file format.
    /// 
    ///     If the data needs to be modified to fit in a lower-resolution
    ///     result (e.g. converting from 32-bit to 8-bit), use the \a flags to
    ///     control the conversion.
    /// 
    ///     \sa load(), {QPixmap#Reading and Writing Image Files}{Reading and
    ///     Writing Image Files}
    load_from_data(data: &ByteArrayType, format: *char, flags: Rute::ImageConversionFlags) -> bool,
    ///     \overload
    /// 
    ///     This function writes a QPixmap to the given \a device using the
    ///     specified image file \a format and \a quality factor. This can be
    ///     used, for example, to save a pixmap directly into a QByteArray:
    /// 
    ///     \snippet image/image.cpp 1
    save(file_name: String, format: *char, quality: i32) -> bool,
    ///     \overload
    /// 
    ///     This function writes a QPixmap to the given \a device using the
    ///     specified image file \a format and \a quality factor. This can be
    ///     used, for example, to save a pixmap directly into a QByteArray:
    /// 
    ///     \snippet image/image.cpp 1
    save(device: *IODeviceType, format: *char, quality: i32) -> bool,
    ///     Replaces this pixmap's data with the given \a image using the
    ///     specified \a flags to control the conversion.  The \a flags
    ///     argument is a bitwise-OR of the \l{Qt::ImageConversionFlags}.
    ///     Passing 0 for \a flags sets all the default options. Returns \c true
    ///     if the result is that this pixmap is not null.
    /// 
    ///     Note: this function was part of Qt 3 support in Qt 4.6 and earlier.
    ///     It has been promoted to official API status in 4.7 to support updating
    ///     the pixmap's image without creating a new QPixmap as fromImage() would.
    /// 
    ///     \sa fromImage()
    ///     \since 4.7
    convert_from_image(img: &ImageType, flags: Rute::ImageConversionFlags) -> bool,
    ///     \fn QPixmap QPixmap::copy(const QRect &rectangle) const
    /// 
    ///     Returns a deep copy of the subset of the pixmap that is specified
    ///     by the given \a rectangle. For more information on deep copies,
    ///     see the \l {Implicit Data Sharing} documentation.
    /// 
    ///     If the given \a rectangle is empty, the whole image is copied.
    /// 
    ///     \sa operator=(), QPixmap(), {QPixmap#Pixmap
    ///     Transformations}{Pixmap Transformations}
    copy(x: i32, y: i32, width: i32, height: i32) -> Pixmap,
    ///     \fn QPixmap QPixmap::copy(const QRect &rectangle) const
    /// 
    ///     Returns a deep copy of the subset of the pixmap that is specified
    ///     by the given \a rectangle. For more information on deep copies,
    ///     see the \l {Implicit Data Sharing} documentation.
    /// 
    ///     If the given \a rectangle is empty, the whole image is copied.
    /// 
    ///     \sa operator=(), QPixmap(), {QPixmap#Pixmap
    ///     Transformations}{Pixmap Transformations}
    copy(rect: &RectType) -> Pixmap,
    ///     \since 4.6
    /// 
    ///     Scrolls the area \a rect of this pixmap by (\a dx, \a dy). The exposed
    ///     region is left unchanged. You can optionally pass a pointer to an empty
    ///     QRegion to get the region that is \a exposed by the scroll operation.
    /// 
    ///     \snippet code/src_gui_image_qpixmap.cpp 2
    /// 
    ///     You cannot scroll while there is an active painter on the pixmap.
    /// 
    ///     \sa QWidget::scroll(), QGraphicsItem::scroll()
    scroll(dx: i32, dy: i32, x: i32, y: i32, width: i32, height: i32, exposed: *RegionType),
    ///     \since 4.6
    /// 
    ///     Scrolls the area \a rect of this pixmap by (\a dx, \a dy). The exposed
    ///     region is left unchanged. You can optionally pass a pointer to an empty
    ///     QRegion to get the region that is \a exposed by the scroll operation.
    /// 
    ///     \snippet code/src_gui_image_qpixmap.cpp 2
    /// 
    ///     You cannot scroll while there is an active painter on the pixmap.
    /// 
    ///     \sa QWidget::scroll(), QGraphicsItem::scroll()
    scroll(dx: i32, dy: i32, rect: &RectType, exposed: *RegionType),
    ///     Returns a number that identifies this QPixmap. Distinct QPixmap
    ///     objects can only have the same cache key if they refer to the same
    ///     contents.
    /// 
    ///     The cacheKey() will change when the pixmap is altered.
    cache_key() -> i64,
    ///     \internal
    is_detached() -> bool,
    ///     Detaches the pixmap from shared pixmap data.
    /// 
    ///     A pixmap is automatically detached by Qt whenever its contents are
    ///     about to change. This is done in almost all QPixmap member
    ///     functions that modify the pixmap (fill(), fromImage(),
    ///     load(), etc.), and in QPainter::begin() on a pixmap.
    /// 
    ///     There are two exceptions in which detach() must be called
    ///     explicitly, that is when calling the handle() or the
    ///     x11PictureHandle() function (only available on X11). Otherwise,
    ///     any modifications done using system calls, will be performed on
    ///     the shared data.
    /// 
    ///     The detach() function returns immediately if there is just a
    ///     single reference or if the pixmap has not been initialized yet.
    detach(),
    ///     \fn bool QPixmap::isQBitmap() const
    /// 
    ///     Returns \c true if this is a QBitmap; otherwise returns \c false.
    is_q_bitmap() -> bool,
    ///     \internal
    [event] paint_engine() -> PaintEngine?,
    ///     \internal
    [static] from_image_in_place(image: &ImageType, flags: Rute::ImageConversionFlags) -> Pixmap,
    ///   \internal
    handle() -> PlatformPixmap?,
}

// vim: syntax=rust expandtab ts=4 sw=4
