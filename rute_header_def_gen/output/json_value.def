/// 
/// A value in JSON can be one of 6 basic types:
/// 
/// JSON is a format to store structured data. It has 6 basic data types:
/// 
/// * bool QJsonValue::Bool
/// * double QJsonValue::Double
/// * string QJsonValue::String
/// * array QJsonValue::Array
/// * object QJsonValue::Object
/// * null QJsonValue::Null
/// 
/// A value can represent any of the above data types. In addition, QJsonValue has one special
/// flag to represent undefined values. This can be queried with isUndefined().
/// 
/// The type of the value can be queried with type() or accessors like isBool(), isString(), and so on.
/// Likewise, the value can be converted to the type stored in it using the toBool(), toString() and so on.
/// 
/// Values are strictly typed internally and contrary to QVariant will not attempt to do any implicit type
/// conversions. This implies that converting to a type that is not stored in the value will return a default
/// constructed return value.
/// 
/// # QJsonValueRef
/// 
/// QJsonValueRef is a helper class for QJsonArray and QJsonObject.
/// When you get an object of type QJsonValueRef, you can
/// use it as if it were a reference to a QJsonValue. If you assign to it,
/// the assignment will apply to the element in the QJsonArray or QJsonObject
/// from which you got the reference.
/// 
/// The following methods return QJsonValueRef:
/// * [QJsonArray](QJsonArray)
/// ::operator[](int i)
/// * [QJsonObject](QJsonObject)
/// ::operator[](const QString & key) const
/// 
/// **See also:** {JSON Support in Qt}
/// {JSON Save Game Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct JsonValue {
    /// 
    /// Swaps the value *other* with this. This operation is very fast and never fails.
    swap(other: &JsonValueType),
    /// 
    /// Converts *variant* to a QJsonValue and returns it.
    /// 
    /// The conversion will convert QVariant types as follows:
    /// 
    /// * Source type
    /// * Destination type
    /// 
    /// 
    /// * QMetaType::Nullptr
    /// * QJsonValue::Null
    /// 
    /// 
    /// * QMetaType::Bool
    /// * QJsonValue::Bool
    /// 
    /// 
    /// * QMetaType::Int
    /// * QMetaType::UInt
    /// * QMetaType::LongLong
    /// * QMetaType::ULongLong
    /// * QMetaType::Float
    /// * QMetaType::Double
    /// * QJsonValue::Double
    /// 
    /// 
    /// * QMetaType::QString
    /// * QJsonValue::String
    /// 
    /// 
    /// * QMetaType::QStringList
    /// * QMetaType::QVariantList
    /// * QJsonValue::Array
    /// 
    /// 
    /// * QMetaType::QVariantMap
    /// * QMetaType::QVariantHash
    /// * QJsonValue::Object
    /// 
    /// 
    /// * QMetaType::QUrl
    /// * QJsonValue::String. The conversion will use QUrl::toString() with flag QUrl::FullyEncoded, so as to ensure maximum compatibility in parsing the URL
    /// 
    /// 
    /// * QMetaType::QUuid
    /// * QJsonValue::String. Since Qt 5.11, the resulting string will not include braces
    /// 
    /// For all other QVariant types a conversion to a QString will be attempted. If the returned string
    /// is empty, a Null QJsonValue will be stored, otherwise a String value using the returned QString.
    /// 
    /// **See also:** [`to_variant()`]
    [static] from_variant(variant: &VariantType) -> JsonValue,
    /// 
    /// Converts the value to a [QVariant()](QVariant::)
    /// 
    /// 
    /// The QJsonValue types will be converted as follows:
    /// 
    /// [QVariant()](QVariant::)
    /// 
    /// **See also:** [`from_variant()`]
    to_variant() -> Variant,
    /// 
    /// Returns the type of the value.
    /// 
    /// **See also:** [`JsonValue::type()`]
    type() -> JsonValue::Type,
    /// 
    /// Returns `true` if the value is null.
    is_null() -> bool,
    /// 
    /// Returns `true` if the value contains a boolean.
    /// 
    /// **See also:** [`to_bool()`]
    is_bool() -> bool,
    /// 
    /// Returns `true` if the value contains a double.
    /// 
    /// **See also:** [`to_double()`]
    is_double() -> bool,
    /// 
    /// Returns `true` if the value contains an array.
    /// 
    /// **See also:** [`to_array()`]
    is_array() -> bool,
    /// 
    /// Returns `true` if the value contains an object.
    /// 
    /// **See also:** [`to_object()`]
    is_object() -> bool,
    /// 
    /// Returns `true` if the value is undefined. This can happen in certain
    /// error cases as e.g. accessing a non existing key in a QJsonObject.
    is_undefined() -> bool,
    /// 
    /// Converts the value to a bool and returns it.
    /// 
    /// If type() is not bool, the *defaultValue* will be returned.
    to_bool(default_value: bool) -> bool,
    /// 
    /// Converts the value to an int and returns it.
    /// 
    /// If type() is not Double or the value is not a whole number,
    /// the *defaultValue* will be returned.
    to_int(default_value: i32) -> i32,
    /// 
    /// Converts the value to a double and returns it.
    /// 
    /// If type() is not Double, the *defaultValue* will be returned.
    to_double(default_value: double) -> double,
    /// 
    /// Converts the value to an array and returns it.
    /// 
    /// If type() is not Array, the *defaultValue* will be returned.
    /// 
    /// **Overloads**
    /// Converts the value to an array and returns it.
    /// 
    /// If type() is not Array, a [QJsonArray()](QJsonArray::)
    /// will be returned.
    to_array() -> JsonArray,
    /// 
    /// Converts the value to an array and returns it.
    /// 
    /// If type() is not Array, the *defaultValue* will be returned.
    /// 
    /// **Overloads**
    /// Converts the value to an array and returns it.
    /// 
    /// If type() is not Array, a [QJsonArray()](QJsonArray::)
    /// will be returned.
    [org_name(toArray)]
    to_array_2(default_value: &JsonArrayType) -> JsonArray,
    /// 
    /// Converts the value to an object and returns it.
    /// 
    /// If type() is not Object, the *defaultValue* will be returned.
    /// 
    /// **Overloads**
    /// Converts the value to an object and returns it.
    /// 
    /// If type() is not Object, the [QJsonObject()](QJsonObject::)
    /// will be returned.
    to_object() -> JsonObject,
    /// 
    /// Converts the value to an object and returns it.
    /// 
    /// If type() is not Object, the *defaultValue* will be returned.
    /// 
    /// **Overloads**
    /// Converts the value to an object and returns it.
    /// 
    /// If type() is not Object, the [QJsonObject()](QJsonObject::)
    /// will be returned.
    [org_name(toObject)]
    to_object_2(default_value: &JsonObjectType) -> JsonObject,
}

[org_name(QJsonValue)]
enum Type {
    Null,
    Bool,
    Double,
    String,
    Array,
    Object,
    Undefined,
}

// vim: syntax=rust expandtab ts=4 sw=4
