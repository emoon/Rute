///     \class QSize
///     \inmodule QtCore
///     \ingroup painting
/// 
///     \brief The QSize class defines the size of a two-dimensional
///     object using integer point precision.
/// 
///     A size is specified by a width() and a height().  It can be set in
///     the constructor and changed using the setWidth(), setHeight(), or
///     scale() functions, or using arithmetic operators. A size can also
///     be manipulated directly by retrieving references to the width and
///     height using the rwidth() and rheight() functions. Finally, the
///     width and height can be swapped using the transpose() function.
/// 
///     The isValid() function determines if a size is valid (a valid size
///     has both width and height greater than or equal to zero). The isEmpty()
///     function returns \c true if either of the width and height is less
///     than, or equal to, zero, while the isNull() function returns \c true
///     only if both the width and the height is zero.
/// 
///     Use the expandedTo() function to retrieve a size which holds the
///     maximum height and width of \e this size and a given
///     size. Similarly, the boundedTo() function returns a size which
///     holds the minimum height and width of \e this size and a given
///     size.
/// 
///     QSize objects can be streamed as well as compared.
/// 
///     \sa QSizeF, QPoint, QRect

struct Size {
    is_null() -> bool,
    is_empty() -> bool,
    is_valid() -> bool,
    width() -> i32,
    height() -> i32,
    set_width(w: i32),
    set_height(h: i32),
    scale(w: i32, h: i32, mode: Rute::AspectRatioMode),
    scale(s: &SizeType, mode: Rute::AspectRatioMode),
    ///     \overload
    ///     \since 5.0
    /// 
    ///     Return a size scaled to a rectangle with the given size \a s,
    ///     according to the specified \a mode.
    scaled(w: i32, h: i32, mode: Rute::AspectRatioMode) -> Size,
    ///     \overload
    ///     \since 5.0
    /// 
    ///     Return a size scaled to a rectangle with the given size \a s,
    ///     according to the specified \a mode.
    scaled(s: &SizeType, mode: Rute::AspectRatioMode) -> Size,
    expanded_to(arg0: &SizeType) -> Size,
    bounded_to(arg0: &SizeType) -> Size,
    rwidth() -> i32?,
    rheight() -> i32?,
}

// vim: syntax=rust expandtab ts=4 sw=4
