/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct PlatformSharedGraphicsCache : Object {
    /// 
    /// This is a hint to the cache that a burst of requests is pending. In some implementations, this
    /// will improve performance, as the cache can focus on handling the requests and wait with the
    /// results until it is done. It should typically be called prior to a sequence of calls to
    /// requestItems() and releaseItems().
    /// 
    /// Any call to beginRequestBatch() must be followed at some point by a call to endRequestBatch().
    /// Failing to do this may lead to the results of requests never being emitted.
    /// 
    /// **Note**: beginRequestBatch() and endRequestBatch() have no stacking logic. Calling
    /// beginRequestBatch() twice in a row has no effect, and the single existing batch will be ended
    /// by the earliest call to endRequestBatch().
    /// 
    /// **See also:** [`end_request_batch()`]
    /// [`request_batch_started()`]
    [event] begin_request_batch(),
    /// 
    /// Initializes a cache named *cacheId* if it has not yet been initialized. The *bufferType* and
    /// *pixelFormat* gives the format of the buffers that will be used to contain the items in the
    /// cache. If a cache with the same *cacheId* has previously been initialized, the call will be
    /// ignored. The cache will keep its previously set buffer type and pixel format.
    [event] ensure_cache_initialized(cache_id: &ByteArrayType, buffer_type: PlatformSharedGraphicsCache::BufferType, pixel_format: PlatformSharedGraphicsCache::PixelFormat),
    /// 
    /// Requests all the items in *itemIds* from the cache with the name *cacheId.*
    /// 
    /// If any or all of the items are available in the cache, one or more itemsAvailable() signals will be
    /// emitted corresponding to the items. If the cache does not contain all of the items in question,
    /// then an itemsMissing() signal will be emitted corresponding to the missing items. The user
    /// is at this point expected to call insertItems() to insert the missing items into the cache. If
    /// the inserted items have previously been requested by the user, at which point an itemsAvailable()
    /// signal will be emitted corresponding to the items.
    /// 
    /// Before requesting items from a cache, the user must call ensureCacheInitialized() with the
    /// correct parameters for the cache.
    [event] request_items(cache_id: &ByteArrayType, item_ids: [u32]),
    /// 
    /// Inserts the items in *itemIds* into the cache named *cacheId.* The appearance of
    /// each item is stored in *items.* The format of the QImage objects is expected to match the
    /// pixel format of the cache as it was initialized in ensureCacheInitialized().
    /// 
    /// When the items have been successfully entered into the cache, one or more itemsAvailable() signals
    /// will be emitted for the items.
    /// 
    /// If the cache already contains the items, the behavior is implementation-specific. The
    /// implementation may choose to ignore the items or it may overwrite the existing instances in
    /// the cache. Either way, itemsAvailable() signals corresponding to the inserted items will be
    /// emitted.
    [event] insert_items(cache_id: &ByteArrayType, item_ids: [u32], items: [ImageType]),
    /// 
    /// Releases the reference to the items in *itemIds* from the cache named *cacheId.* This should
    /// only be called when all references to the items have been released by the user, and they are no
    /// longer needed.
    [event] release_items(cache_id: &ByteArrayType, item_ids: [u32]),
    /// 
    /// Signals to the cache that the request sequence which has previously been commenced using
    /// beginRequestBatch() has now finished.
    /// 
    /// **See also:** [`begin_request_batch()`]
    /// [`request_batch_started()`]
    [event] end_request_batch(),
    /// 
    /// Returns `true` if a request batch has previously been started using beginRequestBatch()
    /// and not yet stopped using endRequestBatch().
    /// 
    /// **See also:** [`begin_request_batch()`]
    /// [`end_request_batch()`]
    [event] request_batch_started() -> bool,
    /// 
    /// Returns an OpenGL texture ID corresponding to the buffer *bufferId,* which has previously
    /// been passed through signals itemsAvailable() or itemsUpdated(). The relevant OpenGL context
    /// should be current when calling this function.
    /// 
    /// **See also:** [`egl_image_for_buffer()`]
    /// [`size_of_buffer()`]
    [event] texture_id_for_buffer(buffer_id: *void) -> uint,
    /// 
    /// Registers a reference to the buffer *bufferId.*
    /// 
    /// **See also:** [`dereference_buffer()`]
    [event] reference_buffer(buffer_id: *void),
    /// 
    /// Removed a previously registered reference to the buffer *bufferId.* Returns `true` if there
    /// are still more references to the buffer in question, or false if this was the last reference
    /// (in which case the buffer may have been deleted in the cache.)
    /// 
    /// **See also:** [`dereference_buffer()`]
    [event] dereference_buffer(buffer_id: *void) -> bool,
    /// 
    /// Returns the size of the buffer *bufferId.*
    /// 
    /// **See also:** [`texture_id_for_buffer()`]
    /// [`egl_image_for_buffer()`]
    [event] size_of_buffer(buffer_id: *void) -> Size,
    /// 
    /// Returns an EGLImageKHR image corresponding to the buffer *bufferId.*
    /// 
    /// **See also:** [`texture_id_for_buffer()`]
    /// [`size_of_buffer()`]
    [event] egl_image_for_buffer(buffer_id: *void),
    /// 
    /// This signal is emitted when requestItems() has been called for one or more items in the
    /// cache named *cacheId* which are not yet available in the cache. The user is then expected to
    /// call insertItems() to update the cache with the respective items, at which point they will
    /// become available to all clients of the shared cache.
    /// 
    /// The vector *itemIds* contains the IDs of the items that need to be inserted into the cache.
    /// 
    /// **See also:** [`items_available()`]
    /// [`insert_items()`]
    /// [`request_items()`]
    [signal] items_missing(cache_id: &ByteArrayType, item_ids: [u32]),
    /// 
    /// This signal can be emitted at any time when either requestItems() or insertItems() has been
    /// called by the application for one or more items in the cache named *cacheId,* as long as
    /// releaseItems() has not subsequently been called for the same items. It instructs the application
    /// on where to find the items that have been entered into the cache. When the application receives
    /// a buffer, it is expected to reference it using referenceBuffer() on it if it keeps a reference
    /// to the buffer.
    /// 
    /// The *bufferId* is an ID for the buffer that contains the items. The *bufferId* can be
    /// converted to a format usable by the application depending on which format it was given at
    /// initialization. If it is a OpenGLTexture, its texture ID can be requested using the
    /// textureIdForBuffer() function. The dimensions of the buffer are given by *bufferSize.*
    /// 
    /// The items provided by the cache are identified in the *itemIds* vector. The
    /// *positionsInBuffer* vector contains the locations inside the buffer of each item. Each entry in
    /// *positionsInBuffer* corresponds to an item in *itemIds.*
    /// 
    /// The buffer and the items' locations within the buffer can be considered valid until an
    /// itemsInvalidated() signal has been emitted for the items, or until releaseItems() is called
    /// for the items.
    /// 
    /// **See also:** [`items_missing()`]
    /// [`request_items()`]
    /// [`buffer_type()`]
    [signal] items_available(cache_id: &ByteArrayType, buffer_id: *void, item_ids: [u32], positions_in_buffer: [PointType]),
    /// 
    /// This signal is emitted when the items given by *itemIds* in the cache named *cacheId* have
    /// been removed from the cache and the previously reported information about them is considered
    /// invalid. It will only be emitted for items for which a buffer has previously been identified
    /// through the itemsAvailable() signal (either as response to a requestItems() call or an
    /// insertItems() call.)
    /// 
    /// The application is expected to throw away information about the items in the *itemIds* array
    /// and drop any references it might have to the memory held by the buffer. If the items are still
    /// required by the application, it can re-commit them to the cache using the insertItems() function.
    /// 
    /// If the application no longer holds any references to previously referenced items in a given
    /// cache, it should call releaseItems() for these items, at which point it will no longer receive
    /// any itemsInvalidated() signal for these items.
    [signal] items_invalidated(cache_id: &ByteArrayType, item_ids: [u32]),
    /// 
    /// This signal is similar in usage to the itemsAvailable() signal, but will be emitted when
    /// the location of a previously requested or inserted item has been updated. The application
    /// must update its data for the respective items and release any references to old buffers held
    /// by the items.
    /// 
    /// If the application no longer holds any references to previously referenced items in a given
    /// cache, it should call releaseItems() for these items, at which point it will no longer receive
    /// any itemsUpdated() signal for these items.
    /// 
    /// **See also:** [`request_items()`]
    /// [`insert_items()`]
    /// [`items_available()`]
    [signal] items_updated(cache_id: &ByteArrayType, buffer_id: *void, item_ids: [u32], positions_in_buffer: [PointType]),
}

[org_name(QPlatformSharedGraphicsCache)]
enum PixelFormat {
    /// The cache will use 8 bits to represent the alpha value of each pixel. If an
    Alpha8,
}

[org_name(QPlatformSharedGraphicsCache)]
enum BufferType {
    /// The buffer will be allocated in graphics memory, and an OpenGL texture
    OpenGLTexture,
}

// vim: syntax=rust expandtab ts=4 sw=4
