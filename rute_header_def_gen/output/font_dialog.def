/// 
/// A font dialog is created through one of the static getFont()
/// functions.
/// 
/// Examples:
/// 
/// The dialog can also be used to set a widget's font directly:
/// If the user clicks OK the font they chose will be used for myWidget,
/// and if they click Cancel the original font is used.
/// 
/// ![A font dialog in the Fusion widget style.](fusion-fontdialog.png)
/// 
/// **See also:** QFont
/// QFontInfo
/// QFontMetrics
/// QColorDialog
/// QFileDialog
/// {Standard Dialogs Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QFontDialog)]
enum FontDialogOption {
    NoButtons,
    DontUseNativeDialog,
    ScalableFonts,
    NonScalableFonts,
    MonospacedFonts,
    ProportionalFonts,
}

struct FontDialog : Dialog {
    /// 
    /// Sets the font highlighted in the QFontDialog to the given *font.*
    /// 
    /// **See also:** selectedFont()
    set_current_font(font: &FontType),
    /// 
    /// 
    /// Returns the current font.
    /// 
    /// **See also:** selectedFont()
    /// 
    /// This signal is emitted when the current font is changed. The new font is
    /// specified in *font.*
    /// 
    /// The signal is emitted while a user is selecting a font. Ultimately, the
    /// chosen font may differ from the font currently selected.
    /// 
    /// **See also:** currentFont
    /// fontSelected()
    /// selectedFont()
    current_font() -> Font,
    /// 
    /// Returns the font that the user selected by clicking the **{OK}**
    /// or equivalent button.
    /// 
    /// **Note**: This font is not always the same as the font held by the
    /// [currentFont](currentFont)
    /// property since the user can choose different fonts
    /// before finally selecting the one to use.
    selected_font() -> Font,
    /// 
    /// Sets the given *option* to be enabled if *on* is true;
    /// otherwise, clears the given *option.*
    /// 
    /// **See also:** options
    /// testOption()
    set_option(option: FontDialog::FontDialogOption, on: bool),
    /// 
    /// Returns `true` if the given *option* is enabled; otherwise, returns
    /// false.
    /// 
    /// **See also:** options
    /// setOption()
    test_option(option: FontDialog::FontDialogOption) -> bool,
    set_options(options: FontDialog::FontDialogOptions),
    /// 
    /// By default, all options are disabled.
    /// 
    /// Options should be set before showing the dialog. Setting them while the
    /// dialog is visible is not guaranteed to have an immediate effect on the
    /// dialog (depending on the option and on the platform).
    /// 
    /// **See also:** setOption()
    /// testOption()
    options() -> FontDialog::FontDialogOptions,
    /// 
    /// **Overloads**
    /// Opens the dialog and connects its fontSelected() signal to the slot specified
    /// by *receiver* and *member.*
    /// 
    /// The signal will be disconnected from the slot when the dialog is closed.
    open(receiver: *ObjectType, member: *char),
    /// 
    [event] set_visible(visible: bool),
    /// 
    /// Executes a modal font dialog and returns a font.
    /// 
    /// If the user clicks **OK,** the selected font is returned. If the user
    /// clicks **Cancel,** the *initial* font is returned.
    /// 
    /// The dialog is constructed with the given *parent* and the options specified
    /// in *options.* *title* is shown as the window title of the dialog and *initial* is the initially selected font. If the *ok* parameter is not-null,
    /// the value it refers to is set to true if the user clicks **OK,** and set to
    /// false if the user clicks **Cancel.**
    /// 
    /// Examples:
    /// 
    /// The dialog can also be used to set a widget's font directly:
    /// In this example, if the user clicks OK the font they chose will be
    /// used, and if they click Cancel the original font is used.
    /// 
    /// **Warning**: Do not delete *parent* during the execution of the dialog.
    /// If you want to do this, you should create the dialog
    /// yourself using one of the QFontDialog constructors.
    /// 
    /// **Overloads**
    /// Executes a modal font dialog and returns a font.
    /// 
    /// If the user clicks **OK,** the selected font is returned. If the user
    /// clicks **Cancel,** the Qt default font is returned.
    /// 
    /// The dialog is constructed with the given *parent.*
    /// If the *ok* parameter is not-null, the value it refers to is set
    /// to true if the user clicks **OK,** and false if the user clicks
    /// **Cancel.**
    /// 
    /// Example:
    /// 
    /// **Warning**: Do not delete *parent* during the execution of the dialog.
    /// If you want to do this, you should create the dialog
    /// yourself using one of the QFontDialog constructors.
    [static] get_font(ok: *bool, parent: *WidgetType) -> Font,
    /// 
    /// Executes a modal font dialog and returns a font.
    /// 
    /// If the user clicks **OK,** the selected font is returned. If the user
    /// clicks **Cancel,** the *initial* font is returned.
    /// 
    /// The dialog is constructed with the given *parent* and the options specified
    /// in *options.* *title* is shown as the window title of the dialog and *initial* is the initially selected font. If the *ok* parameter is not-null,
    /// the value it refers to is set to true if the user clicks **OK,** and set to
    /// false if the user clicks **Cancel.**
    /// 
    /// Examples:
    /// 
    /// The dialog can also be used to set a widget's font directly:
    /// In this example, if the user clicks OK the font they chose will be
    /// used, and if they click Cancel the original font is used.
    /// 
    /// **Warning**: Do not delete *parent* during the execution of the dialog.
    /// If you want to do this, you should create the dialog
    /// yourself using one of the QFontDialog constructors.
    /// 
    /// **Overloads**
    /// Executes a modal font dialog and returns a font.
    /// 
    /// If the user clicks **OK,** the selected font is returned. If the user
    /// clicks **Cancel,** the Qt default font is returned.
    /// 
    /// The dialog is constructed with the given *parent.*
    /// If the *ok* parameter is not-null, the value it refers to is set
    /// to true if the user clicks **OK,** and false if the user clicks
    /// **Cancel.**
    /// 
    /// Example:
    /// 
    /// **Warning**: Do not delete *parent* during the execution of the dialog.
    /// If you want to do this, you should create the dialog
    /// yourself using one of the QFontDialog constructors.
    [static] get_font(ok: *bool, initial: &FontType, parent: *WidgetType, title: String, options: FontDialog::FontDialogOptions) -> Font,
    /// 
    /// This signal is emitted when the current font is changed. The new font is
    /// specified in *font.*
    /// 
    /// The signal is emitted while a user is selecting a font. Ultimately, the
    /// chosen font may differ from the font currently selected.
    /// 
    /// **See also:** currentFont
    /// fontSelected()
    /// selectedFont()
    [signal] current_font_changed(font: &FontType),
    /// 
    /// This signal is emitted when a font has been selected. The selected font is
    /// specified in *font.*
    /// 
    /// The signal is only emitted when a user has chosen the final font to be
    /// used. It is not emitted while the user is changing the current font in the
    /// font dialog.
    /// 
    /// **See also:** selectedFont()
    /// currentFontChanged()
    /// currentFont
    [signal] font_selected(font: &FontType),
    /// 
    [event] change_event(event: *EventType),
    /// 
    /// Closes the dialog and sets its result code to *result.* If this dialog
    /// is shown with exec(), done() causes the local event loop to finish,
    /// and exec() to return *result.*
    /// 
    /// **See also:** QDialog::done()
    [event] done(result: i32),
    [event] event_filter(object: *ObjectType, event: *EventType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
