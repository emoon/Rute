///     \class QPoint
///     \inmodule QtCore
///     \ingroup painting
///     \reentrant
/// 
///     \brief The QPoint class defines a point in the plane using integer
///     precision.
/// 
///     A point is specified by a x coordinate and an y coordinate which
///     can be accessed using the x() and y() functions. The isNull()
///     function returns \c true if both x and y are set to 0. The
///     coordinates can be set (or altered) using the setX() and setY()
///     functions, or alternatively the rx() and ry() functions which
///     return references to the coordinates (allowing direct
///     manipulation).
/// 
///     Given a point \e p, the following statements are all equivalent:
/// 
///     \snippet code/src_corelib_tools_qpoint.cpp 0
/// 
///     A QPoint object can also be used as a vector: Addition and
///     subtraction are defined as for vectors (each component is added
///     separately). A QPoint object can also be divided or multiplied by
///     an \c int or a \c qreal.
/// 
///     In addition, the QPoint class provides the manhattanLength()
///     function which gives an inexpensive approximation of the length of
///     the QPoint object interpreted as a vector. Finally, QPoint objects
///     can be streamed as well as compared.
/// 
///     \sa QPointF, QPolygon
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct Point {
    is_null() -> bool,
    x() -> i32,
    y() -> i32,
    set_x(x: i32),
    set_y(y: i32),
    manhattan_length() -> i32,
    rx() -> i32?,
    ry() -> i32?,
    [static] dot_product(p1: &PointType, p2: &PointType) -> i32,
}

// vim: syntax=rust expandtab ts=4 sw=4
