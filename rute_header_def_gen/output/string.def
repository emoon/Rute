enum SectionFlag {
    SectionDefault,
    SectionSkipEmpty,
    SectionIncludeLeadingSep,
    SectionIncludeTrailingSep,
    SectionCaseInsensitiveSeps,
}

enum SplitBehavior {
    KeepEmptyParts,
    SkipEmptyParts,
}

enum NormalizationForm {
    NormalizationForm_D,
    NormalizationForm_C,
    NormalizationForm_KD,
    NormalizationForm_KC,
}


struct String {
    swap(other: String),
    size() -> i32,
    count() -> i32,
    length() -> i32,
    is_empty() -> bool,
    resize(size: i32),
    resize(size: i32, fill_char: CharType),
    fill(c: CharType, size: i32) -> String?,
    chop(n: i32),
    capacity() -> i32,
    reserve(size: i32),
    squeeze(),
    unicode() -> Char?,
    data() -> Char?,
    data() -> Char?,
    const_data() -> Char?,
    detach(),
    is_detached() -> bool,
    is_shared_with(other: String) -> bool,
    clear(),
    at(i: i32) -> Char,
    front() -> Char,
    front() -> CharRef,
    back() -> Char,
    back() -> CharRef,
    arg(a: i64, fieldwidth: i32, base: i32, fill_char: CharType) -> String,
    arg(a: qulonglong, fieldwidth: i32, base: i32, fill_char: CharType) -> String,
    arg(a: long, fieldwidth: i32, base: i32, fill_char: CharType) -> String,
    arg(a: ulong, fieldwidth: i32, base: i32, fill_char: CharType) -> String,
    arg(a: i32, field_width: i32, base: i32, fill_char: CharType) -> String,
    arg(a: uint, field_width: i32, base: i32, fill_char: CharType) -> String,
    arg(a: short, field_width: i32, base: i32, fill_char: CharType) -> String,
    arg(a: ushort, field_width: i32, base: i32, fill_char: CharType) -> String,
    arg(a: double, field_width: i32, fmt: char, prec: i32, fill_char: CharType) -> String,
    arg(a: char, field_width: i32, fill_char: CharType) -> String,
    arg(a: CharType, field_width: i32, fill_char: CharType) -> String,
    arg(a: String, field_width: i32, fill_char: CharType) -> String,
    arg(a: StringViewType, field_width: i32, fill_char: CharType) -> String,
    arg(a: Latin1StringType, field_width: i32, fill_char: CharType) -> String,
    arg(a1: String, a2: String) -> String,
    arg(a1: String, a2: String, a3: String) -> String,
    arg(a1: String, a2: String, a3: String, a4: String) -> String,
    arg(a1: String, a2: String, a3: String, a4: String, a5: String) -> String,
    arg(a1: String, a2: String, a3: String, a4: String, a5: String, a6: String) -> String,
    arg(a1: String, a2: String, a3: String, a4: String, a5: String, a6: String, a7: String) -> String,
    arg(a1: String, a2: String, a3: String, a4: String, a5: String, a6: String, a7: String, a8: String) -> String,
    arg(a1: String, a2: String, a3: String, a4: String, a5: String, a6: String, a7: String, a8: String, a9: String) -> String,
    vsprintf(format: &char, ap: va_list) -> String?,
    sprintf(format: &char) -> String?,
    [static] vasprintf(format: &char, ap: va_list) -> String,
    [static] asprintf(format: &char) -> String,
    index_of(c: CharType, from: i32, cs: Rute::CaseSensitivity) -> i32,
    index_of(s: String, from: i32, cs: Rute::CaseSensitivity) -> i32,
    index_of(s: Latin1StringType, from: i32, cs: Rute::CaseSensitivity) -> i32,
    index_of(s: &StringRefType, from: i32, cs: Rute::CaseSensitivity) -> i32,
    last_index_of(c: CharType, from: i32, cs: Rute::CaseSensitivity) -> i32,
    last_index_of(s: String, from: i32, cs: Rute::CaseSensitivity) -> i32,
    last_index_of(s: Latin1StringType, from: i32, cs: Rute::CaseSensitivity) -> i32,
    last_index_of(s: &StringRefType, from: i32, cs: Rute::CaseSensitivity) -> i32,
    contains(c: CharType, cs: Rute::CaseSensitivity) -> bool,
    contains(s: String, cs: Rute::CaseSensitivity) -> bool,
    contains(s: Latin1StringType, cs: Rute::CaseSensitivity) -> bool,
    contains(s: &StringRefType, cs: Rute::CaseSensitivity) -> bool,
    count(c: CharType, cs: Rute::CaseSensitivity) -> i32,
    count(s: String, cs: Rute::CaseSensitivity) -> i32,
    count(s: &StringRefType, cs: Rute::CaseSensitivity) -> i32,
    index_of(arg0: &RegExpType, from: i32) -> i32,
    last_index_of(arg0: &RegExpType, from: i32) -> i32,
    contains(rx: &RegExpType) -> bool,
    count(arg0: &RegExpType) -> i32,
    index_of(arg0: &RegExpType, from: i32) -> i32,
    last_index_of(arg0: &RegExpType, from: i32) -> i32,
    contains(rx: &RegExpType) -> bool,
    index_of(re: &RegularExpressionType, from: i32) -> i32,
    index_of(re: &RegularExpressionType, from: i32, rmatch: &RegularExpressionMatchType) -> i32,
    last_index_of(re: &RegularExpressionType, from: i32) -> i32,
    last_index_of(re: &RegularExpressionType, from: i32, rmatch: &RegularExpressionMatchType) -> i32,
    contains(re: &RegularExpressionType) -> bool,
    contains(re: &RegularExpressionType, match: &RegularExpressionMatchType) -> bool,
    count(re: &RegularExpressionType) -> i32,
    section(sep: CharType, start: i32, end: i32, flags: SectionFlags) -> String,
    section(in_sep: String, start: i32, end: i32, flags: SectionFlags) -> String,
    section(reg: &RegExpType, start: i32, end: i32, flags: SectionFlags) -> String,
    section(re: &RegularExpressionType, start: i32, end: i32, flags: SectionFlags) -> String,
    left(n: i32) -> String,
    right(n: i32) -> String,
    mid(position: i32, n: i32) -> String,
    chopped(n: i32) -> String,
    left_ref(n: i32) -> StringRef,
    right_ref(n: i32) -> StringRef,
    mid_ref(position: i32, n: i32) -> StringRef,
    starts_with(s: String, cs: Rute::CaseSensitivity) -> bool,
    starts_with(s: &StringRefType, cs: Rute::CaseSensitivity) -> bool,
    starts_with(s: StringViewType, cs: Rute::CaseSensitivity) -> bool,
    starts_with(s: Latin1StringType, cs: Rute::CaseSensitivity) -> bool,
    starts_with(c: CharType, cs: Rute::CaseSensitivity) -> bool,
    ends_with(s: String, cs: Rute::CaseSensitivity) -> bool,
    ends_with(s: &StringRefType, cs: Rute::CaseSensitivity) -> bool,
    ends_with(s: StringViewType, cs: Rute::CaseSensitivity) -> bool,
    ends_with(s: Latin1StringType, cs: Rute::CaseSensitivity) -> bool,
    ends_with(c: CharType, cs: Rute::CaseSensitivity) -> bool,
    left_justified(width: i32, fill: CharType, trunc: bool) -> String,
    right_justified(width: i32, fill: CharType, trunc: bool) -> String,
    to_lower() -> String,
    to_upper() -> String,
    to_case_folded() -> String,
    simplified() -> String,
    to_html_escaped() -> String,
    insert(i: i32, c: CharType) -> String?,
    insert(i: i32, uc: &CharType, len: i32) -> String?,
    insert(i: i32, s: String) -> String?,
    insert(i: i32, s: &StringRefType) -> String?,
    insert(i: i32, s: Latin1StringType) -> String?,
    append(c: CharType) -> String?,
    append(uc: &CharType, len: i32) -> String?,
    append(s: String) -> String?,
    append(s: &StringRefType) -> String?,
    append(s: Latin1StringType) -> String?,
    prepend(c: CharType) -> String?,
    prepend(uc: &CharType, len: i32) -> String?,
    prepend(s: String) -> String?,
    prepend(s: &StringRefType) -> String?,
    prepend(s: Latin1StringType) -> String?,
    remove(i: i32, len: i32) -> String?,
    remove(c: CharType, cs: Rute::CaseSensitivity) -> String?,
    remove(s: String, cs: Rute::CaseSensitivity) -> String?,
    replace(i: i32, len: i32, after: CharType) -> String?,
    replace(i: i32, len: i32, s: &CharType, slen: i32) -> String?,
    replace(i: i32, len: i32, after: String) -> String?,
    replace(before: CharType, after: CharType, cs: Rute::CaseSensitivity) -> String?,
    replace(before: &CharType, blen: i32, after: &CharType, alen: i32, cs: Rute::CaseSensitivity) -> String?,
    replace(before: Latin1StringType, after: Latin1StringType, cs: Rute::CaseSensitivity) -> String?,
    replace(before: Latin1StringType, after: String, cs: Rute::CaseSensitivity) -> String?,
    replace(before: String, after: Latin1StringType, cs: Rute::CaseSensitivity) -> String?,
    replace(before: String, after: String, cs: Rute::CaseSensitivity) -> String?,
    replace(c: CharType, after: String, cs: Rute::CaseSensitivity) -> String?,
    replace(c: CharType, after: Latin1StringType, cs: Rute::CaseSensitivity) -> String?,
    replace(rx: &RegExpType, after: String) -> String?,
    remove(rx: &RegExpType) -> String?,
    replace(re: &RegularExpressionType, after: String) -> String?,
    remove(re: &RegularExpressionType) -> String?,
    split(sep: String, behavior: String::SplitBehavior, cs: Rute::CaseSensitivity) -> StringList,
    split_ref(sep: String, behavior: String::SplitBehavior, cs: Rute::CaseSensitivity) -> [StringRef],
    split(sep: CharType, behavior: String::SplitBehavior, cs: Rute::CaseSensitivity) -> StringList,
    split_ref(sep: CharType, behavior: String::SplitBehavior, cs: Rute::CaseSensitivity) -> [StringRef],
    split(sep: &RegExpType, behavior: String::SplitBehavior) -> StringList,
    split_ref(sep: &RegExpType, behavior: String::SplitBehavior) -> [StringRef],
    split(sep: &RegularExpressionType, behavior: String::SplitBehavior) -> StringList,
    split_ref(sep: &RegularExpressionType, behavior: String::SplitBehavior) -> [StringRef],
    normalized(mode: String::NormalizationForm, version: Char::UnicodeVersion) -> String,
    repeated(times: i32) -> String,
    utf16() -> ushort?,
    to_latin1() -> ByteArray,
    to_utf8() -> ByteArray,
    to_local8_bit() -> ByteArray,
    to_ucs4() -> [uint],
    [static] from_latin1(str: &char, size: i32) -> String,
    [static] from_utf8(str: &char, size: i32) -> String,
    [static] from_local8_bit(str: &char, size: i32) -> String,
    [static] from_latin1(str: &ByteArrayType) -> String,
    [static] from_utf8(str: &ByteArrayType) -> String,
    [static] from_local8_bit(str: &ByteArrayType) -> String,
    [static] from_utf16(arg0: &ushort, size: i32) -> String,
    [static] from_ucs4(arg0: &uint, size: i32) -> String,
    [static] from_raw_data(arg0: &CharType, size: i32) -> String,
    [static] from_utf16(str: &char16_t, size: i32) -> String,
    [static] from_ucs4(str: &char32_t, size: i32) -> String,
    to_w_char_array(array: &wchar_t) -> i32,
    [static] from_w_char_array(string: &wchar_t, size: i32) -> String,
    set_raw_data(unicode: &CharType, size: i32) -> String?,
    set_unicode(unicode: &CharType, size: i32) -> String?,
    set_utf16(utf16: &ushort, size: i32) -> String?,
    compare(s: String, cs: Rute::CaseSensitivity) -> i32,
    compare(other: Latin1StringType, cs: Rute::CaseSensitivity) -> i32,
    [static] compare(s1: String, s2: String, cs: Rute::CaseSensitivity) -> i32,
    [static] compare(s1: String, s2: Latin1StringType, cs: Rute::CaseSensitivity) -> i32,
    [static] compare(s1: Latin1StringType, s2: String, cs: Rute::CaseSensitivity) -> i32,
    compare(s: &StringRefType, cs: Rute::CaseSensitivity) -> i32,
    [static] compare(s1: String, s2: &StringRefType, arg0: Rute::CaseSensitivity) -> i32,
    locale_aware_compare(s: String) -> i32,
    [static] locale_aware_compare(s1: String, s2: String) -> i32,
    locale_aware_compare(s: &StringRefType) -> i32,
    [static] locale_aware_compare(s1: String, s2: &StringRefType) -> i32,
    to_short(ok: &bool, base: i32) -> short,
    to_u_short(ok: &bool, base: i32) -> ushort,
    to_int(ok: &bool, base: i32) -> i32,
    to_u_int(ok: &bool, base: i32) -> uint,
    to_long(ok: &bool, base: i32) -> long,
    to_u_long(ok: &bool, base: i32) -> ulong,
    to_long_long(ok: &bool, base: i32) -> i64,
    to_u_long_long(ok: &bool, base: i32) -> qulonglong,
    to_float(ok: &bool) -> f32,
    to_double(ok: &bool) -> double,
    set_num(arg0: short, base: i32) -> String?,
    set_num(arg0: ushort, base: i32) -> String?,
    set_num(arg0: i32, base: i32) -> String?,
    set_num(arg0: uint, base: i32) -> String?,
    set_num(arg0: long, base: i32) -> String?,
    set_num(arg0: ulong, base: i32) -> String?,
    set_num(arg0: i64, base: i32) -> String?,
    set_num(arg0: qulonglong, base: i32) -> String?,
    set_num(arg0: f32, f: char, prec: i32) -> String?,
    set_num(arg0: double, f: char, prec: i32) -> String?,
    [static] number(arg0: i32, base: i32) -> String,
    [static] number(arg0: uint, base: i32) -> String,
    [static] number(arg0: long, base: i32) -> String,
    [static] number(arg0: ulong, base: i32) -> String,
    [static] number(arg0: i64, base: i32) -> String,
    [static] number(arg0: qulonglong, base: i32) -> String,
    [static] number(arg0: double, f: char, prec: i32) -> String,
    prepend(s: &char) -> String?,
    prepend(s: &ByteArrayType) -> String?,
    append(s: &char) -> String?,
    append(s: &ByteArrayType) -> String?,
    insert(i: i32, s: &char) -> String?,
    insert(i: i32, s: &ByteArrayType) -> String?,
    begin() -> iterator,
    begin() -> const_iterator,
    cbegin() -> const_iterator,
    const_begin() -> const_iterator,
    end() -> iterator,
    end() -> const_iterator,
    cend() -> const_iterator,
    const_end() -> const_iterator,
    rbegin() -> reverse_iterator,
    rend() -> reverse_iterator,
    rbegin() -> const_reverse_iterator,
    rend() -> const_reverse_iterator,
    crbegin() -> const_reverse_iterator,
    crend() -> const_reverse_iterator,
    push_back(c: CharType),
    push_back(s: String),
    push_front(c: CharType),
    push_front(s: String),
    shrink_to_fit(),
    is_null() -> bool,
    is_simple_text() -> bool,
    is_right_to_left() -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
