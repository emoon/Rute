/// 
/// You can use QDirIterator to navigate entries of a directory one at a time.
/// It is similar to QDir::entryList() and QDir::entryInfoList(), but because
/// it lists entries one at a time instead of all at once, it scales better
/// and is more suitable for large directories. It also supports listing
/// directory contents recursively, and following symbolic links. Unlike
/// QDir::entryList(), QDirIterator does not support sorting.
/// 
/// The QDirIterator constructor takes a QDir or a directory as
/// argument. After construction, the iterator is located before the first
/// directory entry. Here's how to iterate over all the entries sequentially:
/// 
/// Here's how to find and read all files filtered by name, recursively:
/// 
/// The next() function returns the path to the next directory entry and
/// advances the iterator. You can also call filePath() to get the current
/// file path without advancing the iterator. The fileName() function returns
/// only the name of the file, similar to how QDir::entryList() works. You can
/// also call fileInfo() to get a QFileInfo for the current entry.
/// 
/// Unlike Qt's container iterators, QDirIterator is uni-directional (i.e.,
/// you cannot iterate directories in reverse order) and does not allow random
/// access.
/// 
/// **See also:** [`Dir`]
/// [`Dir::entry_list`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct DirIterator {
    /// 
    /// Advances the iterator to the next entry, and returns the file path of this
    /// new entry. If hasNext() returns `false,` this function does nothing, and
    /// returns an empty QString.
    /// 
    /// You can call fileName() or filePath() to get the current entry file name
    /// or path, or fileInfo() to get a QFileInfo for the current entry.
    /// 
    /// **See also:** [`has_next()`]
    /// [`file_name()`]
    /// [`file_path()`]
    /// [`file_info()`]
    next() -> String,
    /// 
    /// Returns `true` if there is at least one more entry in the directory;
    /// otherwise, false is returned.
    /// 
    /// **See also:** [`next()`]
    /// [`file_name()`]
    /// [`file_path()`]
    /// [`file_info()`]
    has_next() -> bool,
    /// 
    /// Returns the file name for the current directory entry, without the path
    /// prepended.
    /// 
    /// This function is convenient when iterating a single directory. When using
    /// the QDirIterator::Subdirectories flag, you can use filePath() to get the
    /// full path.
    /// 
    /// **See also:** [`file_path()`]
    /// [`file_info()`]
    file_name() -> String,
    /// 
    /// Returns the full file path for the current directory entry.
    /// 
    /// **See also:** [`file_info()`]
    /// [`file_name()`]
    file_path() -> String,
    /// 
    /// Returns a QFileInfo for the current directory entry.
    /// 
    /// **See also:** [`file_path()`]
    /// [`file_name()`]
    file_info() -> FileInfo,
    /// 
    /// Returns the base directory of the iterator.
    path() -> String,
}

[org_name(QDirIterator)]
enum IteratorFlag {
    /// The default value, representing no flags. The iterator will return entries for the assigned path.
    NoIteratorFlags,
    /// When combined with Subdirectories, this flag enables iterating through all subdirectories of the assigned path, following all symbolic links. Symbolic link loops (e.g., "link" => "." or "link" => "..") are automatically detected and ignored.
    FollowSymlinks,
    /// List entries inside all subdirectories as well.
    Subdirectories,
}

// vim: syntax=rust expandtab ts=4 sw=4
