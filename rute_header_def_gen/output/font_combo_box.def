/// 
/// The combobox is populated with an alphabetized list of font
/// family names, such as Arial, Helvetica, and Times New Roman.
/// Family names are displayed using the actual font when possible.
/// For fonts such as Symbol, where the name is not representable in
/// the font itself, a sample of the font is displayed next to the
/// family name.
/// 
/// QFontComboBox is often used in toolbars, in conjunction with a
/// QComboBox for controlling the font size and two [QToolButton](QToolButton)
/// 
/// for bold and italic.
/// 
/// When the user selects a new font, the currentFontChanged() signal
/// is emitted in addition to currentIndexChanged().
/// 
/// Call setWritingSystem() to tell QFontComboBox to show only fonts
/// that support a given writing system, and setFontFilters() to
/// filter out certain types of fonts as e.g. non scalable fonts or
/// monospaced fonts.
/// 
/// ![Screenshot of QFontComboBox on Windows Vista](windowsvista-fontcombobox.png)
/// 
/// **See also:** [`ComboBox`]
/// [`Font`]
/// [`FontInfo`]
/// [`FontMetrics`]
/// [`FontDatabase`]
/// {Character Map Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct FontComboBox : ComboBox {
    set_writing_system(arg0: FontDatabase::WritingSystem),
    /// 
    /// If *script* is QFontDatabase::Any (the default), all fonts are
    /// listed.
    /// 
    /// **See also:** fontFilters
    writing_system() -> FontDatabase::WritingSystem,
    set_font_filters(filters: FontComboBox::FontFilters),
    /// 
    /// By default, all fonts are listed.
    /// 
    /// **See also:** writingSystem
    font_filters() -> FontComboBox::FontFilters,
    /// 
    /// **See also:** currentIndex
    /// currentText
    /// 
    /// This signal is emitted whenever the current font changes, with
    /// the new *font.*
    /// 
    /// **See also:** currentFont
    current_font() -> Font,
    /// 
    [event] size_hint() -> Size,
    set_current_font(f: &FontType),
    /// 
    /// This signal is emitted whenever the current font changes, with
    /// the new *font.*
    /// 
    /// **See also:** currentFont
    [signal] current_font_changed(f: &FontType),
    /// 
    [event] event(e: *EventType) -> bool,
}

[org_name(QFontComboBox)]
enum FontFilter {
    /// Show all fonts
    AllFonts = 0,
    /// Show scalable fonts
    ScalableFonts = 1,
    /// Show non scalable fonts
    NonScalableFonts = 2,
    /// Show monospaced fonts
    MonospacedFonts = 4,
    /// Show proportional fonts
    ProportionalFonts = 8,
}

// vim: syntax=rust expandtab ts=4 sw=4
