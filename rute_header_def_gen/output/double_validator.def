/// 
/// QDoubleValidator provides an upper bound, a lower bound, and a
/// limit on the number of digits after the decimal point. It does not
/// provide a fixup() function.
/// 
/// You can set the acceptable range in one call with setRange(), or
/// with setBottom() and setTop(). Set the number of decimal places
/// with setDecimals(). The validate() function returns the validation
/// state.
/// 
/// QDoubleValidator uses its locale() to interpret the number. For example,
/// in the German locale, will be accepted as the fractional number
/// 1.234. In Arabic locales, QDoubleValidator will accept Arabic digits.
/// 
/// **Note**: The QLocale::NumberOptions set on the locale() also affect the
/// way the number is interpreted. For example, since QLocale::RejectGroupSeparator
/// is not set by default, the validator will accept group separators. It is thus
/// recommended to use QLocale::toDouble() to obtain the numeric value.
/// 
/// **See also:** [`IntValidator`]
/// [`RegExpValidator`]
/// [`Locale::to_double`]
/// {Line Edits Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct DoubleValidator : Validator {
    /// 
    /// Returns [Acceptable](Acceptable)
    /// if the string *input* contains a double
    /// that is within the valid range and is in the correct format.
    /// 
    /// Returns [Intermediate](Intermediate)
    /// if *input* contains a double that is
    /// outside the range or is in the wrong format; e.g. with too many
    /// digits after the decimal point or is empty.
    /// 
    /// Returns [Invalid](Invalid)
    /// if the *input* is not a double.
    /// 
    /// Note: If the valid range consists of just positive doubles (e.g. 0.0 to 100.0)
    /// and *input* is a negative double then [Invalid](Invalid)
    /// is returned. If notation()
    /// is set to StandardNotation, and the input contains more digits before the
    /// decimal point than a double in the valid range may have, [Invalid](Invalid)
    /// is returned.
    /// If notation() is ScientificNotation, and the input is not in the valid range,
    /// [Intermediate](Intermediate)
    /// is returned. The value may yet become valid by changing the exponent.
    /// 
    /// By default, the *pos* parameter is not used by this validator.
    [event] validate(arg0: String, arg1: &i32) -> Validator::State,
    /// 
    /// Sets the validator to accept doubles from *minimum* to *maximum*
    /// inclusive, with at most *decimals* digits after the decimal
    /// point.
    [event] set_range(bottom: double, top: double, decimals: i32),
    set_bottom(arg0: double),
    set_top(arg0: double),
    set_decimals(arg0: i32),
    set_notation(arg0: DoubleValidator::Notation),
    /// 
    /// By default, this property contains a value of -infinity.
    /// 
    /// **See also:** [`set_range()`]
    bottom() -> double,
    /// 
    /// By default, this property contains a value of infinity.
    /// 
    /// **See also:** [`set_range()`]
    top() -> double,
    /// 
    /// By default, this property contains a value of 1000.
    /// 
    /// **See also:** [`set_range()`]
    decimals() -> i32,
    /// 
    /// By default, this property is set to ScientificNotation.
    /// 
    /// **See also:** Notation
    notation() -> DoubleValidator::Notation,
    [signal] bottom_changed(bottom: double),
    [signal] top_changed(top: double),
    [signal] decimals_changed(decimals: i32),
    [signal] notation_changed(notation: DoubleValidator::Notation),
}

[org_name(QDoubleValidator)]
enum Notation {
    StandardNotation,
    ScientificNotation,
}

// vim: syntax=rust expandtab ts=4 sw=4
