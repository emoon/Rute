/// 
/// QPaintDeviceWindow is like a regular QWindow, with the added functionality
/// of being a paint device too. Whenever the content needs to be updated,
/// the virtual paintEvent() function is called. Subclasses, that reimplement
/// this function, can then simply open a QPainter on the window.
/// 
/// **Note**: This class cannot directly be used in applications. It rather serves
/// as a base for subclasses like QOpenGLWindow.
/// 
/// **See also:** QOpenGLWindow
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct PaintDeviceWindow : Window, PaintDevice {
    /// 
    /// Marks the entire window as dirty and schedules a repaint.
    /// 
    /// **Note**: Subsequent calls to this function before the next paint
    /// event will get ignored.
    /// 
    /// **Note**: For non-exposed windows the update is deferred until the
    /// window becomes exposed again.
    /// 
    /// Marks the *rect* of the window as dirty and schedules a repaint.
    /// 
    /// **Note**: Subsequent calls to this function before the next paint
    /// event will get ignored, but *rect* is added to the region to update.
    /// 
    /// **Note**: For non-exposed windows the update is deferred until the
    /// window becomes exposed again.
    /// 
    /// Marks the *region* of the window as dirty and schedules a repaint.
    /// 
    /// **Note**: Subsequent calls to this function before the next paint
    /// event will get ignored, but *region* is added to the region to update.
    /// 
    /// **Note**: For non-exposed windows the update is deferred until the
    /// window becomes exposed again.
    update(rect: &RectType),
    /// 
    /// Marks the entire window as dirty and schedules a repaint.
    /// 
    /// **Note**: Subsequent calls to this function before the next paint
    /// event will get ignored.
    /// 
    /// **Note**: For non-exposed windows the update is deferred until the
    /// window becomes exposed again.
    /// 
    /// Marks the *rect* of the window as dirty and schedules a repaint.
    /// 
    /// **Note**: Subsequent calls to this function before the next paint
    /// event will get ignored, but *rect* is added to the region to update.
    /// 
    /// **Note**: For non-exposed windows the update is deferred until the
    /// window becomes exposed again.
    /// 
    /// Marks the *region* of the window as dirty and schedules a repaint.
    /// 
    /// **Note**: Subsequent calls to this function before the next paint
    /// event will get ignored, but *region* is added to the region to update.
    /// 
    /// **Note**: For non-exposed windows the update is deferred until the
    /// window becomes exposed again.
    update(region: &RegionType),
    /// 
    /// Marks the entire window as dirty and schedules a repaint.
    /// 
    /// **Note**: Subsequent calls to this function before the next paint
    /// event will get ignored.
    /// 
    /// **Note**: For non-exposed windows the update is deferred until the
    /// window becomes exposed again.
    /// 
    /// Marks the *rect* of the window as dirty and schedules a repaint.
    /// 
    /// **Note**: Subsequent calls to this function before the next paint
    /// event will get ignored, but *rect* is added to the region to update.
    /// 
    /// **Note**: For non-exposed windows the update is deferred until the
    /// window becomes exposed again.
    /// 
    /// Marks the *region* of the window as dirty and schedules a repaint.
    /// 
    /// **Note**: Subsequent calls to this function before the next paint
    /// event will get ignored, but *region* is added to the region to update.
    /// 
    /// **Note**: For non-exposed windows the update is deferred until the
    /// window becomes exposed again.
    update(),
    /// 
    /// Handles paint events passed in the *event* parameter.
    /// 
    /// The default implementation does nothing. Reimplement this function to
    /// perform painting. If necessary, the dirty area is retrievable from
    /// the *event.*
    [event] paint_event(event: *PaintEventType),
    [event] expose_event(arg0: *ExposeEventType),
    [event] event(event: *EventType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
