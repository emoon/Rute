/// 
/// A point is specified by a x coordinate and an y coordinate which
/// can be accessed using the x() and y() functions. The coordinates
/// of the point are specified using floating point numbers for
/// accuracy. The isNull() function returns `true` if both x and y are
/// set to 0.0. The coordinates can be set (or altered) using the setX()
/// and setY() functions, or alternatively the rx() and ry() functions which
/// return references to the coordinates (allowing direct
/// manipulation).
/// 
/// Given a point *p,* the following statements are all equivalent:
/// 
/// A QPointF object can also be used as a vector: Addition and
/// subtraction are defined as for vectors (each component is added
/// separately). A QPointF object can also be divided or multiplied by
/// an `int` or a `qreal.`
/// 
/// In addition, the QPointF class provides a constructor converting a
/// QPoint object into a QPointF object, and a corresponding toPoint()
/// function which returns a QPoint copy of *this* point. Finally,
/// QPointF objects can be streamed as well as compared.
/// 
/// **See also:** [`Point`]
/// [`PolygonF`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct PointF {
    /// 
    /// Returns the sum of the absolute values of x() and y(),
    /// traditionally known as the of the vector from
    /// the origin to the point.
    /// 
    /// **See also:** [`Point::manhattan_length`]
    manhattan_length() -> f32,
    /// 
    /// Returns `true` if both the x and y coordinates are set to 0.0 (ignoring
    /// the sign); otherwise returns `false.`
    is_null() -> bool,
    /// 
    /// Returns the x coordinate of this point.
    /// 
    /// **See also:** [`set_x()`]
    /// [`rx()`]
    x() -> f32,
    /// 
    /// Returns the y coordinate of this point.
    /// 
    /// **See also:** [`set_y()`]
    /// [`ry()`]
    y() -> f32,
    /// 
    /// Sets the x coordinate of this point to the given *x* coordinate.
    /// 
    /// **See also:** [`x()`]
    /// [`set_y()`]
    set_x(x: f32),
    /// 
    /// Sets the y coordinate of this point to the given *y* coordinate.
    /// 
    /// **See also:** [`y()`]
    /// [`set_x()`]
    set_y(y: f32),
    /// 
    /// Returns a reference to the x coordinate of this point.
    /// 
    /// Using a reference makes it possible to directly manipulate x. For example:
    /// 
    /// **See also:** [`x()`]
    /// [`set_x()`]
    rx() -> f32?,
    /// 
    /// Returns a reference to the y coordinate of this point.
    /// 
    /// Using a reference makes it possible to directly manipulate y. For example:
    /// 
    /// **See also:** [`y()`]
    /// [`set_y()`]
    ry() -> f32?,
    /// 
    /// Returns the dot product of *p1* and *p2.*
    [static] dot_product(p1: &PointFType, p2: &PointFType) -> f32,
    /// 
    /// Rounds the coordinates of this point to the nearest integer, and
    /// returns a QPoint object with the rounded coordinates.
    /// 
    /// **See also:** [`q_point_f()`]
    to_point() -> Point,
}

// vim: syntax=rust expandtab ts=4 sw=4
