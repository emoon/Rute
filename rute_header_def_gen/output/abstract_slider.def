/// 
/// The class is designed as a common super class for widgets like
/// QScrollBar, QSlider and QDial.
/// 
/// Here are the main properties of the class:
/// 
/// * [value:](value:)
/// The bounded integer that QAbstractSlider maintains.
/// * [minimum:](minimum:)
/// The lowest possible value.
/// * [maximum:](maximum:)
/// The highest possible value.
/// * [singleStep:](singleStep:)
/// The smaller of two natural steps that an abstract sliders provides and typically corresponds to the user pressing an arrow key.
/// * [pageStep:](pageStep:)
/// The larger of two natural steps that an abstract slider provides and typically corresponds to the user pressing PageUp or PageDown.
/// * [tracking:](tracking:)
/// Whether slider tracking is enabled.
/// * [sliderPosition:](sliderPosition:)
/// The current position of the slider. If [tracking](tracking)
/// is enabled (the default), this is identical to [value.](value.)
/// 
/// Unity (1) may be viewed as a third step size. setValue() lets you
/// set the current value to any integer in the allowed range, not
/// just minimum() + *n* * singleStep() for integer values of *n.*
/// Some widgets may allow the user to set any value at all; others
/// may just provide multiples of singleStep() or pageStep().
/// 
/// QAbstractSlider emits a comprehensive set of signals:
/// 
/// * Signal
/// * Emitted when
/// * [valueChanged()](valueChanged())
/// 
/// * the value has changed. The [tracking](tracking)
/// determines whether this signal is emitted during user interaction.
/// * [sliderPressed()](sliderPressed())
/// 
/// * the user starts to drag the slider.
/// * [sliderMoved()](sliderMoved())
/// 
/// * the user drags the slider.
/// * [sliderReleased()](sliderReleased())
/// 
/// * the user releases the slider.
/// * [actionTriggered()](actionTriggered())
/// 
/// * a slider action was triggerd.
/// * [rangeChanged()](rangeChanged())
/// 
/// * a the range has changed.
/// 
/// QAbstractSlider provides a virtual sliderChange() function that is
/// well suited for updating the on-screen representation of
/// sliders. By calling triggerAction(), subclasses trigger slider
/// actions. Two helper functions QStyle::sliderPositionFromValue() and
/// QStyle::sliderValueFromPosition() help subclasses and styles to map
/// screen coordinates to logical range values.
/// 
/// **See also:** QAbstractSpinBox
/// QSlider
/// QDial
/// QScrollBar
/// {Sliders Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QAbstractSlider)]
enum SliderAction {
    SliderNoAction,
    SliderSingleStepAdd,
    SliderSingleStepSub,
    SliderPageStepAdd,
    SliderPageStepSub,
    SliderToMinimum,
    SliderToMaximum,
    SliderMove,
}

[org_name(QAbstractSlider)]
enum SliderChange {
    SliderRangeChange,
    SliderOrientationChange,
    SliderStepsChange,
    SliderValueChange,
}

struct AbstractSlider : Widget {
    /// 
    /// The orientation must be [Qt::Vertical](Qt::Vertical)
    /// (the default) or [Qt::Horizontal.](Qt::Horizontal.)
    /// 
    orientation() -> Rute::Orientation,
    set_minimum(arg0: i32),
    /// 
    /// When setting this property, the [maximum](maximum)
    /// is adjusted if
    /// necessary to ensure that the range remains valid. Also the
    /// slider's current value is adjusted to be within the new range.
    /// 
    minimum() -> i32,
    set_maximum(arg0: i32),
    /// 
    /// When setting this property, the [minimum](minimum)
    /// is adjusted if
    /// necessary to ensure that the range remains valid. Also the
    /// slider's current value is adjusted to be within the new range.
    /// 
    maximum() -> i32,
    set_single_step(arg0: i32),
    /// 
    /// The smaller of two natural steps that an
    /// abstract sliders provides and typically corresponds to the user
    /// pressing an arrow key.
    /// 
    /// If the property is modified during an auto repeating key event, behavior
    /// is undefined.
    /// 
    /// **See also:** pageStep
    single_step() -> i32,
    set_page_step(arg0: i32),
    /// 
    /// The larger of two natural steps that an abstract slider provides
    /// and typically corresponds to the user pressing PageUp or PageDown.
    /// 
    /// **See also:** singleStep
    page_step() -> i32,
    set_tracking(enable: bool),
    has_tracking() -> bool,
    set_slider_down(arg0: bool),
    is_slider_down() -> bool,
    set_slider_position(arg0: i32),
    /// 
    /// If [tracking](tracking)
    /// is enabled (the default), this is identical to [value.](value.)
    /// 
    slider_position() -> i32,
    set_inverted_appearance(arg0: bool),
    /// 
    /// If this property is `false` (the default), the minimum and maximum will
    /// be shown in its classic position for the inherited widget. If the
    /// value is true, the minimum and maximum appear at their opposite location.
    /// 
    /// Note: This property makes most sense for sliders and dials. For
    /// scroll bars, the visual effect of the scroll bar subcontrols depends on
    /// whether or not the styles understand inverted appearance; most styles
    /// ignore this property for scroll bars.
    inverted_appearance() -> bool,
    /// 
    /// This signal is emitted when the slider value has changed, with the
    /// new slider *value* as argument.
    /// 
    /// The slider forces the value to be within the legal range: [minimum](minimum)
    /// <= `value` <= [maximum.](maximum.)
    /// 
    /// Changing the value also changes the [sliderPosition.](sliderPosition.)
    /// 
    value() -> i32,
    set_value(arg0: i32),
    set_orientation(arg0: Rute::Orientation),
    /// 
    /// Sets the slider's minimum to *min* and its maximum to *max.*
    /// 
    /// If *max* is smaller than *min,* *min* becomes the only legal
    /// value.
    /// 
    /// **See also:** minimum
    /// maximum
    set_range(min: i32, max: i32),
    /// 
    /// This signal is emitted when the slider value has changed, with the
    /// new slider *value* as argument.
    [signal] value_changed(value: i32),
    /// 
    /// This signal is emitted when the user presses the slider with the
    /// mouse, or programmatically when setSliderDown(true) is called.
    /// 
    /// **See also:** sliderReleased()
    /// sliderMoved()
    /// isSliderDown()
    [signal] slider_pressed(),
    /// 
    /// This signal is emitted when sliderDown is true and the slider moves. This
    /// usually happens when the user is dragging the slider. The *value*
    /// is the new slider position.
    /// 
    /// This signal is emitted even when tracking is turned off.
    /// 
    /// **See also:** setTracking()
    /// valueChanged()
    /// isSliderDown()
    /// sliderPressed()
    /// sliderReleased()
    [signal] slider_moved(position: i32),
    /// 
    /// This signal is emitted when the user releases the slider with the
    /// mouse, or programmatically when setSliderDown(false) is called.
    /// 
    /// **See also:** sliderPressed()
    /// sliderMoved()
    /// sliderDown
    [signal] slider_released(),
    /// 
    /// This signal is emitted when the slider range has changed, with *min* being the new minimum, and *max* being the new maximum.
    /// 
    /// **See also:** minimum
    /// maximum
    [signal] range_changed(min: i32, max: i32),
    /// 
    /// This signal is emitted when the slider action *action* is
    /// triggered. Actions are [SliderSingleStepAdd,](SliderSingleStepAdd,)
    /// [SliderSingleStepSub,](SliderSingleStepSub,)
    /// [SliderPageStepAdd,](SliderPageStepAdd,)
    /// [SliderPageStepSub,](SliderPageStepSub,)
    /// 
    /// [SliderToMinimum,](SliderToMinimum,)
    /// [SliderToMaximum,](SliderToMaximum,)
    /// and [SliderMove.](SliderMove.)
    /// 
    /// When the signal is emitted, the [sliderPosition](sliderPosition)
    /// has been
    /// adjusted according to the action, but the [value](value)
    /// has not yet
    /// been propagated (meaning the valueChanged() signal was not yet
    /// emitted), and the visual display has not been updated. In slots
    /// connected to this signal you can thus safely adjust any action by
    /// calling setSliderPosition() yourself, based on both the action and
    /// the slider's value.
    /// 
    /// **See also:** triggerAction()
    [signal] action_triggered(action: i32),
    /// 
    [event] event(e: *EventType) -> bool,
    /// Sets action *action* to be triggered repetitively in intervals
    /// of *repeatTime,* after an initial delay of *thresholdTime.*
    /// 
    /// **See also:** triggerAction()
    /// repeatAction()
    set_repeat_action(action: AbstractSlider::SliderAction, threshold_time: i32, repeat_time: i32),
    /// 
    /// Returns the current repeat action.
    /// **See also:** setRepeatAction()
    repeat_action() -> AbstractSlider::SliderAction,
    /// 
    /// Reimplement this virtual function to track slider changes such as
    /// [SliderRangeChange,](SliderRangeChange,)
    /// [SliderOrientationChange,](SliderOrientationChange,)
    /// [SliderStepsChange,](SliderStepsChange,)
    /// or [SliderValueChange.](SliderValueChange.)
    /// The default
    /// implementation only updates the display and ignores the *change*
    /// parameter.
    [event] slider_change(change: AbstractSlider::SliderChange),
    /// 
    [event] key_press_event(ev: *KeyEventType),
    /// 
    [event] timer_event(arg0: *TimerEventType),
    [event] wheel_event(e: *WheelEventType),
    /// 
    [event] change_event(e: *EventType),
}

// vim: syntax=rust expandtab ts=4 sw=4
