/// 
/// Text cursors are objects that are used to access and modify the
/// contents and underlying structure of text documents via a
/// programming interface that mimics the behavior of a cursor in a
/// text editor. QTextCursor contains information about both the
/// cursor's position within a QTextDocument and any selection that it
/// has made.
/// 
/// QTextCursor is modeled on the way a text cursor behaves in a text
/// editor, providing a programmatic means of performing standard
/// actions through the user interface. A document can be thought of
/// as a single string of characters. The cursor's current position()
/// then is always either *between* two consecutive characters in the
/// string, or else *before* the very first character or *after* the
/// very last character in the string. Documents can also contain
/// tables, lists, images, and other objects in addition to text but,
/// from the developer's point of view, the document can be treated as
/// one long string. Some portions of that string can be considered
/// to lie within particular blocks (e.g. paragraphs), or within a
/// table's cell, or a list's item, or other structural elements. When
/// we refer to we mean the character immediately
/// *before* the cursor position() in the document. Similarly, the
/// is the block that contains the cursor position().
/// 
/// A QTextCursor also has an anchor() position. The text that is
/// between the anchor() and the position() is the selection. If
/// anchor() == position() there is no selection.
/// 
/// The cursor position can be changed programmatically using
/// setPosition() and movePosition(); the latter can also be used to
/// select text. For selections see selectionStart(), selectionEnd(),
/// hasSelection(), clearSelection(), and removeSelectedText().
/// 
/// If the position() is at the start of a block, atBlockStart()
/// returns `true;` and if it is at the end of a block, atBlockEnd() returns
/// true. The format of the current character is returned by
/// charFormat(), and the format of the current block is returned by
/// blockFormat().
/// 
/// Formatting can be applied to the current text document using the
/// setCharFormat(), mergeCharFormat(), setBlockFormat() and
/// mergeBlockFormat() functions. The 'set' functions will replace the
/// cursor's current character or block format, while the 'merge'
/// functions add the given format properties to the cursor's current
/// format. If the cursor has a selection, the given format is applied
/// to the current selection. Note that when only a part of a block is
/// selected, the block format is applied to the entire block. The text
/// at the current character position can be turned into a list using
/// createList().
/// 
/// Deletions can be achieved using deleteChar(),
/// deletePreviousChar(), and removeSelectedText().
/// 
/// Text strings can be inserted into the document with the insertText()
/// function, blocks (representing new paragraphs) can be inserted with
/// insertBlock().
/// 
/// Existing fragments of text can be inserted with insertFragment() but,
/// if you want to insert pieces of text in various formats, it is usually
/// still easier to use insertText() and supply a character format.
/// 
/// Various types of higher-level structure can also be inserted into the
/// document with the cursor:
/// 
/// * Lists are ordered sequences of block elements that are decorated with bullet points or symbols. These are inserted in a specified format with insertList().
/// * Tables are inserted with the insertTable() function, and can be given an optional format. These contain an array of cells that can be traversed using the cursor.
/// * Inline images are inserted with insertImage(). The image to be used can be specified in an image format, or by name.
/// * Frames are inserted by calling insertFrame() with a specified format.
/// 
/// Actions can be grouped (i.e. treated as a single action for
/// undo/redo) using beginEditBlock() and endEditBlock().
/// 
/// Cursor movements are limited to valid cursor positions. In Latin
/// writing this is between any two consecutive characters in the
/// text, before the first character, or after the last character. In
/// some other writing systems cursor movements are limited to
/// (e.g. a syllable in Devanagari, or a base letter plus
/// diacritics). Functions such as movePosition() and deleteChar()
/// limit cursor movement to these valid positions.
/// 
/// **See also:** {Rich Text Processing}
/// 
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TextCursor {
    /// 
    /// Swaps this text cursor instance with *other.* This function is
    /// very fast and never fails.
    swap(other: &TextCursorType),
    /// 
    /// Returns `true` if the cursor is null; otherwise returns `false.` A null
    /// cursor is created by the default constructor.
    is_null() -> bool,
    /// 
    /// Moves the cursor to the absolute position in the document specified by
    /// *pos* using a `MoveMode` specified by *m.* The cursor is positioned
    /// between characters.
    /// 
    /// **See also:** [`position()`]
    /// [`move_position()`]
    /// [`anchor()`]
    set_position(pos: i32, mode: TextCursor::MoveMode),
    /// 
    /// Returns the absolute position of the cursor within the document.
    /// The cursor is positioned between characters.
    /// 
    /// **See also:** [`set_position()`]
    /// [`move_position()`]
    /// [`anchor()`]
    /// [`position_in_block()`]
    /// 
    /// Returns the relative position of the cursor within the block.
    /// The cursor is positioned between characters.
    /// 
    /// This is equivalent to `position() - block().position()` .
    /// 
    /// **See also:** [`position()`]
    position() -> i32,
    /// 
    /// Returns the relative position of the cursor within the block.
    /// The cursor is positioned between characters.
    /// 
    /// This is equivalent to `position() - block().position()` .
    /// 
    /// **See also:** [`position()`]
    position_in_block() -> i32,
    /// 
    /// Returns the anchor position; this is the same as position() unless
    /// there is a selection in which case position() marks one end of the
    /// selection and anchor() marks the other end. Just like the cursor
    /// position, the anchor position is between characters.
    /// 
    /// **See also:** [`position()`]
    /// [`set_position()`]
    /// [`move_position()`]
    /// [`selection_start()`]
    /// [`selection_end()`]
    anchor() -> i32,
    /// 
    /// Inserts *text* at the current position, using the current
    /// character format.
    /// 
    /// If there is a selection, the selection is deleted and replaced by
    /// *text,* for example:
    /// This clears any existing selection, selects the word at the cursor
    /// (i.e. from position() forward), and replaces the selection with
    /// the phrase .
    /// 
    /// Any ASCII linefeed characters (\\n) in the inserted text are transformed
    /// into unicode block separators, corresponding to insertBlock() calls.
    /// 
    /// **See also:** [`char_format()`]
    /// [`has_selection()`]
    /// 
    /// **Overloads**
    /// Inserts *text* at the current position with the given *format.*
    insert_text(text: String),
    /// 
    /// Inserts *text* at the current position, using the current
    /// character format.
    /// 
    /// If there is a selection, the selection is deleted and replaced by
    /// *text,* for example:
    /// This clears any existing selection, selects the word at the cursor
    /// (i.e. from position() forward), and replaces the selection with
    /// the phrase .
    /// 
    /// Any ASCII linefeed characters (\\n) in the inserted text are transformed
    /// into unicode block separators, corresponding to insertBlock() calls.
    /// 
    /// **See also:** [`char_format()`]
    /// [`has_selection()`]
    /// 
    /// **Overloads**
    /// Inserts *text* at the current position with the given *format.*
    [org_name(insertText)]
    insert_text_2(text: String, format: &TextCharFormatType),
    /// 
    /// Moves the cursor by performing the given *operation* *n* times, using the specified
    /// *mode,* and returns `true` if all operations were completed successfully; otherwise
    /// returns `false.`
    /// 
    /// For example, if this function is repeatedly used to seek to the end of the next
    /// word, it will eventually fail when the end of the document is reached.
    /// 
    /// By default, the move operation is performed once ( *n* = 1).
    /// 
    /// If *mode* is `KeepAnchor,` the cursor selects the text it moves
    /// over. This is the same effect that the user achieves when they
    /// hold down the Shift key and move the cursor with the cursor keys.
    /// 
    /// **See also:** [`set_visual_navigation()`]
    move_position(op: TextCursor::MoveOperation, arg0: TextCursor::MoveMode, n: i32) -> bool,
    /// 
    /// Returns `true` if the cursor does visual navigation; otherwise
    /// returns `false.`
    /// 
    /// Visual navigation means skipping over hidden text paragraphs. The
    /// default is false.
    /// 
    /// **See also:** [`set_visual_navigation()`]
    /// [`move_position()`]
    visual_navigation() -> bool,
    /// 
    /// Sets visual navigation to *b.*
    /// 
    /// Visual navigation means skipping over hidden text paragraphs. The
    /// default is false.
    /// 
    /// **See also:** [`visual_navigation()`]
    /// [`move_position()`]
    set_visual_navigation(b: bool),
    /// 
    /// Sets the visual x position for vertical cursor movements to *x.*
    /// 
    /// The vertical movement x position is cleared automatically when the cursor moves horizontally, and kept
    /// unchanged when the cursor moves vertically. The mechanism allows the cursor to move up and down on a
    /// visually straight line with proportional fonts, and to gently over short lines.
    /// 
    /// A value of -1 indicates no predefined x position. It will then be set automatically the next time the
    /// cursor moves up or down.
    /// 
    /// **See also:** [`vertical_movement_x()`]
    set_vertical_movement_x(x: i32),
    /// 
    /// Returns the visual x position for vertical cursor movements.
    /// 
    /// A value of -1 indicates no predefined x position. It will then be set automatically the next time the
    /// cursor moves up or down.
    /// 
    /// **See also:** [`set_vertical_movement_x()`]
    vertical_movement_x() -> i32,
    /// 
    /// Defines whether the cursor should keep its current position when text gets inserted at the current position of the
    /// cursor.
    /// 
    /// If *b* is true, the cursor keeps its current position when text gets inserted at the positing of the cursor.
    /// If *b* is false, the cursor moves along with the inserted text.
    /// 
    /// The default is false.
    /// 
    /// Note that a cursor always moves when text is inserted before the current position of the cursor, and it
    /// always keeps its position when text is inserted after the current position of the cursor.
    /// 
    /// **See also:** [`keep_position_on_insert()`]
    set_keep_position_on_insert(b: bool),
    /// 
    /// Returns whether the cursor should keep its current position when text gets inserted at the position of the
    /// cursor.
    /// 
    /// The default is false;
    /// 
    /// **See also:** [`set_keep_position_on_insert()`]
    keep_position_on_insert() -> bool,
    /// 
    /// If there is no selected text, deletes the character *at* the
    /// current cursor position; otherwise deletes the selected text.
    /// 
    /// **See also:** [`delete_previous_char()`]
    /// [`has_selection()`]
    /// [`clear_selection()`]
    delete_char(),
    /// 
    /// If there is no selected text, deletes the character *before* the
    /// current cursor position; otherwise deletes the selected text.
    /// 
    /// **See also:** [`delete_char()`]
    /// [`has_selection()`]
    /// [`clear_selection()`]
    delete_previous_char(),
    /// 
    /// Selects text in the document according to the given *selection.*
    /// 
    /// If the selection spans over table cells, *firstRow* is populated
    /// with the number of the first row in the selection, *firstColumn*
    /// with the number of the first column in the selection, and *numRows* and *numColumns* with the number of rows and columns in
    /// the selection. If the selection does not span any table cells the
    /// results are harmless but undefined.
    /// 
    /// Returns the start of the selection or position() if the
    /// cursor doesn't have a selection.
    /// 
    /// **See also:** [`selection_end()`]
    /// [`position()`]
    /// [`anchor()`]
    /// 
    /// Returns the end of the selection or position() if the cursor
    /// doesn't have a selection.
    /// 
    /// **See also:** [`selection_start()`]
    /// [`position()`]
    /// [`anchor()`]
    /// 
    /// Returns the current selection's text (which may be empty). This
    /// only returns the text, with no rich text formatting information.
    /// If you want a document fragment (i.e. formatted rich text) use
    /// selection() instead.
    /// 
    /// **Note**: If the selection obtained from an editor spans a line break,
    /// the text will contain a Unicode U+2029 paragraph separator character
    /// instead of a newline `\n` character. Use QString::replace() to
    /// replace these characters with newlines.
    /// 
    /// Returns the current selection (which may be empty) with all its
    /// formatting information. If you just want the selected text (i.e.
    /// plain text) use selectedText() instead.
    /// 
    /// **Note**: Unlike QTextDocumentFragment::toPlainText(),
    /// selectedText() may include special unicode characters such as
    /// QChar::ParagraphSeparator.
    /// 
    /// **See also:** [`TextDocumentFragment::to_plain_text`]
    select(selection: TextCursor::SelectionType),
    /// 
    /// Returns `true` if the cursor contains a selection; otherwise returns `false.`
    has_selection() -> bool,
    /// 
    /// Returns `true` if the cursor contains a selection that is not simply a
    /// range from selectionStart() to selectionEnd(); otherwise returns `false.`
    /// 
    /// Complex selections are ones that span at least two cells in a table;
    /// their extent is specified by selectedTableCells().
    has_complex_selection() -> bool,
    /// 
    /// If there is a selection, its content is deleted; otherwise does
    /// nothing.
    /// 
    /// **See also:** [`has_selection()`]
    remove_selected_text(),
    /// 
    /// Clears the current selection by setting the anchor to the cursor position.
    /// 
    /// Note that it does **not** delete the text of the selection.
    /// 
    /// **See also:** [`remove_selected_text()`]
    /// [`has_selection()`]
    clear_selection(),
    /// 
    /// Returns the start of the selection or position() if the
    /// cursor doesn't have a selection.
    /// 
    /// **See also:** [`selection_end()`]
    /// [`position()`]
    /// [`anchor()`]
    selection_start() -> i32,
    /// 
    /// Returns the end of the selection or position() if the cursor
    /// doesn't have a selection.
    /// 
    /// **See also:** [`selection_start()`]
    /// [`position()`]
    /// [`anchor()`]
    selection_end() -> i32,
    /// 
    /// Returns the current selection's text (which may be empty). This
    /// only returns the text, with no rich text formatting information.
    /// If you want a document fragment (i.e. formatted rich text) use
    /// selection() instead.
    /// 
    /// **Note**: If the selection obtained from an editor spans a line break,
    /// the text will contain a Unicode U+2029 paragraph separator character
    /// instead of a newline `\n` character. Use QString::replace() to
    /// replace these characters with newlines.
    selected_text() -> String,
    /// 
    /// Returns the start of the selection or position() if the
    /// cursor doesn't have a selection.
    /// 
    /// **See also:** [`selection_end()`]
    /// [`position()`]
    /// [`anchor()`]
    /// 
    /// Returns the end of the selection or position() if the cursor
    /// doesn't have a selection.
    /// 
    /// **See also:** [`selection_start()`]
    /// [`position()`]
    /// [`anchor()`]
    /// 
    /// Returns the current selection (which may be empty) with all its
    /// formatting information. If you just want the selected text (i.e.
    /// plain text) use selectedText() instead.
    /// 
    /// **Note**: Unlike QTextDocumentFragment::toPlainText(),
    /// selectedText() may include special unicode characters such as
    /// QChar::ParagraphSeparator.
    /// 
    /// **See also:** [`TextDocumentFragment::to_plain_text`]
    selection() -> TextDocumentFragment,
    /// 
    /// If the selection spans over table cells, *firstRow* is populated
    /// with the number of the first row in the selection, *firstColumn*
    /// with the number of the first column in the selection, and *numRows* and *numColumns* with the number of rows and columns in
    /// the selection. If the selection does not span any table cells the
    /// results are harmless but undefined.
    selected_table_cells(first_row: *i32, num_rows: *i32, first_column: *i32, num_columns: *i32),
    /// 
    /// Returns the block that contains the cursor.
    /// 
    /// Returns the block format of the block the cursor is in.
    /// 
    /// **See also:** [`set_block_format()`]
    /// [`char_format()`]
    /// 
    /// Returns the block character format of the block the cursor is in.
    /// 
    /// The block char format is the format used when inserting text at the
    /// beginning of an empty block.
    /// 
    /// **See also:** [`set_block_char_format()`]
    /// 
    /// Returns the number of the block the cursor is in, or 0 if the cursor is invalid.
    /// 
    /// Note that this function only makes sense in documents without complex objects such
    /// as tables or frames.
    block() -> TextBlock,
    /// 
    /// Returns the format of the character immediately before the cursor
    /// position(). If the cursor is positioned at the beginning of a text
    /// block that is not empty then the format of the character
    /// immediately after the cursor is returned.
    /// 
    /// **See also:** [`insert_text()`]
    /// [`block_format()`]
    char_format() -> TextCharFormat,
    /// 
    /// Sets the cursor's current character format to the given *format.* If the cursor has a selection, the given *format* is
    /// applied to the current selection.
    /// 
    /// **See also:** [`has_selection()`]
    /// [`merge_char_format()`]
    set_char_format(format: &TextCharFormatType),
    /// 
    /// Merges the cursor's current character format with the properties
    /// described by format *modifier.* If the cursor has a selection,
    /// this function applies all the properties set in *modifier* to all
    /// the character formats that are part of the selection.
    /// 
    /// **See also:** [`has_selection()`]
    /// [`set_char_format()`]
    merge_char_format(modifier: &TextCharFormatType),
    /// 
    /// Returns the block format of the block the cursor is in.
    /// 
    /// **See also:** [`set_block_format()`]
    /// [`char_format()`]
    block_format() -> TextBlockFormat,
    /// 
    /// Sets the block format of the current block (or all blocks that
    /// are contained in the selection) to *format.*
    /// 
    /// **See also:** [`block_format()`]
    /// [`merge_block_format()`]
    set_block_format(format: &TextBlockFormatType),
    /// 
    /// Modifies the block format of the current block (or all blocks that
    /// are contained in the selection) with the block format specified by
    /// *modifier.*
    /// 
    /// **See also:** [`set_block_format()`]
    /// [`block_format()`]
    merge_block_format(modifier: &TextBlockFormatType),
    /// 
    /// Returns the block character format of the block the cursor is in.
    /// 
    /// The block char format is the format used when inserting text at the
    /// beginning of an empty block.
    /// 
    /// **See also:** [`set_block_char_format()`]
    block_char_format() -> TextCharFormat,
    /// 
    /// Sets the block char format of the current block (or all blocks that
    /// are contained in the selection) to *format.*
    /// 
    /// **See also:** [`block_char_format()`]
    set_block_char_format(format: &TextCharFormatType),
    /// 
    /// Modifies the block char format of the current block (or all blocks that
    /// are contained in the selection) with the block format specified by
    /// *modifier.*
    /// 
    /// **See also:** [`set_block_char_format()`]
    merge_block_char_format(modifier: &TextCharFormatType),
    /// 
    /// Returns `true` if the cursor is at the start of a block; otherwise
    /// returns `false.`
    /// 
    /// **See also:** [`at_block_end()`]
    /// [`at_start()`]
    at_block_start() -> bool,
    /// 
    /// Returns `true` if the cursor is at the end of a block; otherwise
    /// returns `false.`
    /// 
    /// **See also:** [`at_block_start()`]
    /// [`at_end()`]
    at_block_end() -> bool,
    /// 
    /// Returns `true` if the cursor is at the start of the document;
    /// otherwise returns `false.`
    /// 
    /// **See also:** [`at_block_start()`]
    /// [`at_end()`]
    at_start() -> bool,
    /// 
    /// Returns `true` if the cursor is at the end of the document;
    /// otherwise returns `false.`
    /// 
    /// **See also:** [`at_start()`]
    /// [`at_block_end()`]
    at_end() -> bool,
    /// 
    /// Inserts a new empty block at the cursor position() with the
    /// current blockFormat() and charFormat().
    /// 
    /// **See also:** [`set_block_format()`]
    /// 
    /// **Overloads**
    /// Inserts a new empty block at the cursor position() with block
    /// format *format* and the current charFormat() as block char format.
    /// 
    /// **See also:** [`set_block_format()`]
    /// 
    /// **Overloads**
    /// Inserts a new empty block at the cursor position() with block
    /// format *format* and *charFormat* as block char format.
    /// 
    /// **See also:** [`set_block_format()`]
    insert_block(),
    /// 
    /// Inserts a new empty block at the cursor position() with the
    /// current blockFormat() and charFormat().
    /// 
    /// **See also:** [`set_block_format()`]
    /// 
    /// **Overloads**
    /// Inserts a new empty block at the cursor position() with block
    /// format *format* and the current charFormat() as block char format.
    /// 
    /// **See also:** [`set_block_format()`]
    /// 
    /// **Overloads**
    /// Inserts a new empty block at the cursor position() with block
    /// format *format* and *charFormat* as block char format.
    /// 
    /// **See also:** [`set_block_format()`]
    [org_name(insertBlock)]
    insert_block_2(format: &TextBlockFormatType),
    /// 
    /// Inserts a new empty block at the cursor position() with the
    /// current blockFormat() and charFormat().
    /// 
    /// **See also:** [`set_block_format()`]
    /// 
    /// **Overloads**
    /// Inserts a new empty block at the cursor position() with block
    /// format *format* and the current charFormat() as block char format.
    /// 
    /// **See also:** [`set_block_format()`]
    /// 
    /// **Overloads**
    /// Inserts a new empty block at the cursor position() with block
    /// format *format* and *charFormat* as block char format.
    /// 
    /// **See also:** [`set_block_format()`]
    [org_name(insertBlock)]
    insert_block_3(format: &TextBlockFormatType, char_format: &TextCharFormatType),
    /// 
    /// Inserts a new block at the current position and makes it the first
    /// list item of a newly created list with the given *format.* Returns
    /// the created list.
    /// 
    /// **See also:** [`current_list()`]
    /// [`create_list()`]
    /// [`insert_block()`]
    /// 
    /// **Overloads**
    /// Inserts a new block at the current position and makes it the first
    /// list item of a newly created list with the given *style.* Returns
    /// the created list.
    /// 
    /// **See also:** [`current_list()`]
    /// [`create_list()`]
    /// [`insert_block()`]
    insert_list(format: &TextListFormatType) -> TextList?,
    /// 
    /// Inserts a new block at the current position and makes it the first
    /// list item of a newly created list with the given *format.* Returns
    /// the created list.
    /// 
    /// **See also:** [`current_list()`]
    /// [`create_list()`]
    /// [`insert_block()`]
    /// 
    /// **Overloads**
    /// Inserts a new block at the current position and makes it the first
    /// list item of a newly created list with the given *style.* Returns
    /// the created list.
    /// 
    /// **See also:** [`current_list()`]
    /// [`create_list()`]
    /// [`insert_block()`]
    [org_name(insertList)]
    insert_list_2(style: TextListFormat::Style) -> TextList?,
    /// 
    /// Creates and returns a new list with the given *format,* and makes the
    /// current paragraph the cursor is in the first list item.
    /// 
    /// **See also:** [`insert_list()`]
    /// [`current_list()`]
    /// 
    /// **Overloads**
    /// Creates and returns a new list with the given *style,* making the
    /// cursor's current paragraph the first list item.
    /// 
    /// The style to be used is defined by the QTextListFormat::Style enum.
    /// 
    /// **See also:** [`insert_list()`]
    /// [`current_list()`]
    create_list(format: &TextListFormatType) -> TextList?,
    /// 
    /// Creates and returns a new list with the given *format,* and makes the
    /// current paragraph the cursor is in the first list item.
    /// 
    /// **See also:** [`insert_list()`]
    /// [`current_list()`]
    /// 
    /// **Overloads**
    /// Creates and returns a new list with the given *style,* making the
    /// cursor's current paragraph the first list item.
    /// 
    /// The style to be used is defined by the QTextListFormat::Style enum.
    /// 
    /// **See also:** [`insert_list()`]
    /// [`current_list()`]
    [org_name(createList)]
    create_list_2(style: TextListFormat::Style) -> TextList?,
    /// 
    /// Returns the current list if the cursor position() is inside a
    /// block that is part of a list; otherwise returns 0.
    /// 
    /// **See also:** [`insert_list()`]
    /// [`create_list()`]
    current_list() -> TextList?,
    /// 
    /// **Overloads**
    /// Creates a new table with the given number of *rows* and *columns,*
    /// inserts it at the current cursor position() in the document, and returns
    /// the table object. The cursor is moved to the beginning of the first cell.
    /// 
    /// There must be at least one row and one column in the table.
    /// 
    /// **See also:** [`current_table()`]
    /// 
    /// Creates a new table with the given number of *rows* and *columns*
    /// in the specified *format,* inserts it at the current cursor position()
    /// in the document, and returns the table object. The cursor is moved to
    /// the beginning of the first cell.
    /// 
    /// There must be at least one row and one column in the table.
    /// 
    /// **See also:** [`current_table()`]
    insert_table(rows: i32, cols: i32, format: &TextTableFormatType) -> TextTable?,
    /// 
    /// **Overloads**
    /// Creates a new table with the given number of *rows* and *columns,*
    /// inserts it at the current cursor position() in the document, and returns
    /// the table object. The cursor is moved to the beginning of the first cell.
    /// 
    /// There must be at least one row and one column in the table.
    /// 
    /// **See also:** [`current_table()`]
    /// 
    /// Creates a new table with the given number of *rows* and *columns*
    /// in the specified *format,* inserts it at the current cursor position()
    /// in the document, and returns the table object. The cursor is moved to
    /// the beginning of the first cell.
    /// 
    /// There must be at least one row and one column in the table.
    /// 
    /// **See also:** [`current_table()`]
    [org_name(insertTable)]
    insert_table_2(rows: i32, cols: i32) -> TextTable?,
    /// 
    /// Returns a pointer to the current table if the cursor position()
    /// is inside a block that is part of a table; otherwise returns 0.
    /// 
    /// **See also:** [`insert_table()`]
    current_table() -> TextTable?,
    /// 
    /// Inserts a frame with the given *format* at the current cursor position(),
    /// moves the cursor position() inside the frame, and returns the frame.
    /// 
    /// If the cursor holds a selection, the whole selection is moved inside the
    /// frame.
    /// 
    /// **See also:** [`has_selection()`]
    insert_frame(format: &TextFrameFormatType) -> TextFrame?,
    /// 
    /// Returns a pointer to the current frame. Returns 0 if the cursor is invalid.
    /// 
    /// **See also:** [`insert_frame()`]
    current_frame() -> TextFrame?,
    /// 
    /// Inserts the text *fragment* at the current position().
    insert_fragment(fragment: &TextDocumentFragmentType),
    insert_html(html: String),
    /// 
    /// **Overloads**
    /// Inserts the image defined by the given *format* at the cursor's current position
    /// with the specified *alignment.*
    /// 
    /// **See also:** [`position()`]
    /// 
    /// Inserts the image defined by *format* at the current position().
    /// 
    /// **Overloads**
    /// Convenience method for inserting the image with the given *name* at the
    /// current position().
    /// 
    /// 
    /// **Overloads**
    /// Convenience function for inserting the given *image* with an optional
    /// *name* at the current position().
    insert_image(format: &TextImageFormatType, alignment: TextFrameFormat::Position),
    /// 
    /// **Overloads**
    /// Inserts the image defined by the given *format* at the cursor's current position
    /// with the specified *alignment.*
    /// 
    /// **See also:** [`position()`]
    /// 
    /// Inserts the image defined by *format* at the current position().
    /// 
    /// **Overloads**
    /// Convenience method for inserting the image with the given *name* at the
    /// current position().
    /// 
    /// 
    /// **Overloads**
    /// Convenience function for inserting the given *image* with an optional
    /// *name* at the current position().
    [org_name(insertImage)]
    insert_image_2(format: &TextImageFormatType),
    /// 
    /// **Overloads**
    /// Inserts the image defined by the given *format* at the cursor's current position
    /// with the specified *alignment.*
    /// 
    /// **See also:** [`position()`]
    /// 
    /// Inserts the image defined by *format* at the current position().
    /// 
    /// **Overloads**
    /// Convenience method for inserting the image with the given *name* at the
    /// current position().
    /// 
    /// 
    /// **Overloads**
    /// Convenience function for inserting the given *image* with an optional
    /// *name* at the current position().
    [org_name(insertImage)]
    insert_image_3(name: String),
    /// 
    /// **Overloads**
    /// Inserts the image defined by the given *format* at the cursor's current position
    /// with the specified *alignment.*
    /// 
    /// **See also:** [`position()`]
    /// 
    /// Inserts the image defined by *format* at the current position().
    /// 
    /// **Overloads**
    /// Convenience method for inserting the image with the given *name* at the
    /// current position().
    /// 
    /// 
    /// **Overloads**
    /// Convenience function for inserting the given *image* with an optional
    /// *name* at the current position().
    [org_name(insertImage)]
    insert_image_4(image: &ImageType, name: String),
    /// 
    /// Indicates the start of a block of editing operations on the
    /// document that should appear as a single operation from an
    /// undo/redo point of view.
    /// 
    /// For example:
    /// 
    /// The call to undo() will cause both insertions to be undone,
    /// causing both and to be removed.
    /// 
    /// It is possible to nest calls to beginEditBlock and endEditBlock. The
    /// top-most pair will determine the scope of the undo/redo operation.
    /// 
    /// **See also:** [`end_edit_block()`]
    begin_edit_block(),
    /// 
    /// Like beginEditBlock() indicates the start of a block of editing operations
    /// that should appear as a single operation for undo/redo. However unlike
    /// beginEditBlock() it does not start a new block but reverses the previous call to
    /// endEditBlock() and therefore makes following operations part of the previous edit block created.
    /// 
    /// For example:
    /// 
    /// The call to undo() will cause all three insertions to be undone.
    /// 
    /// **See also:** [`begin_edit_block()`]
    /// [`end_edit_block()`]
    join_previous_edit_block(),
    /// 
    /// Indicates the end of a block of editing operations on the document
    /// that should appear as a single operation from an undo/redo point
    /// of view.
    /// 
    /// **See also:** [`begin_edit_block()`]
    end_edit_block(),
    /// 
    /// Returns `true` if this cursor and *other* are copies of each other, i.e.
    /// one of them was created as a copy of the other and neither has moved since.
    /// This is much stricter than equality.
    /// 
    /// **See also:** [`operator()`]
    /// [`operator()`]
    is_copy_of(other: &TextCursorType) -> bool,
    /// 
    /// Returns the number of the block the cursor is in, or 0 if the cursor is invalid.
    /// 
    /// Note that this function only makes sense in documents without complex objects such
    /// as tables or frames.
    block_number() -> i32,
    /// 
    /// Returns the position of the cursor within its containing line.
    /// 
    /// Note that this is the column number relative to a wrapped line,
    /// not relative to the block (i.e. the paragraph).
    /// 
    /// You probably want to call positionInBlock() instead.
    /// 
    /// **See also:** [`position_in_block()`]
    column_number() -> i32,
    /// 
    /// Returns the document this cursor is associated with.
    document() -> TextDocument?,
}

[org_name(QTextCursor)]
enum MoveMode {
    /// Moves the anchor to the same position as the cursor itself.
    MoveAnchor,
    /// Keeps the anchor where it is. If the anchor() is kept where it is and the position() is moved, the text in between will be selected.
    KeepAnchor,
}

[org_name(QTextCursor)]
enum MoveOperation {
    /// Keep the cursor where it is
    NoMove,
    /// Move to the start of the document.
    Start,
    /// Move up one line.
    Up,
    /// Move to the start of the current line.
    StartOfLine,
    /// Move to the start of the current block.
    StartOfBlock,
    /// Move to the start of the current word.
    StartOfWord,
    /// Move to the start of the previous block.
    PreviousBlock,
    /// Move to the previous character.
    PreviousCharacter,
    /// Move to the beginning of the previous word.
    PreviousWord,
    /// Move left one character.
    Left,
    /// Move left one word.
    WordLeft,
    /// Move to the end of the document.
    End,
    /// Move down one line.
    Down,
    /// Move to the end of the current line.
    EndOfLine,
    /// Move to the end of the current word.
    EndOfWord,
    /// Move to the end of the current block.
    EndOfBlock,
    /// Move to the beginning of the next block.
    NextBlock,
    /// Move to the next character.
    NextCharacter,
    /// Move to the next word.
    NextWord,
    /// Move right one character.
    Right,
    /// Move right one word.
    WordRight,
    /// Move to the beginning of the next table cell inside the current table. If the current cell is the last cell in the row, the cursor will move to the first cell in the next row.
    NextCell,
    /// Move to the beginning of the previous table cell inside the current table. If the current cell is the first cell in the row, the cursor will move to the last cell in the previous row.
    PreviousCell,
    /// Move to the first new cell of the next row in the current table.
    NextRow,
    /// Move to the last cell of the previous row in the current table.
    PreviousRow,
}

[org_name(QTextCursor)]
enum SelectionType {
    /// Selects the word under the cursor. If the cursor is not positioned within a string of selectable characters, no text is selected.
    WordUnderCursor,
    /// Selects the line of text under the cursor.
    LineUnderCursor,
    /// Selects the block of text under the cursor.
    BlockUnderCursor,
    /// Selects the entire document.
    Document,
}

// vim: syntax=rust expandtab ts=4 sw=4
