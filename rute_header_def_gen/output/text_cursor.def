[org_name(QTextCursor)]
enum MoveMode {
    MoveAnchor,
    KeepAnchor,
}

[org_name(QTextCursor)]
enum MoveOperation {
    NoMove,
    Start,
    Up,
    StartOfLine,
    StartOfBlock,
    StartOfWord,
    PreviousBlock,
    PreviousCharacter,
    PreviousWord,
    Left,
    WordLeft,
    End,
    Down,
    EndOfLine,
    EndOfWord,
    EndOfBlock,
    NextBlock,
    NextCharacter,
    NextWord,
    Right,
    WordRight,
    NextCell,
    PreviousCell,
    NextRow,
    PreviousRow,
}

[org_name(QTextCursor)]
enum SelectionType {
    WordUnderCursor,
    LineUnderCursor,
    BlockUnderCursor,
    Document,
}


struct TextCursor {
    swap(other: &TextCursorType),
    is_null() -> bool,
    set_position(pos: i32, mode: TextCursor::MoveMode),
    position() -> i32,
    position_in_block() -> i32,
    anchor() -> i32,
    insert_text(text: String),
    insert_text(text: String, format: &TextCharFormatType),
    move_position(op: TextCursor::MoveOperation, arg0: TextCursor::MoveMode, n: i32) -> bool,
    visual_navigation() -> bool,
    set_visual_navigation(b: bool),
    set_vertical_movement_x(x: i32),
    vertical_movement_x() -> i32,
    set_keep_position_on_insert(b: bool),
    keep_position_on_insert() -> bool,
    delete_char(),
    delete_previous_char(),
    select(selection: TextCursor::SelectionType),
    has_selection() -> bool,
    has_complex_selection() -> bool,
    remove_selected_text(),
    clear_selection(),
    selection_start() -> i32,
    selection_end() -> i32,
    selected_text() -> String,
    selection() -> TextDocumentFragment,
    selected_table_cells(first_row: &i32, num_rows: &i32, first_column: &i32, num_columns: &i32),
    block() -> TextBlock,
    char_format() -> TextCharFormat,
    set_char_format(format: &TextCharFormatType),
    merge_char_format(modifier: &TextCharFormatType),
    block_format() -> TextBlockFormat,
    set_block_format(format: &TextBlockFormatType),
    merge_block_format(modifier: &TextBlockFormatType),
    block_char_format() -> TextCharFormat,
    set_block_char_format(format: &TextCharFormatType),
    merge_block_char_format(modifier: &TextCharFormatType),
    at_block_start() -> bool,
    at_block_end() -> bool,
    at_start() -> bool,
    at_end() -> bool,
    insert_block(),
    insert_block(format: &TextBlockFormatType),
    insert_block(format: &TextBlockFormatType, char_format: &TextCharFormatType),
    insert_list(format: &TextListFormatType) -> TextList?,
    insert_list(style: TextListFormat::Style) -> TextList?,
    create_list(format: &TextListFormatType) -> TextList?,
    create_list(style: TextListFormat::Style) -> TextList?,
    current_list() -> TextList?,
    insert_table(rows: i32, cols: i32, format: &TextTableFormatType) -> TextTable?,
    insert_table(rows: i32, cols: i32) -> TextTable?,
    current_table() -> TextTable?,
    insert_frame(format: &TextFrameFormatType) -> TextFrame?,
    current_frame() -> TextFrame?,
    insert_fragment(fragment: &TextDocumentFragmentType),
    insert_html(html: String),
    insert_image(format: &TextImageFormatType, alignment: TextFrameFormat::Position),
    insert_image(format: &TextImageFormatType),
    insert_image(name: String),
    insert_image(image: &ImageType, name: String),
    begin_edit_block(),
    join_previous_edit_block(),
    end_edit_block(),
    is_copy_of(other: &TextCursorType) -> bool,
    block_number() -> i32,
    column_number() -> i32,
    document() -> TextDocument?,
}

// vim: syntax=rust expandtab ts=4 sw=4
