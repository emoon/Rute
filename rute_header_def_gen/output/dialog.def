/// 
/// A dialog window is a top-level window mostly used for short-term
/// tasks and brief communications with the user. QDialogs may be
/// modal or modeless. QDialogs can
/// provide a [return value](%23return)
/// , and they can have [default buttons](%23default)
/// . QDialogs can also have a QSizeGrip in their
/// lower-right corner, using setSizeGripEnabled().
/// 
/// Note that QDialog (and any other widget that has type `Qt::Dialog)` uses
/// the parent widget slightly differently from other classes in Qt. A dialog is
/// always a top-level widget, but if it has a parent, its default location is
/// centered on top of the parent's top-level widget (if it is not top-level
/// itself). It will also share the parent's taskbar entry.
/// 
/// Use the overload of the QWidget::setParent() function to change
/// the ownership of a QDialog widget. This function allows you to
/// explicitly set the window flags of the reparented widget; using
/// the overloaded function will clear the window flags specifying the
/// window-system properties for the widget (in particular it will
/// reset the Qt::Dialog flag).
/// 
/// # Modal Dialogs
/// 
/// A **modal** dialog is a dialog that blocks input to other
/// visible windows in the same application. Dialogs that are used to
/// request a file name from the user or that are used to set
/// application preferences are usually modal. Dialogs can be
/// [application modal](Qt::ApplicationModal)
/// (the default) or
/// [window modal](Qt::WindowModal)
/// 
/// 
/// When an application modal dialog is opened, the user must finish
/// interacting with the dialog and close it before they can access
/// any other window in the application. Window modal dialogs only
/// block access to the window associated with the dialog, allowing
/// the user to continue to use other windows in an application.
/// 
/// The most common way to display a modal dialog is to call its
/// exec() function. When the user closes the dialog, exec() will
/// provide a useful [return value](%23return)
/// . Typically,
/// to get the dialog to close and return the appropriate value, we
/// connect a default button, e.g. **OK,** to the accept() slot and a
/// **Cancel** button to the reject() slot.
/// Alternatively you can call the done() slot with `Accepted` or
/// `Rejected.`
/// 
/// An alternative is to call setModal(true) or setWindowModality(),
/// then show(). Unlike exec(), show() returns control to the caller
/// immediately. Calling setModal(true) is especially useful for
/// progress dialogs, where the user must have the ability to interact
/// with the dialog, e.g. to cancel a long running operation. If you
/// use show() and setModal(true) together to perform a long operation,
/// you must call QApplication::processEvents() periodically during
/// processing to enable the user to interact with the dialog. (See
/// QProgressDialog.)
/// 
/// # Modeless Dialogs
/// 
/// A **modeless** dialog is a dialog that operates
/// independently of other windows in the same application. Find and
/// replace dialogs in word-processors are often modeless to allow the
/// user to interact with both the application's main window and with
/// the dialog.
/// 
/// Modeless dialogs are displayed using show(), which returns control
/// to the caller immediately.
/// 
/// If you invoke the [show()](QWidget::show())
/// function after hiding
/// a dialog, the dialog will be displayed in its original position. This is
/// because the window manager decides the position for windows that
/// have not been explicitly placed by the programmer. To preserve the
/// position of a dialog that has been moved by the user, save its position
/// in your [closeEvent()](QWidget::closeEvent())
/// handler and then
/// move the dialog to that position, before showing it again.
/// 
/// # Default Button
/// 
/// A dialog's *default* button is the button that's pressed when the
/// user presses Enter (Return). This button is used to signify that
/// the user accepts the dialog's settings and wants to close the
/// dialog. Use QPushButton::setDefault(), QPushButton::isDefault()
/// and QPushButton::autoDefault() to set and control the dialog's
/// default button.
/// 
/// # Escape Key
/// 
/// If the user presses the Esc key in a dialog, QDialog::reject()
/// will be called. This will cause the window to close: The [close event](QCloseEvent)
/// cannot be [ignored](QEvent::ignore())
/// 
/// 
/// # Extensibility
/// 
/// Extensibility is the ability to show the dialog in two ways: a
/// partial dialog that shows the most commonly used options, and a
/// full dialog that shows all the options. Typically an extensible
/// dialog will initially appear as a partial dialog, but with a
/// **More** toggle button. If the user presses the **More** button down,
/// the dialog is expanded. The [Extension Example](Extension%20Example)
/// shows how to achieve
/// extensible dialogs using Qt.
/// 
/// # Return Value (Modal Dialogs)
/// 
/// Modal dialogs are often used in situations where a return value is
/// required, e.g. to indicate whether the user pressed **OK** or
/// **Cancel.** A dialog can be closed by calling the accept() or the
/// reject() slots, and exec() will return `Accepted` or `Rejected`
/// as appropriate. The exec() call returns the result of the dialog.
/// The result is also available from result() if the dialog has not
/// been destroyed.
/// 
/// In order to modify your dialog's close behavior, you can reimplement
/// the functions accept(), reject() or done(). The
/// [closeEvent()](QWidget::closeEvent())
/// function should only be
/// reimplemented to preserve the dialog's position or to override the
/// standard close or reject behavior.
/// 
/// # Code Examples
/// 
/// A modal dialog:
/// 
/// A modeless dialog:
/// 
/// **See also:** QDialogButtonBox
/// QTabWidget
/// QWidget
/// QProgressDialog
/// {fowler}{GUI Design Handbook: Dialogs
/// Standard}
/// {Extension Example}
/// {Standard Dialogs Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QDialog)]
enum DialogCode {
    Rejected,
    Accepted,
}

struct Dialog : Widget {
    /// 
    /// In general returns the modal dialog's result code, `Accepted` or
    /// `Rejected.`
    /// 
    /// **Note**: When called on a QMessageBox instance, the returned value is a
    /// value of the [QMessageBox::StandardButton](QMessageBox::StandardButton)
    /// enum.
    /// 
    /// Do not call this function if the dialog was constructed with the
    /// Qt::WA_DeleteOnClose attribute.
    result() -> i32,
    /// 
    [event] set_visible(visible: bool),
    /// 
    /// If *orientation* is Qt::Horizontal, the extension will be displayed
    /// to the right of the dialog's main area. If *orientation* is
    /// Qt::Vertical, the extension will be displayed below the dialog's main
    /// area.
    /// 
    /// Instead of using this functionality, we recommend that you simply call
    /// show() or hide() on the part of the dialog that you want to use as an
    /// extension. See the [Extension Example](Extension%20Example)
    /// for details.
    /// 
    /// **See also:** setExtension()
    set_orientation(orientation: Rute::Orientation),
    /// 
    /// Returns the dialog's extension orientation.
    /// 
    /// Instead of using this functionality, we recommend that you simply call
    /// show() or hide() on the part of the dialog that you want to use as an
    /// extension. See the [Extension Example](Extension%20Example)
    /// for details.
    /// 
    /// **See also:** extension()
    orientation() -> Rute::Orientation,
    /// 
    /// Sets the widget, *extension,* to be the dialog's extension,
    /// deleting any previous extension. The dialog takes ownership of the
    /// extension. Note that if 0 is passed any existing extension will be
    /// deleted. This function must only be called while the dialog is hidden.
    /// 
    /// Instead of using this functionality, we recommend that you simply call
    /// show() or hide() on the part of the dialog that you want to use as an
    /// extension. See the [Extension Example](Extension%20Example)
    /// for details.
    /// 
    /// **See also:** showExtension()
    /// setOrientation()
    set_extension(extension: *WidgetType),
    /// 
    /// Returns the dialog's extension or 0 if no extension has been
    /// defined.
    /// 
    /// Instead of using this functionality, we recommend that you simply call
    /// show() or hide() on the part of the dialog that you want to use as an
    /// extension. See the [Extension Example](Extension%20Example)
    /// for details.
    /// 
    /// **See also:** showExtension()
    /// setOrientation()
    extension() -> Widget?,
    /// 
    [event] size_hint() -> Size,
    /// 
    [event] minimum_size_hint() -> Size,
    set_size_grip_enabled(arg0: bool),
    is_size_grip_enabled() -> bool,
    set_modal(modal: bool),
    /// 
    /// Sets the modal dialog's result code to *i.*
    /// 
    /// **Note**: We recommend that you use one of the values defined by
    /// QDialog::DialogCode.
    set_result(r: i32),
    /// 
    /// This signal is emitted when the dialog's *result* code has been
    /// set, either by the user or by calling done(), accept(), or
    /// reject().
    /// 
    /// Note that this signal is *not* emitted when hiding the dialog
    /// with hide() or setVisible(false). This includes deleting the
    /// dialog while it is visible.
    /// 
    /// **See also:** accepted()
    /// rejected()
    [signal] finished(result: i32),
    /// 
    /// This signal is emitted when the dialog has been accepted either by
    /// the user or by calling accept() or done() with the
    /// QDialog::Accepted argument.
    /// 
    /// Note that this signal is *not* emitted when hiding the dialog
    /// with hide() or setVisible(false). This includes deleting the
    /// dialog while it is visible.
    /// 
    /// **See also:** finished()
    /// rejected()
    [signal] accepted(),
    /// 
    /// This signal is emitted when the dialog has been rejected either by
    /// the user or by calling reject() or done() with the
    /// QDialog::Rejected argument.
    /// 
    /// Note that this signal is *not* emitted when hiding the dialog
    /// with hide() or setVisible(false). This includes deleting the
    /// dialog while it is visible.
    /// 
    /// **See also:** finished()
    /// accepted()
    [signal] rejected(),
    /// 
    /// Shows the dialog as a [window modal dialog](QDialog%23Modal%20Dialogs)
    /// 
    /// returning immediately.
    /// 
    /// **See also:** exec()
    /// show()
    /// result()
    /// setWindowModality()
    [event] open(),
    /// 
    /// Shows the dialog as a [modal dialog](QDialog%23Modal%20Dialogs)
    /// 
    /// blocking until the user closes it. The function returns a [DialogCode](DialogCode)
    /// result.
    /// 
    /// If the dialog is [application modal](Qt::ApplicationModal)
    /// , users cannot
    /// interact with any other window in the same application until they close
    /// the dialog. If the dialog is [window modal](Qt::ApplicationModal)
    /// , only
    /// interaction with the parent window is blocked while the dialog is open.
    /// By default, the dialog is application modal.
    /// 
    /// **See also:** open()
    /// show()
    /// result()
    /// setWindowModality()
    [event] exec() -> i32,
    /// 
    /// Closes the dialog and sets its result code to *r.* If this dialog
    /// is shown with exec(), done() causes the local event loop to finish,
    /// and exec() to return *r.*
    /// 
    /// As with QWidget::close(), done() deletes the dialog if the
    /// Qt::WA_DeleteOnClose flag is set. If the dialog is the application's
    /// main widget, the application terminates. If the dialog is the
    /// last window closed, the QApplication::lastWindowClosed() signal is
    /// emitted.
    /// 
    /// **See also:** accept()
    /// reject()
    /// QApplication::activeWindow()
    /// QCoreApplication::quit()
    [event] done(arg0: i32),
    /// 
    /// Hides the modal dialog and sets the result code to `Accepted.`
    /// 
    /// **See also:** reject()
    /// done()
    /// 
    /// This signal is emitted when the dialog has been accepted either by
    /// the user or by calling accept() or done() with the
    /// QDialog::Accepted argument.
    /// 
    /// Note that this signal is *not* emitted when hiding the dialog
    /// with hide() or setVisible(false). This includes deleting the
    /// dialog while it is visible.
    /// 
    /// **See also:** finished()
    /// rejected()
    [event] accept(),
    /// 
    /// Hides the modal dialog and sets the result code to `Rejected.`
    /// 
    /// **See also:** accept()
    /// done()
    /// 
    /// This signal is emitted when the dialog has been rejected either by
    /// the user or by calling reject() or done() with the
    /// QDialog::Rejected argument.
    /// 
    /// Note that this signal is *not* emitted when hiding the dialog
    /// with hide() or setVisible(false). This includes deleting the
    /// dialog while it is visible.
    /// 
    /// **See also:** finished()
    /// accepted()
    [event] reject(),
    /// 
    /// If *showIt* is true, the dialog's extension is shown; otherwise the
    /// extension is hidden.
    /// 
    /// Instead of using this functionality, we recommend that you simply call
    /// show() or hide() on the part of the dialog that you want to use as an
    /// extension. See the [Extension Example](Extension%20Example)
    /// for details.
    /// 
    /// **See also:** show()
    /// setExtension()
    /// setOrientation()
    show_extension(arg0: bool),
    /// 
    [event] key_press_event(arg0: *KeyEventType),
    /// 
    [event] close_event(arg0: *CloseEventType),
    /// 
    [event] show_event(arg0: *ShowEventType),
    /// 
    [event] resize_event(arg0: *ResizeEventType),
    /// 
    [event] context_menu_event(arg0: *ContextMenuEventType),
    /// 
    [event] event_filter(arg0: *ObjectType, arg1: *EventType) -> bool,
    adjust_position(arg0: *WidgetType),
}

// vim: syntax=rust expandtab ts=4 sw=4
