
struct Object {
    [replace] event(event: &EventType) -> bool,
    [replace] event_filter(watched: &ObjectType, event: &EventType) -> bool,
    object_name() -> String,
    set_object_name(name: String),
    is_widget_type() -> bool,
    is_window_type() -> bool,
    signals_blocked() -> bool,
    block_signals(b: bool) -> bool,
    thread() -> Thread?,
    move_to_thread(thread: &ThreadType),
    start_timer(interval: i32, timer_type: Rute::TimerType) -> i32,
    kill_timer(id: i32),
    children() -> ObjectList?,
    set_parent(parent: &ObjectType),
    install_event_filter(filter_obj: &ObjectType),
    remove_event_filter(obj: &ObjectType),
    [static] connect(sender: &ObjectType, signal: &char, receiver: &ObjectType, member: &char, arg0: Rute::ConnectionType) -> MetaObject::Connection,
    [static] connect(sender: &ObjectType, signal: &MetaMethodType, receiver: &ObjectType, method: &MetaMethodType, type: Rute::ConnectionType) -> MetaObject::Connection,
    connect(sender: &ObjectType, signal: &char, member: &char, type: Rute::ConnectionType) -> MetaObject::Connection,
    [static] disconnect(sender: &ObjectType, signal: &MetaMethodType, receiver: &ObjectType, member: &MetaMethodType) -> bool,
    disconnect(signal: &char, receiver: &ObjectType, member: &char) -> bool,
    disconnect(receiver: &ObjectType, member: &char) -> bool,
    [static] disconnect(arg0: onst QMetaObject::Connection &) -> bool,
    dump_object_tree(),
    dump_object_info(),
    dump_object_tree(),
    dump_object_info(),
    set_property(name: &char, value: &VariantType) -> bool,
    property(name: &char) -> Variant,
    dynamic_property_names() -> [ByteArray],
    [static] register_user_data() -> uint,
    set_user_data(id: uint, data: &ObjectUserDataType),
    user_data(id: uint) -> ObjectUserData?,
    [event] object_name_changed(object_name: String, arg0: Object::QPrivateSignal),
    parent() -> Object?,
    inherits(classname: &char) -> bool,
    delete_later(),
    sender() -> Object?,
    sender_signal_index() -> i32,
    receivers(signal: &char) -> i32,
    is_signal_connected(signal: &MetaMethodType) -> bool,
    [replace] timer_event(event: &TimerEventType),
    [replace] child_event(event: &ChildEventType),
    [replace] custom_event(event: &EventType),
    [replace] connect_notify(signal: &MetaMethodType),
    [replace] disconnect_notify(signal: &MetaMethodType),
}

// vim: syntax=rust expandtab ts=4 sw=4
