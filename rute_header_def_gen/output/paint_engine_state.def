/// 
/// QPaintEngineState records which properties that have changed since
/// the last time the paint engine was updated, as well as their
/// current value.
/// 
/// Which properties that have changed can at any time be retrieved
/// using the state() function. This function returns an instance of
/// the QPaintEngine::DirtyFlags type which stores an OR combination
/// of QPaintEngine::DirtyFlag values. The QPaintEngine::DirtyFlag
/// enum defines whether a property has changed since the last update
/// or not.
/// 
/// If a property is marked with a dirty flag, its current value can
/// be retrieved using the corresponding get function:
/// 
/// * Property Flag
/// * Current Property Value
/// * QPaintEngine::DirtyBackground
/// * backgroundBrush()
/// * QPaintEngine::DirtyBackgroundMode
/// * backgroundMode()
/// * QPaintEngine::DirtyBrush
/// * brush()
/// * QPaintEngine::DirtyBrushOrigin
/// * brushOrigin()
/// * QPaintEngine::DirtyClipRegion *or* QPaintEngine::DirtyClipPath
/// * clipOperation()
/// * QPaintEngine::DirtyClipPath
/// * clipPath()
/// * QPaintEngine::DirtyClipRegion
/// * clipRegion()
/// * QPaintEngine::DirtyCompositionMode
/// * compositionMode()
/// * QPaintEngine::DirtyFont
/// * font()
/// * QPaintEngine::DirtyTransform
/// * transform()
/// * QPaintEngine::DirtyClipEnabled
/// * isClipEnabled()
/// * QPaintEngine::DirtyPen
/// * pen()
/// * QPaintEngine::DirtyHints
/// * renderHints()
/// 
/// The QPaintEngineState class also provide the painter() function
/// which returns a pointer to the painter that is currently updating
/// the paint engine.
/// 
/// An instance of this class, representing the current state of the
/// active paint engine, is passed as argument to the
/// QPaintEngine::updateState() function. The only situation in which
/// you will have to use this class directly is when implementing your
/// own paint engine.
/// 
/// **See also:** [`PaintEngine`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct PaintEngineState {
    /// 
    /// Returns a combination of flags identifying the set of properties
    /// that need to be updated when updating the paint engine's state
    /// (i.e. during a call to the QPaintEngine::updateState() function).
    /// 
    /// **See also:** [`PaintEngine::update_state`]
    state() -> PaintEngine::DirtyFlags,
    /// 
    /// Returns the pen in the current paint engine state.
    /// 
    /// This variable should only be used when the state() returns a
    /// combination which includes the QPaintEngine::DirtyPen flag.
    /// 
    /// **See also:** [`state()`]
    /// [`PaintEngine::update_state`]
    /// 
    /// Returns whether the coordinate of the stroke have been specified
    /// as bounded by the current rendering operation and have to be
    /// resolved (about the currently rendered primitive).
    pen() -> Pen,
    /// 
    /// Returns the brush in the current paint engine state.
    /// 
    /// This variable should only be used when the state() returns a
    /// combination which includes the QPaintEngine::DirtyBrush flag.
    /// 
    /// **See also:** [`state()`]
    /// [`PaintEngine::update_state`]
    /// 
    /// Returns the brush origin in the current paint engine state.
    /// 
    /// This variable should only be used when the state() returns a
    /// combination which includes the QPaintEngine::DirtyBrushOrigin flag.
    /// 
    /// **See also:** [`state()`]
    /// [`PaintEngine::update_state`]
    /// 
    /// Returns whether the coordinate of the fill have been specified
    /// as bounded by the current rendering operation and have to be
    /// resolved (about the currently rendered primitive).
    brush() -> Brush,
    /// 
    /// Returns the brush origin in the current paint engine state.
    /// 
    /// This variable should only be used when the state() returns a
    /// combination which includes the QPaintEngine::DirtyBrushOrigin flag.
    /// 
    /// **See also:** [`state()`]
    /// [`PaintEngine::update_state`]
    brush_origin() -> PointF,
    /// 
    /// Returns the background brush in the current paint engine state.
    /// 
    /// This variable should only be used when the state() returns a
    /// combination which includes the QPaintEngine::DirtyBackground flag.
    /// 
    /// **See also:** [`state()`]
    /// [`PaintEngine::update_state`]
    background_brush() -> Brush,
    /// 
    /// Returns the background mode in the current paint engine
    /// state.
    /// 
    /// This variable should only be used when the state() returns a
    /// combination which includes the QPaintEngine::DirtyBackgroundMode flag.
    /// 
    /// **See also:** [`state()`]
    /// [`PaintEngine::update_state`]
    background_mode() -> Rute::BGMode,
    /// 
    /// Returns the font in the current paint engine
    /// state.
    /// 
    /// This variable should only be used when the state() returns a
    /// combination which includes the QPaintEngine::DirtyFont flag.
    /// 
    /// **See also:** [`state()`]
    /// [`PaintEngine::update_state`]
    font() -> Font,
    /// 
    /// Returns the clip operation in the current paint engine
    /// state.
    /// 
    /// This variable should only be used when the state() returns a
    /// combination which includes either the QPaintEngine::DirtyClipPath
    /// or the QPaintEngine::DirtyClipRegion flag.
    /// 
    /// **See also:** [`state()`]
    /// [`PaintEngine::update_state`]
    clip_operation() -> Rute::ClipOperation,
    /// 
    /// Returns the clip region in the current paint engine state.
    /// 
    /// This variable should only be used when the state() returns a
    /// combination which includes the QPaintEngine::DirtyClipRegion flag.
    /// 
    /// **See also:** [`state()`]
    /// [`PaintEngine::update_state`]
    clip_region() -> Region,
    /// 
    /// Returns the clip path in the current paint engine state.
    /// 
    /// This variable should only be used when the state() returns a
    /// combination which includes the QPaintEngine::DirtyClipPath flag.
    /// 
    /// **See also:** [`state()`]
    /// [`PaintEngine::update_state`]
    clip_path() -> PainterPath,
    /// 
    /// Returns whether clipping is enabled or not in the current paint
    /// engine state.
    /// 
    /// This variable should only be used when the state() returns a
    /// combination which includes the QPaintEngine::DirtyClipEnabled
    /// flag.
    /// 
    /// **See also:** [`state()`]
    /// [`PaintEngine::update_state`]
    is_clip_enabled() -> bool,
    /// 
    /// Returns the render hints in the current paint engine state.
    /// 
    /// This variable should only be used when the state() returns a
    /// combination which includes the QPaintEngine::DirtyHints
    /// flag.
    /// 
    /// **See also:** [`state()`]
    /// [`PaintEngine::update_state`]
    render_hints() -> Painter::RenderHints,
    /// 
    /// Returns the composition mode in the current paint engine state.
    /// 
    /// This variable should only be used when the state() returns a
    /// combination which includes the QPaintEngine::DirtyCompositionMode
    /// flag.
    /// 
    /// **See also:** [`state()`]
    /// [`PaintEngine::update_state`]
    composition_mode() -> Painter::CompositionMode,
    /// 
    /// Returns the opacity in the current paint engine state.
    opacity() -> f32,
    /// 
    /// Returns a pointer to the painter currently updating the paint
    /// engine.
    painter() -> Painter?,
    /// 
    /// Returns whether the coordinate of the fill have been specified
    /// as bounded by the current rendering operation and have to be
    /// resolved (about the currently rendered primitive).
    brush_needs_resolving() -> bool,
    /// 
    /// Returns whether the coordinate of the stroke have been specified
    /// as bounded by the current rendering operation and have to be
    /// resolved (about the currently rendered primitive).
    pen_needs_resolving() -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
