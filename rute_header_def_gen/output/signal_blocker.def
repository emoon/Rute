/// 
/// QSignalBlocker can be used wherever you would otherwise use a
/// pair of calls to blockSignals(). It blocks signals in its
/// constructor and in the destructor it resets the state to what
/// it was before the constructor ran.
/// 
/// ```
/// 
/// const QSignalBlocker blocker(someQObject);
/// // no signals here
/// 
/// ```
/// 
/// is thus equivalent to
/// ```
/// const bool wasBlocked = someQObject->blockSignals(true);
/// // no signals here
/// someQObject->blockSignals(wasBlocked);
/// ```
/// 
/// except the code using QSignalBlocker is safe in the face of
/// exceptions.
/// 
/// **See also:** QMutexLocker
/// QEventLoopLocker
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct SignalBlocker {
    /// 
    /// Re-blocks signals after a previous unblock().
    /// 
    /// The numbers of reblock() and unblock() calls are not counted, so
    /// every reblock() undoes any number of unblock() calls.
    reblock(),
    /// 
    /// Temporarily restores the QObject::signalsBlocked() state to what
    /// it was before this QSignaBlocker's constructor ran. To undo, use
    /// reblock().
    /// 
    /// The numbers of reblock() and unblock() calls are not counted, so
    /// every unblock() undoes any number of reblock() calls.
    unblock(),
}

// vim: syntax=rust expandtab ts=4 sw=4
