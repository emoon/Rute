///     \class QSignalBlocker
///     \brief Exception-safe wrapper around QObject::blockSignals().
///     \since 5.3
///     \ingroup objectmodel
///     \inmodule QtCore
/// 
///     \reentrant
/// 
///     QSignalBlocker can be used wherever you would otherwise use a
///     pair of calls to blockSignals(). It blocks signals in its
///     constructor and in the destructor it resets the state to what
///     it was before the constructor ran.
/// 
///     \code
///     {
///     const QSignalBlocker blocker(someQObject);
///     // no signals here
///     }
///     \endcode
///     is thus equivalent to
///     \code
///     const bool wasBlocked = someQObject->blockSignals(true);
///     // no signals here
///     someQObject->blockSignals(wasBlocked);
///     \endcode
/// 
///     except the code using QSignalBlocker is safe in the face of
///     exceptions.
/// 
///     \sa QMutexLocker, QEventLoopLocker
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct SignalBlocker {
    reblock(),
    unblock(),
}

// vim: syntax=rust expandtab ts=4 sw=4
