///   \class QOpenGLWidget
///   \inmodule QtWidgets
///   \since 5.4
/// 
///   \brief The QOpenGLWidget class is a widget for rendering OpenGL graphics.
/// 
///   QOpenGLWidget provides functionality for displaying OpenGL graphics
///   integrated into a Qt application. It is very simple to use: Make
///   your class inherit from it and use the subclass like any other
///   QWidget, except that you have the choice between using QPainter and
///   standard OpenGL rendering commands.
/// 
///   QOpenGLWidget provides three convenient virtual functions that you
///   can reimplement in your subclass to perform the typical OpenGL
///   tasks:
/// 
///   \list
///   \li paintGL() - Renders the OpenGL scene. Gets called whenever the widget
///   needs to be updated.
///   \li resizeGL() - Sets up the OpenGL viewport, projection, etc. Gets
///   called whenever the widget has been resized (and also when it
///   is shown for the first time because all newly created widgets get a
///   resize event automatically).
///   \li initializeGL() - Sets up the OpenGL resources and state. Gets called
///   once before the first time resizeGL() or paintGL() is called.
///   \endlist
/// 
///   If you need to trigger a repaint from places other than paintGL() (a
///   typical example is when using \l{QTimer}{timers} to animate scenes),
///   you should call the widget's update() function to schedule an update.
/// 
///   Your widget's OpenGL rendering context is made current when
///   paintGL(), resizeGL(), or initializeGL() is called. If you need to
///   call the standard OpenGL API functions from other places (e.g. in
///   your widget's constructor or in your own paint functions), you
///   must call makeCurrent() first.
/// 
///   All rendering happens into an OpenGL framebuffer
///   object. makeCurrent() ensure that it is bound in the context. Keep
///   this in mind when creating and binding additional framebuffer
///   objects in the rendering code in paintGL(). Never re-bind the
///   framebuffer with ID 0. Instead, call defaultFramebufferObject() to
///   get the ID that should be bound.
/// 
///   QOpenGLWidget allows using different OpenGL versions and profiles
///   when the platform supports it. Just set the requested format via
///   setFormat(). Keep in mind however that having multiple QOpenGLWidget
///   instances in the same window requires that they all use the same
///   format, or at least formats that do not make the contexts
///   non-sharable. To overcome this issue, prefer using
///   QSurfaceFormat::setDefaultFormat() instead of setFormat().
/// 
///   \note Calling QSurfaceFormat::setDefaultFormat() before constructing
///   the QApplication instance is mandatory on some platforms (for example,
///   \macos) when an OpenGL core profile context is requested. This is to
///   ensure that resource sharing between contexts stays functional as all
///   internal contexts are created using the correct version and profile.
/// 
///   \section1 Painting Techniques
/// 
///   As described above, subclass QOpenGLWidget to render pure 3D content in the
///   following way:
/// 
///   \list
/// 
///   \li Reimplement the initializeGL() and resizeGL() functions to
///   set up the OpenGL state and provide a perspective transformation.
/// 
///   \li Reimplement paintGL() to paint the 3D scene, calling only
///   OpenGL functions.
/// 
///   \endlist
/// 
///   It is also possible to draw 2D graphics onto a QOpenGLWidget subclass using QPainter:
/// 
///   \list
/// 
///   \li In paintGL(), instead of issuing OpenGL commands, construct a QPainter
///       object for use on the widget.
/// 
///   \li Draw primitives using QPainter's member functions.
/// 
///   \li Direct OpenGL commands can still be issued. However, you must make sure
///   these are enclosed by a call to the painter's beginNativePainting() and
///   endNativePainting().
/// 
///   \endlist
/// 
///   When performing drawing using QPainter only, it is also possible to perform
///   the painting like it is done for ordinary widgets: by reimplementing paintEvent().
/// 
///   \list
/// 
///   \li Reimplement the paintEvent() function.
/// 
///   \li Construct a QPainter object targeting the widget. Either pass the widget to the
///   constructor or the QPainter::begin() function.
/// 
///   \li Draw primitives using QPainter's member functions.
/// 
///   \li Painting finishes then the QPainter instance is destroyed. Alternatively,
///   call QPainter::end() explicitly.
/// 
///   \endlist
/// 
///   \section1 OpenGL Function Calls, Headers and QOpenGLFunctions
/// 
///   When making OpenGL function calls, it is strongly recommended to avoid calling
///   the functions directly. Instead, prefer using QOpenGLFunctions (when making
///   portable applications) or the versioned variants (for example,
///   QOpenGLFunctions_3_2_Core and similar, when targeting modern, desktop-only
///   OpenGL). This way the application will work correctly in all Qt build
///   configurations, including the ones that perform dynamic OpenGL implementation
///   loading which means applications are not directly linking to an GL
///   implementation and thus direct function calls are not feasible.
/// 
///   In paintGL() the current context is always accessible by caling
///   QOpenGLContext::currentContext(). From this context an already initialized,
///   ready-to-be-used QOpenGLFunctions instance is retrievable by calling
///   QOpenGLContext::functions(). An alternative to prefixing every GL call is to
///   inherit from QOpenGLFunctions and call
///   QOpenGLFunctions::initializeOpenGLFunctions() in initializeGL().
/// 
///   As for the OpenGL headers, note that in most cases there will be no need to
///   directly include any headers like GL.h. The OpenGL-related Qt headers will
///   include qopengl.h which will in turn include an appropriate header for the
///   system. This might be an OpenGL ES 3.x or 2.0 header, the highest version that
///   is available, or a system-provided gl.h. In addition, a copy of the extension
///   headers (called glext.h on some systems) is provided as part of Qt both for
///   OpenGL and OpenGL ES. These will get included automatically on platforms where
///   feasible. This means that constants and function pointer typedefs from ARB,
///   EXT, OES extensions are automatically available.
/// 
///   \section1 Code Examples
/// 
///   To get started, the simplest QOpenGLWidget subclass could like like the following:
/// 
///   \snippet code/doc_gui_widgets_qopenglwidget.cpp 0
/// 
///   Alternatively, the prefixing of each and every OpenGL call can be avoided by deriving
///   from QOpenGLFunctions instead:
/// 
///   \snippet code/doc_gui_widgets_qopenglwidget.cpp 1
/// 
///   To get a context compatible with a given OpenGL version or profile, or to
///   request depth and stencil buffers, call setFormat():
/// 
///   \snippet code/doc_gui_widgets_qopenglwidget.cpp 2
/// 
///   With OpenGL 3.0+ contexts, when portability is not important, the versioned
///   QOpenGLFunctions variants give easy access to all the modern OpenGL functions
///   available in a given version:
/// 
///   \snippet code/doc_gui_widgets_qopenglwidget.cpp 3
/// 
///   As described above, it is simpler and more robust to set the requested format
///   globally so that it applies to all windows and contexts during the lifetime of
///   the application. Below is an example of this:
/// 
///   \snippet code/doc_gui_widgets_qopenglwidget.cpp 6
/// 
///   \section1 Relation to QGLWidget
/// 
///   The legacy QtOpenGL module (classes prefixed with QGL) provides a widget
///   called QGLWidget. QOpenGLWidget is intended to be a modern replacement for
///   it. Therefore, especially in new applications, the general recommendation is
///   to use QOpenGLWidget.
/// 
///   While the API is very similar, there is an important difference between the
///   two: QOpenGLWidget always renders offscreen, using framebuffer
///   objects. QGLWidget on the other hand uses a native window and surface. The
///   latter causes issues when using it in complex user interfaces since, depending
///   on the platform, such native child widgets may have various limitations,
///   regarding stacking orders for example. QOpenGLWidget avoids this by not
///   creating a separate native window.
/// 
///   Due to being backed by a framebuffer object, the behavior of QOpenGLWidget is
///   very similar to QOpenGLWindow with the update behavior set to \c
///   PartialUpdateBlit or \c PartialUpdateBlend. This means that the contents are
///   preserved between paintGL() calls so that incremental rendering is
///   possible. With QGLWidget (and naturally QOpenGLWindow with the default update
///   behavior) this is usually not the case because swapping the buffers leaves the
///   back buffer with undefined contents.
/// 
///   \note Most applications do not need incremental rendering because they will
///   render everything in the view on every paint call. In this case it is
///   important to call glClear() as early as possible in paintGL(). This helps
///   mobile GPUs that use a tile-based architecture to recognize that the tile
///   buffer does not need to be reloaded with the framebuffer's previous
///   contents. Omitting the clear call can lead to significant performance drops on
///   such systems.
/// 
///   \note Avoid calling winId() on a QOpenGLWidget. This function triggers the creation of
///   a native window, resulting in reduced performance and possibly rendering glitches.
/// 
///   \section1 Differences to QGLWidget
/// 
///   Besides the main conceptual difference of being backed by a framebuffer object, there
///   are a number of smaller, internal differences between QOpenGLWidget and the older
///   QGLWidget:
/// 
///   \list
/// 
///   \li OpenGL state when invoking paintGL(). QOpenGLWidget sets up the viewport via
///   glViewport(). It does not perform any clearing.
/// 
///   \li Clearing when starting to paint via QPainter. Unlike regular widgets, QGLWidget
///   defaulted to a value of \c true for
///   \l{QWidget::autoFillBackground()}{autoFillBackground}. It then performed clearing to the
///   palette's background color every time QPainter::begin() was used. QOpenGLWidget does not
///   follow this: \l{QWidget::autoFillBackground()}{autoFillBackground} defaults to false,
///   like for any other widget. The only exception is when being used as a viewport for other
///   widgets like QGraphicsView. In such a case autoFillBackground will be automatically set
///   to true to ensure compatibility with QGLWidget-based viewports.
/// 
///   \endlist
/// 
///   \section1 Multisampling
/// 
///   To enable multisampling, set the number of requested samples on the
///   QSurfaceFormat that is passed to setFormat(). On systems that do not support
///   it the request may get ignored.
/// 
///   Multisampling support requires support for multisampled renderbuffers and
///   framebuffer blits. On OpenGL ES 2.0 implementations it is likely that these
///   will not be present. This means that multisampling will not be available. With
///   modern OpenGL versions and OpenGL ES 3.0 and up this is usually not a problem
///   anymore.
/// 
///   \section1 Threading
/// 
///   Performing offscreen rendering on worker threads, for example to generate
///   textures that are then used in the GUI/main thread in paintGL(), are supported
///   by exposing the widget's QOpenGLContext so that additional contexts sharing
///   with it can be created on each thread.
/// 
///   Drawing directly to the QOpenGLWidget's framebuffer outside the GUI/main
///   thread is possible by reimplementing paintEvent() to do nothing. The context's
///   thread affinity has to be changed via QObject::moveToThread(). After that,
///   makeCurrent() and doneCurrent() are usable on the worker thread. Be careful to
///   move the context back to the GUI/main thread afterwards.
/// 
///   Unlike QGLWidget, triggering a buffer swap just for the QOpenGLWidget is not
///   possible since there is no real, onscreen native surface for it. Instead, it
///   is up to the widget stack to manage composition and buffer swaps on the gui
///   thread. When a thread is done updating the framebuffer, call update() \b{on
///   the GUI/main thread} to schedule composition.
/// 
///   Extra care has to be taken to avoid using the framebuffer when the GUI/main
///   thread is performing compositing. The signals aboutToCompose() and
///   frameSwapped() will be emitted when the composition is starting and
///   ending. They are emitted on the GUI/main thread. This means that by using a
///   direct connection aboutToCompose() can block the GUI/main thread until the
///   worker thread has finished its rendering. After that, the worker thread must
///   perform no further rendering until the frameSwapped() signal is emitted. If
///   this is not acceptable, the worker thread has to implement a double buffering
///   mechanism. This involves drawing using an alternative render target, that is
///   fully controlled by the thread, e.g. an additional framebuffer object, and
///   blitting to the QOpenGLWidget's framebuffer at a suitable time.
/// 
///   \section1 Context Sharing
/// 
///   When multiple QOpenGLWidgets are added as children to the same top-level
///   widget, their contexts will share with each other. This does not apply for
///   QOpenGLWidget instances that belong to different windows.
/// 
///   This means that all QOpenGLWidgets in the same window can access each other's
///   sharable resources, like textures, and there is no need for an extra "global
///   share" context, as was the case with QGLWidget.
/// 
///   To set up sharing between QOpenGLWidget instances belonging to different
///   windows, set the Qt::AA_ShareOpenGLContexts application attribute before
///   instantiating QApplication. This will trigger sharing between all
///   QOpenGLWidget instances without any further steps.
/// 
///   Creating extra QOpenGLContext instances that share resources like textures
///   with the QOpenGLWidget's context is also possible. Simply pass the pointer
///   returned from context() to QOpenGLContext::setShareContext() before calling
///   QOpenGLContext::create(). The resulting context can also be used on a
///   different thread, allowing threaded generation of textures and asynchronous
///   texture uploads.
/// 
///   Note that QOpenGLWidget expects a standard conformant implementation of
///   resource sharing when it comes to the underlying graphics drivers. For
///   example, some drivers, in particular for mobile and embedded hardware, have
///   issues with setting up sharing between an existing context and others that are
///   created later. Some other drivers may behave in unexpected ways when trying to
///   utilize shared resources between different threads.
/// 
///   \section1 Resource Initialization and Cleanup
/// 
///   The QOpenGLWidget's associated OpenGL context is guaranteed to be current
///   whenever initializeGL() and paintGL() are invoked. Do not attempt to create
///   OpenGL resources before initializeGL() is called. For example, attempting to
///   compile shaders, initialize vertex buffer objects or upload texture data will
///   fail when done in a subclass's constructor. These operations must be deferred
///   to initializeGL(). Some of Qt's OpenGL helper classes, like QOpenGLBuffer or
///   QOpenGLVertexArrayObject, have a matching deferred behavior: they can be
///   instantiated without a context, but all initialization is deferred until a
///   create(), or similar, call. This means that they can be used as normal
///   (non-pointer) member variables in a QOpenGLWidget subclass, but the create()
///   or similar function can only be called from initializeGL(). Be aware however
///   that not all classes are designed like this. When in doubt, make the member
///   variable a pointer and create and destroy the instance dynamically in
///   initializeGL() and the destructor, respectively.
/// 
///   Releasing the resources also needs the context to be current. Therefore
///   destructors that perform such cleanup are expected to call makeCurrent()
///   before moving on to destroy any OpenGL resources or wrappers. Avoid deferred
///   deletion via \l{QObject::deleteLater()}{deleteLater()} or the parenting
///   mechanism of QObject. There is no guarantee the correct context will be
///   current at the time the instance in question is really destroyed.
/// 
///   A typical subclass will therefore often look like the following when it comes
///   to resource initialization and destruction:
/// 
///   \snippet code/doc_gui_widgets_qopenglwidget.cpp 4
/// 
///   This is naturally not the only possible solution. One alternative is to use
///   the \l{QOpenGLContext::aboutToBeDestroyed()}{aboutToBeDestroyed()} signal of
///   QOpenGLContext. By connecting a slot, using direct connection, to this signal,
///   it is possible to perform cleanup whenever the the underlying native context
///   handle, or the entire QOpenGLContext instance, is going to be released. The
///   following snippet is in principle equivalent to the previous one:
/// 
///   \snippet code/doc_gui_widgets_qopenglwidget.cpp 5
/// 
///   \note For widgets that change their associated top-level window multiple times
///   during their lifetime, a combined approach is essential. Whenever the widget
///   or a parent of it gets reparented so that the top-level window becomes
///   different, the widget's associated context is destroyed and a new one is
///   created. This is then followed by a call to initializeGL() where all OpenGL
///   resources must get reinitialized. Due to this the only option to perform
///   proper cleanup is to connect to the context's aboutToBeDestroyed()
///   signal. Note that the context in question may not be the current one when the
///   signal gets emitted. Therefore it is good practice to call makeCurrent() in
///   the connected slot. Additionally, the same cleanup steps must be performed
///   from the derived class' destructor, since the slot connected to the signal
///   will not get invoked when the widget is being destroyed.
/// 
///   \note When Qt::AA_ShareOpenGLContexts is set, the widget's context never
///   changes, not even when reparenting because the widget's associated texture is
///   guaranteed to be accessible also from the new top-level's context.
/// 
///   Proper cleanup is especially important due to context sharing. Even though
///   each QOpenGLWidget's associated context is destroyed together with the
///   QOpenGLWidget, the sharable resources in that context, like textures, will
///   stay valid until the top-level window, in which the QOpenGLWidget lived, is
///   destroyed. Additionally, settings like Qt::AA_ShareOpenGLContexts and some Qt
///   modules may trigger an even wider scope for sharing contexts, potentially
///   leading to keeping the resources in question alive for the entire lifetime of
///   the application. Therefore the safest and most robust is always to perform
///   explicit cleanup for all resources and resource wrappers used in the
///   QOpenGLWidget.
/// 
///   \section1 Limitations
/// 
///   Putting other widgets underneath and making the QOpenGLWidget transparent will
///   not lead to the expected results: The widgets underneath will not be
///   visible. This is because in practice the QOpenGLWidget is drawn before all
///   other regular, non-OpenGL widgets, and so see-through type of solutions are
///   not feasible. Other type of layouts, like having widgets on top of the
///   QOpenGLWidget, will function as expected.
/// 
///   When absolutely necessary, this limitation can be overcome by setting the
///   Qt::WA_AlwaysStackOnTop attribute on the QOpenGLWidget. Be aware however that
///   this breaks stacking order, for example it will not be possible to have other
///   widgets on top of the QOpenGLWidget, so it should only be used in situations
///   where a semi-transparent QOpenGLWidget with other widgets visible underneath
///   is required.
/// 
///   Note that this does not apply when there are no other widgets underneath and
///   the intention is to have a semi-transparent window. In that case the
///   traditional approach of setting Qt::WA_TranslucentBackground
///   on the top-level window is sufficient. Note that if the transparent areas are
///   only desired in the QOpenGLWidget, then Qt::WA_NoSystemBackground will need
///   to be turned back to \c false after enabling Qt::WA_TranslucentBackground.
///   Additionally, requesting an alpha channel for the QOpenGLWidget's context via
///   setFormat() may be necessary too, depending on the system.
/// 
///   QOpenGLWidget supports multiple update behaviors, just like QOpenGLWindow. In
///   preserved mode the rendered content from the previous paintGL() call is
///   available in the next one, allowing incremental rendering. In non-preserved
///   mode the content is lost and paintGL() implementations are expected to redraw
///   everything in the view.
/// 
///   Before Qt 5.5 the default behavior of QOpenGLWidget was to preserve the
///   rendered contents between paintGL() calls. Since Qt 5.5 the default behavior
///   is non-preserved because this provides better performance and the majority of
///   applications have no need for the previous content. This also resembles the
///   semantics of an OpenGL-based QWindow and matches the default behavior of
///   QOpenGLWindow in that the color and ancillary buffers are invalidated for
///   each frame. To restore the preserved behavior, call setUpdateBehavior() with
///   \c PartialUpdate.
/// 
///   \section1 Alternatives
/// 
///   Adding a QOpenGLWidget into a window turns on OpenGL-based
///   compositing for the entire window.  In some special cases this may
///   not be ideal, and the old QGLWidget-style behavior with a separate,
///   native child window is desired. Desktop applications that understand
///   the limitations of this approach (for example when it comes to
///   overlaps, transparency, scroll views and MDI areas), can use
///   QOpenGLWindow with QWidget::createWindowContainer(). This is a
///   modern alternative to QGLWidget and is faster than QOpenGLWidget due
///   to the lack of the additional composition step. It is strongly
///   recommended to limit the usage of this approach to cases where there
///   is no other choice. Note that this option is not suitable for most
///   embedded and mobile platforms, and it is known to have issues on
///   certain desktop platforms (e.g. \macos) too. The stable,
///   cross-platform solution is always QOpenGLWidget.
/// 
///   \e{OpenGL is a trademark of Silicon Graphics, Inc. in the United States and other
///   countries.}
/// 
///   \sa QOpenGLFunctions, QOpenGLWindow, Qt::AA_ShareOpenGLContexts, UpdateBehavior
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QOpenGLWidget)]
enum UpdateBehavior {
    NoPartialUpdate,
    PartialUpdate,
}

struct OpenGLWidget : Widget {
    ///   Sets this widget's update behavior to \a updateBehavior.
    ///   \since 5.5
    set_update_behavior(update_behavior: OpenGLWidget::UpdateBehavior),
    ///   \return the update behavior of the widget.
    ///   \since 5.5
    update_behavior() -> OpenGLWidget::UpdateBehavior,
    set_format(format: &SurfaceFormatType),
    format() -> SurfaceFormat,
    texture_format() -> i32,
    set_texture_format(tex_format: i32),
    ///   \return \e true if the widget and OpenGL resources, like the context, have
    ///   been successfully initialized. Note that the return value is always false
    ///   until the widget is shown.
    is_valid() -> bool,
    make_current(),
    done_current(),
    context() -> OpenGLContext?,
    default_framebuffer_object() -> i32,
    ///   Renders and returns a 32-bit RGB image of the framebuffer.
    /// 
    ///   \note This is a potentially expensive operation because it relies on glReadPixels()
    ///   to read back the pixels. This may be slow and can stall the GPU pipeline.
    grab_framebuffer() -> Image,
    [signal] about_to_compose(),
    [signal] frame_swapped(),
    [signal] about_to_resize(),
    [signal] resized(),
    ///   This virtual function is called once before the first call to
    ///   paintGL() or resizeGL(). Reimplement it in a subclass.
    /// 
    ///   This function should set up any required OpenGL resources and state.
    /// 
    ///   There is no need to call makeCurrent() because this has already been
    ///   done when this function is called. Note however that the framebuffer
    ///   is not yet available at this stage, so avoid issuing draw calls from
    ///   here. Defer such calls to paintGL() instead.
    /// 
    ///   \sa paintGL(), resizeGL()
    [event] initialize_gl(),
    ///   This virtual function is called whenever the widget has been
    ///   resized. Reimplement it in a subclass. The new size is passed in
    ///   \a w and \a h.
    /// 
    ///   There is no need to call makeCurrent() because this has already been
    ///   done when this function is called. Additionally, the framebuffer is
    ///   also bound.
    /// 
    ///   \sa initializeGL(), paintGL()
    [event] resize_gl(w: i32, h: i32),
    ///   This virtual function is called whenever the widget needs to be
    ///   painted. Reimplement it in a subclass.
    /// 
    ///   There is no need to call makeCurrent() because this has already
    ///   been done when this function is called.
    /// 
    ///   Before invoking this function, the context and the framebuffer are
    ///   bound, and the viewport is set up by a call to glViewport(). No
    ///   other state is set and no clearing or drawing is performed by the
    ///   framework.
    /// 
    ///   \sa initializeGL(), resizeGL()
    [event] paint_gl(),
    ///   Handles paint events.
    /// 
    ///   Calling QWidget::update() will lead to sending a paint event \a e,
    ///   and thus invoking this function. (NB this is asynchronous and will
    ///   happen at some point after returning from update()). This function
    ///   will then, after some preparation, call the virtual paintGL() to
    ///   update the contents of the QOpenGLWidget's framebuffer. The widget's
    ///   top-level window will then composite the framebuffer's texture with
    ///   the rest of the window.
    [event] paint_event(e: *PaintEventType),
    ///   Handles resize events that are passed in the \a e event parameter.
    ///   Calls the virtual function resizeGL().
    /// 
    ///   \note Avoid overriding this function in derived classes. If that is not
    ///   feasible, make sure that QOpenGLWidget's implementation is invoked
    ///   too. Otherwise the underlying framebuffer object and related resources will
    ///   not get resized properly and will lead to incorrect rendering.
    [event] resize_event(e: *ResizeEventType),
    ///   \internal
    [event] event(e: *EventType) -> bool,
    ///   \internal
    [event] redirected(p: *PointType) -> PaintDevice?,
    ///   \internal
    [event] paint_engine() -> PaintEngine?,
}

// vim: syntax=rust expandtab ts=4 sw=4
