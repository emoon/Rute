/// 
/// The QScrollerProperties class stores the parameters used by QScroller.
/// 
/// The default settings are platform dependent so that Qt emulates the
/// platform behaviour for kinetic scrolling.
/// 
/// As a convention the QScrollerProperties are in physical units (meter,
/// seconds) and are converted by QScroller using the current DPI.
/// 
/// **See also:** [`Scroller`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct ScrollerProperties {
    /// 
    /// Sets the scroller properties for all new QScrollerProperties objects to *sp.*
    /// 
    /// Use this function to override the platform default properties returned by the default
    /// constructor. If you only want to change the scroller properties of a single scroller, use
    /// QScroller::setScrollerProperties()
    /// 
    /// **Note**: Calling this function will not change the content of already existing
    /// QScrollerProperties objects.
    /// 
    /// **See also:** [`unset_default_scroller_properties()`]
    [static] set_default_scroller_properties(sp: &ScrollerPropertiesType),
    /// 
    /// Sets the scroller properties returned by the default constructor back to the platform default
    /// properties.
    /// 
    /// **See also:** [`set_default_scroller_properties()`]
    [static] unset_default_scroller_properties(),
}

[org_name(QScrollerProperties)]
enum OvershootPolicy {
    /// Overshooting is possible when the content is scrollable. This is the
    OvershootWhenScrollable,
    /// Overshooting is never enabled, even when the content is scrollable.
    OvershootAlwaysOff,
    /// Overshooting is always enabled, even when the content is not
    OvershootAlwaysOn,
}

[org_name(QScrollerProperties)]
enum FrameRates {
    /// the default value is 60 frames per second (which corresponds to QAbstractAnimation).
    Standard,
    /// 60 frames per second
    Fps60,
    /// 30 frames per second
    Fps30,
    /// 20 frames per second
    Fps20,
}

[org_name(QScrollerProperties)]
enum ScrollMetric {
    /// This is the time a mouse press event is delayed when starting
    MousePressEventDelay,
    /// This is the minimum distance the touch or mouse point needs to be
    DragStartDistance,
    /// A value that describes to which extent new drag velocities are
    DragVelocitySmoothingFactor,
    /// Restricts the movement to one axis if the movement is inside an angle
    AxisLockThreshold,
    /// The QEasingCurve used when decelerating the scrolling velocity after an
    ScrollingCurve,
    /// This factor influences how long it takes the scroller to decelerate
    DecelerationFactor,
    /// The minimum velocity that is needed after ending the touch or releasing
    MinimumVelocity,
    /// This is the maximum velocity that can be reached in
    MaximumVelocity,
    /// This is the maximum allowed scroll speed for a click-through
    MaximumClickThroughVelocity,
    /// This is the maximum time in
    AcceleratingFlickMaximumTime,
    /// The current speed is multiplied by this number if an
    AcceleratingFlickSpeedupFactor,
    /// This is the distance that the user must drag the area beween two snap
    SnapPositionRatio,
    /// This is the time factor for the scrolling curve. A lower value means that the
    SnapTime,
    /// This value is the factor between the mouse dragging and
    OvershootDragResistanceFactor,
    /// This is the maximum distance for overshoot movements while
    OvershootDragDistanceFactor,
    /// This is the maximum distance for overshoot movements while
    OvershootScrollDistanceFactor,
    /// This is the time in
    OvershootScrollTime,
    /// This is the horizontal overshooting policy (see OvershootPolicy).
    HorizontalOvershootPolicy,
    /// This is the horizontal overshooting policy (see OvershootPolicy).
    VerticalOvershootPolicy,
    /// This is the frame rate which should be used while dragging or scrolling.
    FrameRate,
    /// This is always the last entry.
    ScrollMetricCount,
}

// vim: syntax=rust expandtab ts=4 sw=4
