struct ComboBox : Widget {
    max_visible_items() -> i32,
    set_max_visible_items(max_items: i32),
    count() -> i32,
    set_max_count(max: i32),
    max_count() -> i32,
    auto_completion() -> bool,
    set_auto_completion(enable: bool),
    auto_completion_case_sensitivity() -> Rute::CaseSensitivity,
    set_auto_completion_case_sensitivity(sensitivity: Rute::CaseSensitivity),
    duplicates_enabled() -> bool,
    set_duplicates_enabled(enable: bool),
    set_frame(arg0: bool),
    has_frame() -> bool,
    find_text(text: String, flags: Rute::MatchFlags) -> i32,
    find_data(data: &VariantType, role: i32, flags: Rute::MatchFlags) -> i32,
    insert_policy() -> ComboBox::InsertPolicy,
    set_insert_policy(policy: ComboBox::InsertPolicy),
    size_adjust_policy() -> ComboBox::SizeAdjustPolicy,
    set_size_adjust_policy(policy: ComboBox::SizeAdjustPolicy),
    minimum_contents_length() -> i32,
    set_minimum_contents_length(characters: i32),
    icon_size() -> SizeType,
    set_icon_size(size: &SizeType),
    is_editable() -> bool,
    set_editable(editable: bool),
    set_line_edit(edit: &LineEditType),
    line_edit() -> &LineEditType,
    set_validator(v: &ValidatorType),
    validator() -> &ValidatorType,
    set_completer(c: &CompleterType),
    completer() -> &CompleterType,
    item_delegate() -> &AbstractItemDelegateType,
    set_item_delegate(delegate: &AbstractItemDelegateType),
    model() -> &AbstractItemModelType,
    set_model(model: &AbstractItemModelType),
    root_model_index() -> ModelIndexType,
    set_root_model_index(index: &ModelIndexType),
    model_column() -> i32,
    set_model_column(visible_column: i32),
    current_index() -> i32,
    current_text() -> String,
    current_data(role: i32) -> VariantType,
    item_text(index: i32) -> String,
    item_icon(index: i32) -> IconType,
    item_data(index: i32, role: i32) -> VariantType,
    add_item(text: String, user_data: &VariantType),
    add_item(icon: &IconType, text: String, user_data: &VariantType),
    add_items(texts: &StringListType),
    insert_item(index: i32, text: String, user_data: &VariantType),
    insert_item(index: i32, icon: &IconType, text: String, user_data: &VariantType),
    insert_items(index: i32, texts: &StringListType),
    insert_separator(index: i32),
    remove_item(index: i32),
    set_item_text(index: i32, text: String),
    set_item_icon(index: i32, icon: &IconType),
    set_item_data(index: i32, value: &VariantType, role: i32),
    view() -> &AbstractItemViewType,
    set_view(item_view: &AbstractItemViewType),
    size_hint() -> SizeType,
    minimum_size_hint() -> SizeType,
    show_popup(),
    hide_popup(),
    event(event: &EventType) -> bool,
    input_method_query(arg0: Rute::InputMethodQuery) -> VariantType,
    input_method_query(query: Rute::InputMethodQuery, argument: &VariantType) -> VariantType,
    clear(),
    clear_edit_text(),
    set_edit_text(text: String),
    set_current_index(index: i32),
    set_current_text(text: String),
    [callback] edit_text_changed(arg0: String),
    [callback] activated(index: i32),
    [callback] activated(arg0: String),
    [callback] highlighted(index: i32),
    [callback] highlighted(arg0: String),
    [callback] current_index_changed(index: i32),
    [callback] current_index_changed(arg0: String),
    [callback] current_text_changed(arg0: String),
    focus_in_event(e: &FocusEventType),
    focus_out_event(e: &FocusEventType),
    change_event(e: &EventType),
    resize_event(e: &ResizeEventType),
    paint_event(e: &PaintEventType),
    show_event(e: &ShowEventType),
    hide_event(e: &HideEventType),
    mouse_press_event(e: &MouseEventType),
    mouse_release_event(e: &MouseEventType),
    key_press_event(e: &KeyEventType),
    key_release_event(e: &KeyEventType),
    wheel_event(e: &WheelEventType),
    context_menu_event(e: &ContextMenuEventType),
    input_method_event(arg0: &InputMethodEventType),
    init_style_option(option: &StyleOptionComboBoxType),
}

// vim: syntax=rust expandtab ts=4 sw=4
