struct ComboBox : Widget {
    max_visible_items() -> i32,
    set_max_visible_items(i32 max_items),
    count() -> i32,
    set_max_count(i32 max),
    max_count() -> i32,
    auto_completion() -> bool,
    set_auto_completion(bool enable),
    auto_completion_case_sensitivity() -> Rute::CaseSensitivity,
    set_auto_completion_case_sensitivity(Rute::CaseSensitivity sensitivity),
    duplicates_enabled() -> bool,
    set_duplicates_enabled(bool enable),
    set_frame(bool arg0),
    has_frame() -> bool,
    find_text(String text, Rute::MatchFlags flags) -> i32,
    find_data(&VariantType data, i32 role, Rute::MatchFlags flags) -> i32,
    insert_policy() -> ComboBox::InsertPolicy,
    set_insert_policy(ComboBox::InsertPolicy policy),
    size_adjust_policy() -> ComboBox::SizeAdjustPolicy,
    set_size_adjust_policy(ComboBox::SizeAdjustPolicy policy),
    minimum_contents_length() -> i32,
    set_minimum_contents_length(i32 characters),
    icon_size() -> SizeType,
    set_icon_size(&SizeType size),
    is_editable() -> bool,
    set_editable(bool editable),
    set_line_edit(&LineEditType edit),
    line_edit() -> &LineEditType,
    set_validator(&ValidatorType v),
    validator() -> &ValidatorType,
    set_completer(&CompleterType c),
    completer() -> &CompleterType,
    item_delegate() -> &AbstractItemDelegateType,
    set_item_delegate(&AbstractItemDelegateType delegate),
    model() -> &AbstractItemModelType,
    set_model(&AbstractItemModelType model),
    root_model_index() -> ModelIndexType,
    set_root_model_index(&ModelIndexType index),
    model_column() -> i32,
    set_model_column(i32 visible_column),
    current_index() -> i32,
    current_text() -> String,
    current_data(i32 role) -> VariantType,
    item_text(i32 index) -> String,
    item_icon(i32 index) -> IconType,
    item_data(i32 index, i32 role) -> VariantType,
    add_item(String text, &VariantType user_data),
    add_item(&IconType icon, String text, &VariantType user_data),
    add_items(&StringListType texts),
    insert_item(i32 index, String text, &VariantType user_data),
    insert_item(i32 index, &IconType icon, String text, &VariantType user_data),
    insert_items(i32 index, &StringListType texts),
    insert_separator(i32 index),
    remove_item(i32 index),
    set_item_text(i32 index, String text),
    set_item_icon(i32 index, &IconType icon),
    set_item_data(i32 index, &VariantType value, i32 role),
    view() -> &AbstractItemViewType,
    set_view(&AbstractItemViewType item_view),
    size_hint() -> SizeType,
    minimum_size_hint() -> SizeType,
    show_popup(),
    hide_popup(),
    event(&EventType event) -> bool,
    input_method_query(Rute::InputMethodQuery arg0) -> VariantType,
    input_method_query(Rute::InputMethodQuery query, &VariantType argument) -> VariantType,
    clear(),
    clear_edit_text(),
    set_edit_text(String text),
    set_current_index(i32 index),
    set_current_text(String text),
    edit_text_changed(String arg0),
    activated(i32 index),
    activated(String arg0),
    highlighted(i32 index),
    highlighted(String arg0),
    current_index_changed(i32 index),
    current_index_changed(String arg0),
    current_text_changed(String arg0),
    focus_in_event(&FocusEventType e),
    focus_out_event(&FocusEventType e),
    change_event(&EventType e),
    resize_event(&ResizeEventType e),
    paint_event(&PaintEventType e),
    show_event(&ShowEventType e),
    hide_event(&HideEventType e),
    mouse_press_event(&MouseEventType e),
    mouse_release_event(&MouseEventType e),
    key_press_event(&KeyEventType e),
    key_release_event(&KeyEventType e),
    wheel_event(&WheelEventType e),
    context_menu_event(&ContextMenuEventType e),
    input_method_event(&InputMethodEventType arg0),
    init_style_option(&StyleOptionComboBoxType option),
}

// vim: syntax=rust expandtab ts=4 sw=4
