/// 
/// Items usually contain text, icons, or checkboxes.
/// 
/// Each item can have its own background brush which is set with the
/// setBackground() function. The current background brush can be found with
/// background(). The text label for each item can be rendered with its own
/// font and brush. These are specified with the setFont() and setForeground()
/// functions, and read with font() and foreground().
/// 
/// By default, items are enabled, editable, selectable, checkable, and can be
/// used both as the source of a drag and drop operation and as a drop target.
/// Each item's flags can be changed by calling setFlags(). Checkable items
/// can be checked and unchecked with the setCheckState() function. The
/// corresponding checkState() function indicates whether the item is
/// currently checked.
/// 
/// You can store application-specific data in an item by calling setData().
/// 
/// Each item can have a two-dimensional table of child items. This makes it
/// possible to build hierarchies of items. The typical hierarchy is the tree,
/// in which case the child table is a table with a single column (a list).
/// 
/// The dimensions of the child table can be set with setRowCount() and
/// setColumnCount(). Items can be positioned in the child table with
/// setChild(). Get a pointer to a child item with child(). New rows and
/// columns of children can also be inserted with insertRow() and
/// insertColumn(), or appended with appendRow() and appendColumn(). When
/// using the append and insert functions, the dimensions of the child table
/// will grow as needed.
/// 
/// An existing row of children can be removed with removeRow() or takeRow();
/// correspondingly, a column can be removed with removeColumn() or
/// takeColumn().
/// 
/// An item's children can be sorted by calling sortChildren().
/// 
/// # Subclassing
/// 
/// When subclassing QStandardItem to provide custom items, it is possible to
/// define new types for them so that they can be distinguished from the base
/// class. The type() function should be reimplemented to return a new type
/// value equal to or greater than [UserType.](UserType.)
/// 
/// Reimplement data() and setData() if you want to perform custom handling of
/// data queries and/or control how an item's data is represented.
/// 
/// Reimplement clone() if you want QStandardItemModel to be able to create
/// instances of your custom item class on demand (see
/// QStandardItemModel::setItemPrototype()).
/// 
/// Reimplement read() and write() if you want to control how items are
/// represented in their serialized form.
/// 
/// Reimplement [operator<()](operator%3C())
/// if you want to control the semantics of item
/// comparison. [operator<()](operator%3C())
/// determines the sorted order when sorting items
/// with sortChildren() or with QStandardItemModel::sort().
/// 
/// **See also:** QStandardItemModel
/// {Item View Convenience Classes}
/// {Model/View Programming}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QStandardItem)]
enum ItemType {
    Type,
    UserType,
}


struct StandardItem {
    /// 
    /// Returns the item's data for the given *role,* or an invalid
    /// QVariant if there is no data for the role.
    /// 
    /// **Note**: The default implementation treats Qt::EditRole and Qt::DisplayRole
    /// as referring to the same data.
    [event] data(role: i32) -> Variant,
    /// 
    /// Sets the item's data for the given *role* to the specified *value.*
    /// 
    /// If you subclass QStandardItem and reimplement this function, your
    /// reimplementation should call emitDataChanged() if you do not call
    /// the base implementation of setData(). This will ensure that e.g.
    /// views using the model are notified of the changes.
    /// 
    /// **Note**: The default implementation treats Qt::EditRole and Qt::DisplayRole
    /// as referring to the same data.
    /// 
    /// **See also:** Qt::ItemDataRole
    /// data()
    /// setFlags()
    [event] set_data(value: &VariantType, role: i32),
    /// 
    /// Returns the item's text. This is the text that's presented to the user
    /// in a view.
    /// 
    /// **See also:** setText()
    /// 
    /// Returns the text alignment for the item's text.
    text() -> String,
    /// 
    /// Sets the item's text to the *text* specified.
    /// 
    /// **See also:** text()
    /// setFont()
    /// setForeground()
    /// 
    /// Sets the text alignment for the item's text to the *alignment*
    /// specified.
    /// 
    /// **See also:** textAlignment()
    set_text(text: String),
    /// 
    /// Returns the item's icon.
    /// 
    /// **See also:** setIcon()
    /// {QAbstractItemView::iconSize}{iconSize}
    icon() -> Icon,
    /// 
    /// Sets the item's icon to the *icon* specified.
    set_icon(icon: &IconType),
    /// 
    /// Returns the item's tooltip.
    /// 
    /// **See also:** setToolTip()
    /// statusTip()
    /// whatsThis()
    tool_tip() -> String,
    /// 
    /// Sets the item's tooltip to the string specified by *toolTip.*
    /// 
    /// **See also:** toolTip()
    /// setStatusTip()
    /// setWhatsThis()
    set_tool_tip(tool_tip: String),
    /// 
    /// Returns the item's status tip.
    /// 
    /// **See also:** setStatusTip()
    /// toolTip()
    /// whatsThis()
    status_tip() -> String,
    /// 
    /// Sets the item's status tip to the string specified by *statusTip.*
    /// 
    /// **See also:** statusTip()
    /// setToolTip()
    /// setWhatsThis()
    set_status_tip(status_tip: String),
    /// 
    /// Returns the item's help.
    /// 
    /// **See also:** setWhatsThis()
    /// toolTip()
    /// statusTip()
    whats_this() -> String,
    /// 
    /// Sets the item's help to the string specified by *whatsThis.*
    /// 
    /// **See also:** whatsThis()
    /// setStatusTip()
    /// setToolTip()
    set_whats_this(whats_this: String),
    /// 
    /// Returns the size hint set for the item, or an invalid QSize if no
    /// size hint has been set.
    /// 
    /// If no size hint has been set, the item delegate will compute the
    /// size hint based on the item data.
    /// 
    /// **See also:** setSizeHint()
    size_hint() -> Size,
    /// 
    /// Sets the size hint for the item to be *size.*
    /// If no size hint is set, the item delegate will compute the
    /// size hint based on the item data.
    /// 
    /// **See also:** sizeHint()
    set_size_hint(size_hint: &SizeType),
    /// 
    /// Returns the font used to render the item's text.
    /// 
    /// **See also:** setFont()
    font() -> Font,
    /// 
    /// Sets the font used to display the item's text to the given *font.*
    /// 
    /// **See also:** font()
    /// setText()
    /// setForeground()
    set_font(font: &FontType),
    /// 
    /// Returns the text alignment for the item's text.
    text_alignment() -> Rute::Alignment,
    /// 
    /// Sets the text alignment for the item's text to the *alignment*
    /// specified.
    /// 
    /// **See also:** textAlignment()
    set_text_alignment(text_alignment: Rute::Alignment),
    /// 
    /// Returns the brush used to render the item's background.
    /// 
    /// **See also:** foreground()
    /// setBackground()
    background() -> Brush,
    /// 
    /// Sets the item's background brush to the specified *brush.*
    /// 
    /// **See also:** background()
    /// setForeground()
    set_background(brush: &BrushType),
    /// 
    /// Returns the brush used to render the item's foreground (e.g. text).
    /// 
    /// **See also:** setForeground()
    /// background()
    foreground() -> Brush,
    /// 
    /// Sets the brush used to display the item's foreground (e.g. text) to the
    /// given *brush.*
    /// 
    /// **See also:** foreground()
    /// setBackground()
    /// setFont()
    set_foreground(brush: &BrushType),
    /// 
    /// Returns the checked state of the item.
    /// 
    /// **See also:** setCheckState()
    /// isCheckable()
    check_state() -> Rute::CheckState,
    /// 
    /// Sets the check state of the item to be *state.*
    /// 
    /// **See also:** checkState()
    /// setCheckable()
    set_check_state(check_state: Rute::CheckState),
    /// 
    /// Returns the item's accessible text.
    /// 
    /// The accessible text is used by assistive technologies (i.e. for users who
    /// cannot use conventional means of interaction).
    /// 
    /// **See also:** setAccessibleText()
    /// accessibleDescription()
    accessible_text() -> String,
    /// 
    /// Sets the item's accessible text to the string specified by *accessibleText.*
    /// 
    /// The accessible text is used by assistive technologies (i.e. for users who
    /// cannot use conventional means of interaction).
    /// 
    /// **See also:** accessibleText()
    /// setAccessibleDescription()
    set_accessible_text(accessible_text: String),
    /// 
    /// Returns the item's accessible description.
    /// 
    /// The accessible description is used by assistive technologies (i.e. for
    /// users who cannot use conventional means of interaction).
    /// 
    /// **See also:** setAccessibleDescription()
    /// accessibleText()
    accessible_description() -> String,
    /// 
    /// Sets the item's accessible description to the string specified by *accessibleDescription.*
    /// 
    /// The accessible description is used by assistive technologies (i.e. for
    /// users who cannot use conventional means of interaction).
    /// 
    /// **See also:** accessibleDescription()
    /// setAccessibleText()
    set_accessible_description(accessible_description: String),
    /// 
    /// Returns the item flags for the item.
    /// 
    /// The item flags determine how the user can interact with the item.
    /// 
    /// By default, items are enabled, editable, selectable, checkable, and can be
    /// used both as the source of a drag and drop operation and as a drop target.
    /// 
    /// **See also:** setFlags()
    flags() -> Rute::ItemFlags,
    /// 
    /// Sets the item flags for the item to *flags.*
    /// 
    /// The item flags determine how the user can interact with the item.
    /// This is often used to disable an item.
    /// 
    /// **See also:** flags()
    /// setData()
    set_flags(flags: Rute::ItemFlags),
    /// 
    /// Returns whether the item is enabled.
    /// 
    /// When an item is enabled, the user can interact with it. The possible
    /// types of interaction are specified by the other item flags, such as
    /// isEditable() and isSelectable().
    /// 
    /// The default value is true.
    /// 
    /// **See also:** setEnabled()
    /// flags()
    is_enabled() -> bool,
    /// 
    /// Sets whether the item is enabled. If *enabled* is true, the item is enabled,
    /// meaning that the user can interact with the item; if *enabled* is false, the
    /// user cannot interact with the item.
    /// 
    /// This flag takes precedence over the other item flags; e.g. if an item is not
    /// enabled, it cannot be selected by the user, even if the Qt::ItemIsSelectable
    /// flag has been set.
    /// 
    /// **See also:** isEnabled()
    /// Qt::ItemIsEnabled
    /// setFlags()
    set_enabled(enabled: bool),
    /// 
    /// Returns whether the item can be edited by the user.
    /// 
    /// When an item is editable (and enabled), the user can edit the item by
    /// invoking one of the view's edit triggers; see
    /// QAbstractItemView::editTriggers.
    /// 
    /// The default value is true.
    /// 
    /// **See also:** setEditable()
    /// flags()
    is_editable() -> bool,
    /// 
    /// Sets whether the item is editable. If *editable* is true, the item can be
    /// edited by the user; otherwise, the user cannot edit the item.
    /// 
    /// How the user can edit items in a view is determined by the view's edit
    /// triggers; see QAbstractItemView::editTriggers.
    /// 
    /// **See also:** isEditable()
    /// setFlags()
    set_editable(editable: bool),
    /// 
    /// Returns whether the item is selectable by the user.
    /// 
    /// The default value is true.
    /// 
    /// **See also:** setSelectable()
    /// flags()
    is_selectable() -> bool,
    /// 
    /// Sets whether the item is selectable. If *selectable* is true, the item
    /// can be selected by the user; otherwise, the user cannot select the item.
    /// 
    /// You can control the selection behavior and mode by manipulating their
    /// view properties; see QAbstractItemView::selectionMode and
    /// QAbstractItemView::selectionBehavior.
    /// 
    /// **See also:** isSelectable()
    /// setFlags()
    set_selectable(selectable: bool),
    /// 
    /// Returns whether the item is user-checkable.
    /// 
    /// The default value is false.
    /// 
    /// **See also:** setCheckable()
    /// checkState()
    /// isUserTristate()
    /// isAutoTristate()
    is_checkable() -> bool,
    /// 
    /// Sets whether the item is user-checkable. If *checkable* is true, the
    /// item can be checked by the user; otherwise, the user cannot check
    /// the item.
    /// 
    /// The item delegate will render a checkable item with a check box next to the
    /// item's text.
    /// 
    /// **See also:** isCheckable()
    /// setCheckState()
    /// setUserTristate()
    /// setAutoTristate()
    set_checkable(checkable: bool),
    /// 
    /// Returns whether the item is tristate and is controlled by QTreeWidget.
    /// 
    /// The default value is false.
    /// 
    /// **See also:** setAutoTristate()
    /// isCheckable()
    /// checkState()
    is_auto_tristate() -> bool,
    /// 
    /// Determines that the item is tristate and controlled by QTreeWidget if *tristate*
    /// is `true.`
    /// This enables automatic management of the state of parent items in QTreeWidget
    /// (checked if all children are checked, unchecked if all children are unchecked,
    /// or partially checked if only some children are checked).
    /// 
    /// **See also:** isAutoTristate()
    /// setCheckable()
    /// setCheckState()
    set_auto_tristate(tristate: bool),
    /// 
    /// Returns whether the item is tristate; that is, if it's checkable with three
    /// separate states and the user can cycle through all three states.
    /// 
    /// The default value is false.
    /// 
    /// **See also:** setUserTristate()
    /// isCheckable()
    /// checkState()
    is_user_tristate() -> bool,
    /// 
    /// Sets whether the item is tristate and controlled by the user.
    /// If *tristate* is true, the user can cycle through three separate states;
    /// otherwise, the item is checkable with two states.
    /// (Note that this also requires that the item is checkable; see isCheckable().)
    /// 
    /// **See also:** isUserTristate()
    /// setCheckable()
    /// setCheckState()
    set_user_tristate(tristate: bool),
    /// 
    /// Use QStandardItem::isAutoTristate() instead.
    /// For a tristate checkbox that the user can change between all three
    /// states, use QStandardItem::isUserTristate() instead.
    is_tristate() -> bool,
    /// 
    /// Use QStandardItem::setAutoTristate(bool tristate) instead.
    /// For a tristate checkbox that the user can change between all three
    /// states, use QStandardItem::setUserTristate(bool tristate) instead.
    set_tristate(tristate: bool),
    /// 
    /// Returns whether the item is drag enabled. An item that is drag enabled can
    /// be dragged by the user.
    /// 
    /// The default value is true.
    /// 
    /// Note that item dragging must be enabled in the view for dragging to work;
    /// see QAbstractItemView::dragEnabled.
    /// 
    /// **See also:** setDragEnabled()
    /// isDropEnabled()
    /// flags()
    is_drag_enabled() -> bool,
    /// 
    /// Sets whether the item is drag enabled. If *dragEnabled* is true, the item
    /// can be dragged by the user; otherwise, the user cannot drag the item.
    /// 
    /// Note that you also need to ensure that item dragging is enabled in the view;
    /// see QAbstractItemView::dragEnabled.
    /// 
    /// **See also:** isDragEnabled()
    /// setDropEnabled()
    /// setFlags()
    set_drag_enabled(drag_enabled: bool),
    /// 
    /// Returns whether the item is drop enabled. When an item is drop enabled, it
    /// can be used as a drop target.
    /// 
    /// The default value is true.
    /// 
    /// **See also:** setDropEnabled()
    /// isDragEnabled()
    /// flags()
    is_drop_enabled() -> bool,
    /// 
    /// Sets whether the item is drop enabled. If *dropEnabled* is true, the item
    /// can be used as a drop target; otherwise, it cannot.
    /// 
    /// Note that you also need to ensure that drops are enabled in the view; see
    /// QWidget::acceptDrops(); and that the model supports the desired drop actions;
    /// see QAbstractItemModel::supportedDropActions().
    /// 
    /// **See also:** isDropEnabled()
    /// setDragEnabled()
    /// setFlags()
    set_drop_enabled(drop_enabled: bool),
    /// 
    /// Returns the item's parent item, or 0 if the item has no parent.
    /// **Note**: For toplevel items parent() returns 0. To receive toplevel
    /// item's parent use QStandardItemModel::invisibleRootItem() instead.
    /// 
    /// **See also:** child()
    /// QStandardItemModel::invisibleRootItem()
    parent() -> StandardItem?,
    /// 
    /// Returns the row where the item is located in its parent's child table, or
    /// -1 if the item has no parent.
    /// 
    /// **See also:** column()
    /// parent()
    /// 
    /// Returns the number of child item rows that the item has.
    /// 
    /// **See also:** setRowCount()
    /// columnCount()
    row() -> i32,
    /// 
    /// Returns the column where the item is located in its parent's child table,
    /// or -1 if the item has no parent.
    /// 
    /// **See also:** row()
    /// parent()
    /// 
    /// Returns the number of child item columns that the item has.
    /// 
    /// **See also:** setColumnCount()
    /// rowCount()
    column() -> i32,
    /// 
    /// Returns the QModelIndex associated with this item.
    /// 
    /// When you need to invoke item functionality in a QModelIndex-based API (e.g.
    /// QAbstractItemView), you can call this function to obtain an index that
    /// corresponds to the item's location in the model.
    /// 
    /// If the item is not associated with a model, an invalid QModelIndex is
    /// returned.
    /// 
    /// **See also:** model()
    /// QStandardItemModel::itemFromIndex()
    index() -> ModelIndex,
    /// 
    /// Returns the QStandardItemModel that this item belongs to.
    /// 
    /// If the item is not a child of another item that belongs to the model, this
    /// function returns 0.
    /// 
    /// **See also:** index()
    model() -> StandardItemModel?,
    /// 
    /// Returns the number of child item rows that the item has.
    /// 
    /// **See also:** setRowCount()
    /// columnCount()
    row_count() -> i32,
    /// 
    /// Sets the number of child item rows to *rows.* If this is less than
    /// rowCount(), the data in the unwanted rows is discarded.
    /// 
    /// **See also:** rowCount()
    /// setColumnCount()
    set_row_count(rows: i32),
    /// 
    /// Returns the number of child item columns that the item has.
    /// 
    /// **See also:** setColumnCount()
    /// rowCount()
    column_count() -> i32,
    /// 
    /// Sets the number of child item columns to *columns.* If this is less than
    /// columnCount(), the data in the unwanted columns is discarded.
    /// 
    /// **See also:** columnCount()
    /// setRowCount()
    set_column_count(columns: i32),
    /// 
    /// Returns `true` if this item has any children; otherwise returns `false.`
    /// 
    /// **See also:** rowCount()
    /// columnCount()
    /// child()
    has_children() -> bool,
    /// 
    /// Returns the child item at ( *row,* *column)* if one has been set; otherwise
    /// returns 0.
    /// 
    /// **See also:** setChild()
    /// takeChild()
    /// parent()
    child(row: i32, column: i32) -> StandardItem?,
    /// 
    /// Sets the child item at ( *row,* *column)* to *item.* This item (the parent
    /// item) takes ownership of *item.* If necessary, the row count and column
    /// count are increased to fit the item.
    /// 
    /// **Note**: Passing a null pointer as *item* removes the item.
    /// 
    /// **See also:** child()
    /// 
    /// **Overloads**
    /// Sets the child at *row* to *item.*
    set_child(row: i32, column: i32, item: *StandardItemType),
    /// 
    /// Sets the child item at ( *row,* *column)* to *item.* This item (the parent
    /// item) takes ownership of *item.* If necessary, the row count and column
    /// count are increased to fit the item.
    /// 
    /// **Note**: Passing a null pointer as *item* removes the item.
    /// 
    /// **See also:** child()
    /// 
    /// **Overloads**
    /// Sets the child at *row* to *item.*
    set_child(row: i32, item: *StandardItemType),
    /// 
    /// Inserts a row at *row* containing *items.* If necessary, the column
    /// count is increased to the size of *items.*
    /// 
    /// **See also:** insertRows()
    /// insertColumn()
    /// 
    /// Inserts *items* at *row.* The column count won't be changed.
    /// 
    /// **See also:** insertRow()
    /// insertColumn()
    /// 
    /// Inserts *count* rows of child items at row *row.*
    /// 
    /// **See also:** insertRow()
    /// insertColumns()
    /// 
    /// **Overloads**
    /// Inserts a row at *row* containing *item.*
    /// 
    /// When building a list or a tree that has only one column, this function
    /// provides a convenient way to insert a single new item.
    insert_row(row: i32, items: [*StandardItemType]),
    /// 
    /// Inserts a column at *column* containing *items.* If necessary,
    /// the row count is increased to the size of *items.*
    /// 
    /// **See also:** insertColumns()
    /// insertRow()
    /// 
    /// Inserts *count* columns of child items at column *column.*
    /// 
    /// **See also:** insertColumn()
    /// insertRows()
    insert_column(column: i32, items: [*StandardItemType]),
    /// 
    /// Inserts *items* at *row.* The column count won't be changed.
    /// 
    /// **See also:** insertRow()
    /// insertColumn()
    /// 
    /// Inserts *count* rows of child items at row *row.*
    /// 
    /// **See also:** insertRow()
    /// insertColumns()
    insert_rows(row: i32, items: [*StandardItemType]),
    /// 
    /// Inserts *items* at *row.* The column count won't be changed.
    /// 
    /// **See also:** insertRow()
    /// insertColumn()
    /// 
    /// Inserts *count* rows of child items at row *row.*
    /// 
    /// **See also:** insertRow()
    /// insertColumns()
    insert_rows(row: i32, count: i32),
    /// 
    /// Inserts *count* columns of child items at column *column.*
    /// 
    /// **See also:** insertColumn()
    /// insertRows()
    insert_columns(column: i32, count: i32),
    /// 
    /// Removes the given *row.* The items that were in the row are deleted.
    /// 
    /// **See also:** takeRow()
    /// removeRows()
    /// removeColumn()
    /// 
    /// Removes *count* rows at row *row.* The items that were in those rows are
    /// deleted.
    /// 
    /// **See also:** removeRow()
    /// removeColumn()
    remove_row(row: i32),
    /// 
    /// Removes the given *column.* The items that were in the
    /// column are deleted.
    /// 
    /// **See also:** takeColumn()
    /// removeColumns()
    /// removeRow()
    /// 
    /// Removes *count* columns at column *column.* The items that were in those
    /// columns are deleted.
    /// 
    /// **See also:** removeColumn()
    /// removeRows()
    remove_column(column: i32),
    /// 
    /// Removes *count* rows at row *row.* The items that were in those rows are
    /// deleted.
    /// 
    /// **See also:** removeRow()
    /// removeColumn()
    remove_rows(row: i32, count: i32),
    /// 
    /// Removes *count* columns at column *column.* The items that were in those
    /// columns are deleted.
    /// 
    /// **See also:** removeColumn()
    /// removeRows()
    remove_columns(column: i32, count: i32),
    /// 
    /// Appends a row containing *items.* If necessary, the column count is
    /// increased to the size of *items.*
    /// 
    /// **See also:** insertRow()
    /// 
    /// Appends rows containing *items.* The column count will not change.
    /// 
    /// **See also:** insertRow()
    /// 
    /// **Overloads**
    /// Appends a row containing *item.*
    /// 
    /// When building a list or a tree that has only one column, this function
    /// provides a convenient way to append a single new item.
    append_row(items: [*StandardItemType]),
    /// 
    /// Appends rows containing *items.* The column count will not change.
    /// 
    /// **See also:** insertRow()
    append_rows(items: [*StandardItemType]),
    /// 
    /// Appends a column containing *items.* If necessary, the row count is
    /// increased to the size of *items.*
    /// 
    /// **See also:** insertColumn()
    append_column(items: [*StandardItemType]),
    /// 
    /// Inserts a row at *row* containing *items.* If necessary, the column
    /// count is increased to the size of *items.*
    /// 
    /// **See also:** insertRows()
    /// insertColumn()
    /// 
    /// Inserts *items* at *row.* The column count won't be changed.
    /// 
    /// **See also:** insertRow()
    /// insertColumn()
    /// 
    /// Inserts *count* rows of child items at row *row.*
    /// 
    /// **See also:** insertRow()
    /// insertColumns()
    /// 
    /// **Overloads**
    /// Inserts a row at *row* containing *item.*
    /// 
    /// When building a list or a tree that has only one column, this function
    /// provides a convenient way to insert a single new item.
    insert_row(row: i32, item: *StandardItemType),
    /// 
    /// Appends a row containing *items.* If necessary, the column count is
    /// increased to the size of *items.*
    /// 
    /// **See also:** insertRow()
    /// 
    /// Appends rows containing *items.* The column count will not change.
    /// 
    /// **See also:** insertRow()
    /// 
    /// **Overloads**
    /// Appends a row containing *item.*
    /// 
    /// When building a list or a tree that has only one column, this function
    /// provides a convenient way to append a single new item.
    append_row(item: *StandardItemType),
    /// 
    /// Removes the child item at ( *row,* *column)* without deleting it, and returns
    /// a pointer to the item. If there was no child at the given location, then
    /// this function returns 0.
    /// 
    /// Note that this function, unlike takeRow() and takeColumn(), does not affect
    /// the dimensions of the child table.
    /// 
    /// **See also:** child()
    /// takeRow()
    /// takeColumn()
    take_child(row: i32, column: i32) -> StandardItem?,
    /// 
    /// Removes *row* without deleting the row items, and returns a list of
    /// pointers to the removed items. For items in the row that have not been
    /// set, the corresponding pointers in the list will be 0.
    /// 
    /// **See also:** removeRow()
    /// insertRow()
    /// takeColumn()
    take_row(row: i32) -> [StandardItem?],
    /// 
    /// Removes *column* without deleting the column items, and returns a list of
    /// pointers to the removed items. For items in the column that have not been
    /// set, the corresponding pointers in the list will be 0.
    /// 
    /// **See also:** removeColumn()
    /// insertColumn()
    /// takeRow()
    take_column(column: i32) -> [StandardItem?],
    /// 
    /// Sorts the children of the item using the given *order,* by the values in
    /// the given *column.*
    /// 
    /// **Note**: This function is recursive, therefore it sorts the children of the
    /// item, its grandchildren, etc.
    /// 
    /// **See also:** {operator<()}
    sort_children(column: i32, order: Rute::SortOrder),
    /// 
    /// Returns a copy of this item. The item's children are not copied.
    /// 
    /// When subclassing QStandardItem, you can reimplement this function
    /// to provide QStandardItemModel with a factory that it can use to
    /// create new items on demand.
    /// 
    /// **See also:** QStandardItemModel::setItemPrototype()
    /// operator=()
    [event] clone() -> StandardItem?,
    /// 
    /// Returns the type of this item. The type is used to distinguish custom
    /// items from the base class. When subclassing QStandardItem, you should
    /// reimplement this function and return a new value greater than or equal
    /// to [UserType.](UserType.)
    /// 
    /// **See also:** QStandardItem::Type
    [event] type() -> i32,
    /// 
    /// Reads the item from stream *in.* Only the data and flags of the item are
    /// read, not the child items.
    /// 
    /// **See also:** write()
    [event] read(in: &DataStreamType),
    /// 
    /// Writes the item to stream *out.* Only the data and flags of the item
    /// are written, not the child items.
    /// 
    /// **See also:** read()
    [event] write(out: &DataStreamType),
    /// 
    /// Causes the model associated with this item to emit a
    /// [dataChanged](QAbstractItemModel::dataChanged())
    /// () signal for this
    /// item.
    /// 
    /// You normally only need to call this function if you have subclassed
    /// QStandardItem and reimplemented data() and/or setData().
    /// 
    /// **See also:** setData()
    emit_data_changed(),
}

// vim: syntax=rust expandtab ts=4 sw=4
