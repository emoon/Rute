/// 
/// The class is designed as a common super class for widgets like
/// QSpinBox, QDoubleSpinBox and QDateTimeEdit
/// 
/// Here are the main properties of the class:
/// 
/// * [text:](text:)
/// The text that is displayed in the QAbstractSpinBox.
/// * [alignment:](alignment:)
/// The alignment of the text in the QAbstractSpinBox.
/// * [wrapping:](wrapping:)
/// Whether the QAbstractSpinBox wraps from the minimum value to the maximum value and vica versa.
/// 
/// QAbstractSpinBox provides a virtual stepBy() function that is
/// called whenever the user triggers a step. This function takes an
/// integer value to signify how many steps were taken. E.g. Pressing
/// Qt::Key_Down will trigger a call to stepBy(-1).
/// 
/// QAbstractSpinBox also provide a virtual function stepEnabled() to
/// determine whether stepping up/down is allowed at any point. This
/// function returns a bitset of StepEnabled.
/// 
/// **See also:** [`AbstractSlider`]
/// [`SpinBox`]
/// [`DoubleSpinBox`]
/// [`DateTimeEdit`]
/// {Spin Boxes Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct AbstractSpinBox : Widget {
    /// 
    /// The possible values can be either `UpDownArrows` or `PlusMinus.`
    /// The default is `UpDownArrows.`
    /// 
    /// Note that some styles might render PlusMinus and UpDownArrows
    /// identically.
    /// 
    /// **See also:** ButtonSymbols
    button_symbols() -> AbstractSpinBox::ButtonSymbols,
    set_button_symbols(bs: AbstractSpinBox::ButtonSymbols),
    set_correction_mode(cm: AbstractSpinBox::CorrectionMode),
    /// 
    /// [Intermediate](QValidator::)
    /// 
    /// value if editing finishes
    /// 
    /// The default mode is QAbstractSpinBox::CorrectToPreviousValue.
    /// 
    /// **See also:** acceptableInput
    /// [`validate()`]
    /// [`fixup()`]
    correction_mode() -> AbstractSpinBox::CorrectionMode,
    has_acceptable_input() -> bool,
    /// 
    /// There is no default text.
    text() -> String,
    /// 
    /// If set, the spin box will display this text instead of a numeric
    /// value whenever the current value is equal to minimum(). Typical use
    /// is to indicate that this choice has a special (default) meaning.
    /// 
    /// For example, if your spin box allows the user to choose a scale factor
    /// (or zoom level) for displaying an image, and your application is able
    /// to automatically choose one that will enable the image to fit completely
    /// within the display window, you can set up the spin box like this:
    /// 
    /// The user will then be able to choose a scale from 1% to 1000%
    /// or select to leave it up to the application to choose. Your code
    /// must then interpret the spin box value of 0 as a request from the user
    /// to scale the image to fit inside the window.
    /// 
    /// All values are displayed with the prefix and suffix (if set), *except* for the special value, which only shows the special value
    /// text. This special text is passed in the QSpinBox::valueChanged()
    /// signal that passes a QString.
    /// 
    /// To turn off the special-value text display, call this function
    /// with an empty string. The default is no special-value text, i.e.
    /// the numeric value is shown as usual.
    /// 
    /// If no special-value text is set, specialValueText() returns an
    /// empty string.
    special_value_text() -> String,
    set_special_value_text(txt: String),
    /// 
    /// If wrapping is true stepping up from maximum() value will take you
    /// to the minimum() value and vica versa. Wrapping only make sense if
    /// you have minimum() and maximum() values set.
    /// 
    /// **See also:** [`SpinBox::minimum`]
    /// [`SpinBox::maximum`]
    wrapping() -> bool,
    set_wrapping(w: bool),
    set_read_only(r: bool),
    is_read_only() -> bool,
    set_keyboard_tracking(kt: bool),
    /// 
    /// If keyboard tracking is enabled (the default), the spinbox
    /// emits the valueChanged() signal while the new value is being
    /// entered from the keyboard.
    /// 
    /// E.g. when the user enters the value 600 by typing 6, 0, and 0,
    /// the spinbox emits 3 signals with the values 6, 60, and 600
    /// respectively.
    /// 
    /// If keyboard tracking is disabled, the spinbox doesn't emit the
    /// valueChanged() signal while typing. It emits the signal later,
    /// when the return key is pressed, when keyboard focus is lost, or
    /// when other spinbox functionality is used, e.g. pressing an arrow
    /// key.
    keyboard_tracking() -> bool,
    set_alignment(flag: Rute::Alignment),
    /// 
    /// Possible Values are Qt::AlignLeft, Qt::AlignRight, and Qt::AlignHCenter.
    /// 
    /// By default, the alignment is Qt::AlignLeft
    /// 
    /// Attempting to set the alignment to an illegal flag combination
    /// does nothing.
    /// 
    /// **See also:** [`t::alignment()`]
    alignment() -> Rute::Alignment,
    set_frame(arg0: bool),
    has_frame() -> bool,
    set_accelerated(on: bool),
    is_accelerated() -> bool,
    set_group_separator_shown(shown: bool),
    is_group_separator_shown() -> bool,
    /// 
    [event] size_hint() -> Size,
    /// 
    [event] minimum_size_hint() -> Size,
    /// 
    /// This function interprets the text of the spin box. If the value
    /// has changed since last interpretation it will emit signals.
    interpret_text(),
    /// 
    [event] event(event: *EventType) -> bool,
    /// 
    [event] input_method_query(arg0: Rute::InputMethodQuery) -> Variant,
    /// 
    /// This virtual function is called by the QAbstractSpinBox to
    /// determine whether *input* is valid. The *pos* parameter indicates
    /// the position in the string. Reimplemented in the various
    /// subclasses.
    [event] validate(input: String, pos: &i32) -> Validator::State,
    /// 
    /// This virtual function is called by the QAbstractSpinBox if the
    /// *input* is not validated to QValidator::Acceptable when Return is
    /// pressed or interpretText() is called. It will try to change the
    /// text so it is valid. Reimplemented in the various subclasses.
    [event] fixup(input: String),
    /// 
    /// Virtual function that is called whenever the user triggers a step.
    /// The *steps* parameter indicates how many steps were taken.
    /// For example, pressing `Qt::Key_Down` will trigger a call to `stepBy(-1),`
    /// whereas pressing `Qt::Key_PageUp` will trigger a call to `stepBy(10).`
    /// 
    /// If you subclass `QAbstractSpinBox` you must reimplement this
    /// function. Note that this function is called even if the resulting
    /// value will be outside the bounds of minimum and maximum. It's this
    /// function's job to handle these situations.
    /// 
    /// **See also:** [`step_up()`]
    /// [`step_down()`]
    /// [`key_press_event()`]
    [event] step_by(steps: i32),
    /// 
    /// Steps up by one linestep
    /// Calling this slot is analogous to calling stepBy(1);
    /// **See also:** [`step_by()`]
    /// [`step_down()`]
    step_up(),
    /// 
    /// Steps down by one linestep
    /// Calling this slot is analogous to calling stepBy(-1);
    /// **See also:** [`step_by()`]
    /// [`step_up()`]
    step_down(),
    /// 
    /// Selects all the text in the spinbox except the prefix and suffix.
    select_all(),
    /// 
    /// Clears the lineedit of all text but prefix and suffix.
    [event] clear(),
    /// 
    [event] resize_event(event: *ResizeEventType),
    /// 
    /// This function handles keyboard input.
    /// 
    /// The following keys are handled specifically:
    /// * Enter/Return
    /// * This will reinterpret the text and emit a signal even if the value has not changed since last time a signal was emitted.
    /// * Up
    /// * This will invoke stepBy(1)
    /// * Down
    /// * This will invoke stepBy(-1)
    /// * Page up
    /// * This will invoke stepBy(10)
    /// * Page down
    /// * This will invoke stepBy(-10)
    /// 
    /// **See also:** [`step_by()`]
    [event] key_press_event(event: *KeyEventType),
    /// 
    [event] key_release_event(event: *KeyEventType),
    [event] wheel_event(event: *WheelEventType),
    /// 
    [event] focus_in_event(event: *FocusEventType),
    /// 
    [event] focus_out_event(event: *FocusEventType),
    [event] context_menu_event(event: *ContextMenuEventType),
    /// 
    [event] change_event(event: *EventType),
    /// 
    [event] close_event(event: *CloseEventType),
    /// 
    [event] hide_event(event: *HideEventType),
    /// 
    [event] mouse_press_event(event: *MouseEventType),
    /// 
    [event] mouse_release_event(event: *MouseEventType),
    /// 
    [event] mouse_move_event(event: *MouseEventType),
    /// 
    [event] timer_event(event: *TimerEventType),
    /// 
    [event] paint_event(event: *PaintEventType),
    /// 
    [event] show_event(event: *ShowEventType),
    /// 
    /// Initialize *option* with the values from this QSpinBox. This method
    /// is useful for subclasses when they need a QStyleOptionSpinBox, but don't want
    /// to fill in all the information themselves.
    /// 
    /// **See also:** [`StyleOption::init_from`]
    init_style_option(option: *StyleOptionSpinBoxType),
    /// 
    /// This function returns a pointer to the line edit of the spin box.
    line_edit() -> LineEdit?,
    /// 
    /// Sets the line edit of the spinbox to be *lineEdit* instead of the
    /// current line edit widget. *lineEdit* can not be 0.
    /// 
    /// QAbstractSpinBox takes ownership of the new lineEdit
    /// 
    /// If QLineEdit::validator() for the *lineEdit* returns 0, the internal
    /// validator of the spinbox will be set on the line edit.
    set_line_edit(edit: *LineEditType),
    /// 
    /// Virtual function that determines whether stepping up and down is
    /// legal at any given time.
    /// 
    /// The up arrow will be painted as disabled unless (stepEnabled() &
    /// StepUpEnabled) != 0.
    /// 
    /// The default implementation will return (StepUpEnabled|
    /// StepDownEnabled) if wrapping is turned on. Else it will return
    /// StepDownEnabled if value is > minimum() or'ed with StepUpEnabled if
    /// value < maximum().
    /// 
    /// If you subclass QAbstractSpinBox you will need to reimplement this function.
    /// 
    /// **See also:** [`SpinBox::minimum`]
    /// [`SpinBox::maximum`]
    /// [`wrapping()`]
    [event] step_enabled() -> AbstractSpinBox::StepEnabled,
    /// 
    /// This signal is emitted editing is finished. This happens when the
    /// spinbox loses focus and when enter is pressed.
    [signal] editing_finished(),
}

[org_name(QAbstractSpinBox)]
enum StepEnabledFlag {
    /// 
    StepNone,
    /// 
    StepUpEnabled,
    /// 
    StepDownEnabled,
}

[org_name(QAbstractSpinBox)]
enum ButtonSymbols {
    /// Little arrows in the classic style.
    UpDownArrows,
    /// **+** and **-** symbols.
    PlusMinus,
    /// Don't display buttons.
    NoButtons,
}

[org_name(QAbstractSpinBox)]
enum CorrectionMode {
    /// The spinbox will revert to the last valid value.
    CorrectToPreviousValue,
    /// The spinbox will revert to the nearest valid value.
    CorrectToNearestValue,
}

// vim: syntax=rust expandtab ts=4 sw=4
