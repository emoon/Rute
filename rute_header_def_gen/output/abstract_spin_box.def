///     \class QAbstractSpinBox
///     \brief The QAbstractSpinBox class provides a spinbox and a line edit to
///     display values.
/// 
///     \ingroup abstractwidgets
///     \inmodule QtWidgets
/// 
///     The class is designed as a common super class for widgets like
///     QSpinBox, QDoubleSpinBox and QDateTimeEdit
/// 
///     Here are the main properties of the class:
/// 
///     \list 1
/// 
///     \li \l text: The text that is displayed in the QAbstractSpinBox.
/// 
///     \li \l alignment: The alignment of the text in the QAbstractSpinBox.
/// 
///     \li \l wrapping: Whether the QAbstractSpinBox wraps from the
///     minimum value to the maximum value and vica versa.
/// 
///     \endlist
/// 
///     QAbstractSpinBox provides a virtual stepBy() function that is
///     called whenever the user triggers a step. This function takes an
///     integer value to signify how many steps were taken. E.g. Pressing
///     Qt::Key_Down will trigger a call to stepBy(-1).
/// 
///     QAbstractSpinBox also provide a virtual function stepEnabled() to
///     determine whether stepping up/down is allowed at any point. This
///     function returns a bitset of StepEnabled.
/// 
///     \sa QAbstractSlider, QSpinBox, QDoubleSpinBox, QDateTimeEdit,
///         {Spin Boxes Example}
[org_name(QAbstractSpinBox)]
enum StepEnabledFlag {
    StepNone,
    StepUpEnabled,
    StepDownEnabled,
}

[org_name(QAbstractSpinBox)]
enum ButtonSymbols {
    UpDownArrows,
    PlusMinus,
    NoButtons,
}

[org_name(QAbstractSpinBox)]
enum CorrectionMode {
    CorrectToPreviousValue,
    CorrectToNearestValue,
}

struct AbstractSpinBox : Widget {
    button_symbols() -> AbstractSpinBox::ButtonSymbols,
    set_button_symbols(bs: AbstractSpinBox::ButtonSymbols),
    set_correction_mode(cm: AbstractSpinBox::CorrectionMode),
    correction_mode() -> AbstractSpinBox::CorrectionMode,
    has_acceptable_input() -> bool,
    text() -> String,
    special_value_text() -> String,
    set_special_value_text(txt: String),
    wrapping() -> bool,
    set_wrapping(w: bool),
    set_read_only(r: bool),
    is_read_only() -> bool,
    set_keyboard_tracking(kt: bool),
    keyboard_tracking() -> bool,
    set_alignment(flag: Rute::Alignment),
    alignment() -> Rute::Alignment,
    set_frame(arg0: bool),
    has_frame() -> bool,
    set_accelerated(on: bool),
    is_accelerated() -> bool,
    set_group_separator_shown(shown: bool),
    is_group_separator_shown() -> bool,
    [event] size_hint() -> Size,
    [event] minimum_size_hint() -> Size,
    interpret_text(),
    [event] event(event: *EventType) -> bool,
    [event] input_method_query(arg0: Rute::InputMethodQuery) -> Variant,
    [event] validate(input: String, pos: &i32) -> Validator::State,
    [event] fixup(input: String),
    [event] step_by(steps: i32),
    step_up(),
    step_down(),
    select_all(),
    [event] clear(),
    [event] resize_event(event: *ResizeEventType),
    [event] key_press_event(event: *KeyEventType),
    [event] key_release_event(event: *KeyEventType),
    [event] wheel_event(event: *WheelEventType),
    [event] focus_in_event(event: *FocusEventType),
    [event] focus_out_event(event: *FocusEventType),
    [event] context_menu_event(event: *ContextMenuEventType),
    [event] change_event(event: *EventType),
    [event] close_event(event: *CloseEventType),
    [event] hide_event(event: *HideEventType),
    [event] mouse_press_event(event: *MouseEventType),
    [event] mouse_release_event(event: *MouseEventType),
    [event] mouse_move_event(event: *MouseEventType),
    [event] timer_event(event: *TimerEventType),
    [event] paint_event(event: *PaintEventType),
    [event] show_event(event: *ShowEventType),
    init_style_option(option: *StyleOptionSpinBoxType),
    line_edit() -> LineEdit?,
    set_line_edit(edit: *LineEditType),
    [event] step_enabled() -> AbstractSpinBox::StepEnabled,
    [signal] editing_finished(),
}

// vim: syntax=rust expandtab ts=4 sw=4
