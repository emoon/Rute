///     \class QCursor
/// 
///     \brief The QCursor class provides a mouse cursor with an arbitrary
///     shape.
/// 
///     \inmodule QtGui
///     \ingroup appearance
///     \ingroup shared
/// 
/// 
///     This class is mainly used to create mouse cursors that are
///     associated with particular widgets and to get and set the position
///     of the mouse cursor.
/// 
///     Qt has a number of standard cursor shapes, but you can also make
///     custom cursor shapes based on a QBitmap, a mask and a hotspot.
/// 
///     To associate a cursor with a widget, use QWidget::setCursor(). To
///     associate a cursor with all widgets (normally for a short period
///     of time), use QGuiApplication::setOverrideCursor().
/// 
///     To set a cursor shape use QCursor::setShape() or use the QCursor
///     constructor which takes the shape as argument, or you can use one
///     of the predefined cursors defined in the \l Qt::CursorShape enum.
/// 
///     If you want to create a cursor with your own bitmap, either use
///     the QCursor constructor which takes a bitmap and a mask or the
///     constructor which takes a pixmap as arguments.
/// 
///     To set or get the position of the mouse cursor use the static
///     methods QCursor::pos() and QCursor::setPos().
/// 
///     \b{Note:} It is possible to create a QCursor before
///     QGuiApplication, but it is not useful except as a place-holder for a
///     real QCursor created after QGuiApplication. Attempting to use a
///     QCursor that was created before QGuiApplication will result in a
///     crash.
/// 
///     \section1 A Note for X11 Users
/// 
///     On X11, Qt supports the \l{Xcursor}{Xcursor}
///     library, which allows for full color icon themes. The table below
///     shows the cursor name used for each Qt::CursorShape value. If a
///     cursor cannot be found using the name shown below, a standard X11
///     cursor will be used instead. Note: X11 does not provide
///     appropriate cursors for all possible Qt::CursorShape values. It
///     is possible that some cursors will be taken from the Xcursor
///     theme, while others will use an internal bitmap cursor.
/// 
///     \table
///     \header \li Shape \li Qt::CursorShape Value \li Cursor Name
///             \li Shape \li Qt::CursorShape Value \li Cursor Name
///     \row \li \inlineimage cursor-arrow.png
///          \li Qt::ArrowCursor   \li \c left_ptr
///          \li \inlineimage      cursor-sizev.png
///          \li Qt::SizeVerCursor \li \c size_ver
///     \row \li \inlineimage      cursor-uparrow.png
///          \li Qt::UpArrowCursor \li \c up_arrow
///          \li \inlineimage      cursor-sizeh.png
///          \li Qt::SizeHorCursor \li \c size_hor
///     \row \li \inlineimage      cursor-cross.png
///          \li Qt::CrossCursor   \li \c cross
///          \li \inlineimage      cursor-sizeb.png
///          \li Qt::SizeBDiagCursor \li \c size_bdiag
///     \row \li \inlineimage      cursor-ibeam.png
///          \li Qt::IBeamCursor   \li \c ibeam
///          \li \inlineimage      cursor-sizef.png
///          \li Qt::SizeFDiagCursor \li \c size_fdiag
///     \row \li \inlineimage      cursor-wait.png
///          \li Qt::WaitCursor    \li \c wait
///          \li \inlineimage      cursor-sizeall.png
///          \li Qt::SizeAllCursor \li \c size_all
///     \row \li \inlineimage      cursor-busy.png
///          \li Qt::BusyCursor    \li \c left_ptr_watch
///          \li \inlineimage      cursor-vsplit.png
///          \li Qt::SplitVCursor  \li \c split_v
///     \row \li \inlineimage      cursor-forbidden.png
///          \li Qt::ForbiddenCursor \li \c forbidden
///          \li \inlineimage      cursor-hsplit.png
///          \li Qt::SplitHCursor  \li \c split_h
///     \row \li \inlineimage      cursor-hand.png
///          \li Qt::PointingHandCursor \li \c pointing_hand
///          \li \inlineimage      cursor-openhand.png
///          \li Qt::OpenHandCursor  \li \c openhand
///     \row \li \inlineimage      cursor-whatsthis.png
///          \li Qt::WhatsThisCursor \li \c whats_this
///          \li \inlineimage      cursor-closedhand.png
///          \li Qt::ClosedHandCursor \li \c closedhand
///     \row \li
///          \li Qt::DragMoveCursor      \li \c dnd-move or \c move
///          \li
///          \li Qt::DragCopyCursor      \li \c dnd-copy or \c copy
///     \row \li
///          \li Qt::DragLinkCursor      \li \c dnd-link or \c link
///     \endtable
/// 
///     \sa QWidget, {fowler}{GUI Design Handbook: Cursors}
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct Cursor {
    swap(other: &CursorType),
    ///     Returns the cursor shape identifier. The return value is one of
    ///     the \l Qt::CursorShape enum values (cast to an int).
    /// 
    ///     \sa setShape()
    shape() -> Rute::CursorShape,
    ///     Sets the cursor to the shape identified by \a shape.
    /// 
    ///     See \l Qt::CursorShape for the list of cursor shapes.
    /// 
    ///     \sa shape()
    set_shape(new_shape: Rute::CursorShape),
    ///     Returns the cursor bitmap, or 0 if it is one of the standard
    ///     cursors.
    bitmap() -> Bitmap?,
    ///     Returns the cursor bitmap mask, or 0 if it is one of the standard
    ///     cursors.
    mask() -> Bitmap?,
    ///     Returns the cursor pixmap. This is only valid if the cursor is a
    ///     pixmap cursor.
    pixmap() -> Pixmap,
    ///     Returns the cursor hot spot, or (0, 0) if it is one of the
    ///     standard cursors.
    hot_spot() -> Point,
    ///     \fn QPoint QCursor::pos()
    /// 
    ///     Returns the position of the cursor (hot spot) of
    ///     the primary screen in global screen coordinates.
    /// 
    ///     You can call QWidget::mapFromGlobal() to translate it to widget
    ///     coordinates.
    /// 
    ///     \note The position is queried from the windowing system. If mouse events are generated
    ///     via other means (e.g., via QWindowSystemInterface in a unit test), those fake mouse
    ///     moves will not be reflected in the returned value.
    /// 
    ///     \note On platforms where there is no windowing system or cursors are not available, the returned
    ///     position is based on the mouse move events generated via QWindowSystemInterface.
    /// 
    ///     \sa setPos(), QWidget::mapFromGlobal(), QWidget::mapToGlobal(), QGuiApplication::primaryScreen()
    [static] pos() -> Point,
    ///     \fn QPoint QCursor::pos()
    /// 
    ///     Returns the position of the cursor (hot spot) of
    ///     the primary screen in global screen coordinates.
    /// 
    ///     You can call QWidget::mapFromGlobal() to translate it to widget
    ///     coordinates.
    /// 
    ///     \note The position is queried from the windowing system. If mouse events are generated
    ///     via other means (e.g., via QWindowSystemInterface in a unit test), those fake mouse
    ///     moves will not be reflected in the returned value.
    /// 
    ///     \note On platforms where there is no windowing system or cursors are not available, the returned
    ///     position is based on the mouse move events generated via QWindowSystemInterface.
    /// 
    ///     \sa setPos(), QWidget::mapFromGlobal(), QWidget::mapToGlobal(), QGuiApplication::primaryScreen()
    [static] pos(screen: *ScreenType) -> Point,
    ///     \fn void QCursor::setPos(int x, int y)
    /// 
    ///     Moves the cursor (hot spot) of the primary screen
    ///     to the global screen position (\a x, \a y).
    /// 
    ///     You can call QWidget::mapToGlobal() to translate widget
    ///     coordinates to global screen coordinates.
    /// 
    ///     \sa pos(), QWidget::mapFromGlobal(), QWidget::mapToGlobal(), QGuiApplication::primaryScreen()
    [static] set_pos(x: i32, y: i32),
    ///     \fn void QCursor::setPos(int x, int y)
    /// 
    ///     Moves the cursor (hot spot) of the primary screen
    ///     to the global screen position (\a x, \a y).
    /// 
    ///     You can call QWidget::mapToGlobal() to translate widget
    ///     coordinates to global screen coordinates.
    /// 
    ///     \sa pos(), QWidget::mapFromGlobal(), QWidget::mapToGlobal(), QGuiApplication::primaryScreen()
    [static] set_pos(screen: *ScreenType, x: i32, y: i32),
    ///     \fn void QCursor::setPos(int x, int y)
    /// 
    ///     Moves the cursor (hot spot) of the primary screen
    ///     to the global screen position (\a x, \a y).
    /// 
    ///     You can call QWidget::mapToGlobal() to translate widget
    ///     coordinates to global screen coordinates.
    /// 
    ///     \sa pos(), QWidget::mapFromGlobal(), QWidget::mapToGlobal(), QGuiApplication::primaryScreen()
    [static] set_pos(p: &PointType),
    ///     \fn void QCursor::setPos(int x, int y)
    /// 
    ///     Moves the cursor (hot spot) of the primary screen
    ///     to the global screen position (\a x, \a y).
    /// 
    ///     You can call QWidget::mapToGlobal() to translate widget
    ///     coordinates to global screen coordinates.
    /// 
    ///     \sa pos(), QWidget::mapFromGlobal(), QWidget::mapToGlobal(), QGuiApplication::primaryScreen()
    [static] set_pos(screen: *ScreenType, p: &PointType),
}

// vim: syntax=rust expandtab ts=4 sw=4
