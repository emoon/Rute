/// 
/// When a widget [accepts drop events](QWidget::setAcceptDrops())
/// , it will
/// receive this event if it has accepted the most recent QDragEnterEvent or
/// QDragMoveEvent sent to it.
/// 
/// The drop event contains a proposed action, available from proposedAction(), for
/// the widget to either accept or ignore. If the action can be handled by the
/// widget, you should call the acceptProposedAction() function. Since the
/// proposed action can be a combination of [Qt::DropAction](Qt::DropAction)
/// values, it may be
/// useful to either select one of these values as a default action or ask
/// the user to select their preferred action.
/// 
/// If the proposed drop action is not suitable, perhaps because your custom
/// widget does not support that action, you can replace it with any of the
/// [possible drop actions](possibleActions())
/// by calling setDropAction()
/// with your preferred action. If you set a value that is not present in the
/// bitwise OR combination of values returned by possibleActions(), the default
/// copy action will be used. Once a replacement drop action has been set, call
/// accept() instead of acceptProposedAction() to complete the drop operation.
/// 
/// The mimeData() function provides the data dropped on the widget in a QMimeData
/// object. This contains information about the MIME type of the data in addition to
/// the data itself.
/// 
/// **See also:** [`MimeData`]
/// [`Drag`]
/// {Drag and Drop}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct DropEvent : Event {
    /// 
    /// Returns the position where the drop was made.
    /// 
    /// Returns the position where the drop was made.
    /// 
    /// Returns an OR-combination of possible drop actions.
    /// 
    /// **See also:** [`drop_action()`]
    pos() -> Point,
    /// 
    /// Returns the position where the drop was made.
    pos_f() -> PointF?,
    /// 
    /// Returns the mouse buttons that are pressed..
    mouse_buttons() -> Rute::MouseButtons,
    /// 
    /// Returns the modifier keys that are pressed.
    keyboard_modifiers() -> Rute::KeyboardModifiers,
    /// 
    /// Returns an OR-combination of possible drop actions.
    /// 
    /// **See also:** [`drop_action()`]
    possible_actions() -> Rute::DropActions,
    /// 
    /// Returns the proposed drop action.
    /// 
    /// **See also:** [`drop_action()`]
    proposed_action() -> Rute::DropAction,
    /// 
    /// Sets the drop action to be the proposed action.
    /// 
    /// **See also:** [`set_drop_action()`]
    /// [`proposed_action()`]
    /// {QEvent::accept()}{accept()}
    accept_proposed_action(),
    /// 
    /// Returns the action to be performed on the data by the target. This may be
    /// different from the action supplied in proposedAction() if you have called
    /// setDropAction() to explicitly choose a drop action.
    /// 
    /// **See also:** [`set_drop_action()`]
    drop_action() -> Rute::DropAction,
    /// 
    /// Sets the *action* to be performed on the data by the target.
    /// Use this to override the [proposed action](proposedAction())
    /// 
    /// with one of the [possible actions](possibleActions())
    /// 
    /// 
    /// If you set a drop action that is not one of the possible actions, the
    /// drag and drop operation will default to a copy operation.
    /// 
    /// Once you have supplied a replacement drop action, call accept()
    /// instead of acceptProposedAction().
    /// 
    /// **See also:** [`drop_action()`]
    set_drop_action(action: Rute::DropAction),
    /// 
    /// If the source of the drag operation is a widget in this
    /// application, this function returns that source; otherwise it
    /// returns 0. The source of the operation is the first parameter to
    /// the QDrag object used instantiate the drag.
    /// 
    /// This is useful if your widget needs special behavior when dragging
    /// to itself.
    /// 
    /// **See also:** [`Drag::q_drag`]
    source() -> Object?,
    /// 
    /// Returns the data that was dropped on the widget and its associated MIME
    /// type information.
    mime_data() -> MimeData?,
}

// vim: syntax=rust expandtab ts=4 sw=4
