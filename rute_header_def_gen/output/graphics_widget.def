#[org_name(QGraphicsWidget)]
enum GraphicsWidgetFixMeEnums {
    Type,
}

struct GraphicsWidget : GraphicsObject, GraphicsLayoutItem {
    layout() -> GraphicsLayout?,
    set_layout(layout: &GraphicsLayoutType),
    adjust_size(),
    layout_direction() -> Rute::LayoutDirection,
    set_layout_direction(direction: Rute::LayoutDirection),
    unset_layout_direction(),
    style() -> Style?,
    set_style(style: &StyleType),
    font() -> Font,
    set_font(font: &FontType),
    palette() -> Palette,
    set_palette(palette: &PaletteType),
    auto_fill_background() -> bool,
    set_auto_fill_background(enabled: bool),
    resize(size: &SizeFType),
    resize(w: f32, h: f32),
    size() -> SizeF,
    rect() -> RectF,
    set_contents_margins(left: f32, top: f32, right: f32, bottom: f32),
    [replace] get_contents_margins(left: &f32, top: &f32, right: &f32, bottom: &f32),
    set_window_frame_margins(left: f32, top: f32, right: f32, bottom: f32),
    get_window_frame_margins(left: &f32, top: &f32, right: &f32, bottom: &f32),
    unset_window_frame_margins(),
    window_frame_rect() -> RectF,
    window_flags() -> Rute::WindowFlags,
    window_type() -> Rute::WindowType,
    set_window_flags(w_flags: Rute::WindowFlags),
    is_active_window() -> bool,
    set_window_title(title: String),
    window_title() -> String,
    focus_policy() -> Rute::FocusPolicy,
    set_focus_policy(policy: Rute::FocusPolicy),
    [static] set_tab_order(first: &GraphicsWidgetType, second: &GraphicsWidgetType),
    focus_widget() -> GraphicsWidget?,
    grab_shortcut(sequence: &KeySequenceType, context: Rute::ShortcutContext) -> i32,
    release_shortcut(id: i32),
    set_shortcut_enabled(id: i32, enabled: bool),
    set_shortcut_auto_repeat(id: i32, enabled: bool),
    add_action(action: &ActionType),
    add_actions(actions: [&ActionType]),
    insert_actions(before: &ActionType, actions: [&ActionType]),
    insert_action(before: &ActionType, action: &ActionType),
    remove_action(action: &ActionType),
    actions() -> [Action?],
    [replace] type() -> i32,
    [replace] paint(painter: &PainterType, option: &StyleOptionGraphicsItemType, widget: &WidgetType),
    [replace] paint_window_frame(painter: &PainterType, option: &StyleOptionGraphicsItemType, widget: &WidgetType),
    [replace] bounding_rect() -> RectF,
    [replace] shape() -> PainterPath,
    [event] layout_changed(),
    close() -> bool,
    [replace] init_style_option(option: &StyleOptionType),
    [replace] size_hint(which: Rute::SizeHint, constraint: &SizeFType) -> SizeF,
    [replace] item_change(change: GraphicsItem::GraphicsItemChange, value: &VariantType) -> Variant,
    [replace] property_change(property_name: String, value: &VariantType) -> Variant,
    [replace] scene_event(event: &EventType) -> bool,
    [replace] window_frame_event(e: &EventType) -> bool,
    [replace] window_frame_section_at(pos: &PointFType) -> Rute::WindowFrameSection,
    [replace] event(event: &EventType) -> bool,
    [replace] change_event(event: &EventType),
    [replace] close_event(event: &CloseEventType),
    [replace] focus_in_event(event: &FocusEventType),
    [replace] focus_next_prev_child(next: bool) -> bool,
    [replace] focus_out_event(event: &FocusEventType),
    [replace] hide_event(event: &HideEventType),
    [replace] move_event(event: &GraphicsSceneMoveEventType),
    [replace] polish_event(),
    [replace] resize_event(event: &GraphicsSceneResizeEventType),
    [replace] show_event(event: &ShowEventType),
    [replace] hover_move_event(event: &GraphicsSceneHoverEventType),
    [replace] hover_leave_event(event: &GraphicsSceneHoverEventType),
    [replace] grab_mouse_event(event: &EventType),
    [replace] ungrab_mouse_event(event: &EventType),
    [replace] grab_keyboard_event(event: &EventType),
    [replace] ungrab_keyboard_event(event: &EventType),
}

// vim: syntax=rust expandtab ts=4 sw=4
