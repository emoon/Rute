/// 
/// QColumnView displays a model in a number of QListViews, one for each
/// hierarchy in the tree. This is sometimes referred to as a cascading list.
/// 
/// The QColumnView class is one of the [Model/View Classes](Model/View%20Classes)
/// and is part of Qt's [model/view framework](Model/View%20Programming)
/// 
/// 
/// QColumnView implements the interfaces defined by the
/// QAbstractItemView class to allow it to display data provided by
/// models derived from the QAbstractItemModel class.
/// 
/// ![qcolumnview.png](qcolumnview.png)
/// 
/// **See also:** {Model/View Programming}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct ColumnView : AbstractItemView {
    /// 
    /// This signal is emitted when the preview widget should be updated to
    /// provide rich information about *index*
    /// 
    /// **See also:** [`preview_widget()`]
    [signal] update_preview_widget(index: &ModelIndexType),
    /// 
    [event] index_at(point: &PointType) -> ModelIndex,
    /// 
    [event] scroll_to(index: &ModelIndexType, hint: AbstractItemView::ScrollHint),
    /// 
    [event] size_hint() -> Size,
    /// 
    [event] visual_rect(index: &ModelIndexType) -> Rect,
    /// 
    [event] set_model(model: *AbstractItemModelType),
    /// 
    [event] set_selection_model(selection_model: *ItemSelectionModelType),
    /// 
    [event] set_root_index(index: &ModelIndexType),
    /// 
    [event] select_all(),
    set_resize_grips_visible(visible: bool),
    /// 
    /// By default, `visible` is set to true
    /// 
    /// **See also:** [`set_root_index()`]
    resize_grips_visible() -> bool,
    /// 
    /// Returns the preview widget, or 0 if there is none.
    /// 
    /// **See also:** [`set_preview_widget()`]
    /// [`update_preview_widget()`]
    preview_widget() -> Widget?,
    /// 
    /// Sets the preview *widget.*
    /// 
    /// The *widget* becomes a child of the column view, and will be
    /// destroyed when the column area is deleted or when a new widget is
    /// set.
    /// 
    /// **See also:** [`preview_widget()`]
    /// [`update_preview_widget()`]
    set_preview_widget(widget: *WidgetType),
    /// 
    /// Sets the column widths to the values given in the *list.* Extra values in the list are
    /// kept and used when the columns are created.
    /// 
    /// If list contains too few values, only width of the rest of the columns will not be modified.
    /// 
    /// **See also:** [`column_widths()`]
    /// [`create_column()`]
    set_column_widths(list: [i32]),
    /// 
    /// Returns a list of the width of all the columns in this view.
    /// 
    /// **See also:** [`set_column_widths()`]
    column_widths() -> [i32],
    /// 
    [event] is_index_hidden(index: &ModelIndexType) -> bool,
    /// 
    /// Move left should go to the parent index
    /// Move right should go to the child index or down if there is no child
    [event] move_cursor(cursor_action: AbstractItemView::CursorAction, modifiers: Rute::KeyboardModifiers) -> ModelIndex,
    /// 
    [event] resize_event(event: *ResizeEventType),
    /// 
    /// 
    [event] set_selection(rect: &RectType, command: ItemSelectionModel::SelectionFlags),
    /// 
    [event] visual_region_for_selection(selection: &ItemSelectionType) -> Region,
    /// 
    [event] horizontal_offset() -> i32,
    /// 
    [event] vertical_offset() -> i32,
    /// 
    [event] rows_inserted(parent: &ModelIndexType, start: i32, end: i32),
    /// 
    [event] current_changed(current: &ModelIndexType, previous: &ModelIndexType),
    /// 
    [event] scroll_contents_by(dx: i32, dy: i32),
    /// 
    /// To use a custom widget for the final column when you select
    /// an item overload this function and return a widget.
    /// *index* is the root index that will be assigned to the view.
    /// 
    /// Return the new view. QColumnView will automatically take ownership of the widget.
    /// 
    /// **See also:** [`set_preview_widget()`]
    [event] create_column(root_index: &ModelIndexType) -> AbstractItemView?,
    /// 
    /// Copies the behavior and options of the column view and applies them to
    /// the *column* such as the iconSize(), textElideMode() and
    /// alternatingRowColors(). This can be useful when reimplementing
    /// createColumn().
    /// 
    /// **See also:** [`create_column()`]
    initialize_column(column: *AbstractItemViewType),
}

// vim: syntax=rust expandtab ts=4 sw=4
