///     \class QSizeF
///     \inmodule QtCore
///     \brief The QSizeF class defines the size of a two-dimensional object
///     using floating point precision.
/// 
///     \ingroup painting
/// 
///     A size is specified by a width() and a height().  It can be set in
///     the constructor and changed using the setWidth(), setHeight(), or
///     scale() functions, or using arithmetic operators. A size can also
///     be manipulated directly by retrieving references to the width and
///     height using the rwidth() and rheight() functions. Finally, the
///     width and height can be swapped using the transpose() function.
/// 
///     The isValid() function determines if a size is valid. A valid size
///     has both width and height greater than or equal to zero. The
///     isEmpty() function returns \c true if either of the width and height
///     is \e less than (or equal to) zero, while the isNull() function
///     returns \c true only if both the width and the height is zero.
/// 
///     Use the expandedTo() function to retrieve a size which holds the
///     maximum height and width of this size and a given
///     size. Similarly, the boundedTo() function returns a size which
///     holds the minimum height and width of this size and a given size.
/// 
///     The QSizeF class also provides the toSize() function returning a
///     QSize copy of this size, constructed by rounding the width and
///     height to the nearest integers.
/// 
///     QSizeF objects can be streamed as well as compared.
/// 
///     \sa QSize, QPointF, QRectF
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct SizeF {
    is_null() -> bool,
    is_empty() -> bool,
    is_valid() -> bool,
    width() -> f32,
    height() -> f32,
    set_width(w: f32),
    set_height(h: f32),
    scale(w: f32, h: f32, mode: Rute::AspectRatioMode),
    scale(s: &SizeFType, mode: Rute::AspectRatioMode),
    ///     \overload
    ///     \since 5.0
    /// 
    ///     Returns a size scaled to a rectangle with the given size \a s,
    ///     according to the specified \a mode.
    scaled(w: f32, h: f32, mode: Rute::AspectRatioMode) -> SizeF,
    ///     \overload
    ///     \since 5.0
    /// 
    ///     Returns a size scaled to a rectangle with the given size \a s,
    ///     according to the specified \a mode.
    scaled(s: &SizeFType, mode: Rute::AspectRatioMode) -> SizeF,
    expanded_to(arg0: &SizeFType) -> SizeF,
    bounded_to(arg0: &SizeFType) -> SizeF,
    rwidth() -> f32?,
    rheight() -> f32?,
    to_size() -> Size,
}

// vim: syntax=rust expandtab ts=4 sw=4
