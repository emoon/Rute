struct GraphicsProxyWidget : GraphicsWidget {
    set_widget(widget: &WidgetType),
    widget() -> &WidgetType,
    sub_widget_rect(widget: &WidgetType) -> RectFType,
    [override] paint(painter: &PainterType, option: &StyleOptionGraphicsItemType, widget: &WidgetType),
    [override] type() -> i32,
    create_proxy_for_child_widget(child: &WidgetType) -> &GraphicsProxyWidgetType,
    [override] item_change(change: GraphicsItem::GraphicsItemChange, value: &VariantType) -> VariantType,
    [override] event(event: &EventType) -> bool,
    [override] event_filter(object: &ObjectType, event: &EventType) -> bool,
    [override] show_event(event: &ShowEventType),
    [override] hide_event(event: &HideEventType),
    [override] context_menu_event(event: &GraphicsSceneContextMenuEventType),
    [override] drag_enter_event(event: &GraphicsSceneDragDropEventType),
    [override] drag_leave_event(event: &GraphicsSceneDragDropEventType),
    [override] drag_move_event(event: &GraphicsSceneDragDropEventType),
    [override] drop_event(event: &GraphicsSceneDragDropEventType),
    [override] hover_enter_event(event: &GraphicsSceneHoverEventType),
    [override] hover_leave_event(event: &GraphicsSceneHoverEventType),
    [override] hover_move_event(event: &GraphicsSceneHoverEventType),
    [override] grab_mouse_event(event: &EventType),
    [override] ungrab_mouse_event(event: &EventType),
    [override] mouse_move_event(event: &GraphicsSceneMouseEventType),
    [override] mouse_press_event(event: &GraphicsSceneMouseEventType),
    [override] mouse_release_event(event: &GraphicsSceneMouseEventType),
    [override] mouse_double_click_event(event: &GraphicsSceneMouseEventType),
    [override] wheel_event(event: &GraphicsSceneWheelEventType),
    [override] key_press_event(event: &KeyEventType),
    [override] key_release_event(event: &KeyEventType),
    [override] focus_in_event(event: &FocusEventType),
    [override] focus_out_event(event: &FocusEventType),
    [override] focus_next_prev_child(next: bool) -> bool,
    [override] input_method_query(query: Rute::InputMethodQuery) -> VariantType,
    [override] input_method_event(event: &InputMethodEventType),
    [override] size_hint(which: Rute::SizeHint, constraint: &SizeFType) -> SizeFType,
    [override] resize_event(event: &GraphicsSceneResizeEventType),
    new_proxy_widget(arg0: &WidgetType) -> &GraphicsProxyWidgetType,
}

// vim: syntax=rust expandtab ts=4 sw=4
