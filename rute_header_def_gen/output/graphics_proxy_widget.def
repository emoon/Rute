[org_name(QGraphicsProxyWidget)]
enum GraphicsProxyWidgetFixMeEnums {
    Type,
}

struct GraphicsProxyWidget : GraphicsWidget {
    set_widget(widget: *WidgetType),
    widget() -> Widget?,
    sub_widget_rect(widget: *WidgetType) -> RectF,
    [event] paint(painter: *PainterType, option: *StyleOptionGraphicsItemType, widget: *WidgetType),
    [event] type() -> i32,
    create_proxy_for_child_widget(child: *WidgetType) -> GraphicsProxyWidget?,
    [event] item_change(change: GraphicsItem::GraphicsItemChange, value: &VariantType) -> Variant,
    [event] event(event: *EventType) -> bool,
    [event] event_filter(object: *ObjectType, event: *EventType) -> bool,
    [event] show_event(event: *ShowEventType),
    [event] hide_event(event: *HideEventType),
    [event] context_menu_event(event: *GraphicsSceneContextMenuEventType),
    [event] drag_enter_event(event: *GraphicsSceneDragDropEventType),
    [event] drag_leave_event(event: *GraphicsSceneDragDropEventType),
    [event] drag_move_event(event: *GraphicsSceneDragDropEventType),
    [event] drop_event(event: *GraphicsSceneDragDropEventType),
    [event] hover_enter_event(event: *GraphicsSceneHoverEventType),
    [event] hover_leave_event(event: *GraphicsSceneHoverEventType),
    [event] hover_move_event(event: *GraphicsSceneHoverEventType),
    [event] grab_mouse_event(event: *EventType),
    [event] ungrab_mouse_event(event: *EventType),
    [event] mouse_move_event(event: *GraphicsSceneMouseEventType),
    [event] mouse_press_event(event: *GraphicsSceneMouseEventType),
    [event] mouse_release_event(event: *GraphicsSceneMouseEventType),
    [event] mouse_double_click_event(event: *GraphicsSceneMouseEventType),
    [event] wheel_event(event: *GraphicsSceneWheelEventType),
    [event] key_press_event(event: *KeyEventType),
    [event] key_release_event(event: *KeyEventType),
    [event] focus_in_event(event: *FocusEventType),
    [event] focus_out_event(event: *FocusEventType),
    [event] focus_next_prev_child(next: bool) -> bool,
    [event] input_method_query(query: Rute::InputMethodQuery) -> Variant,
    [event] input_method_event(event: *InputMethodEventType),
    [event] size_hint(which: Rute::SizeHint, constraint: &SizeFType) -> SizeF,
    [event] resize_event(event: *GraphicsSceneResizeEventType),
    new_proxy_widget(arg0: *WidgetType) -> GraphicsProxyWidget?,
}

// vim: syntax=rust expandtab ts=4 sw=4
