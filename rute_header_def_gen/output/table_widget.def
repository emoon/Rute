/// 
/// ![windows-tableview.png](windows-tableview.png)
/// 
/// Table widgets provide standard table display facilities for applications.
/// The items in a QTableWidget are provided by QTableWidgetItem.
/// 
/// If you want a table that uses your own data model you should
/// use QTableView rather than this class.
/// 
/// Table widgets can be constructed with the required numbers of rows and
/// columns:
/// 
/// Alternatively, tables can be constructed without a given size and resized
/// later:
/// 
/// Items are created outside the table (with no parent widget) and inserted
/// into the table with setItem():
/// 
/// If you want to enable sorting in your table widget, do so after you
/// have populated it with items, otherwise sorting may interfere with
/// the insertion order (see setItem() for details).
/// 
/// Tables can be given both horizontal and vertical headers. The simplest way
/// to create the headers is to supply a list of strings to the
/// setHorizontalHeaderLabels() and setVerticalHeaderLabels() functions. These
/// will provide simple textual headers for the table's columns and rows.
/// More sophisticated headers can be created from existing table items
/// that are usually constructed outside the table. For example, we can
/// construct a table item with an icon and aligned text, and use it as the
/// header for a particular column:
/// 
/// The number of rows in the table can be found with rowCount(), and the
/// number of columns with columnCount(). The table can be cleared with the
/// clear() function.
/// 
/// **See also:** QTableWidgetItem
/// QTableView
/// {Model/View Programming}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TableWidget : TableView {
    /// 
    /// Sets the number of rows in this table's model to *rows.* If
    /// this is less than rowCount(), the data in the unwanted rows
    /// is discarded.
    /// 
    /// **See also:** setColumnCount()
    set_row_count(rows: i32),
    /// 
    /// By default, for a table constructed without row and column counts,
    /// this property contains a value of 0.
    /// 
    /// Returns the number of rows.
    row_count() -> i32,
    /// 
    /// Sets the number of columns in this table's model to *columns.* If
    /// this is less than columnCount(), the data in the unwanted columns
    /// is discarded.
    /// 
    /// **See also:** setRowCount()
    set_column_count(columns: i32),
    /// 
    /// By default, for a table constructed without row and column counts,
    /// this property contains a value of 0.
    /// 
    /// Returns the number of columns.
    column_count() -> i32,
    /// 
    /// By default, for a table constructed without row and column counts,
    /// this property contains a value of 0.
    /// 
    /// Returns the number of rows.
    /// 
    /// Returns the row for the *item.*
    row(item: *TableWidgetItemType) -> i32,
    /// 
    /// By default, for a table constructed without row and column counts,
    /// this property contains a value of 0.
    /// 
    /// Returns the number of columns.
    /// 
    /// Returns the column for the *item.*
    column(item: *TableWidgetItemType) -> i32,
    /// 
    /// This signal is emitted whenever an item in the table is pressed.
    /// The *item* specified is the item that was pressed.
    /// 
    /// This signal is emitted whenever an item in the table is clicked.
    /// The *item* specified is the item that was clicked.
    /// 
    /// This signal is emitted whenever an item in the table is double
    /// clicked. The *item* specified is the item that was double clicked.
    /// 
    /// This signal is emitted when the specified *item* has been activated
    /// 
    /// This signal is emitted when the mouse cursor enters an item. The
    /// *item* is the item entered.
    /// 
    /// This signal is only emitted when mouseTracking is turned on, or when a
    /// mouse button is pressed while moving into an item.
    /// 
    /// This signal is emitted whenever the data of *item* has changed.
    /// 
    /// This signal is emitted whenever the selection changes.
    /// 
    /// **See also:** selectedItems()
    /// QTableWidgetItem::isSelected()
    /// 
    /// Returns the item at the position equivalent to QPoint( *ax* , *ay* ) in
    /// the table widget's coordinate system, or returns 0 if the specified point
    /// is not covered by an item in the table widget.
    /// 
    /// **See also:** item()
    /// 
    /// Returns the item for the given *row* and *column* if one has been set; otherwise
    /// returns 0.
    /// 
    /// **See also:** setItem()
    /// 
    /// Returns a pointer to the item at the given *point,* or returns 0 if
    /// *point* is not covered by an item in the table widget.
    /// 
    /// **See also:** item()
    /// 
    /// Returns the item prototype used by the table.
    /// 
    /// **See also:** setItemPrototype()
    /// 
    /// Returns a list of pointers to the items contained in the *data* object.
    /// If the object was not created by a QTreeWidget in the same process, the list
    /// is empty.
    /// 
    /// 
    /// Returns a pointer to the QTableWidgetItem associated with the given *index.*
    item(row: i32, column: i32) -> TableWidgetItem?,
    /// 
    /// Sets the item for the given *row* and *column* to *item.*
    /// 
    /// The table takes ownership of the item.
    /// 
    /// Note that if sorting is enabled (see
    /// [sortingEnabled](QTableView::sortingEnabled)
    /// ) and *column* is
    /// the current sort column, the *row* will be moved to the sorted
    /// position determined by *item.*
    /// 
    /// If you want to set several items of a particular row (say, by
    /// calling setItem() in a loop), you may want to turn off sorting
    /// before doing so, and turn it back on afterwards; this will allow
    /// you to use the same *row* argument for all items in the same row
    /// (i.e. setItem() will not move the row).
    /// 
    /// **See also:** item()
    /// takeItem()
    /// 
    /// Selects or deselects *item* depending on *select.*
    /// 
    /// This function is deprecated. Use [QTableWidgetItem::setSelected()](QTableWidgetItem::setSelected())
    /// instead.
    /// 
    /// Sets the item prototype for the table to the specified *item.*
    /// 
    /// The table widget will use the item prototype clone function when it needs
    /// to create a new table item. For example when the user is editing
    /// in an empty cell. This is useful when you have a QTableWidgetItem
    /// subclass and want to make sure that QTableWidget creates instances of
    /// your subclass.
    /// 
    /// The table takes ownership of the prototype.
    /// 
    /// **See also:** itemPrototype()
    set_item(row: i32, column: i32, item: *TableWidgetItemType),
    /// 
    /// Removes the item at *row* and *column* from the table without deleting it.
    take_item(row: i32, column: i32) -> TableWidgetItem?,
    /// 
    /// Returns the vertical header item for row *row.*
    vertical_header_item(row: i32) -> TableWidgetItem?,
    /// 
    /// Sets the vertical header item for row *row* to *item.*
    set_vertical_header_item(row: i32, item: *TableWidgetItemType),
    /// 
    /// Removes the vertical header item at *row* from the header without deleting it.
    take_vertical_header_item(row: i32) -> TableWidgetItem?,
    /// 
    /// Returns the horizontal header item for column, *column,* if one has been
    /// set; otherwise returns 0.
    horizontal_header_item(column: i32) -> TableWidgetItem?,
    /// 
    /// Sets the horizontal header item for column *column* to *item.*
    /// If necessary, the column count is increased to fit the item.
    /// The previous header item (if there was one) is deleted.
    set_horizontal_header_item(column: i32, item: *TableWidgetItemType),
    /// 
    /// Removes the horizontal header item at *column* from the header without deleting it.
    take_horizontal_header_item(column: i32) -> TableWidgetItem?,
    /// 
    /// Sets the vertical header labels using *labels.*
    set_vertical_header_labels(labels: &[String]),
    /// 
    /// Sets the horizontal header labels using *labels.*
    set_horizontal_header_labels(labels: &[String]),
    /// 
    /// Returns the row of the current item.
    /// 
    /// **See also:** currentColumn()
    /// setCurrentCell()
    current_row() -> i32,
    /// 
    /// Returns the column of the current item.
    /// 
    /// **See also:** currentRow()
    /// setCurrentCell()
    current_column() -> i32,
    /// 
    /// This signal is emitted whenever the current item changes. The *previous* item is the item that previously had the focus, *current* is the new current item.
    /// 
    /// Returns the current item.
    /// 
    /// **See also:** setCurrentItem()
    current_item() -> TableWidgetItem?,
    /// 
    /// Sets the current item to *item.*
    /// 
    /// Unless the selection mode is [NoSelection](QAbstractItemView::)
    /// 
    /// the item is also selected.
    /// 
    /// **See also:** currentItem()
    /// setCurrentCell()
    /// 
    /// Sets the current item to be *item,* using the given *command.*
    /// 
    /// **See also:** currentItem()
    /// setCurrentCell()
    set_current_item(item: *TableWidgetItemType),
    /// 
    /// Sets the current item to *item.*
    /// 
    /// Unless the selection mode is [NoSelection](QAbstractItemView::)
    /// 
    /// the item is also selected.
    /// 
    /// **See also:** currentItem()
    /// setCurrentCell()
    /// 
    /// Sets the current item to be *item,* using the given *command.*
    /// 
    /// **See also:** currentItem()
    /// setCurrentCell()
    set_current_item(item: *TableWidgetItemType, command: ItemSelectionModel::SelectionFlags),
    /// 
    /// Sets the current cell to be the cell at position ( *row,* *column).*
    /// 
    /// Depending on the current [selection mode](QAbstractItemView::SelectionMode)
    /// 
    /// the cell may also be selected.
    /// 
    /// **See also:** setCurrentItem()
    /// currentRow()
    /// currentColumn()
    /// 
    /// Sets the current cell to be the cell at position ( *row,* *column),* using the given *command.*
    /// 
    /// **See also:** setCurrentItem()
    /// currentRow()
    /// currentColumn()
    set_current_cell(row: i32, column: i32),
    /// 
    /// Sets the current cell to be the cell at position ( *row,* *column).*
    /// 
    /// Depending on the current [selection mode](QAbstractItemView::SelectionMode)
    /// 
    /// the cell may also be selected.
    /// 
    /// **See also:** setCurrentItem()
    /// currentRow()
    /// currentColumn()
    /// 
    /// Sets the current cell to be the cell at position ( *row,* *column),* using the given *command.*
    /// 
    /// **See also:** setCurrentItem()
    /// currentRow()
    /// currentColumn()
    set_current_cell(row: i32, column: i32, command: ItemSelectionModel::SelectionFlags),
    /// 
    /// Sorts all the rows in the table widget based on *column* and *order.*
    sort_items(column: i32, order: Rute::SortOrder),
    set_sorting_enabled(enable: bool),
    is_sorting_enabled() -> bool,
    /// 
    /// Starts editing the *item* if it is editable.
    edit_item(item: *TableWidgetItemType),
    /// 
    /// Opens an editor for the give *item.* The editor remains open after editing.
    /// 
    /// **See also:** closePersistentEditor()
    /// isPersistentEditorOpen()
    open_persistent_editor(item: *TableWidgetItemType),
    /// 
    /// Closes the persistent editor for *item.*
    /// 
    /// **See also:** openPersistentEditor()
    /// isPersistentEditorOpen()
    close_persistent_editor(item: *TableWidgetItemType),
    /// 
    /// Returns whether a persistent editor is open for item *item.*
    /// 
    /// **See also:** openPersistentEditor()
    /// closePersistentEditor()
    is_persistent_editor_open(item: *TableWidgetItemType) -> bool,
    /// 
    /// Returns the widget displayed in the cell in the given *row* and *column.*
    /// 
    /// **Note**: The table takes ownership of the widget.
    /// 
    /// **See also:** setCellWidget()
    cell_widget(row: i32, column: i32) -> Widget?,
    /// 
    /// Sets the given *widget* to be displayed in the cell in the given *row*
    /// and *column,* passing the ownership of the widget to the table.
    /// 
    /// If cell widget A is replaced with cell widget B, cell widget A will be
    /// deleted. For example, in the code snippet below, the QLineEdit object will
    /// be deleted.
    /// 
    /// **See also:** cellWidget()
    set_cell_widget(row: i32, column: i32, widget: *WidgetType),
    /// 
    /// Removes the widget set on the cell indicated by *row* and *column.*
    remove_cell_widget(row: i32, column: i32),
    /// 
    /// Returns `true` if the *item* is selected, otherwise returns `false.`
    /// 
    /// This function is deprecated. Use [QTableWidgetItem::isSelected()](QTableWidgetItem::isSelected())
    /// instead.
    is_item_selected(item: *TableWidgetItemType) -> bool,
    /// 
    /// Selects or deselects *item* depending on *select.*
    /// 
    /// This function is deprecated. Use [QTableWidgetItem::setSelected()](QTableWidgetItem::setSelected())
    /// instead.
    set_item_selected(item: *TableWidgetItemType, select: bool),
    /// 
    /// Selects or deselects the *range* depending on *select.*
    set_range_selected(range: &TableWidgetSelectionRangeType, select: bool),
    /// 
    /// Returns a list of all selected ranges.
    /// 
    /// **See also:** QTableWidgetSelectionRange
    selected_ranges() -> [TableWidgetSelectionRange],
    /// 
    /// Returns a list of all selected items.
    /// 
    /// This function returns a list of pointers to the contents of the
    /// selected cells. Use the selectedIndexes() function to retrieve the
    /// complete selection *including* empty cells.
    /// 
    /// **See also:** selectedIndexes()
    selected_items() -> [TableWidgetItem?],
    /// 
    /// Finds items that matches the *text* using the given *flags.*
    find_items(text: String, flags: Rute::MatchFlags) -> [TableWidgetItem?],
    /// 
    /// Returns the visual row of the given *logicalRow.*
    visual_row(logical_row: i32) -> i32,
    /// 
    /// Returns the visual column of the given *logicalColumn.*
    visual_column(logical_column: i32) -> i32,
    /// 
    /// Returns the item at the position equivalent to QPoint( *ax* , *ay* ) in
    /// the table widget's coordinate system, or returns 0 if the specified point
    /// is not covered by an item in the table widget.
    /// 
    /// **See also:** item()
    /// 
    /// Returns a pointer to the item at the given *point,* or returns 0 if
    /// *point* is not covered by an item in the table widget.
    /// 
    /// **See also:** item()
    item_at(p: &PointType) -> TableWidgetItem?,
    /// 
    /// Returns the item at the position equivalent to QPoint( *ax* , *ay* ) in
    /// the table widget's coordinate system, or returns 0 if the specified point
    /// is not covered by an item in the table widget.
    /// 
    /// **See also:** item()
    /// 
    /// Returns a pointer to the item at the given *point,* or returns 0 if
    /// *point* is not covered by an item in the table widget.
    /// 
    /// **See also:** item()
    item_at(x: i32, y: i32) -> TableWidgetItem?,
    /// 
    /// Returns the rectangle on the viewport occupied by the item at *item.*
    visual_item_rect(item: *TableWidgetItemType) -> Rect,
    /// 
    /// Returns the item prototype used by the table.
    /// 
    /// **See also:** setItemPrototype()
    item_prototype() -> TableWidgetItem?,
    /// 
    /// Sets the item prototype for the table to the specified *item.*
    /// 
    /// The table widget will use the item prototype clone function when it needs
    /// to create a new table item. For example when the user is editing
    /// in an empty cell. This is useful when you have a QTableWidgetItem
    /// subclass and want to make sure that QTableWidget creates instances of
    /// your subclass.
    /// 
    /// The table takes ownership of the prototype.
    /// 
    /// **See also:** itemPrototype()
    set_item_prototype(item: *TableWidgetItemType),
    /// 
    /// Scrolls the view if necessary to ensure that the *item* is visible.
    /// The *hint* parameter specifies more precisely where the
    /// *item* should be located after the operation.
    scroll_to_item(item: *TableWidgetItemType, hint: AbstractItemView::ScrollHint),
    /// 
    /// Inserts an empty row into the table at *row.*
    insert_row(row: i32),
    /// 
    /// Inserts an empty column into the table at *column.*
    insert_column(column: i32),
    /// 
    /// Removes the row *row* and all its items from the table.
    remove_row(row: i32),
    /// 
    /// Removes the column *column* and all its items from the table.
    remove_column(column: i32),
    /// 
    /// Removes all items in the view.
    /// This will also remove all selections and headers.
    /// If you don't want to remove the headers, use
    /// QTableWidget::clearContents().
    /// The table dimensions stay the same.
    /// 
    /// Removes all items not in the headers from the view.
    /// This will also remove all selections.
    /// The table dimensions stay the same.
    clear(),
    /// 
    /// Removes all items not in the headers from the view.
    /// This will also remove all selections.
    /// The table dimensions stay the same.
    clear_contents(),
    /// 
    /// This signal is emitted whenever an item in the table is pressed.
    /// The *item* specified is the item that was pressed.
    [signal] item_pressed(item: *TableWidgetItemType),
    /// 
    /// This signal is emitted whenever an item in the table is clicked.
    /// The *item* specified is the item that was clicked.
    [signal] item_clicked(item: *TableWidgetItemType),
    /// 
    /// This signal is emitted whenever an item in the table is double
    /// clicked. The *item* specified is the item that was double clicked.
    [signal] item_double_clicked(item: *TableWidgetItemType),
    /// 
    /// This signal is emitted when the specified *item* has been activated
    [signal] item_activated(item: *TableWidgetItemType),
    /// 
    /// This signal is emitted when the mouse cursor enters an item. The
    /// *item* is the item entered.
    /// 
    /// This signal is only emitted when mouseTracking is turned on, or when a
    /// mouse button is pressed while moving into an item.
    [signal] item_entered(item: *TableWidgetItemType),
    /// 
    /// This signal is emitted whenever the data of *item* has changed.
    [signal] item_changed(item: *TableWidgetItemType),
    /// 
    /// This signal is emitted whenever the current item changes. The *previous* item is the item that previously had the focus, *current* is the new current item.
    [signal] current_item_changed(current: *TableWidgetItemType, previous: *TableWidgetItemType),
    /// 
    /// This signal is emitted whenever the selection changes.
    /// 
    /// **See also:** selectedItems()
    /// QTableWidgetItem::isSelected()
    [signal] item_selection_changed(),
    /// 
    /// This signal is emitted whenever a cell in the table is pressed.
    /// The *row* and *column* specified is the cell that was pressed.
    [signal] cell_pressed(row: i32, column: i32),
    /// 
    /// This signal is emitted whenever a cell in the table is clicked.
    /// The *row* and *column* specified is the cell that was clicked.
    [signal] cell_clicked(row: i32, column: i32),
    /// 
    /// This signal is emitted whenever a cell in the table is double
    /// clicked. The *row* and *column* specified is the cell that was
    /// double clicked.
    [signal] cell_double_clicked(row: i32, column: i32),
    /// 
    /// This signal is emitted when the cell specified by *row* and *column*
    /// has been activated
    [signal] cell_activated(row: i32, column: i32),
    /// 
    /// This signal is emitted when the mouse cursor enters a cell. The
    /// cell is specified by *row* and *column.*
    /// 
    /// This signal is only emitted when mouseTracking is turned on, or when a
    /// mouse button is pressed while moving into an item.
    [signal] cell_entered(row: i32, column: i32),
    /// 
    /// This signal is emitted whenever the data of the item in the cell
    /// specified by *row* and *column* has changed.
    [signal] cell_changed(row: i32, column: i32),
    /// 
    /// This signal is emitted whenever the current cell changes. The cell
    /// specified by *previousRow* and *previousColumn* is the cell that
    /// previously had the focus, the cell specified by *currentRow* and *currentColumn* is the new current cell.
    [signal] current_cell_changed(current_row: i32, current_column: i32, previous_row: i32, previous_column: i32),
    /// 
    [event] event(e: *EventType) -> bool,
    /// 
    /// Returns a list of MIME types that can be used to describe a list of
    /// tablewidget items.
    /// 
    /// **See also:** mimeData()
    [event] mime_types() -> [String],
    [event] mime_data(items: [*TableWidgetItemType]) -> MimeData?,
    /// 
    /// Handles the *data* supplied by a drag and drop operation that ended with
    /// the given *action* in the given *row* and *column.*
    /// Returns `true` if the data and action can be handled by the model;
    /// otherwise returns `false.`
    /// 
    /// **See also:** supportedDropActions()
    [event] drop_mime_data(row: i32, column: i32, data: *MimeDataType, action: Rute::DropAction) -> bool,
    /// 
    /// Returns the drop actions supported by this view.
    /// 
    /// **See also:** Qt::DropActions
    [event] supported_drop_actions() -> Rute::DropActions,
    /// 
    /// Returns a list of pointers to the items contained in the *data* object.
    /// If the object was not created by a QTreeWidget in the same process, the list
    /// is empty.
    /// 
    items(data: *MimeDataType) -> [TableWidgetItem?],
    /// 
    /// Returns the QModelIndex associated with the given *item.*
    /// 
    /// **Note**: In Qt versions prior to 5.10, this function took a non- `const` *item.*
    index_from_item(item: *TableWidgetItemType) -> ModelIndex,
    /// 
    /// Returns the QModelIndex associated with the given *item.*
    /// 
    /// **Note**: In Qt versions prior to 5.10, this function took a non- `const` *item.*
    index_from_item(item: *TableWidgetItemType) -> ModelIndex,
    /// 
    /// Returns a pointer to the QTableWidgetItem associated with the given *index.*
    item_from_index(index: &ModelIndexType) -> TableWidgetItem?,
    /// 
    [event] drop_event(event: *DropEventType),
}

// vim: syntax=rust expandtab ts=4 sw=4
