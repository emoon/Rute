/// 
/// The QStyleOptionTab class is used for drawing several built-in Qt
/// widgets including [QTabBar](QTabBar)
/// and the panel for [QTabWidget.](QTabWidget.)
/// 
/// An instance of the QStyleOptionTab class has
/// [type](QStyleOption::type)
/// [SO_Tab](SO_Tab)
/// and
/// [version](QStyleOption::version)
/// 3. The type is used internally
/// by QStyleOption, its subclasses, and qstyleoption_cast() to
/// determine the type of style option. In general you do not need to
/// worry about this unless you want to create your own QStyleOption
/// subclass and your own styles. The version is used by QStyleOption
/// subclasses to implement extensions without breaking
/// compatibility. If you use qstyleoption_cast(), you normally do not
/// need to check it.
/// 
/// For an example demonstrating how style options can be used, see
/// the [Styles](widgets/styles)
/// example.
/// 
/// **See also:** [`StyleOption`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct StyleOptionTab : StyleOption {
}

[org_name(QStyleOptionTab)]
enum StyleOptionType {
    /// The type of style option provided ( [SO_Tab](SO_Tab)
 for this class). The type is used internally by QStyleOption, its subclasses, and qstyleoption_cast() to determine the type of style option. In general you do not need to worry about this unless you want to create your own QStyleOption subclass and your own styles.
    Type,
}

[org_name(QStyleOptionTab)]
enum StyleOptionVersion {
    /// 3 The version is used by QStyleOption subclasses to implement extensions without breaking compatibility. If you use qstyleoption_cast(), you normally do not need to check it.
    Version,
}

[org_name(QStyleOptionTab)]
enum TabPosition {
    /// The tab is the first tab in the tab bar.
    Beginning,
    /// The tab is neither the first nor the last tab in the tab bar.
    Middle,
    /// The tab is the last tab in the tab bar.
    End,
    /// The tab is both the first and the last tab in the tab bar.
    OnlyOneTab,
}

[org_name(QStyleOptionTab)]
enum SelectedPosition {
    /// The tab is not adjacent to a selected tab (or is the selected tab).
    NotAdjacent,
    /// The next tab (typically the tab on the right) is selected.
    NextIsSelected,
    /// The previous tab (typically the tab on the left) is selected.
    PreviousIsSelected,
}

[org_name(QStyleOptionTab)]
enum CornerWidget {
    /// There are no corner widgets
    NoCornerWidgets,
    /// Left corner widget
    LeftCornerWidget,
    /// Right corner widget
    RightCornerWidget,
}

[org_name(QStyleOptionTab)]
enum TabFeature {
    /// A normal tab button.
    None,
    /// The tab button is positioned on a tab frame
    HasFrame,
}

// vim: syntax=rust expandtab ts=4 sw=4
