///     \class QMainWindow
///     \brief The QMainWindow class provides a main application
///            window.
///     \ingroup mainwindow-classes
///     \inmodule QtWidgets
/// 
///     \tableofcontents
/// 
///     \section1 Qt Main Window Framework
/// 
///     A main window provides a framework for building an
///     application's user interface. Qt has QMainWindow and its \l{Main
///     Window and Related Classes}{related classes} for main window
///     management. QMainWindow has its own layout to which you can add
///     \l{QToolBar}s, \l{QDockWidget}s, a
///     QMenuBar, and a QStatusBar. The layout has a center area that can
///     be occupied by any kind of widget. You can see an image of the
///     layout below.
/// 
///     \image mainwindowlayout.png
/// 
///     \note Creating a main window without a central widget is not supported.
///     You must have a central widget even if it is just a placeholder.
/// 
///     \section1 Creating Main Window Components
/// 
///     A central widget will typically be a standard Qt widget such
///     as a QTextEdit or a QGraphicsView. Custom widgets can also be
///     used for advanced applications. You set the central widget with \c
///     setCentralWidget().
/// 
///     Main windows have either a single (SDI) or multiple (MDI)
///     document interface. You create MDI applications in Qt by using a
///     QMdiArea as the central widget.
/// 
///     We will now examine each of the other widgets that can be
///     added to a main window. We give examples on how to create and add
///     them.
/// 
///     \section2 Creating Menus
/// 
///     Qt implements menus in QMenu and QMainWindow keeps them in a
///     QMenuBar. \l{QAction}{QAction}s are added to the menus, which
///     display them as menu items.
/// 
///     You can add new menus to the main window's menu bar by calling
///     \c menuBar(), which returns the QMenuBar for the window, and then
///     add a menu with QMenuBar::addMenu().
/// 
///     QMainWindow comes with a default menu bar, but you can also
///     set one yourself with \c setMenuBar(). If you wish to implement a
///     custom menu bar (i.e., not use the QMenuBar widget), you can set it
///     with \c setMenuWidget().
/// 
///     An example of how to create menus follows:
/// 
///     \code
///     void MainWindow::createMenus()
///     {
///         fileMenu = menuBar()->addMenu(tr("&File"));
///         fileMenu->addAction(newAct);
///         fileMenu->addAction(openAct);
///         fileMenu->addAction(saveAct);
///     \endcode
/// 
///     The \c createPopupMenu() function creates popup menus when the
///     main window receives context menu events.  The default
///     implementation generates a menu with the checkable actions from
///     the dock widgets and toolbars. You can reimplement \c
///     createPopupMenu() for a custom menu.
/// 
///     \section2 Creating Toolbars
/// 
///     Toolbars are implemented in the QToolBar class.  You add a
///     toolbar to a main window with \c addToolBar().
/// 
///     You control the initial position of toolbars by assigning them
///     to a specific Qt::ToolBarArea. You can split an area by inserting
///     a toolbar break - think of this as a line break in text editing -
///     with \c addToolBarBreak() or \c insertToolBarBreak(). You can also
///     restrict placement by the user with QToolBar::setAllowedAreas()
///     and QToolBar::setMovable().
/// 
///     The size of toolbar icons can be retrieved with \c iconSize().
///     The sizes are platform dependent; you can set a fixed size with \c
///     setIconSize(). You can alter the appearance of all tool buttons in
///     the toolbars with \c setToolButtonStyle().
/// 
///     An example of toolbar creation follows:
/// 
///     \code
///     void MainWindow::createToolBars()
///     {
///         fileToolBar = addToolBar(tr("File"));
///         fileToolBar->addAction(newAct);
///     \endcode
/// 
///     \section2 Creating Dock Widgets
/// 
///     Dock widgets are implemented in the QDockWidget class. A dock
///     widget is a window that can be docked into the main window.  You
///     add dock widgets to a main window with \c addDockWidget().
/// 
///     There are four dock widget areas as given by the
///     Qt::DockWidgetArea enum: left, right, top, and bottom. You can
///     specify which dock widget area that should occupy the corners
///     where the areas overlap with \c setCorner(). By default
///     each area can only contain one row (vertical or horizontal) of
///     dock widgets, but if you enable nesting with \c
///     setDockNestingEnabled(), dock widgets can be added in either
///     direction.
/// 
///     Two dock widgets may also be stacked on top of each other. A
///     QTabBar is then used to select which of the widgets should be
///     displayed.
/// 
///     We give an example of how to create and add dock widgets to a
///     main window:
/// 
///     \snippet mainwindowsnippet.cpp 0
/// 
///     \section2 The Status Bar
/// 
///     You can set a status bar with \c setStatusBar(), but one is
///     created the first time \c statusBar() (which returns the main
///     window's status bar) is called. See QStatusBar for information on
///     how to use it.
/// 
///     \section1 Storing State
/// 
///     QMainWindow can store the state of its layout with \c
///     saveState(); it can later be retrieved with \c restoreState(). It
///     is the position and size (relative to the size of the main window)
///     of the toolbars and dock widgets that are stored.
/// 
///     \sa QMenuBar, QToolBar, QStatusBar, QDockWidget, {Application
///     Example}, {Dock Widgets Example}, {MDI Example}, {SDI Example},
///     {Menus Example}
[org_name(QMainWindow)]
enum DockOption {
    AnimatedDocks,
    AllowNestedDocks,
    AllowTabbedDocks,
    ForceTabbedDocks,
    VerticalTabs,
    GroupedDragging,
}

struct MainWindow : Widget {
    icon_size() -> Size,
    set_icon_size(icon_size: &SizeType),
    tool_button_style() -> Rute::ToolButtonStyle,
    set_tool_button_style(tool_button_style: Rute::ToolButtonStyle),
    is_animated() -> bool,
    is_dock_nesting_enabled() -> bool,
    document_mode() -> bool,
    set_document_mode(enabled: bool),
    tab_shape() -> TabWidget::TabShape,
    set_tab_shape(tab_shape: TabWidget::TabShape),
    tab_position(area: Rute::DockWidgetArea) -> TabWidget::TabPosition,
    set_tab_position(areas: Rute::DockWidgetAreas, tab_position: TabWidget::TabPosition),
    set_dock_options(options: MainWindow::DockOptions),
    dock_options() -> MainWindow::DockOptions,
    is_separator(pos: &PointType) -> bool,
    menu_bar() -> MenuBar?,
    set_menu_bar(menubar: *MenuBarType),
    menu_widget() -> Widget?,
    set_menu_widget(menubar: *WidgetType),
    status_bar() -> StatusBar?,
    set_status_bar(statusbar: *StatusBarType),
    set_corner(corner: Rute::Corner, area: Rute::DockWidgetArea),
    corner(corner: Rute::Corner) -> Rute::DockWidgetArea,
    add_tool_bar_break(area: Rute::ToolBarArea),
    insert_tool_bar_break(before: *ToolBarType),
    add_tool_bar(area: Rute::ToolBarArea, toolbar: *ToolBarType),
    add_tool_bar(toolbar: *ToolBarType),
    add_tool_bar(title: String) -> ToolBar?,
    insert_tool_bar(before: *ToolBarType, toolbar: *ToolBarType),
    remove_tool_bar(toolbar: *ToolBarType),
    remove_tool_bar_break(before: *ToolBarType),
    unified_title_and_tool_bar_on_mac() -> bool,
    tool_bar_area(toolbar: *ToolBarType) -> Rute::ToolBarArea,
    tool_bar_break(toolbar: *ToolBarType) -> bool,
    add_dock_widget(area: Rute::DockWidgetArea, dockwidget: *DockWidgetType),
    add_dock_widget(area: Rute::DockWidgetArea, dockwidget: *DockWidgetType, orientation: Rute::Orientation),
    split_dock_widget(after: *DockWidgetType, dockwidget: *DockWidgetType, orientation: Rute::Orientation),
    tabify_dock_widget(first: *DockWidgetType, second: *DockWidgetType),
    tabified_dock_widgets(dockwidget: *DockWidgetType) -> [DockWidget?],
    remove_dock_widget(dockwidget: *DockWidgetType),
    restore_dock_widget(dockwidget: *DockWidgetType) -> bool,
    dock_widget_area(dockwidget: *DockWidgetType) -> Rute::DockWidgetArea,
    resize_docks(docks: [*DockWidgetType], sizes: [i32], orientation: Rute::Orientation),
    save_state(version: i32) -> ByteArray,
    restore_state(state: &ByteArrayType, version: i32) -> bool,
    [event] create_popup_menu() -> Menu?,
    set_animated(enabled: bool),
    set_dock_nesting_enabled(enabled: bool),
    set_unified_title_and_tool_bar_on_mac(set: bool),
    [signal] icon_size_changed(icon_size: &SizeType),
    [signal] tool_button_style_changed(tool_button_style: Rute::ToolButtonStyle),
    [signal] tabified_dock_widget_activated(dock_widget: *DockWidgetType),
    [event] context_menu_event(event: *ContextMenuEventType),
    [event] event(event: *EventType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
