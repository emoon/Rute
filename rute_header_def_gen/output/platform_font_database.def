/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct PlatformFontDatabase {
    /// 
    /// This function is called once at startup by Qt's internal font database.
    /// Reimplement this function in a subclass for a convenient place to initialize
    /// the internal font database.
    /// 
    /// You may lazily populate the database by calling registerFontFamily() instead
    /// of registerFont(), in which case you'll get a callback to populateFamily()
    /// when the required family needs population. You then call registerFont() to
    /// finish population of the family.
    /// 
    /// The default implementation looks in the fontDir() location and registers all
    /// QPF2 fonts.
    [event] populate_font_database(),
    [event] populate_family_aliases() -> bool,
    /// 
    /// This function is called whenever a lazily populated family, populated
    /// through registerFontFamily(), needs full population.
    /// 
    /// You are expected to fully populate the family by calling registerFont()
    /// for each font that matches the family name.
    [event] populate_family(family_name: String),
    /// 
    /// This function is called whenever the font database is invalidated.
    /// 
    /// Reimplement this function to clear any internal data structures that
    /// will need to be rebuilt at the next call to populateFontDatabase().
    [event] invalidate(),
    /// 
    /// Returns a multi font engine in the specified *script* to encapsulate *fontEngine* with the
    /// option to fall back to the fonts given by *fallbacks* if *fontEngine* does not support
    /// a certain character.
    [event] font_engine_multi(font_engine: *FontEngineType, script: Char::Script) -> FontEngineMulti?,
    /// 
    /// Returns a multi font engine in the specified *script* to encapsulate *fontEngine* with the
    /// option to fall back to the fonts given by *fallbacks* if *fontEngine* does not support
    /// a certain character.
    /// 
    /// Returns the font engine that can be used to render the font described by
    /// the font definition, *fontDef,* in the specified *script.*
    [event] font_engine(font_def: &FontDefType, handle: *void) -> FontEngine?,
    /// 
    /// Returns a list of alternative fonts for the specified *family* and
    /// *style* and *script* using the *styleHint* given.
    /// 
    /// Default implementation returns a list of fonts for which *style* and *script* support
    /// has been reported during the font database population.
    [event] fallbacks_for_family(family: String, style: Font::Style, style_hint: Font::StyleHint, script: Char::Script) -> [String],
    /// 
    /// Adds an application font described by the font contained supplied *fontData*
    /// or using the font contained in the file referenced by *fileName.* Returns
    /// a list of family names, or an empty list if the font could not be added.
    /// 
    /// **Note**: The default implementation of this function does not add an application
    /// font. Subclasses should reimplement this function to perform the necessary
    /// loading and registration of fonts.
    [event] add_application_font(font_data: &ByteArrayType, file_name: String) -> [String],
    /// 
    /// Releases the specified font *handle.*
    [event] release_handle(handle: *void),
    /// 
    /// Returns a multi font engine in the specified *script* to encapsulate *fontEngine* with the
    /// option to fall back to the fonts given by *fallbacks* if *fontEngine* does not support
    /// a certain character.
    /// 
    /// Returns the font engine that can be used to render the font described by
    /// the font definition, *fontDef,* in the specified *script.*
    [event] font_engine(font_data: &ByteArrayType, pixel_size: f32, hinting_preference: Font::HintingPreference) -> FontEngine?,
    /// 
    /// Returns the directory containing the fonts used by the database.
    [event] font_dir() -> String,
    /// 
    /// Returns the default system font.
    /// 
    /// **See also:** QGuiApplication::font()
    [event] default_font() -> Font,
    /// 
    /// Resolve alias to actual font family names.
    /// 
    [event] resolve_font_family_alias(family: String) -> String,
    /// 
    /// Return true if all fonts are considered scalable when using this font database.
    /// Defaults to false.
    /// 
    [event] fonts_always_scalable() -> bool,
    /// 
    /// Return list of standard font sizes when using this font database.
    /// 
    [event] standard_sizes() -> [i32],
    /// 
    /// Helper function that determines the writing systems support by a given
    /// *unicodeRange* and *codePageRange.*
    /// 
    [static] writing_systems_from_true_type_bits(unicode_range: u32, code_page_range: u32) -> SupportedWritingSystems,
    /// 
    /// Helper function that returns the Qt font weight matching
    /// a given opentype integer value. Converts the integer
    /// *weight* (0 ~ 1000) to QFont::Weight and returns it.
    /// 
    [static] weight_from_integer(weight: i32) -> Font::Weight,
    /// 
    /// Registers the pre-rendered QPF2 font contained in the given *dataArray.*
    /// 
    /// **See also:** registerFont()
    [static] register_qpf2_font(data_array: &ByteArrayType, handle: *void),
    /// 
    /// Registers a font with the given set of attributes describing the font's
    /// foundry, family name, style and stretch information, pixel size, and
    /// supported writing systems. Additional information about whether the font
    /// can be scaled and antialiased can also be provided.
    /// 
    /// The foundry name and font family are described by *foundryName* and
    /// *familyName.* The font weight (light, normal, bold, etc.), style (normal,
    /// oblique, italic) and stretch information (condensed, expanded, unstretched,
    /// etc.) are specified by *weight,* *style* and *stretch.*
    /// 
    /// Some fonts can be antialiased and scaled; *scalable* and *antialiased*
    /// can be set to true for fonts with these attributes. The intended pixel
    /// size of non-scalable fonts is specified by *pixelSize;* this value will be
    /// ignored for scalable fonts.
    /// 
    /// The writing systems supported by the font are specified by the
    /// *writingSystems* argument.
    /// 
    /// **See also:** registerQPF2Font()
    /// registerFontFamily()
    /// 
    /// Registers a font family with the font database. The font will be
    /// lazily populated by a callback to populateFamily() when the font
    /// database determines that the family needs population.
    /// 
    /// **See also:** populateFamily()
    /// registerFont()
    [static] register_font(familyname: String, stylename: String, foundryname: String, weight: Font::Weight, style: Font::Style, stretch: Font::Stretch, antialiased: bool, scalable: bool, pixel_size: i32, fixed_pitch: bool, writing_systems: &SupportedWritingSystemsType, handle: *void),
    /// 
    /// Registers a font family with the font database. The font will be
    /// lazily populated by a callback to populateFamily() when the font
    /// database determines that the family needs population.
    /// 
    /// **See also:** populateFamily()
    /// registerFont()
    [static] register_font_family(family_name: String),
    /// 
    /// Helper function that register the *alias* for the *familyName.*
    /// 
    [static] register_alias_to_font_family(family_name: String, alias: String),
}

// vim: syntax=rust expandtab ts=4 sw=4
