///     \class QPlatformFontDatabase
///     \since 5.0
///     \internal
///     \preliminary
///     \ingroup qpa
///     \ingroup painting
/// 
///     \brief The QPlatformFontDatabase class makes it possible to customize how fonts
///     are discovered and how they are rendered
/// 
///     QPlatformFontDatabase is the superclass which is intended to let platform implementations use
///     native font handling.
/// 
///     Qt has its internal font database which it uses to discover available fonts on the
///     user's system. To be able to populate this database subclass this class, and
///     reimplement populateFontDatabase().
/// 
///     Use the function registerFont() to populate the internal font database.
/// 
///     Sometimes a specified font does not have the required glyphs; in such a case, the
///     fallbackForFamily() function is called automatically to find alternative font
///     families that can supply alternatives to the missing glyphs.
/// 
///     \sa QSupportedWritingSystems
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct PlatformFontDatabase {
    ///   This function is called once at startup by Qt's internal font database.
    ///   Reimplement this function in a subclass for a convenient place to initialize
    ///   the internal font database.
    /// 
    ///   You may lazily populate the database by calling registerFontFamily() instead
    ///   of registerFont(), in which case you'll get a callback to populateFamily()
    ///   when the required family needs population. You then call registerFont() to
    ///   finish population of the family.
    /// 
    ///   The default implementation looks in the fontDir() location and registers all
    ///   QPF2 fonts.
    [event] populate_font_database(),
    [event] populate_family_aliases() -> bool,
    ///     This function is called whenever a lazily populated family, populated
    ///     through registerFontFamily(), needs full population.
    /// 
    ///     You are expected to fully populate the family by calling registerFont()
    ///     for each font that matches the family name.
    [event] populate_family(family_name: String),
    ///     This function is called whenever the font database is invalidated.
    /// 
    ///     Reimplement this function to clear any internal data structures that
    ///     will need to be rebuilt at the next call to populateFontDatabase().
    [event] invalidate(),
    ///     Returns a multi font engine in the specified \a script to encapsulate \a fontEngine with the
    ///     option to fall back to the fonts given by \a fallbacks if \a fontEngine does not support
    ///     a certain character.
    [event] font_engine_multi(font_engine: *FontEngineType, script: Char::Script) -> FontEngineMulti?,
    ///     Returns the font engine that can be used to render the font described by
    ///     the font definition, \a fontDef, in the specified \a script.
    [event] font_engine(font_def: &FontDefType, handle: *void) -> FontEngine?,
    ///     Returns a list of alternative fonts for the specified \a family and
    ///     \a style and \a script using the \a styleHint given.
    /// 
    ///     Default implementation returns a list of fonts for which \a style and \a script support
    ///     has been reported during the font database population.
    [event] fallbacks_for_family(family: String, style: Font::Style, style_hint: Font::StyleHint, script: Char::Script) -> [String],
    ///     Adds an application font described by the font contained supplied \a fontData
    ///     or using the font contained in the file referenced by \a fileName. Returns
    ///     a list of family names, or an empty list if the font could not be added.
    /// 
    ///     \note The default implementation of this function does not add an application
    ///     font. Subclasses should reimplement this function to perform the necessary
    ///     loading and registration of fonts.
    [event] add_application_font(font_data: &ByteArrayType, file_name: String) -> [String],
    ///     Releases the specified font \a handle.
    [event] release_handle(handle: *void),
    ///     Returns the font engine that can be used to render the font described by
    ///     the font definition, \a fontDef, in the specified \a script.
    [event] font_engine(font_data: &ByteArrayType, pixel_size: f32, hinting_preference: Font::HintingPreference) -> FontEngine?,
    ///     Returns the directory containing the fonts used by the database.
    [event] font_dir() -> String,
    ///     Returns the default system font.
    /// 
    ///     \sa QGuiApplication::font()
    ///     \since 5.0
    [event] default_font() -> Font,
    [event] resolve_font_family_alias(family: String) -> String,
    [event] fonts_always_scalable() -> bool,
    [event] standard_sizes() -> [i32],
    ///     Helper function that determines the writing systems support by a given
    ///     \a unicodeRange and \a codePageRange.
    /// 
    ///     \since 5.1
    [static] writing_systems_from_true_type_bits(unicode_range: u32, code_page_range: u32) -> SupportedWritingSystems,
    ///     Helper function that returns the Qt font weight matching
    ///     a given opentype integer value. Converts the integer
    ///     \a weight (0 ~ 1000) to QFont::Weight and returns it.
    /// 
    ///     \since 5.5
    [static] weight_from_integer(weight: i32) -> Font::Weight,
    ///     Registers the pre-rendered QPF2 font contained in the given \a dataArray.
    /// 
    ///     \sa registerFont()
    [static] register_qpf2_font(data_array: &ByteArrayType, handle: *void),
    [static] register_font(familyname: String, stylename: String, foundryname: String, weight: Font::Weight, style: Font::Style, stretch: Font::Stretch, antialiased: bool, scalable: bool, pixel_size: i32, fixed_pitch: bool, writing_systems: &SupportedWritingSystemsType, handle: *void),
    ///     Registers a font family with the font database. The font will be
    ///     lazily populated by a callback to populateFamily() when the font
    ///     database determines that the family needs population.
    /// 
    ///     \sa populateFamily(), registerFont()
    [static] register_font_family(family_name: String),
    ///     Helper function that register the \a alias for the \a familyName.
    /// 
    ///     \since 5.2
    [static] register_alias_to_font_family(family_name: String, alias: String),
}

// vim: syntax=rust expandtab ts=4 sw=4
