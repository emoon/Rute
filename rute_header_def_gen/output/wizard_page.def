/// 
/// QWizard represents a wizard. Each page is a QWizardPage. When
/// you create your own wizards, you can use QWizardPage directly,
/// or you can subclass it for more control.
/// 
/// A page has the following attributes, which are rendered by
/// QWizard: a [title,](title,)
/// a [subTitle,](subTitle,)
/// and a [set of
/// pixmaps](setPixmap())
/// . See [Elements of a Wizard Page](Elements%20of%20a%20Wizard%20Page)
/// for details. Once a
/// page is added to the wizard (using QWizard::addPage() or
/// QWizard::setPage()), wizard() returns a pointer to the
/// associated QWizard object.
/// 
/// Page provides five virtual functions that can be reimplemented to
/// provide custom behavior:
/// 
/// * initializePage() is called to initialize the page's contents when the user clicks the wizard's **Next** button. If you want to derive the page's default from what the user entered on previous pages, this is the function to reimplement.
/// * cleanupPage() is called to reset the page's contents when the user clicks the wizard's **Back** button.
/// * validatePage() validates the page when the user clicks **Next** or **Finish.** It is often used to show an error message if the user has entered incomplete or invalid information.
/// * nextId() returns the ID of the next page. It is useful when [creating non-linear wizards](creating%20non-linear%20wizards)
/// , which allow different traversal paths based on the information provided by the user.
/// * isComplete() is called to determine whether the **Next** and/or **Finish** button should be enabled or disabled. If you reimplement isComplete(), also make sure that completeChanged() is emitted whenever the complete state changes.
/// 
/// Normally, the **Next** button and the **Finish** button of a
/// wizard are mutually exclusive. If isFinalPage() returns `true,` **Finish** is available; otherwise, **Next** is available. By
/// default, isFinalPage() is true only when nextId() returns -1. If
/// you want to show **Next** and **Final** simultaneously for a
/// page (letting the user perform an ), call
/// setFinalPage(true) on that page. For wizards that support early
/// finishes, you might also want to set the
/// [HaveNextButtonOnLastPage](QWizard::)
/// and
/// [HaveFinishButtonOnEarlyPages](QWizard::)
/// options on the
/// wizard.
/// 
/// In many wizards, the contents of a page may affect the default
/// values of the fields of a later page. To make it easy to
/// communicate between pages, QWizard supports a ["field" mechanism](Registering%20and%0A%20%20%20%20Using%20Fields)
/// that allows you to register a
/// field (e.g., a QLineEdit) on a page and to access its value from
/// any page. Fields are global to the entire wizard and make it easy
/// for any single page to access information stored by another page,
/// without having to put all the logic in QWizard or having the
/// pages know explicitly about each other. Fields are registered
/// using registerField() and can be accessed at any time using
/// field() and setField().
/// 
/// **See also:** [`Wizard`]
/// {Class Wizard Example}
/// {License Wizard Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct WizardPage : Widget {
    set_title(title: String),
    /// 
    /// The title is shown by the QWizard, above the actual page. All
    /// pages should have a title.
    /// 
    /// The title may be plain text or HTML, depending on the value of the
    /// [QWizard::titleFormat](QWizard::titleFormat)
    /// property.
    /// 
    /// By default, this property contains an empty string.
    /// 
    /// **See also:** subTitle
    /// {Elements of a Wizard Page}
    title() -> String,
    set_sub_title(sub_title: String),
    /// 
    /// The subtitle is shown by the QWizard, between the title and the
    /// actual page. Subtitles are optional. In
    /// [ClassicStyle](QWizard::ClassicStyle)
    /// and
    /// [ModernStyle](QWizard::ModernStyle)
    /// , using subtitles is
    /// necessary to make the header appear. In
    /// [MacStyle](QWizard::MacStyle)
    /// , the subtitle is shown as a text
    /// label just above the actual page.
    /// 
    /// The subtitle may be plain text or HTML, depending on the value of
    /// the [QWizard::subTitleFormat](QWizard::subTitleFormat)
    /// property.
    /// 
    /// By default, this property contains an empty string.
    /// 
    /// **See also:** title
    /// [`Wizard::ignore_sub_titles()`]
    /// {Elements of a Wizard Page}
    sub_title() -> String,
    /// 
    /// Sets the pixmap for role *which* to *pixmap.*
    /// 
    /// The pixmaps are used by QWizard when displaying a page. Which
    /// pixmaps are actually used depend on the [wizard style](Wizard%20Look%20and%0A%20%20%20%20Feel)
    /// 
    /// 
    /// Pixmaps can also be set for the entire wizard using
    /// QWizard::setPixmap(), in which case they apply for all pages that
    /// don't specify a pixmap.
    /// 
    /// **See also:** [`Wizard::set_pixmap`]
    /// {Elements of a Wizard Page}
    set_pixmap(which: Wizard::WizardPixmap, pixmap: &PixmapType),
    /// 
    /// Returns the pixmap set for role *which.*
    /// 
    /// Pixmaps can also be set for the entire wizard using
    /// QWizard::setPixmap(), in which case they apply for all pages that
    /// don't specify a pixmap.
    /// 
    /// **See also:** [`Wizard::pixmap`]
    /// {Elements of a Wizard Page}
    pixmap(which: Wizard::WizardPixmap) -> Pixmap,
    /// 
    /// Explicitly sets this page to be final if *finalPage* is true.
    /// 
    /// After calling setFinalPage(true), isFinalPage() returns `true` and the **Finish** button is visible (and enabled if isComplete() returns
    /// true).
    /// 
    /// After calling setFinalPage(false), isFinalPage() returns `true` if
    /// nextId() returns -1; otherwise, it returns `false.`
    /// 
    /// **See also:** [`is_complete()`]
    /// [`Wizard::have_finish_button_on_early_pages()`]
    set_final_page(final_page: bool),
    /// 
    /// This function is called by QWizard to determine whether the **Finish** button should be shown for this page or not.
    /// 
    /// By default, it returns `true` if there is no next page
    /// (i.e., nextId() returns -1); otherwise, it returns `false.`
    /// 
    /// By explicitly calling setFinalPage(true), you can let the user perform an
    /// 
    /// 
    /// **See also:** [`is_complete()`]
    /// [`Wizard::have_finish_button_on_early_pages()`]
    is_final_page() -> bool,
    /// 
    /// Sets this page to be a commit page if *commitPage* is true; otherwise,
    /// sets it to be a normal page.
    /// 
    /// A commit page is a page that represents an action which cannot be undone
    /// by clicking **Back** or **Cancel.**
    /// 
    /// A **Commit** button replaces the **Next** button on a commit page. Clicking this
    /// button simply calls QWizard::next() just like clicking **Next** does.
    /// 
    /// A page entered directly from a commit page has its **Back** button disabled.
    /// 
    /// **See also:** [`is_commit_page()`]
    set_commit_page(commit_page: bool),
    /// 
    /// Returns `true` if this page is a commit page; otherwise returns `false.`
    /// 
    /// **See also:** [`set_commit_page()`]
    is_commit_page() -> bool,
    /// 
    /// Sets the text on button *which* to be *text* on this page.
    /// 
    /// By default, the text on buttons depends on the QWizard::wizardStyle,
    /// but may be redefined for the wizard as a whole using QWizard::setButtonText().
    /// 
    /// **See also:** [`button_text()`]
    /// [`Wizard::set_button_text`]
    /// [`Wizard::button_text`]
    set_button_text(which: Wizard::WizardButton, text: String),
    /// 
    /// Returns the text on button *which* on this page.
    /// 
    /// If a text has ben set using setButtonText(), this text is returned.
    /// Otherwise, if a text has been set using QWizard::setButtonText(),
    /// this text is returned.
    /// 
    /// By default, the text on buttons depends on the QWizard::wizardStyle.
    /// For example, on MacOS , the **Next** button is called **Continue.**
    /// 
    /// **See also:** [`set_button_text()`]
    /// [`Wizard::button_text`]
    /// [`Wizard::set_button_text`]
    button_text(which: Wizard::WizardButton) -> String,
    /// 
    /// This virtual function is called by QWizard::initializePage() to
    /// prepare the page just before it is shown either as a result of QWizard::restart()
    /// being called, or as a result of the user clicking **Next.**
    /// (However, if the [QWizard::IndependentPages](QWizard::IndependentPages)
    /// option is set, this function is only
    /// called the first time the page is shown.)
    /// 
    /// By reimplementing this function, you can ensure that the page's
    /// fields are properly initialized based on fields from previous
    /// pages. For example:
    /// 
    /// The default implementation does nothing.
    /// 
    /// **See also:** [`Wizard::initialize_page`]
    /// [`cleanup_page()`]
    /// [`Wizard::independent_pages()`]
    [event] initialize_page(),
    /// 
    /// This virtual function is called by QWizard::cleanupPage() when
    /// the user leaves the page by clicking **Back** (unless the [QWizard::IndependentPages](QWizard::IndependentPages)
    /// 
    /// option is set).
    /// 
    /// The default implementation resets the page's fields to their
    /// original values (the values they had before initializePage() was
    /// called).
    /// 
    /// **See also:** [`Wizard::cleanup_page`]
    /// [`initialize_page()`]
    /// [`Wizard::independent_pages()`]
    [event] cleanup_page(),
    /// 
    /// This virtual function is called by QWizard::validateCurrentPage()
    /// when the user clicks **Next** or **Finish** to perform some
    /// last-minute validation. If it returns `true,` the next page is shown
    /// (or the wizard finishes); otherwise, the current page stays up.
    /// 
    /// The default implementation returns `true.`
    /// 
    /// When possible, it is usually better style to disable the **Next** or **Finish** button (by specifying [mandatory fields](mandatory%20fields)
    /// or
    /// reimplementing isComplete()) than to reimplement validatePage().
    /// 
    /// **See also:** [`Wizard::validate_current_page`]
    /// [`is_complete()`]
    [event] validate_page() -> bool,
    /// 
    /// This virtual function is called by QWizard to determine whether
    /// the **Next** or **Finish** button should be enabled or
    /// disabled.
    /// 
    /// The default implementation returns `true` if all [mandatory
    /// fields](mandatory%0A%20%20%20%20fields)
    /// are filled; otherwise, it returns `false.`
    /// 
    /// If you reimplement this function, make sure to emit completeChanged(),
    /// from the rest of your implementation, whenever the value of isComplete()
    /// changes. This ensures that QWizard updates the enabled or disabled state of
    /// its buttons. An example of the reimplementation is
    /// available [here](http://doc.qt.io/archives/qq/qq22-qwizard.html%23validatebeforeitstoolate)
    /// 
    /// 
    /// **See also:** [`complete_changed()`]
    /// [`is_final_page()`]
    [event] is_complete() -> bool,
    /// 
    /// This virtual function is called by QWizard::nextId() to find
    /// out which page to show when the user clicks the **Next** button.
    /// 
    /// The return value is the ID of the next page, or -1 if no page follows.
    /// 
    /// By default, this function returns the lowest ID greater than the ID
    /// of the current page, or -1 if there is no such ID.
    /// 
    /// By reimplementing this function, you can specify a dynamic page
    /// order. For example:
    /// 
    /// **See also:** [`Wizard::next_id`]
    [event] next_id() -> i32,
    /// 
    /// This signal is emitted whenever the complete state of the page
    /// (i.e., the value of isComplete()) changes.
    /// 
    /// If you reimplement isComplete(), make sure to emit
    /// completeChanged() whenever the value of isComplete() changes, to
    /// ensure that QWizard updates the enabled or disabled state of its
    /// buttons.
    /// 
    /// **See also:** [`is_complete()`]
    [signal] complete_changed(),
    /// 
    /// Sets the value of the field called *name* to *value.*
    /// 
    /// This function can be used to set fields on any page of the wizard.
    /// It is equivalent to calling
    /// wizard()-> [setField(\a name, \a value)](QWizard::setField())
    /// 
    /// 
    /// **See also:** [`Wizard::set_field`]
    /// [`field()`]
    /// [`register_field()`]
    set_field(name: String, value: &VariantType),
    /// 
    /// Returns the value of the field called *name.*
    /// 
    /// This function can be used to access fields on any page of the
    /// wizard. It is equivalent to calling
    /// wizard()-> [field(\a name)](QWizard::field())
    /// 
    /// 
    /// Example:
    /// 
    /// **See also:** [`Wizard::field`]
    /// [`set_field()`]
    /// [`register_field()`]
    field(name: String) -> Variant,
    /// 
    /// Creates a field called *name* associated with the given *property* of the given *widget.* From then on, that property
    /// becomes accessible using field() and setField().
    /// 
    /// Fields are global to the entire wizard and make it easy for any
    /// single page to access information stored by another page, without
    /// having to put all the logic in QWizard or having the pages know
    /// explicitly about each other.
    /// 
    /// If *name* ends with an asterisk ( `*),` the field is a mandatory
    /// field. When a page has mandatory fields, the **Next** and/or
    /// **Finish** buttons are enabled only when all mandatory fields
    /// are filled. This requires a *changedSignal* to be specified, to
    /// tell QWizard to recheck the value stored by the mandatory field.
    /// 
    /// QWizard knows the most common Qt widgets. For these (or their
    /// subclasses), you don't need to specify a *property* or a *changedSignal.* The table below lists these widgets:
    /// 
    /// * Widget
    /// * Property
    /// * Change Notification Signal
    /// * QAbstractButton
    /// * bool [checked](QAbstractButton::)
    /// 
    /// * [toggled()](QAbstractButton::)
    /// 
    /// * QAbstractSlider
    /// * int [value](QAbstractSlider::)
    /// 
    /// * [valueChanged()](QAbstractSlider::)
    /// 
    /// * QComboBox
    /// * int [currentIndex](QComboBox::)
    /// 
    /// * [currentIndexChanged()](QComboBox::)
    /// 
    /// * QDateTimeEdit
    /// * QDateTime [dateTime](QDateTimeEdit::)
    /// 
    /// * [dateTimeChanged()](QDateTimeEdit::)
    /// 
    /// * QLineEdit
    /// * QString [text](QLineEdit::)
    /// 
    /// * [textChanged()](QLineEdit::)
    /// 
    /// * QListWidget
    /// * int [currentRow](QListWidget::)
    /// 
    /// * [currentRowChanged()](QListWidget::)
    /// 
    /// * QSpinBox
    /// * int [value](QSpinBox::)
    /// 
    /// * [valueChanged()](QSpinBox::)
    /// 
    /// You can use QWizard::setDefaultProperty() to add entries to this
    /// table or to override existing entries.
    /// 
    /// To consider a field , QWizard simply checks that their
    /// current value doesn't equal their original value (the value they
    /// had before initializePage() was called). For QLineEdit, it also
    /// checks that
    /// [hasAcceptableInput()](QLineEdit::hasAcceptableInput())
    /// returns
    /// true, to honor any validator or mask.
    /// 
    /// QWizard's mandatory field mechanism is provided for convenience.
    /// It can be bypassed by reimplementing QWizardPage::isComplete().
    /// 
    /// **See also:** [`field()`]
    /// [`set_field()`]
    /// [`Wizard::set_default_property`]
    register_field(name: String, widget: *WidgetType, property: *char, changed_signal: *char),
    /// 
    /// Returns the wizard associated with this page, or 0 if this page
    /// hasn't been inserted into a QWizard yet.
    /// 
    /// **See also:** [`Wizard::add_page`]
    /// [`Wizard::set_page`]
    wizard() -> Wizard?,
}

// vim: syntax=rust expandtab ts=4 sw=4
