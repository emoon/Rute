enum Target {
    Target1D,
    Target1DArray,
    Target2D,
    Target2DArray,
    Target3D,
    TargetCubeMap,
    TargetCubeMapArray,
    Target2DMultisample,
    Target2DMultisampleArray,
    TargetRectangle,
    TargetBuffer,
}

enum BindingTarget {
    BindingTarget1D,
    BindingTarget1DArray,
    BindingTarget2D,
    BindingTarget2DArray,
    BindingTarget3D,
    BindingTargetCubeMap,
    BindingTargetCubeMapArray,
    BindingTarget2DMultisample,
    BindingTarget2DMultisampleArray,
    BindingTargetRectangle,
    BindingTargetBuffer,
}

enum MipMapGeneration {
    GenerateMipMaps,
    DontGenerateMipMaps,
}

enum TextureUnitReset {
    ResetTextureUnit,
    DontResetTextureUnit,
}

enum TextureFormat {
    NoFormat,
    R8_UNorm,
    RG8_UNorm,
    RGB8_UNorm,
    RGBA8_UNorm,
    R16_UNorm,
    RG16_UNorm,
    RGB16_UNorm,
    RGBA16_UNorm,
    R8_SNorm,
    RG8_SNorm,
    RGB8_SNorm,
    RGBA8_SNorm,
    R16_SNorm,
    RG16_SNorm,
    RGB16_SNorm,
    RGBA16_SNorm,
    R8U,
    RG8U,
    RGB8U,
    RGBA8U,
    R16U,
    RG16U,
    RGB16U,
    RGBA16U,
    R32U,
    RG32U,
    RGB32U,
    RGBA32U,
    R8I,
    RG8I,
    RGB8I,
    RGBA8I,
    R16I,
    RG16I,
    RGB16I,
    RGBA16I,
    R32I,
    RG32I,
    RGB32I,
    RGBA32I,
    R16F,
    RG16F,
    RGB16F,
    RGBA16F,
    R32F,
    RG32F,
    RGB32F,
    RGBA32F,
    RGB9E5,
    RG11B10F,
    RG3B2,
    R5G6B5,
    RGB5A1,
    RGBA4,
    RGB10A2,
    D16,
    D24,
    D24S8,
    D32,
    D32F,
    D32FS8X24,
    S8,
    RGB_DXT1,
    RGBA_DXT1,
    RGBA_DXT3,
    RGBA_DXT5,
    R_ATI1N_UNorm,
    R_ATI1N_SNorm,
    RG_ATI2N_UNorm,
    RG_ATI2N_SNorm,
    RGB_BP_UNSIGNED_FLOAT,
    RGB_BP_SIGNED_FLOAT,
    RGB_BP_UNorm,
    R11_EAC_UNorm,
    R11_EAC_SNorm,
    RG11_EAC_UNorm,
    RG11_EAC_SNorm,
    RGB8_ETC2,
    SRGB8_ETC2,
    RGB8_PunchThrough_Alpha1_ETC2,
    SRGB8_PunchThrough_Alpha1_ETC2,
    RGBA8_ETC2_EAC,
    SRGB8_Alpha8_ETC2_EAC,
    RGB8_ETC1,
    RGBA_ASTC_4x4,
    RGBA_ASTC_5x4,
    RGBA_ASTC_5x5,
    RGBA_ASTC_6x5,
    RGBA_ASTC_6x6,
    RGBA_ASTC_8x5,
    RGBA_ASTC_8x6,
    RGBA_ASTC_8x8,
    RGBA_ASTC_10x5,
    RGBA_ASTC_10x6,
    RGBA_ASTC_10x8,
    RGBA_ASTC_10x10,
    RGBA_ASTC_12x10,
    RGBA_ASTC_12x12,
    SRGB8_Alpha8_ASTC_4x4,
    SRGB8_Alpha8_ASTC_5x4,
    SRGB8_Alpha8_ASTC_5x5,
    SRGB8_Alpha8_ASTC_6x5,
    SRGB8_Alpha8_ASTC_6x6,
    SRGB8_Alpha8_ASTC_8x5,
    SRGB8_Alpha8_ASTC_8x6,
    SRGB8_Alpha8_ASTC_8x8,
    SRGB8_Alpha8_ASTC_10x5,
    SRGB8_Alpha8_ASTC_10x6,
    SRGB8_Alpha8_ASTC_10x8,
    SRGB8_Alpha8_ASTC_10x10,
    SRGB8_Alpha8_ASTC_12x10,
    SRGB8_Alpha8_ASTC_12x12,
    SRGB8,
    SRGB8_Alpha8,
    SRGB_DXT1,
    SRGB_Alpha_DXT1,
    SRGB_Alpha_DXT3,
    SRGB_Alpha_DXT5,
    SRGB_BP_UNorm,
    DepthFormat,
    AlphaFormat,
    RGBFormat,
    RGBAFormat,
    LuminanceFormat,
    LuminanceAlphaFormat,
}

enum TextureFormatClass {
    NoFormatClass,
    FormatClass_128Bit,
    FormatClass_96Bit,
    FormatClass_64Bit,
    FormatClass_48Bit,
    FormatClass_32Bit,
    FormatClass_24Bit,
    FormatClass_16Bit,
    FormatClass_8Bit,
    FormatClass_RGTC1_R,
    FormatClass_RGTC2_RG,
    FormatClass_BPTC_Unorm,
    FormatClass_BPTC_Float,
    FormatClass_S3TC_DXT1_RGB,
    FormatClass_S3TC_DXT1_RGBA,
    FormatClass_S3TC_DXT3_RGBA,
    FormatClass_S3TC_DXT5_RGBA,
    FormatClass_Unique,
}

enum CubeMapFace {
    CubeMapPositiveX,
    CubeMapNegativeX,
    CubeMapPositiveY,
    CubeMapNegativeY,
    CubeMapPositiveZ,
    CubeMapNegativeZ,
}

enum PixelFormat {
    NoSourceFormat,
    Red,
    RG,
    RGB,
    BGR,
    RGBA,
    BGRA,
    Red_Integer,
    RG_Integer,
    RGB_Integer,
    BGR_Integer,
    RGBA_Integer,
    BGRA_Integer,
    Stencil,
    Depth,
    DepthStencil,
    Alpha,
    Luminance,
    LuminanceAlpha,
}

enum PixelType {
    NoPixelType,
    Int8,
    UInt8,
    Int16,
    UInt16,
    Int32,
    UInt32,
    Float16,
    Float16OES,
    Float32,
    UInt32_RGB9_E5,
    UInt32_RG11B10F,
    UInt8_RG3B2,
    UInt8_RG3B2_Rev,
    UInt16_RGB5A1,
    UInt16_RGB5A1_Rev,
    UInt16_R5G6B5,
    UInt16_R5G6B5_Rev,
    UInt16_RGBA4,
    UInt16_RGBA4_Rev,
    UInt32_RGBA8,
    UInt32_RGBA8_Rev,
    UInt32_RGB10A2,
    UInt32_RGB10A2_Rev,
    UInt32_D24S8,
    Float32_D32_UInt32_S8_X24,
}

enum SwizzleComponent {
    SwizzleRed,
    SwizzleGreen,
    SwizzleBlue,
    SwizzleAlpha,
}

enum SwizzleValue {
    RedValue,
    GreenValue,
    BlueValue,
    AlphaValue,
    ZeroValue,
    OneValue,
}

enum WrapMode {
    Repeat,
    MirroredRepeat,
    ClampToEdge,
    ClampToBorder,
}

enum CoordinateDirection {
    DirectionS,
    DirectionT,
    DirectionR,
}

enum Feature {
    ImmutableStorage,
    ImmutableMultisampleStorage,
    TextureRectangle,
    TextureArrays,
    Texture3D,
    TextureMultisample,
    TextureBuffer,
    TextureCubeMapArrays,
    Swizzle,
    StencilTexturing,
    AnisotropicFiltering,
    NPOTTextures,
    NPOTTextureRepeat,
    Texture1D,
    TextureComparisonOperators,
    TextureMipMapLevel,
    MaxFeatureFlag,
}

enum DepthStencilMode {
    DepthMode,
    StencilMode,
}

enum ComparisonFunction {
    CompareLessEqual,
    CompareGreaterEqual,
    CompareLess,
    CompareGreater,
    CompareEqual,
    CommpareNotEqual,
    CompareAlways,
    CompareNever,
}

enum ComparisonMode {
    CompareRefToTexture,
    CompareNone,
}

enum Filter {
    Nearest,
    Linear,
    NearestMipMapNearest,
    NearestMipMapLinear,
    LinearMipMapNearest,
    LinearMipMapLinear,
}


struct OpenGLTexture {
    qt_check_for_qgadget_macro(),
    target() -> OpenGLTexture::Target,
    create() -> bool,
    is_created() -> bool,
    texture_id() -> GLuint,
    bind(),
    bind(unit: uint, reset: OpenGLTexture::TextureUnitReset),
    release(),
    release(unit: uint, reset: OpenGLTexture::TextureUnitReset),
    is_bound() -> bool,
    is_bound(unit: uint) -> bool,
    [static] bound_texture_id(target: OpenGLTexture::BindingTarget) -> GLuint,
    [static] bound_texture_id(unit: uint, target: OpenGLTexture::BindingTarget) -> GLuint,
    set_format(format: OpenGLTexture::TextureFormat),
    format() -> OpenGLTexture::TextureFormat,
    set_size(width: i32, height: i32, depth: i32),
    width() -> i32,
    height() -> i32,
    depth() -> i32,
    set_mip_levels(levels: i32),
    mip_levels() -> i32,
    maximum_mip_levels() -> i32,
    set_layers(layers: i32),
    layers() -> i32,
    faces() -> i32,
    set_samples(samples: i32),
    samples() -> i32,
    set_fixed_sample_positions(fixed: bool),
    is_fixed_sample_positions() -> bool,
    allocate_storage(),
    allocate_storage(pixel_format: OpenGLTexture::PixelFormat, pixel_type: OpenGLTexture::PixelType),
    is_storage_allocated() -> bool,
    create_texture_view(target: OpenGLTexture::Target, view_format: OpenGLTexture::TextureFormat, minimum_mipmap_level: i32, maximum_mipmap_level: i32, minimum_layer: i32, maximum_layer: i32) -> OpenGLTexture?,
    is_texture_view() -> bool,
    set_data(mip_level: i32, layer: i32, cube_face: OpenGLTexture::CubeMapFace, source_format: OpenGLTexture::PixelFormat, source_type: OpenGLTexture::PixelType, data: &void, options: &OpenGLPixelTransferOptionsType),
    set_data(mip_level: i32, layer: i32, source_format: OpenGLTexture::PixelFormat, source_type: OpenGLTexture::PixelType, data: &void, options: &OpenGLPixelTransferOptionsType),
    set_data(mip_level: i32, source_format: OpenGLTexture::PixelFormat, source_type: OpenGLTexture::PixelType, data: &void, options: &OpenGLPixelTransferOptionsType),
    set_data(source_format: OpenGLTexture::PixelFormat, source_type: OpenGLTexture::PixelType, data: &void, options: &OpenGLPixelTransferOptionsType),
    set_data(mip_level: i32, layer: i32, cube_face: OpenGLTexture::CubeMapFace, source_format: OpenGLTexture::PixelFormat, source_type: OpenGLTexture::PixelType, data: &void, options: &OpenGLPixelTransferOptionsType),
    set_data(mip_level: i32, layer: i32, layer_count: i32, cube_face: OpenGLTexture::CubeMapFace, source_format: OpenGLTexture::PixelFormat, source_type: OpenGLTexture::PixelType, data: &void, options: &OpenGLPixelTransferOptionsType),
    set_data(mip_level: i32, layer: i32, source_format: OpenGLTexture::PixelFormat, source_type: OpenGLTexture::PixelType, data: &void, options: &OpenGLPixelTransferOptionsType),
    set_data(mip_level: i32, source_format: OpenGLTexture::PixelFormat, source_type: OpenGLTexture::PixelType, data: &void, options: &OpenGLPixelTransferOptionsType),
    set_data(source_format: OpenGLTexture::PixelFormat, source_type: OpenGLTexture::PixelType, data: &void, options: &OpenGLPixelTransferOptionsType),
    set_compressed_data(mip_level: i32, layer: i32, cube_face: OpenGLTexture::CubeMapFace, data_size: i32, data: &void, options: &OpenGLPixelTransferOptionsType),
    set_compressed_data(mip_level: i32, layer: i32, data_size: i32, data: &void, options: &OpenGLPixelTransferOptionsType),
    set_compressed_data(mip_level: i32, data_size: i32, data: &void, options: &OpenGLPixelTransferOptionsType),
    set_compressed_data(data_size: i32, data: &void, options: &OpenGLPixelTransferOptionsType),
    set_compressed_data(mip_level: i32, layer: i32, cube_face: OpenGLTexture::CubeMapFace, data_size: i32, data: &void, options: &OpenGLPixelTransferOptionsType),
    set_compressed_data(mip_level: i32, layer: i32, layer_count: i32, cube_face: OpenGLTexture::CubeMapFace, data_size: i32, data: &void, options: &OpenGLPixelTransferOptionsType),
    set_compressed_data(mip_level: i32, layer: i32, data_size: i32, data: &void, options: &OpenGLPixelTransferOptionsType),
    set_compressed_data(mip_level: i32, data_size: i32, data: &void, options: &OpenGLPixelTransferOptionsType),
    set_compressed_data(data_size: i32, data: &void, options: &OpenGLPixelTransferOptionsType),
    set_data(image: &ImageType, gen_mip_maps: OpenGLTexture::MipMapGeneration),
    [static] has_feature(feature: OpenGLTexture::Feature) -> bool,
    set_mip_base_level(base_level: i32),
    mip_base_level() -> i32,
    set_mip_max_level(max_level: i32),
    mip_max_level() -> i32,
    set_mip_level_range(base_level: i32, max_level: i32),
    mip_level_range() -> Pair<int,,
    set_auto_mip_map_generation_enabled(enabled: bool),
    is_auto_mip_map_generation_enabled() -> bool,
    generate_mip_maps(),
    generate_mip_maps(base_level: i32, reset_base_level: bool),
    set_swizzle_mask(component: OpenGLTexture::SwizzleComponent, value: OpenGLTexture::SwizzleValue),
    set_swizzle_mask(r: OpenGLTexture::SwizzleValue, g: OpenGLTexture::SwizzleValue, b: OpenGLTexture::SwizzleValue, a: OpenGLTexture::SwizzleValue),
    swizzle_mask(component: OpenGLTexture::SwizzleComponent) -> OpenGLTexture::SwizzleValue,
    set_depth_stencil_mode(mode: OpenGLTexture::DepthStencilMode),
    depth_stencil_mode() -> OpenGLTexture::DepthStencilMode,
    set_comparison_function(function: OpenGLTexture::ComparisonFunction),
    comparison_function() -> OpenGLTexture::ComparisonFunction,
    set_comparison_mode(mode: OpenGLTexture::ComparisonMode),
    comparison_mode() -> OpenGLTexture::ComparisonMode,
    set_minification_filter(filter: OpenGLTexture::Filter),
    minification_filter() -> OpenGLTexture::Filter,
    set_magnification_filter(filter: OpenGLTexture::Filter),
    magnification_filter() -> OpenGLTexture::Filter,
    set_min_mag_filters(minification_filter: OpenGLTexture::Filter, magnification_filter: OpenGLTexture::Filter),
    min_mag_filters() -> Pair<QOpenGLTexture::Filter, QOpenGLTexture::Filter>,
    set_wrap_mode(mode: OpenGLTexture::WrapMode),
    set_wrap_mode(direction: OpenGLTexture::CoordinateDirection, mode: OpenGLTexture::WrapMode),
    wrap_mode(direction: OpenGLTexture::CoordinateDirection) -> OpenGLTexture::WrapMode,
    set_border_color(color: ColorType),
    set_border_color(r: f32, g: f32, b: f32, a: f32),
    set_border_color(r: i32, g: i32, b: i32, a: i32),
    set_border_color(r: uint, g: uint, b: uint, a: uint),
    border_color() -> Color,
    border_color(border: &f32),
    border_color(border: &i32),
    border_color(border: &unsigned),
    set_minimum_level_of_detail(value: f32),
    minimum_level_of_detail() -> f32,
    set_maximum_level_of_detail(value: f32),
    maximum_level_of_detail() -> f32,
    set_level_of_detail_range(min: f32, max: f32),
    level_of_detail_range() -> Pair<float,,
    set_levelof_detail_bias(bias: f32),
    levelof_detail_bias() -> f32,
}

// vim: syntax=rust expandtab ts=4 sw=4
