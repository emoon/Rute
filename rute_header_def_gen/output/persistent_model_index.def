/// 
/// A QPersistentModelIndex is a model index that can be stored by an
/// application, and later used to access information in a model.
/// Unlike the QModelIndex class, it is safe to store a
/// QPersistentModelIndex since the model will ensure that references
/// to items will continue to be valid as long as they can be accessed
/// by the model.
/// 
/// It is good practice to check that persistent model indexes are valid
/// before using them.
/// 
/// **See also:** {Model/View Programming}
/// QModelIndex
/// QAbstractItemModel
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct PersistentModelIndex {
    /// 
    /// Swaps this persistent modelindex with *other.* This function is
    /// very fast and never fails.
    swap(other: &PersistentModelIndexType),
    /// 
    /// Returns the row this persistent model index refers to.
    row() -> i32,
    /// 
    /// Returns the column this persistent model index refers to.
    column() -> i32,
    internal_pointer(),
    internal_id() -> quintptr,
    /// 
    /// Returns the parent QModelIndex for this persistent index, or an invalid
    /// QModelIndex if it has no parent.
    /// 
    /// **See also:** sibling()
    /// model()
    parent() -> ModelIndex,
    /// 
    /// Returns the sibling at *row* and *column* or an invalid QModelIndex if
    /// there is no sibling at this position.
    /// 
    /// **See also:** parent()
    sibling(row: i32, column: i32) -> ModelIndex,
    /// 
    /// Use QAbstractItemModel::index() instead.
    /// 
    /// Returns the child of the model index that is stored in the given *row*
    /// and *column.*
    /// 
    /// **See also:** parent()
    /// sibling()
    child(row: i32, column: i32) -> ModelIndex,
    /// 
    /// Returns the data for the given *role* for the item referred to by the
    /// index.
    /// 
    /// **See also:** Qt::ItemDataRole
    /// QAbstractItemModel::setData()
    data(role: i32) -> Variant,
    /// 
    /// Returns the flags for the item referred to by the index.
    flags() -> Rute::ItemFlags,
    /// 
    /// Returns the model that the index belongs to.
    model() -> AbstractItemModel?,
    /// 
    /// Returns `true` if this persistent model index is valid; otherwise returns
    /// `false` .
    /// 
    /// A valid index belongs to a model, and has non-negative row and column
    /// numbers.
    /// 
    /// **See also:** model()
    /// row()
    /// column()
    is_valid() -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
