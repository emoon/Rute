///     \class QDebug
///     \inmodule QtCore
///     \ingroup shared
/// 
///     \brief The QDebug class provides an output stream for debugging information.
/// 
///     QDebug is used whenever the developer needs to write out debugging or tracing
///     information to a device, file, string or console.
/// 
///     \section1 Basic Use
/// 
///     In the common case, it is useful to call the qDebug() function to obtain a
///     default QDebug object to use for writing debugging information.
/// 
///     \snippet qdebug/qdebugsnippet.cpp 1
/// 
///     This constructs a QDebug object using the constructor that accepts a QtMsgType
///     value of QtDebugMsg. Similarly, the qWarning(), qCritical() and qFatal()
///     functions also return QDebug objects for the corresponding message types.
/// 
///     The class also provides several constructors for other situations, including
///     a constructor that accepts a QFile or any other QIODevice subclass that is
///     used to write debugging information to files and other devices. The constructor
///     that accepts a QString is used to write to a string for display or serialization.
/// 
///     \section1 Formatting Options
/// 
///     QDebug formats output so that it's easily readable. It automatically adds spaces
///     between arguments, and adds quotes around QString, QByteArray, QChar arguments.
/// 
///     You can tweak these options through the space(), nospace() and quote(), noquote()
///     methods. Furthermore, \l{QTextStream manipulators} can be piped into a QDebug
///     stream.
/// 
///     QDebugStateSaver limits changes to the formatting to the current scope.
///     resetFormat() resets the options to the default ones.
/// 
///     \section1 Writing Custom Types to a Stream
/// 
///     Many standard types can be written to QDebug objects, and Qt provides support for
///     most Qt value types. To add support for custom types, you need to implement a
///     streaming operator, as in the following example:
/// 
///     \snippet qdebug/qdebugsnippet.cpp 0
/// 
///     This is described in the \l{Debugging Techniques} and
///     \l{Creating Custom Qt Types#Making the Type Printable}{Creating Custom Qt Types}
///     documents.
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QDebug)]
enum Latin1Content {
    ContainsBinary,
    ContainsLatin1,
}


struct Debug {
    ///     \internal
    put_ucs4(ucs4: uint),
    ///     \internal
    ///     Duplicated from QtTest::toPrettyCString().
    put_byte_array(begin: *char, length: size_t, content: Debug::Latin1Content),
    swap(other: &DebugType),
    reset_format() -> Debug?,
    space() -> Debug?,
    nospace() -> Debug?,
    maybe_space() -> Debug?,
    verbosity() -> i32,
    set_verbosity(verbosity_level: i32),
    auto_insert_spaces() -> bool,
    set_auto_insert_spaces(b: bool),
    quote() -> Debug?,
    noquote() -> Debug?,
    maybe_quote(c: char) -> Debug?,
}

// vim: syntax=rust expandtab ts=4 sw=4
