/// 
/// A QHeaderView displays the headers used in item views such as the
/// QTableView and QTreeView classes. It takes the place of Qt3's `QHeader`
/// class previously used for the same purpose, but uses the Qt's model/view
/// architecture for consistency with the item view classes.
/// 
/// The QHeaderView class is one of the [Model/View Classes](Model/View%20Classes)
/// and is part of
/// Qt's [model/view framework](Model/View%20Programming)
/// 
/// 
/// The header gets the data for each section from the model using the
/// QAbstractItemModel::headerData() function. You can set the data by using
/// QAbstractItemModel::setHeaderData().
/// 
/// Each header has an orientation() and a number of sections, given by the
/// count() function. A section refers to a part of the header - either a row
/// or a column, depending on the orientation.
/// 
/// Sections can be moved and resized using moveSection() and resizeSection();
/// they can also be hidden and shown with hideSection() and showSection().
/// 
/// Each section of a header is described by a section ID, specified by its
/// section(), and can be located at a particular visualIndex() in the header.
/// A section can have a sort indicator set with setSortIndicator(); this
/// indicates whether the items in the associated item view will be sorted in
/// the order given by the section.
/// 
/// For a horizontal header the section is equivalent to a column in the model,
/// and for a vertical header the section is equivalent to a row in the model.
/// 
/// # Moving Header Sections
/// 
/// A header can be fixed in place, or made movable with setSectionsMovable(). It can
/// be made clickable with setSectionsClickable(), and has resizing behavior in
/// accordance with setSectionResizeMode().
/// 
/// **Note**: Double-clicking on a header to resize a section only applies for
/// visible rows.
/// 
/// A header will emit sectionMoved() if the user moves a section,
/// sectionResized() if the user resizes a section, and sectionClicked() as
/// well as sectionHandleDoubleClicked() in response to mouse clicks. A header
/// will also emit sectionCountChanged().
/// 
/// You can identify a section using the logicalIndex() and logicalIndexAt()
/// functions, or by its index position, using the visualIndex() and
/// visualIndexAt() functions. The visual index will change if a section is
/// moved, but the logical index will not change.
/// 
/// # Appearance
/// 
/// QTableWidget and QTableView create default headers. If you want
/// the headers to be visible, you can use [setVisible()](QFrame::)
/// 
/// 
/// Not all [ItemDataRole](Qt::)
/// s will have an effect on a
/// QHeaderView. If you need to draw other roles, you can subclass
/// QHeaderView and reimplement [paintEvent()](QHeaderView::)
/// 
/// QHeaderView respects the following item data roles:
/// [TextAlignmentRole](Qt::)
/// , [DisplayRole](Qt::)
/// 
/// [FontRole](Qt::)
/// , [DecorationRole](Qt::)
/// 
/// [ForegroundRole](Qt::)
/// , and [BackgroundRole](Qt::)
/// 
/// 
/// **Note**: Each header renders the data for each section itself, and does not
/// rely on a delegate. As a result, calling a header's setItemDelegate()
/// function will have no effect.
/// 
/// **See also:** {Model/View Programming}
/// [`ListView`]
/// [`TableView`]
/// [`TreeView`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct HeaderView : AbstractItemView {
    /// 
    [event] set_model(model: *AbstractItemModelType),
    /// 
    /// Returns the orientation of the header.
    /// 
    /// **See also:** [`t::orientation()`]
    orientation() -> Rute::Orientation,
    /// 
    /// Returns the offset of the header: this is the header's left-most (or
    /// top-most for vertical headers) visible pixel.
    /// 
    /// **See also:** [`set_offset()`]
    offset() -> i32,
    /// 
    /// Returns the length along the orientation of the header.
    /// 
    /// **See also:** [`size_hint()`]
    /// [`set_section_resize_mode()`]
    /// [`offset()`]
    length() -> i32,
    /// 
    /// Returns a suitable size hint for this header.
    /// 
    /// **See also:** [`section_size_hint()`]
    [event] size_hint() -> Size,
    /// 
    [event] set_visible(v: bool),
    /// 
    /// Returns a suitable size hint for the section specified by *logicalIndex.*
    /// 
    /// **See also:** [`size_hint()`]
    /// [`default_section_size()`]
    /// [`minimum_section_size()`]
    /// [`maximum_section_size()`]
    /// Qt::SizeHintRole
    section_size_hint(logical_index: i32) -> i32,
    /// 
    /// Returns the visual index of the section that covers the given *position*
    /// in the viewport.
    /// 
    /// **See also:** [`logical_index_at()`]
    visual_index_at(position: i32) -> i32,
    /// 
    /// Returns the section that covers the given *position* in the viewport.
    /// 
    /// **See also:** [`visual_index_at()`]
    /// [`is_section_hidden()`]
    /// 
    /// Returns the logical index of the section at the given coordinate. If the
    /// header is horizontal *x* will be used, otherwise *y* will be used to
    /// find the logical index.
    /// 
    /// Returns the logical index of the section at the position given in *pos.*
    /// If the header is horizontal the x-coordinate will be used, otherwise the
    /// y-coordinate will be used to find the logical index.
    /// 
    /// **See also:** [`section_position()`]
    logical_index_at(position: i32) -> i32,
    /// 
    /// Returns the section that covers the given *position* in the viewport.
    /// 
    /// **See also:** [`visual_index_at()`]
    /// [`is_section_hidden()`]
    /// 
    /// Returns the logical index of the section at the given coordinate. If the
    /// header is horizontal *x* will be used, otherwise *y* will be used to
    /// find the logical index.
    /// 
    /// Returns the logical index of the section at the position given in *pos.*
    /// If the header is horizontal the x-coordinate will be used, otherwise the
    /// y-coordinate will be used to find the logical index.
    /// 
    /// **See also:** [`section_position()`]
    [org_name(logicalIndexAt)]
    logical_index_at_2(x: i32, y: i32) -> i32,
    /// 
    /// Returns the section that covers the given *position* in the viewport.
    /// 
    /// **See also:** [`visual_index_at()`]
    /// [`is_section_hidden()`]
    /// 
    /// Returns the logical index of the section at the given coordinate. If the
    /// header is horizontal *x* will be used, otherwise *y* will be used to
    /// find the logical index.
    /// 
    /// Returns the logical index of the section at the position given in *pos.*
    /// If the header is horizontal the x-coordinate will be used, otherwise the
    /// y-coordinate will be used to find the logical index.
    /// 
    /// **See also:** [`section_position()`]
    [org_name(logicalIndexAt)]
    logical_index_at_3(pos: &PointType) -> i32,
    /// 
    /// Returns a suitable size hint for the section specified by *logicalIndex.*
    /// 
    /// **See also:** [`size_hint()`]
    /// [`default_section_size()`]
    /// [`minimum_section_size()`]
    /// [`maximum_section_size()`]
    /// Qt::SizeHintRole
    /// 
    /// Returns the width (or height for vertical headers) of the given
    /// *logicalIndex.*
    /// 
    /// **See also:** [`length()`]
    /// [`set_section_resize_mode()`]
    /// [`default_section_size()`]
    /// 
    /// Returns the size of the contents of the section specified by the given
    /// *logicalIndex.*
    /// 
    /// **See also:** [`default_section_size()`]
    section_size(logical_index: i32) -> i32,
    /// 
    /// Returns the section position of the given *logicalIndex,* or -1
    /// if the section is hidden. The position is measured in pixels from
    /// the first visible item's top-left corner to the top-left corner of
    /// the item with *logicalIndex.* The measurement is along the x-axis
    /// for horizontal headers and along the y-axis for vertical headers.
    /// 
    /// **See also:** [`section_viewport_position()`]
    section_position(logical_index: i32) -> i32,
    /// 
    /// Returns the section viewport position of the given *logicalIndex.*
    /// 
    /// If the section is hidden, the return value is undefined.
    /// 
    /// **See also:** [`section_position()`]
    /// [`is_section_hidden()`]
    section_viewport_position(logical_index: i32) -> i32,
    /// 
    /// Moves the section at visual index *from* to occupy visual index *to.*
    /// 
    /// **See also:** [`sections_moved()`]
    move_section(from: i32, to: i32),
    /// 
    /// Swaps the section at visual index *first* with the section at visual
    /// index *second.*
    /// 
    /// **See also:** [`move_section()`]
    swap_sections(first: i32, second: i32),
    /// 
    /// Resizes the section specified by *logicalIndex* to *size* measured in
    /// pixels. The size parameter must be a value larger or equal to zero. A
    /// size equal to zero is however not recommended. In that situation hideSection
    /// should be used instead.
    /// 
    /// **See also:** [`section_resized()`]
    /// [`resize_mode()`]
    /// [`section_size()`]
    /// [`hide_section()`]
    /// 
    /// Resizes the sections according to the given *mode,* ignoring the current
    /// resize mode.
    /// 
    /// **See also:** [`resize_mode()`]
    /// [`section_resized()`]
    /// 
    /// Resizes the sections according to their size hints. Normally, you do not
    /// have to call this function.
    resize_section(logical_index: i32, size: i32),
    /// 
    /// Resizes the sections according to the given *mode,* ignoring the current
    /// resize mode.
    /// 
    /// **See also:** [`resize_mode()`]
    /// [`section_resized()`]
    /// 
    /// Resizes the sections according to their size hints. Normally, you do not
    /// have to call this function.
    resize_sections(mode: HeaderView::ResizeMode),
    /// 
    /// Returns `true` if the section specified by *logicalIndex* is explicitly
    /// hidden from the user; otherwise returns `false.`
    /// 
    /// **See also:** [`hide_section()`]
    /// [`show_section()`]
    /// [`set_section_hidden()`]
    /// [`hidden_section_count()`]
    is_section_hidden(logical_index: i32) -> bool,
    /// 
    /// If *hide* is true the section specified by *logicalIndex* is hidden;
    /// otherwise the section is shown.
    /// 
    /// **See also:** [`is_section_hidden()`]
    /// [`hidden_section_count()`]
    set_section_hidden(logical_index: i32, hide: bool),
    /// 
    /// Returns the number of sections in the header that has been hidden.
    /// 
    /// **See also:** [`set_section_hidden()`]
    /// [`is_section_hidden()`]
    hidden_section_count() -> i32,
    /// 
    /// Hides the section specified by *logicalIndex.*
    /// 
    /// **See also:** [`show_section()`]
    /// [`is_section_hidden()`]
    /// [`hidden_section_count()`]
    /// [`set_section_hidden()`]
    hide_section(logical_index: i32),
    /// 
    /// Shows the section specified by *logicalIndex.*
    /// 
    /// **See also:** [`hide_section()`]
    /// [`is_section_hidden()`]
    /// [`hidden_section_count()`]
    /// [`set_section_hidden()`]
    show_section(logical_index: i32),
    /// 
    /// Returns the number of sections in the header.
    /// 
    /// **See also:** [`section_count_changed()`]
    /// [`length()`]
    count() -> i32,
    /// 
    /// Returns the visual index of the section that covers the given *position*
    /// in the viewport.
    /// 
    /// **See also:** [`logical_index_at()`]
    /// 
    /// Returns the visual index position of the section specified by the given
    /// *logicalIndex,* or -1 otherwise.
    /// 
    /// Hidden sections still have valid visual indexes.
    /// 
    /// **See also:** [`logical_index()`]
    visual_index(logical_index: i32) -> i32,
    /// 
    /// Returns the section that covers the given *position* in the viewport.
    /// 
    /// **See also:** [`visual_index_at()`]
    /// [`is_section_hidden()`]
    /// 
    /// Returns the logical index of the section at the given coordinate. If the
    /// header is horizontal *x* will be used, otherwise *y* will be used to
    /// find the logical index.
    /// 
    /// Returns the logical index of the section at the position given in *pos.*
    /// If the header is horizontal the x-coordinate will be used, otherwise the
    /// y-coordinate will be used to find the logical index.
    /// 
    /// **See also:** [`section_position()`]
    /// 
    /// Returns the logicalIndex for the section at the given *visualIndex*
    /// position, or -1 if visualIndex < 0 or visualIndex >= QHeaderView::count().
    /// 
    /// Note that the visualIndex is not affected by hidden sections.
    /// 
    /// **See also:** [`visual_index()`]
    /// [`section_position()`]
    logical_index(visual_index: i32) -> i32,
    /// 
    /// If *movable* is true, the header sections may be moved by the user;
    /// otherwise they are fixed in place.
    /// 
    /// When used in combination with QTreeView, the first column is not
    /// movable (since it contains the tree structure), by default.
    /// You can make it movable with setFirstSectionMovable(true).
    /// 
    /// **See also:** [`sections_movable()`]
    /// [`section_moved()`]
    /// **See also:** [`set_first_section_movable()`]
    set_sections_movable(movable: bool),
    /// 
    /// Returns `true` if the header can be moved by the user; otherwise returns
    /// false.
    /// 
    /// By default, sections are movable in QTreeView (except for the first one),
    /// and not movable in QTableView.
    /// 
    /// **See also:** [`set_sections_movable()`]
    sections_movable() -> bool,
    set_first_section_movable(movable: bool),
    is_first_section_movable() -> bool,
    /// 
    /// If *clickable* is true, the header will respond to single clicks.
    /// 
    /// **See also:** [`sections_clickable()`]
    /// [`section_clicked()`]
    /// [`section_pressed()`]
    /// [`set_sort_indicator_shown()`]
    set_sections_clickable(clickable: bool),
    /// 
    /// Returns `true` if the header is clickable; otherwise returns `false.` A
    /// clickable header could be set up to allow the user to change the
    /// representation of the data in the view related to the header.
    /// 
    /// **See also:** [`set_sections_clickable()`]
    sections_clickable() -> bool,
    set_highlight_sections(highlight: bool),
    /// 
    /// By default, this property is `false.`
    highlight_sections() -> bool,
    /// 
    /// Returns the resize mode that applies to the section specified by the given
    /// *logicalIndex.*
    /// 
    /// **See also:** [`set_section_resize_mode()`]
    section_resize_mode(logical_index: i32) -> HeaderView::ResizeMode,
    /// 
    /// Sets the constraints on how the header can be resized to those described
    /// by the given *mode.*
    /// 
    /// **See also:** [`resize_mode()`]
    /// [`length()`]
    /// [`section_resized()`]
    /// 
    /// Sets the constraints on how the section specified by *logicalIndex* in
    /// the header can be resized to those described by the given *mode.* The logical
    /// index should exist at the time this function is called.
    /// 
    /// **Note**: This setting will be ignored for the last section if the stretchLastSection
    /// property is set to true. This is the default for the horizontal headers provided
    /// by QTreeView.
    /// 
    /// **See also:** [`set_stretch_last_section()`]
    /// [`resize_contents_precision()`]
    set_section_resize_mode(mode: HeaderView::ResizeMode),
    /// 
    /// Sets the constraints on how the header can be resized to those described
    /// by the given *mode.*
    /// 
    /// **See also:** [`resize_mode()`]
    /// [`length()`]
    /// [`section_resized()`]
    /// 
    /// Sets the constraints on how the section specified by *logicalIndex* in
    /// the header can be resized to those described by the given *mode.* The logical
    /// index should exist at the time this function is called.
    /// 
    /// **Note**: This setting will be ignored for the last section if the stretchLastSection
    /// property is set to true. This is the default for the horizontal headers provided
    /// by QTreeView.
    /// 
    /// **See also:** [`set_stretch_last_section()`]
    /// [`resize_contents_precision()`]
    [org_name(setSectionResizeMode)]
    set_section_resize_mode_2(logical_index: i32, mode: HeaderView::ResizeMode),
    /// 
    /// Sets how precise QHeaderView should calculate the size when ResizeToContents is used.
    /// A low value will provide a less accurate but fast auto resize while a higher
    /// value will provide a more accurate resize that however can be slow.
    /// 
    /// The number *precision* specifies how many sections that should be consider
    /// when calculating the preferred size.
    /// 
    /// The default value is 1000 meaning that a horizontal column with auto-resize will look
    /// at maximum 1000 rows on calculating when doing an auto resize.
    /// 
    /// Special value 0 means that it will look at only the visible area.
    /// Special value -1 will imply looking at all elements.
    /// 
    /// This value is used in QTableView::sizeHintForColumn(), QTableView::sizeHintForRow()
    /// and QTreeView::sizeHintForColumn(). Reimplementing these functions can make this
    /// function not having an effect.
    /// 
    /// **See also:** [`resize_contents_precision()`]
    /// [`set_section_resize_mode()`]
    /// [`resize_sections()`]
    /// [`TableView::size_hint_for_column`]
    /// [`TableView::size_hint_for_row`]
    /// [`TreeView::size_hint_for_column`]
    set_resize_contents_precision(precision: i32),
    /// 
    /// Returns how precise QHeaderView will calculate on ResizeToContents.
    /// 
    /// **See also:** [`set_resize_contents_precision()`]
    /// [`set_section_resize_mode()`]
    /// 
    resize_contents_precision() -> i32,
    set_sort_indicator_shown(show: bool),
    is_sort_indicator_shown() -> bool,
    /// 
    /// Sets the sort indicator for the section specified by the given
    /// *logicalIndex* in the direction specified by *order,* and removes the
    /// sort indicator from any other section that was showing it.
    /// 
    /// *logicalIndex* may be -1, in which case no sort indicator will be shown
    /// and the model will return to its natural, unsorted order. Note that not
    /// all models support this and may even crash in this case.
    /// 
    /// **See also:** [`sort_indicator_section()`]
    /// [`sort_indicator_order()`]
    set_sort_indicator(logical_index: i32, order: Rute::SortOrder),
    /// 
    /// Returns the logical index of the section that has a sort indicator.
    /// By default this is section 0.
    /// 
    /// **See also:** [`set_sort_indicator()`]
    /// [`sort_indicator_order()`]
    /// [`set_sort_indicator_shown()`]
    sort_indicator_section() -> i32,
    /// 
    /// Returns the order for the sort indicator. If no section has a sort
    /// indicator the return value of this function is undefined.
    /// 
    /// **See also:** [`set_sort_indicator()`]
    /// [`sort_indicator_section()`]
    sort_indicator_order() -> Rute::SortOrder,
    /// 
    /// This property only affects sections that have [Interactive](Interactive)
    /// as their
    /// resize mode.
    /// 
    /// The default value is false.
    /// 
    /// **See also:** [`set_section_resize_mode()`]
    cascading_section_resizes() -> bool,
    set_cascading_section_resizes(enable: bool),
    /// 
    /// This property only affects sections that have [Interactive](Interactive)
    /// or [Fixed](Fixed)
    /// 
    /// as their resize mode.
    /// 
    /// By default, the value of this property is style dependent.
    /// Thus, when the style changes, this property updates from it.
    /// Calling setDefaultSectionSize() stops the updates, calling
    /// resetDefaultSectionSize() will restore default behavior.
    /// 
    /// **See also:** [`set_section_resize_mode()`]
    /// minimumSectionSize
    default_section_size() -> i32,
    set_default_section_size(size: i32),
    reset_default_section_size(),
    /// 
    /// The minimum section size is the smallest section size allowed. If the
    /// minimum section size is set to -1, QHeaderView will use the maximum of
    /// the [global strut](QApplication::globalStrut())
    /// or the
    /// [font metrics](fontMetrics())
    /// size.
    /// 
    /// This property is honored by all [resize modes](ResizeMode)
    /// 
    /// 
    /// **See also:** [`set_section_resize_mode()`]
    /// defaultSectionSize
    minimum_section_size() -> i32,
    set_minimum_section_size(size: i32),
    /// 
    /// The maximum section size is the largest section size allowed.
    /// The default value for this property is 1048575, which is also the largest
    /// possible size for a section. Setting maximum to -1 will reset the value to
    /// the largest section size.
    /// 
    /// With exception of stretch this property is honored by all [resize modes](ResizeMode)
    /// 
    /// **See also:** [`set_section_resize_mode()`]
    /// defaultSectionSize
    maximum_section_size() -> i32,
    set_maximum_section_size(size: i32),
    /// 
    default_alignment() -> Rute::Alignment,
    set_default_alignment(alignment: Rute::Alignment),
    [event] do_items_layout(),
    /// 
    /// Returns `true` if sections in the header has been moved; otherwise returns
    /// false;
    /// 
    /// **See also:** [`move_section()`]
    sections_moved() -> bool,
    /// 
    /// Returns `true` if sections in the header has been hidden; otherwise returns
    /// false;
    /// 
    /// **See also:** [`set_section_hidden()`]
    sections_hidden() -> bool,
    /// 
    /// Saves the current state of this header view.
    /// 
    /// To restore the saved state, pass the return value to restoreState().
    /// 
    /// **See also:** [`restore_state()`]
    save_state() -> ByteArray,
    /// 
    /// Restores the *state* of this header view.
    /// This function returns `true` if the state was restored; otherwise returns
    /// false.
    /// 
    /// **See also:** [`save_state()`]
    restore_state(state: &ByteArrayType) -> bool,
    /// 
    [event] reset(),
    /// 
    /// Sets the header's offset to *offset.*
    /// 
    /// **See also:** [`offset()`]
    /// [`length()`]
    /// 
    /// Sets the offset to the start of the section at the given *visualSectionNumber.*
    /// *visualSectionNumber* is the actual visible section when hiddenSections are
    /// not considered. That is not always the same as visualIndex().
    /// 
    /// **See also:** [`set_offset()`]
    /// [`section_position()`]
    /// 
    /// Sets the offset to make the last section visible.
    /// 
    /// **See also:** [`set_offset()`]
    /// [`section_position()`]
    /// [`set_offset_to_section_position()`]
    set_offset(offset: i32),
    /// 
    /// Sets the offset to the start of the section at the given *visualSectionNumber.*
    /// *visualSectionNumber* is the actual visible section when hiddenSections are
    /// not considered. That is not always the same as visualIndex().
    /// 
    /// **See also:** [`set_offset()`]
    /// [`section_position()`]
    set_offset_to_section_position(visual_index: i32),
    /// 
    /// Sets the offset to make the last section visible.
    /// 
    /// **See also:** [`set_offset()`]
    /// [`section_position()`]
    /// [`set_offset_to_section_position()`]
    set_offset_to_last_section(),
    /// 
    /// Updates the changed header sections with the given *orientation,* from
    /// *logicalFirst* to *logicalLast* inclusive.
    header_data_changed(orientation: Rute::Orientation, logical_first: i32, logical_last: i32),
    /// 
    /// int newVisualIndex)
    /// 
    /// This signal is emitted when a section is moved. The section's logical index
    /// is specified by *logicalIndex,* the old index by *oldVisualIndex,* and
    /// the new index position by *newVisualIndex.*
    /// 
    /// **See also:** [`move_section()`]
    [signal] section_moved(logical_index: i32, old_visual_index: i32, new_visual_index: i32),
    /// 
    /// int newSize)
    /// 
    /// This signal is emitted when a section is resized. The section's logical
    /// number is specified by *logicalIndex,* the old size by *oldSize,* and the
    /// new size by *newSize.*
    /// 
    /// **See also:** [`resize_section()`]
    [signal] section_resized(logical_index: i32, old_size: i32, new_size: i32),
    /// 
    /// This signal is emitted when a section is pressed. The section's logical
    /// index is specified by *logicalIndex.*
    /// 
    /// **See also:** [`set_sections_clickable()`]
    [signal] section_pressed(logical_index: i32),
    /// 
    /// This signal is emitted when a section is clicked. The section's logical
    /// index is specified by *logicalIndex.*
    /// 
    /// Note that the sectionPressed signal will also be emitted.
    /// 
    /// **See also:** [`set_sections_clickable()`]
    /// [`section_pressed()`]
    [signal] section_clicked(logical_index: i32),
    /// 
    /// This signal is emitted when the cursor moves over the section and the left
    /// mouse button is pressed. The section's logical index is specified by
    /// *logicalIndex.*
    /// 
    /// **See also:** [`set_sections_clickable()`]
    /// [`section_pressed()`]
    [signal] section_entered(logical_index: i32),
    /// 
    /// This signal is emitted when a section is double-clicked. The section's
    /// logical index is specified by *logicalIndex.*
    /// 
    /// **See also:** [`set_sections_clickable()`]
    [signal] section_double_clicked(logical_index: i32),
    /// 
    /// This signal is emitted when the number of sections changes, i.e., when
    /// sections are added or deleted. The original count is specified by
    /// *oldCount,* and the new count by *newCount.*
    /// 
    /// **See also:** [`count()`]
    /// [`length()`]
    /// [`header_data_changed()`]
    [signal] section_count_changed(old_count: i32, new_count: i32),
    /// 
    /// This signal is emitted when a section is double-clicked. The section's
    /// logical index is specified by *logicalIndex.*
    /// 
    /// **See also:** [`set_sections_clickable()`]
    [signal] section_handle_double_clicked(logical_index: i32),
    /// 
    /// Qt::SortOrder order)
    /// 
    /// This signal is emitted when the section containing the sort indicator or
    /// the order indicated is changed. The section's logical index is specified
    /// by *logicalIndex* and the sort order is specified by *order.*
    /// 
    /// **See also:** [`set_sort_indicator()`]
    [signal] sort_indicator_changed(logical_index: i32, order: Rute::SortOrder),
    update_section(logical_index: i32),
    /// 
    /// Resizes the sections according to the given *mode,* ignoring the current
    /// resize mode.
    /// 
    /// **See also:** [`resize_mode()`]
    /// [`section_resized()`]
    /// 
    /// Resizes the sections according to their size hints. Normally, you do not
    /// have to call this function.
    [org_name(resizeSections)]
    resize_sections_2(),
    /// 
    /// This slot is called when sections are inserted into the *parent.*
    /// *logicalFirst* and *logicalLast* indices signify where the new sections
    /// were inserted.
    /// 
    /// If only one section is inserted, *logicalFirst* and *logicalLast* will
    /// be the same.
    sections_inserted(parent: &ModelIndexType, logical_first: i32, logical_last: i32),
    /// 
    /// This slot is called when sections are removed from the *parent.*
    /// *logicalFirst* and *logicalLast* signify where the sections were removed.
    /// 
    /// If only one section is removed, *logicalFirst* and *logicalLast* will
    /// be the same.
    sections_about_to_be_removed(parent: &ModelIndexType, logical_first: i32, logical_last: i32),
    initialize(),
    initialize_sections(),
    [org_name(initializeSections)]
    initialize_sections_2(start: i32, end: i32),
    /// 
    [event] current_changed(current: &ModelIndexType, old: &ModelIndexType),
    /// 
    [event] event(e: *EventType) -> bool,
    /// 
    [event] paint_event(e: *PaintEventType),
    /// 
    [event] mouse_press_event(e: *MouseEventType),
    /// 
    [event] mouse_move_event(e: *MouseEventType),
    /// 
    [event] mouse_release_event(e: *MouseEventType),
    /// 
    [event] mouse_double_click_event(e: *MouseEventType),
    /// 
    [event] viewport_event(e: *EventType) -> bool,
    /// 
    /// Paints the section specified by the given *logicalIndex,* using the given
    /// *painter* and *rect.*
    /// 
    /// Normally, you do not have to call this function.
    [event] paint_section(painter: *PainterType, rect: &RectType, logical_index: i32),
    /// 
    /// Returns the size of the contents of the section specified by the given
    /// *logicalIndex.*
    /// 
    /// **See also:** [`default_section_size()`]
    [event] section_size_from_contents(logical_index: i32) -> Size,
    /// 
    /// Returns the horizontal offset of the header. This is 0 for vertical
    /// headers.
    /// 
    /// **See also:** [`offset()`]
    [event] horizontal_offset() -> i32,
    /// 
    /// Returns the vertical offset of the header. This is 0 for horizontal
    /// headers.
    /// 
    /// **See also:** [`offset()`]
    [event] vertical_offset() -> i32,
    [event] scroll_contents_by(dx: i32, dy: i32),
    [event] data_changed(top_left: &ModelIndexType, bottom_right: &ModelIndexType, roles: [i32]),
    [event] rows_inserted(parent: &ModelIndexType, start: i32, end: i32),
    [event] visual_rect(index: &ModelIndexType) -> Rect,
    [event] scroll_to(index: &ModelIndexType, hint: AbstractItemView::ScrollHint),
    [event] index_at(p: &PointType) -> ModelIndex,
    [event] is_index_hidden(index: &ModelIndexType) -> bool,
    [event] move_cursor(arg0: AbstractItemView::CursorAction, arg1: Rute::KeyboardModifiers) -> ModelIndex,
    /// 
    /// Selects the items in the given *rect* according to the specified
    /// *flags.*
    /// 
    /// The base class implementation does nothing.
    [event] set_selection(rect: &RectType, flags: ItemSelectionModel::SelectionFlags),
    [event] visual_region_for_selection(selection: &ItemSelectionType) -> Region,
    /// 
    /// Initialize *option* with the values from this QHeaderView. This method is
    /// useful for subclasses when they need a QStyleOptionHeader, but do not want
    /// to fill in all the information themselves.
    /// 
    /// **See also:** [`StyleOption::init_from`]
    init_style_option(option: *StyleOptionHeaderType),
}

[org_name(QHeaderView)]
enum ResizeMode {
    Interactive,
    Stretch,
    Fixed,
    ResizeToContents,
    Custom,
}

// vim: syntax=rust expandtab ts=4 sw=4
