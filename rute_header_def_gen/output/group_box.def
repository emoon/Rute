/// 
/// ![windows-groupbox.png](windows-groupbox.png)
/// 
/// A group box provides a frame, a title on top, a keyboard shortcut, and
/// displays various other widgets inside itself. The keyboard shortcut moves
/// keyboard focus to one of the group box's child widgets.
/// 
/// QGroupBox also lets you set the [title](title)
/// (normally set in the
/// constructor) and the title's [alignment.](alignment.)
/// Group boxes can be
/// [checkable.](checkable.)
/// Child widgets in checkable group boxes are enabled or
/// disabled depending on whether or not the group box is [checked.](checked.)
/// 
/// You can minimize the space consumption of a group box by enabling
/// the [flat](flat)
/// property. In most [styles](QStyle)
/// , enabling this
/// property results in the removal of the left, right and bottom
/// edges of the frame.
/// 
/// QGroupBox doesn't automatically lay out the child widgets (which
/// are often [QCheckBox](QCheckBox)
/// es or [QRadioButton](QRadioButton)
/// s but can be any
/// widgets). The following example shows how we can set up a
/// QGroupBox with a layout:
/// 
/// **See also:** [`ButtonGroup`]
/// {Group Box Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GroupBox : Widget {
    /// 
    /// The group box title text will have a keyboard shortcut if the title
    /// contains an ampersand ('&') followed by a letter.
    /// 
    /// In the example above, **Alt+U** moves the keyboard focus to the
    /// group box. See the [QShortcut](QShortcut%23mnemonic)
    /// 
    /// documentation for details (to display an actual ampersand, use
    /// '&&').
    /// 
    /// There is no default title text.
    /// 
    /// **See also:** alignment
    title() -> String,
    set_title(title: String),
    /// 
    /// Most styles place the title at the top of the frame. The horizontal
    /// alignment of the title can be specified using single values from
    /// the following list:
    /// 
    /// * Qt::AlignLeft aligns the title text with the left-hand side of the group box.
    /// * Qt::AlignRight aligns the title text with the right-hand side of the group box.
    /// * Qt::AlignHCenter aligns the title text with the horizontal center of the group box.
    /// 
    /// The default alignment is Qt::AlignLeft.
    /// 
    /// **See also:** [`t::alignment()`]
    alignment() -> Rute::Alignment,
    set_alignment(alignment: i32),
    /// 
    [event] minimum_size_hint() -> Size,
    is_flat() -> bool,
    set_flat(flat: bool),
    is_checkable() -> bool,
    set_checkable(checkable: bool),
    is_checked() -> bool,
    set_checked(checked: bool),
    /// 
    /// This signal is emitted when the check box is activated (i.e., pressed down
    /// then released while the mouse cursor is inside the button), or when the
    /// shortcut key is typed. Notably, this signal is *not* emitted if you call
    /// setChecked().
    /// 
    /// If the check box is checked, *checked* is true; it is false if the check
    /// box is unchecked.
    /// 
    /// **See also:** checkable
    /// [`toggled()`]
    /// checked
    [signal] clicked(checked: bool),
    /// 
    /// If the group box is checkable, this signal is emitted when the check box
    /// is toggled. *on* is true if the check box is checked; otherwise, it is false.
    /// 
    /// **See also:** checkable
    [signal] toggled(arg0: bool),
    /// 
    [event] event(event: *EventType) -> bool,
    /// 
    [event] child_event(event: *ChildEventType),
    /// 
    [event] resize_event(event: *ResizeEventType),
    /// 
    [event] paint_event(event: *PaintEventType),
    /// 
    [event] focus_in_event(event: *FocusEventType),
    /// 
    [event] change_event(event: *EventType),
    /// 
    [event] mouse_press_event(event: *MouseEventType),
    /// 
    [event] mouse_move_event(event: *MouseEventType),
    /// 
    [event] mouse_release_event(event: *MouseEventType),
    /// 
    /// Initialize *option* with the values from this QGroupBox. This method
    /// is useful for subclasses when they need a QStyleOptionGroupBox, but don't want
    /// to fill in all the information themselves.
    /// 
    /// **See also:** [`StyleOption::init_from`]
    init_style_option(option: *StyleOptionGroupBoxType),
}

// vim: syntax=rust expandtab ts=4 sw=4
