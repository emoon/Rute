/// 
/// QStaticText provides a way to cache layout data for a block of text so that it can be drawn
/// more efficiently than by using QPainter::drawText() in which the layout information is
/// recalculated with every call.
/// 
/// The class primarily provides an optimization for cases where the text, its font and the
/// transformations on the painter are static over several paint events. If the text or its layout
/// is changed for every iteration, QPainter::drawText() is the more efficient alternative, since
/// the static text's layout would have to be recalculated to take the new state into consideration.
/// 
/// Translating the painter will not cause the layout of the text to be recalculated, but will cause
/// a very small performance impact on drawStaticText(). Altering any other parts of the painter's
/// transformation or the painter's font will cause the layout of the static text to be
/// recalculated. This should be avoided as often as possible to maximize the performance
/// benefit of using QStaticText.
/// 
/// In addition, only affine transformations are supported by drawStaticText(). Calling
/// drawStaticText() on a projected painter will perform slightly worse than using the regular
/// drawText() call, so this should be avoided.
/// 
/// ```
/// class MyWidget: public QWidget
/// 
/// public:
/// MyWidget(QWidget *parent = 0) : QWidget(parent), m_staticText("This is static text")
/// 
/// protected:
/// void paintEvent(QPaintEvent *)
/// 
/// QPainter painter(this);
/// painter.drawStaticText(0, 0, m_staticText);
/// 
/// 
/// private:
/// QStaticText m_staticText;
/// };
/// ```
/// 
/// The QStaticText class can be used to mimic the behavior of QPainter::drawText() to a specific
/// point with no boundaries, and also when QPainter::drawText() is called with a bounding
/// rectangle.
/// 
/// If a bounding rectangle is not required, create a QStaticText object without setting a preferred
/// text width. The text will then occupy a single line.
/// 
/// If you set a text width on the QStaticText object, this will bound the text. The text will
/// be formatted so that no line exceeds the given width. The text width set for QStaticText will
/// not automatically be used for clipping. To achieve clipping in addition to line breaks, use
/// QPainter::setClipRect(). The position of the text is decided by the argument passed to
/// QPainter::drawStaticText() and can change from call to call with a minimal impact on
/// performance.
/// 
/// For extra convenience, it is possible to apply formatting to the text using the HTML subset
/// supported by QTextDocument. QStaticText will attempt to guess the format of the input text using
/// Qt::mightBeRichText(), and interpret it as rich text if this function returns `true.` To force
/// QStaticText to display its contents as either plain text or rich text, use the function
/// QStaticText::setTextFormat() and pass in, respectively, Qt::PlainText and Qt::RichText.
/// 
/// QStaticText can only represent text, so only HTML tags which alter the layout or appearance of
/// the text will be respected. Adding an image to the input HTML, for instance, will cause the
/// image to be included as part of the layout, affecting the positions of the text glyphs, but it
/// will not be displayed. The result will be an empty area the size of the image in the output.
/// Similarly, using tables will cause the text to be laid out in table format, but the borders
/// will not be drawn.
/// 
/// If it's the first time the static text is drawn, or if the static text, or the painter's font
/// has been altered since the last time it was drawn, the text's layout has to be
/// recalculated. On some paint engines, changing the matrix of the painter will also cause the
/// layout to be recalculated. In particular, this will happen for any engine except for the
/// OpenGL2 paint engine. Recalculating the layout will impose an overhead on the
/// QPainter::drawStaticText() call where it occurs. To avoid this overhead in the paint event, you
/// can call prepare() ahead of time to ensure that the layout is calculated.
/// 
/// **See also:** [`Painter::draw_text`]
/// [`Painter::draw_static_text`]
/// [`TextLayout`]
/// [`TextDocument`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct StaticText {
    /// 
    /// Swaps this static text instance with *other.* This function is
    /// very fast and never fails.
    swap(other: &StaticTextType),
    /// 
    /// Sets the text of the QStaticText to *text.*
    /// 
    /// **Note**: This function will cause the layout of the text to require recalculation.
    /// 
    /// **See also:** [`text()`]
    /// 
    /// Sets the text format of the QStaticText to *textFormat.* If *textFormat* is set to
    /// Qt::AutoText (the default), the format of the text will try to be determined using the
    /// function Qt::mightBeRichText(). If the text format is Qt::PlainText, then the text will be
    /// displayed as is, whereas it will be interpreted as HTML if the format is Qt::RichText. HTML tags
    /// that alter the font of the text, its color, or its layout are supported by QStaticText.
    /// 
    /// **Note**: This function will cause the layout of the text to require recalculation.
    /// 
    /// **See also:** [`text_format()`]
    /// [`set_text()`]
    /// [`text()`]
    /// 
    /// Sets the text option structure that controls the layout process to the given *textOption.*
    /// 
    /// **See also:** [`text_option()`]
    /// 
    /// Sets the preferred width for this QStaticText. If the text is wider than the specified width,
    /// it will be broken into multiple lines and grow vertically. If the text cannot be split into
    /// multiple lines, it will be larger than the specified *textWidth.*
    /// 
    /// Setting the preferred text width to a negative number will cause the text to be unbounded.
    /// 
    /// Use size() to get the actual size of the text.
    /// 
    /// **Note**: This function will cause the layout of the text to require recalculation.
    /// 
    /// **See also:** [`text_width()`]
    /// [`size()`]
    set_text(text: String),
    /// 
    /// Returns the text format of the QStaticText.
    /// 
    /// **See also:** [`set_text_format()`]
    /// [`set_text()`]
    /// [`text()`]
    /// 
    /// Returns the text of the QStaticText.
    /// 
    /// **See also:** [`set_text()`]
    /// 
    /// Returns the current text option used to control the layout process.
    /// 
    /// Returns the preferred width for this QStaticText.
    /// 
    /// **See also:** [`set_text_width()`]
    text() -> String,
    /// 
    /// Sets the text format of the QStaticText to *textFormat.* If *textFormat* is set to
    /// Qt::AutoText (the default), the format of the text will try to be determined using the
    /// function Qt::mightBeRichText(). If the text format is Qt::PlainText, then the text will be
    /// displayed as is, whereas it will be interpreted as HTML if the format is Qt::RichText. HTML tags
    /// that alter the font of the text, its color, or its layout are supported by QStaticText.
    /// 
    /// **Note**: This function will cause the layout of the text to require recalculation.
    /// 
    /// **See also:** [`text_format()`]
    /// [`set_text()`]
    /// [`text()`]
    set_text_format(text_format: Rute::TextFormat),
    /// 
    /// Returns the text format of the QStaticText.
    /// 
    /// **See also:** [`set_text_format()`]
    /// [`set_text()`]
    /// [`text()`]
    text_format() -> Rute::TextFormat,
    /// 
    /// Sets the preferred width for this QStaticText. If the text is wider than the specified width,
    /// it will be broken into multiple lines and grow vertically. If the text cannot be split into
    /// multiple lines, it will be larger than the specified *textWidth.*
    /// 
    /// Setting the preferred text width to a negative number will cause the text to be unbounded.
    /// 
    /// Use size() to get the actual size of the text.
    /// 
    /// **Note**: This function will cause the layout of the text to require recalculation.
    /// 
    /// **See also:** [`text_width()`]
    /// [`size()`]
    set_text_width(text_width: f32),
    /// 
    /// Returns the preferred width for this QStaticText.
    /// 
    /// **See also:** [`set_text_width()`]
    text_width() -> f32,
    /// 
    /// Sets the text option structure that controls the layout process to the given *textOption.*
    /// 
    /// **See also:** [`text_option()`]
    set_text_option(text_option: &TextOptionType),
    /// 
    /// Returns the current text option used to control the layout process.
    text_option() -> TextOption,
    /// 
    /// Returns the size of the bounding rect for this QStaticText.
    /// 
    /// **See also:** [`text_width()`]
    size() -> SizeF,
    /// 
    /// Prepares the QStaticText object for being painted with the given *matrix* and the given *font*
    /// to avoid overhead when the actual drawStaticText() call is made.
    /// 
    /// When drawStaticText() is called, the layout of the QStaticText will be recalculated if any part
    /// of the QStaticText object has changed since the last time it was drawn. It will also be
    /// recalculated if the painter's font is not the same as when the QStaticText was last drawn, or,
    /// on any other paint engine than the OpenGL2 engine, if the painter's matrix has been altered
    /// since the static text was last drawn.
    /// 
    /// To avoid the overhead of creating the layout the first time you draw the QStaticText after
    /// making changes, you can use the prepare() function and pass in the *matrix* and *font* you
    /// expect to use when drawing the text.
    /// 
    /// **See also:** [`Painter::set_font`]
    /// [`Painter::set_matrix`]
    prepare(matrix: &TransformType, font: &FontType),
    /// 
    /// Sets the performance hint of the QStaticText according to the *performanceHint* provided. The *performanceHint* is used to
    /// customize how much caching is done internally to improve
    /// performance.
    /// 
    /// The default is QStaticText::ModerateCaching.
    /// 
    /// **Note**: This function will cause the layout of the text to require recalculation.
    /// 
    /// **See also:** [`performance_hint()`]
    set_performance_hint(performance_hint: StaticText::PerformanceHint),
    /// 
    /// Returns which performance hint is set for the QStaticText.
    /// 
    /// **See also:** [`set_performance_hint()`]
    performance_hint() -> StaticText::PerformanceHint,
}

[org_name(QStaticText)]
enum PerformanceHint {
    ModerateCaching,
    AggressiveCaching,
}

// vim: syntax=rust expandtab ts=4 sw=4
