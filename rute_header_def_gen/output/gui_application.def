struct GuiApplication : CoreApplication {
    [static] set_application_display_name(name: String),
    [static] application_display_name() -> String,
    [static] set_desktop_file_name(name: String),
    [static] desktop_file_name() -> String,
    [static] all_windows() -> WindowList,
    [static] top_level_windows() -> WindowList,
    [static] top_level_at(pos: &PointType) -> Window?,
    [static] set_window_icon(icon: &IconType),
    [static] window_icon() -> Icon,
    [static] platform_name() -> String,
    [static] modal_window() -> Window?,
    [static] focus_window() -> Window?,
    [static] focus_object() -> Object?,
    [static] primary_screen() -> Screen?,
    [static] screens() -> [Screen?],
    [static] screen_at(point: &PointType) -> Screen?,
    device_pixel_ratio() -> f32,
    [static] override_cursor() -> Cursor?,
    [static] set_override_cursor(arg0: &CursorType),
    [static] change_override_cursor(arg0: &CursorType),
    [static] restore_override_cursor(),
    [static] font() -> Font,
    [static] set_font(arg0: &FontType),
    [static] clipboard() -> Clipboard?,
    [static] palette() -> Palette,
    [static] set_palette(pal: &PaletteType),
    [static] keyboard_modifiers() -> Rute::KeyboardModifiers,
    [static] query_keyboard_modifiers() -> Rute::KeyboardModifiers,
    [static] mouse_buttons() -> Rute::MouseButtons,
    [static] set_layout_direction(direction: Rute::LayoutDirection),
    [static] layout_direction() -> Rute::LayoutDirection,
    [static] is_right_to_left() -> bool,
    [static] is_left_to_right() -> bool,
    [static] style_hints() -> StyleHints?,
    [static] set_desktop_settings_aware(on: bool),
    [static] desktop_settings_aware() -> bool,
    [static] input_method() -> InputMethod?,
    [static] platform_native_interface() -> PlatformNativeInterface?,
    [static] platform_function(function: &ByteArrayType) -> FunctionPointer,
    [static] set_quit_on_last_window_closed(quit: bool),
    [static] quit_on_last_window_closed() -> bool,
    [static] application_state() -> Rute::ApplicationState,
    [static] exec() -> i32,
    [event] notify(arg0: *ObjectType, arg1: *EventType) -> bool,
    is_session_restored() -> bool,
    session_id() -> String,
    session_key() -> String,
    is_saving_session() -> bool,
    [static] is_fallback_session_management_enabled() -> bool,
    [static] set_fallback_session_management_enabled(arg0: bool),
    [static] sync(),
    [signal] font_database_changed(),
    [signal] screen_added(screen: *ScreenType),
    [signal] screen_removed(screen: *ScreenType),
    [signal] primary_screen_changed(screen: *ScreenType),
    [signal] last_window_closed(),
    [signal] focus_object_changed(focus_object: *ObjectType),
    [signal] focus_window_changed(focus_window: *WindowType),
    [signal] application_state_changed(state: Rute::ApplicationState),
    [signal] layout_direction_changed(direction: Rute::LayoutDirection),
    [signal] commit_data_request(session_manager: &SessionManagerType),
    [signal] save_state_request(session_manager: &SessionManagerType),
    [signal] palette_changed(pal: &PaletteType),
    [signal] application_display_name_changed(),
    [signal] font_changed(font: &FontType),
    [event] event(arg0: *EventType) -> bool,
    [event] compress_event(arg0: *EventType, receiver: *ObjectType, arg1: *PostEventListType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
