/// 
/// The purpose of a QMutex is to protect an object, data structure or
/// section of code so that only one thread can access it at a time
/// (this is similar to the Java `synchronized` keyword). It is
/// usually best to use a mutex with a QMutexLocker since this makes
/// it easy to ensure that locking and unlocking are performed
/// consistently.
/// 
/// For example, say there is a method that prints a message to the
/// user on two lines:
/// 
/// If these two methods are called in succession, the following happens:
/// 
/// If these two methods are called simultaneously from two threads then the
/// following sequence could result:
/// 
/// If we add a mutex, we should get the result we want:
/// 
/// Then only one thread can modify `number` at any given time and
/// the result is correct. This is a trivial example, of course, but
/// applies to any other case where things need to happen in a
/// particular sequence.
/// 
/// When you call lock() in a thread, other threads that try to call
/// lock() in the same place will block until the thread that got the
/// lock calls unlock(). A non-blocking alternative to lock() is
/// tryLock().
/// 
/// QMutex is optimized to be fast in the non-contended case. A non-recursive
/// QMutex will not allocate memory if there is no contention on that mutex.
/// It is constructed and destroyed with almost no overhead,
/// which means it is fine to have many mutexes as part of other classes.
/// 
/// **See also:** [`MutexLocker`]
/// [`ReadWriteLock`]
/// [`Semaphore`]
/// [`WaitCondition`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Mutex : BasicMutex {
    /// Locks the mutex. If another thread has locked the mutex then this
    /// call will block until that thread has unlocked it.
    /// 
    /// Calling this function multiple times on the same mutex from the
    /// same thread is allowed if this mutex is a
    /// [recursive mutex](QMutex::Recursive)
    /// . If this mutex is a
    /// [non-recursive mutex](QMutex::NonRecursive)
    /// , this function will
    /// *dead-lock* when the mutex is locked recursively.
    /// 
    /// **See also:** [`unlock()`]
    lock(),
    /// Unlocks the mutex. Attempting to unlock a mutex in a different
    /// thread to the one that locked it results in an error. Unlocking a
    /// mutex that is not locked results in undefined behavior.
    /// 
    /// **See also:** [`lock()`]
    unlock(),
    /// 
    /// Returns `true` if the mutex is recursive.
    is_recursive() -> bool,
}

[org_name(QMutex)]
enum RecursionMode {
    /// In this mode, a thread may only lock a mutex once.
    NonRecursive = 0,
    /// In this mode, a thread can lock the same mutex multiple times and the mutex won't be unlocked until a corresponding number of unlock() calls have been made.
    Recursive = 1,
}

// vim: syntax=rust expandtab ts=4 sw=4
