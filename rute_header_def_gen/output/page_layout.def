/// 
/// The QPageLayout class defines the layout of a page in a paged document, with the
/// page size, orientation and margins able to be set and the full page and paintable
/// page rectangles defined by those attributes able to be queried in a variety of units.
/// 
/// The page size is defined by the QPageSize class which can be queried for page size
/// attributes. Note that the QPageSize itself is always defined in a Portrait
/// orientation.
/// 
/// The minimum margins can be defined for the layout but normally default to 0.
/// When used in conjunction with Qt's printing support the minimum margins
/// will reflect the minimum printable area defined by the printer.
/// 
/// In the default StandardMode the current margins and minimum margins are
/// always taken into account. The paintable rectangle is the full page
/// rectangle less the current margins, and the current margins can only be set
/// to values between the minimum margins and the maximum margins allowed by
/// the full page size.
/// 
/// In FullPageMode the current margins and minimum margins are not taken
/// into account. The paintable rectangle is the full page rectangle, and the
/// current margins can be set to any values regardless of the minimum margins
/// and page size.
/// 
/// **See also:** [`PageSize`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct PageLayout {
    /// 
    /// Swaps this page layout with *other.* This function is very fast and
    /// never fails.
    swap(other: &PageLayoutType),
    /// 
    /// Returns `true` if this page layout is equivalent to the *other* page layout,
    /// i.e. if the page has the same size, margins and orientation.
    is_equivalent_to(other: &PageLayoutType) -> bool,
    /// 
    /// Returns `true` if this page layout is valid.
    is_valid() -> bool,
    /// 
    /// Sets a page layout mode to *mode.*
    set_mode(mode: PageLayout::Mode),
    /// 
    /// Returns the page layout mode.
    mode() -> PageLayout::Mode,
    /// 
    /// Sets the page size of the page layout to *pageSize.*
    /// 
    /// Optionally define the minimum allowed margins *minMargins,* e.g. the minimum
    /// margins able to be printed by a physical print device, otherwise the
    /// minimum margins will default to 0.
    /// 
    /// If StandardMode is set then the existing margins will be clamped
    /// to the new minimum margins and the maximum margins allowed by the page size.
    /// If FullPageMode is set then the existing margins will be unchanged.
    set_page_size(page_size: &PageSizeType, min_margins: &MarginsFType),
    /// 
    /// Returns the page size of the page layout.
    /// 
    /// Note that the QPageSize is always defined in a Portrait orientation. To
    /// obtain a size that takes the set orientation into account you must use
    /// fullRect().
    page_size() -> PageSize,
    /// 
    /// Sets the page orientation of the page layout to *orientation.*
    /// 
    /// Changing the orientation does not affect the current margins or
    /// the minimum margins.
    set_orientation(orientation: PageLayout::Orientation),
    /// 
    /// Returns the page orientation of the page layout.
    orientation() -> PageLayout::Orientation,
    /// 
    /// Sets the *units* used to define the page layout.
    set_units(units: PageLayout::Unit),
    /// 
    /// Returns the units the page layout is currently defined in.
    units() -> PageLayout::Unit,
    /// 
    /// Sets the page margins of the page layout to *margins*
    /// Returns true if the margins were successfully set.
    /// 
    /// The units used are those currently defined for the layout. To use different
    /// units then call setUnits() first.
    /// 
    /// If in the default StandardMode then all the new margins must fall between the
    /// minimum margins set and the maximum margins allowed by the page size,
    /// otherwise the margins will not be set.
    /// 
    /// If in FullPageMode then any margin values will be accepted.
    /// 
    /// **See also:** [`margins()`]
    /// [`units()`]
    set_margins(margins: &MarginsFType) -> bool,
    /// 
    /// Sets the left page margin of the page layout to *leftMargin.*
    /// Returns true if the margin was successfully set.
    /// 
    /// The units used are those currently defined for the layout. To use different
    /// units call setUnits() first.
    /// 
    /// If in the default StandardMode then the new margin must fall between the
    /// minimum margin set and the maximum margin allowed by the page size,
    /// otherwise the margin will not be set.
    /// 
    /// If in FullPageMode then any margin values will be accepted.
    /// 
    /// **See also:** [`set_margins()`]
    /// [`margins()`]
    set_left_margin(left_margin: f32) -> bool,
    /// 
    /// Sets the right page margin of the page layout to *rightMargin.*
    /// Returns true if the margin was successfully set.
    /// 
    /// The units used are those currently defined for the layout. To use different
    /// units call setUnits() first.
    /// 
    /// If in the default StandardMode then the new margin must fall between the
    /// minimum margin set and the maximum margin allowed by the page size,
    /// otherwise the margin will not be set.
    /// 
    /// If in FullPageMode then any margin values will be accepted.
    /// 
    /// **See also:** [`set_margins()`]
    /// [`margins()`]
    set_right_margin(right_margin: f32) -> bool,
    /// 
    /// Sets the top page margin of the page layout to *topMargin.*
    /// Returns true if the margin was successfully set.
    /// 
    /// The units used are those currently defined for the layout. To use different
    /// units call setUnits() first.
    /// 
    /// If in the default StandardMode then the new margin must fall between the
    /// minimum margin set and the maximum margin allowed by the page size,
    /// otherwise the margin will not be set.
    /// 
    /// If in FullPageMode then any margin values will be accepted.
    /// 
    /// **See also:** [`set_margins()`]
    /// [`margins()`]
    set_top_margin(top_margin: f32) -> bool,
    /// 
    /// Sets the bottom page margin of the page layout to *bottomMargin.*
    /// Returns true if the margin was successfully set.
    /// 
    /// The units used are those currently defined for the layout. To use different
    /// units call setUnits() first.
    /// 
    /// If in the default StandardMode then the new margin must fall between the
    /// minimum margin set and the maximum margin allowed by the page size,
    /// otherwise the margin will not be set.
    /// 
    /// If in FullPageMode then any margin values will be accepted.
    /// 
    /// **See also:** [`set_margins()`]
    /// [`margins()`]
    set_bottom_margin(bottom_margin: f32) -> bool,
    /// 
    /// Returns the margins of the page layout using the currently set units.
    /// 
    /// **See also:** [`set_margins()`]
    /// [`units()`]
    /// 
    /// Returns the margins of the page layout using the requested *units.*
    /// 
    /// **See also:** [`set_margins()`]
    /// [`margins()`]
    /// 
    /// Returns the margins of the page layout in Postscript Points (1/72 of an inch).
    /// 
    /// **See also:** [`set_margins()`]
    /// [`margins()`]
    /// 
    /// Returns the margins of the page layout in device pixels for the given *resolution.*
    /// 
    /// **See also:** [`set_margins()`]
    margins() -> MarginsF,
    /// 
    /// Returns the margins of the page layout using the currently set units.
    /// 
    /// **See also:** [`set_margins()`]
    /// [`units()`]
    /// 
    /// Returns the margins of the page layout using the requested *units.*
    /// 
    /// **See also:** [`set_margins()`]
    /// [`margins()`]
    /// 
    /// Returns the margins of the page layout in Postscript Points (1/72 of an inch).
    /// 
    /// **See also:** [`set_margins()`]
    /// [`margins()`]
    /// 
    /// Returns the margins of the page layout in device pixels for the given *resolution.*
    /// 
    /// **See also:** [`set_margins()`]
    [org_name(margins)]
    margins_2(units: PageLayout::Unit) -> MarginsF,
    /// 
    /// Returns the margins of the page layout in Postscript Points (1/72 of an inch).
    /// 
    /// **See also:** [`set_margins()`]
    /// [`margins()`]
    margins_points() -> Margins,
    /// 
    /// Returns the margins of the page layout in device pixels for the given *resolution.*
    /// 
    /// **See also:** [`set_margins()`]
    margins_pixels(resolution: i32) -> Margins,
    /// 
    /// Sets the minimum page margins of the page layout to *minMargins.*
    /// 
    /// It is not recommended to override the default values set for a page size
    /// as this may be the minimum printable area for a physical print device.
    /// 
    /// If the StandardMode mode is set then the existing margins will be clamped
    /// to the new *minMargins* and the maximum allowed by the page size. If the
    /// FullPageMode is set then the existing margins will be unchanged.
    /// 
    /// **See also:** [`minimum_margins()`]
    /// [`set_margins()`]
    set_minimum_margins(min_margins: &MarginsFType),
    /// 
    /// Returns the minimum margins of the page layout.
    /// 
    /// **See also:** [`set_minimum_margins()`]
    /// [`maximum_margins()`]
    minimum_margins() -> MarginsF,
    /// 
    /// Returns the maximum margins that would be applied if the page layout was
    /// in StandardMode.
    /// 
    /// The maximum margins allowed are calculated as the full size of the page
    /// minus the minimum margins set. For example, if the page width is 100 points
    /// and the minimum right margin is 10 points, then the maximum left margin
    /// will be 90 points.
    /// 
    /// **See also:** [`set_minimum_margins()`]
    /// [`minimum_margins()`]
    maximum_margins() -> MarginsF,
    /// 
    /// Returns the full page rectangle in the current layout units.
    /// 
    /// The page rectangle takes into account the page size and page orientation,
    /// but not the page margins.
    /// 
    /// **See also:** [`paint_rect()`]
    /// [`units()`]
    /// 
    /// Returns the full page rectangle in the required *units.*
    /// 
    /// The page rectangle takes into account the page size and page orientation,
    /// but not the page margins.
    /// 
    /// **See also:** [`paint_rect()`]
    /// 
    /// Returns the full page rectangle in Postscript Points (1/72 of an inch).
    /// 
    /// The page rectangle takes into account the page size and page orientation,
    /// but not the page margins.
    /// 
    /// **See also:** [`paint_rect()`]
    /// 
    /// Returns the full page rectangle in device pixels for the given *resolution.*
    /// 
    /// The page rectangle takes into account the page size and page orientation,
    /// but not the page margins.
    /// 
    /// **See also:** [`paint_rect()`]
    full_rect() -> RectF,
    /// 
    /// Returns the full page rectangle in the current layout units.
    /// 
    /// The page rectangle takes into account the page size and page orientation,
    /// but not the page margins.
    /// 
    /// **See also:** [`paint_rect()`]
    /// [`units()`]
    /// 
    /// Returns the full page rectangle in the required *units.*
    /// 
    /// The page rectangle takes into account the page size and page orientation,
    /// but not the page margins.
    /// 
    /// **See also:** [`paint_rect()`]
    /// 
    /// Returns the full page rectangle in Postscript Points (1/72 of an inch).
    /// 
    /// The page rectangle takes into account the page size and page orientation,
    /// but not the page margins.
    /// 
    /// **See also:** [`paint_rect()`]
    /// 
    /// Returns the full page rectangle in device pixels for the given *resolution.*
    /// 
    /// The page rectangle takes into account the page size and page orientation,
    /// but not the page margins.
    /// 
    /// **See also:** [`paint_rect()`]
    [org_name(fullRect)]
    full_rect_2(units: PageLayout::Unit) -> RectF,
    /// 
    /// Returns the full page rectangle in Postscript Points (1/72 of an inch).
    /// 
    /// The page rectangle takes into account the page size and page orientation,
    /// but not the page margins.
    /// 
    /// **See also:** [`paint_rect()`]
    full_rect_points() -> Rect,
    /// 
    /// Returns the full page rectangle in device pixels for the given *resolution.*
    /// 
    /// The page rectangle takes into account the page size and page orientation,
    /// but not the page margins.
    /// 
    /// **See also:** [`paint_rect()`]
    full_rect_pixels(resolution: i32) -> Rect,
    /// 
    /// Returns the page rectangle in the current layout units.
    /// 
    /// The paintable rectangle takes into account the page size, orientation
    /// and margins.
    /// 
    /// If the FullPageMode mode is set then the fullRect() is returned and
    /// the margins must be manually managed.
    /// 
    /// Returns the page rectangle in the required *units.*
    /// 
    /// The paintable rectangle takes into account the page size, orientation
    /// and margins.
    /// 
    /// If the FullPageMode mode is set then the fullRect() is returned and
    /// the margins must be manually managed.
    /// 
    /// Returns the paintable rectangle in rounded Postscript Points (1/72 of an inch).
    /// 
    /// The paintable rectangle takes into account the page size, orientation
    /// and margins.
    /// 
    /// If the FullPageMode mode is set then the fullRect() is returned and
    /// the margins must be manually managed.
    /// 
    /// Returns the paintable rectangle in rounded device pixels for the given *resolution.*
    /// 
    /// The paintable rectangle takes into account the page size, orientation
    /// and margins.
    /// 
    /// If the FullPageMode mode is set then the fullRect() is returned and
    /// the margins must be manually managed.
    paint_rect() -> RectF,
    /// 
    /// Returns the page rectangle in the current layout units.
    /// 
    /// The paintable rectangle takes into account the page size, orientation
    /// and margins.
    /// 
    /// If the FullPageMode mode is set then the fullRect() is returned and
    /// the margins must be manually managed.
    /// 
    /// Returns the page rectangle in the required *units.*
    /// 
    /// The paintable rectangle takes into account the page size, orientation
    /// and margins.
    /// 
    /// If the FullPageMode mode is set then the fullRect() is returned and
    /// the margins must be manually managed.
    /// 
    /// Returns the paintable rectangle in rounded Postscript Points (1/72 of an inch).
    /// 
    /// The paintable rectangle takes into account the page size, orientation
    /// and margins.
    /// 
    /// If the FullPageMode mode is set then the fullRect() is returned and
    /// the margins must be manually managed.
    /// 
    /// Returns the paintable rectangle in rounded device pixels for the given *resolution.*
    /// 
    /// The paintable rectangle takes into account the page size, orientation
    /// and margins.
    /// 
    /// If the FullPageMode mode is set then the fullRect() is returned and
    /// the margins must be manually managed.
    [org_name(paintRect)]
    paint_rect_2(units: PageLayout::Unit) -> RectF,
    /// 
    /// Returns the paintable rectangle in rounded Postscript Points (1/72 of an inch).
    /// 
    /// The paintable rectangle takes into account the page size, orientation
    /// and margins.
    /// 
    /// If the FullPageMode mode is set then the fullRect() is returned and
    /// the margins must be manually managed.
    paint_rect_points() -> Rect,
    /// 
    /// Returns the paintable rectangle in rounded device pixels for the given *resolution.*
    /// 
    /// The paintable rectangle takes into account the page size, orientation
    /// and margins.
    /// 
    /// If the FullPageMode mode is set then the fullRect() is returned and
    /// the margins must be manually managed.
    paint_rect_pixels(resolution: i32) -> Rect,
}

[org_name(QPageLayout)]
enum Unit {
    /// 
    Millimeter,
    /// 1/72th of an inch
    Point,
    /// 
    Inch,
    /// 1/72th of a foot, 1/6th of an inch, 12 Points
    Pica,
    /// 1/72th of a French inch, 0.375 mm
    Didot,
    /// 1/6th of a French inch, 12 Didot, 4.5mm
    Cicero,
}

[org_name(QPageLayout)]
enum Orientation {
    /// The page size is used in its default orientation
    Portrait,
    /// The page size is rotated through 90 degrees
    Landscape,
}

[org_name(QPageLayout)]
enum Mode {
    /// Paint Rect includes margins, margins must fall between the minimum and maximum.
    StandardMode,
    /// Paint Rect excludes margins, margins can be any value and must be managed manually.
    FullPageMode,
}

// vim: syntax=rust expandtab ts=4 sw=4
