///     \class QPageLayout
///     \inmodule QtGui
///     \since 5.3
///     \brief Describes the size, orientation and margins of a page.
/// 
///     The QPageLayout class defines the layout of a page in a paged document, with the
///     page size, orientation and margins able to be set and the full page and paintable
///     page rectangles defined by those attributes able to be queried in a variety of units.
/// 
///     The page size is defined by the QPageSize class which can be queried for page size
///     attributes.  Note that the QPageSize itself is always defined in a Portrait
///     orientation.
/// 
///     The minimum margins can be defined for the layout but normally default to 0.
///     When used in conjunction with Qt's printing support the minimum margins
///     will reflect the minimum printable area defined by the printer.
/// 
///     In the default StandardMode the current margins and minimum margins are
///     always taken into account.  The paintable rectangle is the full page
///     rectangle less the current margins, and the current margins can only be set
///     to values between the minimum margins and the maximum margins allowed by
///     the full page size.
/// 
///     In FullPageMode the current margins and minimum margins are not taken
///     into account. The paintable rectangle is the full page rectangle, and the
///     current margins can be set to any values regardless of the minimum margins
///     and page size.
/// 
///     \sa QPageSize
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QPageLayout)]
enum Unit {
    Millimeter,
    Point,
    Inch,
    Pica,
    Didot,
    Cicero,
}

[org_name(QPageLayout)]
enum Orientation {
    Portrait,
    Landscape,
}

[org_name(QPageLayout)]
enum Mode {
    StandardMode,
    FullPageMode,
}


struct PageLayout {
    swap(other: &PageLayoutType),
    ///     Returns \c true if this page layout is equivalent to the \a other page layout,
    ///     i.e. if the page has the same size, margins and orientation.
    is_equivalent_to(other: &PageLayoutType) -> bool,
    ///     Returns \c true if this page layout is valid.
    is_valid() -> bool,
    ///     Sets a page layout mode to \a mode.
    set_mode(mode: PageLayout::Mode),
    ///     Returns the page layout mode.
    mode() -> PageLayout::Mode,
    ///     Sets the page size of the page layout to \a pageSize.
    /// 
    ///     Optionally define the minimum allowed margins \a minMargins, e.g. the minimum
    ///     margins able to be printed by a physical print device, otherwise the
    ///     minimum margins will default to 0.
    /// 
    ///     If StandardMode is set then the existing margins will be clamped
    ///     to the new minimum margins and the maximum margins allowed by the page size.
    ///     If FullPageMode is set then the existing margins will be unchanged.
    set_page_size(page_size: &PageSizeType, min_margins: &MarginsFType),
    ///     Returns the page size of the page layout.
    /// 
    ///     Note that the QPageSize is always defined in a Portrait orientation.  To
    ///     obtain a size that takes the set orientation into account you must use
    ///     fullRect().
    page_size() -> PageSize,
    ///     Sets the page orientation of the page layout to \a orientation.
    /// 
    ///     Changing the orientation does not affect the current margins or
    ///     the minimum margins.
    set_orientation(orientation: PageLayout::Orientation),
    ///     Returns the page orientation of the page layout.
    orientation() -> PageLayout::Orientation,
    ///     Sets the \a units used to define the page layout.
    set_units(units: PageLayout::Unit),
    ///     Returns the units the page layout is currently defined in.
    units() -> PageLayout::Unit,
    ///     Sets the page margins of the page layout to \a margins
    ///     Returns true if the margins were successfully set.
    /// 
    ///     The units used are those currently defined for the layout.  To use different
    ///     units then call setUnits() first.
    /// 
    ///     If in the default StandardMode then all the new margins must fall between the
    ///     minimum margins set and the maximum margins allowed by the page size,
    ///     otherwise the margins will not be set.
    /// 
    ///     If in FullPageMode then any margin values will be accepted.
    /// 
    ///     \sa margins(), units()
    set_margins(margins: &MarginsFType) -> bool,
    ///     Sets the left page margin of the page layout to \a leftMargin.
    ///     Returns true if the margin was successfully set.
    /// 
    ///     The units used are those currently defined for the layout.  To use different
    ///     units call setUnits() first.
    /// 
    ///     If in the default StandardMode then the new margin must fall between the
    ///     minimum margin set and the maximum margin allowed by the page size,
    ///     otherwise the margin will not be set.
    /// 
    ///     If in FullPageMode then any margin values will be accepted.
    /// 
    ///     \sa setMargins(), margins()
    set_left_margin(left_margin: f32) -> bool,
    ///     Sets the right page margin of the page layout to \a rightMargin.
    ///     Returns true if the margin was successfully set.
    /// 
    ///     The units used are those currently defined for the layout.  To use different
    ///     units call setUnits() first.
    /// 
    ///     If in the default StandardMode then the new margin must fall between the
    ///     minimum margin set and the maximum margin allowed by the page size,
    ///     otherwise the margin will not be set.
    /// 
    ///     If in FullPageMode then any margin values will be accepted.
    /// 
    ///     \sa setMargins(), margins()
    set_right_margin(right_margin: f32) -> bool,
    ///     Sets the top page margin of the page layout to \a topMargin.
    ///     Returns true if the margin was successfully set.
    /// 
    ///     The units used are those currently defined for the layout.  To use different
    ///     units call setUnits() first.
    /// 
    ///     If in the default StandardMode then the new margin must fall between the
    ///     minimum margin set and the maximum margin allowed by the page size,
    ///     otherwise the margin will not be set.
    /// 
    ///     If in FullPageMode then any margin values will be accepted.
    /// 
    ///     \sa setMargins(), margins()
    set_top_margin(top_margin: f32) -> bool,
    ///     Sets the bottom page margin of the page layout to \a bottomMargin.
    ///     Returns true if the margin was successfully set.
    /// 
    ///     The units used are those currently defined for the layout.  To use different
    ///     units call setUnits() first.
    /// 
    ///     If in the default StandardMode then the new margin must fall between the
    ///     minimum margin set and the maximum margin allowed by the page size,
    ///     otherwise the margin will not be set.
    /// 
    ///     If in FullPageMode then any margin values will be accepted.
    /// 
    ///     \sa setMargins(), margins()
    set_bottom_margin(bottom_margin: f32) -> bool,
    ///     Returns the margins of the page layout using the requested \a units.
    /// 
    ///     \sa setMargins(), margins()
    margins() -> MarginsF,
    ///     Returns the margins of the page layout using the requested \a units.
    /// 
    ///     \sa setMargins(), margins()
    margins(units: PageLayout::Unit) -> MarginsF,
    ///     Returns the margins of the page layout in Postscript Points (1/72 of an inch).
    /// 
    ///     \sa setMargins(), margins()
    margins_points() -> Margins,
    ///     Returns the margins of the page layout in device pixels for the given \a resolution.
    /// 
    ///     \sa setMargins()
    margins_pixels(resolution: i32) -> Margins,
    ///     Sets the minimum page margins of the page layout to \a minMargins.
    /// 
    ///     It is not recommended to override the default values set for a page size
    ///     as this may be the minimum printable area for a physical print device.
    /// 
    ///     If the StandardMode mode is set then the existing margins will be clamped
    ///     to the new \a minMargins and the maximum allowed by the page size.  If the
    ///     FullPageMode is set then the existing margins will be unchanged.
    /// 
    ///     \sa minimumMargins(), setMargins()
    set_minimum_margins(min_margins: &MarginsFType),
    ///     Returns the minimum margins of the page layout.
    /// 
    ///     \sa setMinimumMargins(), maximumMargins()
    minimum_margins() -> MarginsF,
    ///     Returns the maximum margins that would be applied if the page layout was
    ///     in StandardMode.
    /// 
    ///     The maximum margins allowed are calculated as the full size of the page
    ///     minus the minimum margins set. For example, if the page width is 100 points
    ///     and the minimum right margin is 10 points, then the maximum left margin
    ///     will be 90 points.
    /// 
    ///     \sa setMinimumMargins(), minimumMargins()
    maximum_margins() -> MarginsF,
    ///     Returns the full page rectangle in the required \a units.
    /// 
    ///     The page rectangle takes into account the page size and page orientation,
    ///     but not the page margins.
    /// 
    ///     \sa paintRect()
    full_rect() -> RectF,
    ///     Returns the full page rectangle in the required \a units.
    /// 
    ///     The page rectangle takes into account the page size and page orientation,
    ///     but not the page margins.
    /// 
    ///     \sa paintRect()
    full_rect(units: PageLayout::Unit) -> RectF,
    ///     Returns the full page rectangle in Postscript Points (1/72 of an inch).
    /// 
    ///     The page rectangle takes into account the page size and page orientation,
    ///     but not the page margins.
    /// 
    ///     \sa paintRect()
    full_rect_points() -> Rect,
    ///     Returns the full page rectangle in device pixels for the given \a resolution.
    /// 
    ///     The page rectangle takes into account the page size and page orientation,
    ///     but not the page margins.
    /// 
    ///     \sa paintRect()
    full_rect_pixels(resolution: i32) -> Rect,
    ///     Returns the page rectangle in the required \a units.
    /// 
    ///     The paintable rectangle takes into account the page size, orientation
    ///     and margins.
    /// 
    ///     If the FullPageMode mode is set then the fullRect() is returned and
    ///     the margins must be manually managed.
    paint_rect() -> RectF,
    ///     Returns the page rectangle in the required \a units.
    /// 
    ///     The paintable rectangle takes into account the page size, orientation
    ///     and margins.
    /// 
    ///     If the FullPageMode mode is set then the fullRect() is returned and
    ///     the margins must be manually managed.
    paint_rect(units: PageLayout::Unit) -> RectF,
    ///     Returns the paintable rectangle in rounded Postscript Points (1/72 of an inch).
    /// 
    ///     The paintable rectangle takes into account the page size, orientation
    ///     and margins.
    /// 
    ///     If the FullPageMode mode is set then the fullRect() is returned and
    ///     the margins must be manually managed.
    paint_rect_points() -> Rect,
    ///     Returns the paintable rectangle in rounded device pixels for the given \a resolution.
    /// 
    ///     The paintable rectangle takes into account the page size, orientation
    ///     and margins.
    /// 
    ///     If the FullPageMode mode is set then the fullRect() is returned and
    ///     the margins must be manually managed.
    paint_rect_pixels(resolution: i32) -> Rect,
}

// vim: syntax=rust expandtab ts=4 sw=4
