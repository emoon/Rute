///     \class QSpacerItem
///     \ingroup geomanagement
///     \brief The QSpacerItem class provides blank space in a layout.
/// 
///     \inmodule QtWidgets
/// 
///     Normally, you don't need to use this class directly. Qt's
///     built-in layout managers provide the following functions for
///     manipulating empty space in layouts:
/// 
///     \table
///     \header \li Class
///             \li Functions
///     \row    \li QHBoxLayout
///             \li \l{QBoxLayout::addSpacing()}{addSpacing()},
///                \l{QBoxLayout::addStretch()}{addStretch()},
///                \l{QBoxLayout::insertSpacing()}{insertSpacing()},
///                \l{QBoxLayout::insertStretch()}{insertStretch()}
///     \row    \li QGridLayout
///             \li \l{QGridLayout::setRowMinimumHeight()}{setRowMinimumHeight()},
///                \l{QGridLayout::setRowStretch()}{setRowStretch()},
///                \l{QGridLayout::setColumnMinimumWidth()}{setColumnMinimumWidth()},
///                \l{QGridLayout::setColumnStretch()}{setColumnStretch()}
///     \endtable
/// 
///     \sa QLayout, QWidgetItem, QLayoutItem::spacerItem()
struct SpacerItem : LayoutItem {
    change_size(w: i32, h: i32, h_data: SizePolicy::Policy, v_data: SizePolicy::Policy),
    ///     \reimp
    [event] size_hint() -> Size,
    ///     \reimp
    [event] minimum_size() -> Size,
    ///     \reimp
    [event] maximum_size() -> Size,
    ///     \reimp
    [event] expanding_directions() -> Rute::Orientations,
    ///     Returns \c true.
    [event] is_empty() -> bool,
    ///     Returns a pointer to this object.
    [event] spacer_item() -> SpacerItem?,
    size_policy() -> SizePolicy,
}

// vim: syntax=rust expandtab ts=4 sw=4
