[org_name(QPaintEngine)]
enum PaintEngineFeature {
    PrimitiveTransform,
    PatternTransform,
    PixmapTransform,
    PatternBrush,
    LinearGradientFill,
    RadialGradientFill,
    ConicalGradientFill,
    AlphaBlend,
    PorterDuff,
    PainterPaths,
    Antialiasing,
    BrushStroke,
    ConstantOpacity,
    MaskedBrush,
    PerspectiveTransform,
    BlendModes,
    ObjectBoundingModeGradients,
    RasterOpModes,
    PaintOutsidePaintEvent,
    AllFeatures,
}

[org_name(QPaintEngine)]
enum DirtyFlag {
    DirtyPen,
    DirtyBrush,
    DirtyBrushOrigin,
    DirtyFont,
    DirtyBackground,
    DirtyBackgroundMode,
    DirtyTransform,
    DirtyClipRegion,
    DirtyClipPath,
    DirtyHints,
    DirtyCompositionMode,
    DirtyClipEnabled,
    DirtyOpacity,
    AllDirty,
}

[org_name(QPaintEngine)]
enum PolygonDrawMode {
    OddEvenMode,
    WindingMode,
    ConvexMode,
    PolylineMode,
}

[org_name(QPaintEngine)]
enum Type {
    X11,
    Windows,
    QuickDraw,
    CoreGraphics,
    MacPrinter,
    QWindowSystem,
    PostScript,
    OpenGL,
    Picture,
    SVG,
    Raster,
    Direct3D,
    Pdf,
    OpenVG,
    OpenGL2,
    PaintBuffer,
    Blitter,
    Direct2D,
    User,
    MaxUser,
}


struct PaintEngine {
    is_active() -> bool,
    set_active(new_state: bool),
    [replace] begin(pdev: *PaintDeviceType) -> bool,
    [replace] end() -> bool,
    [replace] update_state(state: &PaintEngineStateType),
    [replace] draw_rects(rects: *RectType, rect_count: i32),
    [replace] draw_rects(rects: *RectFType, rect_count: i32),
    [replace] draw_lines(lines: *LineType, line_count: i32),
    [replace] draw_lines(lines: *LineFType, line_count: i32),
    [replace] draw_ellipse(r: &RectFType),
    [replace] draw_ellipse(r: &RectType),
    [replace] draw_path(path: &PainterPathType),
    [replace] draw_points(points: *PointFType, point_count: i32),
    [replace] draw_points(points: *PointType, point_count: i32),
    [replace] draw_polygon(points: *PointFType, point_count: i32, mode: PaintEngine::PolygonDrawMode),
    [replace] draw_polygon(points: *PointType, point_count: i32, mode: PaintEngine::PolygonDrawMode),
    [replace] draw_pixmap(r: &RectFType, pm: &PixmapType, sr: &RectFType),
    [replace] draw_text_item(p: &PointFType, text_item: &TextItemType),
    [replace] draw_tiled_pixmap(r: &RectFType, pixmap: &PixmapType, s: &PointFType),
    [replace] draw_image(r: &RectFType, pm: &ImageType, sr: &RectFType, flags: Rute::ImageConversionFlags),
    set_paint_device(device: *PaintDeviceType),
    paint_device() -> PaintDevice?,
    set_system_clip(base_clip: &RegionType),
    system_clip() -> Region,
    set_system_rect(rect: &RectType),
    system_rect() -> Rect,
    [replace] coordinate_offset() -> Point,
    [replace] type() -> PaintEngine::Type,
    fix_neg_rect(x: *i32, y: *i32, w: *i32, h: *i32),
    test_dirty(df: DirtyFlags) -> bool,
    set_dirty(df: DirtyFlags),
    clear_dirty(df: DirtyFlags),
    has_feature(feature: PaintEngineFeatures) -> bool,
    painter() -> Painter?,
    sync_state(),
    is_extended() -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
