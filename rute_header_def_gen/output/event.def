/// 
/// Qt's main event loop (QCoreApplication::exec()) fetches native
/// window system events from the event queue, translates them into
/// QEvents, and sends the translated events to [QObject](QObject)
/// s.
/// 
/// In general, events come from the underlying window system
/// (spontaneous() returns `true),` but it is also possible to manually
/// send events using QCoreApplication::sendEvent() and
/// QCoreApplication::postEvent() (spontaneous() returns `false).`
/// 
/// [QObjects](QObject)
/// receive events by having their QObject::event() function
/// called. The function can be reimplemented in subclasses to
/// customize event handling and add additional event types;
/// QWidget::event() is a notable example. By default, events are
/// dispatched to event handlers like QObject::timerEvent() and
/// QWidget::mouseMoveEvent(). QObject::installEventFilter() allows an
/// object to intercept events destined for another object.
/// 
/// The basic QEvent contains only an event type parameter and an
/// flag. The accept flag set with accept(), and cleared
/// with ignore(). It is set by default, but don't rely on this as
/// subclasses may choose to clear it in their constructor.
/// 
/// Subclasses of QEvent contain additional parameters that describe
/// the particular event.
/// 
/// **See also:** [`Object::event`]
/// [`Object::install_event_filter`]
/// [`CoreApplication::send_event`]
/// [`CoreApplication::post_event`]
/// [`CoreApplication::process_events`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Event {
    qt_check_for_qgadget_macro(),
    /// 
    /// Returns the event type.
    type() -> Event::Type,
    /// 
    /// Returns `true` if the event originated outside the application (a
    /// system event); otherwise returns `false.`
    /// 
    /// The return value of this function is not defined for paint events.
    spontaneous() -> bool,
    set_accepted(accepted: bool),
    is_accepted() -> bool,
    /// 
    /// the accept flag of the event object
    /// 
    /// Setting the accept parameter indicates that the event receiver
    /// wants the event. Unwanted events might be propagated to the parent
    /// widget. By default, isAccepted() is set to true, but don't rely on
    /// this as subclasses may choose to clear it in their constructor.
    /// 
    /// For convenience, the accept flag can also be set with accept(),
    /// and cleared with ignore().
    /// 
    /// Sets the accept flag of the event object, the equivalent of
    /// calling setAccepted(true).
    /// 
    /// Setting the accept parameter indicates that the event receiver
    /// wants the event. Unwanted events might be propagated to the parent
    /// widget.
    /// 
    /// **See also:** [`ignore()`]
    accept(),
    /// 
    /// Clears the accept flag parameter of the event object, the
    /// equivalent of calling setAccepted(false).
    /// 
    /// Clearing the accept parameter indicates that the event receiver
    /// does not want the event. Unwanted events might be propagated to the
    /// parent widget.
    /// 
    /// **See also:** [`accept()`]
    ignore(),
    /// 
    /// Registers and returns a custom event type. The *hint* provided
    /// will be used if it is available, otherwise it will return a value
    /// between QEvent::User and QEvent::MaxUser that has not yet been
    /// registered. The *hint* is ignored if its value is not between
    /// QEvent::User and QEvent::MaxUser.
    /// 
    /// Returns -1 if all available values are already taken or the
    /// program is shutting down.
    [static] register_event_type(hint: i32) -> i32,
}

[org_name(QEvent)]
enum Type {
    None,
    Timer,
    MouseButtonPress,
    MouseButtonRelease,
    MouseButtonDblClick,
    MouseMove,
    KeyPress,
    KeyRelease,
    FocusIn,
    FocusOut,
    FocusAboutToChange,
    Enter,
    Leave,
    Paint,
    Move,
    Resize,
    Create,
    Destroy,
    Show,
    Hide,
    Close,
    Quit,
    ParentChange,
    ParentAboutToChange,
    ThreadChange,
    WindowActivate,
    WindowDeactivate,
    ShowToParent,
    HideToParent,
    Wheel,
    WindowTitleChange,
    WindowIconChange,
    ApplicationWindowIconChange,
    ApplicationFontChange,
    ApplicationLayoutDirectionChange,
    ApplicationPaletteChange,
    PaletteChange,
    Clipboard,
    Speech,
    MetaCall,
    SockAct,
    WinEventAct,
    DeferredDelete,
    DragEnter,
    DragMove,
    DragLeave,
    Drop,
    DragResponse,
    ChildAdded,
    ChildPolished,
    ChildRemoved,
    ShowWindowRequest,
    PolishRequest,
    Polish,
    LayoutRequest,
    UpdateRequest,
    UpdateLater,
    EmbeddingControl,
    ActivateControl,
    DeactivateControl,
    ContextMenu,
    InputMethod,
    TabletMove,
    LocaleChange,
    LanguageChange,
    LayoutDirectionChange,
    Style,
    TabletPress,
    TabletRelease,
    OkRequest,
    HelpRequest,
    IconDrag,
    FontChange,
    EnabledChange,
    ActivationChange,
    StyleChange,
    IconTextChange,
    ModifiedChange,
    MouseTrackingChange,
    WindowBlocked,
    WindowUnblocked,
    WindowStateChange,
    ReadOnlyChange,
    ToolTip,
    WhatsThis,
    StatusTip,
    ActionChanged,
    ActionAdded,
    ActionRemoved,
    FileOpen,
    Shortcut,
    ShortcutOverride,
    WhatsThisClicked,
    ToolBarChange,
    ApplicationActivate,
    ApplicationActivated,
    ApplicationDeactivate,
    ApplicationDeactivated,
    QueryWhatsThis,
    EnterWhatsThisMode,
    LeaveWhatsThisMode,
    ZOrderChange,
    HoverEnter,
    HoverLeave,
    HoverMove,
    AcceptDropsChange,
    ZeroTimerEvent,
    GraphicsSceneMouseMove,
    GraphicsSceneMousePress,
    GraphicsSceneMouseRelease,
    GraphicsSceneMouseDoubleClick,
    GraphicsSceneContextMenu,
    GraphicsSceneHoverEnter,
    GraphicsSceneHoverMove,
    GraphicsSceneHoverLeave,
    GraphicsSceneHelp,
    GraphicsSceneDragEnter,
    GraphicsSceneDragMove,
    GraphicsSceneDragLeave,
    GraphicsSceneDrop,
    GraphicsSceneWheel,
    KeyboardLayoutChange,
    DynamicPropertyChange,
    TabletEnterProximity,
    TabletLeaveProximity,
    NonClientAreaMouseMove,
    NonClientAreaMouseButtonPress,
    NonClientAreaMouseButtonRelease,
    NonClientAreaMouseButtonDblClick,
    MacSizeChange,
    ContentsRectChange,
    MacGLWindowChange,
    FutureCallOut,
    GraphicsSceneResize,
    GraphicsSceneMove,
    CursorChange,
    ToolTipChange,
    NetworkReplyUpdated,
    GrabMouse,
    UngrabMouse,
    GrabKeyboard,
    UngrabKeyboard,
    MacGLClearDrawable,
    StateMachineSignal,
    StateMachineWrapped,
    TouchBegin,
    TouchUpdate,
    TouchEnd,
    NativeGesture,
    RequestSoftwareInputPanel,
    CloseSoftwareInputPanel,
    WinIdChange,
    Gesture,
    GestureOverride,
    ScrollPrepare,
    Scroll,
    Expose,
    InputMethodQuery,
    OrientationChange,
    TouchCancel,
    ThemeChange,
    SockClose,
    PlatformPanel,
    StyleAnimationUpdate,
    ApplicationStateChange,
    WindowChangeInternal,
    ScreenChangeInternal,
    PlatformSurface,
    Pointer,
    TabletTrackingChange,
    User,
    MaxUser,
}

// vim: syntax=rust expandtab ts=4 sw=4
