/// 
/// Qt's main event loop (QCoreApplication::exec()) fetches native
/// window system events from the event queue, translates them into
/// QEvents, and sends the translated events to [QObject](QObject)
/// s.
/// 
/// In general, events come from the underlying window system
/// (spontaneous() returns `true),` but it is also possible to manually
/// send events using QCoreApplication::sendEvent() and
/// QCoreApplication::postEvent() (spontaneous() returns `false).`
/// 
/// [QObjects](QObject)
/// receive events by having their QObject::event() function
/// called. The function can be reimplemented in subclasses to
/// customize event handling and add additional event types;
/// QWidget::event() is a notable example. By default, events are
/// dispatched to event handlers like QObject::timerEvent() and
/// QWidget::mouseMoveEvent(). QObject::installEventFilter() allows an
/// object to intercept events destined for another object.
/// 
/// The basic QEvent contains only an event type parameter and an
/// flag. The accept flag set with accept(), and cleared
/// with ignore(). It is set by default, but don't rely on this as
/// subclasses may choose to clear it in their constructor.
/// 
/// Subclasses of QEvent contain additional parameters that describe
/// the particular event.
/// 
/// **See also:** [`Object::event`]
/// [`Object::install_event_filter`]
/// [`CoreApplication::send_event`]
/// [`CoreApplication::post_event`]
/// [`CoreApplication::process_events`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Event {
    qt_check_for_qgadget_macro(),
    /// 
    /// Returns the event type.
    type() -> Event::Type,
    /// 
    /// Returns `true` if the event originated outside the application (a
    /// system event); otherwise returns `false.`
    /// 
    /// The return value of this function is not defined for paint events.
    spontaneous() -> bool,
    set_accepted(accepted: bool),
    is_accepted() -> bool,
    /// 
    /// the accept flag of the event object
    /// 
    /// Setting the accept parameter indicates that the event receiver
    /// wants the event. Unwanted events might be propagated to the parent
    /// widget. By default, isAccepted() is set to true, but don't rely on
    /// this as subclasses may choose to clear it in their constructor.
    /// 
    /// For convenience, the accept flag can also be set with accept(),
    /// and cleared with ignore().
    /// 
    /// Sets the accept flag of the event object, the equivalent of
    /// calling setAccepted(true).
    /// 
    /// Setting the accept parameter indicates that the event receiver
    /// wants the event. Unwanted events might be propagated to the parent
    /// widget.
    /// 
    /// **See also:** [`ignore()`]
    accept(),
    /// 
    /// Clears the accept flag parameter of the event object, the
    /// equivalent of calling setAccepted(false).
    /// 
    /// Clearing the accept parameter indicates that the event receiver
    /// does not want the event. Unwanted events might be propagated to the
    /// parent widget.
    /// 
    /// **See also:** [`accept()`]
    ignore(),
    /// 
    /// Registers and returns a custom event type. The *hint* provided
    /// will be used if it is available, otherwise it will return a value
    /// between QEvent::User and QEvent::MaxUser that has not yet been
    /// registered. The *hint* is ignored if its value is not between
    /// QEvent::User and QEvent::MaxUser.
    /// 
    /// Returns -1 if all available values are already taken or the
    /// program is shutting down.
    [static] register_event_type(hint: i32) -> i32,
}

[org_name(QEvent)]
enum Type {
    /// Not an event.
    None = 0,
    /// Regular timer events (QTimerEvent).
    Timer = 1,
    /// Mouse press (QMouseEvent).
    MouseButtonPress = 2,
    /// Mouse release (QMouseEvent).
    MouseButtonRelease = 3,
    /// Mouse press again (QMouseEvent).
    MouseButtonDblClick = 4,
    /// Mouse move (QMouseEvent).
    MouseMove = 5,
    /// Key press (QKeyEvent).
    KeyPress = 6,
    /// Key release (QKeyEvent).
    KeyRelease = 7,
    /// Widget or Window gains keyboard focus (QFocusEvent).
    FocusIn = 8,
    /// Widget or Window loses keyboard focus (QFocusEvent).
    FocusOut = 9,
    /// Widget or Window focus is about to change (QFocusEvent)
    FocusAboutToChange = 23,
    /// Mouse enters widget's boundaries (QEnterEvent).
    Enter = 10,
    /// Mouse leaves widget's boundaries.
    Leave = 11,
    /// Screen update necessary (QPaintEvent).
    Paint = 12,
    /// Widget's position changed (QMoveEvent).
    Move = 13,
    /// Widget's size changed (QResizeEvent).
    Resize = 14,
    Create = 15,
    Destroy = 16,
    /// Widget was shown on screen (QShowEvent).
    Show = 17,
    /// Widget was hidden (QHideEvent).
    Hide = 18,
    /// Widget was closed (QCloseEvent).
    Close = 19,
    Quit = 20,
    /// The widget parent has changed.
    ParentChange = 21,
    /// The widget parent is about to change.
    ParentAboutToChange = 131,
    /// The object is moved to another thread. This is the last event sent to this object in the previous thread. See QObject::moveToThread().
    ThreadChange = 22,
    /// Window was activated.
    WindowActivate = 24,
    /// Window was deactivated.
    WindowDeactivate = 25,
    /// A child widget has been shown.
    ShowToParent = 26,
    /// A child widget has been hidden.
    HideToParent = 27,
    /// Mouse wheel rolled (QWheelEvent).
    Wheel = 31,
    /// The window title has changed.
    WindowTitleChange = 33,
    /// The window's icon has changed.
    WindowIconChange = 34,
    /// The application's icon has changed.
    ApplicationWindowIconChange = 35,
    /// The default application font has changed.
    ApplicationFontChange = 36,
    /// The default application layout direction has changed.
    ApplicationLayoutDirectionChange = 37,
    /// The default application palette has changed.
    ApplicationPaletteChange = 38,
    /// Palette of the widget changed.
    PaletteChange = 39,
    /// The clipboard contents have changed.
    Clipboard = 40,
    Speech = 42,
    /// An asynchronous method invocation via QMetaObject::invokeMethod().
    MetaCall = 43,
    /// Socket activated, used to implement QSocketNotifier.
    SockAct = 50,
    /// A Windows-specific activation event has occurred.
    WinEventAct = 132,
    /// The object will be deleted after it has cleaned up (QDeferredDeleteEvent)
    DeferredDelete = 52,
    /// The cursor enters a widget during a drag and drop operation (QDragEnterEvent).
    DragEnter = 60,
    /// A drag and drop operation is in progress (QDragMoveEvent).
    DragMove = 61,
    /// The cursor leaves a widget during a drag and drop operation (QDragLeaveEvent).
    DragLeave = 62,
    /// A drag and drop operation is completed (QDropEvent).
    Drop = 63,
    DragResponse = 64,
    /// An object gets a child (QChildEvent).
    ChildAdded = 68,
    /// A widget child gets polished (QChildEvent).
    ChildPolished = 69,
    /// An object loses a child (QChildEvent).
    ChildRemoved = 71,
    ShowWindowRequest = 73,
    /// The widget should be polished.
    PolishRequest = 74,
    /// The widget is polished.
    Polish = 75,
    /// Widget layout needs to be redone.
    LayoutRequest = 76,
    /// The widget should be repainted.
    UpdateRequest = 77,
    /// The widget should be queued to be repainted at a later time.
    UpdateLater = 78,
    EmbeddingControl = 79,
    ActivateControl = 80,
    DeactivateControl = 81,
    /// Context popup menu (QContextMenuEvent).
    ContextMenu = 82,
    /// An input method is being used (QInputMethodEvent).
    InputMethod = 83,
    /// Wacom tablet move (QTabletEvent).
    TabletMove = 87,
    /// The system locale has changed.
    LocaleChange = 88,
    /// The application translation changed.
    LanguageChange = 89,
    /// The direction of layouts changed.
    LayoutDirectionChange = 90,
    Style = 91,
    /// Wacom tablet press (QTabletEvent).
    TabletPress = 92,
    /// Wacom tablet release (QTabletEvent).
    TabletRelease = 93,
    OkRequest = 94,
    HelpRequest = 95,
    /// The main icon of a window has been dragged away (QIconDragEvent).
    IconDrag = 96,
    /// Widget's font has changed.
    FontChange = 97,
    /// Widget's enabled state has changed.
    EnabledChange = 98,
    /// A widget's top-level window activation state has changed.
    ActivationChange = 99,
    /// Widget's style has been changed.
    StyleChange = 100,
    /// Widget's icon text has been changed. (Deprecated)
    IconTextChange = 101,
    /// Widgets modification state has been changed.
    ModifiedChange = 102,
    /// The mouse tracking state has changed.
    MouseTrackingChange = 109,
    /// The window is blocked by a modal dialog.
    WindowBlocked = 103,
    /// The window is unblocked after a modal dialog exited.
    WindowUnblocked = 104,
    /// The [window's state](QWindow::windowState())
 (minimized, maximized or full-screen) has changed (QWindowStateChangeEvent).
    WindowStateChange = 105,
    /// Widget's read-only state has changed (since Qt 5.4).
    ReadOnlyChange = 106,
    /// A tooltip was requested (QHelpEvent).
    ToolTip = 110,
    /// The widget should reveal "What's This?" help (QHelpEvent).
    WhatsThis = 111,
    /// A status tip is requested (QStatusTipEvent).
    StatusTip = 112,
    /// An action has been changed (QActionEvent).
    ActionChanged = 113,
    /// A new action has been added (QActionEvent).
    ActionAdded = 114,
    /// An action has been removed (QActionEvent).
    ActionRemoved = 115,
    /// File open request (QFileOpenEvent).
    FileOpen = 116,
    /// Key press in child for shortcut key handling (QShortcutEvent).
    Shortcut = 117,
    /// Key press in child, for overriding shortcut key handling (QKeyEvent). When a shortcut is about to trigger, `ShortcutOverride` is sent to the active window. This allows clients (e.g. widgets) to signal that they will handle the shortcut themselves, by accepting the event. If the shortcut override is accepted, the event is delivered as a normal key press to the focus widget. Otherwise, it triggers the shortcut action, if one exists.
    ShortcutOverride = 51,
    /// A link in a widget's "What's This?" help was clicked.
    WhatsThisClicked = 118,
    /// The toolbar button is toggled on MacOS .
    ToolBarChange = 120,
    /// This enum has been deprecated. Use ApplicationStateChange instead.
    ApplicationActivate = 121,
    /// This enum has been deprecated. Use ApplicationStateChange instead.
    ApplicationActivated = 121,
    /// This enum has been deprecated. Use ApplicationStateChange instead.
    ApplicationDeactivate = 122,
    ApplicationDeactivated = 122,
    /// The widget should accept the event if it has "What's This?" help (QHelpEvent).
    QueryWhatsThis = 123,
    /// Send to toplevel widgets when the application enters "What's This?" mode.
    EnterWhatsThisMode = 124,
    /// Send to toplevel widgets when the application leaves "What's This?" mode.
    LeaveWhatsThisMode = 125,
    /// The widget's z-order has changed. This event is never sent to top level windows. User events should have values between `User` and `MaxUser` :
    ZOrderChange = 126,
    /// The mouse cursor enters a hover widget (QHoverEvent).
    HoverEnter = 127,
    /// The mouse cursor leaves a hover widget (QHoverEvent).
    HoverLeave = 128,
    /// The mouse cursor moves inside a hover widget (QHoverEvent).
    HoverMove = 129,
    AcceptDropsChange = 152,
    ZeroTimerEvent = 154,
    /// Move mouse in a graphics scene (QGraphicsSceneMouseEvent).
    GraphicsSceneMouseMove = 155,
    /// Mouse press in a graphics scene (QGraphicsSceneMouseEvent).
    GraphicsSceneMousePress = 156,
    /// Mouse release in a graphics scene (QGraphicsSceneMouseEvent).
    GraphicsSceneMouseRelease = 157,
    /// Mouse press again (double click) in a graphics scene (QGraphicsSceneMouseEvent).
    GraphicsSceneMouseDoubleClick = 158,
    /// Context popup menu over a graphics scene (QGraphicsSceneContextMenuEvent).
    GraphicsSceneContextMenu = 159,
    /// The mouse cursor enters a hover item in a graphics scene (QGraphicsSceneHoverEvent).
    GraphicsSceneHoverEnter = 160,
    /// The mouse cursor moves inside a hover item in a graphics scene (QGraphicsSceneHoverEvent).
    GraphicsSceneHoverMove = 161,
    /// The mouse cursor leaves a hover item in a graphics scene (QGraphicsSceneHoverEvent).
    GraphicsSceneHoverLeave = 162,
    /// The user requests help for a graphics scene (QHelpEvent).
    GraphicsSceneHelp = 163,
    /// The cursor enters a graphics scene during a drag and drop operation (QGraphicsSceneDragDropEvent).
    GraphicsSceneDragEnter = 164,
    /// A drag and drop operation is in progress over a scene (QGraphicsSceneDragDropEvent).
    GraphicsSceneDragMove = 165,
    /// The cursor leaves a graphics scene during a drag and drop operation (QGraphicsSceneDragDropEvent).
    GraphicsSceneDragLeave = 166,
    /// A drag and drop operation is completed over a scene (QGraphicsSceneDragDropEvent).
    GraphicsSceneDrop = 167,
    /// Mouse wheel rolled in a graphics scene (QGraphicsSceneWheelEvent).
    GraphicsSceneWheel = 168,
    /// The keyboard layout has changed.
    KeyboardLayoutChange = 169,
    /// A dynamic property was added, changed, or removed from the object.
    DynamicPropertyChange = 170,
    /// Wacom tablet enter proximity event (QTabletEvent), sent to QApplication.
    TabletEnterProximity = 171,
    /// Wacom tablet leave proximity event (QTabletEvent), sent to QApplication.
    TabletLeaveProximity = 172,
    /// A mouse move occurred outside the client area (QMouseEvent).
    NonClientAreaMouseMove = 173,
    /// A mouse button press occurred outside the client area (QMouseEvent).
    NonClientAreaMouseButtonPress = 174,
    /// A mouse button release occurred outside the client area (QMouseEvent).
    NonClientAreaMouseButtonRelease = 175,
    /// A mouse double click occurred outside the client area (QMouseEvent).
    NonClientAreaMouseButtonDblClick = 176,
    /// The user changed his widget sizes ( MacOS only).
    MacSizeChange = 177,
    /// The margins of the widget's content rect changed.
    ContentsRectChange = 178,
    MacGLWindowChange = 179,
    FutureCallOut = 180,
    /// Widget was resized (QGraphicsSceneResizeEvent).
    GraphicsSceneResize = 181,
    /// Widget was moved (QGraphicsSceneMoveEvent).
    GraphicsSceneMove = 182,
    /// The widget's cursor has changed.
    CursorChange = 183,
    /// The widget's tooltip has changed.
    ToolTipChange = 184,
    NetworkReplyUpdated = 185,
    /// Item gains mouse grab (QGraphicsItem only).
    GrabMouse = 186,
    /// Item loses mouse grab (QGraphicsItem, QQuickItem).
    UngrabMouse = 187,
    /// Item gains keyboard grab (QGraphicsItem only).
    GrabKeyboard = 188,
    /// Item loses keyboard grab (QGraphicsItem only).
    UngrabKeyboard = 189,
    MacGLClearDrawable = 191,
    /// A signal delivered to a state machine (QStateMachine::SignalEvent).
    StateMachineSignal = 192,
    /// The event is a wrapper for, i.e., contains, another event (QStateMachine::WrappedEvent).
    StateMachineWrapped = 193,
    /// Beginning of a sequence of touch-screen or track-pad events (QTouchEvent).
    TouchBegin = 194,
    /// Touch-screen event (QTouchEvent).
    TouchUpdate = 195,
    /// End of touch-event sequence (QTouchEvent).
    TouchEnd = 196,
    /// The system has detected a gesture (QNativeGestureEvent).
    NativeGesture = 197,
    /// A widget wants to open a software input panel (SIP).
    RequestSoftwareInputPanel = 199,
    /// A widget wants to close the software input panel (SIP).
    CloseSoftwareInputPanel = 200,
    /// The window system identifer for this native widget has changed.
    WinIdChange = 203,
    /// A gesture was triggered (QGestureEvent).
    Gesture = 198,
    /// A gesture override was triggered (QGestureEvent).
    GestureOverride = 202,
    /// The object needs to fill in its geometry information (QScrollPrepareEvent).
    ScrollPrepare = 204,
    /// The object needs to scroll to the supplied position (QScrollEvent).
    Scroll = 205,
    /// Sent to a window when its on-screen contents are invalidated and need to be flushed from the backing store.
    Expose = 206,
    /// A input method query event (QInputMethodQueryEvent)
    InputMethodQuery = 207,
    /// The screens orientation has changes (QScreenOrientationChangeEvent).
    OrientationChange = 208,
    /// Cancellation of touch-event sequence (QTouchEvent).
    TouchCancel = 209,
    ThemeChange = 210,
    SockClose = 211,
    /// A platform specific panel has been requested.
    PlatformPanel = 212,
    StyleAnimationUpdate = 213,
    /// The state of the application has changed.
    ApplicationStateChange = 214,
    WindowChangeInternal = 215,
    ScreenChangeInternal = 216,
    /// A native platform surface has been created or is about to be destroyed (QPlatformSurfaceEvent).
    PlatformSurface = 217,
    Pointer = 218,
    /// The Wacom tablet tracking state has changed (since Qt 5.9).
    TabletTrackingChange = 219,
    /// User-defined event.
    User = 1000,
    /// Last user event ID. For convenience, you can use the registerEventType() function to register and reserve a custom event type for your application. Doing so will allow you to avoid accidentally re-using a custom event type already in use elsewhere in your application.
    MaxUser = 65535,
}

// vim: syntax=rust expandtab ts=4 sw=4
