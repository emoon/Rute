/// 
/// **Keyword**: regular expression match
/// 
/// A QRegularExpressionMatch object can be obtained by calling the
/// QRegularExpression::match() function, or as a single result of a global
/// match from a QRegularExpressionMatchIterator.
/// 
/// The success or the failure of a match attempt can be inspected by calling
/// the hasMatch() function. QRegularExpressionMatch also reports a successful
/// partial match through the hasPartialMatch() function.
/// 
/// In addition, QRegularExpressionMatch returns the substrings captured by the
/// capturing groups in the pattern string. The implicit capturing group with
/// index 0 captures the result of the whole match. The captured() function
/// returns each substring captured, either by the capturing group's index or
/// by its name:
/// 
/// For each captured substring it is possible to query its starting and ending
/// offsets in the subject string by calling the capturedStart() and the
/// capturedEnd() function, respectively. The length of each captured
/// substring is available using the capturedLength() function.
/// 
/// The convenience function capturedTexts() will return *all* the captured
/// substrings at once (including the substring matched by the entire pattern)
/// in the order they have been captured by captring groups; that is,
/// `captured(i) == capturedTexts().at(i)` .
/// 
/// You can retrieve the QRegularExpression object the subject string was
/// matched against by calling the regularExpression() function; the
/// match type and the match options are available as well by calling
/// the matchType() and the matchOptions() respectively.
/// 
/// Please refer to the QRegularExpression documentation for more information
/// about the Qt regular expression classes.
/// 
/// **See also:** [`RegularExpression`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct RegularExpressionMatch {
    /// 
    /// Swaps the match result *other* with this match result. This
    /// operation is very fast and never fails.
    swap(other: &RegularExpressionMatchType),
    /// 
    /// Returns the QRegularExpression object whose match() function returned this
    /// object.
    /// 
    /// **See also:** [`RegularExpression::match`]
    /// [`match_type()`]
    /// [`match_options()`]
    regular_expression() -> RegularExpression,
    /// 
    /// Returns the match type that was used to get this QRegularExpressionMatch
    /// object, that is, the match type that was passed to
    /// QRegularExpression::match() or QRegularExpression::globalMatch().
    /// 
    /// **See also:** [`RegularExpression::match`]
    /// [`regular_expression()`]
    /// [`match_options()`]
    match_type() -> RegularExpression::MatchType,
    /// 
    /// Returns the match options that were used to get this
    /// QRegularExpressionMatch object, that is, the match options that were passed
    /// to QRegularExpression::match() or QRegularExpression::globalMatch().
    /// 
    /// **See also:** [`RegularExpression::match`]
    /// [`regular_expression()`]
    /// [`match_type()`]
    match_options() -> RegularExpression::MatchOptions,
    /// 
    /// Returns `true` if the regular expression matched against the subject string,
    /// or false otherwise.
    /// 
    /// **See also:** [`RegularExpression::match`]
    /// [`has_partial_match()`]
    has_match() -> bool,
    /// 
    /// Returns `true` if the regular expression partially matched against the
    /// subject string, or false otherwise.
    /// 
    /// **Note**: Only a match that explicitly used the one of the partial match types
    /// can yield a partial match. Still, if such a match succeeds totally, this
    /// function will return false, while hasMatch() will return true.
    /// 
    /// **See also:** [`RegularExpression::match`]
    /// [`RegularExpression::match_type()`]
    /// [`has_match()`]
    has_partial_match() -> bool,
    /// 
    /// Returns `true` if the match object was obtained as a result from the
    /// QRegularExpression::match() function invoked on a valid QRegularExpression
    /// object; returns `false` if the QRegularExpression was invalid.
    /// 
    /// **See also:** [`RegularExpression::match`]
    /// [`RegularExpression::is_valid`]
    is_valid() -> bool,
    /// 
    /// Returns the index of the last capturing group that captured something,
    /// including the implicit capturing group 0. This can be used to extract all
    /// the substrings that were captured:
    /// 
    /// Note that some of the capturing groups with an index less than
    /// lastCapturedIndex() could have not matched, and therefore captured nothing.
    /// 
    /// If the regular expression did not match, this function returns -1.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    last_captured_index() -> i32,
    /// 
    /// Returns the substring captured by the *nth* capturing group.
    /// 
    /// If the *nth* capturing group did not capture a string, or if there is no
    /// such capturing group, returns a null QString.
    /// 
    /// **See also:** [`captured_ref()`]
    /// [`captured_view()`]
    /// [`last_captured_index()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`String::is_null`]
    /// 
    /// Returns a reference to the substring captured by the *nth* capturing group.
    /// 
    /// If the *nth* capturing group did not capture a string, or if there is no
    /// such capturing group, returns a null QStringRef.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_view()`]
    /// [`last_captured_index()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    /// 
    /// Returns a view of the substring captured by the *nth* capturing group.
    /// 
    /// If the *nth* capturing group did not capture a string, or if there is no
    /// such capturing group, returns a null QStringView.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_ref()`]
    /// [`last_captured_index()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringView::is_null`]
    /// 
    /// Returns the substring captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QString.
    /// 
    /// **See also:** [`captured_ref()`]
    /// [`captured_view()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`String::is_null`]
    /// 
    /// Returns a reference to the string captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QStringRef.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_view()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    /// 
    /// Returns the substring captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QString.
    /// 
    /// **See also:** [`captured_ref()`]
    /// [`captured_view()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`String::is_null`]
    /// 
    /// Returns a reference to the string captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QStringRef.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_view()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    /// 
    /// Returns a view of the string captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QStringView.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_ref()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    /// 
    /// Returns a list of all strings captured by capturing groups, in the order
    /// the groups themselves appear in the pattern string.
    /// 
    /// Returns the offset inside the subject string corresponding to the
    /// starting position of the substring captured by the *nth* capturing group.
    /// If the *nth* capturing group did not capture a string or doesn't exist,
    /// returns -1.
    /// 
    /// **See also:** [`captured_end()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the length of the substring captured by the *nth* capturing group.
    /// 
    /// **Note**: This function returns 0 if the *nth* capturing group did not capture
    /// a string or doesn't exist.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string immediately after the ending
    /// position of the substring captured by the *nth* capturing group. If the *nth* capturing group did not capture a string or doesn't exist, returns -1.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string corresponding to the starting
    /// position of the substring captured by the capturing group named *name.*
    /// If the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_end()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the length of the substring captured by the capturing group named
    /// *name.*
    /// 
    /// **Note**: This function returns 0 if the capturing group named *name* did not
    /// capture a string or doesn't exist.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string immediately after the ending
    /// position of the substring captured by the capturing group named *name.* If
    /// the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string corresponding to the starting
    /// position of the substring captured by the capturing group named *name.*
    /// If the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_end()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the length of the substring captured by the capturing group named
    /// *name.*
    /// 
    /// **Note**: This function returns 0 if the capturing group named *name* did not
    /// capture a string or doesn't exist.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string immediately after the ending
    /// position of the substring captured by the capturing group named *name.* If
    /// the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_length()`]
    /// [`captured()`]
    captured(nth: i32) -> String,
    /// 
    /// Returns a reference to the substring captured by the *nth* capturing group.
    /// 
    /// If the *nth* capturing group did not capture a string, or if there is no
    /// such capturing group, returns a null QStringRef.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_view()`]
    /// [`last_captured_index()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    /// 
    /// Returns a reference to the string captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QStringRef.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_view()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    /// 
    /// Returns a reference to the string captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QStringRef.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_view()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    captured_ref(nth: i32) -> StringRef,
    /// 
    /// Returns a view of the substring captured by the *nth* capturing group.
    /// 
    /// If the *nth* capturing group did not capture a string, or if there is no
    /// such capturing group, returns a null QStringView.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_ref()`]
    /// [`last_captured_index()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringView::is_null`]
    /// 
    /// Returns a view of the string captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QStringView.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_ref()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    captured_view(nth: i32) -> StringView,
    /// 
    /// Returns the substring captured by the *nth* capturing group.
    /// 
    /// If the *nth* capturing group did not capture a string, or if there is no
    /// such capturing group, returns a null QString.
    /// 
    /// **See also:** [`captured_ref()`]
    /// [`captured_view()`]
    /// [`last_captured_index()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`String::is_null`]
    /// 
    /// Returns a reference to the substring captured by the *nth* capturing group.
    /// 
    /// If the *nth* capturing group did not capture a string, or if there is no
    /// such capturing group, returns a null QStringRef.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_view()`]
    /// [`last_captured_index()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    /// 
    /// Returns a view of the substring captured by the *nth* capturing group.
    /// 
    /// If the *nth* capturing group did not capture a string, or if there is no
    /// such capturing group, returns a null QStringView.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_ref()`]
    /// [`last_captured_index()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringView::is_null`]
    /// 
    /// Returns the substring captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QString.
    /// 
    /// **See also:** [`captured_ref()`]
    /// [`captured_view()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`String::is_null`]
    /// 
    /// Returns a reference to the string captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QStringRef.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_view()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    /// 
    /// Returns the substring captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QString.
    /// 
    /// **See also:** [`captured_ref()`]
    /// [`captured_view()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`String::is_null`]
    /// 
    /// Returns a reference to the string captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QStringRef.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_view()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    /// 
    /// Returns a view of the string captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QStringView.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_ref()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    /// 
    /// Returns a list of all strings captured by capturing groups, in the order
    /// the groups themselves appear in the pattern string.
    /// 
    /// Returns the offset inside the subject string corresponding to the
    /// starting position of the substring captured by the *nth* capturing group.
    /// If the *nth* capturing group did not capture a string or doesn't exist,
    /// returns -1.
    /// 
    /// **See also:** [`captured_end()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the length of the substring captured by the *nth* capturing group.
    /// 
    /// **Note**: This function returns 0 if the *nth* capturing group did not capture
    /// a string or doesn't exist.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string immediately after the ending
    /// position of the substring captured by the *nth* capturing group. If the *nth* capturing group did not capture a string or doesn't exist, returns -1.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string corresponding to the starting
    /// position of the substring captured by the capturing group named *name.*
    /// If the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_end()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the length of the substring captured by the capturing group named
    /// *name.*
    /// 
    /// **Note**: This function returns 0 if the capturing group named *name* did not
    /// capture a string or doesn't exist.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string immediately after the ending
    /// position of the substring captured by the capturing group named *name.* If
    /// the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string corresponding to the starting
    /// position of the substring captured by the capturing group named *name.*
    /// If the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_end()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the length of the substring captured by the capturing group named
    /// *name.*
    /// 
    /// **Note**: This function returns 0 if the capturing group named *name* did not
    /// capture a string or doesn't exist.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string immediately after the ending
    /// position of the substring captured by the capturing group named *name.* If
    /// the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_length()`]
    /// [`captured()`]
    [org_name(captured)]
    captured_2(name: String) -> String,
    /// 
    /// Returns a reference to the substring captured by the *nth* capturing group.
    /// 
    /// If the *nth* capturing group did not capture a string, or if there is no
    /// such capturing group, returns a null QStringRef.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_view()`]
    /// [`last_captured_index()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    /// 
    /// Returns a reference to the string captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QStringRef.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_view()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    /// 
    /// Returns a reference to the string captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QStringRef.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_view()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    [org_name(capturedRef)]
    captured_ref_2(name: String) -> StringRef,
    /// 
    /// Returns the substring captured by the *nth* capturing group.
    /// 
    /// If the *nth* capturing group did not capture a string, or if there is no
    /// such capturing group, returns a null QString.
    /// 
    /// **See also:** [`captured_ref()`]
    /// [`captured_view()`]
    /// [`last_captured_index()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`String::is_null`]
    /// 
    /// Returns a reference to the substring captured by the *nth* capturing group.
    /// 
    /// If the *nth* capturing group did not capture a string, or if there is no
    /// such capturing group, returns a null QStringRef.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_view()`]
    /// [`last_captured_index()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    /// 
    /// Returns a view of the substring captured by the *nth* capturing group.
    /// 
    /// If the *nth* capturing group did not capture a string, or if there is no
    /// such capturing group, returns a null QStringView.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_ref()`]
    /// [`last_captured_index()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringView::is_null`]
    /// 
    /// Returns the substring captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QString.
    /// 
    /// **See also:** [`captured_ref()`]
    /// [`captured_view()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`String::is_null`]
    /// 
    /// Returns a reference to the string captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QStringRef.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_view()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    /// 
    /// Returns the substring captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QString.
    /// 
    /// **See also:** [`captured_ref()`]
    /// [`captured_view()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`String::is_null`]
    /// 
    /// Returns a reference to the string captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QStringRef.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_view()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    /// 
    /// Returns a view of the string captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QStringView.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_ref()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    /// 
    /// Returns a list of all strings captured by capturing groups, in the order
    /// the groups themselves appear in the pattern string.
    /// 
    /// Returns the offset inside the subject string corresponding to the
    /// starting position of the substring captured by the *nth* capturing group.
    /// If the *nth* capturing group did not capture a string or doesn't exist,
    /// returns -1.
    /// 
    /// **See also:** [`captured_end()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the length of the substring captured by the *nth* capturing group.
    /// 
    /// **Note**: This function returns 0 if the *nth* capturing group did not capture
    /// a string or doesn't exist.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string immediately after the ending
    /// position of the substring captured by the *nth* capturing group. If the *nth* capturing group did not capture a string or doesn't exist, returns -1.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string corresponding to the starting
    /// position of the substring captured by the capturing group named *name.*
    /// If the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_end()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the length of the substring captured by the capturing group named
    /// *name.*
    /// 
    /// **Note**: This function returns 0 if the capturing group named *name* did not
    /// capture a string or doesn't exist.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string immediately after the ending
    /// position of the substring captured by the capturing group named *name.* If
    /// the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string corresponding to the starting
    /// position of the substring captured by the capturing group named *name.*
    /// If the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_end()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the length of the substring captured by the capturing group named
    /// *name.*
    /// 
    /// **Note**: This function returns 0 if the capturing group named *name* did not
    /// capture a string or doesn't exist.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string immediately after the ending
    /// position of the substring captured by the capturing group named *name.* If
    /// the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_length()`]
    /// [`captured()`]
    [org_name(captured)]
    captured_3(name: StringViewType) -> String,
    /// 
    /// Returns a reference to the substring captured by the *nth* capturing group.
    /// 
    /// If the *nth* capturing group did not capture a string, or if there is no
    /// such capturing group, returns a null QStringRef.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_view()`]
    /// [`last_captured_index()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    /// 
    /// Returns a reference to the string captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QStringRef.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_view()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    /// 
    /// Returns a reference to the string captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QStringRef.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_view()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    [org_name(capturedRef)]
    captured_ref_3(name: StringViewType) -> StringRef,
    /// 
    /// Returns a view of the substring captured by the *nth* capturing group.
    /// 
    /// If the *nth* capturing group did not capture a string, or if there is no
    /// such capturing group, returns a null QStringView.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_ref()`]
    /// [`last_captured_index()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringView::is_null`]
    /// 
    /// Returns a view of the string captured by the capturing group named *name.*
    /// 
    /// If the named capturing group *name* did not capture a string, or if
    /// there is no capturing group named *name,* returns a null QStringView.
    /// 
    /// **See also:** [`captured()`]
    /// [`captured_ref()`]
    /// [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured_length()`]
    /// [`StringRef::is_null`]
    [org_name(capturedView)]
    captured_view_2(name: StringViewType) -> StringView,
    /// 
    /// Returns a list of all strings captured by capturing groups, in the order
    /// the groups themselves appear in the pattern string.
    captured_texts() -> [String],
    /// 
    /// Returns the offset inside the subject string corresponding to the
    /// starting position of the substring captured by the *nth* capturing group.
    /// If the *nth* capturing group did not capture a string or doesn't exist,
    /// returns -1.
    /// 
    /// **See also:** [`captured_end()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string corresponding to the starting
    /// position of the substring captured by the capturing group named *name.*
    /// If the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_end()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string corresponding to the starting
    /// position of the substring captured by the capturing group named *name.*
    /// If the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_end()`]
    /// [`captured_length()`]
    /// [`captured()`]
    captured_start(nth: i32) -> i32,
    /// 
    /// Returns the length of the substring captured by the *nth* capturing group.
    /// 
    /// **Note**: This function returns 0 if the *nth* capturing group did not capture
    /// a string or doesn't exist.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured()`]
    /// 
    /// Returns the length of the substring captured by the capturing group named
    /// *name.*
    /// 
    /// **Note**: This function returns 0 if the capturing group named *name* did not
    /// capture a string or doesn't exist.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured()`]
    /// 
    /// Returns the length of the substring captured by the capturing group named
    /// *name.*
    /// 
    /// **Note**: This function returns 0 if the capturing group named *name* did not
    /// capture a string or doesn't exist.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured()`]
    captured_length(nth: i32) -> i32,
    /// 
    /// Returns the offset inside the subject string immediately after the ending
    /// position of the substring captured by the *nth* capturing group. If the *nth* capturing group did not capture a string or doesn't exist, returns -1.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string immediately after the ending
    /// position of the substring captured by the capturing group named *name.* If
    /// the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string immediately after the ending
    /// position of the substring captured by the capturing group named *name.* If
    /// the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_length()`]
    /// [`captured()`]
    captured_end(nth: i32) -> i32,
    /// 
    /// Returns the offset inside the subject string corresponding to the
    /// starting position of the substring captured by the *nth* capturing group.
    /// If the *nth* capturing group did not capture a string or doesn't exist,
    /// returns -1.
    /// 
    /// **See also:** [`captured_end()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string corresponding to the starting
    /// position of the substring captured by the capturing group named *name.*
    /// If the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_end()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string corresponding to the starting
    /// position of the substring captured by the capturing group named *name.*
    /// If the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_end()`]
    /// [`captured_length()`]
    /// [`captured()`]
    [org_name(capturedStart)]
    captured_start_2(name: String) -> i32,
    /// 
    /// Returns the length of the substring captured by the *nth* capturing group.
    /// 
    /// **Note**: This function returns 0 if the *nth* capturing group did not capture
    /// a string or doesn't exist.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured()`]
    /// 
    /// Returns the length of the substring captured by the capturing group named
    /// *name.*
    /// 
    /// **Note**: This function returns 0 if the capturing group named *name* did not
    /// capture a string or doesn't exist.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured()`]
    /// 
    /// Returns the length of the substring captured by the capturing group named
    /// *name.*
    /// 
    /// **Note**: This function returns 0 if the capturing group named *name* did not
    /// capture a string or doesn't exist.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured()`]
    [org_name(capturedLength)]
    captured_length_2(name: String) -> i32,
    /// 
    /// Returns the offset inside the subject string immediately after the ending
    /// position of the substring captured by the *nth* capturing group. If the *nth* capturing group did not capture a string or doesn't exist, returns -1.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string immediately after the ending
    /// position of the substring captured by the capturing group named *name.* If
    /// the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string immediately after the ending
    /// position of the substring captured by the capturing group named *name.* If
    /// the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_length()`]
    /// [`captured()`]
    [org_name(capturedEnd)]
    captured_end_2(name: String) -> i32,
    /// 
    /// Returns the offset inside the subject string corresponding to the
    /// starting position of the substring captured by the *nth* capturing group.
    /// If the *nth* capturing group did not capture a string or doesn't exist,
    /// returns -1.
    /// 
    /// **See also:** [`captured_end()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string corresponding to the starting
    /// position of the substring captured by the capturing group named *name.*
    /// If the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_end()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string corresponding to the starting
    /// position of the substring captured by the capturing group named *name.*
    /// If the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_end()`]
    /// [`captured_length()`]
    /// [`captured()`]
    [org_name(capturedStart)]
    captured_start_3(name: StringViewType) -> i32,
    /// 
    /// Returns the length of the substring captured by the *nth* capturing group.
    /// 
    /// **Note**: This function returns 0 if the *nth* capturing group did not capture
    /// a string or doesn't exist.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured()`]
    /// 
    /// Returns the length of the substring captured by the capturing group named
    /// *name.*
    /// 
    /// **Note**: This function returns 0 if the capturing group named *name* did not
    /// capture a string or doesn't exist.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured()`]
    /// 
    /// Returns the length of the substring captured by the capturing group named
    /// *name.*
    /// 
    /// **Note**: This function returns 0 if the capturing group named *name* did not
    /// capture a string or doesn't exist.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_end()`]
    /// [`captured()`]
    [org_name(capturedLength)]
    captured_length_3(name: StringViewType) -> i32,
    /// 
    /// Returns the offset inside the subject string immediately after the ending
    /// position of the substring captured by the *nth* capturing group. If the *nth* capturing group did not capture a string or doesn't exist, returns -1.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string immediately after the ending
    /// position of the substring captured by the capturing group named *name.* If
    /// the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_length()`]
    /// [`captured()`]
    /// 
    /// Returns the offset inside the subject string immediately after the ending
    /// position of the substring captured by the capturing group named *name.* If
    /// the capturing group named *name* did not capture a string or doesn't
    /// exist, returns -1.
    /// 
    /// **See also:** [`captured_start()`]
    /// [`captured_length()`]
    /// [`captured()`]
    [org_name(capturedEnd)]
    captured_end_3(name: StringViewType) -> i32,
}

// vim: syntax=rust expandtab ts=4 sw=4
