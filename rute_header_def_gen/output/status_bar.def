///     \class QStatusBar
///     \brief The QStatusBar class provides a horizontal bar suitable for
///     presenting status information.
/// 
///     \ingroup mainwindow-classes
///     \ingroup helpsystem
///     \inmodule QtWidgets
/// 
///     Each status indicator falls into one of three categories:
/// 
///     \list
///     \li \e Temporary - briefly occupies most of the status bar. Used
///         to explain tool tip texts or menu entries, for example.
///     \li \e Normal - occupies part of the status bar and may be hidden
///         by temporary messages. Used to display the page and line
///         number in a word processor, for example.
///     \li \e Permanent - is never hidden. Used for important mode
///         indications, for example, some applications put a Caps Lock
///         indicator in the status bar.
///     \endlist
/// 
///     QStatusBar lets you display all three types of indicators.
/// 
///     Typically, a request for the status bar functionality occurs in
///     relation to a QMainWindow object. QMainWindow provides a main
///     application window, with a menu bar, tool bars, dock widgets \e
///     and a status bar around a large central widget. The status bar can
///     be retrieved using the QMainWindow::statusBar() function, and
///     replaced using the QMainWindow::setStatusBar() function.
/// 
///     Use the showMessage() slot to display a \e temporary message:
/// 
///     \snippet mainwindows/dockwidgets/mainwindow.cpp 8
/// 
///     To remove a temporary message, use the clearMessage() slot, or set
///     a time limit when calling showMessage(). For example:
/// 
///     \snippet mainwindows/dockwidgets/mainwindow.cpp 3
/// 
///     Use the currentMessage() function to retrieve the temporary
///     message currently shown. The QStatusBar class also provide the
///     messageChanged() signal which is emitted whenever the temporary
///     status message changes.
/// 
///     \target permanent message
///     \e Normal and \e Permanent messages are displayed by creating a
///     small widget (QLabel, QProgressBar or even QToolButton) and then
///     adding it to the status bar using the addWidget() or the
///     addPermanentWidget() function. Use the removeWidget() function to
///     remove such messages from the status bar.
/// 
///     \snippet code/src_gui_widgets_qstatusbar.cpp 0
/// 
///     By default QStatusBar provides a QSizeGrip in the lower-right
///     corner. You can disable it using the setSizeGripEnabled()
///     function. Use the isSizeGripEnabled() function to determine the
///     current status of the size grip.
/// 
///     \image fusion-statusbar-sizegrip.png A status bar shown in the Fusion widget style
/// 
///     \sa QMainWindow, QStatusTipEvent, {fowler}{GUI Design Handbook:
///     Status Bar}, {Application Example}
struct StatusBar : Widget {
    add_widget(widget: *WidgetType, stretch: i32),
    insert_widget(index: i32, widget: *WidgetType, stretch: i32) -> i32,
    add_permanent_widget(widget: *WidgetType, stretch: i32),
    insert_permanent_widget(index: i32, widget: *WidgetType, stretch: i32) -> i32,
    remove_widget(widget: *WidgetType),
    set_size_grip_enabled(arg0: bool),
    is_size_grip_enabled() -> bool,
    current_message() -> String,
    show_message(text: String, timeout: i32),
    clear_message(),
    [signal] message_changed(text: String),
    [event] show_event(arg0: *ShowEventType),
    [event] paint_event(arg0: *PaintEventType),
    [event] resize_event(arg0: *ResizeEventType),
    reformat(),
    hide_or_show(),
    [event] event(arg0: *EventType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
