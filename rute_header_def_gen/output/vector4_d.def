///     \class QVector4D
///     \brief The QVector4D class represents a vector or vertex in 4D space.
///     \since 4.6
///     \ingroup painting-3D
///     \inmodule QtGui
/// 
///     The QVector4D class can also be used to represent vertices in 4D space.
///     We therefore do not need to provide a separate vertex class.
/// 
///     \sa QQuaternion, QVector2D, QVector3D
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct Vector4D {
    is_null() -> bool,
    x() -> f32,
    y() -> f32,
    z() -> f32,
    w() -> f32,
    set_x(x: f32),
    set_y(y: f32),
    set_z(z: f32),
    set_w(w: f32),
    ///     Returns the length of the vector from the origin.
    /// 
    ///     \sa lengthSquared(), normalized()
    length() -> f32,
    ///     Returns the squared length of the vector from the origin.
    ///     This is equivalent to the dot product of the vector with itself.
    /// 
    ///     \sa length(), dotProduct()
    length_squared() -> f32,
    ///     Returns the normalized unit vector form of this vector.
    /// 
    ///     If this vector is null, then a null vector is returned.  If the length
    ///     of the vector is very close to 1, then the vector will be returned as-is.
    ///     Otherwise the normalized form of the vector of length 1 will be returned.
    /// 
    ///     \sa length(), normalize()
    normalized() -> Vector4D,
    ///     Normalizes the currect vector in place.  Nothing happens if this
    ///     vector is a null vector or the length of the vector is very close to 1.
    /// 
    ///     \sa length(), normalized()
    normalize(),
    ///     Returns the dot product of \a v1 and \a v2.
    [static] dot_product(v1: &Vector4DType, v2: &Vector4DType) -> f32,
    ///     Returns the 2D vector form of this 4D vector, dropping the z and w coordinates.
    /// 
    ///     \sa toVector2DAffine(), toVector3D(), toPoint()
    to_vector2_d() -> Vector2D,
    ///     Returns the 2D vector form of this 4D vector, dividing the x and y
    ///     coordinates by the w coordinate and dropping the z coordinate.
    ///     Returns a null vector if w is zero.
    /// 
    ///     \sa toVector2D(), toVector3DAffine(), toPoint()
    to_vector2_d_affine() -> Vector2D,
    ///     Returns the 3D vector form of this 4D vector, dropping the w coordinate.
    /// 
    ///     \sa toVector3DAffine(), toVector2D(), toPoint()
    to_vector3_d() -> Vector3D,
    ///     Returns the 3D vector form of this 4D vector, dividing the x, y, and
    ///     z coordinates by the w coordinate.  Returns a null vector if w is zero.
    /// 
    ///     \sa toVector3D(), toVector2DAffine(), toPoint()
    to_vector3_d_affine() -> Vector3D,
    to_point() -> Point,
    to_point_f() -> PointF,
}

// vim: syntax=rust expandtab ts=4 sw=4
