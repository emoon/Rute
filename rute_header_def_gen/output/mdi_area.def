[org_name(QMdiArea)]
enum AreaOption {
    DontMaximizeSubWindowOnActivation,
}

[org_name(QMdiArea)]
enum WindowOrder {
    CreationOrder,
    StackingOrder,
    ActivationHistoryOrder,
}

[org_name(QMdiArea)]
enum ViewMode {
    SubWindowView,
    TabbedView,
}

struct MdiArea : AbstractScrollArea {
    [event] size_hint() -> Size,
    [event] minimum_size_hint() -> Size,
    current_sub_window() -> MdiSubWindow?,
    active_sub_window() -> MdiSubWindow?,
    sub_window_list(order: MdiArea::WindowOrder) -> [MdiSubWindow?],
    add_sub_window(widget: *WidgetType, flags: Rute::WindowFlags) -> MdiSubWindow?,
    remove_sub_window(widget: *WidgetType),
    background() -> Brush,
    set_background(background: &BrushType),
    activation_order() -> MdiArea::WindowOrder,
    set_activation_order(order: MdiArea::WindowOrder),
    set_option(option: MdiArea::AreaOption, on: bool),
    test_option(opton: MdiArea::AreaOption) -> bool,
    set_view_mode(mode: MdiArea::ViewMode),
    view_mode() -> MdiArea::ViewMode,
    document_mode() -> bool,
    set_document_mode(enabled: bool),
    set_tabs_closable(closable: bool),
    tabs_closable() -> bool,
    set_tabs_movable(movable: bool),
    tabs_movable() -> bool,
    set_tab_shape(shape: TabWidget::TabShape),
    tab_shape() -> TabWidget::TabShape,
    set_tab_position(position: TabWidget::TabPosition),
    tab_position() -> TabWidget::TabPosition,
    [signal] sub_window_activated(arg0: *MdiSubWindowType),
    set_active_sub_window(window: *MdiSubWindowType),
    tile_sub_windows(),
    cascade_sub_windows(),
    close_active_sub_window(),
    close_all_sub_windows(),
    activate_next_sub_window(),
    activate_previous_sub_window(),
    [event] setup_viewport(viewport: *WidgetType),
    [event] event(event: *EventType) -> bool,
    [event] event_filter(object: *ObjectType, event: *EventType) -> bool,
    [event] paint_event(paint_event: *PaintEventType),
    [event] child_event(child_event: *ChildEventType),
    [event] resize_event(resize_event: *ResizeEventType),
    [event] timer_event(timer_event: *TimerEventType),
    [event] show_event(show_event: *ShowEventType),
    [event] viewport_event(event: *EventType) -> bool,
    [event] scroll_contents_by(dx: i32, dy: i32),
}

// vim: syntax=rust expandtab ts=4 sw=4
