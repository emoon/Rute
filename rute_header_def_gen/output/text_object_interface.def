/// 
/// [QTextDocument](QTextDocument)
/// s.
/// 
/// A text object describes the structure of one or more elements in a
/// text document; for instance, images imported from HTML are
/// implemented using text objects. A text object knows how to lay out
/// and draw its elements when a document is being rendered.
/// 
/// Qt allows custom text objects to be inserted into a document by
/// registering a custom [object
/// type](QTextCharFormat::objectType())
/// with QTextCharFormat. A QTextObjectInterface must also be
/// implemented for this type and be
/// [registered](QAbstractTextDocumentLayout::registerHandler())
/// 
/// with the QAbstractTextDocumentLayout of the document. When the
/// object type is encountered while rendering a QTextDocument, the
/// intrinsicSize() and drawObject() functions of the interface are
/// called.
/// 
/// The following list explains the required steps of inserting a
/// custom text object into a document:
/// 
/// * Choose an *objectType.* The *objectType* is an integer with a value greater or equal to QTextFormat::UserObject.
/// * Create a QTextCharFormat object and set the object type to the chosen type using the setObjectType() function.
/// * Implement the QTextObjectInterface class.
/// * Call QAbstractTextDocumentLayout::registerHandler() with an instance of your QTextObjectInterface subclass to register your object type.
/// * Insert QChar::ObjectReplacementCharacter with the aforementioned QTextCharFormat of the chosen object type into the document. As mentioned, the functions of QTextObjectInterface [intrinsicSize()](QTextObjectInterface::)
/// and [drawObject()](QTextObjectInterface::)
/// will then be called with the QTextFormat as parameter whenever the replacement character is encountered.
/// 
/// A class implementing a text object needs to inherit both QObject
/// and QTextObjectInterface. QObject must be the first class
/// inherited. For instance:
/// 
/// The data of a text object is usually stored in the QTextCharFormat
/// using QTextCharFormat::setProperty(), and then retrieved with
/// QTextCharFormat::property().
/// 
/// **Warning**: Copy and Paste operations ignore custom text objects.
/// 
/// **See also:** {Text Object Example}
/// [`TextCharFormat`]
/// [`TextLayout`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TextObjectInterface {
    /// 
    /// Draws this text object using the specified *painter.*
    /// 
    /// The size of the rectangle, *rect,* to draw in is the size
    /// previously calculated by intrinsicSize(). The rectangles position
    /// is relative to the *painter.*
    /// 
    /// You also get the document ( *doc)* and the position ( *posInDocument)* of the *format* in that document.
    /// 
    /// **See also:** [`intrinsic_size()`]
    [event] draw_object(painter: *PainterType, rect: &RectFType, doc: *TextDocumentType, pos_in_document: i32, format: &TextFormatType),
}

// vim: syntax=rust expandtab ts=4 sw=4
