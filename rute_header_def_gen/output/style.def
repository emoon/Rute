struct Style : Object {
    polish(&WidgetType widget),
    unpolish(&WidgetType widget),
    polish(&ApplicationType application),
    unpolish(&ApplicationType application),
    polish(&PaletteType palette),
    item_text_rect(&FontMetricsType fm, &RectType r, i32 flags, bool enabled, String text) -> RectType,
    item_pixmap_rect(&RectType r, i32 flags, &PixmapType pixmap) -> RectType,
    draw_item_text(&PainterType painter, &RectType rect, i32 flags, &PaletteType pal, bool enabled, String text, Palette::ColorRole text_role),
    draw_item_pixmap(&PainterType painter, &RectType rect, i32 alignment, &PixmapType pixmap),
    standard_palette() -> PaletteType,
    draw_primitive(Style::PrimitiveElement pe, &StyleOptionType opt, &PainterType p, &WidgetType w),
    sub_element_rect(Style::SubElement sub_element, &StyleOptionType option, &WidgetType widget) -> RectType,
    size_from_contents(Style::ContentsType ct, &StyleOptionType opt, &SizeType contents_size, &WidgetType w) -> SizeType,
    style_hint(Style::StyleHint stylehint, &StyleOptionType opt, &WidgetType widget, &StyleHintReturnType return_data) -> i32,
    standard_pixmap(Style::StandardPixmap standard_pixmap, &StyleOptionType opt, &WidgetType widget) -> PixmapType,
    standard_icon(Style::StandardPixmap standard_icon, &StyleOptionType option, &WidgetType widget) -> IconType,
    generated_icon_pixmap(Icon::Mode icon_mode, &PixmapType pixmap, &StyleOptionType opt) -> PixmapType,
    visual_rect(Rute::LayoutDirection direction, &RectType bounding_rect, &RectType logical_rect) -> RectType,
    visual_pos(Rute::LayoutDirection direction, &RectType bounding_rect, &PointType logical_pos) -> PointType,
    slider_position_from_value(i32 min, i32 max, i32 val, i32 space, bool upside_down) -> i32,
    slider_value_from_position(i32 min, i32 max, i32 pos, i32 space, bool upside_down) -> i32,
    visual_alignment(Rute::LayoutDirection direction, Rute::Alignment alignment) -> Rute::Alignment,
    aligned_rect(Rute::LayoutDirection direction, Rute::Alignment alignment, &SizeType size, &RectType rectangle) -> RectType,
    layout_spacing(SizePolicy::ControlType control1, SizePolicy::ControlType control2, Rute::Orientation orientation, &StyleOptionType option, &WidgetType widget) -> i32,
    combined_layout_spacing(SizePolicy::ControlTypes controls1, SizePolicy::ControlTypes controls2, Rute::Orientation orientation, &StyleOptionType option, &WidgetType widget) -> i32,
    proxy() -> &StyleType,
}

// vim: syntax=rust expandtab ts=4 sw=4
