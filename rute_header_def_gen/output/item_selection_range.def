/// 
/// A QItemSelectionRange contains information about a range of
/// selected items in a model. A range of items is a contiguous array
/// of model items, extending to cover a number of adjacent rows and
/// columns with a common parent item; this can be visualized as a
/// two-dimensional block of cells in a table. A selection range has a
/// top(), left() a bottom(), right() and a parent().
/// 
/// The QItemSelectionRange class is one of the [Model/View Classes](Model/View%20Classes)
/// and is part of Qt's [model/view framework](Model/View%20Programming)
/// 
/// 
/// The model items contained in the selection range can be obtained
/// using the indexes() function. Use QItemSelectionModel::selectedIndexes()
/// to get a list of all selected items for a view.
/// 
/// You can determine whether a given model item lies within a
/// particular range by using the contains() function. Ranges can also
/// be compared using the overloaded operators for equality and
/// inequality, and the intersects() function allows you to determine
/// whether two ranges overlap.
/// 
/// **See also:** {Model/View Programming}
/// [`AbstractItemModel`]
/// [`ItemSelection`]
/// [`ItemSelectionModel`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct ItemSelectionRange {
    /// 
    /// Swaps this selection range's contents with *other.*
    /// This function is very fast and never fails.
    swap(other: &ItemSelectionRangeType),
    /// 
    /// Returns the row index corresponding to the uppermost selected row in the
    /// selection range.
    /// 
    /// 
    /// Returns the index for the item located at the top-left corner of
    /// the selection range.
    /// 
    /// **See also:** [`top()`]
    /// [`left()`]
    /// [`bottom_right()`]
    top() -> i32,
    /// 
    /// Returns the column index corresponding to the leftmost selected column in the
    /// selection range.
    left() -> i32,
    /// 
    /// Returns the row index corresponding to the lowermost selected row in the
    /// selection range.
    /// 
    /// 
    /// Returns the index for the item located at the bottom-right corner
    /// of the selection range.
    /// 
    /// **See also:** [`bottom()`]
    /// [`right()`]
    /// [`top_left()`]
    bottom() -> i32,
    /// 
    /// Returns the column index corresponding to the rightmost selected column in
    /// the selection range.
    /// 
    right() -> i32,
    /// 
    /// Returns the number of selected columns in the selection range.
    /// 
    width() -> i32,
    /// 
    /// Returns the number of selected rows in the selection range.
    /// 
    height() -> i32,
    /// 
    /// Returns the index for the item located at the top-left corner of
    /// the selection range.
    /// 
    /// **See also:** [`top()`]
    /// [`left()`]
    /// [`bottom_right()`]
    top_left() -> PersistentModelIndex?,
    /// 
    /// Returns the index for the item located at the bottom-right corner
    /// of the selection range.
    /// 
    /// **See also:** [`bottom()`]
    /// [`right()`]
    /// [`top_left()`]
    bottom_right() -> PersistentModelIndex?,
    /// 
    /// Returns the parent model item index of the items in the selection range.
    /// 
    parent() -> ModelIndex,
    /// 
    /// Returns the model that the items in the selection range belong to.
    model() -> AbstractItemModel?,
    /// 
    /// Returns `true` if the model item specified by the *index* lies within the
    /// range of selected items; otherwise returns `false.`
    /// 
    /// const QModelIndex &parentIndex) const
    /// **Overloads**
    /// Returns `true` if the model item specified by ( *row,* *column)*
    /// and with *parentIndex* as the parent item lies within the range
    /// of selected items; otherwise returns `false.`
    contains(index: &ModelIndexType) -> bool,
    /// 
    /// Returns `true` if the model item specified by the *index* lies within the
    /// range of selected items; otherwise returns `false.`
    /// 
    /// const QModelIndex &parentIndex) const
    /// **Overloads**
    /// Returns `true` if the model item specified by ( *row,* *column)*
    /// and with *parentIndex* as the parent item lies within the range
    /// of selected items; otherwise returns `false.`
    [org_name(contains)]
    contains_2(row: i32, column: i32, parent_index: &ModelIndexType) -> bool,
    /// 
    /// Returns `true` if this selection range intersects (overlaps with) the *other*
    /// range given; otherwise returns `false.`
    /// 
    intersects(other: &ItemSelectionRangeType) -> bool,
    /// 
    /// Returns a new selection range containing only the items that are found in
    /// both the selection range and the *other* selection range.
    intersected(other: &ItemSelectionRangeType) -> ItemSelectionRange,
    /// 
    /// Returns `true` if the selection range is valid; otherwise returns `false.`
    /// 
    is_valid() -> bool,
    /// 
    /// Returns `true` if the selection range contains no selectable item
    is_empty() -> bool,
    /// 
    /// Returns the list of model index items stored in the selection.
    indexes() -> [ModelIndex],
}

// vim: syntax=rust expandtab ts=4 sw=4
