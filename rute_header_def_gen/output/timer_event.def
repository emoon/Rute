/// 
/// Timer events are sent at regular intervals to objects that have
/// started one or more timers. Each timer has a unique identifier. A
/// timer is started with QObject::startTimer().
/// 
/// The QTimer class provides a high-level programming interface that
/// uses signals instead of events. It also provides single-shot timers.
/// 
/// The event handler QObject::timerEvent() receives timer events.
/// 
/// **See also:** [`Timer`]
/// [`Object::timer_event`]
/// [`Object::start_timer`]
/// [`Object::kill_timer`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TimerEvent : Event {
    /// 
    /// Returns the unique timer identifier, which is the same identifier
    /// as returned from QObject::startTimer().
    timer_id() -> i32,
}

// vim: syntax=rust expandtab ts=4 sw=4
