/// 
/// The default orientation for a linear layout is Qt::Horizontal. You can
/// choose a vertical orientation either by calling setOrientation(), or by
/// passing Qt::Vertical to QGraphicsLinearLayout's constructor.
/// 
/// The most common way to use QGraphicsLinearLayout is to construct an object
/// on the heap with no parent, add widgets and layouts by calling addItem(),
/// and finally assign the layout to a widget by calling
/// QGraphicsWidget::setLayout().
/// 
/// You can add widgets, layouts, stretches (addStretch(), insertStretch() or
/// setStretchFactor()), and spacings (setItemSpacing()) to a linear
/// layout. The layout takes ownership of the items. In some cases when the layout
/// item also inherits from QGraphicsItem (such as QGraphicsWidget) there will be a
/// ambiguity in ownership because the layout item belongs to two ownership hierarchies.
/// See the documentation of QGraphicsLayoutItem::setOwnedByLayout() how to handle
/// this.
/// You can access each item in the layout by calling count() and itemAt(). Calling
/// removeAt() or removeItem() will remove an item from the layout, without
/// destroying it.
/// 
/// # Size Hints and Size Policies in QGraphicsLinearLayout
/// 
/// QGraphicsLinearLayout respects each item's size hints and size policies,
/// and when the layout contains more space than the items can fill, each item
/// is arranged according to the layout's alignment for that item. You can set
/// an alignment for each item by calling setAlignment(), and check the
/// alignment for any item by calling alignment(). By default, items are
/// aligned to the top left.
/// 
/// # Spacing within QGraphicsLinearLayout
/// 
/// Between the items, the layout distributes some space. The actual amount of
/// space depends on the managed widget's current style, but the common
/// spacing is 4. You can also set your own spacing by calling setSpacing(),
/// and get the current spacing value by calling spacing(). If you want to
/// configure individual spacing for your items, you can call setItemSpacing().
/// 
/// # Stretch Factor in QGraphicsLinearLayout
/// 
/// You can assign a stretch factor to each item to control how much space it
/// will get compared to the other items. By default, two identical widgets
/// arranged in a linear layout will have the same size, but if the first
/// widget has a stretch factor of 1 and the second widget has a stretch
/// factor of 2, the first widget will get 1/3 of the available space, and the
/// second will get 2/3.
/// 
/// QGraphicsLinearLayout calculates the distribution of sizes by adding up
/// the stretch factors of all items, and then dividing the available space
/// accordingly. The default stretch factor is 0 for all items; a factor of 0
/// means the item does not have any defined stretch factor; effectively this
/// is the same as setting the stretch factor to 1. The stretch factor only
/// applies to the available space in the lengthwise direction of the layout
/// (following its orientation). If you want to control both the item's
/// horizontal and vertical stretch, you can use QGraphicsGridLayout instead.
/// 
/// # QGraphicsLinearLayout Compared to Other Layouts
/// 
/// QGraphicsLinearLayout is very similar to QVBoxLayout and QHBoxLayout, but
/// in contrast to these classes, it is used to manage QGraphicsWidget and
/// QGraphicsLayout instead of QWidget and QLayout.
/// 
/// **See also:** QGraphicsGridLayout
/// QGraphicsWidget
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GraphicsLinearLayout : GraphicsLayout {
    /// 
    /// Change the layout orientation to *orientation.* Changing the layout
    /// orientation will automatically invalidate the layout.
    /// 
    /// **See also:** orientation()
    set_orientation(orientation: Rute::Orientation),
    /// 
    /// Returns the layout orientation.
    /// **See also:** setOrientation()
    orientation() -> Rute::Orientation,
    /// 
    /// This convenience function is equivalent to calling
    /// insertItem(-1, *item).*
    add_item(item: *GraphicsLayoutItemType),
    /// 
    /// Inserts *item* into the layout at *index,* or before any item that is
    /// currently at *index.*
    /// 
    /// **See also:** addItem()
    /// itemAt()
    /// insertStretch()
    /// setItemSpacing()
    insert_item(index: i32, item: *GraphicsLayoutItemType),
    /// 
    /// Removes *item* from the layout without destroying it. Ownership of
    /// *item* is transferred to the caller.
    /// 
    /// **See also:** removeAt()
    /// insertItem()
    remove_item(item: *GraphicsLayoutItemType),
    /// 
    /// Removes the item at *index* without destroying it. Ownership of the item
    /// is transferred to the caller.
    /// 
    /// **See also:** removeItem()
    /// insertItem()
    [event] remove_at(index: i32),
    /// 
    /// Sets the layout's spacing to *spacing.* Spacing refers to the
    /// vertical and horizontal distances between items.
    /// 
    /// **See also:** setItemSpacing()
    /// setStretchFactor()
    /// QGraphicsGridLayout::setSpacing()
    set_spacing(spacing: f32),
    /// 
    /// Returns the layout's spacing. Spacing refers to the
    /// vertical and horizontal distances between items.
    /// 
    /// **See also:** setSpacing()
    spacing() -> f32,
    /// 
    /// Sets the spacing after item at *index* to *spacing.*
    set_item_spacing(index: i32, spacing: f32),
    /// 
    /// Returns the spacing after item at *index.*
    item_spacing(index: i32) -> f32,
    /// 
    /// Sets the alignment of *item* to *alignment.* If *item's* alignment
    /// changes, the layout is automatically invalidated.
    /// 
    /// **See also:** alignment()
    /// invalidate()
    set_alignment(item: *GraphicsLayoutItemType, alignment: Rute::Alignment),
    /// 
    /// Returns the alignment for *item.* The default alignment is
    /// Qt::AlignTop | Qt::AlignLeft.
    /// 
    /// The alignment decides how the item is positioned within its assigned space
    /// in the case where there's more space available in the layout than the
    /// widgets can occupy.
    /// 
    /// **See also:** setAlignment()
    alignment(item: *GraphicsLayoutItemType) -> Rute::Alignment,
    /// 
    [event] count() -> i32,
    /// 
    /// When iterating from 0 and up, it will return the items in the visual arranged order.
    [event] item_at(index: i32) -> GraphicsLayoutItem?,
    /// 
    [event] invalidate(),
    /// 
    [event] size_hint(which: Rute::SizeHint, constraint: &SizeFType) -> SizeF,
    dump(indent: i32),
}

// vim: syntax=rust expandtab ts=4 sw=4
