///     \class QSurfaceFormat
///     \since 5.0
///     \brief The QSurfaceFormat class represents the format of a QSurface.
///     \inmodule QtGui
/// 
///     The format includes the size of the color buffers, red, green, and blue;
///     the size of the alpha buffer; the size of the depth and stencil buffers;
///     and number of samples per pixel for multisampling. In addition, the format
///     contains surface configuration parameters such as OpenGL profile and
///     version for rendering, whether or not to enable stereo buffers, and swap
///     behaviour.
/// 
///     \note When troubleshooting context or window format issues, it can be
///     helpful to enable the logging category \c{qt.qpa.gl}. Depending on the
///     platform, this may print useful debug information when it comes to OpenGL
///     initialization and the native visual or framebuffer configurations which
///     QSurfaceFormat gets mapped to.
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QSurfaceFormat)]
enum FormatOption {
    StereoBuffers,
    DebugContext,
    DeprecatedFunctions,
    ResetNotification,
}

[org_name(QSurfaceFormat)]
enum SwapBehavior {
    DefaultSwapBehavior,
    SingleBuffer,
    DoubleBuffer,
    TripleBuffer,
}

[org_name(QSurfaceFormat)]
enum RenderableType {
    DefaultRenderableType,
    OpenGL,
    OpenGLES,
    OpenVG,
}

[org_name(QSurfaceFormat)]
enum OpenGLContextProfile {
    NoProfile,
    CoreProfile,
    CompatibilityProfile,
}

[org_name(QSurfaceFormat)]
enum ColorSpace {
    DefaultColorSpace,
    sRGBColorSpace,
}


struct SurfaceFormat {
    qt_check_for_qgadget_macro(),
    ///     Set the minimum depth buffer size to \a size.
    /// 
    ///     \sa depthBufferSize()
    set_depth_buffer_size(size: i32),
    ///     Returns the depth buffer size.
    /// 
    ///     \sa setDepthBufferSize()
    depth_buffer_size() -> i32,
    ///     Set the preferred stencil buffer size to \a size bits.
    /// 
    ///     \sa stencilBufferSize()
    set_stencil_buffer_size(size: i32),
    ///     Returns the stencil buffer size in bits.
    /// 
    ///     \sa setStencilBufferSize()
    stencil_buffer_size() -> i32,
    ///     Set the desired \a size in bits of the red channel of the color buffer.
    /// 
    ///     \note On Mac OSX, be sure to set the buffer size of all color channels,
    ///     otherwise this setting will have no effect. If one of the buffer sizes is not set,
    ///     the current bit-depth of the screen is used.
    set_red_buffer_size(size: i32),
    ///     Get the size in bits of the red channel of the color buffer.
    red_buffer_size() -> i32,
    ///     Set the desired \a size in bits of the green channel of the color buffer.
    /// 
    ///     \note On Mac OSX, be sure to set the buffer size of all color channels,
    ///     otherwise this setting will have no effect. If one of the buffer sizes is not set,
    ///     the current bit-depth of the screen is used.
    set_green_buffer_size(size: i32),
    ///     Get the size in bits of the green channel of the color buffer.
    green_buffer_size() -> i32,
    ///     Set the desired \a size in bits of the blue channel of the color buffer.
    /// 
    ///     \note On Mac OSX, be sure to set the buffer size of all color channels,
    ///     otherwise this setting will have no effect. If one of the buffer sizes is not set,
    ///     the current bit-depth of the screen is used.
    set_blue_buffer_size(size: i32),
    ///     Get the size in bits of the blue channel of the color buffer.
    blue_buffer_size() -> i32,
    ///     Set the desired \a size in bits of the alpha channel of the color buffer.
    set_alpha_buffer_size(size: i32),
    ///     Get the size in bits of the alpha channel of the color buffer.
    alpha_buffer_size() -> i32,
    ///     Set the preferred number of samples per pixel when multisampling
    ///     is enabled to \a numSamples. By default, multisampling is disabled.
    /// 
    ///     \sa samples()
    set_samples(num_samples: i32),
    ///     Returns the number of samples per pixel when multisampling is
    ///     enabled. By default, multisampling is disabled.
    /// 
    ///     \sa setSamples()
    samples() -> i32,
    ///     Set the swap \a behavior of the surface.
    /// 
    ///     The swap behavior specifies whether single, double, or triple
    ///     buffering is desired. The default, DefaultSwapBehavior,
    ///     gives the default swap behavior of the platform.
    set_swap_behavior(behavior: SurfaceFormat::SwapBehavior),
    ///     Returns the configured swap behaviour.
    /// 
    ///     \sa setSwapBehavior()
    swap_behavior() -> SurfaceFormat::SwapBehavior,
    ///     Returns \c true if the alpha buffer size is greater than zero.
    /// 
    ///     This means that the surface might be used with per pixel
    ///     translucency effects.
    has_alpha() -> bool,
    ///     Sets the desired OpenGL context \a profile.
    /// 
    ///     This setting is ignored if the requested OpenGL version is
    ///     less than 3.2.
    set_profile(profile: SurfaceFormat::OpenGLContextProfile),
    ///     Get the configured OpenGL context profile.
    /// 
    ///     This setting is ignored if the requested OpenGL version is
    ///     less than 3.2.
    profile() -> SurfaceFormat::OpenGLContextProfile,
    ///     Sets the desired renderable \a type.
    /// 
    ///     Chooses between desktop OpenGL, OpenGL ES, and OpenVG.
    set_renderable_type(type: SurfaceFormat::RenderableType),
    ///     Gets the renderable type.
    /// 
    ///     Chooses between desktop OpenGL, OpenGL ES, and OpenVG.
    renderable_type() -> SurfaceFormat::RenderableType,
    ///     Sets the desired \a major OpenGL version.
    set_major_version(major_version: i32),
    ///     Returns the major OpenGL version.
    /// 
    ///     The default version is 2.0.
    major_version() -> i32,
    ///     Sets the desired \a minor OpenGL version.
    /// 
    ///     The default version is 2.0.
    set_minor_version(minor_version: i32),
    ///     Returns the minor OpenGL version.
    minor_version() -> i32,
    ///     Returns a QPair<int, int> representing the OpenGL version.
    /// 
    ///     Useful for version checks, for example format.version() >= qMakePair(3, 2)
    version() -> Pair<int,,
    ///     Sets the desired \a major and \a minor OpenGL versions.
    /// 
    ///     The default version is 2.0.
    set_version(major: i32, minor: i32),
    stereo() -> bool,
    ///     If \a enable is true enables stereo buffering; otherwise disables
    ///     stereo buffering.
    /// 
    ///     Stereo buffering is disabled by default.
    /// 
    ///     Stereo buffering provides extra color buffers to generate left-eye
    ///     and right-eye images.
    /// 
    ///     \sa stereo()
    set_stereo(enable: bool),
    ///     \since 5.3
    /// 
    ///     Sets the format option \a option if \a on is true; otherwise, clears the option.
    /// 
    ///     \sa setOptions(), options(), testOption()
    set_option(opt: SurfaceFormat::FormatOptions),
    ///     \since 5.3
    /// 
    ///     Returns true if the format option \a option is set; otherwise returns false.
    /// 
    ///     \sa options()
    test_option(opt: SurfaceFormat::FormatOptions) -> bool,
    ///     \since 5.3
    /// 
    ///     Sets the format options to \a options.
    /// 
    ///     \sa options(), testOption()
    set_options(options: SurfaceFormat::FormatOptions),
    ///     \since 5.3
    /// 
    ///     Sets the format option \a option if \a on is true; otherwise, clears the option.
    /// 
    ///     \sa setOptions(), options(), testOption()
    set_option(option: SurfaceFormat::FormatOption, on: bool),
    ///     \since 5.3
    /// 
    ///     Returns true if the format option \a option is set; otherwise returns false.
    /// 
    ///     \sa options()
    test_option(option: SurfaceFormat::FormatOption) -> bool,
    ///     \since 5.3
    /// 
    ///     Returns the currently set format options.
    /// 
    ///     \sa setOption(), setOptions(), testOption()
    options() -> SurfaceFormat::FormatOptions,
    ///     Returns the swap interval.
    /// 
    ///     \since 5.3
    /// 
    ///     \sa setSwapInterval()
    swap_interval() -> i32,
    set_swap_interval(interval: i32),
    ///     \return the color space.
    /// 
    ///     \since 5.10
    /// 
    ///     \sa setColorSpace()
    color_space() -> SurfaceFormat::ColorSpace,
    set_color_space(color_space: SurfaceFormat::ColorSpace),
    [static] set_default_format(format: &SurfaceFormatType),
    [static] default_format() -> SurfaceFormat,
}

// vim: syntax=rust expandtab ts=4 sw=4
