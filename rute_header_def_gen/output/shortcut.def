/// 
/// The QShortcut class provides a way of connecting keyboard
/// shortcuts to Qt's [signals and slots](signals%20and%20slots)
/// mechanism, so that
/// objects can be informed when a shortcut is executed. The shortcut
/// can be set up to contain all the key presses necessary to
/// describe a keyboard shortcut, including the states of modifier
/// keys such as **Shift,** **Ctrl,** and **Alt.**
/// 
/// On certain widgets, using '&' in front of a character will
/// automatically create a mnemonic (a shortcut) for that character,
/// e.g. will create the shortcut **Alt+X** (use '&&' to
/// display an actual ampersand). The widget might consume and perform
/// an action on a given shortcut. On X11 the ampersand will not be
/// shown and the character will be underlined. On Windows, shortcuts
/// are normally not displayed until the user presses the **Alt**
/// key, but this is a setting the user can change. On Mac, shortcuts
/// are disabled by default. Call [qt_set_sequence_auto_mnemonic()](qt_set_sequence_auto_mnemonic())
/// to
/// enable them. However, because mnemonic shortcuts do not fit in
/// with Aqua's guidelines, Qt will not show the shortcut character
/// underlined.
/// 
/// For applications that use menus, it may be more convenient to
/// use the convenience functions provided in the QMenu class to
/// assign keyboard shortcuts to menu items as they are created.
/// Alternatively, shortcuts may be associated with other types of
/// actions in the QAction class.
/// 
/// The simplest way to create a shortcut for a particular widget is
/// to construct the shortcut with a key sequence. For example:
/// 
/// When the user types the [key sequence](QKeySequence)
/// 
/// for a given shortcut, the shortcut's activated() signal is
/// emitted. (In the case of ambiguity, the activatedAmbiguously()
/// signal is emitted.) A shortcut is by Qt's event
/// loop when the shortcut's parent widget is receiving events.
/// 
/// A shortcut's key sequence can be set with setKey() and retrieved
/// with key(). A shortcut can be enabled or disabled with
/// setEnabled(), and can have help text set with
/// setWhatsThis().
/// 
/// **See also:** QShortcutEvent
/// QKeySequence
/// QAction
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Shortcut : Object {
    set_key(key: &KeySequenceType),
    /// 
    /// This is a key sequence with an optional combination of Shift, Ctrl,
    /// and Alt. The key sequence may be supplied in a number of ways:
    /// 
    /// By default, this property contains an empty key sequence.
    key() -> KeySequence,
    set_enabled(enable: bool),
    is_enabled() -> bool,
    set_context(context: Rute::ShortcutContext),
    /// 
    /// A shortcut's context decides in which circumstances a shortcut is
    /// allowed to be triggered. The normal context is Qt::WindowShortcut,
    /// which allows the shortcut to trigger if the parent (the widget
    /// containing the shortcut) is a subwidget of the active top-level
    /// window.
    /// 
    /// By default, this property is set to Qt::WindowShortcut.
    context() -> Rute::ShortcutContext,
    set_whats_this(text: String),
    /// 
    /// The text will be shown when the application is in mode and the user types the shortcut key() sequence.
    /// 
    /// To set help on a menu item (with or without a
    /// shortcut key), set the help on the item's action.
    /// 
    /// By default, this property contains an empty string.
    /// 
    /// **See also:** QWhatsThis::inWhatsThisMode()
    /// QAction::setWhatsThis()
    whats_this() -> String,
    set_auto_repeat(on: bool),
    /// 
    /// If true, the shortcut will auto repeat when the keyboard shortcut
    /// combination is held down, provided that keyboard auto repeat is
    /// enabled on the system.
    /// The default value is true.
    auto_repeat() -> bool,
    /// 
    /// Returns the shortcut's ID.
    /// 
    /// **See also:** QShortcutEvent::shortcutId()
    id() -> i32,
    /// 
    /// Returns the shortcut's parent widget.
    parent_widget() -> Widget?,
    /// 
    /// This signal is emitted when the user types the shortcut's key
    /// sequence.
    /// 
    /// **See also:** activatedAmbiguously()
    /// 
    /// When a key sequence is being typed at the keyboard, it is said to
    /// be ambiguous as long as it matches the start of more than one
    /// shortcut.
    /// 
    /// When a shortcut's key sequence is completed,
    /// activatedAmbiguously() is emitted if the key sequence is still
    /// ambiguous (i.e., it is the start of one or more other shortcuts).
    /// The activated() signal is not emitted in this case.
    /// 
    /// **See also:** activated()
    [signal] activated(),
    /// 
    /// When a key sequence is being typed at the keyboard, it is said to
    /// be ambiguous as long as it matches the start of more than one
    /// shortcut.
    /// 
    /// When a shortcut's key sequence is completed,
    /// activatedAmbiguously() is emitted if the key sequence is still
    /// ambiguous (i.e., it is the start of one or more other shortcuts).
    /// The activated() signal is not emitted in this case.
    /// 
    /// **See also:** activated()
    [signal] activated_ambiguously(),
    [event] event(e: *EventType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
