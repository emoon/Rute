///     \class QShortcut
///     \brief The QShortcut class is used to create keyboard shortcuts.
/// 
///     \ingroup events
///     \inmodule QtWidgets
/// 
///     The QShortcut class provides a way of connecting keyboard
///     shortcuts to Qt's \l{signals and slots} mechanism, so that
///     objects can be informed when a shortcut is executed. The shortcut
///     can be set up to contain all the key presses necessary to
///     describe a keyboard shortcut, including the states of modifier
///     keys such as \uicontrol Shift, \uicontrol Ctrl, and \uicontrol Alt.
/// 
///     \target mnemonic
/// 
///     On certain widgets, using '&' in front of a character will
///     automatically create a mnemonic (a shortcut) for that character,
///     e.g. "E&xit" will create the shortcut \uicontrol Alt+X (use '&&' to
///     display an actual ampersand). The widget might consume and perform
///     an action on a given shortcut. On X11 the ampersand will not be
///     shown and the character will be underlined. On Windows, shortcuts
///     are normally not displayed until the user presses the \uicontrol Alt
///     key, but this is a setting the user can change. On Mac, shortcuts
///     are disabled by default. Call \l qt_set_sequence_auto_mnemonic() to
///     enable them. However, because mnemonic shortcuts do not fit in
///     with Aqua's guidelines, Qt will not show the shortcut character
///     underlined.
/// 
///     For applications that use menus, it may be more convenient to
///     use the convenience functions provided in the QMenu class to
///     assign keyboard shortcuts to menu items as they are created.
///     Alternatively, shortcuts may be associated with other types of
///     actions in the QAction class.
/// 
///     The simplest way to create a shortcut for a particular widget is
///     to construct the shortcut with a key sequence. For example:
/// 
///     \snippet code/src_gui_kernel_qshortcut.cpp 0
/// 
///     When the user types the \l{QKeySequence}{key sequence}
///     for a given shortcut, the shortcut's activated() signal is
///     emitted. (In the case of ambiguity, the activatedAmbiguously()
///     signal is emitted.) A shortcut is "listened for" by Qt's event
///     loop when the shortcut's parent widget is receiving events.
/// 
///     A shortcut's key sequence can be set with setKey() and retrieved
///     with key(). A shortcut can be enabled or disabled with
///     setEnabled(), and can have "What's This?" help text set with
///     setWhatsThis().
/// 
///     \sa QShortcutEvent, QKeySequence, QAction
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Shortcut : Object {
    ///     \property QShortcut::key
    ///     \brief the shortcut's key sequence
    /// 
    ///     This is a key sequence with an optional combination of Shift, Ctrl,
    ///     and Alt. The key sequence may be supplied in a number of ways:
    /// 
    ///     \snippet code/src_gui_kernel_qshortcut.cpp 1
    /// 
    ///     By default, this property contains an empty key sequence.
    set_key(key: &KeySequenceType),
    key() -> KeySequence,
    ///     \property QShortcut::enabled
    ///     \brief whether the shortcut is enabled
    /// 
    ///     An enabled shortcut emits the activated() or activatedAmbiguously()
    ///     signal when a QShortcutEvent occurs that matches the shortcut's
    ///     key() sequence.
    /// 
    ///     If the application is in \c WhatsThis mode the shortcut will not emit
    ///     the signals, but will show the "What's This?" text instead.
    /// 
    ///     By default, this property is \c true.
    /// 
    ///     \sa whatsThis
    set_enabled(enable: bool),
    is_enabled() -> bool,
    ///     \property QShortcut::context
    ///     \brief the context in which the shortcut is valid
    /// 
    ///     A shortcut's context decides in which circumstances a shortcut is
    ///     allowed to be triggered. The normal context is Qt::WindowShortcut,
    ///     which allows the shortcut to trigger if the parent (the widget
    ///     containing the shortcut) is a subwidget of the active top-level
    ///     window.
    /// 
    ///     By default, this property is set to Qt::WindowShortcut.
    set_context(context: Rute::ShortcutContext),
    context() -> Rute::ShortcutContext,
    ///     \property QShortcut::whatsThis
    ///     \brief the shortcut's "What's This?" help text
    /// 
    ///     The text will be shown when the application is in "What's
    ///     This?" mode and the user types the shortcut key() sequence.
    /// 
    ///     To set "What's This?" help on a menu item (with or without a
    ///     shortcut key), set the help on the item's action.
    /// 
    ///     By default, this property contains an empty string.
    /// 
    ///     \sa QWhatsThis::inWhatsThisMode(), QAction::setWhatsThis()
    set_whats_this(text: String),
    whats_this() -> String,
    ///     \property QShortcut::autoRepeat
    ///     \brief whether the shortcut can auto repeat
    ///     \since 4.2
    /// 
    ///     If true, the shortcut will auto repeat when the keyboard shortcut
    ///     combination is held down, provided that keyboard auto repeat is
    ///     enabled on the system.
    ///     The default value is true.
    set_auto_repeat(on: bool),
    auto_repeat() -> bool,
    ///     Returns the shortcut's ID.
    /// 
    ///     \sa QShortcutEvent::shortcutId()
    id() -> i32,
    parent_widget() -> Widget?,
    [signal] activated(),
    [signal] activated_ambiguously(),
    ///     \internal
    [event] event(e: *EventType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
