
struct PlatformWindow {
    [event] initialize(),
    window() -> Window?,
    parent() -> PlatformWindow?,
    screen() -> PlatformScreen?,
    [event] format() -> SurfaceFormat,
    [event] frame_margins() -> Margins,
    [event] safe_area_margins() -> Margins,
    [event] set_visible(visible: bool),
    [event] set_window_flags(flags: Rute::WindowFlags),
    [event] set_window_state(state: Rute::WindowStates),
    [event] win_id() -> WId,
    [event] set_parent(window: *PlatformWindowType),
    [event] set_window_title(title: String),
    [event] set_window_file_path(title: String),
    [event] set_window_icon(icon: &IconType),
    [event] raise(),
    [event] lower(),
    [event] is_exposed() -> bool,
    [event] is_active() -> bool,
    [event] is_ancestor_of(child: *PlatformWindowType) -> bool,
    [event] is_embedded() -> bool,
    [event] is_foreign_window() -> bool,
    [event] map_to_global(pos: &PointType) -> Point,
    [event] map_from_global(pos: &PointType) -> Point,
    [event] propagate_size_hints(),
    [event] set_opacity(level: f32),
    [event] set_mask(region: &RegionType),
    [event] request_activate_window(),
    [event] handle_content_orientation_change(orientation: Rute::ScreenOrientation),
    [event] device_pixel_ratio() -> f32,
    [event] set_keyboard_grab_enabled(grab: bool) -> bool,
    [event] set_mouse_grab_enabled(grab: bool) -> bool,
    [event] set_window_modified(modified: bool) -> bool,
    [event] window_event(event: *EventType),
    [event] start_system_resize(pos: &PointType, corner: Rute::Corner) -> bool,
    [event] start_system_move(pos: &PointType) -> bool,
    [event] set_alert_state(enabled: bool),
    [event] is_alert_state() -> bool,
    [event] invalidate_surface(),
    [event] request_update(),
    window_minimum_size() -> Size,
    window_maximum_size() -> Size,
    window_base_size() -> Size,
    window_size_increment() -> Size,
    [static] format_window_title(title: String, separator: String) -> String,
}

// vim: syntax=rust expandtab ts=4 sw=4
