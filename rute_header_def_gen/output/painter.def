enum RenderHint {
    Antialiasing,
    TextAntialiasing,
    SmoothPixmapTransform,
    HighQualityAntialiasing,
    NonCosmeticDefaultPen,
    Qt4CompatiblePainting,
}

enum PixmapFragmentHint {
    OpaqueHint,
}

enum CompositionMode {
    CompositionMode_SourceOver,
    CompositionMode_DestinationOver,
    CompositionMode_Clear,
    CompositionMode_Source,
    CompositionMode_Destination,
    CompositionMode_SourceIn,
    CompositionMode_DestinationIn,
    CompositionMode_SourceOut,
    CompositionMode_DestinationOut,
    CompositionMode_SourceAtop,
    CompositionMode_DestinationAtop,
    CompositionMode_Xor,
    CompositionMode_Plus,
    CompositionMode_Multiply,
    CompositionMode_Screen,
    CompositionMode_Overlay,
    CompositionMode_Darken,
    CompositionMode_Lighten,
    CompositionMode_ColorDodge,
    CompositionMode_ColorBurn,
    CompositionMode_HardLight,
    CompositionMode_SoftLight,
    CompositionMode_Difference,
    CompositionMode_Exclusion,
    RasterOp_SourceOrDestination,
    RasterOp_SourceAndDestination,
    RasterOp_SourceXorDestination,
    RasterOp_NotSourceAndNotDestination,
    RasterOp_NotSourceOrNotDestination,
    RasterOp_NotSourceXorDestination,
    RasterOp_NotSource,
    RasterOp_NotSourceAndDestination,
    RasterOp_SourceAndNotDestination,
    RasterOp_NotSourceOrDestination,
    RasterOp_SourceOrNotDestination,
    RasterOp_ClearDestination,
    RasterOp_SetDestination,
    RasterOp_NotDestination,
}


struct Painter {
    qt_check_for_qgadget_macro(),
    device() -> PaintDevice?,
    begin(arg0: &PaintDeviceType) -> bool,
    end() -> bool,
    is_active() -> bool,
    init_from(device: &PaintDeviceType),
    set_composition_mode(mode: Painter::CompositionMode),
    composition_mode() -> Painter::CompositionMode,
    font() -> Font?,
    set_font(f: &FontType),
    font_info() -> FontInfo,
    set_pen(color: &ColorType),
    set_pen(pen: &PenType),
    set_pen(style: Rute::PenStyle),
    pen() -> Pen?,
    set_brush(brush: &BrushType),
    set_brush(style: Rute::BrushStyle),
    brush() -> Brush?,
    set_background_mode(mode: Rute::BGMode),
    background_mode() -> Rute::BGMode,
    brush_origin() -> Point,
    set_brush_origin(x: i32, y: i32),
    set_brush_origin(arg0: &PointType),
    set_brush_origin(arg0: &PointFType),
    set_background(bg: &BrushType),
    background() -> Brush?,
    opacity() -> f32,
    set_opacity(opacity: f32),
    clip_region() -> Region,
    clip_path() -> PainterPath,
    set_clip_rect(arg0: &RectFType, op: Rute::ClipOperation),
    set_clip_rect(arg0: &RectType, op: Rute::ClipOperation),
    set_clip_rect(x: i32, y: i32, w: i32, h: i32, op: Rute::ClipOperation),
    set_clip_region(arg0: &RegionType, op: Rute::ClipOperation),
    set_clip_path(path: &PainterPathType, op: Rute::ClipOperation),
    set_clipping(enable: bool),
    has_clipping() -> bool,
    clip_bounding_rect() -> RectF,
    save(),
    restore(),
    set_transform(transform: &TransformType, combine: bool),
    device_transform() -> Transform?,
    reset_transform(),
    set_world_transform(matrix: &TransformType, combine: bool),
    world_transform() -> Transform?,
    combined_transform() -> Transform,
    scale(sx: f32, sy: f32),
    shear(sh: f32, sv: f32),
    rotate(a: f32),
    window() -> Rect,
    set_window(window: &RectType),
    set_window(x: i32, y: i32, w: i32, h: i32),
    viewport() -> Rect,
    set_viewport(viewport: &RectType),
    set_viewport(x: i32, y: i32, w: i32, h: i32),
    set_view_transform_enabled(enable: bool),
    view_transform_enabled() -> bool,
    fill_path(path: &PainterPathType, brush: &BrushType),
    draw_path(path: &PainterPathType),
    draw_point(pt: &PointFType),
    draw_point(p: &PointType),
    draw_point(x: i32, y: i32),
    draw_points(points: &PointFType, point_count: i32),
    draw_points(points: &PolygonFType),
    draw_points(points: &PointType, point_count: i32),
    draw_points(points: &PolygonType),
    draw_line(line: &LineFType),
    draw_line(line: &LineType),
    draw_line(x1: i32, y1: i32, x2: i32, y2: i32),
    draw_line(p1: &PointType, p2: &PointType),
    draw_line(p1: &PointFType, p2: &PointFType),
    draw_lines(lines: &LineFType, line_count: i32),
    draw_lines(lines: [LineFType]),
    draw_lines(point_pairs: &PointFType, line_count: i32),
    draw_lines(point_pairs: [PointFType]),
    draw_lines(lines: &LineType, line_count: i32),
    draw_lines(lines: [LineType]),
    draw_lines(point_pairs: &PointType, line_count: i32),
    draw_lines(point_pairs: [PointType]),
    draw_rect(rect: &RectFType),
    draw_rect(x1: i32, y1: i32, w: i32, h: i32),
    draw_rect(rect: &RectType),
    draw_rects(rects: &RectFType, rect_count: i32),
    draw_rects(rectangles: [RectFType]),
    draw_rects(rects: &RectType, rect_count: i32),
    draw_rects(rectangles: [RectType]),
    draw_ellipse(r: &RectFType),
    draw_ellipse(r: &RectType),
    draw_ellipse(x: i32, y: i32, w: i32, h: i32),
    draw_ellipse(center: &PointFType, rx: f32, ry: f32),
    draw_ellipse(center: &PointType, rx: i32, ry: i32),
    draw_polyline(points: &PointFType, point_count: i32),
    draw_polyline(polyline: &PolygonFType),
    draw_polyline(points: &PointType, point_count: i32),
    draw_polyline(polygon: &PolygonType),
    draw_polygon(points: &PointFType, point_count: i32, fill_rule: Rute::FillRule),
    draw_polygon(polygon: &PolygonFType, fill_rule: Rute::FillRule),
    draw_polygon(points: &PointType, point_count: i32, fill_rule: Rute::FillRule),
    draw_polygon(polygon: &PolygonType, fill_rule: Rute::FillRule),
    draw_convex_polygon(points: &PointFType, point_count: i32),
    draw_convex_polygon(polygon: &PolygonFType),
    draw_convex_polygon(points: &PointType, point_count: i32),
    draw_convex_polygon(polygon: &PolygonType),
    draw_arc(rect: &RectFType, a: i32, alen: i32),
    draw_arc(arg0: &RectType, a: i32, alen: i32),
    draw_arc(x: i32, y: i32, w: i32, h: i32, a: i32, alen: i32),
    draw_pie(rect: &RectFType, a: i32, alen: i32),
    draw_pie(x: i32, y: i32, w: i32, h: i32, a: i32, alen: i32),
    draw_pie(arg0: &RectType, a: i32, alen: i32),
    draw_chord(rect: &RectFType, a: i32, alen: i32),
    draw_chord(x: i32, y: i32, w: i32, h: i32, a: i32, alen: i32),
    draw_chord(arg0: &RectType, a: i32, alen: i32),
    draw_rounded_rect(rect: &RectFType, x_radius: f32, y_radius: f32, mode: Rute::SizeMode),
    draw_rounded_rect(x: i32, y: i32, w: i32, h: i32, x_radius: f32, y_radius: f32, mode: Rute::SizeMode),
    draw_rounded_rect(rect: &RectType, x_radius: f32, y_radius: f32, mode: Rute::SizeMode),
    draw_round_rect(r: &RectFType, xround: i32, yround: i32),
    draw_round_rect(x: i32, y: i32, w: i32, h: i32, arg0: i32, arg1: i32),
    draw_round_rect(r: &RectType, xround: i32, yround: i32),
    draw_tiled_pixmap(rect: &RectFType, pm: &PixmapType, offset: &PointFType),
    draw_tiled_pixmap(x: i32, y: i32, w: i32, h: i32, arg0: &PixmapType, sx: i32, sy: i32),
    draw_tiled_pixmap(arg0: &RectType, arg1: &PixmapType, arg2: &PointType),
    draw_picture(p: &PointFType, picture: &PictureType),
    draw_picture(x: i32, y: i32, picture: &PictureType),
    draw_picture(p: &PointType, picture: &PictureType),
    draw_pixmap(target_rect: &RectFType, pixmap: &PixmapType, source_rect: &RectFType),
    draw_pixmap(target_rect: &RectType, pixmap: &PixmapType, source_rect: &RectType),
    draw_pixmap(x: i32, y: i32, w: i32, h: i32, pm: &PixmapType, sx: i32, sy: i32, sw: i32, sh: i32),
    draw_pixmap(x: i32, y: i32, pm: &PixmapType, sx: i32, sy: i32, sw: i32, sh: i32),
    draw_pixmap(p: &PointFType, pm: &PixmapType, sr: &RectFType),
    draw_pixmap(p: &PointType, pm: &PixmapType, sr: &RectType),
    draw_pixmap(p: &PointFType, pm: &PixmapType),
    draw_pixmap(p: &PointType, pm: &PixmapType),
    draw_pixmap(x: i32, y: i32, pm: &PixmapType),
    draw_pixmap(r: &RectType, pm: &PixmapType),
    draw_pixmap(x: i32, y: i32, w: i32, h: i32, pm: &PixmapType),
    draw_pixmap_fragments(fragments: onst QPainter::PixmapFragment *, fragment_count: i32, pixmap: &PixmapType, hints: PixmapFragmentHints),
    draw_image(target_rect: &RectFType, image: &ImageType, source_rect: &RectFType, flags: Rute::ImageConversionFlags),
    draw_image(target_rect: &RectType, image: &ImageType, source_rect: &RectType, flags: Rute::ImageConversionFlags),
    draw_image(p: &PointFType, image: &ImageType, sr: &RectFType, flags: Rute::ImageConversionFlags),
    draw_image(p: &PointType, image: &ImageType, sr: &RectType, flags: Rute::ImageConversionFlags),
    draw_image(r: &RectFType, image: &ImageType),
    draw_image(r: &RectType, image: &ImageType),
    draw_image(p: &PointFType, image: &ImageType),
    draw_image(p: &PointType, image: &ImageType),
    draw_image(x: i32, y: i32, image: &ImageType, sx: i32, sy: i32, sw: i32, sh: i32, flags: Rute::ImageConversionFlags),
    set_layout_direction(direction: Rute::LayoutDirection),
    layout_direction() -> Rute::LayoutDirection,
    draw_glyph_run(position: &PointFType, glyph_run: &GlyphRunType),
    draw_static_text(top_left_position: &PointFType, static_text: &StaticTextType),
    draw_static_text(top_left_position: &PointType, static_text: &StaticTextType),
    draw_static_text(left: i32, top: i32, static_text: &StaticTextType),
    draw_text(p: &PointFType, s: String),
    draw_text(p: &PointType, s: String),
    draw_text(x: i32, y: i32, s: String),
    draw_text(p: &PointFType, str: String, tf: i32, justification_padding: i32),
    draw_text(r: &RectFType, flags: i32, text: String, br: &RectFType),
    draw_text(r: &RectType, flags: i32, text: String, br: &RectType),
    draw_text(x: i32, y: i32, w: i32, h: i32, flags: i32, text: String, br: &RectType),
    draw_text(r: &RectFType, text: String, o: &TextOptionType),
    bounding_rect(rect: &RectFType, flags: i32, text: String) -> RectF,
    bounding_rect(rect: &RectType, flags: i32, text: String) -> Rect,
    bounding_rect(x: i32, y: i32, w: i32, h: i32, flags: i32, text: String) -> Rect,
    bounding_rect(rect: &RectFType, text: String, o: &TextOptionType) -> RectF,
    draw_text_item(p: &PointFType, ti: &TextItemType),
    draw_text_item(x: i32, y: i32, ti: &TextItemType),
    draw_text_item(p: &PointType, ti: &TextItemType),
    fill_rect(arg0: &RectFType, arg1: &BrushType),
    fill_rect(x: i32, y: i32, w: i32, h: i32, arg0: &BrushType),
    fill_rect(arg0: &RectType, arg1: &BrushType),
    fill_rect(arg0: &RectFType, color: &ColorType),
    fill_rect(x: i32, y: i32, w: i32, h: i32, color: &ColorType),
    fill_rect(arg0: &RectType, color: &ColorType),
    fill_rect(x: i32, y: i32, w: i32, h: i32, c: Rute::GlobalColor),
    fill_rect(r: &RectType, c: Rute::GlobalColor),
    fill_rect(r: &RectFType, c: Rute::GlobalColor),
    fill_rect(x: i32, y: i32, w: i32, h: i32, style: Rute::BrushStyle),
    fill_rect(r: &RectType, style: Rute::BrushStyle),
    fill_rect(r: &RectFType, style: Rute::BrushStyle),
    erase_rect(arg0: &RectFType),
    erase_rect(x: i32, y: i32, w: i32, h: i32),
    erase_rect(arg0: &RectType),
    set_render_hint(hint: Painter::RenderHint, on: bool),
    set_render_hints(hints: RenderHints, on: bool),
    render_hints() -> RenderHints,
    test_render_hint(hint: Painter::RenderHint) -> bool,
    paint_engine() -> PaintEngine?,
    [static] set_redirected(device: &PaintDeviceType, replacement: &PaintDeviceType, offset: &PointType),
    [static] redirected(device: &PaintDeviceType, offset: &PointType) -> PaintDevice?,
    [static] restore_redirected(device: &PaintDeviceType),
    begin_native_painting(),
    end_native_painting(),
}

// vim: syntax=rust expandtab ts=4 sw=4
