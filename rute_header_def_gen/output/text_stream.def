[org_name(QTextStream)]
enum RealNumberNotation {
    SmartNotation,
    FixedNotation,
    ScientificNotation,
}

[org_name(QTextStream)]
enum FieldAlignment {
    AlignLeft,
    AlignRight,
    AlignCenter,
    AlignAccountingStyle,
}

[org_name(QTextStream)]
enum Status {
    Ok,
    ReadPastEnd,
    ReadCorruptData,
    WriteFailed,
}

[org_name(QTextStream)]
enum NumberFlag {
    ShowBase,
    ForcePoint,
    ForceSign,
    UppercaseBase,
    UppercaseDigits,
}


struct TextStream {
    set_codec(codec: *TextCodecType),
    set_codec(codec_name: *char),
    codec() -> TextCodec?,
    set_auto_detect_unicode(enabled: bool),
    auto_detect_unicode() -> bool,
    set_generate_byte_order_mark(generate: bool),
    generate_byte_order_mark() -> bool,
    set_locale(locale: &LocaleType),
    locale() -> Locale,
    set_device(device: *IODeviceType),
    device() -> IODevice?,
    status() -> TextStream::Status,
    set_status(status: TextStream::Status),
    reset_status(),
    at_end() -> bool,
    reset(),
    flush(),
    seek(pos: i64) -> bool,
    pos() -> i64,
    skip_white_space(),
    read_line(maxlen: i64) -> String,
    read_line_into(line: String, maxlen: i64) -> bool,
    read_all() -> String,
    read(maxlen: i64) -> String,
    set_field_alignment(alignment: TextStream::FieldAlignment),
    field_alignment() -> TextStream::FieldAlignment,
    set_pad_char(ch: CharType),
    pad_char() -> Char,
    set_field_width(width: i32),
    field_width() -> i32,
    set_number_flags(flags: TextStream::NumberFlags),
    number_flags() -> TextStream::NumberFlags,
    set_integer_base(base: i32),
    integer_base() -> i32,
    set_real_number_notation(notation: TextStream::RealNumberNotation),
    real_number_notation() -> TextStream::RealNumberNotation,
    set_real_number_precision(precision: i32),
    real_number_precision() -> i32,
}

// vim: syntax=rust expandtab ts=4 sw=4
