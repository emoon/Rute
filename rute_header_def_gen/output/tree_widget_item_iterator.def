/// 
/// The iterator will walk the items in a pre-order traversal order, thus visiting the
/// parent node *before* it continues to the child nodes.
/// 
/// For example, the following code examples each item in a tree, checking the
/// text in the first column against a user-specified search string:
/// 
/// It is also possible to filter out certain types of node by passing certain
/// [flags](IteratorFlag)
/// to the constructor of QTreeWidgetItemIterator.
/// 
/// **See also:** [`TreeWidget`]
/// {Model/View Programming}
/// [`TreeWidgetItem`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TreeWidgetItemIterator {
}

[org_name(QTreeWidgetItemIterator)]
enum IteratorFlag {
    /// 
    All = 0,
    /// 
    Hidden = 1,
    /// 
    NotHidden = 2,
    /// 
    Selected = 4,
    /// 
    Unselected = 8,
    /// 
    Selectable = 16,
    /// 
    NotSelectable = 32,
    /// 
    DragEnabled = 64,
    /// 
    DragDisabled = 128,
    /// 
    DropEnabled = 256,
    /// 
    DropDisabled = 512,
    /// 
    HasChildren = 1024,
    /// 
    NoChildren = 2048,
    /// 
    Checked = 4096,
    /// 
    NotChecked = 8192,
    /// 
    Enabled = 16384,
    /// 
    Disabled = 32768,
    /// 
    Editable = 65536,
    /// 
    NotEditable = 131072,
    /// 
    UserFlag = 16777216,
}

// vim: syntax=rust expandtab ts=4 sw=4
