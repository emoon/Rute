/// 
/// The iterator will walk the items in a pre-order traversal order, thus visiting the
/// parent node *before* it continues to the child nodes.
/// 
/// For example, the following code examples each item in a tree, checking the
/// text in the first column against a user-specified search string:
/// 
/// It is also possible to filter out certain types of node by passing certain
/// [flags](IteratorFlag)
/// to the constructor of QTreeWidgetItemIterator.
/// 
/// **See also:** QTreeWidget
/// {Model/View Programming}
/// QTreeWidgetItem
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QTreeWidgetItemIterator)]
enum IteratorFlag {
    All,
    Hidden,
    NotHidden,
    Selected,
    Unselected,
    Selectable,
    NotSelectable,
    DragEnabled,
    DragDisabled,
    DropEnabled,
    DropDisabled,
    HasChildren,
    NoChildren,
    Checked,
    NotChecked,
    Enabled,
    Disabled,
    Editable,
    NotEditable,
    UserFlag,
}


struct TreeWidgetItemIterator {
}

// vim: syntax=rust expandtab ts=4 sw=4
