///     \class QFontInfo
///     \reentrant
/// 
///     \brief The QFontInfo class provides general information about fonts.
///     \inmodule QtGui
/// 
///     \ingroup appearance
///     \ingroup shared
/// 
///     The QFontInfo class provides the same access functions as QFont,
///     e.g. family(), pointSize(), italic(), weight(), fixedPitch(),
///     styleHint() etc. But whilst the QFont access functions return the
///     values that were set, a QFontInfo object returns the values that
///     apply to the font that will actually be used to draw the text.
/// 
///     For example, when the program asks for a 25pt Courier font on a
///     machine that has a non-scalable 24pt Courier font, QFont will
///     (normally) use the 24pt Courier for rendering. In this case,
///     QFont::pointSize() returns 25 and QFontInfo::pointSize() returns
///     24.
/// 
///     There are three ways to create a QFontInfo object.
///     \list 1
///     \li Calling the QFontInfo constructor with a QFont creates a font
///     info object for a screen-compatible font, i.e. the font cannot be
///     a printer font. If the font is changed later, the font
///     info object is \e not updated.
/// 
///     (Note: If you use a printer font the values returned may be
///     inaccurate. Printer fonts are not always accessible so the nearest
///     screen font is used if a printer font is supplied.)
/// 
///     \li QWidget::fontInfo() returns the font info for a widget's font.
///     This is equivalent to calling QFontInfo(widget->font()). If the
///     widget's font is changed later, the font info object is \e not
///     updated.
/// 
///     \li QPainter::fontInfo() returns the font info for a painter's
///     current font. If the painter's font is changed later, the font
///     info object is \e not updated.
///     \endlist
/// 
///     \sa QFont, QFontMetrics, QFontDatabase

struct FontInfo {
    swap(other: &FontInfoType),
    ///     Returns the family name of the matched window system font.
    /// 
    ///     \sa QFont::family()
    family() -> String,
    ///     \since 4.8
    /// 
    ///     Returns the style name of the matched window system font on
    ///     systems that support it.
    /// 
    ///     \sa QFont::styleName()
    style_name() -> String,
    ///     Returns the pixel size of the matched window system font.
    /// 
    ///     \sa QFont::pointSize()
    pixel_size() -> i32,
    ///     Returns the point size of the matched window system font.
    /// 
    ///     \sa pointSizeF(), QFont::pointSize()
    point_size() -> i32,
    ///     Returns the point size of the matched window system font.
    /// 
    ///     \sa QFont::pointSizeF()
    point_size_f() -> f32,
    ///     Returns the italic value of the matched window system font.
    /// 
    ///     \sa QFont::italic()
    italic() -> bool,
    ///     Returns the style value of the matched window system font.
    /// 
    ///     \sa QFont::style()
    style() -> Font::Style,
    ///     Returns the weight of the matched window system font.
    /// 
    ///     \sa QFont::weight(), bold()
    weight() -> i32,
    bold() -> bool,
    ///     Returns the underline value of the matched window system font.
    /// 
    ///   \sa QFont::underline()
    /// 
    ///   \internal
    /// 
    ///   Here we read the underline flag directly from the QFont.
    ///   This is OK for X11 and for Windows because we always get what we want.
    underline() -> bool,
    ///     Returns the overline value of the matched window system font.
    /// 
    ///     \sa QFont::overline()
    /// 
    ///     \internal
    /// 
    ///     Here we read the overline flag directly from the QFont.
    ///     This is OK for X11 and for Windows because we always get what we want.
    overline() -> bool,
    ///     Returns the fixed pitch value of the matched window system font.
    /// 
    ///     \sa QFont::fixedPitch()
    fixed_pitch() -> bool,
    ///     Returns the style of the matched window system font.
    /// 
    ///     Currently only returns the style hint set in QFont.
    /// 
    ///     \sa QFont::styleHint(), QFont::StyleHint
    style_hint() -> Font::StyleHint,
    ///     \deprecated
    /// 
    ///     Returns \c true if the font is a raw mode font; otherwise returns
    ///     false.
    /// 
    ///     If it is a raw mode font, all other functions in QFontInfo will
    ///     return the same values set in the QFont, regardless of the font
    ///     actually used.
    /// 
    ///     \sa QFont::rawMode()
    raw_mode() -> bool,
    ///     Returns \c true if the matched window system font is exactly the same
    ///     as the one specified by the font; otherwise returns \c false.
    /// 
    ///     \sa QFont::exactMatch()
    exact_match() -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
