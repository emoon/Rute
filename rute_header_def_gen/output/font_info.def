/// 
/// The QFontInfo class provides the same access functions as QFont,
/// e.g. family(), pointSize(), italic(), weight(), fixedPitch(),
/// styleHint() etc. But whilst the QFont access functions return the
/// values that were set, a QFontInfo object returns the values that
/// apply to the font that will actually be used to draw the text.
/// 
/// For example, when the program asks for a 25pt Courier font on a
/// machine that has a non-scalable 24pt Courier font, QFont will
/// (normally) use the 24pt Courier for rendering. In this case,
/// QFont::pointSize() returns 25 and QFontInfo::pointSize() returns
/// 24.
/// 
/// There are three ways to create a QFontInfo object.
/// * Calling the QFontInfo constructor with a QFont creates a font info object for a screen-compatible font, i.e. the font cannot be a printer font. If the font is changed later, the font info object is *not* updated. (Note: If you use a printer font the values returned may be inaccurate. Printer fonts are not always accessible so the nearest screen font is used if a printer font is supplied.)
/// * QWidget::fontInfo() returns the font info for a widget's font. This is equivalent to calling QFontInfo(widget->font()). If the widget's font is changed later, the font info object is *not* updated.
/// * QPainter::fontInfo() returns the font info for a painter's current font. If the painter's font is changed later, the font info object is *not* updated.
/// 
/// **See also:** [`Font`]
/// [`FontMetrics`]
/// [`FontDatabase`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct FontInfo {
    /// 
    /// Swaps this font info instance with *other.* This function is very
    /// fast and never fails.
    swap(other: &FontInfoType),
    /// 
    /// Returns the family name of the matched window system font.
    /// 
    /// **See also:** [`Font::family`]
    family() -> String,
    /// 
    /// Returns the style name of the matched window system font on
    /// systems that support it.
    /// 
    /// **See also:** [`Font::style_name`]
    style_name() -> String,
    /// 
    /// Returns the pixel size of the matched window system font.
    /// 
    /// **See also:** [`Font::point_size`]
    pixel_size() -> i32,
    /// 
    /// Returns the point size of the matched window system font.
    /// 
    /// **See also:** [`point_size_f()`]
    /// [`Font::point_size`]
    /// 
    /// Returns the point size of the matched window system font.
    /// 
    /// **See also:** [`Font::point_size_f`]
    point_size() -> i32,
    /// 
    /// Returns the point size of the matched window system font.
    /// 
    /// **See also:** [`Font::point_size_f`]
    point_size_f() -> f32,
    /// 
    /// Returns the italic value of the matched window system font.
    /// 
    /// **See also:** [`Font::italic`]
    italic() -> bool,
    /// 
    /// Returns the style name of the matched window system font on
    /// systems that support it.
    /// 
    /// **See also:** [`Font::style_name`]
    /// 
    /// Returns the style value of the matched window system font.
    /// 
    /// **See also:** [`Font::style`]
    /// 
    /// Returns the style of the matched window system font.
    /// 
    /// Currently only returns the style hint set in QFont.
    /// 
    /// **See also:** [`Font::style_hint`]
    /// [`Font::style_hint()`]
    style() -> Font::Style,
    /// 
    /// Returns the weight of the matched window system font.
    /// 
    /// **See also:** [`Font::weight`]
    /// [`bold()`]
    weight() -> i32,
    /// 
    /// Returns `true` if weight() would return a value greater than
    /// QFont::Normal; otherwise returns `false.`
    /// 
    /// **See also:** [`weight()`]
    /// [`Font::bold`]
    bold() -> bool,
    underline() -> bool,
    overline() -> bool,
    /// 
    /// Returns the fixed pitch value of the matched window system font.
    /// 
    /// **See also:** [`Font::fixed_pitch`]
    fixed_pitch() -> bool,
    /// 
    /// Returns the style of the matched window system font.
    /// 
    /// Currently only returns the style hint set in QFont.
    /// 
    /// **See also:** [`Font::style_hint`]
    /// [`Font::style_hint()`]
    style_hint() -> Font::StyleHint,
    /// 
    /// Returns `true` if the font is a raw mode font; otherwise returns
    /// false.
    /// 
    /// If it is a raw mode font, all other functions in QFontInfo will
    /// return the same values set in the QFont, regardless of the font
    /// actually used.
    /// 
    /// **See also:** [`Font::raw_mode`]
    raw_mode() -> bool,
    /// 
    /// Returns `true` if the matched window system font is exactly the same
    /// as the one specified by the font; otherwise returns `false.`
    /// 
    /// **See also:** [`Font::exact_match`]
    exact_match() -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
