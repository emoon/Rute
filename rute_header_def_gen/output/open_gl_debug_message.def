[org_name(QOpenGLDebugMessage)]
enum Source {
    InvalidSource,
    APISource,
    WindowSystemSource,
    ShaderCompilerSource,
    ThirdPartySource,
    ApplicationSource,
    OtherSource,
    LastSource,
    AnySource,
}

[org_name(QOpenGLDebugMessage)]
enum Type {
    InvalidType,
    ErrorType,
    DeprecatedBehaviorType,
    UndefinedBehaviorType,
    PortabilityType,
    PerformanceType,
    OtherType,
    MarkerType,
    GroupPushType,
    GroupPopType,
    LastType,
    AnyType,
}

[org_name(QOpenGLDebugMessage)]
enum Severity {
    InvalidSeverity,
    HighSeverity,
    MediumSeverity,
    LowSeverity,
    NotificationSeverity,
    LastSeverity,
    AnySeverity,
}


struct OpenGLDebugMessage {
    swap(other: &OpenGLDebugMessageType),
    source() -> OpenGLDebugMessage::Source,
    type() -> OpenGLDebugMessage::Type,
    severity() -> OpenGLDebugMessage::Severity,
    id() -> i32,
    message() -> String,
    [static] create_application_message(text: String, id: i32, severity: OpenGLDebugMessage::Severity, type: OpenGLDebugMessage::Type) -> OpenGLDebugMessage,
    [static] create_third_party_message(text: String, id: i32, severity: OpenGLDebugMessage::Severity, type: OpenGLDebugMessage::Type) -> OpenGLDebugMessage,
}

// vim: syntax=rust expandtab ts=4 sw=4
