/// 
/// Debug messages are usually created by the OpenGL server and then read by
/// OpenGL clients (either from the OpenGL internal debug log, or logged in real-time).
/// A debug message has a textual representation, a vendor-specific numeric id,
/// a source, a type and a severity.
/// 
/// It's also possible for applications or third-party libraries and toolkits
/// to create and insert messages in the debug log. In order to do so, you can use
/// the createApplicationMessage() or the createThirdPartyMessage() static functions.
/// 
/// **See also:** [`OpenGLDebugLogger`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct OpenGLDebugMessage {
    /// 
    /// Swaps the message *debugMessage* with this message. This operation is very
    /// fast and never fails.
    swap(other: &OpenGLDebugMessageType),
    /// 
    /// Returns the source of the debug message.
    source() -> OpenGLDebugMessage::Source,
    /// 
    /// Returns the type of the debug message.
    type() -> OpenGLDebugMessage::Type,
    /// 
    /// Returns the severity of the debug message.
    severity() -> OpenGLDebugMessage::Severity,
    /// 
    /// Returns the id of the debug message. Ids are generally vendor-specific.
    id() -> GLuint,
    /// 
    /// Returns the textual message contained by this debug message.
    message() -> String,
    /// 
    /// Constructs and returns a debug message with *text* as its text, *id*
    /// as id, *severity* as severity, and *type* as type. The message source
    /// will be set to ApplicationSource.
    /// 
    /// **See also:** [`OpenGLDebugLogger::log_message`]
    /// [`create_third_party_message()`]
    [static] create_application_message(text: String, id: GLuint, severity: OpenGLDebugMessage::Severity, type: OpenGLDebugMessage::Type) -> OpenGLDebugMessage,
    /// 
    /// Constructs and returns a debug message with *text* as its text, *id*
    /// as id, *severity* as severity, and *type* as type. The message source
    /// will be set to ThirdPartySource.
    /// 
    /// **See also:** [`OpenGLDebugLogger::log_message`]
    /// [`create_application_message()`]
    [static] create_third_party_message(text: String, id: GLuint, severity: OpenGLDebugMessage::Severity, type: OpenGLDebugMessage::Type) -> OpenGLDebugMessage,
}

[org_name(QOpenGLDebugMessage)]
enum Source {
    /// The source of the message is invalid; this is the source of a default-constructed QOpenGLDebugMessage object.
    InvalidSource,
    /// The message was generated in response to OpenGL API calls.
    APISource,
    /// The message was generated by the window system.
    WindowSystemSource,
    /// The message was generated by the shader compiler.
    ShaderCompilerSource,
    /// The message was generated by a third party, for instance an OpenGL framework a or debugging toolkit.
    ThirdPartySource,
    /// The message was generated by the application itself.
    ApplicationSource,
    /// The message was generated by a source not included in this enumeration.
    OtherSource,
    LastSource,
    /// This value corresponds to a mask of all possible message sources.
    AnySource,
}

[org_name(QOpenGLDebugMessage)]
enum Type {
    /// The type of the message is invalid; this is the type of a default-constructed QOpenGLDebugMessage object.
    InvalidType,
    /// The message represents an error.
    ErrorType,
    /// The message represents an usage of deprecated behavior.
    DeprecatedBehaviorType,
    /// The message represents an usage of undefined behavior.
    UndefinedBehaviorType,
    /// The message represents an usage of vendor-specific behavior, that might pose portability concerns.
    PortabilityType,
    /// The message represents a performance issue.
    PerformanceType,
    /// The message represents a type not included in this enumeration.
    OtherType,
    /// The message represents a marker in the debug log.
    MarkerType,
    /// The message represents a debug group push operation.
    GroupPushType,
    /// The message represents a debug group pop operation.
    GroupPopType,
    LastType,
    /// This value corresponds to a mask of all possible message types.
    AnyType,
}

[org_name(QOpenGLDebugMessage)]
enum Severity {
    /// The severity of the message is invalid; this is the severity of a default-constructed QOpenGLDebugMessage object.
    InvalidSeverity,
    /// The message has a high severity.
    HighSeverity,
    /// The message has a medium severity.
    MediumSeverity,
    /// The message has a low severity.
    LowSeverity,
    /// The message is a notification.
    NotificationSeverity,
    LastSeverity,
    /// This value corresponds to a mask of all possible message severities.
    AnySeverity,
}

// vim: syntax=rust expandtab ts=4 sw=4
