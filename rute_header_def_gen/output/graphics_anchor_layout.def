/// 
/// The anchor layout allows developers to specify how widgets should be placed relative to
/// each other, and to the layout itself. The specification is made by adding anchors to the
/// layout by calling addAnchor(), addAnchors() or addCornerAnchors().
/// 
/// Existing anchors in the layout can be accessed with the anchor() function.
/// Items that are anchored are automatically added to the layout, and if items
/// are removed, all their anchors will be automatically removed.
/// 
/// Anchors are always set up between edges of an item, where the is also considered to
/// be an edge. Consider the following example:
/// 
/// Here, the right edge of item `a` is anchored to the left edge of item `b` and the bottom
/// edge of item `a` is anchored to the top edge of item `b,` with the result that
/// item `b` will be placed diagonally to the right and below item `b.`
/// 
/// The addCornerAnchors() function provides a simpler way of anchoring the corners
/// of two widgets than the two individual calls to addAnchor() shown in the code
/// above. Here, we see how a widget can be anchored to the top-left corner of the enclosing
/// layout:
/// 
/// In cases where anchors are used to match the widths or heights of widgets, it is
/// convenient to use the addAnchors() function. As with the other functions for specifying
/// anchors, it can also be used to anchor a widget to a layout.
/// 
/// # Size Hints and Size Policies in an Anchor Layout
/// 
/// QGraphicsAnchorLayout respects each item's size hints and size policies.
/// Note that there are some properties of QSizePolicy that are [not respected](Known%20issues)
/// 
/// 
/// # Spacing within an Anchor Layout
/// 
/// The layout may distribute some space between the items. If the spacing has not been
/// explicitly specified, the actual amount of space will usually be 0.
/// 
/// However, if the first edge is the *opposite* of the second edge (e.g., the right edge
/// of the first widget is anchored to the left edge of the second widget), the size of the
/// anchor will be queried from the style through a pixel metric:
/// [PM_LayoutHorizontalSpacing](QStyle::)
/// for horizontal anchors and
/// [PM_LayoutVerticalSpacing](QStyle::)
/// for vertical anchors.
/// 
/// If the spacing is negative, the items will overlap to some extent.
/// 
/// # Known Issues
/// There are some features that QGraphicsAnchorLayout currently does not support.
/// This might change in the future, so avoid using these features if you want to
/// avoid any future regressions in behaviour:
/// 
/// * Stretch factors are not respected.
/// * QSizePolicy::ExpandFlag is not respected.
/// * Height for width is not respected.
/// 
/// **See also:** [`GraphicsLinearLayout`]
/// [`GraphicsGridLayout`]
/// [`GraphicsLayout`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GraphicsAnchorLayout : GraphicsLayout {
    /// 
    /// Creates an anchor between the edge *firstEdge* of item *firstItem* and the edge *secondEdge*
    /// of item *secondItem.* The spacing of the anchor is picked up from the style. Anchors
    /// between a layout edge and an item edge will have a size of 0.
    /// If there is already an anchor between the edges, the new anchor will replace the old one.
    /// 
    /// *firstItem* and *secondItem* are automatically added to the layout if they are not part
    /// of the layout. This means that count() can increase by up to 2.
    /// 
    /// The spacing an anchor will get depends on the type of anchor. For instance, anchors from the
    /// Right edge of one item to the Left edge of another (or vice versa) will use the default
    /// horizontal spacing. The same behaviour applies to Bottom to Top anchors, (but they will use
    /// the default vertical spacing). For all other anchor combinations, the spacing will be 0.
    /// All anchoring functions will follow this rule.
    /// 
    /// The spacing can also be set manually by using QGraphicsAnchor::setSpacing() method.
    /// 
    /// Calling this function where *firstItem* or *secondItem* are ancestors of the layout have
    /// undefined behaviour.
    /// 
    /// **See also:** [`add_anchors()`]
    /// [`add_corner_anchors()`]
    /// 
    /// Anchors two or four edges of *firstItem* with the corresponding
    /// edges of *secondItem,* so that *firstItem* has the same size as
    /// *secondItem* in the dimensions specified by *orientations.*
    /// 
    /// For example, the following example anchors the left and right edges of two items
    /// to match their widths:
    /// 
    /// This can also be achieved using the following line of code:
    /// 
    /// **See also:** [`add_anchor()`]
    /// [`add_corner_anchors()`]
    add_anchor(first_item: *GraphicsLayoutItemType, first_edge: Rute::AnchorPoint, second_item: *GraphicsLayoutItemType, second_edge: Rute::AnchorPoint) -> GraphicsAnchor?,
    /// 
    /// Returns the anchor between the anchor points defined by *firstItem* and *firstEdge* and
    /// *secondItem* and *secondEdge.* If there is no such anchor, the function will return 0.
    anchor(first_item: *GraphicsLayoutItemType, first_edge: Rute::AnchorPoint, second_item: *GraphicsLayoutItemType, second_edge: Rute::AnchorPoint) -> GraphicsAnchor?,
    /// 
    /// Creates two anchors between *firstItem* and *secondItem* specified by the corners,
    /// *firstCorner* and *secondCorner,* where one is for the horizontal edge and another
    /// one for the vertical edge.
    /// 
    /// This is a convenience function, since anchoring corners can be expressed as anchoring
    /// two edges. For instance:
    /// 
    /// This can also be achieved with the following line of code:
    /// 
    /// If there is already an anchor between the edge pairs, it will be replaced by the anchors that
    /// this function specifies.
    /// 
    /// *firstItem* and *secondItem* are automatically added to the layout if they are not part of the
    /// layout. This means that count() can increase by up to 2.
    /// 
    /// **See also:** [`add_anchor()`]
    /// [`add_anchors()`]
    add_corner_anchors(first_item: *GraphicsLayoutItemType, first_corner: Rute::Corner, second_item: *GraphicsLayoutItemType, second_corner: Rute::Corner),
    /// 
    /// Anchors two or four edges of *firstItem* with the corresponding
    /// edges of *secondItem,* so that *firstItem* has the same size as
    /// *secondItem* in the dimensions specified by *orientations.*
    /// 
    /// For example, the following example anchors the left and right edges of two items
    /// to match their widths:
    /// 
    /// This can also be achieved using the following line of code:
    /// 
    /// **See also:** [`add_anchor()`]
    /// [`add_corner_anchors()`]
    add_anchors(first_item: *GraphicsLayoutItemType, second_item: *GraphicsLayoutItemType, orientations: Rute::Orientations),
    /// 
    /// Sets the default horizontal spacing for the anchor layout to *spacing.*
    /// 
    /// **See also:** [`horizontal_spacing()`]
    /// [`set_vertical_spacing()`]
    /// [`set_spacing()`]
    set_horizontal_spacing(spacing: f32),
    /// 
    /// Sets the default vertical spacing for the anchor layout to *spacing.*
    /// 
    /// **See also:** [`vertical_spacing()`]
    /// [`set_horizontal_spacing()`]
    /// [`set_spacing()`]
    set_vertical_spacing(spacing: f32),
    /// 
    /// Sets the default horizontal and the default vertical spacing for the anchor layout to *spacing.*
    /// 
    /// If an item is anchored with no spacing associated with the anchor, it will use the default
    /// spacing.
    /// 
    /// QGraphicsAnchorLayout does not support negative spacings. Setting a negative value will unset the
    /// previous spacing and make the layout use the spacing provided by the current widget style.
    /// 
    /// **See also:** [`set_horizontal_spacing()`]
    /// [`set_vertical_spacing()`]
    set_spacing(spacing: f32),
    /// 
    /// Returns the default horizontal spacing for the anchor layout.
    /// 
    /// **See also:** [`vertical_spacing()`]
    /// [`set_horizontal_spacing()`]
    horizontal_spacing() -> f32,
    /// 
    /// Returns the default vertical spacing for the anchor layout.
    /// 
    /// **See also:** [`horizontal_spacing()`]
    /// [`set_vertical_spacing()`]
    vertical_spacing() -> f32,
    /// 
    /// Removes the layout item at *index* without destroying it. Ownership of
    /// the item is transferred to the caller.
    /// 
    /// Removing an item will also remove any of the anchors associated with it.
    /// 
    /// **See also:** [`item_at()`]
    /// [`count()`]
    [event] remove_at(index: i32),
    /// 
    [event] count() -> i32,
    /// 
    [event] item_at(index: i32) -> GraphicsLayoutItem?,
    /// 
    [event] invalidate(),
    /// 
    [event] size_hint(which: Rute::SizeHint, constraint: &SizeFType) -> SizeF,
}

// vim: syntax=rust expandtab ts=4 sw=4
