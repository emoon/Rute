/// 
/// A note on logical vs physical dots per inch: physical DPI is based on the
/// actual physical pixel sizes when available, and is useful for print preview
/// and other cases where it's desirable to know the exact physical dimensions
/// of screen displayed contents.
/// 
/// Logical dots per inch are used to convert font and user interface elements
/// from point sizes to pixel sizes, and might be different from the physical
/// dots per inch. The logical dots per inch are sometimes user-settable in the
/// desktop environment's settings panel, to let the user globally control UI
/// and font sizes in different applications.
/// 
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Screen : Object {
    /// 
    /// Get the platform screen handle.
    handle() -> PlatformScreen?,
    /// 
    /// For example, on X11 these correspond to the XRandr screen names,
    /// typically , , etc.
    name() -> String,
    /// 
    manufacturer() -> String,
    /// 
    model() -> String,
    /// 
    serial_number() -> String,
    /// 
    depth() -> i32,
    /// 
    size() -> Size,
    /// 
    /// The physical size represents the actual physical dimensions of the
    /// screen's display.
    /// 
    /// Depending on what information the underlying system provides the value
    /// might not be entirely accurate.
    physical_size() -> SizeF,
    /// 
    /// This value represents the actual horizontal pixel density on the screen's display.
    /// Depending on what information the underlying system provides the value might not be
    /// entirely accurate.
    /// 
    /// **See also:** physicalDotsPerInchY()
    physical_dots_per_inch_x() -> f32,
    /// 
    /// This value represents the actual vertical pixel density on the screen's display.
    /// Depending on what information the underlying system provides the value might not be
    /// entirely accurate.
    /// 
    /// **See also:** physicalDotsPerInchX()
    physical_dots_per_inch_y() -> f32,
    /// 
    /// This value represents the actual horizontal pixel density on the screen's display.
    /// Depending on what information the underlying system provides the value might not be
    /// entirely accurate.
    /// 
    /// **See also:** physicalDotsPerInchY()
    /// 
    /// This value represents the actual vertical pixel density on the screen's display.
    /// Depending on what information the underlying system provides the value might not be
    /// entirely accurate.
    /// 
    /// **See also:** physicalDotsPerInchX()
    /// 
    /// This value represents the pixel density on the screen's display.
    /// Depending on what information the underlying system provides the value might not be
    /// entirely accurate.
    /// 
    /// This is a convenience property that's simply the average of the physicalDotsPerInchX
    /// and physicalDotsPerInchY properties.
    /// 
    /// **See also:** physicalDotsPerInchX()
    /// **See also:** physicalDotsPerInchY()
    physical_dots_per_inch() -> f32,
    /// 
    /// This value is used to convert font point sizes to pixel sizes.
    /// 
    /// **See also:** logicalDotsPerInchY()
    logical_dots_per_inch_x() -> f32,
    /// 
    /// This value is used to convert font point sizes to pixel sizes.
    /// 
    /// **See also:** logicalDotsPerInchX()
    logical_dots_per_inch_y() -> f32,
    /// 
    /// This value is used to convert font point sizes to pixel sizes.
    /// 
    /// **See also:** logicalDotsPerInchY()
    /// 
    /// This value is used to convert font point sizes to pixel sizes.
    /// 
    /// **See also:** logicalDotsPerInchX()
    /// 
    /// This value can be used to convert font point sizes to pixel sizes.
    /// 
    /// This is a convenience property that's simply the average of the logicalDotsPerInchX
    /// and logicalDotsPerInchY properties.
    /// 
    /// **See also:** logicalDotsPerInchX()
    /// **See also:** logicalDotsPerInchY()
    logical_dots_per_inch() -> f32,
    /// 
    /// Returns the ratio between physical pixels and device-independent pixels for the screen.
    /// 
    /// Common values are 1.0 on normal displays and 2.0 on displays.
    /// Higher values are also possible.
    /// 
    /// **See also:** QWindow::devicePixelRatio()
    /// QGuiApplication::devicePixelRatio()
    device_pixel_ratio() -> f32,
    /// 
    /// The available size is the size excluding window manager reserved areas
    /// such as task bars and system menus.
    available_size() -> Size,
    /// 
    /// Get the screen's virtual siblings.
    /// 
    /// The virtual siblings are the screen instances sharing the same virtual desktop.
    /// They share a common coordinate system, and windows can freely be moved or
    /// positioned across them without having to be re-created.
    virtual_siblings() -> [Screen?],
    /// 
    /// Returns the pixel size of the virtual desktop corresponding to this screen.
    /// 
    /// This is the combined size of the virtual siblings' individual geometries.
    /// 
    /// **See also:** virtualSiblings()
    virtual_size() -> Size,
    /// 
    /// Returns the available pixel size of the virtual desktop corresponding to this screen.
    /// 
    /// This is the combined size of the virtual siblings' individual available geometries.
    /// 
    /// **See also:** availableSize()
    /// virtualSiblings()
    available_virtual_size() -> Size,
    /// 
    /// The primary screen orientation is Qt::LandscapeOrientation
    /// if the screen geometry's width is greater than or equal to its
    /// height, or Qt::PortraitOrientation otherwise. This property might
    /// change when the screen orientation was changed (i.e. when the
    /// display is rotated).
    /// The behavior is however platform dependent and can often be specified in
    /// an application manifest file.
    /// 
    /// 
    /// This signal is emitted when the primary orientation of the screen
    /// changes with *orientation* as an argument.
    /// 
    /// **See also:** primaryOrientation()
    primary_orientation() -> Rute::ScreenOrientation,
    /// 
    /// Returns the currently set orientation update mask.
    /// 
    /// **See also:** setOrientationUpdateMask()
    /// 
    /// The screen orientation represents the physical orientation
    /// of the display. For example, the screen orientation of a mobile device
    /// will change based on how it is being held. A change to the orientation
    /// might or might not trigger a change to the primary orientation of the screen.
    /// 
    /// Changes to this property will be filtered by orientationUpdateMask(),
    /// so in order to receive orientation updates the application must first
    /// call setOrientationUpdateMask() with a mask of the orientations it wants
    /// to receive.
    /// 
    /// Qt::PrimaryOrientation is never returned.
    /// 
    /// **See also:** primaryOrientation()
    /// 
    /// This signal is emitted when the orientation of the screen
    /// changes with *orientation* as an argument.
    /// 
    /// **See also:** orientation()
    orientation() -> Rute::ScreenOrientation,
    /// 
    /// The native orientation of the screen is the orientation where the logo
    /// sticker of the device appears the right way up, or Qt::PrimaryOrientation
    /// if the platform does not support this functionality.
    /// 
    /// The native orientation is a property of the hardware, and does not change.
    native_orientation() -> Rute::ScreenOrientation,
    /// 
    /// Returns the currently set orientation update mask.
    /// 
    /// **See also:** setOrientationUpdateMask()
    orientation_update_mask() -> Rute::ScreenOrientations,
    /// 
    /// Sets the orientations that the application is interested in receiving
    /// updates for in conjunction with this screen.
    /// 
    /// For example, to receive orientation() updates and thus have
    /// orientationChanged() signals being emitted for LandscapeOrientation and
    /// InvertedLandscapeOrientation, call setOrientationUpdateMask() with
    /// *mask* set to Qt::LandscapeOrientation | Qt::InvertedLandscapeOrientation.
    /// 
    /// The default, 0, means no orientationChanged() signals are fired.
    set_orientation_update_mask(mask: Rute::ScreenOrientations),
    /// 
    /// Convenience function to compute the angle of rotation to get from
    /// rotation *a* to rotation *b.*
    /// 
    /// The result will be 0, 90, 180, or 270.
    /// 
    /// Qt::PrimaryOrientation is interpreted as the screen's primaryOrientation().
    angle_between(a: Rute::ScreenOrientation, b: Rute::ScreenOrientation) -> i32,
    /// 
    /// Maps the rect between two screen orientations.
    /// 
    /// This will flip the x and y dimensions of the rectangle *rect* if the orientation *a* is
    /// Qt::PortraitOrientation or Qt::InvertedPortraitOrientation and orientation *b* is
    /// Qt::LandscapeOrientation or Qt::InvertedLandscapeOrientation, or vice versa.
    /// 
    /// Qt::PrimaryOrientation is interpreted as the screen's primaryOrientation().
    map_between(a: Rute::ScreenOrientation, b: Rute::ScreenOrientation, rect: &RectType) -> Rect,
    /// 
    /// Convenience function that returns `true` if *o* is either landscape or inverted landscape;
    /// otherwise returns `false.`
    /// 
    /// Qt::PrimaryOrientation is interpreted as the screen's primaryOrientation().
    is_landscape(orientation: Rute::ScreenOrientation) -> bool,
    /// 
    /// Creates and returns a pixmap constructed by grabbing the contents
    /// of the given *window* restricted by QRect( *x,* *y,* *width,*
    /// *height).*
    /// 
    /// The arguments ( *x* , *y* ) specify the offset in the window,
    /// whereas ( *width* , *height* ) specify the area to be copied. If
    /// *width* is negative, the function copies everything to the right
    /// border of the window. If *height* is negative, the function
    /// copies everything to the bottom of the window.
    /// 
    /// The window system identifier ( `WId)` can be retrieved using the
    /// QWidget::winId() function. The rationale for using a window
    /// identifier and not a QWidget, is to enable grabbing of windows
    /// that are not part of the application, window system frames, and so
    /// on.
    /// 
    /// **Warning**: Grabbing windows that are not part of the application is
    /// not supported on systems such as iOS, where sandboxing/security
    /// prevents reading pixels of windows not owned by the application.
    /// 
    /// The grabWindow() function grabs pixels from the screen, not from
    /// the window, i.e. if there is another window partially or entirely
    /// over the one you grab, you get pixels from the overlying window,
    /// too. The mouse cursor is generally not grabbed.
    /// 
    /// Note on X11 that if the given *window* doesn't have the same depth
    /// as the root window, and another window partially or entirely
    /// obscures the one you grab, you will *not* get pixels from the
    /// overlying window. The contents of the obscured areas in the
    /// pixmap will be undefined and uninitialized.
    /// 
    /// On Windows Vista and above grabbing a layered window, which is
    /// created by setting the Qt::WA_TranslucentBackground attribute, will
    /// not work. Instead grabbing the desktop widget should work.
    /// 
    /// **Warning**: In general, grabbing an area outside the screen is not
    /// safe. This depends on the underlying window system.
    grab_window(window: WId, x: i32, y: i32, w: i32, h: i32) -> Pixmap,
    /// 
    refresh_rate() -> f32,
    [signal] physical_size_changed(size: &SizeFType),
    [signal] physical_dots_per_inch_changed(dpi: f32),
    [signal] logical_dots_per_inch_changed(dpi: f32),
    /// 
    /// This signal is emitted when the primary orientation of the screen
    /// changes with *orientation* as an argument.
    /// 
    /// **See also:** primaryOrientation()
    [signal] primary_orientation_changed(orientation: Rute::ScreenOrientation),
    /// 
    /// This signal is emitted when the orientation of the screen
    /// changes with *orientation* as an argument.
    /// 
    /// **See also:** orientation()
    [signal] orientation_changed(orientation: Rute::ScreenOrientation),
    [signal] refresh_rate_changed(refresh_rate: f32),
}

// vim: syntax=rust expandtab ts=4 sw=4
