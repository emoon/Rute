struct Screen : Object {
    handle() -> PlatformScreen?,
    name() -> String,
    manufacturer() -> String,
    model() -> String,
    serial_number() -> String,
    depth() -> i32,
    size() -> Size,
    physical_size() -> SizeF,
    physical_dots_per_inch_x() -> f32,
    physical_dots_per_inch_y() -> f32,
    physical_dots_per_inch() -> f32,
    logical_dots_per_inch_x() -> f32,
    logical_dots_per_inch_y() -> f32,
    logical_dots_per_inch() -> f32,
    device_pixel_ratio() -> f32,
    available_size() -> Size,
    virtual_siblings() -> [Screen?],
    virtual_size() -> Size,
    available_virtual_size() -> Size,
    primary_orientation() -> Rute::ScreenOrientation,
    orientation() -> Rute::ScreenOrientation,
    native_orientation() -> Rute::ScreenOrientation,
    orientation_update_mask() -> Rute::ScreenOrientations,
    set_orientation_update_mask(mask: Rute::ScreenOrientations),
    angle_between(a: Rute::ScreenOrientation, b: Rute::ScreenOrientation) -> i32,
    map_between(a: Rute::ScreenOrientation, b: Rute::ScreenOrientation, rect: &RectType) -> Rect,
    is_landscape(orientation: Rute::ScreenOrientation) -> bool,
    grab_window(window: WId, x: i32, y: i32, w: i32, h: i32) -> Pixmap,
    refresh_rate() -> f32,
    [event] physical_size_changed(size: &SizeFType),
    [event] physical_dots_per_inch_changed(dpi: f32),
    [event] logical_dots_per_inch_changed(dpi: f32),
    [event] primary_orientation_changed(orientation: Rute::ScreenOrientation),
    [event] orientation_changed(orientation: Rute::ScreenOrientation),
    [event] refresh_rate_changed(refresh_rate: f32),
}

// vim: syntax=rust expandtab ts=4 sw=4
