/// 
/// Locking and unlocking a QMutex in complex functions and
/// statements or in exception handling code is error-prone and
/// difficult to debug. QMutexLocker can be used in such situations
/// to ensure that the state of the mutex is always well-defined.
/// 
/// QMutexLocker should be created within a function where a
/// QMutex needs to be locked. The mutex is locked when QMutexLocker
/// is created. You can unlock and relock the mutex with `unlock()`
/// and `relock().` If locked, the mutex will be unlocked when the
/// QMutexLocker is destroyed.
/// 
/// For example, this complex function locks a QMutex upon entering
/// the function and unlocks the mutex at all the exit points:
/// 
/// This example function will get more complicated as it is
/// developed, which increases the likelihood that errors will occur.
/// 
/// Using QMutexLocker greatly simplifies the code, and makes it more
/// readable:
/// 
/// Now, the mutex will always be unlocked when the QMutexLocker
/// object is destroyed (when the function returns since `locker` is
/// an auto variable).
/// 
/// The same principle applies to code that throws and catches
/// exceptions. An exception that is not caught in the function that
/// has locked the mutex has no way of unlocking the mutex before the
/// exception is passed up the stack to the calling function.
/// 
/// QMutexLocker also provides a `mutex()` member function that returns
/// the mutex on which the QMutexLocker is operating. This is useful
/// for code that needs access to the mutex, such as
/// QWaitCondition::wait(). For example:
/// 
/// **See also:** QReadLocker
/// QWriteLocker
/// QMutex
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct MutexLocker {
    /// 
    /// Unlocks this mutex locker. You can use `relock()` to lock
    /// it again. It does not need to be locked when destroyed.
    /// 
    /// **See also:** relock()
    unlock(),
    /// 
    /// Relocks an unlocked mutex locker.
    /// 
    /// **See also:** unlock()
    relock(),
    /// 
    /// Returns the mutex on which the QMutexLocker is operating.
    /// 
    mutex() -> Mutex?,
}

// vim: syntax=rust expandtab ts=4 sw=4
