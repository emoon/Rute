struct Image : PaintDevice {
    swap(other: &ImageType),
    is_null() -> bool,
    [override] dev_type() -> i32,
    detach(),
    is_detached() -> bool,
    copy(rect: &RectType) -> ImageType,
    copy(x: i32, y: i32, w: i32, h: i32) -> ImageType,
    format() -> Image::Format,
    convert_to_format(f: Image::Format, flags: Rute::ImageConversionFlags) -> ImageType,
    convert_to_format(f: Image::Format, color_table: [RgbType], flags: Rute::ImageConversionFlags) -> ImageType,
    reinterpret_as_format(f: Image::Format) -> bool,
    width() -> i32,
    height() -> i32,
    size() -> SizeType,
    rect() -> RectType,
    depth() -> i32,
    color_count() -> i32,
    bit_plane_count() -> i32,
    color(i: i32) -> RgbType,
    set_color(i: i32, c: RgbType),
    set_color_count(arg0: i32),
    all_gray() -> bool,
    is_grayscale() -> bool,
    bits() -> &uchar,
    bits() -> &uchar,
    const_bits() -> &uchar,
    byte_count() -> i32,
    size_in_bytes() -> i32,
    scan_line(arg0: i32) -> &uchar,
    scan_line(arg0: i32) -> &uchar,
    const_scan_line(arg0: i32) -> &uchar,
    bytes_per_line() -> i32,
    valid(x: i32, y: i32) -> bool,
    valid(pt: &PointType) -> bool,
    pixel_index(x: i32, y: i32) -> i32,
    pixel_index(pt: &PointType) -> i32,
    pixel(x: i32, y: i32) -> RgbType,
    pixel(pt: &PointType) -> RgbType,
    set_pixel(x: i32, y: i32, index_or_rgb: uint),
    set_pixel(pt: &PointType, index_or_rgb: uint),
    pixel_color(x: i32, y: i32) -> ColorType,
    pixel_color(pt: &PointType) -> ColorType,
    set_pixel_color(x: i32, y: i32, c: &ColorType),
    set_pixel_color(pt: &PointType, c: &ColorType),
    color_table() -> [RgbType],
    set_color_table(colors: [RgbType]),
    device_pixel_ratio() -> f32,
    set_device_pixel_ratio(scale_factor: f32),
    fill(pixel: uint),
    fill(color: &ColorType),
    fill(color: Rute::GlobalColor),
    has_alpha_channel() -> bool,
    set_alpha_channel(alpha_channel: &ImageType),
    alpha_channel() -> ImageType,
    create_alpha_mask(flags: Rute::ImageConversionFlags) -> ImageType,
    create_heuristic_mask(clip_tight: bool) -> ImageType,
    create_mask_from_color(color: RgbType, mode: Rute::MaskMode) -> ImageType,
    scaled(w: i32, h: i32, aspect_mode: Rute::AspectRatioMode, mode: Rute::TransformationMode) -> ImageType,
    scaled(s: &SizeType, aspect_mode: Rute::AspectRatioMode, mode: Rute::TransformationMode) -> ImageType,
    scaled_to_width(w: i32, mode: Rute::TransformationMode) -> ImageType,
    scaled_to_height(h: i32, mode: Rute::TransformationMode) -> ImageType,
    mirrored(horizontally: bool, vertically: bool) -> ImageType,
    rgb_swapped() -> ImageType,
    invert_pixels(arg0: Image::InvertMode),
    load(device: &IODeviceType, format: &char) -> bool,
    load(file_name: String, format: &char) -> bool,
    load_from_data(buf: &uchar, len: i32, format: &char) -> bool,
    load_from_data(data: &ByteArrayType, aformat: &char) -> bool,
    save(file_name: String, format: &char, quality: i32) -> bool,
    save(device: &IODeviceType, format: &char, quality: i32) -> bool,
    [static] from_data(data: &uchar, size: i32, format: &char) -> ImageType,
    [static] from_data(data: &ByteArrayType, format: &char) -> ImageType,
    cache_key() -> i64,
    [override] paint_engine() -> &PaintEngineType,
    dots_per_meter_x() -> i32,
    dots_per_meter_y() -> i32,
    set_dots_per_meter_x(arg0: i32),
    set_dots_per_meter_y(arg0: i32),
    offset() -> PointType,
    set_offset(arg0: &PointType),
    text_keys() -> StringListType,
    text(key: String) -> String,
    set_text(key: String, value: String),
    pixel_format() -> PixelFormatType,
    [static] to_pixel_format(format: Image::Format) -> PixelFormatType,
    [static] to_image_format(format: PixelFormatType) -> Image::Format,
    to_cg_image() -> CGImageRef,
    mirrored_helper(horizontal: bool, vertical: bool) -> ImageType,
    rgb_swapped_helper() -> ImageType,
    mirrored_inplace(horizontal: bool, vertical: bool),
    rgb_swapped_inplace(),
    convert_to_format_helper(format: Image::Format, flags: Rute::ImageConversionFlags) -> ImageType,
    convert_to_format_inplace(format: Image::Format, flags: Rute::ImageConversionFlags) -> bool,
    smooth_scaled(w: i32, h: i32) -> ImageType,
}

// vim: syntax=rust expandtab ts=4 sw=4
