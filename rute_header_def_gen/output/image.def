struct Image : PaintDevice {
    swap(&ImageType other),
    is_null() -> bool,
    dev_type() -> i32,
    detach(),
    is_detached() -> bool,
    copy(&RectType rect) -> ImageType,
    copy(i32 x, i32 y, i32 w, i32 h) -> ImageType,
    format() -> Image::Format,
    convert_to_format(Image::Format f, Rute::ImageConversionFlags flags) -> ImageType,
    convert_to_format(Image::Format f, &Vector<QRgb>Type color_table, Rute::ImageConversionFlags flags) -> ImageType,
    reinterpret_as_format(Image::Format f) -> bool,
    width() -> i32,
    height() -> i32,
    size() -> SizeType,
    rect() -> RectType,
    depth() -> i32,
    color_count() -> i32,
    bit_plane_count() -> i32,
    color(i32 i) -> RgbType,
    set_color(i32 i, RgbType c),
    set_color_count(i32 arg0),
    all_gray() -> bool,
    is_grayscale() -> bool,
    bits() -> &uchar,
    bits() -> &uchar,
    const_bits() -> &uchar,
    byte_count() -> i32,
    size_in_bytes() -> i32,
    scan_line(i32 arg0) -> &uchar,
    scan_line(i32 arg0) -> &uchar,
    const_scan_line(i32 arg0) -> &uchar,
    bytes_per_line() -> i32,
    valid(i32 x, i32 y) -> bool,
    valid(&PointType pt) -> bool,
    pixel_index(i32 x, i32 y) -> i32,
    pixel_index(&PointType pt) -> i32,
    pixel(i32 x, i32 y) -> RgbType,
    pixel(&PointType pt) -> RgbType,
    set_pixel(i32 x, i32 y, uint index_or_rgb),
    set_pixel(&PointType pt, uint index_or_rgb),
    pixel_color(i32 x, i32 y) -> ColorType,
    pixel_color(&PointType pt) -> ColorType,
    set_pixel_color(i32 x, i32 y, &ColorType c),
    set_pixel_color(&PointType pt, &ColorType c),
    color_table() -> Vector<QRgb>Type,
    set_color_table(Vector<QRgb>Type colors),
    device_pixel_ratio() -> f32,
    set_device_pixel_ratio(f32 scale_factor),
    fill(uint pixel),
    fill(&ColorType color),
    fill(Rute::GlobalColor color),
    has_alpha_channel() -> bool,
    set_alpha_channel(&ImageType alpha_channel),
    alpha_channel() -> ImageType,
    create_alpha_mask(Rute::ImageConversionFlags flags) -> ImageType,
    create_heuristic_mask(bool clip_tight) -> ImageType,
    create_mask_from_color(RgbType color, Rute::MaskMode mode) -> ImageType,
    scaled(i32 w, i32 h, Rute::AspectRatioMode aspect_mode, Rute::TransformationMode mode) -> ImageType,
    scaled(&SizeType s, Rute::AspectRatioMode aspect_mode, Rute::TransformationMode mode) -> ImageType,
    scaled_to_width(i32 w, Rute::TransformationMode mode) -> ImageType,
    scaled_to_height(i32 h, Rute::TransformationMode mode) -> ImageType,
    mirrored(bool horizontally, bool vertically) -> ImageType,
    rgb_swapped() -> ImageType,
    invert_pixels(Image::InvertMode arg0),
    load(&IODeviceType device, &char format) -> bool,
    load(String file_name, &char format) -> bool,
    load_from_data(&uchar buf, i32 len, &char format) -> bool,
    load_from_data(&ByteArrayType data, &char aformat) -> bool,
    save(String file_name, &char format, i32 quality) -> bool,
    save(&IODeviceType device, &char format, i32 quality) -> bool,
    from_data(&uchar data, i32 size, &char format) -> ImageType,
    from_data(&ByteArrayType data, &char format) -> ImageType,
    cache_key() -> qint64,
    paint_engine() -> &PaintEngineType,
    dots_per_meter_x() -> i32,
    dots_per_meter_y() -> i32,
    set_dots_per_meter_x(i32 arg0),
    set_dots_per_meter_y(i32 arg0),
    offset() -> PointType,
    set_offset(&PointType arg0),
    text_keys() -> StringListType,
    text(String key) -> String,
    set_text(String key, String value),
    pixel_format() -> PixelFormatType,
    to_pixel_format(Image::Format format) -> PixelFormatType,
    to_image_format(PixelFormatType format) -> Image::Format,
    to_cg_image() -> CGImageRef,
    mirrored_helper(bool horizontal, bool vertical) -> ImageType,
    rgb_swapped_helper() -> ImageType,
    mirrored_inplace(bool horizontal, bool vertical),
    rgb_swapped_inplace(),
    convert_to_format_helper(Image::Format format, Rute::ImageConversionFlags flags) -> ImageType,
    convert_to_format_inplace(Image::Format format, Rute::ImageConversionFlags flags) -> bool,
    smooth_scaled(i32 w, i32 h) -> ImageType,
}

// vim: syntax=rust expandtab ts=4 sw=4
