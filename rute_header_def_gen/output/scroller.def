/// 
/// With kinetic scrolling, the user can push the widget in a given
/// direction and it will continue to scroll in this direction until it is
/// stopped either by the user or by friction. Aspects of inertia, friction
/// and other physical concepts can be changed in order to fine-tune an
/// intuitive user experience.
/// 
/// The QScroller object is the object that stores the current position and
/// scrolling speed and takes care of updates.
/// QScroller can be triggered by a flick gesture
/// 
/// ```
/// QWidget *w = ...;
/// QScroller::grabGesture(w, QScroller::LeftMouseButtonGesture);
/// ```
/// 
/// or directly like this:
/// 
/// ```
/// QWidget *w = ...;
/// QScroller *scroller = QScroller::scroller(w);
/// scroller->scrollTo(QPointF(100, 100));
/// ```
/// 
/// The scrolled QObjects receive a QScrollPrepareEvent whenever the scroller needs to
/// update its geometry information and a QScrollEvent whenever the content of the object should
/// actually be scrolled.
/// 
/// The scroller uses the global QAbstractAnimation timer to generate its QScrollEvents. This
/// can be changed with QScrollerProperties::FrameRate on a per-QScroller basis.
/// 
/// Several examples in the `scroller` examples directory show how QScroller,
/// QScrollEvent and the scroller gesture can be used.
/// 
/// Even though this kinetic scroller has a large number of settings available via
/// QScrollerProperties, we recommend that you leave them all at their default, platform optimized
/// values. Before changing them you can experiment with the `plot` example in
/// the `scroller` examples directory.
/// 
/// **See also:** [`ScrollEvent`]
/// [`ScrollPrepareEvent`]
/// [`ScrollerProperties`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Scroller : Object {
    /// 
    /// Returns `true` if a QScroller object was already created for *target;* `false` otherwise.
    /// 
    /// **See also:** [`scroller()`]
    [static] has_scroller(target: *ObjectType) -> bool,
    /// 
    /// Returns the scroller for the given *target.*
    /// As long as the object exists this function will always return the same QScroller instance.
    /// If no QScroller exists for the *target,* one will implicitly be created.
    /// At no point more than one QScroller will be active on an object.
    /// 
    /// **See also:** [`has_scroller()`]
    /// [`target()`]
    /// 
    /// **Overloads**  This is the const version of scroller().
    /// 
    /// QScroller emits this signal whenever its scroller properties change.
    /// *newProperties* are the new scroller properties.
    /// 
    /// **See also:** scrollerProperties
    /// 
    [static] scroller(target: *ObjectType) -> Scroller?,
    /// 
    /// Returns the scroller for the given *target.*
    /// As long as the object exists this function will always return the same QScroller instance.
    /// If no QScroller exists for the *target,* one will implicitly be created.
    /// At no point more than one QScroller will be active on an object.
    /// 
    /// **See also:** [`has_scroller()`]
    /// [`target()`]
    /// 
    /// **Overloads**  This is the const version of scroller().
    /// 
    /// QScroller emits this signal whenever its scroller properties change.
    /// *newProperties* are the new scroller properties.
    /// 
    /// **See also:** scrollerProperties
    /// 
    [org_name(scroller)]
    [static] scroller_2(target: *ObjectType) -> Scroller?,
    /// 
    /// Registers a custom scroll gesture recognizer, grabs it for the *target* and returns the resulting gesture type. If *scrollGestureType* is
    /// set to TouchGesture the gesture triggers on touch events. If it is set to
    /// one of LeftMouseButtonGesture, RightMouseButtonGesture or
    /// MiddleMouseButtonGesture it triggers on mouse events of the
    /// corresponding button.
    /// 
    /// Only one scroll gesture can be active on a single object at the same
    /// time. If you call this function twice on the same object, it will
    /// ungrab the existing gesture before grabbing the new one.
    /// 
    /// **Note**: To avoid unwanted side-effects, mouse events are consumed while
    /// the gesture is triggered. Since the initial mouse press event is
    /// not consumed, the gesture sends a fake mouse release event
    /// at the global position `(INT_MIN, INT_MIN)` . This ensures that
    /// internal states of the widget that received the original mouse press
    /// are consistent.
    /// 
    /// **See also:** [`ungrab_gesture()`]
    /// [`grabbed_gesture()`]
    [static] grab_gesture(target: *ObjectType, gesture_type: Scroller::ScrollerGestureType) -> Rute::GestureType,
    /// 
    /// Returns the gesture type currently grabbed for the *target* or 0 if no
    /// gesture is grabbed.
    /// 
    /// **See also:** [`grab_gesture()`]
    /// [`ungrab_gesture()`]
    [static] grabbed_gesture(target: *ObjectType) -> Rute::GestureType,
    /// 
    /// Ungrabs the gesture for the *target.*
    /// Does nothing if no gesture is grabbed.
    /// 
    /// **See also:** [`grab_gesture()`]
    /// [`grabbed_gesture()`]
    [static] ungrab_gesture(target: *ObjectType),
    /// 
    /// Returns an application wide list of currently active QScroller objects.
    /// Active QScroller objects are in a state() that is not QScroller::Inactive.
    /// This function is useful when writing your own gesture recognizer.
    [static] active_scrollers() -> [Scroller?],
    /// 
    /// Returns the target object of this scroller.
    /// **See also:** [`has_scroller()`]
    /// [`scroller()`]
    target() -> Object?,
    /// 
    /// QScroller emits this signal whenever the state changes. *newState* is the new State.
    /// 
    /// **See also:** state
    /// 
    /// **See also:** [`Scroller::state()`]
    state() -> Scroller::State,
    /// 
    /// This function is used by gesture recognizers to inform the scroller about a new input event.
    /// The scroller changes its internal state() according to the input event and its attached
    /// scroller properties. The scroller doesn't distinguish between the kind of input device the
    /// event came from. Therefore the event needs to be split into the *input* type, a *position* and a
    /// milli-second *timestamp.* The *position* needs to be in the target's coordinate system.
    /// 
    /// The return value is `true` if the event should be consumed by the calling filter or `false`
    /// if the event should be forwarded to the control.
    /// 
    /// **Note**: Using grabGesture() should be sufficient for most use cases.
    handle_input(input: Scroller::Input, position: &PointFType, timestamp: i64) -> bool,
    /// 
    /// Stops the scroller and resets its state back to Inactive.
    stop(),
    /// 
    /// Returns the current scrolling velocity in meter per second when the state is Scrolling or Dragging.
    /// Returns a zero velocity otherwise.
    /// 
    /// The velocity is reported for both the x and y axis separately by using a QPointF.
    /// 
    /// **See also:** [`pixel_per_meter()`]
    velocity() -> PointF,
    /// 
    /// Returns the estimated final position for the current scroll movement.
    /// Returns the current position if the scroller state is not Scrolling.
    /// The result is undefined when the scroller state is Inactive.
    /// 
    /// The target position is in pixel.
    /// 
    /// **See also:** [`pixel_per_meter()`]
    /// [`scroll_to()`]
    final_position() -> PointF,
    /// 
    /// Returns the pixel per meter metric for the scrolled widget.
    /// 
    /// The value is reported for both the x and y axis separately by using a QPointF.
    /// 
    /// **Note**: Please note that this value should be physically correct. The actual DPI settings
    /// that Qt returns for the display may be reported wrongly on purpose by the underlying
    /// windowing system, for example on MacOS .
    pixel_per_meter() -> PointF,
    /// 
    /// QScroller emits this signal whenever its scroller properties change.
    /// *newProperties* are the new scroller properties.
    /// 
    /// **See also:** scrollerProperties
    /// 
    scroller_properties() -> ScrollerProperties,
    /// Set the snap positions for the horizontal axis to a list of *positions.*
    /// This overwrites all previously set snap positions and also a previously
    /// set snapping interval.
    /// Snapping can be deactivated by setting an empty list of positions.
    /// Set the snap positions for the horizontal axis to regular spaced intervals.
    /// The first snap position is at *first.* The next at *first* + *interval.*
    /// This can be used to implement a list header.
    /// This overwrites all previously set snap positions and also a previously
    /// set snapping interval.
    /// Snapping can be deactivated by setting an interval of 0.0
    set_snap_positions_x(positions: [f32]),
    /// Set the snap positions for the horizontal axis to a list of *positions.*
    /// This overwrites all previously set snap positions and also a previously
    /// set snapping interval.
    /// Snapping can be deactivated by setting an empty list of positions.
    /// Set the snap positions for the horizontal axis to regular spaced intervals.
    /// The first snap position is at *first.* The next at *first* + *interval.*
    /// This can be used to implement a list header.
    /// This overwrites all previously set snap positions and also a previously
    /// set snapping interval.
    /// Snapping can be deactivated by setting an interval of 0.0
    [org_name(setSnapPositionsX)]
    set_snap_positions_x_2(first: f32, interval: f32),
    /// Set the snap positions for the vertical axis to a list of *positions.*
    /// This overwrites all previously set snap positions and also a previously
    /// set snapping interval.
    /// Snapping can be deactivated by setting an empty list of positions.
    /// Set the snap positions for the vertical axis to regular spaced intervals.
    /// The first snap position is at *first.* The next at *first* + *interval.*
    /// This overwrites all previously set snap positions and also a previously
    /// set snapping interval.
    /// Snapping can be deactivated by setting an interval of 0.0
    set_snap_positions_y(positions: [f32]),
    /// Set the snap positions for the vertical axis to a list of *positions.*
    /// This overwrites all previously set snap positions and also a previously
    /// set snapping interval.
    /// Snapping can be deactivated by setting an empty list of positions.
    /// Set the snap positions for the vertical axis to regular spaced intervals.
    /// The first snap position is at *first.* The next at *first* + *interval.*
    /// This overwrites all previously set snap positions and also a previously
    /// set snapping interval.
    /// Snapping can be deactivated by setting an interval of 0.0
    [org_name(setSnapPositionsY)]
    set_snap_positions_y_2(first: f32, interval: f32),
    set_scroller_properties(prop: &ScrollerPropertiesType),
    /// 
    /// Starts scrolling the widget so that point *pos* is at the top-left position in
    /// the viewport.
    /// 
    /// The behaviour when scrolling outside the valid scroll area is undefined.
    /// In this case the scroller might or might not overshoot.
    /// 
    /// The scrolling speed will be calculated so that the given position will
    /// be reached after a platform-defined time span.
    /// 
    /// *pos* is given in viewport coordinates.
    /// 
    /// **See also:** [`ensure_visible()`]
    /// **Overloads**
    /// This version will reach its destination position in *scrollTime* milliseconds.
    scroll_to(pos: &PointFType),
    /// 
    /// Starts scrolling the widget so that point *pos* is at the top-left position in
    /// the viewport.
    /// 
    /// The behaviour when scrolling outside the valid scroll area is undefined.
    /// In this case the scroller might or might not overshoot.
    /// 
    /// The scrolling speed will be calculated so that the given position will
    /// be reached after a platform-defined time span.
    /// 
    /// *pos* is given in viewport coordinates.
    /// 
    /// **See also:** [`ensure_visible()`]
    /// **Overloads**
    /// This version will reach its destination position in *scrollTime* milliseconds.
    [org_name(scrollTo)]
    scroll_to_2(pos: &PointFType, scroll_time: i32),
    /// 
    /// Starts scrolling so that the rectangle *rect* is visible inside the
    /// viewport with additional margins specified in pixels by *xmargin* and *ymargin* around
    /// the rect.
    /// 
    /// In cases where it is not possible to fit the rect plus margins inside the viewport the contents
    /// are scrolled so that as much as possible is visible from *rect.*
    /// 
    /// The scrolling speed is calculated so that the given position is reached after a platform-defined
    /// time span.
    /// 
    /// This function performs the actual scrolling by calling scrollTo().
    /// 
    /// **See also:** [`scroll_to()`]
    /// **Overloads**
    /// This version will reach its destination position in *scrollTime* milliseconds.
    ensure_visible(rect: &RectFType, xmargin: f32, ymargin: f32),
    /// 
    /// Starts scrolling so that the rectangle *rect* is visible inside the
    /// viewport with additional margins specified in pixels by *xmargin* and *ymargin* around
    /// the rect.
    /// 
    /// In cases where it is not possible to fit the rect plus margins inside the viewport the contents
    /// are scrolled so that as much as possible is visible from *rect.*
    /// 
    /// The scrolling speed is calculated so that the given position is reached after a platform-defined
    /// time span.
    /// 
    /// This function performs the actual scrolling by calling scrollTo().
    /// 
    /// **See also:** [`scroll_to()`]
    /// **Overloads**
    /// This version will reach its destination position in *scrollTime* milliseconds.
    [org_name(ensureVisible)]
    ensure_visible_2(rect: &RectFType, xmargin: f32, ymargin: f32, scroll_time: i32),
    /// This function resends the QScrollPrepareEvent.
    /// Calling resendPrepareEvent triggers a QScrollPrepareEvent from the scroller.
    /// This allows the receiver to re-set content position and content size while
    /// scrolling.
    /// Calling this function while in the Inactive state is useless as the prepare event
    /// is sent again before scrolling starts.
    resend_prepare_event(),
    /// 
    /// QScroller emits this signal whenever the state changes. *newState* is the new State.
    /// 
    /// **See also:** state
    [signal] state_changed(newstate: Scroller::State),
    /// 
    /// QScroller emits this signal whenever its scroller properties change.
    /// *newProperties* are the new scroller properties.
    /// 
    /// **See also:** scrollerProperties
    [signal] scroller_properties_changed(arg0: &ScrollerPropertiesType),
}

[org_name(QScroller)]
enum State {
    Inactive,
    Pressed,
    Dragging,
    Scrolling,
}

[org_name(QScroller)]
enum ScrollerGestureType {
    TouchGesture,
    LeftMouseButtonGesture,
    RightMouseButtonGesture,
    MiddleMouseButtonGesture,
}

[org_name(QScroller)]
enum Input {
    InputPress,
    InputMove,
    InputRelease,
}

// vim: syntax=rust expandtab ts=4 sw=4
