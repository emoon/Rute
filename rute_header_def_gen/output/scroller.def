struct Scroller : Object {
    has_scroller(&ObjectType target) -> bool,
    scroller(&ObjectType target) -> &ScrollerType,
    scroller(&ObjectType target) -> &ScrollerType,
    grab_gesture(&ObjectType target, Scroller::ScrollerGestureType gesture_type) -> Rute::GestureType,
    grabbed_gesture(&ObjectType target) -> Rute::GestureType,
    ungrab_gesture(&ObjectType target),
    active_scrollers() -> <&ScrollerType>,
    target() -> &ObjectType,
    state() -> Scroller::State,
    handle_input(Scroller::Input input, &PointFType position, i64 timestamp) -> bool,
    stop(),
    velocity() -> PointFType,
    final_position() -> PointFType,
    pixel_per_meter() -> PointFType,
    scroller_properties() -> ScrollerPropertiesType,
    set_snap_positions_x(&List<qreal>Type positions),
    set_snap_positions_x(f32 first, f32 interval),
    set_snap_positions_y(&List<qreal>Type positions),
    set_snap_positions_y(f32 first, f32 interval),
    [callback] set_scroller_properties(&ScrollerPropertiesType prop),
    [callback] scroll_to(&PointFType pos),
    [callback] scroll_to(&PointFType pos, i32 scroll_time),
    [callback] ensure_visible(&RectFType rect, f32 xmargin, f32 ymargin),
    [callback] ensure_visible(&RectFType rect, f32 xmargin, f32 ymargin, i32 scroll_time),
    [callback] resend_prepare_event(),
    state_changed(Scroller::State newstate),
    scroller_properties_changed(&ScrollerPropertiesType arg0),
}

// vim: syntax=rust expandtab ts=4 sw=4
