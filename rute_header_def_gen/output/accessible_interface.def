///     \class QAccessibleInterface
///     \brief The QAccessibleInterface class defines an interface that exposes information
///     about accessible objects.
/// 
///     \ingroup accessibility
///     \inmodule QtGui
/// 
///     This class is part of \l {Accessibility for QWidget Applications}.
/// 
///     Accessibility tools (also called AT Clients), such as screen readers
///     or braille displays, require high-level information about
///     accessible objects in an application. Accessible objects provide
///     specialized input and output methods, making it possible for users
///     to use accessibility tools with enabled applications (AT Servers).
/// 
///     Every element that the user needs to interact with or react to is
///     an accessible object, and should provide this information. These
///     are mainly visual objects, such as widgets and widget elements, but
///     can also be content, such as sounds.
/// 
///     The AT client uses three basic concepts to acquire information
///     about any accessible object in an application:
///     \list
///     \li \e Properties The client can read information about
///     accessible objects. In some cases the client can also modify these
///     properties; such as text in a line edit.
///     \li \e Actions The client can invoke actions like pressing a button
///     or .
///     \li \e{Relationships and Navigation} The client can traverse from one
///     accessible object to another, using the relationships between objects.
///     \endlist
/// 
///     The QAccessibleInterface defines the API for these three concepts.
/// 
///     \section1 Relationships and Navigation
/// 
///     The functions childCount() and indexOfChild() return the number of
///     children of an accessible object and the index a child object has
///     in its parent. The childAt() function returns a child QAccessibleInterface
///     that is found at a position. The child does not have to be a direct
///     child. This allows bypassing intermediate layers when the parent already knows the
///     top-most child. childAt() is used for hit testing (finding the object
///     under the mouse).
/// 
///     The relations() function provides information about the relations an
///     object has to other objects, and parent() and child() allows
///     traversing from one object to another object.
/// 
///     \section1 Properties
/// 
///     The central property of an accessible objects is what role() it
///     has. Different objects can have the same role, e.g. both the "Add
///     line" element in a scroll bar and the \c OK button in a dialog have
///     the same role, "button". The role implies what kind of
///     interaction the user can perform with the user interface element.
/// 
///     An object's state() property is a combination of different state
///     flags and can describe both how the object's state differs from a
///     "normal" state, e.g. it might be unavailable, and also how it
///     behaves, e.g. it might be selectable.
/// 
///     The text() property provides textual information about the object.
///     An object usually has a name, but can provide extended information
///     such as a description, help text, or information about any
///     keyboard accelerators it provides. Some objects allow changing the
///     text() property through the setText() function, but this
///     information is in most cases read-only.
/// 
///     The rect() property provides information about the geometry of an
///     accessible object. This information is usually only available for
///     visual objects.
/// 
///     \section1 Interfaces
/// 
///     To enable the user to interact with an accessible object the
///     object must implement QAccessibleActionInterface in addition to
///     QAccessibleInterface.
///     Objects that support selections can define actions to change the selection.
/// 
///     There are several other interfaces that should be implemented as required.
///     QAccessibleTextInterface should be used for bigger texts edits such as document views.
///     This interface should not be implemented for labels/single line edits.
/// 
///     For sliders, scrollbars and other numerical value selectors QAccessibleValueInterface
///     should be implemented.
/// 
///     Lists, tables and trees should implement QAccessibleTableInterface.
/// 
///     \sa QAccessible, QAccessibleActionInterface, QAccessibleTextInterface, QAccessibleValueInterface, QAccessibleTableInterface

struct AccessibleInterface {
    [event] is_valid() -> bool,
    [event] object() -> Object?,
    [event] window() -> Window?,
    ///     Returns the meaningful relations to other widgets. Usually this will not return parent/child
    ///     relations, unless they are handled in a specific way such as in tree views.
    ///     It will typically return the labelled-by and label relations.
    /// 
    ///     It is possible to filter the relations by using \a match.
    ///     It should never return itself.
    /// 
    ///     \sa parent(), child()
    [event] relations(match: Accessible::Relation) -> Vector<QPair<QAccessibleInterface *, QAccessible::Relation> >,
    ///     Returns the object that has the keyboard focus.
    /// 
    ///     The object returned can be any descendant, including itself.
    [event] focus_child() -> AccessibleInterface?,
    [event] child_at(x: i32, y: i32) -> AccessibleInterface?,
    [event] parent() -> AccessibleInterface?,
    [event] child(index: i32) -> AccessibleInterface?,
    [event] child_count() -> i32,
    [event] index_of_child(arg0: *AccessibleInterfaceType) -> i32,
    [event] text(t: Accessible::Text) -> String,
    [event] set_text(t: Accessible::Text, text: String),
    [event] rect() -> Rect,
    [event] role() -> Accessible::Role,
    [event] state() -> Accessible::State,
    ///     Returns the accessible's foreground color if applicable or an invalid QColor.
    /// 
    ///     \sa backgroundColor()
    [event] foreground_color() -> Color,
    ///     Returns the accessible's background color if applicable or an invalid QColor.
    /// 
    ///     \sa foregroundColor()
    [event] background_color() -> Color,
    text_interface() -> AccessibleTextInterface?,
    editable_text_interface() -> AccessibleEditableTextInterface?,
    value_interface() -> AccessibleValueInterface?,
    action_interface() -> AccessibleActionInterface?,
    image_interface() -> AccessibleImageInterface?,
    table_interface() -> AccessibleTableInterface?,
    table_cell_interface() -> AccessibleTableCellInterface?,
    ///     \internal
    ///     Method to allow extending this class without breaking binary compatibility.
    ///     The actual behavior and format of \a data depends on \a id argument
    ///     which must be defined if the class is to be extended with another virtual
    ///     function.
    ///     Currently, this is unused.
    [event] virtual_hook(id: i32, data: *void),
    [event] interface_cast(arg0: Accessible::InterfaceType),
}

// vim: syntax=rust expandtab ts=4 sw=4
