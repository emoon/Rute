
struct AccessibleInterface {
    is_valid() -> bool,
    object() -> &ObjectType,
    window() -> &WindowType,
    relations(match: Accessible::Relation) -> Vector<QPair<QAccessibleInterface *, QAccessible::Relation> >,
    focus_child() -> &AccessibleInterfaceType,
    child_at(x: i32, y: i32) -> &AccessibleInterfaceType,
    parent() -> &AccessibleInterfaceType,
    child(index: i32) -> &AccessibleInterfaceType,
    child_count() -> i32,
    index_of_child(arg0: &AccessibleInterfaceType) -> i32,
    text(t: Accessible::Text) -> String,
    set_text(t: Accessible::Text, text: String),
    rect() -> RectType,
    role() -> Accessible::Role,
    state() -> Accessible::State,
    foreground_color() -> ColorType,
    background_color() -> ColorType,
    text_interface() -> &AccessibleTextInterfaceType,
    editable_text_interface() -> &AccessibleEditableTextInterfaceType,
    value_interface() -> &AccessibleValueInterfaceType,
    action_interface() -> &AccessibleActionInterfaceType,
    image_interface() -> &AccessibleImageInterfaceType,
    table_interface() -> &AccessibleTableInterfaceType,
    table_cell_interface() -> &AccessibleTableCellInterfaceType,
    virtual_hook(id: i32, data: &void),
    interface_cast(arg0: Accessible::InterfaceType),
}

// vim: syntax=rust expandtab ts=4 sw=4
