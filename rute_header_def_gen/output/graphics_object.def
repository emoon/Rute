/// 
/// The class extends a QGraphicsItem with QObject's signal/slot and property mechanisms.
/// It maps many of QGraphicsItem's basic setters and getters to properties and adds notification
/// signals for many of them.
/// 
/// # Parents and Children
/// 
/// Each graphics object can be constructed with a parent item. This ensures that the
/// item will be destroyed when its parent item is destroyed. Although QGraphicsObject
/// inherits from both QObject and QGraphicsItem, you should use the functions provided
/// by QGraphicsItem, *not* QObject, to manage the relationships between parent and
/// child items.
/// 
/// The relationships between items can be explored using the parentItem() and childItems()
/// functions. In the hierarchy of items in a scene, the parentObject() and parentWidget()
/// functions are the equivalent of the QWidget::parent() and QWidget::parentWidget()
/// functions for QWidget subclasses.
/// 
/// **See also:** [`GraphicsWidget`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GraphicsObject : Object, GraphicsItem {
    /// 
    /// Subscribes the graphics object to the given *gesture* with specific *flags.*
    /// 
    /// **See also:** [`ungrab_gesture()`]
    /// [`GestureEvent`]
    grab_gesture(type: Rute::GestureType, flags: Rute::GestureFlags),
    /// 
    /// Unsubscribes the graphics object from the given *gesture.*
    /// 
    /// **See also:** [`grab_gesture()`]
    /// [`GestureEvent`]
    ungrab_gesture(type: Rute::GestureType),
    /// 
    /// Updates the item's micro focus. This is slot for convenience.
    /// 
    /// **See also:** [`InputMethod`]
    update_micro_focus(),
    /// 
    /// This signal gets emitted whenever the parent of the item changes
    [signal] parent_changed(),
    /// 
    /// This signal gets emitted whenever the opacity of the item changes
    /// 
    /// **See also:** [`GraphicsItem::opacity`]
    [signal] opacity_changed(),
    /// 
    /// This signal gets emitted whenever the visibility of the item changes
    /// 
    /// **See also:** visible
    [signal] visible_changed(),
    /// 
    /// This signal gets emitted whenever the item get's enabled or disabled.
    /// 
    /// **See also:** [`is_enabled()`]
    [signal] enabled_changed(),
    /// 
    /// This signal gets emitted whenever the x position of the item changes
    /// 
    /// **See also:** [`pos()`]
    [signal] x_changed(),
    /// 
    /// This signal gets emitted whenever the y position of the item changes.
    /// 
    /// **See also:** [`pos()`]
    [signal] y_changed(),
    /// 
    /// This signal gets emitted whenever the z value of the item changes.
    /// 
    /// **See also:** [`pos()`]
    [signal] z_changed(),
    /// 
    /// This signal gets emitted whenever the roation of the item changes.
    [signal] rotation_changed(),
    /// 
    /// This signal is emitted when the scale of the item changes.
    [signal] scale_changed(),
    [signal] children_changed(),
    [signal] width_changed(),
    [signal] height_changed(),
    /// 
    [event] event(ev: *EventType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
