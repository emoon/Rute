/// 
/// QOffscreenSurface is intended to be used with QOpenGLContext to allow rendering with OpenGL in
/// an arbitrary thread without the need to create a QWindow.
/// 
/// Even though the surface is typically renderable, the surface's pixels are not accessible.
/// QOffscreenSurface should only be used to create OpenGL resources such as textures
/// or framebuffer objects.
/// 
/// An application will typically use QOffscreenSurface to perform some time-consuming tasks in a
/// separate thread in order to avoid stalling the main rendering thread. Resources created in the
/// QOffscreenSurface's context can be shared with the main OpenGL context. Some common use cases
/// are asynchronous texture uploads or rendering into a QOpenGLFramebufferObject.
/// 
/// How the offscreen surface is implemented depends on the underlying platform, but it will
/// typically use a pixel buffer (pbuffer). If the platform doesn't implement or support
/// offscreen surfaces, QOffscreenSurface will use an invisible QWindow internally.
/// 
/// **Note**: Due to the fact that QOffscreenSurface is backed by a QWindow on some platforms,
/// cross-platform applications must ensure that create() is only called on the main (GUI)
/// thread. The QOffscreenSurface is then safe to be used with
/// [makeCurrent()](QOpenGLContext::makeCurrent())
/// on other threads, but the
/// initialization and destruction must always happen on the main (GUI) thread.
/// 
/// **Note**: In order to create an offscreen surface that is guaranteed to be compatible with
/// a given context and window, make sure to set the format to the context's or the
/// window's actual format, that is, the QSurfaceFormat returned from
/// QOpenGLContext::format() or QWindow::format() *after the context or window has been
/// created* . Passing the format returned from QWindow::requestedFormat() to setFormat()
/// may result in an incompatible offscreen surface since the underlying windowing system
/// interface may offer a different set of configurations for window and pbuffer surfaces.
/// 
/// **Note**: Some platforms may utilize a surfaceless context extension (for example
/// EGL_KHR_surfaceless_context) when available. In this case there will be no underlying
/// native surface. For the use cases of QOffscreenSurface (rendering to FBOs, texture
/// upload) this is not a problem.
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct OffscreenSurface : Object, Surface {
    /// 
    /// Returns the surface type of the offscreen surface.
    /// 
    /// The surface type of an offscreen surface is always QSurface::OpenGLSurface.
    [event] surface_type() -> Surface::SurfaceType,
    /// 
    /// Allocates the platform resources associated with the offscreen surface.
    /// 
    /// It is at this point that the surface format set using setFormat() gets resolved
    /// into an actual native surface.
    /// 
    /// Call destroy() to free the platform resources if necessary.
    /// 
    /// **Note**: Some platforms require this function to be called on the main (GUI) thread.
    /// 
    /// **See also:** destroy()
    create(),
    /// 
    /// Returns `true` if this offscreen surface is valid; otherwise returns `false.`
    /// 
    /// The offscreen surface is valid if the platform resources have been successfuly allocated.
    /// 
    /// **See also:** create()
    is_valid() -> bool,
    /// 
    /// Sets the offscreen surface *format.*
    /// 
    /// The surface format will be resolved in the create() function. Calling
    /// this function after create() will not re-resolve the surface format of the native surface.
    /// 
    /// **See also:** create()
    /// destroy()
    set_format(format: &SurfaceFormatType),
    /// 
    /// Returns the actual format of this offscreen surface.
    /// 
    /// After the offscreen surface has been created, this function will return the actual
    /// surface format of the surface. It might differ from the requested format if the requested
    /// format could not be fulfilled by the platform.
    /// 
    /// **See also:** create()
    /// requestedFormat()
    [event] format() -> SurfaceFormat,
    /// 
    /// Returns the requested surfaceformat of this offscreen surface.
    /// 
    /// If the requested format was not supported by the platform implementation,
    /// the requestedFormat will differ from the actual offscreen surface format.
    /// 
    /// This is the value set with setFormat().
    /// 
    /// **See also:** setFormat()
    /// format()
    requested_format() -> SurfaceFormat,
    /// 
    /// Returns the size of the offscreen surface.
    [event] size() -> Size,
    /// 
    /// Returns the screen to which the offscreen surface is connected.
    /// 
    /// **See also:** setScreen()
    /// 
    /// This signal is emitted when an offscreen surface's *screen* changes, either
    /// by being set explicitly with setScreen(), or automatically when
    /// the window's screen is removed.
    screen() -> Screen?,
    /// 
    /// Sets the screen to which the offscreen surface is connected.
    /// 
    /// If the offscreen surface has been created, it will be recreated on the *newScreen.*
    /// 
    /// **See also:** screen()
    set_screen(screen: *ScreenType),
    handle() -> PlatformOffscreenSurface?,
    /// 
    /// Returns an optional native handle to which the offscreen surface is connected.
    /// 
    /// **See also:** setNativeHandle()
    native_handle(),
    /// 
    /// Sets the native handle to which the offscreen surface is connected to *handle.*
    /// 
    /// The native handle will be resolved in the create() function. Calling
    /// this function after create() will not re-create a native surface.
    /// 
    /// **Note**: The interpretation of the native handle is platform specific. Only
    /// some platforms will support adopting native handles of offscreen surfaces
    /// and platforms that do not implement this support will ignore the handle.
    /// 
    /// **See also:** nativeHandle()
    set_native_handle(handle: *void),
    /// 
    /// This signal is emitted when an offscreen surface's *screen* changes, either
    /// by being set explicitly with setScreen(), or automatically when
    /// the window's screen is removed.
    [signal] screen_changed(screen: *ScreenType),
}

// vim: syntax=rust expandtab ts=4 sw=4
