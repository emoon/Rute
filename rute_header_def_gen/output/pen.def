///     \class QPen
///     \inmodule QtGui
///     \ingroup painting
///     \ingroup shared
/// 
/// 
///     \brief The QPen class defines how a QPainter should draw lines and outlines
///     of shapes.
/// 
///     A pen has a style(), width(), brush(), capStyle() and joinStyle().
/// 
///     The pen style defines the line type. The brush is used to fill
///     strokes generated with the pen. Use the QBrush class to specify
///     fill styles.  The cap style determines the line end caps that can
///     be drawn using QPainter, while the join style describes how joins
///     between two lines are drawn. The pen width can be specified in
///     both integer (width()) and floating point (widthF()) precision. A
///     line width of zero indicates a cosmetic pen.  This means that the
///     pen width is always drawn one pixel wide, independent of the \l
///     {QPainter#Coordinate Transformations}{transformation} set on the
///     painter.
/// 
///     The various settings can easily be modified using the
///     corresponding setStyle(), setWidth(), setBrush(), setCapStyle()
///     and setJoinStyle() functions (note that the painter's pen must be
///     reset when altering the pen's properties).
/// 
///     For example:
/// 
///     \snippet code/src_gui_painting_qpen.cpp 0
/// 
///     which is equivalent to
/// 
///     \snippet code/src_gui_painting_qpen.cpp 1
/// 
///     The default pen is a solid black brush with 1 width, square
///     cap style (Qt::SquareCap), and  bevel join style (Qt::BevelJoin).
/// 
///     In addition QPen provides the color() and setColor()
///     convenience functions to extract and set the color of the pen's
///     brush, respectively. Pens may also be compared and streamed.
/// 
///     For more information about painting in general, see the \l{Paint
///     System} documentation.
/// 
///     \tableofcontents
/// 
///     \section1 Pen Style
/// 
///     Qt provides several built-in styles represented by the
///     Qt::PenStyle enum:
/// 
///     \table
///     \row
///     \li \inlineimage qpen-solid.png
///     \li \inlineimage qpen-dash.png
///     \li \inlineimage qpen-dot.png
///     \row
///     \li Qt::SolidLine
///     \li Qt::DashLine
///     \li Qt::DotLine
///     \row
///     \li \inlineimage qpen-dashdot.png
///     \li \inlineimage qpen-dashdotdot.png
///     \li \inlineimage qpen-custom.png
///     \row
///     \li Qt::DashDotLine
///     \li Qt::DashDotDotLine
///     \li Qt::CustomDashLine
///     \endtable
/// 
///     Simply use the setStyle() function to convert the pen style to
///     either of the built-in styles, except the Qt::CustomDashLine style
///     which we will come back to shortly. Setting the style to Qt::NoPen
///     tells the painter to not draw lines or outlines. The default pen
///     style is Qt::SolidLine.
/// 
///     Since Qt 4.1 it is also possible to specify a custom dash pattern
///     using the setDashPattern() function which implicitly converts the
///     style of the pen to Qt::CustomDashLine. The pattern argument, a
///     QVector, must be specified as an even number of \l qreal entries
///     where the entries 1, 3, 5... are the dashes and 2, 4, 6... are the
///     spaces. For example, the custom pattern shown above is created
///     using the following code:
/// 
///     \snippet code/src_gui_painting_qpen.cpp 2
/// 
///     Note that the dash pattern is specified in units of the pens
///     width, e.g. a dash of length 5 in width 10 is 50 pixels long.
/// 
///     The currently set dash pattern can be retrieved using the
///     dashPattern() function. Use the isSolid() function to determine
///     whether the pen has a solid fill, or not.
/// 
///     \section1 Cap Style
/// 
///     The cap style defines how the end points of lines are drawn using
///     QPainter.  The cap style only apply to wide lines, i.e. when the
///     width is 1 or greater. The Qt::PenCapStyle enum provides the
///     following styles:
/// 
///     \table
///     \row
///     \li \inlineimage qpen-square.png
///     \li \inlineimage qpen-flat.png
///     \li \inlineimage qpen-roundcap.png
///     \row
///     \li Qt::SquareCap
///     \li Qt::FlatCap
///     \li Qt::RoundCap
///     \endtable
/// 
///     The Qt::SquareCap style is a square line end that covers the end
///     point and extends beyond it by half the line width. The
///     Qt::FlatCap style is a square line end that does not cover the end
///     point of the line. And the Qt::RoundCap style is a rounded line
///     end covering the end point.
/// 
///     The default is Qt::SquareCap.
/// 
///     Whether or not end points are drawn when the pen width is 0 or 1
///     depends on the cap style. Using Qt::SquareCap or Qt::RoundCap they
///     are drawn, using Qt::FlatCap they are not drawn.
/// 
///     \section1 Join Style
/// 
///     The join style defines how joins between two connected lines can
///     be drawn using QPainter. The join style only apply to wide lines,
///     i.e. when the width is 1 or greater. The Qt::PenJoinStyle enum
///     provides the following styles:
/// 
///     \table
///     \row
///     \li \inlineimage qpen-bevel.png
///     \li \inlineimage qpen-miter.png
///     \li \inlineimage qpen-roundjoin.png
///     \row
///     \li Qt::BevelJoin
///     \li Qt::MiterJoin
///     \li Qt::RoundJoin
///     \endtable
/// 
///     The Qt::BevelJoin style fills the triangular notch between the two
///     lines. The Qt::MiterJoin style extends the lines to meet at an
///     angle. And the Qt::RoundJoin style fills a circular arc between
///     the two lines.
/// 
///     The default is Qt::BevelJoin.
/// 
///     \image qpen-miterlimit.png
/// 
///     When the Qt::MiterJoin style is applied, it is possible to use the
///     setMiterLimit() function to specify how far the miter join can
///     extend from the join point. The miterLimit() is used to reduce
///     artifacts between line joins where the lines are close to
///     parallel.
/// 
///     The miterLimit() must be specified in units of the pens width,
///     e.g. a miter limit of 5 in width 10 is 50 pixels long. The
///     default miter limit is 2, i.e. twice the pen width in pixels.
/// 
///     \table 100%
///     \row
///     \li \inlineimage qpen-demo.png
///     \li \b {\l {painting/pathstroke}{The Path Stroking Example}}
/// 
///     The Path Stroking example shows Qt's built-in dash patterns and shows
///     how custom patterns can be used to extend the range of available
///     patterns.
///     \endtable
/// 
///     \sa QPainter, QBrush, {painting/pathstroke}{Path Stroking Example},
///         {Scribble Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct Pen {
    swap(other: &PenType),
    ///     \fn Qt::PenStyle QPen::style() const
    /// 
    ///     Returns the pen style.
    /// 
    ///     \sa setStyle(), {QPen#Pen Style}{Pen Style}
    style() -> Rute::PenStyle,
    ///     \fn void QPen::setStyle(Qt::PenStyle style)
    /// 
    ///     Sets the pen style to the given \a style.
    /// 
    ///     See the \l Qt::PenStyle documentation for a list of the available
    ///     styles. Since Qt 4.1 it is also possible to specify a custom dash
    ///     pattern using the setDashPattern() function which implicitly
    ///     converts the style of the pen to Qt::CustomDashLine.
    /// 
    ///     \note This function resets the dash offset to zero.
    /// 
    ///     \sa style(), {QPen#Pen Style}{Pen Style}
    set_style(arg0: Rute::PenStyle),
    dash_pattern() -> [f32],
    set_dash_pattern(pattern: [f32]),
    ///     Returns the dash offset for the pen.
    /// 
    ///     \sa setDashOffset()
    dash_offset() -> f32,
    ///     Sets the dash offset (the starting point on the dash pattern) for this pen
    ///     to the \a offset specified. The offset is measured in terms of the units used
    ///     to specify the dash pattern.
    /// 
    ///     \table
    ///     \row \li \inlineimage qpen-dashpattern.png
    ///     \li For example, a pattern where each stroke is four units long, followed by a gap
    ///     of two units, will begin with the stroke when drawn as a line.
    /// 
    ///     However, if the dash offset is set to 4.0, any line drawn will begin with the gap.
    ///     Values of the offset up to 4.0 will cause part of the stroke to be drawn first,
    ///     and values of the offset between 4.0 and 6.0 will cause the line to begin with
    ///     part of the gap.
    ///     \endtable
    /// 
    ///     \note This implicitly converts the style of the pen to Qt::CustomDashLine.
    set_dash_offset(doffset: f32),
    ///     Returns the miter limit of the pen. The miter limit is only
    ///     relevant when the join style is set to Qt::MiterJoin.
    /// 
    ///     \sa setMiterLimit(), {QPen#Join Style}{Join Style}
    miter_limit() -> f32,
    ///     Sets the miter limit of this pen to the given \a limit.
    /// 
    ///     \image qpen-miterlimit.png
    /// 
    ///     The miter limit describes how far a miter join can extend from the
    ///     join point. This is used to reduce artifacts between line joins
    ///     where the lines are close to parallel.
    /// 
    ///     This value does only have effect when the pen style is set to
    ///     Qt::MiterJoin. The value is specified in units of the pen's width,
    ///     e.g. a miter limit of 5 in width 10 is 50 pixels long. The default
    ///     miter limit is 2, i.e. twice the pen width in pixels.
    /// 
    ///     \sa miterLimit(), setJoinStyle(), {QPen#Join Style}{Join Style}
    set_miter_limit(limit: f32),
    ///     \fn qreal QPen::widthF() const
    /// 
    ///     Returns the pen width with floating point precision.
    /// 
    ///     \sa setWidthF(), width()
    width_f() -> f32,
    ///     Sets the pen width to the given \a width in pixels with floating point
    ///     precision.
    /// 
    ///     A line width of zero indicates a cosmetic pen. This means that the
    ///     pen width is always drawn one pixel wide, independent of the \l
    ///     {QPainter#Coordinate Transformations}{transformation} on the
    ///     painter.
    /// 
    ///     Setting a pen width with a negative value is not supported.
    /// 
    ///     \sa setWidth(), widthF()
    set_width_f(width: f32),
    ///     \fn qreal QPen::width() const
    /// 
    ///     Returns the pen width with integer precision.
    /// 
    ///     \sa setWidth(), widthF()
    width() -> i32,
    ///     \fn QPen::setWidth(int width)
    /// 
    ///     Sets the pen width to the given \a width in pixels with integer
    ///     precision.
    /// 
    ///     A line width of zero indicates a cosmetic pen. This means that the
    ///     pen width is always drawn one pixel wide, independent of the \l
    ///     {QPainter#Coordinate Transformations}{transformation} set on the
    ///     painter.
    /// 
    ///     Setting a pen width with a negative value is not supported.
    /// 
    ///     \sa setWidthF(), width()
    set_width(width: i32),
    ///     \fn const QColor &QPen::color() const
    /// 
    ///     Returns the color of this pen's brush.
    /// 
    ///     \sa brush(), setColor()
    color() -> Color,
    ///     \fn void QPen::setColor(const QColor &color)
    /// 
    ///     Sets the color of this pen's brush to the given \a color.
    /// 
    ///     \sa setBrush(), color()
    set_color(color: &ColorType),
    ///     Returns the brush used to fill strokes generated with this pen.
    brush() -> Brush,
    ///     Sets the brush used to fill strokes generated with this pen to the given
    ///     \a brush.
    /// 
    ///     \sa brush(), setColor()
    set_brush(brush: &BrushType),
    ///     Returns \c true if the pen has a solid fill, otherwise false.
    /// 
    ///     \sa style(), dashPattern()
    is_solid() -> bool,
    ///     Returns the pen's cap style.
    /// 
    ///     \sa setCapStyle(), {QPen#Cap Style}{Cap Style}
    cap_style() -> Rute::PenCapStyle,
    ///     \fn void QPen::setCapStyle(Qt::PenCapStyle style)
    /// 
    ///     Sets the pen's cap style to the given \a style. The default value
    ///     is Qt::SquareCap.
    /// 
    ///     \sa capStyle(), {QPen#Cap Style}{Cap Style}
    set_cap_style(pcs: Rute::PenCapStyle),
    ///     Returns the pen's join style.
    /// 
    ///     \sa setJoinStyle(), {QPen#Join Style}{Join Style}
    join_style() -> Rute::PenJoinStyle,
    ///     \fn void QPen::setJoinStyle(Qt::PenJoinStyle style)
    /// 
    ///     Sets the pen's join style to the given \a style. The default value
    ///     is Qt::BevelJoin.
    /// 
    ///     \sa joinStyle(), {QPen#Join Style}{Join Style}
    set_join_style(pcs: Rute::PenJoinStyle),
    ///     Returns \c true if the pen is cosmetic; otherwise returns \c false.
    /// 
    ///     Cosmetic pens are used to draw strokes that have a constant width
    ///     regardless of any transformations applied to the QPainter they are
    ///     used with. Drawing a shape with a cosmetic pen ensures that its
    ///     outline will have the same thickness at different scale factors.
    /// 
    ///     A zero width pen is cosmetic by default.
    /// 
    ///     \sa setCosmetic(), widthF()
    is_cosmetic() -> bool,
    ///     Sets this pen to cosmetic or non-cosmetic, depending on the value of
    ///     \a cosmetic.
    /// 
    ///     \sa isCosmetic()
    set_cosmetic(cosmetic: bool),
    ///     \fn bool QPen::isDetached()
    /// 
    ///     \internal
    is_detached() -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
