/// 
/// To set the item's rectangle, pass a QRectF to QGraphicsRectItem's
/// constructor, or call the setRect() function. The rect() function
/// returns the current rectangle.
/// 
/// ![graphicsview-rectitem.png](graphicsview-rectitem.png)
/// 
/// QGraphicsRectItem uses the rectangle and the pen width to provide
/// a reasonable implementation of boundingRect(), shape(), and
/// contains(). The paint() function draws the rectangle using the
/// item's associated pen and brush, which you can set by calling the
/// setPen() and setBrush() functions.
/// 
/// **Note**: The rendering of invalid rectangles, such as those with negative
/// widths or heights, is undefined. If you cannot be sure that you are
/// using valid rectangles (for example, if you are creating
/// rectangles using data from an unreliable source) then you should
/// use QRectF::normalized() to create normalized rectangles, and use
/// those instead.
/// 
/// **See also:** QGraphicsPathItem
/// QGraphicsEllipseItem
/// QGraphicsPolygonItem
/// QGraphicsTextItem
/// QGraphicsLineItem
/// QGraphicsPixmapItem
/// {Graphics
/// View Framework}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QGraphicsRectItem)]
enum GraphicsRectItemFixMeEnums {
    Type,
}

struct GraphicsRectItem : AbstractGraphicsShapeItem {
    /// 
    /// Returns the item's rectangle.
    /// 
    /// **See also:** setRect()
    rect() -> RectF,
    /// 
    /// Sets the item's rectangle to be the given *rectangle.*
    /// 
    /// **See also:** rect()
    set_rect(rect: &RectFType),
    /// 
    /// Sets the item's rectangle to be the given *rectangle.*
    /// 
    /// **See also:** rect()
    set_rect(x: f32, y: f32, w: f32, h: f32),
    /// 
    [event] bounding_rect() -> RectF,
    /// 
    [event] shape() -> PainterPath,
    /// 
    [event] contains(point: &PointFType) -> bool,
    /// 
    [event] paint(painter: *PainterType, option: *StyleOptionGraphicsItemType, widget: *WidgetType),
    /// 
    [event] is_obscured_by(item: *GraphicsItemType) -> bool,
    /// 
    [event] opaque_area() -> PainterPath,
    /// 
    [event] type() -> i32,
    [event] supports_extension(extension: GraphicsItem::Extension) -> bool,
    [event] set_extension(extension: GraphicsItem::Extension, variant: &VariantType),
    [event] extension(variant: &VariantType) -> Variant,
}

// vim: syntax=rust expandtab ts=4 sw=4
