[org_name(QMessageBox)]
enum Icon {
    NoIcon,
    Information,
    Warning,
    Critical,
    Question,
}

[org_name(QMessageBox)]
enum ButtonRole {
    InvalidRole,
    AcceptRole,
    RejectRole,
    DestructiveRole,
    ActionRole,
    HelpRole,
    YesRole,
    NoRole,
    ResetRole,
    ApplyRole,
    NRoles,
}

[org_name(QMessageBox)]
enum StandardButton {
    NoButton,
    Ok,
    Save,
    SaveAll,
    Open,
    Yes,
    YesToAll,
    No,
    NoToAll,
    Abort,
    Retry,
    Ignore,
    Close,
    Cancel,
    Discard,
    Help,
    Apply,
    Reset,
    RestoreDefaults,
    FirstButton,
    LastButton,
    YesAll,
    NoAll,
    Default,
    Escape,
    FlagMask,
    ButtonMask,
}

struct MessageBox : Dialog {
    add_button(button: &AbstractButtonType, role: MessageBox::ButtonRole),
    add_button(text: String, role: MessageBox::ButtonRole) -> PushButton?,
    add_button(button: MessageBox::StandardButton) -> PushButton?,
    remove_button(button: &AbstractButtonType),
    open(receiver: &ObjectType, member: &char),
    buttons() -> [AbstractButton?],
    button_role(button: &AbstractButtonType) -> MessageBox::ButtonRole,
    set_standard_buttons(buttons: StandardButtons),
    standard_buttons() -> StandardButtons,
    standard_button(button: &AbstractButtonType) -> MessageBox::StandardButton,
    button(which: MessageBox::StandardButton) -> AbstractButton?,
    default_button() -> PushButton?,
    set_default_button(button: &PushButtonType),
    set_default_button(button: MessageBox::StandardButton),
    escape_button() -> AbstractButton?,
    set_escape_button(button: &AbstractButtonType),
    set_escape_button(button: MessageBox::StandardButton),
    clicked_button() -> AbstractButton?,
    text() -> String,
    set_text(text: String),
    icon() -> MessageBox::Icon,
    set_icon(arg0: MessageBox::Icon),
    icon_pixmap() -> Pixmap,
    set_icon_pixmap(pixmap: &PixmapType),
    text_format() -> Rute::TextFormat,
    set_text_format(format: Rute::TextFormat),
    set_text_interaction_flags(flags: Rute::TextInteractionFlags),
    text_interaction_flags() -> Rute::TextInteractionFlags,
    set_check_box(cb: &CheckBoxType),
    check_box() -> CheckBox?,
    [static] information(parent: &WidgetType, title: String, text: String, buttons: StandardButtons, default_button: MessageBox::StandardButton) -> MessageBox::StandardButton,
    [static] question(parent: &WidgetType, title: String, text: String, buttons: StandardButtons, default_button: MessageBox::StandardButton) -> MessageBox::StandardButton,
    [static] warning(parent: &WidgetType, title: String, text: String, buttons: StandardButtons, default_button: MessageBox::StandardButton) -> MessageBox::StandardButton,
    [static] critical(parent: &WidgetType, title: String, text: String, buttons: StandardButtons, default_button: MessageBox::StandardButton) -> MessageBox::StandardButton,
    [static] about(parent: &WidgetType, title: String, text: String),
    [static] about_qt(parent: &WidgetType, title: String),
    [static] information(parent: &WidgetType, title: String, text: String, button0: i32, button1: i32, button2: i32) -> i32,
    [static] information(parent: &WidgetType, title: String, text: String, button0_text: String, button1_text: String, button2_text: String, default_button_number: i32, escape_button_number: i32) -> i32,
    [static] information(parent: &WidgetType, title: String, text: String, button0: MessageBox::StandardButton, button1: MessageBox::StandardButton) -> MessageBox::StandardButton,
    [static] question(parent: &WidgetType, title: String, text: String, button0: i32, button1: i32, button2: i32) -> i32,
    [static] question(parent: &WidgetType, title: String, text: String, button0_text: String, button1_text: String, button2_text: String, default_button_number: i32, escape_button_number: i32) -> i32,
    [static] question(parent: &WidgetType, title: String, text: String, button0: MessageBox::StandardButton, button1: MessageBox::StandardButton) -> i32,
    [static] warning(parent: &WidgetType, title: String, text: String, button0: i32, button1: i32, button2: i32) -> i32,
    [static] warning(parent: &WidgetType, title: String, text: String, button0_text: String, button1_text: String, button2_text: String, default_button_number: i32, escape_button_number: i32) -> i32,
    [static] warning(parent: &WidgetType, title: String, text: String, button0: MessageBox::StandardButton, button1: MessageBox::StandardButton) -> i32,
    [static] critical(parent: &WidgetType, title: String, text: String, button0: i32, button1: i32, button2: i32) -> i32,
    [static] critical(parent: &WidgetType, title: String, text: String, button0_text: String, button1_text: String, button2_text: String, default_button_number: i32, escape_button_number: i32) -> i32,
    [static] critical(parent: &WidgetType, title: String, text: String, button0: MessageBox::StandardButton, button1: MessageBox::StandardButton) -> i32,
    button_text(button: i32) -> String,
    set_button_text(button: i32, text: String),
    informative_text() -> String,
    set_informative_text(text: String),
    detailed_text() -> String,
    set_detailed_text(text: String),
    set_window_title(title: String),
    set_window_modality(window_modality: Rute::WindowModality),
    [static] standard_icon(icon: MessageBox::Icon) -> Pixmap,
    [event] button_clicked(button: &AbstractButtonType),
    [replace] event(e: &EventType) -> bool,
    [replace] resize_event(event: &ResizeEventType),
    [replace] show_event(event: &ShowEventType),
    [replace] close_event(event: &CloseEventType),
    [replace] key_press_event(event: &KeyEventType),
    [replace] change_event(event: &EventType),
}

// vim: syntax=rust expandtab ts=4 sw=4
