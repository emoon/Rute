/// 
/// QIODevice provides both a common implementation and an abstract
/// interface for devices that support reading and writing of blocks
/// of data, such as QFile, QBuffer and QTcpSocket. QIODevice is
/// abstract and can not be instantiated, but it is common to use the
/// interface it defines to provide device-independent I/O features.
/// For example, Qt's XML classes operate on a QIODevice pointer,
/// allowing them to be used with various devices (such as files and
/// buffers).
/// 
/// Before accessing the device, open() must be called to set the
/// correct OpenMode (such as ReadOnly or ReadWrite). You can then
/// write to the device with write() or putChar(), and read by calling
/// either read(), readLine(), or readAll(). Call close() when you are
/// done with the device.
/// 
/// QIODevice distinguishes between two types of devices:
/// random-access devices and sequential devices.
/// 
/// * Random-access devices support seeking to arbitrary positions using seek(). The current position in the file is available by calling pos(). QFile and QBuffer are examples of random-access devices.
/// * Sequential devices don't support seeking to arbitrary positions. The data must be read in one pass. The functions pos() and size() don't work for sequential devices. QTcpSocket and QProcess are examples of sequential devices.
/// 
/// You can use isSequential() to determine the type of device.
/// 
/// QIODevice emits readyRead() when new data is available for
/// reading; for example, if new data has arrived on the network or if
/// additional data is appended to a file that you are reading
/// from. You can call bytesAvailable() to determine the number of
/// bytes that are currently available for reading. It's common to use
/// bytesAvailable() together with the readyRead() signal when
/// programming with asynchronous devices such as QTcpSocket, where
/// fragments of data can arrive at arbitrary points in
/// time. QIODevice emits the bytesWritten() signal every time a
/// payload of data has been written to the device. Use bytesToWrite()
/// to determine the current amount of data waiting to be written.
/// 
/// Certain subclasses of QIODevice, such as QTcpSocket and QProcess,
/// are asynchronous. This means that I/O functions such as write()
/// or read() always return immediately, while communication with the
/// device itself may happen when control goes back to the event loop.
/// QIODevice provides functions that allow you to force these
/// operations to be performed immediately, while blocking the
/// calling thread and without entering the event loop. This allows
/// QIODevice subclasses to be used without an event loop, or in
/// a separate thread:
/// 
/// * waitForReadyRead() - This function suspends operation in the calling thread until new data is available for reading.
/// * waitForBytesWritten() - This function suspends operation in the calling thread until one payload of data has been written to the device.
/// * waitFor....() - Subclasses of QIODevice implement blocking functions for device-specific operations. For example, QProcess has a function called [waitForStarted()](QProcess::)
/// which suspends operation in the calling thread until the process has started.
/// 
/// Calling these functions from the main, GUI thread, may cause your
/// user interface to freeze. Example:
/// 
/// By subclassing QIODevice, you can provide the same interface to
/// your own I/O devices. Subclasses of QIODevice are only required to
/// implement the protected readData() and writeData() functions.
/// QIODevice uses these functions to implement all its convenience
/// functions, such as getChar(), readLine() and write(). QIODevice
/// also handles access control for you, so you can safely assume that
/// the device is opened in write mode if writeData() is called.
/// 
/// Some subclasses, such as QFile and QTcpSocket, are implemented
/// using a memory buffer for intermediate storing of data. This
/// reduces the number of required device accessing calls, which are
/// often very slow. Buffering makes functions like getChar() and
/// putChar() fast, as they can operate on the memory buffer instead
/// of directly on the device itself. Certain I/O operations, however,
/// don't work well with a buffer. For example, if several users open
/// the same device and read it character by character, they may end
/// up reading the same data when they meant to read a separate chunk
/// each. For this reason, QIODevice allows you to bypass any
/// buffering by passing the Unbuffered flag to open(). When
/// subclassing QIODevice, remember to bypass any buffer you may use
/// when the device is open in Unbuffered mode.
/// 
/// Usually, the incoming data stream from an asynchronous device is
/// fragmented, and chunks of data can arrive at arbitrary points in time.
/// To handle incomplete reads of data structures, use the transaction
/// mechanism implemented by QIODevice. See startTransaction() and related
/// functions for more details.
/// 
/// Some sequential devices support communicating via multiple channels. These
/// channels represent separate streams of data that have the property of
/// independently sequenced delivery. Once the device is opened, you can
/// determine the number of channels by calling the readChannelCount() and
/// writeChannelCount() functions. To switch between channels, call
/// setCurrentReadChannel() and setCurrentWriteChannel(), respectively.
/// QIODevice also provides additional signals to handle asynchronous
/// communication on a per-channel basis.
/// 
/// **See also:** [`Buffer`]
/// [`File`]
/// [`TcpSocket`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct IODevice : Object {
    /// 
    /// Returns the mode in which the device has been opened;
    /// i.e. ReadOnly or WriteOnly.
    /// 
    /// **See also:** OpenMode
    open_mode() -> IODevice::OpenMode,
    /// 
    /// If *enabled* is true, this function sets the [Text](Text)
    /// flag on the device;
    /// otherwise the [Text](Text)
    /// flag is removed. This feature is useful for classes
    /// that provide custom end-of-line handling on a QIODevice.
    /// 
    /// The IO device should be opened before calling this function.
    /// 
    /// **See also:** [`open()`]
    /// [`set_open_mode()`]
    set_text_mode_enabled(enabled: bool),
    /// 
    /// Returns `true` if the [Text](Text)
    /// flag is enabled; otherwise returns `false.`
    /// 
    /// **See also:** [`set_text_mode_enabled()`]
    is_text_mode_enabled() -> bool,
    /// 
    /// Returns `true` if the device is open; otherwise returns `false.` A
    /// device is open if it can be read from and/or written to. By
    /// default, this function returns `false` if openMode() returns
    /// `NotOpen.`
    /// 
    /// **See also:** [`open_mode()`]
    /// OpenMode
    is_open() -> bool,
    /// 
    /// Returns `true` if data can be read from the device; otherwise returns
    /// false. Use bytesAvailable() to determine how many bytes can be read.
    /// 
    /// This is a convenience function which checks if the OpenMode of the
    /// device contains the ReadOnly flag.
    /// 
    /// **See also:** [`open_mode()`]
    /// OpenMode
    is_readable() -> bool,
    /// 
    /// Returns `true` if data can be written to the device; otherwise returns
    /// false.
    /// 
    /// This is a convenience function which checks if the OpenMode of the
    /// device contains the WriteOnly flag.
    /// 
    /// **See also:** [`open_mode()`]
    /// OpenMode
    is_writable() -> bool,
    /// 
    /// Returns `true` if this device is sequential; otherwise returns
    /// false.
    /// 
    /// Sequential devices, as opposed to a random-access devices, have no
    /// concept of a start, an end, a size, or a current position, and they
    /// do not support seeking. You can only read from the device when it
    /// reports that data is available. The most common example of a
    /// sequential device is a network socket. On Unix, special files such
    /// as /dev/zero and fifo pipes are sequential.
    /// 
    /// Regular files, on the other hand, do support random access. They
    /// have both a size and a current position, and they also support
    /// seeking backwards and forwards in the data stream. Regular files
    /// are non-sequential.
    /// 
    /// **See also:** [`bytes_available()`]
    [event] is_sequential() -> bool,
    /// 
    /// Returns the number of available read channels if the device is open;
    /// otherwise returns 0.
    /// 
    /// **See also:** [`write_channel_count()`]
    /// [`Process`]
    read_channel_count() -> i32,
    /// 
    /// Returns the number of available write channels if the device is open;
    /// otherwise returns 0.
    /// 
    /// **See also:** [`read_channel_count()`]
    write_channel_count() -> i32,
    /// 
    /// Returns the index of the current read channel.
    /// 
    /// **See also:** [`set_current_read_channel()`]
    /// [`read_channel_count()`]
    /// [`Process`]
    current_read_channel() -> i32,
    /// 
    /// Sets the current read channel of the QIODevice to the given *channel.* The current input channel is used by the functions
    /// read(), readAll(), readLine(), and getChar(). It also determines
    /// which channel triggers QIODevice to emit readyRead().
    /// 
    /// **See also:** [`current_read_channel()`]
    /// [`read_channel_count()`]
    /// [`Process`]
    set_current_read_channel(channel: i32),
    /// 
    /// Returns the the index of the current write channel.
    /// 
    /// **See also:** [`set_current_write_channel()`]
    /// [`write_channel_count()`]
    current_write_channel() -> i32,
    /// 
    /// Sets the current write channel of the QIODevice to the given *channel.* The current output channel is used by the functions
    /// write(), putChar(). It also determines which channel triggers
    /// QIODevice to emit bytesWritten().
    /// 
    /// **See also:** [`current_write_channel()`]
    /// [`write_channel_count()`]
    set_current_write_channel(channel: i32),
    /// 
    /// Returns the mode in which the device has been opened;
    /// i.e. ReadOnly or WriteOnly.
    /// 
    /// **See also:** OpenMode
    /// 
    /// Opens the device and sets its OpenMode to *mode.* Returns `true` if successful;
    /// otherwise returns `false.` This function should be called from any
    /// reimplementations of open() or other functions that open the device.
    /// 
    /// **See also:** [`open_mode()`]
    /// OpenMode
    [event] open(mode: IODevice::OpenMode) -> bool,
    /// 
    /// First emits aboutToClose(), then closes the device and sets its
    /// OpenMode to NotOpen. The error string is also reset.
    /// 
    /// **See also:** [`set_open_mode()`]
    /// OpenMode
    [event] close(),
    /// 
    /// For random-access devices, this function returns the position that
    /// data is written to or read from. For sequential devices or closed
    /// devices, where there is no concept of a , 0 is
    /// returned.
    /// 
    /// The current read/write position of the device is maintained internally by
    /// QIODevice, so reimplementing this function is not necessary. When
    /// subclassing QIODevice, use QIODevice::seek() to notify QIODevice about
    /// changes in the device position.
    /// 
    /// **See also:** [`is_sequential()`]
    /// [`seek()`]
    [event] pos() -> i64,
    /// 
    /// For open random-access devices, this function returns the size of the
    /// device. For open sequential devices, bytesAvailable() is returned.
    /// 
    /// If the device is closed, the size returned will not reflect the actual
    /// size of the device.
    /// 
    /// **See also:** [`is_sequential()`]
    /// [`pos()`]
    [event] size() -> i64,
    /// 
    /// For random-access devices, this function sets the current position
    /// to *pos,* returning true on success, or false if an error occurred.
    /// For sequential devices, the default behavior is to produce a warning
    /// and return false.
    /// 
    /// When subclassing QIODevice, you must call QIODevice::seek() at the
    /// start of your function to ensure integrity with QIODevice's
    /// built-in buffer.
    /// 
    /// **See also:** [`pos()`]
    /// [`is_sequential()`]
    [event] seek(pos: i64) -> bool,
    /// 
    /// Returns `true` if the current read and write position is at the end
    /// of the device (i.e. there is no more data available for reading on
    /// the device); otherwise returns `false.`
    /// 
    /// For some devices, atEnd() can return true even though there is more data
    /// to read. This special case only applies to devices that generate data in
    /// direct response to you calling read() (e.g., `/dev` or `/proc` files on
    /// Unix and MacOS , or console input / `stdin` on all platforms).
    /// 
    /// **See also:** [`bytes_available()`]
    /// [`read()`]
    /// [`is_sequential()`]
    [event] at_end() -> bool,
    /// 
    /// Seeks to the start of input for random-access devices. Returns
    /// true on success; otherwise returns `false` (for example, if the
    /// device is not open).
    /// 
    /// Note that when using a QTextStream on a QFile, calling reset() on
    /// the QFile will not have the expected result because QTextStream
    /// buffers the file. Use the QTextStream::seek() function instead.
    /// 
    /// **See also:** [`seek()`]
    [event] reset() -> bool,
    /// 
    /// Returns the number of bytes that are available for reading. This
    /// function is commonly used with sequential devices to determine the
    /// number of bytes to allocate in a buffer before reading.
    /// 
    /// Subclasses that reimplement this function must call the base
    /// implementation in order to include the size of the buffer of QIODevice. Example:
    /// 
    /// **See also:** [`bytes_to_write()`]
    /// [`ready_read()`]
    /// [`is_sequential()`]
    [event] bytes_available() -> i64,
    /// For buffered devices, this function returns the number of bytes
    /// waiting to be written. For devices with no buffer, this function
    /// returns 0.
    /// 
    /// Subclasses that reimplement this function must call the base
    /// implementation in order to include the size of the buffer of QIODevice.
    /// 
    /// **See also:** [`bytes_available()`]
    /// [`bytes_written()`]
    /// [`is_sequential()`]
    [event] bytes_to_write() -> i64,
    /// 
    /// This signal is emitted once every time new data is available for
    /// reading from the device's current read channel. It will only be emitted
    /// again once new data is available, such as when a new payload of network
    /// data has arrived on your network socket, or when a new block of data has
    /// been appended to your device.
    /// 
    /// readyRead() is not emitted recursively; if you reenter the event loop or
    /// call waitForReadyRead() inside a slot connected to the readyRead() signal,
    /// the signal will not be reemitted (although waitForReadyRead() may still
    /// return true).
    /// 
    /// Note for developers implementing classes derived from QIODevice:
    /// you should always emit readyRead() when new data has arrived (do not
    /// emit it only because there's data still to be read in your
    /// buffers). Do not emit readyRead() in other conditions.
    /// 
    /// **See also:** [`bytes_written()`]
    /// 
    /// This signal is emitted when the input (reading) stream is closed
    /// in this device. It is emitted as soon as the closing is detected,
    /// which means that there might still be data available for reading
    /// with read().
    /// 
    /// **See also:** [`at_end()`]
    /// [`read()`]
    /// 
    /// Returns the number of available read channels if the device is open;
    /// otherwise returns 0.
    /// 
    /// **See also:** [`write_channel_count()`]
    /// [`Process`]
    /// 
    /// Reads at most *maxSize* bytes from the device into *data,* and
    /// returns the number of bytes read. If an error occurs, such as when
    /// attempting to read from a device opened in WriteOnly mode, this
    /// function returns -1.
    /// 
    /// 0 is returned when no more data is available for reading. However,
    /// reading past the end of the stream is considered an error, so this
    /// function returns -1 in those cases (that is, reading on a closed
    /// socket or after a process has died).
    /// 
    /// **See also:** [`read_data()`]
    /// [`read_line()`]
    /// [`write()`]
    /// 
    /// **Overloads**
    /// Reads at most *maxSize* bytes from the device, and returns the
    /// data read as a QByteArray.
    /// 
    /// This function has no way of reporting errors; returning an empty
    /// QByteArray can mean either that no data was currently available
    /// for reading, or that an error occurred.
    /// 
    /// Reads all remaining data from the device, and returns it as a
    /// byte array.
    /// 
    /// This function has no way of reporting errors; returning an empty
    /// QByteArray can mean either that no data was currently available
    /// for reading, or that an error occurred.
    /// 
    /// This function reads a line of ASCII characters from the device, up
    /// to a maximum of *maxSize* - 1 bytes, stores the characters in *data,* and returns the number of bytes read. If a line could not be
    /// read but no error ocurred, this function returns 0. If an error
    /// occurs, this function returns the length of what could be read, or
    /// -1 if nothing was read.
    /// 
    /// A terminating '\\0' byte is always appended to *data,* so *maxSize* must be larger than 1.
    /// 
    /// Data is read until either of the following conditions are met:
    /// 
    /// * The first '\\n' character is read.
    /// * *maxSize* - 1 bytes are read.
    /// * The end of the device data is detected.
    /// 
    /// For example, the following code reads a line of characters from a
    /// file:
    /// 
    /// The newline character ('\\n') is included in the buffer. If a
    /// newline is not encountered before maxSize - 1 bytes are read, a
    /// newline will not be inserted into the buffer. On windows newline
    /// characters are replaced with '\\n'.
    /// 
    /// This function calls readLineData(), which is implemented using
    /// repeated calls to getChar(). You can provide a more efficient
    /// implementation by reimplementing readLineData() in your own
    /// subclass.
    /// 
    /// **See also:** [`get_char()`]
    /// [`read()`]
    /// [`write()`]
    /// 
    /// **Overloads**
    /// Reads a line from the device, but no more than *maxSize* characters,
    /// and returns the result as a byte array.
    /// 
    /// This function has no way of reporting errors; returning an empty
    /// QByteArray can mean either that no data was currently available
    /// for reading, or that an error occurred.
    /// 
    /// Reads up to *maxSize* characters into *data* and returns the
    /// number of characters read.
    /// 
    /// This function is called by readLine(), and provides its base
    /// implementation, using getChar(). Buffered devices can improve the
    /// performance of readLine() by reimplementing this function.
    /// 
    /// readLine() appends a '\\0' byte to *data;* readLineData() does not
    /// need to do this.
    /// 
    /// If you reimplement this function, be careful to return the correct
    /// value: it should return the number of bytes read in this line,
    /// including the terminating newline, or 0 if there is no line to be
    /// read at this point. If an error occurs, it should return -1 if and
    /// only if no bytes were read. Reading past EOF is considered an error.
    /// 
    /// Reads up to *maxSize* bytes from the device into *data,* and
    /// returns the number of bytes read or -1 if an error occurred.
    /// 
    /// If there are no bytes to be read and there can never be more bytes
    /// available (examples include socket closed, pipe closed, sub-process
    /// finished), this function returns -1.
    /// 
    /// This function is called by QIODevice. Reimplement this function
    /// when creating a subclass of QIODevice.
    /// 
    /// When reimplementing this function it is important that this function
    /// reads all the required data before returning. This is required in order
    /// for QDataStream to be able to operate on the class. QDataStream assumes
    /// all the requested information was read and therefore does not retry reading
    /// if there was a problem.
    /// 
    /// This function might be called with a maxSize of 0, which can be used to
    /// perform post-reading operations.
    /// 
    /// **See also:** [`read()`]
    /// [`read_line()`]
    /// [`write_data()`]
    read(data: *char, maxlen: i64) -> i64,
    /// 
    /// This signal is emitted once every time new data is available for
    /// reading from the device's current read channel. It will only be emitted
    /// again once new data is available, such as when a new payload of network
    /// data has arrived on your network socket, or when a new block of data has
    /// been appended to your device.
    /// 
    /// readyRead() is not emitted recursively; if you reenter the event loop or
    /// call waitForReadyRead() inside a slot connected to the readyRead() signal,
    /// the signal will not be reemitted (although waitForReadyRead() may still
    /// return true).
    /// 
    /// Note for developers implementing classes derived from QIODevice:
    /// you should always emit readyRead() when new data has arrived (do not
    /// emit it only because there's data still to be read in your
    /// buffers). Do not emit readyRead() in other conditions.
    /// 
    /// **See also:** [`bytes_written()`]
    /// 
    /// This signal is emitted when the input (reading) stream is closed
    /// in this device. It is emitted as soon as the closing is detected,
    /// which means that there might still be data available for reading
    /// with read().
    /// 
    /// **See also:** [`at_end()`]
    /// [`read()`]
    /// 
    /// Returns the number of available read channels if the device is open;
    /// otherwise returns 0.
    /// 
    /// **See also:** [`write_channel_count()`]
    /// [`Process`]
    /// 
    /// Reads at most *maxSize* bytes from the device into *data,* and
    /// returns the number of bytes read. If an error occurs, such as when
    /// attempting to read from a device opened in WriteOnly mode, this
    /// function returns -1.
    /// 
    /// 0 is returned when no more data is available for reading. However,
    /// reading past the end of the stream is considered an error, so this
    /// function returns -1 in those cases (that is, reading on a closed
    /// socket or after a process has died).
    /// 
    /// **See also:** [`read_data()`]
    /// [`read_line()`]
    /// [`write()`]
    /// 
    /// **Overloads**
    /// Reads at most *maxSize* bytes from the device, and returns the
    /// data read as a QByteArray.
    /// 
    /// This function has no way of reporting errors; returning an empty
    /// QByteArray can mean either that no data was currently available
    /// for reading, or that an error occurred.
    /// 
    /// Reads all remaining data from the device, and returns it as a
    /// byte array.
    /// 
    /// This function has no way of reporting errors; returning an empty
    /// QByteArray can mean either that no data was currently available
    /// for reading, or that an error occurred.
    /// 
    /// This function reads a line of ASCII characters from the device, up
    /// to a maximum of *maxSize* - 1 bytes, stores the characters in *data,* and returns the number of bytes read. If a line could not be
    /// read but no error ocurred, this function returns 0. If an error
    /// occurs, this function returns the length of what could be read, or
    /// -1 if nothing was read.
    /// 
    /// A terminating '\\0' byte is always appended to *data,* so *maxSize* must be larger than 1.
    /// 
    /// Data is read until either of the following conditions are met:
    /// 
    /// * The first '\\n' character is read.
    /// * *maxSize* - 1 bytes are read.
    /// * The end of the device data is detected.
    /// 
    /// For example, the following code reads a line of characters from a
    /// file:
    /// 
    /// The newline character ('\\n') is included in the buffer. If a
    /// newline is not encountered before maxSize - 1 bytes are read, a
    /// newline will not be inserted into the buffer. On windows newline
    /// characters are replaced with '\\n'.
    /// 
    /// This function calls readLineData(), which is implemented using
    /// repeated calls to getChar(). You can provide a more efficient
    /// implementation by reimplementing readLineData() in your own
    /// subclass.
    /// 
    /// **See also:** [`get_char()`]
    /// [`read()`]
    /// [`write()`]
    /// 
    /// **Overloads**
    /// Reads a line from the device, but no more than *maxSize* characters,
    /// and returns the result as a byte array.
    /// 
    /// This function has no way of reporting errors; returning an empty
    /// QByteArray can mean either that no data was currently available
    /// for reading, or that an error occurred.
    /// 
    /// Reads up to *maxSize* characters into *data* and returns the
    /// number of characters read.
    /// 
    /// This function is called by readLine(), and provides its base
    /// implementation, using getChar(). Buffered devices can improve the
    /// performance of readLine() by reimplementing this function.
    /// 
    /// readLine() appends a '\\0' byte to *data;* readLineData() does not
    /// need to do this.
    /// 
    /// If you reimplement this function, be careful to return the correct
    /// value: it should return the number of bytes read in this line,
    /// including the terminating newline, or 0 if there is no line to be
    /// read at this point. If an error occurs, it should return -1 if and
    /// only if no bytes were read. Reading past EOF is considered an error.
    /// 
    /// Reads up to *maxSize* bytes from the device into *data,* and
    /// returns the number of bytes read or -1 if an error occurred.
    /// 
    /// If there are no bytes to be read and there can never be more bytes
    /// available (examples include socket closed, pipe closed, sub-process
    /// finished), this function returns -1.
    /// 
    /// This function is called by QIODevice. Reimplement this function
    /// when creating a subclass of QIODevice.
    /// 
    /// When reimplementing this function it is important that this function
    /// reads all the required data before returning. This is required in order
    /// for QDataStream to be able to operate on the class. QDataStream assumes
    /// all the requested information was read and therefore does not retry reading
    /// if there was a problem.
    /// 
    /// This function might be called with a maxSize of 0, which can be used to
    /// perform post-reading operations.
    /// 
    /// **See also:** [`read()`]
    /// [`read_line()`]
    /// [`write_data()`]
    [org_name(read)]
    read_2(maxlen: i64) -> ByteArray,
    /// 
    /// Reads all remaining data from the device, and returns it as a
    /// byte array.
    /// 
    /// This function has no way of reporting errors; returning an empty
    /// QByteArray can mean either that no data was currently available
    /// for reading, or that an error occurred.
    read_all() -> ByteArray,
    /// 
    /// This function reads a line of ASCII characters from the device, up
    /// to a maximum of *maxSize* - 1 bytes, stores the characters in *data,* and returns the number of bytes read. If a line could not be
    /// read but no error ocurred, this function returns 0. If an error
    /// occurs, this function returns the length of what could be read, or
    /// -1 if nothing was read.
    /// 
    /// A terminating '\\0' byte is always appended to *data,* so *maxSize* must be larger than 1.
    /// 
    /// Data is read until either of the following conditions are met:
    /// 
    /// * The first '\\n' character is read.
    /// * *maxSize* - 1 bytes are read.
    /// * The end of the device data is detected.
    /// 
    /// For example, the following code reads a line of characters from a
    /// file:
    /// 
    /// The newline character ('\\n') is included in the buffer. If a
    /// newline is not encountered before maxSize - 1 bytes are read, a
    /// newline will not be inserted into the buffer. On windows newline
    /// characters are replaced with '\\n'.
    /// 
    /// This function calls readLineData(), which is implemented using
    /// repeated calls to getChar(). You can provide a more efficient
    /// implementation by reimplementing readLineData() in your own
    /// subclass.
    /// 
    /// **See also:** [`get_char()`]
    /// [`read()`]
    /// [`write()`]
    /// 
    /// **Overloads**
    /// Reads a line from the device, but no more than *maxSize* characters,
    /// and returns the result as a byte array.
    /// 
    /// This function has no way of reporting errors; returning an empty
    /// QByteArray can mean either that no data was currently available
    /// for reading, or that an error occurred.
    /// 
    /// Reads up to *maxSize* characters into *data* and returns the
    /// number of characters read.
    /// 
    /// This function is called by readLine(), and provides its base
    /// implementation, using getChar(). Buffered devices can improve the
    /// performance of readLine() by reimplementing this function.
    /// 
    /// readLine() appends a '\\0' byte to *data;* readLineData() does not
    /// need to do this.
    /// 
    /// If you reimplement this function, be careful to return the correct
    /// value: it should return the number of bytes read in this line,
    /// including the terminating newline, or 0 if there is no line to be
    /// read at this point. If an error occurs, it should return -1 if and
    /// only if no bytes were read. Reading past EOF is considered an error.
    read_line(data: *char, maxlen: i64) -> i64,
    /// 
    /// This function reads a line of ASCII characters from the device, up
    /// to a maximum of *maxSize* - 1 bytes, stores the characters in *data,* and returns the number of bytes read. If a line could not be
    /// read but no error ocurred, this function returns 0. If an error
    /// occurs, this function returns the length of what could be read, or
    /// -1 if nothing was read.
    /// 
    /// A terminating '\\0' byte is always appended to *data,* so *maxSize* must be larger than 1.
    /// 
    /// Data is read until either of the following conditions are met:
    /// 
    /// * The first '\\n' character is read.
    /// * *maxSize* - 1 bytes are read.
    /// * The end of the device data is detected.
    /// 
    /// For example, the following code reads a line of characters from a
    /// file:
    /// 
    /// The newline character ('\\n') is included in the buffer. If a
    /// newline is not encountered before maxSize - 1 bytes are read, a
    /// newline will not be inserted into the buffer. On windows newline
    /// characters are replaced with '\\n'.
    /// 
    /// This function calls readLineData(), which is implemented using
    /// repeated calls to getChar(). You can provide a more efficient
    /// implementation by reimplementing readLineData() in your own
    /// subclass.
    /// 
    /// **See also:** [`get_char()`]
    /// [`read()`]
    /// [`write()`]
    /// 
    /// **Overloads**
    /// Reads a line from the device, but no more than *maxSize* characters,
    /// and returns the result as a byte array.
    /// 
    /// This function has no way of reporting errors; returning an empty
    /// QByteArray can mean either that no data was currently available
    /// for reading, or that an error occurred.
    /// 
    /// Reads up to *maxSize* characters into *data* and returns the
    /// number of characters read.
    /// 
    /// This function is called by readLine(), and provides its base
    /// implementation, using getChar(). Buffered devices can improve the
    /// performance of readLine() by reimplementing this function.
    /// 
    /// readLine() appends a '\\0' byte to *data;* readLineData() does not
    /// need to do this.
    /// 
    /// If you reimplement this function, be careful to return the correct
    /// value: it should return the number of bytes read in this line,
    /// including the terminating newline, or 0 if there is no line to be
    /// read at this point. If an error occurs, it should return -1 if and
    /// only if no bytes were read. Reading past EOF is considered an error.
    [org_name(readLine)]
    read_line_2(maxlen: i64) -> ByteArray,
    /// 
    /// Returns `true` if a complete line of data can be read from the device;
    /// otherwise returns `false.`
    /// 
    /// Note that unbuffered devices, which have no way of determining what
    /// can be read, always return false.
    /// 
    /// This function is often called in conjunction with the readyRead()
    /// signal.
    /// 
    /// Subclasses that reimplement this function must call the base
    /// implementation in order to include the contents of the QIODevice's buffer. Example:
    /// 
    /// **See also:** [`ready_read()`]
    /// [`read_line()`]
    [event] can_read_line() -> bool,
    /// 
    /// Starts a new read transaction on the device.
    /// 
    /// Defines a restorable point within the sequence of read operations. For
    /// sequential devices, read data will be duplicated internally to allow
    /// recovery in case of incomplete reads. For random-access devices,
    /// this function saves the current position. Call commitTransaction() or
    /// rollbackTransaction() to finish the transaction.
    /// 
    /// **Note**: Nesting transactions is not supported.
    /// 
    /// **See also:** [`commit_transaction()`]
    /// [`rollback_transaction()`]
    start_transaction(),
    /// 
    /// Completes a read transaction.
    /// 
    /// For sequential devices, all data recorded in the internal buffer during
    /// the transaction will be discarded.
    /// 
    /// **See also:** [`start_transaction()`]
    /// [`rollback_transaction()`]
    commit_transaction(),
    /// 
    /// Rolls back a read transaction.
    /// 
    /// Restores the input stream to the point of the startTransaction() call.
    /// This function is commonly used to rollback the transaction when an
    /// incomplete read was detected prior to committing the transaction.
    /// 
    /// **See also:** [`start_transaction()`]
    /// [`commit_transaction()`]
    rollback_transaction(),
    /// 
    /// Returns `true` if a transaction is in progress on the device, otherwise
    /// `false.`
    /// 
    /// **See also:** [`start_transaction()`]
    is_transaction_started() -> bool,
    /// 
    /// Returns the number of available write channels if the device is open;
    /// otherwise returns 0.
    /// 
    /// **See also:** [`read_channel_count()`]
    /// 
    /// Writes at most *maxSize* bytes of data from *data* to the
    /// device. Returns the number of bytes that were actually written, or
    /// -1 if an error occurred.
    /// 
    /// **See also:** [`read()`]
    /// [`write_data()`]
    /// 
    /// **Overloads**
    /// Writes data from a zero-terminated string of 8-bit characters to the
    /// device. Returns the number of bytes that were actually written, or
    /// -1 if an error occurred. This is equivalent to
    /// ```
    /// ...
    /// QIODevice::write(data, qstrlen(data));
    /// ...
    /// ```
    /// 
    /// **See also:** [`read()`]
    /// [`write_data()`]
    /// 
    /// **Overloads**
    /// Writes the content of *byteArray* to the device. Returns the number of
    /// bytes that were actually written, or -1 if an error occurred.
    /// 
    /// **See also:** [`read()`]
    /// [`write_data()`]
    /// 
    /// Writes up to *maxSize* bytes from *data* to the device. Returns
    /// the number of bytes written, or -1 if an error occurred.
    /// 
    /// This function is called by QIODevice. Reimplement this function
    /// when creating a subclass of QIODevice.
    /// 
    /// When reimplementing this function it is important that this function
    /// writes all the data available before returning. This is required in order
    /// for QDataStream to be able to operate on the class. QDataStream assumes
    /// all the information was written and therefore does not retry writing if
    /// there was a problem.
    /// 
    /// **See also:** [`read()`]
    /// [`write()`]
    write(data: *char, len: i64) -> i64,
    /// 
    /// Returns the number of available write channels if the device is open;
    /// otherwise returns 0.
    /// 
    /// **See also:** [`read_channel_count()`]
    /// 
    /// Writes at most *maxSize* bytes of data from *data* to the
    /// device. Returns the number of bytes that were actually written, or
    /// -1 if an error occurred.
    /// 
    /// **See also:** [`read()`]
    /// [`write_data()`]
    /// 
    /// **Overloads**
    /// Writes data from a zero-terminated string of 8-bit characters to the
    /// device. Returns the number of bytes that were actually written, or
    /// -1 if an error occurred. This is equivalent to
    /// ```
    /// ...
    /// QIODevice::write(data, qstrlen(data));
    /// ...
    /// ```
    /// 
    /// **See also:** [`read()`]
    /// [`write_data()`]
    /// 
    /// **Overloads**
    /// Writes the content of *byteArray* to the device. Returns the number of
    /// bytes that were actually written, or -1 if an error occurred.
    /// 
    /// **See also:** [`read()`]
    /// [`write_data()`]
    /// 
    /// Writes up to *maxSize* bytes from *data* to the device. Returns
    /// the number of bytes written, or -1 if an error occurred.
    /// 
    /// This function is called by QIODevice. Reimplement this function
    /// when creating a subclass of QIODevice.
    /// 
    /// When reimplementing this function it is important that this function
    /// writes all the data available before returning. This is required in order
    /// for QDataStream to be able to operate on the class. QDataStream assumes
    /// all the information was written and therefore does not retry writing if
    /// there was a problem.
    /// 
    /// **See also:** [`read()`]
    /// [`write()`]
    [org_name(write)]
    write_2(data: *char) -> i64,
    /// 
    /// Returns the number of available write channels if the device is open;
    /// otherwise returns 0.
    /// 
    /// **See also:** [`read_channel_count()`]
    /// 
    /// Writes at most *maxSize* bytes of data from *data* to the
    /// device. Returns the number of bytes that were actually written, or
    /// -1 if an error occurred.
    /// 
    /// **See also:** [`read()`]
    /// [`write_data()`]
    /// 
    /// **Overloads**
    /// Writes data from a zero-terminated string of 8-bit characters to the
    /// device. Returns the number of bytes that were actually written, or
    /// -1 if an error occurred. This is equivalent to
    /// ```
    /// ...
    /// QIODevice::write(data, qstrlen(data));
    /// ...
    /// ```
    /// 
    /// **See also:** [`read()`]
    /// [`write_data()`]
    /// 
    /// **Overloads**
    /// Writes the content of *byteArray* to the device. Returns the number of
    /// bytes that were actually written, or -1 if an error occurred.
    /// 
    /// **See also:** [`read()`]
    /// [`write_data()`]
    /// 
    /// Writes up to *maxSize* bytes from *data* to the device. Returns
    /// the number of bytes written, or -1 if an error occurred.
    /// 
    /// This function is called by QIODevice. Reimplement this function
    /// when creating a subclass of QIODevice.
    /// 
    /// When reimplementing this function it is important that this function
    /// writes all the data available before returning. This is required in order
    /// for QDataStream to be able to operate on the class. QDataStream assumes
    /// all the information was written and therefore does not retry writing if
    /// there was a problem.
    /// 
    /// **See also:** [`read()`]
    /// [`write()`]
    [org_name(write)]
    write_3(data: &ByteArrayType) -> i64,
    /// 
    /// Reads at most *maxSize* bytes from the device into *data,* without side
    /// effects (i.e., if you call read() after peek(), you will get the same
    /// data). Returns the number of bytes read. If an error occurs, such as
    /// when attempting to peek a device opened in WriteOnly mode, this function
    /// returns -1.
    /// 
    /// 0 is returned when no more data is available for reading.
    /// 
    /// Example:
    /// 
    /// **See also:** [`read()`]
    /// 
    /// **Overloads**
    /// Peeks at most *maxSize* bytes from the device, returning the data peeked
    /// as a QByteArray.
    /// 
    /// Example:
    /// 
    /// This function has no way of reporting errors; returning an empty
    /// QByteArray can mean either that no data was currently available
    /// for peeking, or that an error occurred.
    /// 
    /// **See also:** [`read()`]
    peek(data: *char, maxlen: i64) -> i64,
    /// 
    /// Reads at most *maxSize* bytes from the device into *data,* without side
    /// effects (i.e., if you call read() after peek(), you will get the same
    /// data). Returns the number of bytes read. If an error occurs, such as
    /// when attempting to peek a device opened in WriteOnly mode, this function
    /// returns -1.
    /// 
    /// 0 is returned when no more data is available for reading.
    /// 
    /// Example:
    /// 
    /// **See also:** [`read()`]
    /// 
    /// **Overloads**
    /// Peeks at most *maxSize* bytes from the device, returning the data peeked
    /// as a QByteArray.
    /// 
    /// Example:
    /// 
    /// This function has no way of reporting errors; returning an empty
    /// QByteArray can mean either that no data was currently available
    /// for peeking, or that an error occurred.
    /// 
    /// **See also:** [`read()`]
    [org_name(peek)]
    peek_2(maxlen: i64) -> ByteArray,
    /// 
    /// Skips up to *maxSize* bytes from the device. Returns the number of bytes
    /// actually skipped, or -1 on error.
    /// 
    /// This function does not wait and only discards the data that is already
    /// available for reading.
    /// 
    /// If the device is opened in text mode, end-of-line terminators are
    /// translated to '\n' symbols and count as a single byte identically to the
    /// read() and peek() behavior.
    /// 
    /// This function works for all devices, including sequential ones that cannot
    /// seek(). It is optimized to skip unwanted data after a peek() call.
    /// 
    /// For random-access devices, skip() can be used to seek forward from the
    /// current position. Negative *maxSize* values are not allowed.
    /// 
    /// **See also:** [`peek()`]
    /// [`seek()`]
    /// [`read()`]
    skip(max_size: i64) -> i64,
    /// 
    /// Blocks until new data is available for reading and the readyRead()
    /// signal has been emitted, or until *msecs* milliseconds have
    /// passed. If msecs is -1, this function will not time out.
    /// 
    /// Returns `true` if new data is available for reading; otherwise returns
    /// false (if the operation timed out or if an error occurred).
    /// 
    /// This function can operate without an event loop. It is
    /// useful when writing non-GUI applications and when performing
    /// I/O operations in a non-GUI thread.
    /// 
    /// If called from within a slot connected to the readyRead() signal,
    /// readyRead() will not be reemitted.
    /// 
    /// Reimplement this function to provide a blocking API for a custom
    /// device. The default implementation does nothing, and returns `false.`
    /// 
    /// **Warning**: Calling this function from the main (GUI) thread
    /// might cause your user interface to freeze.
    /// 
    /// **See also:** [`wait_for_bytes_written()`]
    [event] wait_for_ready_read(msecs: i32) -> bool,
    /// 
    /// For buffered devices, this function waits until a payload of
    /// buffered written data has been written to the device and the
    /// bytesWritten() signal has been emitted, or until *msecs*
    /// milliseconds have passed. If msecs is -1, this function will
    /// not time out. For unbuffered devices, it returns immediately.
    /// 
    /// Returns `true` if a payload of data was written to the device;
    /// otherwise returns `false` (i.e. if the operation timed out, or if an
    /// error occurred).
    /// 
    /// This function can operate without an event loop. It is
    /// useful when writing non-GUI applications and when performing
    /// I/O operations in a non-GUI thread.
    /// 
    /// If called from within a slot connected to the bytesWritten() signal,
    /// bytesWritten() will not be reemitted.
    /// 
    /// Reimplement this function to provide a blocking API for a custom
    /// device. The default implementation does nothing, and returns `false.`
    /// 
    /// **Warning**: Calling this function from the main (GUI) thread
    /// might cause your user interface to freeze.
    /// 
    /// **See also:** [`wait_for_ready_read()`]
    [event] wait_for_bytes_written(msecs: i32) -> bool,
    /// 
    /// Puts the character *c* back into the device, and decrements the
    /// current position unless the position is 0. This function is
    /// usually called to a getChar() operation, such as when
    /// writing a backtracking parser.
    /// 
    /// If *c* was not previously read from the device, the behavior is
    /// undefined.
    /// 
    /// **Note**: This function is not available while a transaction is in progress.
    unget_char(c: char),
    /// 
    /// Writes the character *c* to the device. Returns `true` on success;
    /// otherwise returns `false.`
    /// 
    /// **See also:** [`write()`]
    /// [`get_char()`]
    /// [`unget_char()`]
    put_char(c: char) -> bool,
    /// 
    /// Reads one character from the device and stores it in *c.* If *c*
    /// is 0, the character is discarded. Returns `true` on success;
    /// otherwise returns `false.`
    /// 
    /// **See also:** [`read()`]
    /// [`put_char()`]
    /// [`unget_char()`]
    get_char(c: *char) -> bool,
    /// 
    /// This signal is emitted once every time new data is available for
    /// reading from the device's current read channel. It will only be emitted
    /// again once new data is available, such as when a new payload of network
    /// data has arrived on your network socket, or when a new block of data has
    /// been appended to your device.
    /// 
    /// readyRead() is not emitted recursively; if you reenter the event loop or
    /// call waitForReadyRead() inside a slot connected to the readyRead() signal,
    /// the signal will not be reemitted (although waitForReadyRead() may still
    /// return true).
    /// 
    /// Note for developers implementing classes derived from QIODevice:
    /// you should always emit readyRead() when new data has arrived (do not
    /// emit it only because there's data still to be read in your
    /// buffers). Do not emit readyRead() in other conditions.
    /// 
    /// **See also:** [`bytes_written()`]
    [signal] ready_read(),
    /// 
    /// This signal is emitted when new data is available for reading from the
    /// device. The *channel* argument is set to the index of the read channel on
    /// which the data has arrived. Unlike readyRead(), it is emitted regardless of
    /// the [current read channel](currentReadChannel())
    /// 
    /// 
    /// channelReadyRead() can be emitted recursively - even for the same channel.
    /// 
    /// **See also:** [`ready_read()`]
    /// [`channel_bytes_written()`]
    [signal] channel_ready_read(channel: i32),
    /// 
    /// This signal is emitted every time a payload of data has been
    /// written to the device's current write channel. The *bytes* argument is
    /// set to the number of bytes that were written in this payload.
    /// 
    /// bytesWritten() is not emitted recursively; if you reenter the event loop
    /// or call waitForBytesWritten() inside a slot connected to the
    /// bytesWritten() signal, the signal will not be reemitted (although
    /// waitForBytesWritten() may still return true).
    /// 
    /// **See also:** [`ready_read()`]
    [signal] bytes_written(bytes: i64),
    /// 
    /// This signal is emitted every time a payload of data has been written to
    /// the device. The *bytes* argument is set to the number of bytes that were
    /// written in this payload, while *channel* is the channel they were written
    /// to. Unlike bytesWritten(), it is emitted regardless of the
    /// [current write channel](currentWriteChannel())
    /// 
    /// 
    /// channelBytesWritten() can be emitted recursively - even for the same
    /// channel.
    /// 
    /// **See also:** [`bytes_written()`]
    /// [`channel_ready_read()`]
    [signal] channel_bytes_written(channel: i32, bytes: i64),
    /// 
    /// This signal is emitted when the device is about to close. Connect
    /// this signal if you have operations that need to be performed
    /// before the device closes (e.g., if you have data in a separate
    /// buffer that needs to be written to the device).
    [signal] about_to_close(),
    /// 
    /// This signal is emitted when the input (reading) stream is closed
    /// in this device. It is emitted as soon as the closing is detected,
    /// which means that there might still be data available for reading
    /// with read().
    /// 
    /// **See also:** [`at_end()`]
    /// [`read()`]
    [signal] read_channel_finished(),
    /// 
    /// Reads up to *maxSize* bytes from the device into *data,* and
    /// returns the number of bytes read or -1 if an error occurred.
    /// 
    /// If there are no bytes to be read and there can never be more bytes
    /// available (examples include socket closed, pipe closed, sub-process
    /// finished), this function returns -1.
    /// 
    /// This function is called by QIODevice. Reimplement this function
    /// when creating a subclass of QIODevice.
    /// 
    /// When reimplementing this function it is important that this function
    /// reads all the required data before returning. This is required in order
    /// for QDataStream to be able to operate on the class. QDataStream assumes
    /// all the requested information was read and therefore does not retry reading
    /// if there was a problem.
    /// 
    /// This function might be called with a maxSize of 0, which can be used to
    /// perform post-reading operations.
    /// 
    /// **See also:** [`read()`]
    /// [`read_line()`]
    /// [`write_data()`]
    [event] read_data(data: *char, maxlen: i64) -> i64,
    /// 
    /// Reads up to *maxSize* characters into *data* and returns the
    /// number of characters read.
    /// 
    /// This function is called by readLine(), and provides its base
    /// implementation, using getChar(). Buffered devices can improve the
    /// performance of readLine() by reimplementing this function.
    /// 
    /// readLine() appends a '\\0' byte to *data;* readLineData() does not
    /// need to do this.
    /// 
    /// If you reimplement this function, be careful to return the correct
    /// value: it should return the number of bytes read in this line,
    /// including the terminating newline, or 0 if there is no line to be
    /// read at this point. If an error occurs, it should return -1 if and
    /// only if no bytes were read. Reading past EOF is considered an error.
    [event] read_line_data(data: *char, maxlen: i64) -> i64,
    /// 
    /// Writes up to *maxSize* bytes from *data* to the device. Returns
    /// the number of bytes written, or -1 if an error occurred.
    /// 
    /// This function is called by QIODevice. Reimplement this function
    /// when creating a subclass of QIODevice.
    /// 
    /// When reimplementing this function it is important that this function
    /// writes all the data available before returning. This is required in order
    /// for QDataStream to be able to operate on the class. QDataStream assumes
    /// all the information was written and therefore does not retry writing if
    /// there was a problem.
    /// 
    /// **See also:** [`read()`]
    /// [`write()`]
    [event] write_data(data: *char, len: i64) -> i64,
    /// 
    /// Sets the OpenMode of the device to *openMode.* Call this
    /// function to set the open mode if the flags change after the device
    /// has been opened.
    /// 
    /// **See also:** [`open_mode()`]
    /// OpenMode
    set_open_mode(open_mode: IODevice::OpenMode),
}

[org_name(QIODevice)]
enum OpenModeFlag {
    /// The device is not open.
    NotOpen,
    /// The device is open for reading.
    ReadOnly,
    /// The device is open for writing. Note that this mode implies Truncate.
    WriteOnly,
    /// The device is open for reading and writing.
    ReadWrite,
    /// The device is opened in append mode so that all data is written to the end of the file.
    Append,
    /// If possible, the device is truncated before it is opened. All earlier contents of the device are lost.
    Truncate,
    /// When reading, the end-of-line terminators are translated to '\\n'. When writing, the end-of-line terminators are translated to the local encoding, for example '\\r\\n' for Win32.
    Text,
    /// Any buffer in the device is bypassed.
    Unbuffered,
    /// Fail if the file to be opened already exists. Create and open the file only if it does not exist. There is a guarantee from the operating system that you are the only one creating and opening the file. Note that this mode implies WriteOnly, and combining it with ReadWrite is allowed. This flag currently only affects QFile. Other classes might use this flag in the future, but until then using this flag with any classes other than QFile may result in undefined behavior.
    NewOnly,
    /// Fail if the file to be opened does not exist. This flag must be specified alongside ReadOnly, WriteOnly, or ReadWrite. Note that using this flag with ReadOnly alone is redundant, as ReadOnly already fails when the file does not exist. This flag currently only affects QFile. Other classes might use this flag in the future, but until then using this flag with any classes other than QFile may result in undefined behavior. Certain flags, such as `Unbuffered` and `Truncate,` are meaningless when used with some subclasses. Some of these restrictions are implied by the type of device that is represented by a subclass. In other cases, the restriction may be due to the implementation, or may be imposed by the underlying platform; for example, QTcpSocket does not support `Unbuffered` mode, and limitations in the native API prevent QFile from supporting `Unbuffered` on Windows.
    ExistingOnly,
}

// vim: syntax=rust expandtab ts=4 sw=4
