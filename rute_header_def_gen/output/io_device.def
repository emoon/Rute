#[org_name(QIODevice)]
enum OpenModeFlag {
    NotOpen,
    ReadOnly,
    WriteOnly,
    ReadWrite,
    Append,
    Truncate,
    Text,
    Unbuffered,
}

struct IODevice : Object {
    open_mode() -> OpenMode,
    set_text_mode_enabled(enabled: bool),
    is_text_mode_enabled() -> bool,
    is_open() -> bool,
    is_readable() -> bool,
    is_writable() -> bool,
    [replace] is_sequential() -> bool,
    read_channel_count() -> i32,
    write_channel_count() -> i32,
    current_read_channel() -> i32,
    set_current_read_channel(channel: i32),
    current_write_channel() -> i32,
    set_current_write_channel(channel: i32),
    [replace] open(mode: OpenMode) -> bool,
    [replace] close(),
    [replace] pos() -> i64,
    [replace] size() -> i64,
    [replace] seek(pos: i64) -> bool,
    [replace] at_end() -> bool,
    [replace] reset() -> bool,
    [replace] bytes_available() -> i64,
    [replace] bytes_to_write() -> i64,
    read(data: &char, maxlen: i64) -> i64,
    read(maxlen: i64) -> ByteArray,
    read_all() -> ByteArray,
    read_line(data: &char, maxlen: i64) -> i64,
    read_line(maxlen: i64) -> ByteArray,
    [replace] can_read_line() -> bool,
    start_transaction(),
    commit_transaction(),
    rollback_transaction(),
    is_transaction_started() -> bool,
    write(data: &char, len: i64) -> i64,
    write(data: &char) -> i64,
    write(data: &ByteArrayType) -> i64,
    peek(data: &char, maxlen: i64) -> i64,
    peek(maxlen: i64) -> ByteArray,
    skip(max_size: i64) -> i64,
    [replace] wait_for_ready_read(msecs: i32) -> bool,
    [replace] wait_for_bytes_written(msecs: i32) -> bool,
    unget_char(c: char),
    put_char(c: char) -> bool,
    get_char(c: &char) -> bool,
    [event] ready_read(),
    [event] channel_ready_read(channel: i32),
    [event] bytes_written(bytes: i64),
    [event] channel_bytes_written(channel: i32, bytes: i64),
    [event] about_to_close(),
    [event] read_channel_finished(),
    [replace] read_data(data: &char, maxlen: i64) -> i64,
    [replace] read_line_data(data: &char, maxlen: i64) -> i64,
    [replace] write_data(data: &char, len: i64) -> i64,
    set_open_mode(open_mode: OpenMode),
}

// vim: syntax=rust expandtab ts=4 sw=4
