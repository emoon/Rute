struct IODevice : Object {
    open_mode() -> OpenMode,
    set_text_mode_enabled(bool enabled),
    is_text_mode_enabled() -> bool,
    is_open() -> bool,
    is_readable() -> bool,
    is_writable() -> bool,
    is_sequential() -> bool,
    read_channel_count() -> i32,
    write_channel_count() -> i32,
    current_read_channel() -> i32,
    set_current_read_channel(i32 channel),
    current_write_channel() -> i32,
    set_current_write_channel(i32 channel),
    open(OpenMode mode) -> bool,
    close(),
    pos() -> i64,
    size() -> i64,
    seek(i64 pos) -> bool,
    at_end() -> bool,
    reset() -> bool,
    bytes_available() -> i64,
    bytes_to_write() -> i64,
    read(&char data, i64 maxlen) -> i64,
    read(i64 maxlen) -> ByteArrayType,
    read_all() -> ByteArrayType,
    read_line(&char data, i64 maxlen) -> i64,
    read_line(i64 maxlen) -> ByteArrayType,
    can_read_line() -> bool,
    start_transaction(),
    commit_transaction(),
    rollback_transaction(),
    is_transaction_started() -> bool,
    write(&char data, i64 len) -> i64,
    write(&char data) -> i64,
    write(&ByteArrayType data) -> i64,
    peek(&char data, i64 maxlen) -> i64,
    peek(i64 maxlen) -> ByteArrayType,
    skip(i64 max_size) -> i64,
    wait_for_ready_read(i32 msecs) -> bool,
    wait_for_bytes_written(i32 msecs) -> bool,
    unget_char(char c),
    put_char(char c) -> bool,
    get_char(&char c) -> bool,
    ready_read(),
    channel_ready_read(i32 channel),
    bytes_written(i64 bytes),
    channel_bytes_written(i32 channel, i64 bytes),
    about_to_close(),
    read_channel_finished(),
    read_data(&char data, i64 maxlen) -> i64,
    read_line_data(&char data, i64 maxlen) -> i64,
    write_data(&char data, i64 len) -> i64,
    set_open_mode(OpenMode open_mode),
}

// vim: syntax=rust expandtab ts=4 sw=4
