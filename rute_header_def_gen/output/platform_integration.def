[org_name(QPlatformIntegration)]
enum Capability {
    ThreadedPixmaps,
    OpenGL,
    ThreadedOpenGL,
    SharedGraphicsCache,
    BufferQueueingOpenGL,
    WindowMasks,
    MultipleWindows,
    ApplicationState,
    ForeignWindows,
    NonFullScreenWindows,
    NativeWidgets,
    WindowManagement,
    SyncState,
    RasterGLSurface,
    AllGLFunctionsQueryable,
    ApplicationIcon,
    SwitchableWidgetComposition,
    TopStackedNativeChildWindows,
}

[org_name(QPlatformIntegration)]
enum StyleHint {
    CursorFlashTime,
    KeyboardInputInterval,
    MouseDoubleClickInterval,
    StartDragDistance,
    StartDragTime,
    KeyboardAutoRepeatRate,
    ShowIsFullScreen,
    PasswordMaskDelay,
    FontSmoothingGamma,
    StartDragVelocity,
    UseRtlExtensions,
    PasswordMaskCharacter,
    SetFocusOnTouchRelease,
    ShowIsMaximized,
    MousePressAndHoldInterval,
    TabFocusBehavior,
    ReplayMousePressOutsidePopup,
    ItemViewActivateItemOnSingleClick,
    UiEffects,
    WheelScrollLines,
    ShowShortcutsInContextMenus,
}


struct PlatformIntegration {
    [replace] has_capability(cap: PlatformIntegration::Capability) -> bool,
    create_platform_pixmap(type: i32) -> i32?,
    [replace] create_platform_window(window: &WindowType) -> PlatformWindow?,
    [replace] create_foreign_window(arg0: &WindowType, arg1: WId) -> PlatformWindow?,
    [replace] create_platform_backing_store(window: &WindowType) -> PlatformBackingStore?,
    [replace] create_platform_open_gl_context(context: &OpenGLContextType) -> PlatformOpenGLContext?,
    [replace] create_platform_shared_graphics_cache(cache_id: &char) -> PlatformSharedGraphicsCache?,
    create_image_paint_engine(paint_device: &PaintDeviceType) -> i32?,
    [replace] create_event_dispatcher() -> AbstractEventDispatcher?,
    [replace] initialize(),
    [replace] font_database() -> PlatformFontDatabase?,
    [replace] clipboard() -> PlatformClipboard?,
    [replace] drag() -> PlatformDrag?,
    [replace] input_context() -> PlatformInputContext?,
    [replace] accessibility() -> PlatformAccessibility?,
    [replace] native_interface() -> PlatformNativeInterface?,
    [replace] services() -> PlatformServices?,
    [replace] style_hint(hint: PlatformIntegration::StyleHint) -> Variant,
    [replace] default_window_state(arg0: Rute::WindowFlags) -> Rute::WindowState,
    [replace] query_keyboard_modifiers() -> Rute::KeyboardModifiers,
    [replace] possible_keys(arg0: &KeyEventType) -> [i32],
    [replace] theme_names() -> [String],
    [replace] create_platform_theme(name: String) -> PlatformTheme?,
    [replace] create_platform_offscreen_surface(surface: &OffscreenSurfaceType) -> PlatformOffscreenSurface?,
    [replace] create_platform_session_manager(id: String, key: String) -> PlatformSessionManager?,
    [replace] sync(),
    [replace] open_gl_module_type() -> OpenGLContext::OpenGLModuleType,
    [replace] set_application_icon(icon: &IconType),
    remove_screen(screen: &ScreenType),
    [replace] beep(),
    screen_added(screen: &i32, is_primary: bool),
    set_primary_screen(new_primary: &i32),
}

// vim: syntax=rust expandtab ts=4 sw=4
