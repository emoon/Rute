
struct RectF {
    is_null() -> bool,
    is_empty() -> bool,
    is_valid() -> bool,
    normalized() -> RectFType,
    left() -> f32,
    top() -> f32,
    right() -> f32,
    bottom() -> f32,
    x() -> f32,
    y() -> f32,
    set_left(pos: f32),
    set_top(pos: f32),
    set_right(pos: f32),
    set_bottom(pos: f32),
    set_x(pos: f32),
    set_y(pos: f32),
    top_left() -> PointFType,
    bottom_right() -> PointFType,
    top_right() -> PointFType,
    bottom_left() -> PointFType,
    center() -> PointFType,
    set_top_left(p: &PointFType),
    set_bottom_right(p: &PointFType),
    set_top_right(p: &PointFType),
    set_bottom_left(p: &PointFType),
    move_left(pos: f32),
    move_top(pos: f32),
    move_right(pos: f32),
    move_bottom(pos: f32),
    move_top_left(p: &PointFType),
    move_bottom_right(p: &PointFType),
    move_top_right(p: &PointFType),
    move_bottom_left(p: &PointFType),
    move_center(p: &PointFType),
    move_to(x: f32, y: f32),
    move_to(p: &PointFType),
    set_rect(x: f32, y: f32, w: f32, h: f32),
    get_rect(x: &f32, y: &f32, w: &f32, h: &f32),
    set_coords(x1: f32, y1: f32, x2: f32, y2: f32),
    get_coords(x1: &f32, y1: &f32, x2: &f32, y2: &f32),
    adjust(x1: f32, y1: f32, x2: f32, y2: f32),
    adjusted(x1: f32, y1: f32, x2: f32, y2: f32) -> RectFType,
    size() -> SizeFType,
    width() -> f32,
    height() -> f32,
    set_width(w: f32),
    set_height(h: f32),
    set_size(s: &SizeFType),
    contains(r: &RectFType) -> bool,
    contains(p: &PointFType) -> bool,
    contains(x: f32, y: f32) -> bool,
    united(other: &RectFType) -> RectFType,
    intersected(other: &RectFType) -> RectFType,
    intersects(r: &RectFType) -> bool,
    margins_added(margins: &MarginsFType) -> RectFType,
    margins_removed(margins: &MarginsFType) -> RectFType,
    to_rect() -> RectType,
    to_aligned_rect() -> RectType,
    from_cg_rect(rect: CGRect) -> RectFType,
    to_cg_rect() -> CGRect,
}

// vim: syntax=rust expandtab ts=4 sw=4
