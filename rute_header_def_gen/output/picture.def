/// 
/// A picture serializes painter commands to an IO device in a
/// platform-independent format. They are sometimes referred to as meta-files.
/// 
/// Qt pictures use a proprietary binary format. Unlike native picture
/// (meta-file) formats on many window systems, Qt pictures have no
/// limitations regarding their contents. Everything that can be
/// painted on a widget or pixmap (e.g., fonts, pixmaps, regions,
/// transformed graphics, etc.) can also be stored in a picture.
/// 
/// QPicture is resolution independent, i.e. a QPicture can be
/// displayed on different devices (for example svg, pdf, ps, printer
/// and screen) looking the same. This is, for instance, needed for
/// WYSIWYG print preview. QPicture runs in the default system dpi,
/// and scales the painter to match differences in resolution
/// depending on the window system.
/// 
/// Example of how to record a picture:
/// 
/// Note that the list of painter commands is reset on each call to
/// the QPainter::begin() function.
/// 
/// Example of how to replay a picture:
/// 
/// Pictures can also be drawn using play(). Some basic data about a
/// picture is available, for example, size(), isNull() and
/// boundingRect().
/// 
/// **See also:** QMovie
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Picture : PaintDevice {
    /// 
    /// Returns `true` if the picture contains no data; otherwise returns
    /// false.
    is_null() -> bool,
    [event] dev_type() -> i32,
    /// 
    /// Returns the size of the picture data.
    /// 
    /// **See also:** data()
    size() -> uint,
    /// 
    /// Returns a pointer to the picture data. The pointer is only valid
    /// until the next non-const function is called on this picture. The
    /// returned pointer is 0 if the picture contains no data.
    /// 
    /// **See also:** size()
    /// isNull()
    data() -> char?,
    /// 
    /// Sets the picture data directly from *data* and *size.* This
    /// function copies the input data.
    /// 
    /// **See also:** data()
    /// size()
    [event] set_data(data: *char, size: uint),
    /// 
    /// Replays the picture using *painter,* and returns `true` if
    /// successful; otherwise returns `false.`
    /// 
    /// This function does exactly the same as QPainter::drawPicture()
    /// with (x, y) = (0, 0).
    play(p: *PainterType) -> bool,
    /// 
    /// Loads a picture from the file specified by *fileName* and returns
    /// true if successful; otherwise invalidates the picture and returns `false.`
    /// 
    /// Please note that the *format* parameter has been deprecated and
    /// will have no effect.
    /// 
    /// **See also:** save()
    /// 
    /// **Overloads**
    /// *dev* is the device to use for loading.
    load(dev: *IODeviceType, format: *char) -> bool,
    /// 
    /// Loads a picture from the file specified by *fileName* and returns
    /// true if successful; otherwise invalidates the picture and returns `false.`
    /// 
    /// Please note that the *format* parameter has been deprecated and
    /// will have no effect.
    /// 
    /// **See also:** save()
    /// 
    /// **Overloads**
    /// *dev* is the device to use for loading.
    load_2(file_name: String, format: *char) -> bool,
    /// 
    /// Saves a picture to the file specified by *fileName* and returns
    /// true if successful; otherwise returns `false.`
    /// 
    /// Please note that the *format* parameter has been deprecated and
    /// will have no effect.
    /// 
    /// **See also:** load()
    /// 
    /// **Overloads**
    /// *dev* is the device to use for saving.
    save(dev: *IODeviceType, format: *char) -> bool,
    /// 
    /// Saves a picture to the file specified by *fileName* and returns
    /// true if successful; otherwise returns `false.`
    /// 
    /// Please note that the *format* parameter has been deprecated and
    /// will have no effect.
    /// 
    /// **See also:** load()
    /// 
    /// **Overloads**
    /// *dev* is the device to use for saving.
    save_2(file_name: String, format: *char) -> bool,
    /// 
    /// Returns the picture's bounding rectangle or an invalid rectangle
    /// if the picture contains no data.
    bounding_rect() -> Rect,
    /// 
    /// Sets the picture's bounding rectangle to *r.* The automatically
    /// calculated value is overridden.
    set_bounding_rect(r: &RectType),
    /// 
    /// Swaps picture *other* with this picture. This operation is very
    /// fast and never fails.
    swap(other: &PictureType),
    detach(),
    is_detached() -> bool,
    /// 
    /// Returns a string that specifies the picture format of the file *fileName,* or 0 if the file cannot be read or if the format is not
    /// recognized.
    /// 
    /// **See also:** load()
    /// save()
    [static] picture_format(file_name: String) -> char?,
    /// 
    /// Returns a list of picture formats that are supported for picture
    /// input.
    /// 
    /// **See also:** outputFormats()
    /// inputFormatList()
    /// QPictureIO
    [static] input_formats() -> [ByteArray],
    /// 
    /// Returns a list of picture formats that are supported for picture
    /// output.
    /// 
    /// **See also:** inputFormats()
    /// outputFormatList()
    /// QPictureIO
    [static] output_formats() -> [ByteArray],
    /// 
    /// Returns a list of picture formats that are supported for picture
    /// input.
    /// 
    /// Note that if you want to iterate over the list, you should iterate
    /// over a copy, e.g.
    /// 
    /// **See also:** outputFormatList()
    /// inputFormats()
    /// QPictureIO
    [static] input_format_list() -> [String],
    /// 
    /// Returns a list of picture formats that are supported for picture
    /// output.
    /// 
    /// Note that if you want to iterate over the list, you should iterate
    /// over a copy, e.g.
    /// 
    /// **See also:** inputFormatList()
    /// outputFormats()
    /// QPictureIO
    [static] output_format_list() -> [String],
    [event] paint_engine() -> PaintEngine?,
}

// vim: syntax=rust expandtab ts=4 sw=4
