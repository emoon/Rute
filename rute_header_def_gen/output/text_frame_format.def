/// 
/// A text frame groups together one or more blocks of text, providing a layer
/// of structure larger than the paragraph. The format of a frame specifies
/// how it is rendered and positioned on the screen. It does not directly
/// specify the behavior of the text formatting within, but provides
/// constraints on the layout of its children.
/// 
/// The frame format defines the width() and height() of the frame on the
/// screen. Each frame can have a border() that surrounds its contents with
/// a rectangular box. The border is surrounded by a margin() around the frame,
/// and the contents of the frame are kept separate from the border by the
/// frame's padding(). This scheme is similar to the box model used by Cascading
/// Style Sheets for HTML pages.
/// 
/// ![qtextframe-style.png](qtextframe-style.png)
/// 
/// The position() of a frame is set using setPosition() and determines how it
/// is located relative to the surrounding text.
/// 
/// The validity of a QTextFrameFormat object can be determined with the
/// isValid() function.
/// 
/// **See also:** [`TextFrame`]
/// [`TextBlockFormat`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TextFrameFormat : TextFormat {
    /// 
    /// Returns `true` if the format description is valid; otherwise returns `false.`
    is_valid() -> bool,
    /// 
    /// Sets the *policy* for positioning frames with this frame format.
    /// 
    set_position(f: TextFrameFormat::Position),
    /// 
    /// Returns the positioning policy for frames with this frame format.
    position() -> TextFrameFormat::Position,
    /// 
    /// Sets the *width* (in pixels) of the frame's border.
    /// 
    /// Sets the *brush* used for the frame's border.
    /// 
    /// Sets the *style* of the frame's border.
    set_border(border: f32),
    /// 
    /// Returns the width of the border in pixels.
    /// 
    /// Returns the brush used for the frame's border.
    /// 
    /// Returns the style of the frame's border.
    border() -> f32,
    /// 
    /// Sets the *brush* used for the frame's border.
    set_border_brush(brush: &BrushType),
    /// 
    /// Returns the brush used for the frame's border.
    border_brush() -> Brush,
    /// 
    /// Sets the *style* of the frame's border.
    set_border_style(style: TextFrameFormat::BorderStyle),
    /// 
    /// Returns the style of the frame's border.
    border_style() -> TextFrameFormat::BorderStyle,
    /// 
    /// Sets the frame's *margin* in pixels.
    /// This method also sets the left, right, top and bottom margins
    /// of the frame to the same value. The individual margins override
    /// the general margin.
    set_margin(margin: f32),
    /// 
    /// Returns the width of the frame's external margin in pixels.
    margin() -> f32,
    /// 
    /// Sets the frame's top *margin* in pixels.
    set_top_margin(margin: f32),
    /// 
    /// Returns the width of the frame's top margin in pixels.
    top_margin() -> f32,
    /// 
    /// Sets the frame's bottom *margin* in pixels.
    set_bottom_margin(margin: f32),
    /// 
    /// Returns the width of the frame's bottom margin in pixels.
    bottom_margin() -> f32,
    /// 
    /// Sets the frame's left *margin* in pixels.
    set_left_margin(margin: f32),
    /// 
    /// Returns the width of the frame's left margin in pixels.
    left_margin() -> f32,
    /// 
    /// Sets the frame's right *margin* in pixels.
    set_right_margin(margin: f32),
    /// 
    /// Returns the width of the frame's right margin in pixels.
    right_margin() -> f32,
    /// 
    /// Sets the *width* of the frame's internal padding in pixels.
    set_padding(padding: f32),
    /// 
    /// Returns the width of the frame's internal padding in pixels.
    padding() -> f32,
    /// 
    /// Sets the frame's border rectangle's *width.*
    /// 
    /// **See also:** [`TextLength`]
    /// 
    /// **Overloads**
    /// Convenience method that sets the width of the frame's border
    /// rectangle's width to the specified fixed *width.*
    set_width(width: f32),
    /// 
    /// Sets the frame's border rectangle's *width.*
    /// 
    /// **See also:** [`TextLength`]
    /// 
    /// **Overloads**
    /// Convenience method that sets the width of the frame's border
    /// rectangle's width to the specified fixed *width.*
    [org_name(setWidth)]
    set_width_2(length: &TextLengthType),
    /// 
    /// Returns the width of the frame's border rectangle.
    /// 
    /// **See also:** [`TextLength`]
    width() -> TextLength,
    /// 
    /// Sets the frame's *height.*
    /// 
    /// **Overloads**
    /// Sets the frame's *height.*
    set_height(height: f32),
    /// 
    /// Sets the frame's *height.*
    /// 
    /// **Overloads**
    /// Sets the frame's *height.*
    [org_name(setHeight)]
    set_height_2(height: &TextLengthType),
    /// 
    /// Returns the height of the frame's border rectangle.
    height() -> TextLength,
    /// 
    /// Sets the page break policy for the frame/table to *policy.*
    /// 
    /// **See also:** [`page_break_policy()`]
    set_page_break_policy(flags: TextFormat::PageBreakFlags),
    /// 
    /// Returns the currently set page break policy for the frame/table. The default is
    /// QTextFormat::PageBreak_Auto.
    /// 
    /// **See also:** [`set_page_break_policy()`]
    page_break_policy() -> TextFormat::PageBreakFlags,
}

[org_name(QTextFrameFormat)]
enum Position {
    InFlow,
    FloatLeft,
    FloatRight,
}

[org_name(QTextFrameFormat)]
enum BorderStyle {
    BorderStyle_None,
    BorderStyle_Dotted,
    BorderStyle_Dashed,
    BorderStyle_Solid,
    BorderStyle_Double,
    BorderStyle_DotDash,
    BorderStyle_DotDotDash,
    BorderStyle_Groove,
    BorderStyle_Ridge,
    BorderStyle_Inset,
    BorderStyle_Outset,
}

// vim: syntax=rust expandtab ts=4 sw=4
