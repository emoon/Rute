/// 
/// QAbstractScrollArea is a low-level abstraction of a scrolling
/// area. The area provides a central widget called the viewport, in
/// which the contents of the area is to be scrolled (i.e, the
/// visible parts of the contents are rendered in the viewport).
/// 
/// Next to the viewport is a vertical scroll bar, and below is a
/// horizontal scroll bar. When all of the area contents fits in the
/// viewport, each scroll bar can be either visible or hidden
/// depending on the scroll bar's Qt::ScrollBarPolicy. When a scroll
/// bar is hidden, the viewport expands in order to cover all
/// available space. When a scroll bar becomes visible again, the
/// viewport shrinks in order to make room for the scroll bar.
/// 
/// It is possible to reserve a margin area around the viewport, see
/// setViewportMargins(). The feature is mostly used to place a
/// QHeaderView widget above or beside the scrolling area. Subclasses
/// of QAbstractScrollArea should implement margins.
/// 
/// When inheriting QAbstractScrollArea, you need to do the
/// following:
/// 
/// * Control the scroll bars by setting their range, value, page step, and tracking their movements.
/// * Draw the contents of the area in the viewport according to the values of the scroll bars.
/// * Handle events received by the viewport in viewportEvent() - notably resize events.
/// * Use `viewport->update()` to update the contents of the viewport instead of [update()](QWidget::update())
/// as all painting operations take place on the viewport.
/// 
/// With a scroll bar policy of Qt::ScrollBarAsNeeded (the default),
/// QAbstractScrollArea shows scroll bars when they provide a non-zero
/// scrolling range, and hides them otherwise.
/// 
/// The scroll bars and viewport should be updated whenever the viewport
/// receives a resize event or the size of the contents changes.
/// The viewport also needs to be updated when the scroll bars
/// values change. The initial values of the scroll bars are often
/// set when the area receives new contents.
/// 
/// We give a simple example, in which we have implemented a scroll area
/// that can scroll any QWidget. We make the widget a child of the
/// viewport; this way, we do not have to calculate which part of
/// the widget to draw but can simply move the widget with
/// QWidget::move(). When the area contents or the viewport size
/// changes, we do the following:
/// 
/// When the scroll bars change value, we need to update the widget
/// position, i.e., find the part of the widget that is to be drawn in
/// the viewport:
/// 
/// In order to track scroll bar movements, reimplement the virtual
/// function scrollContentsBy(). In order to fine-tune scrolling
/// behavior, connect to a scroll bar's
/// QAbstractSlider::actionTriggered() signal and adjust the [QAbstractSlider::sliderPosition](QAbstractSlider::sliderPosition)
/// as you wish.
/// 
/// For convenience, QAbstractScrollArea makes all viewport events
/// available in the virtual viewportEvent() handler. QWidget's
/// specialized handlers are remapped to viewport events in the cases
/// where this makes sense. The remapped specialized handlers are:
/// paintEvent(), mousePressEvent(), mouseReleaseEvent(),
/// mouseDoubleClickEvent(), mouseMoveEvent(), wheelEvent(),
/// dragEnterEvent(), dragMoveEvent(), dragLeaveEvent(), dropEvent(),
/// contextMenuEvent(), and resizeEvent().
/// 
/// QScrollArea, which inherits QAbstractScrollArea, provides smooth
/// scrolling for any QWidget (i.e., the widget is scrolled pixel by
/// pixel). You only need to subclass QAbstractScrollArea if you need
/// more specialized behavior. This is, for instance, true if the
/// entire contents of the area is not suitable for being drawn on a
/// QWidget or if you do not want smooth scrolling.
/// 
/// **See also:** [`ScrollArea`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct AbstractScrollArea : Frame {
    /// 
    /// The default policy is Qt::ScrollBarAsNeeded.
    /// 
    /// **See also:** horizontalScrollBarPolicy
    vertical_scroll_bar_policy() -> Rute::ScrollBarPolicy,
    set_vertical_scroll_bar_policy(arg0: Rute::ScrollBarPolicy),
    /// 
    /// The default policy is Qt::ScrollBarAsNeeded.
    /// 
    /// **See also:** horizontalScrollBarPolicy
    /// 
    /// Returns the vertical scroll bar.
    /// 
    /// **See also:** verticalScrollBarPolicy
    /// [`horizontal_scroll_bar()`]
    vertical_scroll_bar() -> ScrollBar?,
    /// 
    /// Replaces the existing vertical scroll bar with *scrollBar,* and sets all
    /// the former scroll bar's slider properties on the new scroll bar. The former
    /// scroll bar is then deleted.
    /// 
    /// QAbstractScrollArea already provides vertical and horizontal scroll bars by
    /// default. You can call this function to replace the default vertical
    /// scroll bar with your own custom scroll bar.
    /// 
    /// **See also:** [`vertical_scroll_bar()`]
    /// [`set_horizontal_scroll_bar()`]
    set_vertical_scroll_bar(scrollbar: *ScrollBarType),
    /// 
    /// The default policy is Qt::ScrollBarAsNeeded.
    /// 
    /// **See also:** verticalScrollBarPolicy
    horizontal_scroll_bar_policy() -> Rute::ScrollBarPolicy,
    set_horizontal_scroll_bar_policy(arg0: Rute::ScrollBarPolicy),
    /// 
    /// The default policy is Qt::ScrollBarAsNeeded.
    /// 
    /// **See also:** verticalScrollBarPolicy
    /// 
    /// Returns the horizontal scroll bar.
    /// 
    /// **See also:** horizontalScrollBarPolicy
    /// [`vertical_scroll_bar()`]
    horizontal_scroll_bar() -> ScrollBar?,
    /// 
    /// Replaces the existing horizontal scroll bar with *scrollBar,* and sets all
    /// the former scroll bar's slider properties on the new scroll bar. The former
    /// scroll bar is then deleted.
    /// 
    /// QAbstractScrollArea already provides horizontal and vertical scroll bars by
    /// default. You can call this function to replace the default horizontal
    /// scroll bar with your own custom scroll bar.
    /// 
    /// **See also:** [`horizontal_scroll_bar()`]
    /// [`set_vertical_scroll_bar()`]
    set_horizontal_scroll_bar(scrollbar: *ScrollBarType),
    /// 
    /// Returns the widget in the corner between the two scroll bars.
    /// 
    /// By default, no corner widget is present.
    corner_widget() -> Widget?,
    /// 
    /// Sets the widget in the corner between the two scroll bars to be
    /// *widget.*
    /// 
    /// You will probably also want to set at least one of the scroll bar
    /// modes to `AlwaysOn.`
    /// 
    /// Passing 0 shows no widget in the corner.
    /// 
    /// Any previous corner widget is hidden.
    /// 
    /// You may call setCornerWidget() with the same widget at different
    /// times.
    /// 
    /// All widgets set here will be deleted by the scroll area when it is
    /// destroyed unless you separately reparent the widget after setting
    /// some other corner widget (or 0).
    /// 
    /// Any *newly* set widget should have no current parent.
    /// 
    /// By default, no corner widget is present.
    /// 
    /// **See also:** horizontalScrollBarPolicy
    /// horizontalScrollBarPolicy
    set_corner_widget(widget: *WidgetType),
    /// 
    /// Adds *widget* as a scroll bar widget in the location specified
    /// by *alignment.*
    /// 
    /// Scroll bar widgets are shown next to the horizontal or vertical
    /// scroll bar, and can be placed on either side of it. If you want
    /// the scroll bar widgets to be always visible, set the
    /// scrollBarPolicy for the corresponding scroll bar to `AlwaysOn.`
    /// 
    /// *alignment* must be one of Qt::Alignleft and Qt::AlignRight,
    /// which maps to the horizontal scroll bar, or Qt::AlignTop and
    /// Qt::AlignBottom, which maps to the vertical scroll bar.
    /// 
    /// A scroll bar widget can be removed by either re-parenting the
    /// widget or deleting it. It's also possible to hide a widget with
    /// QWidget::hide()
    /// 
    /// The scroll bar widget will be resized to fit the scroll bar
    /// geometry for the current style. The following describes the case
    /// for scroll bar widgets on the horizontal scroll bar:
    /// 
    /// The height of the widget will be set to match the height of the
    /// scroll bar. To control the width of the widget, use
    /// QWidget::setMinimumWidth and QWidget::setMaximumWidth, or
    /// implement QWidget::sizeHint() and set a horizontal size policy.
    /// If you want a square widget, call
    /// QStyle::pixelMetric(QStyle::PM_ScrollBarExtent) and set the
    /// width to this value.
    /// 
    /// **See also:** [`scroll_bar_widgets()`]
    add_scroll_bar_widget(widget: *WidgetType, alignment: Rute::Alignment),
    /// 
    /// Returns a list of the currently set scroll bar widgets. *alignment*
    /// can be any combination of the four location flags.
    /// 
    /// **See also:** [`add_scroll_bar_widget()`]
    scroll_bar_widgets(alignment: Rute::Alignment) -> WidgetList,
    /// 
    /// Returns the viewport widget.
    /// 
    /// Use the QScrollArea::widget() function to retrieve the contents of
    /// the viewport widget.
    /// 
    /// **See also:** [`ScrollArea::widget`]
    /// 
    /// Returns the margins around the scrolling area.
    /// By default all the margins are zero.
    /// 
    /// **See also:** [`set_viewport_margins()`]
    /// 
    /// The main event handler for the scrolling area (the viewport() widget).
    /// It handles the *event* specified, and can be called by subclasses to
    /// provide reasonable default behavior.
    /// 
    /// Returns `true` to indicate to the event system that the event has been
    /// handled, and needs no further processing; otherwise returns `false` to
    /// indicate that the event should be propagated further.
    /// 
    /// You can reimplement this function in a subclass, but we recommend
    /// using one of the specialized event handlers instead.
    /// 
    /// Specialized handlers for viewport events are: paintEvent(),
    /// mousePressEvent(), mouseReleaseEvent(), mouseDoubleClickEvent(),
    /// mouseMoveEvent(), wheelEvent(), dragEnterEvent(), dragMoveEvent(),
    /// dragLeaveEvent(), dropEvent(), contextMenuEvent(), and
    /// resizeEvent().
    /// 
    /// Returns the recommended size for the viewport.
    /// The default implementation returns viewport()->sizeHint().
    /// Note that the size is just the viewport's size, without any scroll bars visible.
    viewport() -> Widget?,
    /// 
    /// Sets the viewport to be the given *widget.*
    /// The QAbstractScrollArea will take ownership of the given *widget.*
    /// 
    /// If *widget* is 0, QAbstractScrollArea will assign a new QWidget instance
    /// for the viewport.
    /// 
    /// **See also:** [`viewport()`]
    /// 
    /// Sets the margins around the scrolling area to *left,* *top,* *right* and *bottom.* This is useful for applications such as
    /// spreadsheets with rows and columns. The marginal space is
    /// is left blank; put widgets in the unused area.
    /// 
    /// Note that this function is frequently called by QTreeView and
    /// QTableView, so margins must be implemented by QAbstractScrollArea
    /// subclasses. Also, if the subclasses are to be used in item views,
    /// they should not call this function.
    /// 
    /// By default all margins are zero.
    /// **See also:** [`viewport_margins()`]
    /// 
    /// Sets *margins* around the scrolling area. This is useful for
    /// applications such as spreadsheets with rows and columns.
    /// The marginal space is is left blank; put widgets in the unused
    /// area.
    /// 
    /// By default all margins are zero.
    /// **See also:** [`viewport_margins()`]
    set_viewport(widget: *WidgetType),
    /// 
    /// Returns the size of the viewport as if the scroll bars had no valid
    /// scrolling range.
    maximum_viewport_size() -> Size,
    /// 
    [event] minimum_size_hint() -> Size,
    /// 
    /// Returns the sizeHint property of the scroll area. The size is determined by using
    /// viewportSizeHint() plus some extra space for scroll bars, if needed.
    /// 
    [event] size_hint() -> Size,
    /// 
    /// This slot is called by QAbstractScrollArea after setViewport( *viewport)* has been called. Reimplement this function in a
    /// subclass of QAbstractScrollArea to initialize the new *viewport*
    /// before it is used.
    /// 
    /// **See also:** [`set_viewport()`]
    [event] setup_viewport(viewport: *WidgetType),
    /// 
    /// This property holds the policy describing how the size of the scroll area changes when the
    /// size of the viewport changes.
    /// 
    /// The default policy is QAbstractScrollArea::AdjustIgnored.
    /// Changing this property might actually resize the scrollarea.
    size_adjust_policy() -> AbstractScrollArea::SizeAdjustPolicy,
    set_size_adjust_policy(policy: AbstractScrollArea::SizeAdjustPolicy),
    /// 
    /// Sets the margins around the scrolling area to *left,* *top,* *right* and *bottom.* This is useful for applications such as
    /// spreadsheets with rows and columns. The marginal space is
    /// is left blank; put widgets in the unused area.
    /// 
    /// Note that this function is frequently called by QTreeView and
    /// QTableView, so margins must be implemented by QAbstractScrollArea
    /// subclasses. Also, if the subclasses are to be used in item views,
    /// they should not call this function.
    /// 
    /// By default all margins are zero.
    /// **See also:** [`viewport_margins()`]
    /// 
    /// Sets *margins* around the scrolling area. This is useful for
    /// applications such as spreadsheets with rows and columns.
    /// The marginal space is is left blank; put widgets in the unused
    /// area.
    /// 
    /// By default all margins are zero.
    /// **See also:** [`viewport_margins()`]
    set_viewport_margins(left: i32, top: i32, right: i32, bottom: i32),
    /// 
    /// Sets the margins around the scrolling area to *left,* *top,* *right* and *bottom.* This is useful for applications such as
    /// spreadsheets with rows and columns. The marginal space is
    /// is left blank; put widgets in the unused area.
    /// 
    /// Note that this function is frequently called by QTreeView and
    /// QTableView, so margins must be implemented by QAbstractScrollArea
    /// subclasses. Also, if the subclasses are to be used in item views,
    /// they should not call this function.
    /// 
    /// By default all margins are zero.
    /// **See also:** [`viewport_margins()`]
    /// 
    /// Sets *margins* around the scrolling area. This is useful for
    /// applications such as spreadsheets with rows and columns.
    /// The marginal space is is left blank; put widgets in the unused
    /// area.
    /// 
    /// By default all margins are zero.
    /// **See also:** [`viewport_margins()`]
    [org_name(setViewportMargins)]
    set_viewport_margins_2(margins: &MarginsType),
    /// 
    /// Returns the margins around the scrolling area.
    /// By default all the margins are zero.
    /// 
    /// **See also:** [`set_viewport_margins()`]
    viewport_margins() -> Margins,
    [event] event_filter(arg0: *ObjectType, arg1: *EventType) -> bool,
    /// 
    /// This is the main event handler for the QAbstractScrollArea widget ( *not*
    /// the scrolling area viewport()). The specified *event* is a general event
    /// object that may need to be cast to the appropriate class depending on its
    /// type.
    /// 
    /// **See also:** [`Event::type`]
    [event] event(arg0: *EventType) -> bool,
    /// 
    /// The main event handler for the scrolling area (the viewport() widget).
    /// It handles the *event* specified, and can be called by subclasses to
    /// provide reasonable default behavior.
    /// 
    /// Returns `true` to indicate to the event system that the event has been
    /// handled, and needs no further processing; otherwise returns `false` to
    /// indicate that the event should be propagated further.
    /// 
    /// You can reimplement this function in a subclass, but we recommend
    /// using one of the specialized event handlers instead.
    /// 
    /// Specialized handlers for viewport events are: paintEvent(),
    /// mousePressEvent(), mouseReleaseEvent(), mouseDoubleClickEvent(),
    /// mouseMoveEvent(), wheelEvent(), dragEnterEvent(), dragMoveEvent(),
    /// dragLeaveEvent(), dropEvent(), contextMenuEvent(), and
    /// resizeEvent().
    [event] viewport_event(arg0: *EventType) -> bool,
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// resize events (passed in *event),* for the viewport() widget.
    /// 
    /// When resizeEvent() is called, the viewport already has its new
    /// geometry: Its new size is accessible through the
    /// QResizeEvent::size() function, and the old size through
    /// QResizeEvent::oldSize().
    /// 
    /// **See also:** [`Widget::resize_event`]
    [event] resize_event(arg0: *ResizeEventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// paint events (passed in *event),* for the viewport() widget.
    /// 
    /// **Note**: If you open a painter, make sure to open it on the viewport().
    /// 
    /// **See also:** [`Widget::paint_event`]
    [event] paint_event(arg0: *PaintEventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// mouse press events for the viewport() widget. The event is passed
    /// in *e.*
    /// 
    /// **See also:** [`Widget::mouse_press_event`]
    [event] mouse_press_event(arg0: *MouseEventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// mouse release events for the viewport() widget. The event is
    /// passed in *e.*
    /// 
    /// **See also:** [`Widget::mouse_release_event`]
    [event] mouse_release_event(arg0: *MouseEventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// mouse double click events for the viewport() widget. The event is
    /// passed in *e.*
    /// 
    /// **See also:** [`Widget::mouse_double_click_event`]
    [event] mouse_double_click_event(arg0: *MouseEventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// mouse move events for the viewport() widget. The event is passed
    /// in *e.*
    /// 
    /// **See also:** [`Widget::mouse_move_event`]
    [event] mouse_move_event(arg0: *MouseEventType),
    [event] wheel_event(arg0: *WheelEventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// context menu events for the viewport() widget. The event is passed
    /// in *e.*
    /// 
    /// **See also:** [`Widget::context_menu_event`]
    [event] context_menu_event(arg0: *ContextMenuEventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// drag enter events (passed in *event),* for the viewport() widget.
    /// 
    /// **See also:** [`Widget::drag_enter_event`]
    [event] drag_enter_event(arg0: *DragEnterEventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// drag move events (passed in *event),* for the viewport() widget.
    /// 
    /// **See also:** [`Widget::drag_move_event`]
    [event] drag_move_event(arg0: *DragMoveEventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// drag leave events (passed in *event),* for the viewport() widget.
    /// 
    /// **See also:** [`Widget::drag_leave_event`]
    [event] drag_leave_event(arg0: *DragLeaveEventType),
    /// 
    /// This event handler can be reimplemented in a subclass to receive
    /// drop events (passed in *event),* for the viewport() widget.
    /// 
    /// **See also:** [`Widget::drop_event`]
    [event] drop_event(arg0: *DropEventType),
    /// 
    /// This function is called with key event *e* when key presses
    /// occur. It handles PageUp, PageDown, Up, Down, Left, and Right, and
    /// ignores all other key presses.
    [event] key_press_event(arg0: *KeyEventType),
    /// 
    /// This virtual handler is called when the scroll bars are moved by
    /// *dx,* *dy,* and consequently the viewport's contents should be
    /// scrolled accordingly.
    /// 
    /// The default implementation simply calls update() on the entire
    /// viewport(), subclasses can reimplement this handler for
    /// optimization purposes, or - like QScrollArea - to move a contents
    /// widget. The parameters *dx* and *dy* are there for convenience,
    /// so that the class knows how much should be scrolled (useful
    /// e.g. when doing pixel-shifts). You may just as well ignore these
    /// values and scroll directly to the position the scroll bars
    /// indicate.
    /// 
    /// Calling this function in order to scroll programmatically is an
    /// error, use the scroll bars instead (e.g. by calling
    /// QScrollBar::setValue() directly).
    [event] scroll_contents_by(dx: i32, dy: i32),
    /// 
    /// Returns the recommended size for the viewport.
    /// The default implementation returns viewport()->sizeHint().
    /// Note that the size is just the viewport's size, without any scroll bars visible.
    [event] viewport_size_hint() -> Size,
}

[org_name(QAbstractScrollArea)]
enum SizeAdjustPolicy {
    /// The scroll area will behave like before - and not do any adjust.
    AdjustIgnored = 0,
    /// The scroll area will adjust to its viewport the first time it is shown.
    AdjustToContentsOnFirstShow = 1,
    /// The scroll area will always adjust to the viewport
    AdjustToContents = 2,
}

// vim: syntax=rust expandtab ts=4 sw=4
