struct AbstractScrollArea : Frame {
    vertical_scroll_bar_policy() -> Rute::ScrollBarPolicy,
    set_vertical_scroll_bar_policy(Rute::ScrollBarPolicy arg0),
    vertical_scroll_bar() -> &ScrollBarType,
    set_vertical_scroll_bar(&ScrollBarType scrollbar),
    horizontal_scroll_bar_policy() -> Rute::ScrollBarPolicy,
    set_horizontal_scroll_bar_policy(Rute::ScrollBarPolicy arg0),
    horizontal_scroll_bar() -> &ScrollBarType,
    set_horizontal_scroll_bar(&ScrollBarType scrollbar),
    corner_widget() -> &WidgetType,
    set_corner_widget(&WidgetType widget),
    add_scroll_bar_widget(&WidgetType widget, Rute::Alignment alignment),
    scroll_bar_widgets(Rute::Alignment alignment) -> WidgetListType,
    viewport() -> &WidgetType,
    set_viewport(&WidgetType widget),
    maximum_viewport_size() -> SizeType,
    minimum_size_hint() -> SizeType,
    size_hint() -> SizeType,
    setup_viewport(&WidgetType viewport),
    size_adjust_policy() -> AbstractScrollArea::SizeAdjustPolicy,
    set_size_adjust_policy(AbstractScrollArea::SizeAdjustPolicy policy),
    set_viewport_margins(i32 left, i32 top, i32 right, i32 bottom),
    set_viewport_margins(&MarginsType margins),
    viewport_margins() -> MarginsType,
    event_filter(&ObjectType arg0, &EventType arg1) -> bool,
    event(&EventType arg0) -> bool,
    viewport_event(&EventType arg0) -> bool,
    resize_event(&ResizeEventType arg0),
    paint_event(&PaintEventType arg0),
    mouse_press_event(&MouseEventType arg0),
    mouse_release_event(&MouseEventType arg0),
    mouse_double_click_event(&MouseEventType arg0),
    mouse_move_event(&MouseEventType arg0),
    wheel_event(&WheelEventType arg0),
    context_menu_event(&ContextMenuEventType arg0),
    drag_enter_event(&DragEnterEventType arg0),
    drag_move_event(&DragMoveEventType arg0),
    drag_leave_event(&DragLeaveEventType arg0),
    drop_event(&DropEventType arg0),
    key_press_event(&KeyEventType arg0),
    scroll_contents_by(i32 dx, i32 dy),
    viewport_size_hint() -> SizeType,
}

