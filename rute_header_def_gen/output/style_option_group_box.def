/// 
/// QStyleOptionButton contains all the information that QStyle
/// functions need the various graphical elements of a group box.
/// 
/// It holds the lineWidth and the midLineWidth for drawing the panel,
/// the group box's [title](text)
/// and the title's [alignment](textAlignment)
/// and [color](textColor)
/// 
/// 
/// For performance reasons, the access to the member variables is
/// direct (i.e., using the `.` or `->` operator). This low-level feel
/// makes the structures straightforward to use and emphasizes that
/// these are simply parameters used by the style functions.
/// 
/// For an example demonstrating how style options can be used, see
/// the [Styles](widgets/styles)
/// example.
/// 
/// **See also:** [`StyleOption`]
/// [`StyleOptionComplex`]
/// [`GroupBox`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct StyleOptionGroupBox : StyleOptionComplex {
}

[org_name(QStyleOptionGroupBox)]
enum StyleOptionType {
    /// The type of style option provided ( [SO_GroupBox](SO_GroupBox)
 for this class). The type is used internally by QStyleOption, its subclasses, and qstyleoption_cast() to determine the type of style option. In general you do not need to worry about this unless you want to create your own QStyleOption subclass and your own styles.
    Type = 983046,
}

[org_name(QStyleOptionGroupBox)]
enum StyleOptionVersion {
    /// 1 The version is used by QStyleOption subclasses to implement extensions without breaking compatibility. If you use qstyleoption_cast(), you normally do not need to check it.
    Version = 1,
}

// vim: syntax=rust expandtab ts=4 sw=4
