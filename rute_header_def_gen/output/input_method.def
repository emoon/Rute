///     \class QInputMethod
///     \brief The QInputMethod class provides access to the active text input method.
///     \inmodule QtGui
/// 
///     QInputMethod is used by the text editors for integrating to the platform text input
///     methods and more commonly by application views for querying various text input method-related
///     information like virtual keyboard visibility and keyboard dimensions.
/// 
///     Qt Quick also provides access to QInputMethod in QML through \l{QmlGlobalQtObject}{Qt global object}
///     as \c Qt.inputMethod property.
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QInputMethod)]
enum Action {
    Click,
    ContextMenu,
}

struct InputMethod : Object {
    ///     Returns the transformation from input item coordinates to the window coordinates.
    input_item_transform() -> Transform,
    ///     Sets the transformation from input item coordinates to window coordinates to be \a transform.
    ///     Item transform needs to be updated by the focused window like QQuickCanvas whenever
    ///     item is moved inside the scene.
    set_input_item_transform(transform: &TransformType),
    ///     \since 5.1
    /// 
    ///     Returns the input item's geometry in input item coordinates.
    /// 
    ///     \sa setInputItemRectangle()
    input_item_rectangle() -> RectF,
    ///     \since 5.1
    /// 
    ///     Sets the input item's geometry to be \a rect, in input item coordinates.
    ///     This needs to be updated by the focused window like QQuickCanvas whenever
    ///     item is moved inside the scene, or focus is changed.
    set_input_item_rectangle(rect: &RectFType),
    ///     \property QInputMethod::cursorRectangle
    ///     \brief Input item's cursor rectangle in window coordinates.
    /// 
    ///     Cursor rectangle is often used by various text editing controls
    ///     like text prediction popups for following the text being typed.
    cursor_rectangle() -> RectF,
    ///     \property QInputMethod::anchorRectangle
    ///     \brief Input item's anchor rectangle in window coordinates.
    /// 
    ///     Anchor rectangle is often used by various text editing controls
    ///     like text prediction popups for following the text selection.
    anchor_rectangle() -> RectF,
    ///     \property QInputMethod::keyboardRectangle
    ///     \brief Virtual keyboard's geometry in window coordinates.
    /// 
    ///     This might be an empty rectangle if it is not possible to know the geometry
    ///     of the keyboard. This is the case for a floating keyboard on android.
    keyboard_rectangle() -> RectF,
    ///     \property QInputMethod::inputItemClipRectangle
    ///     \brief Input item's clipped rectangle in window coordinates.
    /// 
    ///     The clipped input rectangle is often used by various input methods to determine
    ///     how much screen real estate is available for the input method (e.g. Virtual Keyboard).
    input_item_clip_rectangle() -> RectF,
    ///     \property QInputMethod::visible
    ///     \brief Virtual keyboard's visibility on the screen
    /// 
    ///     Input method visibility remains false for devices
    ///     with no virtual keyboards.
    /// 
    ///     \sa show(), hide()
    is_visible() -> bool,
    ///     Controls the keyboard visibility. Equivalent
    ///     to calling show() (if \a visible is \c true)
    ///     or hide() (if \a visible is \c false).
    /// 
    ///     \sa show(), hide()
    set_visible(visible: bool),
    ///     \property QInputMethod::animating
    ///     \brief True when the virtual keyboard is being opened or closed.
    /// 
    ///     Animating is false when keyboard is fully open or closed.
    ///     When \c animating is \c true and \c visibility is \c true keyboard
    ///     is being opened. When \c animating is \c true and \c visibility is
    ///     false keyboard is being closed.
    is_animating() -> bool,
    ///     \property QInputMethod::locale
    ///     \brief Current input locale.
    locale() -> Locale,
    ///     \property QInputMethod::inputDirection
    ///     \brief Current input direction.
    input_direction() -> Rute::LayoutDirection,
    [static] query_focus_object(query: Rute::InputMethodQuery, argument: VariantType) -> Variant,
    ///     Requests virtual keyboard to open. If the platform
    ///     doesn't provide virtual keyboard the visibility
    ///     remains false.
    /// 
    ///     Normally applications should not need to call this
    ///     function, keyboard should automatically open when
    ///     the text editor gains focus.
    show(),
    ///     Requests virtual keyboard to close.
    /// 
    ///     Normally applications should not need to call this function,
    ///     keyboard should automatically close when the text editor loses
    ///     focus, for example when the parent view is closed.
    hide(),
    ///     Called by the input item to inform the platform input methods when there has been
    ///     state changes in editor's input method query attributes. When calling the function
    ///     \a queries parameter has to be used to tell what has changes, which input method
    ///     can use to make queries for attributes it's interested with QInputMethodQueryEvent.
    /// 
    ///     In particular calling update whenever the cursor position changes is important as
    ///     that often causes other query attributes like surrounding text and text selection
    ///     to change as well. The attributes that often change together with cursor position
    ///     have been grouped in Qt::ImQueryInput value for convenience.
    update(queries: Rute::InputMethodQueries),
    ///     Resets the input method state. For example, a text editor normally calls
    ///     this method before inserting a text to make widget ready to accept a text.
    /// 
    ///     Input method resets automatically when the focused editor changes.
    reset(),
    ///     Commits the word user is currently composing to the editor. The function is
    ///     mostly needed by the input methods with text prediction features and by the
    ///     methods where the script used for typing characters is different from the
    ///     script that actually gets appended to the editor. Any kind of action that
    ///     interrupts the text composing needs to flush the composing state by calling the
    ///     commit() function, for example when the cursor is moved elsewhere.
    commit(),
    ///     Called by the input item when the word currently being composed is tapped by
    ///     the user, as indicated by the action \a a and the given \a cursorPosition.
    ///     Input methods often use this information to offer more word suggestions to the user.
    invoke_action(a: InputMethod::Action, cursor_position: i32),
    [signal] cursor_rectangle_changed(),
    [signal] anchor_rectangle_changed(),
    [signal] keyboard_rectangle_changed(),
    [signal] input_item_clip_rectangle_changed(),
    [signal] visible_changed(),
    [signal] animating_changed(),
    [signal] locale_changed(),
    [signal] input_direction_changed(new_direction: Rute::LayoutDirection),
}

// vim: syntax=rust expandtab ts=4 sw=4
