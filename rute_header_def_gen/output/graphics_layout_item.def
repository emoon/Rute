
struct GraphicsLayoutItem {
    set_size_policy(&SizePolicyType policy),
    set_size_policy(SizePolicy::Policy h_policy, SizePolicy::Policy v_policy, SizePolicy::ControlType control_type),
    size_policy() -> SizePolicyType,
    set_minimum_size(&SizeFType size),
    set_minimum_size(f32 w, f32 h),
    minimum_size() -> SizeFType,
    set_minimum_width(f32 width),
    minimum_width() -> f32,
    set_minimum_height(f32 height),
    minimum_height() -> f32,
    set_preferred_size(&SizeFType size),
    set_preferred_size(f32 w, f32 h),
    preferred_size() -> SizeFType,
    set_preferred_width(f32 width),
    preferred_width() -> f32,
    set_preferred_height(f32 height),
    preferred_height() -> f32,
    set_maximum_size(&SizeFType size),
    set_maximum_size(f32 w, f32 h),
    maximum_size() -> SizeFType,
    set_maximum_width(f32 width),
    maximum_width() -> f32,
    set_maximum_height(f32 height),
    maximum_height() -> f32,
    get_contents_margins(&f32 left, &f32 top, &f32 right, &f32 bottom),
    contents_rect() -> RectFType,
    effective_size_hint(Rute::SizeHint which, &SizeFType constraint) -> SizeFType,
    parent_layout_item() -> &GraphicsLayoutItemType,
    set_parent_layout_item(&GraphicsLayoutItemType parent),
    is_layout() -> bool,
    graphics_item() -> &GraphicsItemType,
    owned_by_layout() -> bool,
    set_graphics_item(&GraphicsItemType item),
    set_owned_by_layout(bool owned_by_layout),
    size_hint(Rute::SizeHint which, &SizeFType constraint) -> SizeFType,
    effective_size_hints(&SizeFType constraint) -> &SizeFType,
}

