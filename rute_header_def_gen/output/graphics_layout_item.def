
struct GraphicsLayoutItem {
    set_size_policy(policy: &SizePolicyType),
    set_size_policy(h_policy: SizePolicy::Policy, v_policy: SizePolicy::Policy, control_type: SizePolicy::ControlType),
    size_policy() -> SizePolicyType,
    set_minimum_size(size: &SizeFType),
    set_minimum_size(w: f32, h: f32),
    minimum_size() -> SizeFType,
    set_minimum_width(width: f32),
    minimum_width() -> f32,
    set_minimum_height(height: f32),
    minimum_height() -> f32,
    set_preferred_size(size: &SizeFType),
    set_preferred_size(w: f32, h: f32),
    preferred_size() -> SizeFType,
    set_preferred_width(width: f32),
    preferred_width() -> f32,
    set_preferred_height(height: f32),
    preferred_height() -> f32,
    set_maximum_size(size: &SizeFType),
    set_maximum_size(w: f32, h: f32),
    maximum_size() -> SizeFType,
    set_maximum_width(width: f32),
    maximum_width() -> f32,
    set_maximum_height(height: f32),
    maximum_height() -> f32,
    [override] get_contents_margins(left: &f32, top: &f32, right: &f32, bottom: &f32),
    contents_rect() -> RectFType,
    effective_size_hint(which: Rute::SizeHint, constraint: &SizeFType) -> SizeFType,
    parent_layout_item() -> &GraphicsLayoutItemType,
    set_parent_layout_item(parent: &GraphicsLayoutItemType),
    is_layout() -> bool,
    graphics_item() -> &GraphicsItemType,
    owned_by_layout() -> bool,
    set_graphics_item(item: &GraphicsItemType),
    set_owned_by_layout(owned_by_layout: bool),
    [override] size_hint(which: Rute::SizeHint, constraint: &SizeFType) -> SizeFType,
}

// vim: syntax=rust expandtab ts=4 sw=4
