
struct StringRef {
    position() -> i32,
    size() -> i32,
    count() -> i32,
    length() -> i32,
    index_of(String str, i32 from, Rute::CaseSensitivity cs) -> i32,
    index_of(CharType ch, i32 from, Rute::CaseSensitivity cs) -> i32,
    index_of(Latin1StringType str, i32 from, Rute::CaseSensitivity cs) -> i32,
    index_of(&StringRefType str, i32 from, Rute::CaseSensitivity cs) -> i32,
    last_index_of(String str, i32 from, Rute::CaseSensitivity cs) -> i32,
    last_index_of(CharType ch, i32 from, Rute::CaseSensitivity cs) -> i32,
    last_index_of(Latin1StringType str, i32 from, Rute::CaseSensitivity cs) -> i32,
    last_index_of(&StringRefType str, i32 from, Rute::CaseSensitivity cs) -> i32,
    contains(String str, Rute::CaseSensitivity cs) -> bool,
    contains(CharType ch, Rute::CaseSensitivity cs) -> bool,
    contains(Latin1StringType str, Rute::CaseSensitivity cs) -> bool,
    contains(&StringRefType str, Rute::CaseSensitivity cs) -> bool,
    count(String s, Rute::CaseSensitivity cs) -> i32,
    count(CharType c, Rute::CaseSensitivity cs) -> i32,
    count(&StringRefType s, Rute::CaseSensitivity cs) -> i32,
    split(String sep, String::SplitBehavior behavior, Rute::CaseSensitivity cs) -> Vector<QStringRef>Type,
    split(CharType sep, String::SplitBehavior behavior, Rute::CaseSensitivity cs) -> Vector<QStringRef>Type,
    left(i32 n) -> StringRefType,
    right(i32 n) -> StringRefType,
    mid(i32 pos, i32 n) -> StringRefType,
    chopped(i32 n) -> StringRefType,
    chop(i32 n),
    is_right_to_left() -> bool,
    starts_with(StringViewType s, Rute::CaseSensitivity cs) -> bool,
    starts_with(Latin1StringType s, Rute::CaseSensitivity cs) -> bool,
    starts_with(CharType c, Rute::CaseSensitivity cs) -> bool,
    starts_with(String s, Rute::CaseSensitivity cs) -> bool,
    starts_with(&StringRefType c, Rute::CaseSensitivity cs) -> bool,
    ends_with(StringViewType s, Rute::CaseSensitivity cs) -> bool,
    ends_with(Latin1StringType s, Rute::CaseSensitivity cs) -> bool,
    ends_with(CharType c, Rute::CaseSensitivity cs) -> bool,
    ends_with(String s, Rute::CaseSensitivity cs) -> bool,
    ends_with(&StringRefType c, Rute::CaseSensitivity cs) -> bool,
    unicode() -> &CharType,
    data() -> &CharType,
    const_data() -> &CharType,
    begin() -> const_iterator,
    cbegin() -> const_iterator,
    const_begin() -> const_iterator,
    end() -> const_iterator,
    cend() -> const_iterator,
    const_end() -> const_iterator,
    rbegin() -> const_reverse_iterator,
    crbegin() -> const_reverse_iterator,
    rend() -> const_reverse_iterator,
    crend() -> const_reverse_iterator,
    to_latin1() -> ByteArrayType,
    to_utf8() -> ByteArrayType,
    to_local8_bit() -> ByteArrayType,
    to_ucs4() -> Vector<uint>Type,
    clear(),
    is_empty() -> bool,
    is_null() -> bool,
    append_to(String string) -> StringRefType,
    at(i32 i) -> CharType,
    front() -> CharType,
    back() -> CharType,
    compare(String s, Rute::CaseSensitivity cs) -> i32,
    compare(&StringRefType s, Rute::CaseSensitivity cs) -> i32,
    compare(Latin1StringType s, Rute::CaseSensitivity cs) -> i32,
    compare(&ByteArrayType s, Rute::CaseSensitivity cs) -> i32,
    compare(&StringRefType s1, String s2, Rute::CaseSensitivity arg0) -> i32,
    compare(&StringRefType s1, &StringRefType s2, Rute::CaseSensitivity arg0) -> i32,
    compare(&StringRefType s1, Latin1StringType s2, Rute::CaseSensitivity cs) -> i32,
    locale_aware_compare(String s) -> i32,
    locale_aware_compare(&StringRefType s) -> i32,
    locale_aware_compare(&StringRefType s1, String s2) -> i32,
    locale_aware_compare(&StringRefType s1, &StringRefType s2) -> i32,
    to_short(&bool ok, i32 base) -> short,
    to_u_short(&bool ok, i32 base) -> ushort,
    to_int(&bool ok, i32 base) -> i32,
    to_u_int(&bool ok, i32 base) -> uint,
    to_long(&bool ok, i32 base) -> long,
    to_u_long(&bool ok, i32 base) -> ulong,
    to_long_long(&bool ok, i32 base) -> qlonglong,
    to_u_long_long(&bool ok, i32 base) -> qulonglong,
    to_float(&bool ok) -> float,
    to_double(&bool ok) -> double,
}

// vim: syntax=rust expandtab ts=4 sw=4
