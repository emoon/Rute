
struct StringRef {
    position() -> i32,
    size() -> i32,
    count() -> i32,
    length() -> i32,
    index_of(str: String, from: i32, cs: Rute::CaseSensitivity) -> i32,
    index_of(ch: CharType, from: i32, cs: Rute::CaseSensitivity) -> i32,
    index_of(str: Latin1StringType, from: i32, cs: Rute::CaseSensitivity) -> i32,
    index_of(str: &StringRefType, from: i32, cs: Rute::CaseSensitivity) -> i32,
    last_index_of(str: String, from: i32, cs: Rute::CaseSensitivity) -> i32,
    last_index_of(ch: CharType, from: i32, cs: Rute::CaseSensitivity) -> i32,
    last_index_of(str: Latin1StringType, from: i32, cs: Rute::CaseSensitivity) -> i32,
    last_index_of(str: &StringRefType, from: i32, cs: Rute::CaseSensitivity) -> i32,
    contains(str: String, cs: Rute::CaseSensitivity) -> bool,
    contains(ch: CharType, cs: Rute::CaseSensitivity) -> bool,
    contains(str: Latin1StringType, cs: Rute::CaseSensitivity) -> bool,
    contains(str: &StringRefType, cs: Rute::CaseSensitivity) -> bool,
    count(s: String, cs: Rute::CaseSensitivity) -> i32,
    count(c: CharType, cs: Rute::CaseSensitivity) -> i32,
    count(s: &StringRefType, cs: Rute::CaseSensitivity) -> i32,
    split(sep: String, behavior: String::SplitBehavior, cs: Rute::CaseSensitivity) -> [StringRef],
    split(sep: CharType, behavior: String::SplitBehavior, cs: Rute::CaseSensitivity) -> [StringRef],
    left(n: i32) -> StringRef,
    right(n: i32) -> StringRef,
    mid(pos: i32, n: i32) -> StringRef,
    chopped(n: i32) -> StringRef,
    chop(n: i32),
    is_right_to_left() -> bool,
    starts_with(s: StringViewType, cs: Rute::CaseSensitivity) -> bool,
    starts_with(s: Latin1StringType, cs: Rute::CaseSensitivity) -> bool,
    starts_with(c: CharType, cs: Rute::CaseSensitivity) -> bool,
    starts_with(s: String, cs: Rute::CaseSensitivity) -> bool,
    starts_with(c: &StringRefType, cs: Rute::CaseSensitivity) -> bool,
    ends_with(s: StringViewType, cs: Rute::CaseSensitivity) -> bool,
    ends_with(s: Latin1StringType, cs: Rute::CaseSensitivity) -> bool,
    ends_with(c: CharType, cs: Rute::CaseSensitivity) -> bool,
    ends_with(s: String, cs: Rute::CaseSensitivity) -> bool,
    ends_with(c: &StringRefType, cs: Rute::CaseSensitivity) -> bool,
    unicode() -> Char?,
    data() -> Char?,
    const_data() -> Char?,
    begin() -> const_iterator,
    cbegin() -> const_iterator,
    const_begin() -> const_iterator,
    end() -> const_iterator,
    cend() -> const_iterator,
    const_end() -> const_iterator,
    rbegin() -> const_reverse_iterator,
    crbegin() -> const_reverse_iterator,
    rend() -> const_reverse_iterator,
    crend() -> const_reverse_iterator,
    to_latin1() -> ByteArray,
    to_utf8() -> ByteArray,
    to_local8_bit() -> ByteArray,
    to_ucs4() -> [uint],
    clear(),
    is_empty() -> bool,
    is_null() -> bool,
    append_to(string: String) -> StringRef,
    at(i: i32) -> Char,
    front() -> Char,
    back() -> Char,
    compare(s: String, cs: Rute::CaseSensitivity) -> i32,
    compare(s: &StringRefType, cs: Rute::CaseSensitivity) -> i32,
    compare(s: Latin1StringType, cs: Rute::CaseSensitivity) -> i32,
    compare(s: &ByteArrayType, cs: Rute::CaseSensitivity) -> i32,
    [static] compare(s1: &StringRefType, s2: String, arg0: Rute::CaseSensitivity) -> i32,
    [static] compare(s1: &StringRefType, s2: &StringRefType, arg0: Rute::CaseSensitivity) -> i32,
    [static] compare(s1: &StringRefType, s2: Latin1StringType, cs: Rute::CaseSensitivity) -> i32,
    locale_aware_compare(s: String) -> i32,
    locale_aware_compare(s: &StringRefType) -> i32,
    [static] locale_aware_compare(s1: &StringRefType, s2: String) -> i32,
    [static] locale_aware_compare(s1: &StringRefType, s2: &StringRefType) -> i32,
    to_short(ok: &bool, base: i32) -> short,
    to_u_short(ok: &bool, base: i32) -> ushort,
    to_int(ok: &bool, base: i32) -> i32,
    to_u_int(ok: &bool, base: i32) -> uint,
    to_long(ok: &bool, base: i32) -> long,
    to_u_long(ok: &bool, base: i32) -> ulong,
    to_long_long(ok: &bool, base: i32) -> i64,
    to_u_long_long(ok: &bool, base: i32) -> qulonglong,
    to_float(ok: &bool) -> f32,
    to_double(ok: &bool) -> double,
}

// vim: syntax=rust expandtab ts=4 sw=4
