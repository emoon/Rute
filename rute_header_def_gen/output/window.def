[org_name(QWindow)]
enum Visibility {
    Hidden,
    AutomaticVisibility,
    Windowed,
    Minimized,
    Maximized,
    FullScreen,
}

[org_name(QWindow)]
enum AncestorMode {
    ExcludeTransients,
    IncludeTransients,
}

struct Window : Object, Surface {
    set_surface_type(surface_type: Surface::SurfaceType),
    [event] surface_type() -> Surface::SurfaceType,
    is_visible() -> bool,
    visibility() -> Window::Visibility,
    set_visibility(v: Window::Visibility),
    create(),
    win_id() -> WId,
    parent(mode: Window::AncestorMode) -> Window?,
    parent() -> Window?,
    set_parent(parent: *WindowType),
    is_top_level() -> bool,
    is_modal() -> bool,
    modality() -> Rute::WindowModality,
    set_modality(modality: Rute::WindowModality),
    set_format(format: &SurfaceFormatType),
    [event] format() -> SurfaceFormat,
    requested_format() -> SurfaceFormat,
    set_flags(flags: Rute::WindowFlags),
    flags() -> Rute::WindowFlags,
    set_flag(arg0: Rute::WindowType, on: bool),
    type() -> Rute::WindowType,
    title() -> String,
    set_opacity(level: f32),
    opacity() -> f32,
    set_mask(region: &RegionType),
    mask() -> Region,
    is_active() -> bool,
    report_content_orientation_change(orientation: Rute::ScreenOrientation),
    content_orientation() -> Rute::ScreenOrientation,
    device_pixel_ratio() -> f32,
    window_state() -> Rute::WindowState,
    window_states() -> Rute::WindowStates,
    set_window_state(state: Rute::WindowState),
    set_window_states(states: Rute::WindowStates),
    set_transient_parent(parent: *WindowType),
    is_ancestor_of(child: *WindowType, mode: Window::AncestorMode) -> bool,
    is_exposed() -> bool,
    minimum_width() -> i32,
    minimum_height() -> i32,
    maximum_width() -> i32,
    maximum_height() -> i32,
    minimum_size() -> Size,
    maximum_size() -> Size,
    base_size() -> Size,
    size_increment() -> Size,
    set_minimum_size(size: &SizeType),
    set_maximum_size(size: &SizeType),
    set_base_size(size: &SizeType),
    set_size_increment(size: &SizeType),
    frame_margins() -> Margins,
    frame_position() -> Point,
    set_frame_position(point: &PointType),
    width() -> i32,
    height() -> i32,
    x() -> i32,
    y() -> i32,
    [event] size() -> Size,
    position() -> Point,
    set_position(pt: &PointType),
    set_position(posx: i32, posy: i32),
    resize(new_size: &SizeType),
    resize(w: i32, h: i32),
    set_file_path(file_path: String),
    file_path() -> String,
    set_icon(icon: &IconType),
    icon() -> Icon,
    handle() -> PlatformWindow?,
    set_keyboard_grab_enabled(grab: bool) -> bool,
    set_mouse_grab_enabled(grab: bool) -> bool,
    screen() -> Screen?,
    set_screen(screen: *ScreenType),
    [event] accessible_root() -> AccessibleInterface?,
    [event] focus_object() -> Object?,
    map_to_global(pos: &PointType) -> Point,
    map_from_global(pos: &PointType) -> Point,
    cursor() -> Cursor,
    set_cursor(arg0: &CursorType),
    unset_cursor(),
    [static] from_win_id(id: WId) -> Window?,
    request_activate(),
    set_visible(visible: bool),
    show(),
    hide(),
    show_minimized(),
    show_maximized(),
    show_full_screen(),
    show_normal(),
    close() -> bool,
    raise(),
    lower(),
    set_title(arg0: String),
    set_x(arg: i32),
    set_y(arg: i32),
    set_width(arg: i32),
    set_height(arg: i32),
    set_minimum_width(w: i32),
    set_minimum_height(h: i32),
    set_maximum_width(w: i32),
    set_maximum_height(h: i32),
    alert(msec: i32),
    request_update(),
    [signal] screen_changed(screen: *ScreenType),
    [signal] modality_changed(modality: Rute::WindowModality),
    [signal] window_state_changed(window_state: Rute::WindowState),
    [signal] window_title_changed(title: String),
    [signal] x_changed(arg: i32),
    [signal] y_changed(arg: i32),
    [signal] width_changed(arg: i32),
    [signal] height_changed(arg: i32),
    [signal] minimum_width_changed(arg: i32),
    [signal] minimum_height_changed(arg: i32),
    [signal] maximum_width_changed(arg: i32),
    [signal] maximum_height_changed(arg: i32),
    [signal] visible_changed(arg: bool),
    [signal] visibility_changed(visibility: Window::Visibility),
    [signal] active_changed(),
    [signal] content_orientation_changed(orientation: Rute::ScreenOrientation),
    [signal] focus_object_changed(object: *ObjectType),
    [signal] opacity_changed(opacity: f32),
    [event] expose_event(arg0: *ExposeEventType),
    [event] resize_event(arg0: *ResizeEventType),
    [event] move_event(arg0: *MoveEventType),
    [event] focus_in_event(arg0: *FocusEventType),
    [event] focus_out_event(arg0: *FocusEventType),
    [event] show_event(arg0: *ShowEventType),
    [event] hide_event(arg0: *HideEventType),
    [event] event(arg0: *EventType) -> bool,
    [event] key_press_event(arg0: *KeyEventType),
    [event] key_release_event(arg0: *KeyEventType),
    [event] mouse_press_event(arg0: *MouseEventType),
    [event] mouse_release_event(arg0: *MouseEventType),
    [event] mouse_double_click_event(arg0: *MouseEventType),
    [event] mouse_move_event(arg0: *MouseEventType),
    [event] wheel_event(arg0: *WheelEventType),
    [event] touch_event(arg0: *TouchEventType),
    [event] tablet_event(arg0: *TabletEventType),
    [event] native_event(event_type: &ByteArrayType, message: *void, result: *long) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
