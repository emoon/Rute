///     \class QItemSelection
///     \inmodule QtCore
/// 
///     \brief The QItemSelection class manages information about selected items in a model.
/// 
///     \ingroup model-view
/// 
///     A QItemSelection describes the items in a model that have been
///     selected by the user. A QItemSelection is basically a list of
///     selection ranges, see QItemSelectionRange. It provides functions for
///     creating and manipulating selections, and selecting a range of items
///     from a model.
/// 
///     The QItemSelection class is one of the \l{Model/View Classes}
///     and is part of Qt's \l{Model/View Programming}{model/view framework}.
/// 
///     An item selection can be constructed and initialized to contain a
///     range of items from an existing model. The following example constructs
///     a selection that contains a range of items from the given \c model,
///     beginning at the \c topLeft, and ending at the \c bottomRight.
/// 
///     \snippet code/src_gui_itemviews_qitemselectionmodel.cpp 0
/// 
///     An empty item selection can be constructed, and later populated as
///     required. So, if the model is going to be unavailable when we construct
///     the item selection, we can rewrite the above code in the following way:
/// 
///     \snippet code/src_gui_itemviews_qitemselectionmodel.cpp 1
/// 
///     QItemSelection saves memory, and avoids unnecessary work, by working with
///     selection ranges rather than recording the model item index for each
///     item in the selection. Generally, an instance of this class will contain
///     a list of non-overlapping selection ranges.
/// 
///     Use merge() to merge one item selection into another without making
///     overlapping ranges. Use split() to split one selection range into
///     smaller ranges based on a another selection range.
/// 
///     \sa {Model/View Programming}, QItemSelectionModel
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct ItemSelection {
    ///     Adds the items in the range that extends from the top-left model
    ///     item, specified by the \a topLeft index, to the bottom-right item,
    ///     specified by \a bottomRight to the list.
    /// 
    ///     \note \a topLeft and \a bottomRight must have the same parent.
    select(top_left: &ModelIndexType, bottom_right: &ModelIndexType),
    ///     Returns \c true if the selection contains the given \a index; otherwise
    ///     returns \c false.
    contains(index: &ModelIndexType) -> bool,
    ///     Returns a list of model indexes that correspond to the selected items.
    indexes() -> [ModelIndex],
    ///     Merges the \a other selection with this QItemSelection using the
    ///     \a command given. This method guarantees that no ranges are overlapping.
    /// 
    ///     Note that only QItemSelectionModel::Select,
    ///     QItemSelectionModel::Deselect, and QItemSelectionModel::Toggle are
    ///     supported.
    /// 
    ///     \sa split()
    merge(other: &ItemSelectionType, command: ItemSelectionModel::SelectionFlags),
    [static] split(range: &ItemSelectionRangeType, other: &ItemSelectionRangeType, result: *ItemSelectionType),
}

// vim: syntax=rust expandtab ts=4 sw=4
