/// 
/// A QItemSelection describes the items in a model that have been
/// selected by the user. A QItemSelection is basically a list of
/// selection ranges, see QItemSelectionRange. It provides functions for
/// creating and manipulating selections, and selecting a range of items
/// from a model.
/// 
/// The QItemSelection class is one of the [Model/View Classes](Model/View%20Classes)
/// and is part of Qt's [model/view framework](Model/View%20Programming)
/// 
/// 
/// An item selection can be constructed and initialized to contain a
/// range of items from an existing model. The following example constructs
/// a selection that contains a range of items from the given `model,`
/// beginning at the `topLeft,` and ending at the `bottomRight.`
/// 
/// An empty item selection can be constructed, and later populated as
/// required. So, if the model is going to be unavailable when we construct
/// the item selection, we can rewrite the above code in the following way:
/// 
/// QItemSelection saves memory, and avoids unnecessary work, by working with
/// selection ranges rather than recording the model item index for each
/// item in the selection. Generally, an instance of this class will contain
/// a list of non-overlapping selection ranges.
/// 
/// Use merge() to merge one item selection into another without making
/// overlapping ranges. Use split() to split one selection range into
/// smaller ranges based on a another selection range.
/// 
/// **See also:** {Model/View Programming}
/// [`ItemSelectionModel`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct ItemSelection : lass QItemSelectionRange> {
    /// 
    /// Adds the items in the range that extends from the top-left model
    /// item, specified by the *topLeft* index, to the bottom-right item,
    /// specified by *bottomRight* to the list.
    /// 
    /// **Note**: *topLeft* and *bottomRight* must have the same parent.
    select(top_left: &ModelIndexType, bottom_right: &ModelIndexType),
    /// 
    /// Returns `true` if the selection contains the given *index;* otherwise
    /// returns `false.`
    contains(index: &ModelIndexType) -> bool,
    /// 
    /// Returns a list of model indexes that correspond to the selected items.
    indexes() -> [ModelIndex],
    /// 
    /// Merges the *other* selection with this QItemSelection using the
    /// *command* given. This method guarantees that no ranges are overlapping.
    /// 
    /// Note that only QItemSelectionModel::Select,
    /// QItemSelectionModel::Deselect, and QItemSelectionModel::Toggle are
    /// supported.
    /// 
    /// **See also:** [`split()`]
    merge(other: &ItemSelectionType, command: ItemSelectionModel::SelectionFlags),
    /// 
    /// Splits the selection *range* using the selection *other* range.
    /// Removes all items in *other* from *range* and puts the result in *result.*
    /// This can be compared with the semantics of the *subtract* operation of a set.
    /// **See also:** [`merge()`]
    [static] split(range: &ItemSelectionRangeType, other: &ItemSelectionRangeType, result: *ItemSelectionType),
}

// vim: syntax=rust expandtab ts=4 sw=4
