/// 
/// Effects alter the appearance of elements by hooking into the rendering
/// pipeline and operating between the source (e.g., a QGraphicsPixmapItem)
/// and the destination device (e.g., QGraphicsView's viewport). Effects can be
/// disabled by calling setEnabled(false). If effects are disabled, the source
/// is rendered directly.
/// 
/// To add a visual effect to a QGraphicsItem, for example, you can use one of
/// the standard effects, or alternately, create your own effect by creating a
/// subclass of QGraphicsEffect. The effect can then be installed on the item
/// using QGraphicsItem::setGraphicsEffect().
/// 
/// Qt provides the following standard effects:
/// 
/// * QGraphicsBlurEffect - blurs the item by a given radius
/// * QGraphicsDropShadowEffect - renders a dropshadow behind the item
/// * QGraphicsColorizeEffect - renders the item in shades of any given color
/// * QGraphicsOpacityEffect - renders the item with an opacity
/// 
/// * {2,1} ![graphicseffect-plain.png](graphicseffect-plain.png)
/// 
/// * ![graphicseffect-blur.png](graphicseffect-blur.png)
/// 
/// * ![graphicseffect-colorize.png](graphicseffect-colorize.png)
/// 
/// * ![graphicseffect-opacity.png](graphicseffect-opacity.png)
/// 
/// * ![graphicseffect-drop-shadow.png](graphicseffect-drop-shadow.png)
/// 
/// ![graphicseffect-widget.png](graphicseffect-widget.png)
/// 
/// For more information on how to use each effect, refer to the specific
/// effect's documentation.
/// 
/// To create your own custom effect, create a subclass of QGraphicsEffect (or
/// any other existing effects) and reimplement the virtual function draw().
/// This function is called whenever the effect needs to redraw. The draw()
/// function takes the painter with which to draw as an argument. For more
/// information, refer to the documenation for draw(). In the draw() function
/// you can call sourcePixmap() to get a pixmap of the graphics effect source
/// which you can then process.
/// 
/// If your effect changes, use update() to request for a redraw. If your
/// custom effect changes the bounding rectangle of the source, e.g., a radial
/// glow effect may need to apply an extra margin, you can reimplement the
/// virtual boundingRectFor() function, and call updateBoundingRect()
/// to notify the framework whenever this rectangle changes. The virtual
/// sourceChanged() function is called to notify the effects that
/// the source has changed in some way - e.g., if the source is a
/// QGraphicsRectItem and its rectangle parameters have changed.
/// 
/// **See also:** [`GraphicsItem::set_graphics_effect`]
/// [`Widget::set_graphics_effect`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct GraphicsEffect : Object {
    /// 
    /// Returns the effective bounding rectangle for this effect, given the
    /// provided *rect* in the device coordinates. When writing
    /// you own custom effect, you must call updateBoundingRect() whenever any
    /// parameters are changed that may cause this this function to return a
    /// different value.
    /// 
    /// **See also:** [`source_bounding_rect()`]
    [event] bounding_rect_for(source_rect: &RectFType) -> RectF,
    /// 
    /// Returns the effective bounding rectangle for this effect, i.e., the
    /// bounding rectangle of the source in device coordinates, adjusted by
    /// any margins applied by the effect itself.
    /// 
    /// **See also:** [`bounding_rect_for()`]
    /// [`update_bounding_rect()`]
    /// 
    /// Returns the effective bounding rectangle for this effect, given the
    /// provided *rect* in the device coordinates. When writing
    /// you own custom effect, you must call updateBoundingRect() whenever any
    /// parameters are changed that may cause this this function to return a
    /// different value.
    /// 
    /// **See also:** [`source_bounding_rect()`]
    bounding_rect() -> RectF,
    is_enabled() -> bool,
    set_enabled(enable: bool),
    /// 
    /// Schedules a redraw of the effect. Call this function whenever the effect
    /// needs to be redrawn. This function does not trigger a redraw of the source.
    /// 
    /// **See also:** [`update_bounding_rect()`]
    /// 
    /// This function notifies the effect framework when the effect's bounding
    /// rectangle has changed. As a custom effect author, you must call this
    /// function whenever you change any parameters that will cause the virtual
    /// boundingRectFor() function to return a different value.
    /// 
    /// This function will call update() if this is necessary.
    /// 
    /// **See also:** [`bounding_rect_for()`]
    /// [`bounding_rect()`]
    /// [`source_bounding_rect()`]
    update(),
    /// 
    /// This signal is emitted whenever the effect is enabled or disabled.
    /// The *enabled* parameter holds the effects's new enabled state.
    /// 
    /// **See also:** [`is_enabled()`]
    [signal] enabled_changed(enabled: bool),
    /// 
    /// Draws the source directly using the given *painter.*
    /// 
    /// This function should only be called from QGraphicsEffect::draw().
    /// 
    /// For example:
    /// 
    /// **See also:** [`GraphicsEffect::draw`]
    /// 
    /// This pure virtual function draws the effect and is called whenever the
    /// source needs to be drawn.
    /// 
    /// Reimplement this function in a QGraphicsEffect subclass to provide the
    /// effect's drawing implementation, using *painter.*
    /// 
    /// For example:
    /// 
    /// This function should not be called explicitly by the user, since it is
    /// meant for reimplementation purposes only.
    [event] draw(painter: *PainterType),
    /// 
    /// This virtual function is called by QGraphicsEffect to notify the effect
    /// that the source has changed. If the effect applies any cache, then this
    /// cache must be purged in order to reflect the new appearance of the source.
    /// 
    /// The *flags* describes what has changed.
    [event] source_changed(flags: GraphicsEffect::ChangeFlags),
    /// 
    /// This function notifies the effect framework when the effect's bounding
    /// rectangle has changed. As a custom effect author, you must call this
    /// function whenever you change any parameters that will cause the virtual
    /// boundingRectFor() function to return a different value.
    /// 
    /// This function will call update() if this is necessary.
    /// 
    /// **See also:** [`bounding_rect_for()`]
    /// [`bounding_rect()`]
    /// [`source_bounding_rect()`]
    update_bounding_rect(),
    /// 
    /// Returns `true` if the source effectively is a pixmap, e.g., a
    /// QGraphicsPixmapItem.
    /// 
    /// This function is useful for optimization purposes. For instance, there's no
    /// point in drawing the source in device coordinates to avoid pixmap scaling
    /// if this function returns `true` - the source pixmap will be scaled anyways.
    source_is_pixmap() -> bool,
    /// 
    /// Returns the bounding rectangle of the source mapped to the given *system.*
    /// 
    /// Calling this function with Qt::DeviceCoordinates outside of
    /// QGraphicsEffect::draw() will give undefined results, as there is no device
    /// context available.
    /// 
    /// **See also:** [`draw()`]
    source_bounding_rect(system: Rute::CoordinateSystem) -> RectF,
    /// 
    /// Draws the source directly using the given *painter.*
    /// 
    /// This function should only be called from QGraphicsEffect::draw().
    /// 
    /// For example:
    /// 
    /// **See also:** [`GraphicsEffect::draw`]
    draw_source(painter: *PainterType),
    /// 
    /// Returns a pixmap with the source painted into it.
    /// 
    /// The *system* specifies which coordinate system to be used for the source.
    /// The optional *offset* parameter returns the offset where the pixmap should
    /// be painted at using the current painter. For control on how the pixmap is
    /// padded use the *mode* parameter.
    /// 
    /// The returned pixmap is clipped to the current painter's device rectangle when
    /// *system* is Qt::DeviceCoordinates.
    /// 
    /// Calling this function with Qt::DeviceCoordinates outside of
    /// QGraphicsEffect::draw() will give undefined results, as there is no device
    /// context available.
    /// 
    /// **See also:** [`draw()`]
    /// [`bounding_rect()`]
    source_pixmap(system: Rute::CoordinateSystem, offset: *PointType, mode: GraphicsEffect::PixmapPadMode) -> Pixmap,
    /// 
    /// Returns the bounding rectangle of the source mapped to the given *system.*
    /// 
    /// Calling this function with Qt::DeviceCoordinates outside of
    /// QGraphicsEffect::draw() will give undefined results, as there is no device
    /// context available.
    /// 
    /// **See also:** [`draw()`]
    /// 
    /// Returns `true` if the source effectively is a pixmap, e.g., a
    /// QGraphicsPixmapItem.
    /// 
    /// This function is useful for optimization purposes. For instance, there's no
    /// point in drawing the source in device coordinates to avoid pixmap scaling
    /// if this function returns `true` - the source pixmap will be scaled anyways.
    /// 
    /// Returns a pixmap with the source painted into it.
    /// 
    /// The *system* specifies which coordinate system to be used for the source.
    /// The optional *offset* parameter returns the offset where the pixmap should
    /// be painted at using the current painter. For control on how the pixmap is
    /// padded use the *mode* parameter.
    /// 
    /// The returned pixmap is clipped to the current painter's device rectangle when
    /// *system* is Qt::DeviceCoordinates.
    /// 
    /// Calling this function with Qt::DeviceCoordinates outside of
    /// QGraphicsEffect::draw() will give undefined results, as there is no device
    /// context available.
    /// 
    /// **See also:** [`draw()`]
    /// [`bounding_rect()`]
    /// 
    /// This virtual function is called by QGraphicsEffect to notify the effect
    /// that the source has changed. If the effect applies any cache, then this
    /// cache must be purged in order to reflect the new appearance of the source.
    /// 
    /// The *flags* describes what has changed.
    source() -> GraphicsEffectSource?,
}

[org_name(QGraphicsEffect)]
enum ChangeFlag {
    /// The effect is installed on a source.
    SourceAttached,
    /// The effect is uninstalled on a source.
    SourceDetached,
    /// The bounding rect of the source has changed.
    SourceBoundingRectChanged,
    /// The visual appearance of the source has changed.
    SourceInvalidated,
}

[org_name(QGraphicsEffect)]
enum PixmapPadMode {
    /// The pixmap should not receive any additional padding.
    NoPad,
    /// The pixmap should be padded to ensure it has a completely transparent border.
    PadToTransparentBorder,
    /// The pixmap should be padded to match the effective bounding rectangle of the effect.
    PadToEffectiveBoundingRect,
}

// vim: syntax=rust expandtab ts=4 sw=4
