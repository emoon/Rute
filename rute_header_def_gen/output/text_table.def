/// 
/// A table is a group of cells ordered into rows and columns. Each table
/// contains at least one row and one column. Each cell contains a block, and
/// is surrounded by a frame.
/// 
/// Tables are usually created and inserted into a document with the
/// QTextCursor::insertTable() function.
/// For example, we can insert a table with three rows and two columns at the
/// current cursor position in an editor using the following lines of code:
/// 
/// The table format is either defined when the table is created or changed
/// later with setFormat().
/// 
/// The table currently being edited by the cursor is found with
/// QTextCursor::currentTable(). This allows its format or dimensions to be
/// changed after it has been inserted into a document.
/// 
/// A table's size can be changed with resize(), or by using
/// insertRows(), insertColumns(), removeRows(), or removeColumns().
/// Use cellAt() to retrieve table cells.
/// 
/// The starting and ending positions of table rows can be found by moving
/// a cursor within a table, and using the rowStart() and rowEnd() functions
/// to obtain cursors at the start and end of each row.
/// 
/// Rows and columns within a QTextTable can be merged and split using
/// the mergeCells() and splitCell() functions. However, only cells that span multiple
/// rows or columns can be split. (Merging or splitting does not increase or decrease
/// the number of rows and columns.)
/// 
/// Note that if you have merged multiple columns and rows into one cell, you will not
/// be able to split the merged cell into new cells spanning over more than one row
/// or column. To be able to split cells spanning over several rows and columns you
/// need to do this over several iterations.
/// 
/// * ![Original Table](texttable-split.png)
/// 
/// * Suppose we have a 2x3 table of names and addresses. To merge both columns in the first row we invoke mergeCells() with *row* = 0, *column* = 0, *numRows* = 1 and *numColumns* = 2.
/// 
/// * ![texttable-merge.png](texttable-merge.png)
/// 
/// * This gives us the following table. To split the first row of the table back into two cells, we invoke the splitCell() function with *numRows* and *numCols* = 1.
/// 
/// * ![Split Table](texttable-split.png)
/// 
/// * This results in the original table.
/// 
/// **See also:** [`TextTableFormat`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TextTable : TextFrame {
    /// 
    /// Resizes the table to contain the required number of *rows* and *columns.*
    /// 
    /// **See also:** [`insert_rows()`]
    /// [`insert_columns()`]
    /// [`remove_rows()`]
    /// [`remove_columns()`]
    resize(rows: i32, cols: i32),
    /// 
    /// Inserts a number of *rows* before the row with the specified *index.*
    /// 
    /// **See also:** [`resize()`]
    /// [`insert_columns()`]
    /// [`remove_rows()`]
    /// [`remove_columns()`]
    /// [`append_rows()`]
    /// [`append_columns()`]
    insert_rows(pos: i32, num: i32),
    /// 
    /// Inserts a number of *columns* before the column with the specified *index.*
    /// 
    /// **See also:** [`insert_rows()`]
    /// [`resize()`]
    /// [`remove_rows()`]
    /// [`remove_columns()`]
    /// [`append_rows()`]
    /// [`append_columns()`]
    insert_columns(pos: i32, num: i32),
    /// 
    /// Appends *count* rows at the bottom of the table.
    /// 
    /// **See also:** [`insert_columns()`]
    /// [`insert_rows()`]
    /// [`resize()`]
    /// [`remove_rows()`]
    /// [`remove_columns()`]
    /// [`append_columns()`]
    append_rows(count: i32),
    /// 
    /// Appends *count* columns at the right side of the table.
    /// 
    /// **See also:** [`insert_columns()`]
    /// [`insert_rows()`]
    /// [`resize()`]
    /// [`remove_rows()`]
    /// [`remove_columns()`]
    /// [`append_rows()`]
    append_columns(count: i32),
    /// 
    /// Removes a number of *rows* starting with the row at the specified *index.*
    /// 
    /// **See also:** [`insert_rows()`]
    /// [`insert_columns()`]
    /// [`resize()`]
    /// [`remove_columns()`]
    /// [`append_rows()`]
    /// [`append_columns()`]
    remove_rows(pos: i32, num: i32),
    /// 
    /// Removes a number of *columns* starting with the column at the specified
    /// *index.*
    /// 
    /// **See also:** [`insert_rows()`]
    /// [`insert_columns()`]
    /// [`remove_rows()`]
    /// [`resize()`]
    /// [`append_rows()`]
    /// [`append_columns()`]
    remove_columns(pos: i32, num: i32),
    /// 
    /// Merges the cell at the specified *row* and *column* with the adjacent cells
    /// into one cell. The new cell will span *numRows* rows and *numCols* columns.
    /// This method does nothing if *numRows* or *numCols* is less than the current
    /// number of rows or columns spanned by the cell.
    /// 
    /// **See also:** [`split_cell()`]
    /// 
    /// **Overloads**
    /// Merges the cells selected by the provided *cursor.*
    /// 
    /// **See also:** [`split_cell()`]
    merge_cells(row: i32, col: i32, num_rows: i32, num_cols: i32),
    /// 
    /// Merges the cell at the specified *row* and *column* with the adjacent cells
    /// into one cell. The new cell will span *numRows* rows and *numCols* columns.
    /// This method does nothing if *numRows* or *numCols* is less than the current
    /// number of rows or columns spanned by the cell.
    /// 
    /// **See also:** [`split_cell()`]
    /// 
    /// **Overloads**
    /// Merges the cells selected by the provided *cursor.*
    /// 
    /// **See also:** [`split_cell()`]
    [org_name(mergeCells)]
    merge_cells_2(cursor: &TextCursorType),
    /// 
    /// Splits the specified cell at *row* and *column* into an array of multiple
    /// cells with dimensions specified by *numRows* and *numCols.*
    /// 
    /// **Note**: It is only possible to split cells that span multiple rows or columns, such as rows
    /// that have been merged using mergeCells().
    /// 
    /// **See also:** [`merge_cells()`]
    split_cell(row: i32, col: i32, num_rows: i32, num_cols: i32),
    /// 
    /// Returns the number of rows in the table.
    /// 
    /// **See also:** [`columns()`]
    rows() -> i32,
    /// 
    /// Returns the number of columns in the table.
    /// 
    /// **See also:** [`rows()`]
    columns() -> i32,
    /// 
    /// Returns the table cell at the given *row* and *column* in the table.
    /// 
    /// **See also:** [`columns()`]
    /// [`rows()`]
    /// 
    /// **Overloads**
    /// Returns the table cell that contains the character at the given *position*
    /// in the document.
    /// 
    /// **Overloads**
    /// Returns the table cell containing the given *cursor.*
    cell_at(row: i32, col: i32) -> TextTableCell,
    /// 
    /// Returns the table cell at the given *row* and *column* in the table.
    /// 
    /// **See also:** [`columns()`]
    /// [`rows()`]
    /// 
    /// **Overloads**
    /// Returns the table cell that contains the character at the given *position*
    /// in the document.
    /// 
    /// **Overloads**
    /// Returns the table cell containing the given *cursor.*
    [org_name(cellAt)]
    cell_at_2(position: i32) -> TextTableCell,
    /// 
    /// Returns the table cell at the given *row* and *column* in the table.
    /// 
    /// **See also:** [`columns()`]
    /// [`rows()`]
    /// 
    /// **Overloads**
    /// Returns the table cell that contains the character at the given *position*
    /// in the document.
    /// 
    /// **Overloads**
    /// Returns the table cell containing the given *cursor.*
    [org_name(cellAt)]
    cell_at_3(c: &TextCursorType) -> TextTableCell,
    /// 
    /// Returns a cursor pointing to the start of the row that contains the
    /// given *cursor.*
    /// 
    /// **See also:** [`row_end()`]
    row_start(c: &TextCursorType) -> TextCursor,
    /// 
    /// Returns a cursor pointing to the end of the row that contains the given
    /// *cursor.*
    /// 
    /// **See also:** [`row_start()`]
    row_end(c: &TextCursorType) -> TextCursor,
    /// 
    /// Sets the table's *format.*
    /// 
    /// **See also:** [`format()`]
    set_format(format: &TextTableFormatType),
    /// 
    /// Returns the table's format.
    /// 
    /// **See also:** [`set_format()`]
    format() -> TextTableFormat,
}

// vim: syntax=rust expandtab ts=4 sw=4
