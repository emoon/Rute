///     \class QTextTable
///     \reentrant
/// 
///     \brief The QTextTable class represents a table in a QTextDocument.
///     \inmodule QtGui
/// 
///     \ingroup richtext-processing
/// 
///     A table is a group of cells ordered into rows and columns. Each table
///     contains at least one row and one column. Each cell contains a block, and
///     is surrounded by a frame.
/// 
///     Tables are usually created and inserted into a document with the
///     QTextCursor::insertTable() function.
///     For example, we can insert a table with three rows and two columns at the
///     current cursor position in an editor using the following lines of code:
/// 
///     \snippet textdocument-tables/mainwindow.cpp 1
///     \codeline
///     \snippet textdocument-tables/mainwindow.cpp 3
/// 
///     The table format is either defined when the table is created or changed
///     later with setFormat().
/// 
///     The table currently being edited by the cursor is found with
///     QTextCursor::currentTable(). This allows its format or dimensions to be
///     changed after it has been inserted into a document.
/// 
///     A table's size can be changed with resize(), or by using
///     insertRows(), insertColumns(), removeRows(), or removeColumns().
///     Use cellAt() to retrieve table cells.
/// 
///     The starting and ending positions of table rows can be found by moving
///     a cursor within a table, and using the rowStart() and rowEnd() functions
///     to obtain cursors at the start and end of each row.
/// 
///     Rows and columns within a QTextTable can be merged and split using
///     the mergeCells() and splitCell() functions. However, only cells that span multiple
///     rows or columns can be split. (Merging or splitting does not increase or decrease
///     the number of rows and columns.)
/// 
///     Note that if you have merged multiple columns and rows into one cell, you will not
///     be able to split the merged cell into new cells spanning over more than one row
///     or column. To be able to split cells spanning over several rows and columns you
///     need to do this over several iterations.
/// 
///     \table 80%
///     \row
///         \li \inlineimage texttable-split.png Original Table
///         \li Suppose we have a 2x3 table of names and addresses. To merge both
///         columns in the first row we invoke mergeCells() with \a row = 0,
///         \a column = 0, \a numRows = 1 and \a numColumns = 2.
///         \snippet textdocument-texttable/main.cpp 0
/// 
///     \row
///         \li \inlineimage texttable-merge.png
///         \li  This gives us the following table. To split the first row of the table
///         back into two cells, we invoke the splitCell() function with \a numRows
///         and \a numCols = 1.
///         \snippet textdocument-texttable/main.cpp 1
/// 
///     \row
///         \li \inlineimage texttable-split.png Split Table
///         \li This results in the original table.
///     \endtable
/// 
///     \sa QTextTableFormat
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TextTable : TextFrame {
    ///     \fn void QTextTable::resize(int rows, int columns)
    /// 
    ///     Resizes the table to contain the required number of \a rows and \a columns.
    /// 
    ///     \sa insertRows(), insertColumns(), removeRows(), removeColumns()
    resize(rows: i32, cols: i32),
    ///     \fn void QTextTable::insertRows(int index, int rows)
    /// 
    ///     Inserts a number of \a rows before the row with the specified \a index.
    /// 
    ///     \sa resize(), insertColumns(), removeRows(), removeColumns(), appendRows(), appendColumns()
    insert_rows(pos: i32, num: i32),
    ///     \fn void QTextTable::insertColumns(int index, int columns)
    /// 
    ///     Inserts a number of \a columns before the column with the specified \a index.
    /// 
    ///     \sa insertRows(), resize(), removeRows(), removeColumns(), appendRows(), appendColumns()
    insert_columns(pos: i32, num: i32),
    ///     \since 4.5
    ///     Appends \a count rows at the bottom of the table.
    /// 
    ///     \sa insertColumns(), insertRows(), resize(), removeRows(), removeColumns(), appendColumns()
    append_rows(count: i32),
    ///     \since 4.5
    ///     Appends \a count columns at the right side of the table.
    /// 
    ///     \sa insertColumns(), insertRows(), resize(), removeRows(), removeColumns(), appendRows()
    append_columns(count: i32),
    ///     \fn void QTextTable::removeRows(int index, int rows)
    /// 
    ///     Removes a number of \a rows starting with the row at the specified \a index.
    /// 
    ///     \sa insertRows(), insertColumns(), resize(), removeColumns(), appendRows(), appendColumns()
    remove_rows(pos: i32, num: i32),
    ///     \fn void QTextTable::removeColumns(int index, int columns)
    /// 
    ///     Removes a number of \a columns starting with the column at the specified
    ///     \a index.
    /// 
    ///     \sa insertRows(), insertColumns(), removeRows(), resize(), appendRows(), appendColumns()
    remove_columns(pos: i32, num: i32),
    ///     \overload
    ///     \since 4.1
    /// 
    ///     Merges the cells selected by the provided \a cursor.
    /// 
    ///     \sa splitCell()
    merge_cells(row: i32, col: i32, num_rows: i32, num_cols: i32),
    ///     \overload
    ///     \since 4.1
    /// 
    ///     Merges the cells selected by the provided \a cursor.
    /// 
    ///     \sa splitCell()
    merge_cells(cursor: &TextCursorType),
    ///     \since 4.1
    /// 
    ///     Splits the specified cell at \a row and \a column into an array of multiple
    ///     cells with dimensions specified by \a numRows and \a numCols.
    /// 
    ///     \note It is only possible to split cells that span multiple rows or columns, such as rows
    ///     that have been merged using mergeCells().
    /// 
    ///     \sa mergeCells()
    split_cell(row: i32, col: i32, num_rows: i32, num_cols: i32),
    ///     Returns the number of rows in the table.
    /// 
    ///     \sa columns()
    rows() -> i32,
    ///     Returns the number of columns in the table.
    /// 
    ///     \sa rows()
    columns() -> i32,
    ///     \fn QTextTableCell QTextTable::cellAt(const QTextCursor &cursor) const
    /// 
    ///     \overload
    /// 
    ///     Returns the table cell containing the given \a cursor.
    cell_at(row: i32, col: i32) -> TextTableCell,
    ///     \fn QTextTableCell QTextTable::cellAt(const QTextCursor &cursor) const
    /// 
    ///     \overload
    /// 
    ///     Returns the table cell containing the given \a cursor.
    cell_at(position: i32) -> TextTableCell,
    ///     \fn QTextTableCell QTextTable::cellAt(const QTextCursor &cursor) const
    /// 
    ///     \overload
    /// 
    ///     Returns the table cell containing the given \a cursor.
    cell_at(c: &TextCursorType) -> TextTableCell,
    ///     \fn QTextCursor QTextTable::rowStart(const QTextCursor &cursor) const
    /// 
    ///     Returns a cursor pointing to the start of the row that contains the
    ///     given \a cursor.
    /// 
    ///     \sa rowEnd()
    row_start(c: &TextCursorType) -> TextCursor,
    ///     \fn QTextCursor QTextTable::rowEnd(const QTextCursor &cursor) const
    /// 
    ///     Returns a cursor pointing to the end of the row that contains the given
    ///     \a cursor.
    /// 
    ///     \sa rowStart()
    row_end(c: &TextCursorType) -> TextCursor,
    ///     \fn void QTextTable::setFormat(const QTextTableFormat &format)
    /// 
    ///     Sets the table's \a format.
    /// 
    ///     \sa format()
    set_format(format: &TextTableFormatType),
    format() -> TextTableFormat,
}

// vim: syntax=rust expandtab ts=4 sw=4
