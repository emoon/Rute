///     \class QPixmapCache
///     \inmodule QtGui
/// 
///     \brief The QPixmapCache class provides an application-wide cache for pixmaps.
/// 
///     This class is a tool for optimized drawing with QPixmap. You can
///     use it to store temporary pixmaps that are expensive to generate
///     without using more storage space than cacheLimit(). Use insert()
///     to insert pixmaps, find() to find them, and clear() to empty the
///     cache.
/// 
///     QPixmapCache contains no member data, only static functions to
///     access the global pixmap cache. It creates an internal QCache
///     object for caching the pixmaps.
/// 
///     The cache associates a pixmap with a user-provided string as a key,
///     or with a QPixmapCache::Key that the cache generates.
///     Using QPixmapCache::Key for keys is faster than using strings. The string API is
///     very convenient for complex keys but the QPixmapCache::Key API will be very
///     efficient and convenient for a one-to-one object-to-pixmap mapping - in
///     this case, you can store the keys as members of an object.
/// 
///     If two pixmaps are inserted into the cache using equal keys then the
///     last pixmap will replace the first pixmap in the cache. This follows the
///     behavior of the QHash and QCache classes.
/// 
///     The cache becomes full when the total size of all pixmaps in the
///     cache exceeds cacheLimit(). The initial cache limit is 10240 KB (10 MB);
///     you can change this by calling setCacheLimit() with the required value.
///     A pixmap takes roughly (\e{width} * \e{height} * \e{depth})/8 bytes of
///     memory.
/// 
///     The \e{Qt Quarterly} article
///     \l{http://doc.qt.io/archives/qq/qq12-qpixmapcache.html}{Optimizing
///     with QPixmapCache} explains how to use QPixmapCache to speed up
///     applications by caching the results of painting.
/// 
///     \sa QCache, QPixmap
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct PixmapCache {
    ///     Returns the cache limit (in kilobytes).
    /// 
    ///     The default cache limit is 10240 KB.
    /// 
    ///     \sa setCacheLimit()
    [static] cache_limit() -> i32,
    ///     Sets the cache limit to \a n kilobytes.
    /// 
    ///     The default setting is 10240 KB.
    /// 
    ///     \sa cacheLimit()
    [static] set_cache_limit(arg0: i32),
    ///     Looks for a cached pixmap associated with the given \a key in the cache.
    ///     If the pixmap is found, the function sets \a pixmap to that pixmap and
    ///     returns \c true; otherwise it leaves \a pixmap alone and returns \c false. If
    ///     the pixmap is not found, it means that the \a key is no longer valid,
    ///     so it will be released for the next insertion.
    /// 
    ///     \since 4.6
    [static] find(key: String) -> Pixmap?,
    ///     Looks for a cached pixmap associated with the given \a key in the cache.
    ///     If the pixmap is found, the function sets \a pixmap to that pixmap and
    ///     returns \c true; otherwise it leaves \a pixmap alone and returns \c false. If
    ///     the pixmap is not found, it means that the \a key is no longer valid,
    ///     so it will be released for the next insertion.
    /// 
    ///     \since 4.6
    [static] find(key: String, pixmap: &PixmapType) -> bool,
    ///     Looks for a cached pixmap associated with the given \a key in the cache.
    ///     If the pixmap is found, the function sets \a pixmap to that pixmap and
    ///     returns \c true; otherwise it leaves \a pixmap alone and returns \c false. If
    ///     the pixmap is not found, it means that the \a key is no longer valid,
    ///     so it will be released for the next insertion.
    /// 
    ///     \since 4.6
    [static] find(key: String, pixmap: *PixmapType) -> bool,
    ///     Looks for a cached pixmap associated with the given \a key in the cache.
    ///     If the pixmap is found, the function sets \a pixmap to that pixmap and
    ///     returns \c true; otherwise it leaves \a pixmap alone and returns \c false. If
    ///     the pixmap is not found, it means that the \a key is no longer valid,
    ///     so it will be released for the next insertion.
    /// 
    ///     \since 4.6
    [static] find(key: onst QPixmapCache::Key &, pixmap: *PixmapType) -> bool,
    ///     Inserts a copy of the given \a pixmap into the cache and returns a key
    ///     that can be used to retrieve it.
    /// 
    ///     When a pixmap is inserted and the cache is about to exceed its
    ///     limit, it removes pixmaps until there is enough room for the
    ///     pixmap to be inserted.
    /// 
    ///     The oldest pixmaps (least recently accessed in the cache) are
    ///     deleted when more space is needed.
    /// 
    ///     \sa setCacheLimit(), replace()
    /// 
    ///     \since 4.6
    [static] insert(key: String, pixmap: &PixmapType) -> bool,
    ///     Inserts a copy of the given \a pixmap into the cache and returns a key
    ///     that can be used to retrieve it.
    /// 
    ///     When a pixmap is inserted and the cache is about to exceed its
    ///     limit, it removes pixmaps until there is enough room for the
    ///     pixmap to be inserted.
    /// 
    ///     The oldest pixmaps (least recently accessed in the cache) are
    ///     deleted when more space is needed.
    /// 
    ///     \sa setCacheLimit(), replace()
    /// 
    ///     \since 4.6
    [static] insert(pixmap: &PixmapType) -> PixmapCache::Key,
    ///     Replaces the pixmap associated with the given \a key with the \a pixmap
    ///     specified. Returns \c true if the \a pixmap has been correctly inserted into
    ///     the cache; otherwise returns \c false.
    /// 
    ///     \sa setCacheLimit(), insert()
    /// 
    ///     \since 4.6
    [static] replace(key: onst QPixmapCache::Key &, pixmap: &PixmapType) -> bool,
    ///   Removes the pixmap associated with \a key from the cache and releases
    ///   the key for a future insertion.
    /// 
    ///   \since 4.6
    [static] remove(key: String),
    ///   Removes the pixmap associated with \a key from the cache and releases
    ///   the key for a future insertion.
    /// 
    ///   \since 4.6
    [static] remove(key: onst QPixmapCache::Key &),
    ///     Removes all pixmaps from the cache.
    [static] clear(),
}

// vim: syntax=rust expandtab ts=4 sw=4
