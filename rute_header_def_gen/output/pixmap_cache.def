/// 
/// This class is a tool for optimized drawing with QPixmap. You can
/// use it to store temporary pixmaps that are expensive to generate
/// without using more storage space than cacheLimit(). Use insert()
/// to insert pixmaps, find() to find them, and clear() to empty the
/// cache.
/// 
/// QPixmapCache contains no member data, only static functions to
/// access the global pixmap cache. It creates an internal QCache
/// object for caching the pixmaps.
/// 
/// The cache associates a pixmap with a user-provided string as a key,
/// or with a QPixmapCache::Key that the cache generates.
/// Using QPixmapCache::Key for keys is faster than using strings. The string API is
/// very convenient for complex keys but the QPixmapCache::Key API will be very
/// efficient and convenient for a one-to-one object-to-pixmap mapping - in
/// this case, you can store the keys as members of an object.
/// 
/// If two pixmaps are inserted into the cache using equal keys then the
/// last pixmap will replace the first pixmap in the cache. This follows the
/// behavior of the QHash and QCache classes.
/// 
/// The cache becomes full when the total size of all pixmaps in the
/// cache exceeds cacheLimit(). The initial cache limit is 10240 KB (10 MB);
/// you can change this by calling setCacheLimit() with the required value.
/// A pixmap takes roughly ( *width* * *height* * *depth* )/8 bytes of
/// memory.
/// 
/// The *Qt Quarterly* article
/// [Optimizing
/// with QPixmapCache](http://doc.qt.io/archives/qq/qq12-qpixmapcache.html)
/// explains how to use QPixmapCache to speed up
/// applications by caching the results of painting.
/// 
/// **See also:** QCache
/// QPixmap
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct PixmapCache {
    /// 
    /// Returns the cache limit (in kilobytes).
    /// 
    /// The default cache limit is 10240 KB.
    /// 
    /// **See also:** setCacheLimit()
    [static] cache_limit() -> i32,
    /// 
    /// Sets the cache limit to *n* kilobytes.
    /// 
    /// The default setting is 10240 KB.
    /// 
    /// **See also:** cacheLimit()
    [static] set_cache_limit(arg0: i32),
    /// 
    /// **Overloads**
    /// Returns the pixmap associated with the *key* in the cache, or
    /// null if there is no such pixmap.
    /// 
    /// **Warning**: If valid, you should copy the pixmap immediately (this is
    /// fast). Subsequent insertions into the cache could cause the
    /// pointer to become invalid. For this reason, we recommend you use
    /// bool find(const QString&, QPixmap*) instead.
    /// 
    /// Example:
    /// 
    /// Use bool find(const QString&, QPixmap*) instead.
    /// 
    /// Looks for a cached pixmap associated with the given *key* in the cache.
    /// If the pixmap is found, the function sets *pixmap* to that pixmap and
    /// returns `true;` otherwise it leaves *pixmap* alone and returns `false.`
    /// 
    /// Example:
    /// 
    /// Looks for a cached pixmap associated with the given *key* in the cache.
    /// If the pixmap is found, the function sets *pixmap* to that pixmap and
    /// returns `true;` otherwise it leaves *pixmap* alone and returns `false.` If
    /// the pixmap is not found, it means that the *key* is no longer valid,
    /// so it will be released for the next insertion.
    /// 
    [static] find(key: String) -> Pixmap?,
    /// 
    /// **Overloads**
    /// Returns the pixmap associated with the *key* in the cache, or
    /// null if there is no such pixmap.
    /// 
    /// **Warning**: If valid, you should copy the pixmap immediately (this is
    /// fast). Subsequent insertions into the cache could cause the
    /// pointer to become invalid. For this reason, we recommend you use
    /// bool find(const QString&, QPixmap*) instead.
    /// 
    /// Example:
    /// 
    /// Use bool find(const QString&, QPixmap*) instead.
    /// 
    /// Looks for a cached pixmap associated with the given *key* in the cache.
    /// If the pixmap is found, the function sets *pixmap* to that pixmap and
    /// returns `true;` otherwise it leaves *pixmap* alone and returns `false.`
    /// 
    /// Example:
    /// 
    /// Looks for a cached pixmap associated with the given *key* in the cache.
    /// If the pixmap is found, the function sets *pixmap* to that pixmap and
    /// returns `true;` otherwise it leaves *pixmap* alone and returns `false.` If
    /// the pixmap is not found, it means that the *key* is no longer valid,
    /// so it will be released for the next insertion.
    /// 
    [static] find(key: String, pixmap: &PixmapType) -> bool,
    /// 
    /// **Overloads**
    /// Returns the pixmap associated with the *key* in the cache, or
    /// null if there is no such pixmap.
    /// 
    /// **Warning**: If valid, you should copy the pixmap immediately (this is
    /// fast). Subsequent insertions into the cache could cause the
    /// pointer to become invalid. For this reason, we recommend you use
    /// bool find(const QString&, QPixmap*) instead.
    /// 
    /// Example:
    /// 
    /// Use bool find(const QString&, QPixmap*) instead.
    /// 
    /// Looks for a cached pixmap associated with the given *key* in the cache.
    /// If the pixmap is found, the function sets *pixmap* to that pixmap and
    /// returns `true;` otherwise it leaves *pixmap* alone and returns `false.`
    /// 
    /// Example:
    /// 
    /// Looks for a cached pixmap associated with the given *key* in the cache.
    /// If the pixmap is found, the function sets *pixmap* to that pixmap and
    /// returns `true;` otherwise it leaves *pixmap* alone and returns `false.` If
    /// the pixmap is not found, it means that the *key* is no longer valid,
    /// so it will be released for the next insertion.
    /// 
    [static] find(key: String, pixmap: *PixmapType) -> bool,
    /// 
    /// **Overloads**
    /// Returns the pixmap associated with the *key* in the cache, or
    /// null if there is no such pixmap.
    /// 
    /// **Warning**: If valid, you should copy the pixmap immediately (this is
    /// fast). Subsequent insertions into the cache could cause the
    /// pointer to become invalid. For this reason, we recommend you use
    /// bool find(const QString&, QPixmap*) instead.
    /// 
    /// Example:
    /// 
    /// Use bool find(const QString&, QPixmap*) instead.
    /// 
    /// Looks for a cached pixmap associated with the given *key* in the cache.
    /// If the pixmap is found, the function sets *pixmap* to that pixmap and
    /// returns `true;` otherwise it leaves *pixmap* alone and returns `false.`
    /// 
    /// Example:
    /// 
    /// Looks for a cached pixmap associated with the given *key* in the cache.
    /// If the pixmap is found, the function sets *pixmap* to that pixmap and
    /// returns `true;` otherwise it leaves *pixmap* alone and returns `false.` If
    /// the pixmap is not found, it means that the *key* is no longer valid,
    /// so it will be released for the next insertion.
    /// 
    [static] find(key: onst QPixmapCache::Key &, pixmap: *PixmapType) -> bool,
    /// 
    /// Inserts a copy of the pixmap *pixmap* associated with the *key* into
    /// the cache.
    /// 
    /// All pixmaps inserted by the Qt library have a key starting with
    /// , so your own pixmap keys should never begin .
    /// 
    /// When a pixmap is inserted and the cache is about to exceed its
    /// limit, it removes pixmaps until there is enough room for the
    /// pixmap to be inserted.
    /// 
    /// The oldest pixmaps (least recently accessed in the cache) are
    /// deleted when more space is needed.
    /// 
    /// The function returns `true` if the object was inserted into the
    /// cache; otherwise it returns `false.`
    /// 
    /// **See also:** setCacheLimit()
    /// 
    /// Inserts a copy of the given *pixmap* into the cache and returns a key
    /// that can be used to retrieve it.
    /// 
    /// When a pixmap is inserted and the cache is about to exceed its
    /// limit, it removes pixmaps until there is enough room for the
    /// pixmap to be inserted.
    /// 
    /// The oldest pixmaps (least recently accessed in the cache) are
    /// deleted when more space is needed.
    /// 
    /// **See also:** setCacheLimit()
    /// replace()
    /// 
    [static] insert(key: String, pixmap: &PixmapType) -> bool,
    /// 
    /// Inserts a copy of the pixmap *pixmap* associated with the *key* into
    /// the cache.
    /// 
    /// All pixmaps inserted by the Qt library have a key starting with
    /// , so your own pixmap keys should never begin .
    /// 
    /// When a pixmap is inserted and the cache is about to exceed its
    /// limit, it removes pixmaps until there is enough room for the
    /// pixmap to be inserted.
    /// 
    /// The oldest pixmaps (least recently accessed in the cache) are
    /// deleted when more space is needed.
    /// 
    /// The function returns `true` if the object was inserted into the
    /// cache; otherwise it returns `false.`
    /// 
    /// **See also:** setCacheLimit()
    /// 
    /// Inserts a copy of the given *pixmap* into the cache and returns a key
    /// that can be used to retrieve it.
    /// 
    /// When a pixmap is inserted and the cache is about to exceed its
    /// limit, it removes pixmaps until there is enough room for the
    /// pixmap to be inserted.
    /// 
    /// The oldest pixmaps (least recently accessed in the cache) are
    /// deleted when more space is needed.
    /// 
    /// **See also:** setCacheLimit()
    /// replace()
    /// 
    [static] insert(pixmap: &PixmapType) -> PixmapCache::Key,
    /// 
    /// Replaces the pixmap associated with the given *key* with the *pixmap*
    /// specified. Returns `true` if the *pixmap* has been correctly inserted into
    /// the cache; otherwise returns `false.`
    /// 
    /// **See also:** setCacheLimit()
    /// insert()
    /// 
    [static] replace(key: onst QPixmapCache::Key &, pixmap: &PixmapType) -> bool,
    /// 
    /// Removes the pixmap associated with *key* from the cache.
    /// 
    /// Removes the pixmap associated with *key* from the cache and releases
    /// the key for a future insertion.
    /// 
    [static] remove(key: String),
    /// 
    /// Removes the pixmap associated with *key* from the cache.
    /// 
    /// Removes the pixmap associated with *key* from the cache and releases
    /// the key for a future insertion.
    /// 
    [static] remove(key: onst QPixmapCache::Key &),
    /// 
    /// Removes all pixmaps from the cache.
    [static] clear(),
}

// vim: syntax=rust expandtab ts=4 sw=4
