
struct MetaType {
    register_type(type_name: &char, deleter: Deleter, creator: Creator) -> i32,
    register_type(type_name: &char, deleter: Deleter, creator: Creator, destructor: Destructor, constructor: Constructor, size: i32, flags: MetaType::TypeFlags, meta_object: &MetaObjectType) -> i32,
    unregister_type(type: i32) -> bool,
    register_normalized_type(normalized_type_name: onst ::QByteArray &, deleter: Deleter, creator: Creator, destructor: Destructor, constructor: Constructor, size: i32, flags: MetaType::TypeFlags, meta_object: &MetaObjectType) -> i32,
    register_normalized_type(normalized_type_name: onst ::QByteArray &, destructor: Destructor, constructor: Constructor, size: i32, flags: MetaType::TypeFlags, meta_object: &MetaObjectType) -> i32,
    register_typedef(type_name: &char, alias_id: i32) -> i32,
    register_normalized_typedef(normalized_type_name: onst ::QByteArray &, alias_id: i32) -> i32,
    type(type_name: &char) -> i32,
    type(type_name: onst ::QByteArray &) -> i32,
    type_name(type: i32) -> &char,
    size_of(type: i32) -> i32,
    type_flags(type: i32) -> TypeFlags,
    is_registered(type: i32) -> bool,
    create(type: i32, copy: &void),
    save(stream: &DataStreamType, type: i32, data: &void) -> bool,
    load(stream: &DataStreamType, type: i32, data: &void) -> bool,
    is_valid() -> bool,
    is_registered() -> bool,
    size_of() -> i32,
    flags() -> TypeFlags,
    create(copy: &void),
    has_registered_comparators(type_id: i32) -> bool,
    convert(from: &void, from_type_id: i32, to: &void, to_type_id: i32) -> bool,
    compare(lhs: &void, rhs: &void, type_id: i32, result: &i32) -> bool,
    equals(lhs: &void, rhs: &void, type_id: i32, result: &i32) -> bool,
    has_registered_converter_function(from_type_id: i32, to_type_id: i32) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
