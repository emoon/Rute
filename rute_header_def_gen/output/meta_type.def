enum ExtensionFlag {
    NoExtensionFlags,
    CreateEx,
    DestroyEx,
    ConstructEx,
    DestructEx,
    NameEx,
    SizeEx,
    CtorEx,
    DtorEx,
    FlagsEx,
    MetaObjectEx,
}

enum Type {
    Void,
    Bool,
    Int,
    UInt,
    LongLong,
    ULongLong,
    Double,
    Long,
    Short,
    Char,
    ULong,
    UShort,
    UChar,
    Float,
    SChar,
    Nullptr,
    VoidStar,
    QChar,
    QString,
    QStringList,
    QByteArray,
    QBitArray,
    QDate,
    QTime,
    QDateTime,
    QUrl,
    QLocale,
    QRect,
    QRectF,
    QSize,
    QSizeF,
    QLine,
    QLineF,
    QPoint,
    QPointF,
    QRegExp,
    QEasingCurve,
    QUuid,
    QVariant,
    QModelIndex,
    QRegularExpression,
    QJsonValue,
    QJsonObject,
    QJsonArray,
    QJsonDocument,
    QPersistentModelIndex,
    QObjectStar,
    QVariantMap,
    QVariantList,
    QVariantHash,
    QByteArrayList,
    QFont,
    QPixmap,
    QBrush,
    QColor,
    QPalette,
    QIcon,
    QImage,
    QPolygon,
    QRegion,
    QBitmap,
    QCursor,
    QKeySequence,
    QPen,
    QTextLength,
    QTextFormat,
    QMatrix,
    QTransform,
    QMatrix4x4,
    QVector2D,
    QVector3D,
    QVector4D,
    QQuaternion,
    QPolygonF,
    QSizePolicy,
    FirstCoreType,
    LastCoreType,
    FirstGuiType,
    LastGuiType,
    FirstWidgetsType,
    LastWidgetsType,
    HighestInternalId,
    QReal,
    UnknownType,
    User,
}

enum TypeFlag {
    NeedsConstruction,
    NeedsDestruction,
    MovableType,
    PointerToQObject,
    IsEnumeration,
    SharedPointerToQObject,
    WeakPointerToQObject,
    TrackingPointerToQObject,
    WasDeclaredAsMetaType,
    IsGadget,
    PointerToGadget,
}


struct MetaType {
    [static] register_type(type_name: &char, deleter: Deleter, creator: Creator) -> i32,
    [static] register_type(type_name: &char, deleter: Deleter, creator: Creator, destructor: Destructor, constructor: Constructor, size: i32, flags: MetaType::TypeFlags, meta_object: &MetaObjectType) -> i32,
    [static] unregister_type(type: i32) -> bool,
    [static] register_normalized_type(normalized_type_name: onst ::QByteArray &, deleter: Deleter, creator: Creator, destructor: Destructor, constructor: Constructor, size: i32, flags: MetaType::TypeFlags, meta_object: &MetaObjectType) -> i32,
    [static] register_normalized_type(normalized_type_name: onst ::QByteArray &, destructor: Destructor, constructor: Constructor, size: i32, flags: MetaType::TypeFlags, meta_object: &MetaObjectType) -> i32,
    [static] register_typedef(type_name: &char, alias_id: i32) -> i32,
    [static] register_normalized_typedef(normalized_type_name: onst ::QByteArray &, alias_id: i32) -> i32,
    [static] type(type_name: &char) -> i32,
    [static] type(type_name: onst ::QByteArray &) -> i32,
    [static] type_name(type: i32) -> char?,
    [static] size_of(type: i32) -> i32,
    [static] type_flags(type: i32) -> TypeFlags,
    [static] is_registered(type: i32) -> bool,
    [static] create(type: i32, copy: &void),
    [static] save(stream: &DataStreamType, type: i32, data: &void) -> bool,
    [static] load(stream: &DataStreamType, type: i32, data: &void) -> bool,
    is_valid() -> bool,
    is_registered() -> bool,
    size_of() -> i32,
    flags() -> TypeFlags,
    create(copy: &void),
    [static] has_registered_comparators(type_id: i32) -> bool,
    [static] convert(from: &void, from_type_id: i32, to: &void, to_type_id: i32) -> bool,
    [static] compare(lhs: &void, rhs: &void, type_id: i32, result: &i32) -> bool,
    [static] equals(lhs: &void, rhs: &void, type_id: i32, result: &i32) -> bool,
    [static] has_registered_converter_function(from_type_id: i32, to_type_id: i32) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
