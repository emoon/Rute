
struct MetaType {
    register_type(&char type_name, Deleter deleter, Creator creator) -> i32,
    register_type(&char type_name, Deleter deleter, Creator creator, Destructor destructor, Constructor constructor, i32 size, MetaType::TypeFlags flags, &MetaObjectType meta_object) -> i32,
    unregister_type(i32 type) -> bool,
    register_normalized_type(onst ::QByteArray & normalized_type_name, Deleter deleter, Creator creator, Destructor destructor, Constructor constructor, i32 size, MetaType::TypeFlags flags, &MetaObjectType meta_object) -> i32,
    register_normalized_type(onst ::QByteArray & normalized_type_name, Destructor destructor, Constructor constructor, i32 size, MetaType::TypeFlags flags, &MetaObjectType meta_object) -> i32,
    register_typedef(&char type_name, i32 alias_id) -> i32,
    register_normalized_typedef(onst ::QByteArray & normalized_type_name, i32 alias_id) -> i32,
    type(&char type_name) -> i32,
    type(onst ::QByteArray & type_name) -> i32,
    type_name(i32 type) -> &char,
    size_of(i32 type) -> i32,
    type_flags(i32 type) -> TypeFlags,
    is_registered(i32 type) -> bool,
    create(i32 type, &void copy),
    save(&DataStreamType stream, i32 type, &void data) -> bool,
    load(&DataStreamType stream, i32 type, &void data) -> bool,
    is_valid() -> bool,
    is_registered() -> bool,
    size_of() -> i32,
    flags() -> TypeFlags,
    create(&void copy),
    has_registered_comparators(i32 type_id) -> bool,
    convert(&void from, i32 from_type_id, &void to, i32 to_type_id) -> bool,
    compare(&void lhs, &void rhs, i32 type_id, &i32 result) -> bool,
    equals(&void lhs, &void rhs, i32 type_id, &i32 result) -> bool,
    has_registered_converter_function(i32 from_type_id, i32 to_type_id) -> bool,
    type_info(i32 type) -> MetaTypeType,
    is_extended(onst QMetaType::ExtensionFlag flag) -> bool,
    ctor(&MetaTypeInterfaceType info),
    dtor(),
    size_extended() -> uint,
    flags_extended() -> MetaType::TypeFlags,
    create_extended(&void copy),
    register_comparator_function(onst QtPrivate::AbstractComparatorFunction * f, i32 type) -> bool,
    register_converter_function(onst QtPrivate::AbstractConverterFunction * f, i32 from, i32 to) -> bool,
    unregister_converter_function(i32 from, i32 to),
}

