/// 
/// The class is used as a helper to marshall types in QVariant and
/// in queued signals and slots connections. It associates a type
/// name to a type so that it can be created and destructed
/// dynamically at run-time. Declare new types with Q_DECLARE_METATYPE()
/// to make them available to QVariant and other template-based functions.
/// Call qRegisterMetaType() to make types available to non-template based
/// functions, such as the queued signal and slot connections.
/// 
/// Any class or struct that has a public default
/// constructor, a public copy constructor, and a public destructor
/// can be registered.
/// 
/// The following code allocates and destructs an instance of
/// `MyClass` :
/// 
/// If we want the stream operators `operator<<()` and `operator>>()` to work on QVariant objects that store custom types,
/// the custom type must provide `operator<<()` and `operator>>()`
/// operators.
/// 
/// **See also:** [`q_declare_metatype()`]
/// [`Variant::set_value`]
/// [`Variant::value`]
/// [`Variant::from_value`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct MetaType {
    [static] register_type(type_name: *char, deleter: MetaType::Deleter, creator: MetaType::Creator) -> i32,
    [org_name(registerType)]
    [static] register_type_2(type_name: *char, deleter: MetaType::Deleter, creator: MetaType::Creator, destructor: MetaType::Destructor, constructor: MetaType::Constructor, size: i32, flags: MetaType::TypeFlags, meta_object: *MetaObjectType) -> i32,
    [static] unregister_type(type: i32) -> bool,
    [static] register_normalized_type(normalized_type_name: onst ::QByteArray &, deleter: MetaType::Deleter, creator: MetaType::Creator, destructor: MetaType::Destructor, constructor: MetaType::Constructor, size: i32, flags: MetaType::TypeFlags, meta_object: *MetaObjectType) -> i32,
    [org_name(registerNormalizedType)]
    [static] register_normalized_type_2(normalized_type_name: onst ::QByteArray &, destructor: MetaType::Destructor, constructor: MetaType::Constructor, size: i32, flags: MetaType::TypeFlags, meta_object: *MetaObjectType) -> i32,
    [static] register_typedef(type_name: *char, alias_id: i32) -> i32,
    [static] register_normalized_typedef(normalized_type_name: onst ::QByteArray &, alias_id: i32) -> i32,
    /// 
    /// Returns the type name associated with the given *typeId,* or a null
    /// pointer if no matching type was found. The returned pointer must not be
    /// deleted.
    /// 
    /// **See also:** [`type()`]
    /// [`is_registered()`]
    /// Type
    /// 
    /// Returns a handle to the type called *typeName,* or QMetaType::UnknownType if there is
    /// no such type.
    /// 
    /// **See also:** [`is_registered()`]
    /// [`type_name()`]
    /// Type
    /// 
    /// **Overloads**
    /// Returns a handle to the type called *typeName,* or 0 if there is
    /// no such type.
    /// 
    /// **See also:** [`is_registered()`]
    /// [`type_name()`]
    /// 
    /// Returns flags of the given *type.*
    /// 
    /// **See also:** [`MetaType::type_flags()`]
    [static] type(type_name: *char) -> i32,
    /// 
    /// Returns the type name associated with the given *typeId,* or a null
    /// pointer if no matching type was found. The returned pointer must not be
    /// deleted.
    /// 
    /// **See also:** [`type()`]
    /// [`is_registered()`]
    /// Type
    /// 
    /// Returns a handle to the type called *typeName,* or QMetaType::UnknownType if there is
    /// no such type.
    /// 
    /// **See also:** [`is_registered()`]
    /// [`type_name()`]
    /// Type
    /// 
    /// **Overloads**
    /// Returns a handle to the type called *typeName,* or 0 if there is
    /// no such type.
    /// 
    /// **See also:** [`is_registered()`]
    /// [`type_name()`]
    /// 
    /// Returns flags of the given *type.*
    /// 
    /// **See also:** [`MetaType::type_flags()`]
    [org_name(type)]
    [static] type_2(type_name: onst ::QByteArray &) -> i32,
    /// 
    /// Returns the type name associated with the given *typeId,* or a null
    /// pointer if no matching type was found. The returned pointer must not be
    /// deleted.
    /// 
    /// **See also:** [`type()`]
    /// [`is_registered()`]
    /// Type
    [static] type_name(type: i32) -> char?,
    /// 
    /// Returns the size of the type in bytes (i.e. sizeof(T),
    /// where T is the actual type for which this QMetaType instance
    /// was constructed for).
    /// 
    /// This function is typically used together with construct()
    /// to perform low-level management of the memory used by a type.
    /// 
    /// **See also:** [`MetaType::construct`]
    /// [`MetaType::size_of`]
    /// 
    /// Returns the size of the given *type* in bytes (i.e. sizeof(T),
    /// where T is the actual type identified by the *type* argument).
    /// 
    /// This function is typically used together with construct()
    /// to perform low-level management of the memory used by a type.
    /// 
    /// **See also:** [`construct()`]
    [static] size_of(type: i32) -> i32,
    /// 
    /// Returns flags of the given *type.*
    /// 
    /// **See also:** [`MetaType::type_flags()`]
    [static] type_flags(type: i32) -> MetaType::TypeFlags,
    /// 
    /// Returns `true` if this QMetaType object contains valid
    /// information about a type, false otherwise.
    /// 
    /// Returns `true` if the datatype with ID *type* is registered;
    /// otherwise returns `false.`
    /// 
    /// **See also:** [`type()`]
    /// [`type_name()`]
    /// Type
    [static] is_registered(type: i32) -> bool,
    /// 
    /// Returns a copy of *copy,* assuming it is of the type that this
    /// QMetaType instance was created for. If *copy* is null, creates
    /// a default constructed instance.
    /// 
    /// **See also:** [`MetaType::destroy`]
    /// 
    /// Returns a copy of *copy,* assuming it is of type *type.* If *copy* is zero, creates a default constructed instance.
    /// 
    /// **See also:** [`destroy()`]
    /// [`is_registered()`]
    /// Type
    [static] create(type: i32, copy: *void),
    /// 
    /// Writes the object pointed to by *data* with the ID *type* to
    /// the given *stream.* Returns `true` if the object is saved
    /// successfully; otherwise returns `false.`
    /// 
    /// The type must have been registered with qRegisterMetaType() and
    /// qRegisterMetaTypeStreamOperators() beforehand.
    /// 
    /// Normally, you should not need to call this function directly.
    /// Instead, use QVariant's `operator<<(),` which relies on save()
    /// to stream custom types.
    /// 
    /// **See also:** [`load()`]
    /// [`q_register_meta_type_stream_operators()`]
    [static] save(stream: &DataStreamType, type: i32, data: *void) -> bool,
    /// 
    /// Reads the object of the specified *type* from the given *stream* into *data.* Returns `true` if the object is loaded
    /// successfully; otherwise returns `false.`
    /// 
    /// The type must have been registered with qRegisterMetaType() and
    /// qRegisterMetaTypeStreamOperators() beforehand.
    /// 
    /// Normally, you should not need to call this function directly.
    /// Instead, use QVariant's `operator>>(),` which relies on load()
    /// to stream custom types.
    /// 
    /// **See also:** [`save()`]
    /// [`q_register_meta_type_stream_operators()`]
    [static] load(stream: &DataStreamType, type: i32, data: *void) -> bool,
    /// 
    /// Returns `true` if this QMetaType object contains valid
    /// information about a type, false otherwise.
    is_valid() -> bool,
    /// 
    /// Returns `true` if this QMetaType object contains valid
    /// information about a type, false otherwise.
    /// 
    /// Returns `true` if the datatype with ID *type* is registered;
    /// otherwise returns `false.`
    /// 
    /// **See also:** [`type()`]
    /// [`type_name()`]
    /// Type
    [org_name(isRegistered)]
    is_registered_2() -> bool,
    /// 
    /// Returns the size of the type in bytes (i.e. sizeof(T),
    /// where T is the actual type for which this QMetaType instance
    /// was constructed for).
    /// 
    /// This function is typically used together with construct()
    /// to perform low-level management of the memory used by a type.
    /// 
    /// **See also:** [`MetaType::construct`]
    /// [`MetaType::size_of`]
    /// 
    /// Returns the size of the given *type* in bytes (i.e. sizeof(T),
    /// where T is the actual type identified by the *type* argument).
    /// 
    /// This function is typically used together with construct()
    /// to perform low-level management of the memory used by a type.
    /// 
    /// **See also:** [`construct()`]
    [org_name(sizeOf)]
    size_of_2() -> i32,
    /// 
    /// Returns flags of the type for which this QMetaType instance was constructed.
    /// 
    /// **See also:** [`MetaType::type_flags()`]
    /// [`MetaType::type_flags`]
    flags() -> MetaType::TypeFlags,
    /// 
    /// Returns a copy of *copy,* assuming it is of the type that this
    /// QMetaType instance was created for. If *copy* is null, creates
    /// a default constructed instance.
    /// 
    /// **See also:** [`MetaType::destroy`]
    /// 
    /// Returns a copy of *copy,* assuming it is of type *type.* If *copy* is zero, creates a default constructed instance.
    /// 
    /// **See also:** [`destroy()`]
    /// [`is_registered()`]
    /// Type
    [org_name(create)]
    create_2(copy: *void),
    /// 
    /// Returns `true,` if the meta type system has registered comparators for type T.
    /// 
    /// Returns `true,` if the meta type system has registered comparators for type id *typeId.*
    [static] has_registered_comparators(type_id: i32) -> bool,
    /// 
    /// Converts the object at *from* from *fromTypeId* to the preallocated space at *to*
    /// typed *toTypeId.* Returns `true,` if the conversion succeeded, otherwise false.
    [static] convert(from: *void, from_type_id: i32, to: *void, to_type_id: i32) -> bool,
    /// 
    /// Compares the objects at *lhs* and *rhs.* Both objects need to be of type *typeId.*
    /// *result* is set to less than, equal to or greater than zero, if *lhs* is less than, equal to
    /// or greater than *rhs.* Returns `true,` if the comparison succeeded, otherwise `false.`
    [static] compare(lhs: *void, rhs: *void, type_id: i32, result: *i32) -> bool,
    /// 
    /// Compares the objects at *lhs* and *rhs.* Both objects need to be of type *typeId.*
    /// *result* is set to zero, if *lhs* equals to rhs. Returns `true,` if the comparison
    /// succeeded, otherwise `false.`
    [static] equals(lhs: *void, rhs: *void, type_id: i32, result: *i32) -> bool,
    /// 
    /// Returns `true,` if the meta type system has a registered conversion from type From to type To.
    /// **Overloads**
    /// 
    /// Returns `true,` if the meta type system has a registered conversion from meta type id *fromTypeId*
    /// to *toTypeId*
    [static] has_registered_converter_function(from_type_id: i32, to_type_id: i32) -> bool,
}

[org_name(QMetaType)]
enum ExtensionFlag {
    NoExtensionFlags = 0,
    CreateEx = 1,
    DestroyEx = 2,
    ConstructEx = 4,
    DestructEx = 8,
    NameEx = 16,
    SizeEx = 32,
    CtorEx = 64,
    DtorEx = 128,
    FlagsEx = 256,
    MetaObjectEx = 512,
}

[org_name(QMetaType)]
enum Type {
    /// `void`
    Void = 43,
    /// `bool`
    Bool = 1,
    /// `int`
    Int = 2,
    /// `unsigned int`
    UInt = 3,
    /// LongLong
    LongLong = 4,
    /// ULongLong
    ULongLong = 5,
    /// `double`
    Double = 6,
    /// `long`
    Long = 32,
    /// `short`
    Short = 33,
    /// `char`
    Char = 34,
    /// `unsigned long`
    ULong = 35,
    /// `unsigned short`
    UShort = 36,
    /// `unsigned char`
    UChar = 37,
    /// `float`
    Float = 38,
    /// `signed char`
    SChar = 40,
    /// `std::nullptr_t`
    Nullptr = 51,
    /// `void *`
    VoidStar = 31,
    /// QChar
    QChar = 7,
    /// QString
    QString = 10,
    /// QStringList
    QStringList = 11,
    /// QByteArray
    QByteArray = 12,
    /// QBitArray
    QBitArray = 13,
    /// QDate
    QDate = 14,
    /// QTime
    QTime = 15,
    /// QDateTime
    QDateTime = 16,
    /// QUrl
    QUrl = 17,
    /// QLocale
    QLocale = 18,
    /// QRect
    QRect = 19,
    /// QRectF
    QRectF = 20,
    /// QSize
    QSize = 21,
    /// QSizeF
    QSizeF = 22,
    /// QLine
    QLine = 23,
    /// QLineF
    QLineF = 24,
    /// QPoint
    QPoint = 25,
    /// QPointF
    QPointF = 26,
    /// QRegExp
    QRegExp = 27,
    /// QEasingCurve
    QEasingCurve = 29,
    /// QUuid
    QUuid = 30,
    /// QVariant
    QVariant = 41,
    /// QRegularExpression
    QRegularExpression = 44,
    /// QJsonValue
    QJsonValue = 45,
    /// QJsonObject
    QJsonObject = 46,
    /// QJsonArray
    QJsonArray = 47,
    /// QJsonDocument
    QJsonDocument = 48,
    /// QModelIndex
    QModelIndex = 42,
    /// QPersistentModelIndex (since 5.5)
    QPersistentModelIndex = 50,
    /// QObject *
    QObjectStar = 39,
    /// QVariantMap
    QVariantMap = 8,
    /// QVariantList
    QVariantList = 9,
    /// QVariantHash
    QVariantHash = 28,
    /// QByteArrayList
    QByteArrayList = 49,
    /// QFont
    QFont = 64,
    /// QPixmap
    QPixmap = 65,
    /// QBrush
    QBrush = 66,
    /// QColor
    QColor = 67,
    /// QPalette
    QPalette = 68,
    /// QIcon
    QIcon = 69,
    /// QImage
    QImage = 70,
    /// QPolygon
    QPolygon = 71,
    /// QRegion
    QRegion = 72,
    /// QBitmap
    QBitmap = 73,
    /// QCursor
    QCursor = 74,
    /// QKeySequence
    QKeySequence = 75,
    /// QPen
    QPen = 76,
    /// QTextLength
    QTextLength = 77,
    /// QTextFormat
    QTextFormat = 78,
    /// QMatrix
    QMatrix = 79,
    /// QTransform
    QTransform = 80,
    /// QMatrix4x4
    QMatrix4x4 = 81,
    /// QVector2D
    QVector2D = 82,
    /// QVector3D
    QVector3D = 83,
    /// QVector4D
    QVector4D = 84,
    /// QQuaternion
    QQuaternion = 85,
    /// QPolygonF
    QPolygonF = 86,
    /// QSizePolicy
    QSizePolicy = 121,
    FirstCoreType = 1,
    LastCoreType = 51,
    FirstGuiType = 64,
    LastGuiType = 86,
    FirstWidgetsType = 121,
    LastWidgetsType = 121,
    HighestInternalId = 121,
    QReal = 6,
    /// This is an invalid type id. It is returned from QMetaType for types that are not registered
    UnknownType = 0,
    /// Base value for user types
    User = 1024,
}

[org_name(QMetaType)]
enum TypeFlag {
    /// This type has non-trivial constructors. If the flag is not set instances can be safely initialized with memset to 0.
    NeedsConstruction = 1,
    /// This type has a non-trivial destructor. If the flag is not set calls to the destructor are not necessary before discarding objects.
    NeedsDestruction = 2,
    /// An instance of a type having this attribute can be safely moved by memcpy.
    MovableType = 4,
    /// This type is a pointer to a derived of QObject
    PointerToQObject = 8,
    /// This type is an enumeration
    IsEnumeration = 16,
    SharedPointerToQObject = 32,
    WeakPointerToQObject = 64,
    TrackingPointerToQObject = 128,
    WasDeclaredAsMetaType = 256,
    IsGadget = 512,
    PointerToGadget = 1024,
}

// vim: syntax=rust expandtab ts=4 sw=4
