
struct ByteArray {
    swap(&ByteArrayType other),
    size() -> i32,
    is_empty() -> bool,
    resize(i32 size),
    fill(char c, i32 size) -> &ByteArrayType,
    capacity() -> i32,
    reserve(i32 size),
    squeeze(),
    data() -> &char,
    data() -> &char,
    const_data() -> &char,
    detach(),
    is_detached() -> bool,
    is_shared_with(&ByteArrayType other) -> bool,
    clear(),
    at(i32 i) -> char,
    front() -> char,
    front() -> ByteRefType,
    back() -> char,
    back() -> ByteRefType,
    index_of(char c, i32 from) -> i32,
    index_of(&char c, i32 from) -> i32,
    index_of(&ByteArrayType a, i32 from) -> i32,
    last_index_of(char c, i32 from) -> i32,
    last_index_of(&char c, i32 from) -> i32,
    last_index_of(&ByteArrayType a, i32 from) -> i32,
    contains(char c) -> bool,
    contains(&char a) -> bool,
    contains(&ByteArrayType a) -> bool,
    count(char c) -> i32,
    count(&char a) -> i32,
    count(&ByteArrayType a) -> i32,
    left(i32 len) -> ByteArrayType,
    right(i32 len) -> ByteArrayType,
    mid(i32 index, i32 len) -> ByteArrayType,
    chopped(i32 len) -> ByteArrayType,
    starts_with(&ByteArrayType a) -> bool,
    starts_with(char c) -> bool,
    starts_with(&char c) -> bool,
    ends_with(&ByteArrayType a) -> bool,
    ends_with(char c) -> bool,
    ends_with(&char c) -> bool,
    chop(i32 n),
    to_lower() -> ByteArrayType,
    to_upper() -> ByteArrayType,
    simplified() -> ByteArrayType,
    left_justified(i32 width, char fill, bool truncate) -> ByteArrayType,
    right_justified(i32 width, char fill, bool truncate) -> ByteArrayType,
    prepend(char c) -> &ByteArrayType,
    prepend(i32 count, char c) -> &ByteArrayType,
    prepend(&char s) -> &ByteArrayType,
    prepend(&char s, i32 len) -> &ByteArrayType,
    prepend(&ByteArrayType a) -> &ByteArrayType,
    append(char c) -> &ByteArrayType,
    append(i32 count, char c) -> &ByteArrayType,
    append(&char s) -> &ByteArrayType,
    append(&char s, i32 len) -> &ByteArrayType,
    append(&ByteArrayType a) -> &ByteArrayType,
    insert(i32 i, char c) -> &ByteArrayType,
    insert(i32 i, i32 count, char c) -> &ByteArrayType,
    insert(i32 i, &char s) -> &ByteArrayType,
    insert(i32 i, &char s, i32 len) -> &ByteArrayType,
    insert(i32 i, &ByteArrayType a) -> &ByteArrayType,
    remove(i32 index, i32 len) -> &ByteArrayType,
    replace(i32 index, i32 len, &char s) -> &ByteArrayType,
    replace(i32 index, i32 len, &char s, i32 alen) -> &ByteArrayType,
    replace(i32 index, i32 len, &ByteArrayType s) -> &ByteArrayType,
    replace(char before, &char after) -> &ByteArrayType,
    replace(char before, &ByteArrayType after) -> &ByteArrayType,
    replace(&char before, &char after) -> &ByteArrayType,
    replace(&char before, i32 bsize, &char after, i32 asize) -> &ByteArrayType,
    replace(&ByteArrayType before, &ByteArrayType after) -> &ByteArrayType,
    replace(&ByteArrayType before, &char after) -> &ByteArrayType,
    replace(&char before, &ByteArrayType after) -> &ByteArrayType,
    replace(char before, char after) -> &ByteArrayType,
    split(char sep) -> <ByteArrayType>,
    repeated(i32 times) -> ByteArrayType,
    append(String s) -> &ByteArrayType,
    insert(i32 i, String s) -> &ByteArrayType,
    replace(String before, &char after) -> &ByteArrayType,
    replace(char c, String after) -> &ByteArrayType,
    replace(String before, &ByteArrayType after) -> &ByteArrayType,
    index_of(String s, i32 from) -> i32,
    last_index_of(String s, i32 from) -> i32,
    to_short(&bool ok, i32 base) -> short,
    to_u_short(&bool ok, i32 base) -> ushort,
    to_int(&bool ok, i32 base) -> i32,
    to_u_int(&bool ok, i32 base) -> uint,
    to_long(&bool ok, i32 base) -> long,
    to_u_long(&bool ok, i32 base) -> ulong,
    to_long_long(&bool ok, i32 base) -> i64,
    to_u_long_long(&bool ok, i32 base) -> qulonglong,
    to_float(&bool ok) -> float,
    to_double(&bool ok) -> double,
    to_base64(Base64Options options) -> ByteArrayType,
    to_base64() -> ByteArrayType,
    to_hex() -> ByteArrayType,
    to_hex(char separator) -> ByteArrayType,
    to_percent_encoding(&ByteArrayType exclude, &ByteArrayType include, char percent) -> ByteArrayType,
    set_num(short arg0, i32 base) -> &ByteArrayType,
    set_num(ushort arg0, i32 base) -> &ByteArrayType,
    set_num(i32 arg0, i32 base) -> &ByteArrayType,
    set_num(uint arg0, i32 base) -> &ByteArrayType,
    set_num(i64 arg0, i32 base) -> &ByteArrayType,
    set_num(qulonglong arg0, i32 base) -> &ByteArrayType,
    set_num(float arg0, char f, i32 prec) -> &ByteArrayType,
    set_num(double arg0, char f, i32 prec) -> &ByteArrayType,
    set_raw_data(&char a, uint n) -> &ByteArrayType,
    number(i32 arg0, i32 base) -> ByteArrayType,
    number(uint arg0, i32 base) -> ByteArrayType,
    number(i64 arg0, i32 base) -> ByteArrayType,
    number(qulonglong arg0, i32 base) -> ByteArrayType,
    number(double arg0, char f, i32 prec) -> ByteArrayType,
    from_raw_data(&char arg0, i32 size) -> ByteArrayType,
    from_base64(&ByteArrayType base64, Base64Options options) -> ByteArrayType,
    from_base64(&ByteArrayType base64) -> ByteArrayType,
    from_hex(&ByteArrayType hex_encoded) -> ByteArrayType,
    from_percent_encoding(&ByteArrayType pct_encoded, char percent) -> ByteArrayType,
    from_cf_data(CFDataRef data) -> ByteArrayType,
    from_raw_cf_data(CFDataRef data) -> ByteArrayType,
    to_cf_data() -> CFDataRef,
    to_raw_cf_data() -> CFDataRef,
    from_ns_data(&NSData data) -> ByteArrayType,
    from_raw_ns_data(&NSData data) -> ByteArrayType,
    to_ns_data() -> &NSData,
    to_raw_ns_data() -> &NSData,
    begin() -> iterator,
    begin() -> const_iterator,
    cbegin() -> const_iterator,
    const_begin() -> const_iterator,
    end() -> iterator,
    end() -> const_iterator,
    cend() -> const_iterator,
    const_end() -> const_iterator,
    rbegin() -> reverse_iterator,
    rend() -> reverse_iterator,
    rbegin() -> const_reverse_iterator,
    rend() -> const_reverse_iterator,
    crbegin() -> const_reverse_iterator,
    crend() -> const_reverse_iterator,
    push_back(char c),
    push_back(&char c),
    push_back(&ByteArrayType a),
    push_front(char c),
    push_front(&char c),
    push_front(&ByteArrayType a),
    shrink_to_fit(),
    count() -> i32,
    length() -> i32,
    is_null() -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
