/// 
/// QImageWriter supports setting format specific options, such as the
/// gamma level, compression level and quality, prior to storing the
/// image. If you do not need such options, you can use QImage::save()
/// or QPixmap::save() instead.
/// 
/// To store an image, you start by constructing a QImageWriter
/// object. Pass either a file name or a device pointer, and the
/// image format to QImageWriter's constructor. You can then set
/// several options, such as the gamma level (by calling setGamma())
/// and quality (by calling setQuality()). canWrite() returns `true` if
/// QImageWriter can write the image (i.e., the image format is
/// supported and the device is open for writing). Call write() to
/// write the image to the device.
/// 
/// If any error occurs when writing the image, write() will return
/// false. You can then call error() to find the type of error that
/// occurred, or errorString() to get a human readable description of
/// what went wrong.
/// 
/// Call supportedImageFormats() for a list of formats that
/// QImageWriter can write. QImageWriter supports all built-in image
/// formats, in addition to any image format plugins that support
/// writing.
/// 
/// **See also:** [`ImageReader`]
/// [`ImageIOHandler`]
/// [`ImageIOPlugin`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct ImageWriter {
    /// 
    /// Sets the format QImageWriter will use when writing images, to *format.* *format* is a case insensitive text string. Example:
    /// 
    /// You can call supportedImageFormats() for the full list of formats
    /// QImageWriter supports.
    /// 
    /// **See also:** [`format()`]
    set_format(format: &ByteArrayType),
    /// 
    /// Returns the format QImageWriter uses for writing images.
    /// 
    /// **See also:** [`set_format()`]
    format() -> ByteArray,
    /// 
    /// Sets QImageWriter's device to *device.* If a device has already
    /// been set, the old device is removed from QImageWriter and is
    /// otherwise left unchanged.
    /// 
    /// If the device is not already open, QImageWriter will attempt to
    /// open the device in [QIODevice::WriteOnly](QIODevice::WriteOnly)
    /// mode by calling
    /// open(). Note that this does not work for certain devices, such as
    /// QProcess, QTcpSocket and QUdpSocket, where more logic is required
    /// to open the device.
    /// 
    /// **See also:** [`device()`]
    /// [`set_file_name()`]
    set_device(device: *IODeviceType),
    /// 
    /// Returns the device currently assigned to QImageWriter, or 0 if no
    /// device has been assigned.
    device() -> IODevice?,
    /// 
    /// Sets the file name of QImageWriter to *fileName.* Internally,
    /// QImageWriter will create a QFile and open it in [QIODevice::WriteOnly](QIODevice::WriteOnly)
    /// mode, and use this file when writing images.
    /// 
    /// **See also:** [`file_name()`]
    /// [`set_device()`]
    set_file_name(file_name: String),
    /// 
    /// If the currently assigned device is a QFile, or if setFileName()
    /// has been called, this function returns the name of the file
    /// QImageWriter writes to. Otherwise (i.e., if no device has been
    /// assigned or the device is not a QFile), an empty QString is
    /// returned.
    /// 
    /// **See also:** [`set_file_name()`]
    /// [`set_device()`]
    file_name() -> String,
    /// 
    /// Sets the quality setting of the image format to *quality.*
    /// 
    /// Some image formats, in particular lossy ones, entail a tradeoff between a)
    /// visual quality of the resulting image, and b) encoding execution time and
    /// compression level. This function sets the level of that tradeoff for image
    /// formats that support it. For other formats, this value is ignored.
    /// 
    /// The value range of *quality* depends on the image format. For example,
    /// the format supports a quality range from 0 (low visual quality, high
    /// compression) to 100 (high visual quality, low compression).
    /// 
    /// **See also:** [`quality()`]
    set_quality(quality: i32),
    /// 
    /// Returns the quality setting of the image format.
    /// 
    /// **See also:** [`set_quality()`]
    quality() -> i32,
    /// 
    /// This is an image format specific function that set the compression
    /// of an image. For image formats that do not support setting the
    /// compression, this value is ignored.
    /// 
    /// The value range of *compression* depends on the image format. For
    /// example, the format supports two values, 0(no compression) and
    /// 1(LZW-compression).
    /// 
    /// **See also:** [`compression()`]
    set_compression(compression: i32),
    /// 
    /// Returns the compression of the image.
    /// 
    /// **See also:** [`set_compression()`]
    compression() -> i32,
    /// 
    /// This is an image format specific function that sets the gamma
    /// level of the image to *gamma.* For image formats that do not
    /// support setting the gamma level, this value is ignored.
    /// 
    /// The value range of *gamma* depends on the image format. For
    /// example, the format supports a gamma range from 0.0 to 1.0.
    /// 
    /// **See also:** [`quality()`]
    set_gamma(gamma: f32),
    /// 
    /// Returns the gamma level of the image.
    /// 
    /// **See also:** [`set_gamma()`]
    gamma() -> f32,
    /// 
    /// This is an image format specific function that sets the
    /// subtype of the image to *type.* Subtype can be used by
    /// a handler to determine which format it should use while
    /// saving the image.
    /// 
    /// For example, saving an image in DDS format with A8R8G8R8 subtype:
    /// 
    set_sub_type(type: &ByteArrayType),
    /// 
    /// Returns the subtype of the image.
    /// 
    /// **See also:** [`set_sub_type()`]
    sub_type() -> ByteArray,
    /// 
    /// Returns the list of subtypes supported by an image.
    supported_sub_types() -> [ByteArray],
    /// 
    /// This is an image format-specific function which sets the *optimize* flags when
    /// writing images. For image formats that do not support setting an *optimize* flag,
    /// this value is ignored.
    /// 
    /// The default is false.
    /// 
    /// **See also:** [`optimized_write()`]
    set_optimized_write(optimize: bool),
    /// 
    /// Returns whether optimization has been turned on for writing the image.
    /// 
    /// **See also:** [`set_optimized_write()`]
    optimized_write() -> bool,
    /// 
    /// This is an image format-specific function which turns on *progressive* scanning
    /// when writing images. For image formats that do not support setting a *progressive*
    /// scan flag, this value is ignored.
    /// 
    /// The default is false.
    /// 
    /// **See also:** [`progressive_scan_write()`]
    set_progressive_scan_write(progressive: bool),
    /// 
    /// Returns whether the image should be written as a progressive image.
    /// 
    /// **See also:** [`set_progressive_scan_write()`]
    progressive_scan_write() -> bool,
    /// 
    /// Sets the image transformations metadata including orientation to *transform.*
    /// 
    /// If transformation metadata is not supported by the image format,
    /// the transform is applied before writing.
    /// 
    /// **See also:** [`transformation()`]
    /// [`write()`]
    set_transformation(orientation: ImageIOHandler::Transformations),
    /// 
    /// Use setText() instead.
    /// 
    /// This is an image format specific function that sets the
    /// description of the image to *description.* For image formats that
    /// do not support setting the description, this value is ignored.
    /// 
    /// The contents of *description* depends on the image format.
    /// 
    /// **See also:** [`description()`]
    set_description(description: String),
    /// 
    /// Use QImageReader::text() instead.
    /// 
    /// Returns the description of the image.
    /// 
    /// **See also:** [`set_description()`]
    description() -> String,
    /// 
    /// Sets the image text associated with the key *key* to
    /// *text.* This is useful for storing copyright information
    /// or other information about the image. Example:
    /// 
    /// If you want to store a single block of data
    /// (e.g., a comment), you can pass an empty key, or use
    /// a generic key like .
    /// 
    /// The key and text will be embedded into the
    /// image data after calling write().
    /// 
    /// Support for this option is implemented through
    /// QImageIOHandler::Description.
    /// 
    /// **See also:** [`Image::set_text`]
    /// [`ImageReader::text`]
    set_text(key: String, text: String),
    /// 
    /// Returns `true` if QImageWriter can write the image; i.e., the image
    /// format is supported and the assigned device is open for reading.
    /// 
    /// **See also:** [`write()`]
    /// [`set_device()`]
    /// [`set_format()`]
    can_write() -> bool,
    /// 
    /// Writes the image *image* to the assigned device or file
    /// name. Returns `true` on success; otherwise returns `false.` If the
    /// operation fails, you can call error() to find the type of error
    /// that occurred, or errorString() to get a human readable
    /// description of the error.
    /// 
    /// **See also:** [`can_write()`]
    /// [`error()`]
    /// [`error_string()`]
    write(image: &ImageType) -> bool,
    /// 
    /// Returns the type of error that last occurred.
    /// 
    /// **See also:** ImageWriterError
    /// [`error_string()`]
    /// 
    /// Returns a human readable description of the last error that occurred.
    /// 
    /// **See also:** [`error()`]
    error() -> ImageWriter::ImageWriterError,
    /// 
    /// Returns `true` if the writer supports *option;* otherwise returns
    /// false.
    /// 
    /// Different image formats support different options. Call this function to
    /// determine whether a certain option is supported by the current format. For
    /// example, the PNG format allows you to embed text into the image's metadata
    /// (see text()).
    /// 
    /// Options can be tested after the writer has been associated with a format.
    /// 
    /// **See also:** [`ImageReader::supports_option`]
    /// [`set_format()`]
    supports_option(option: ImageIOHandler::ImageOption) -> bool,
    /// 
    /// Returns the list of image formats supported by QImageWriter.
    /// 
    /// By default, Qt can write the following formats:
    /// 
    /// * Format
    /// * MIME type
    /// * Description
    /// * BMP
    /// * image/bmp
    /// * Windows Bitmap
    /// * JPG
    /// * image/jpeg
    /// * Joint Photographic Experts Group
    /// * PNG
    /// * image/png
    /// * Portable Network Graphics
    /// * PBM
    /// * image/x-portable-bitmap
    /// * Portable Bitmap
    /// * PGM
    /// * image/x-portable-graymap
    /// * Portable Graymap
    /// * PPM
    /// * image/x-portable-pixmap
    /// * Portable Pixmap
    /// * XBM
    /// * image/x-xbitmap
    /// * X11 Bitmap
    /// * XPM
    /// * image/x-xpixmap
    /// * X11 Pixmap
    /// 
    /// Reading and writing SVG files is supported through the [Qt SVG](Qt%20SVG)
    /// module.
    /// The [Qt Image Formats](Qt%20Image%20Formats)
    /// module provides support for additional image formats.
    /// 
    /// Note that the QApplication instance must be created before this function is
    /// called.
    /// 
    /// **See also:** [`set_format()`]
    /// [`ImageReader::supported_image_formats`]
    /// [`ImageIOPlugin`]
    [static] supported_image_formats() -> [ByteArray],
    /// 
    /// Returns the list of MIME types supported by QImageWriter.
    /// 
    /// Note that the QApplication instance must be created before this function is
    /// called.
    /// 
    /// **See also:** [`supported_image_formats()`]
    /// [`ImageReader::supported_mime_types`]
    [static] supported_mime_types() -> [ByteArray],
}

[org_name(QImageWriter)]
enum ImageWriterError {
    /// An unknown error occurred. If you get this value after calling write(), it is most likely caused by a bug in QImageWriter.
    UnknownError,
    /// QImageWriter encountered a device error when writing the image data. Consult your device for more details on what went wrong.
    DeviceError,
    /// Qt does not support the requested image format.
    UnsupportedFormatError,
    /// An attempt was made to write an invalid QImage. An example of an invalid image would be a null QImage.
    InvalidImageError,
}

// vim: syntax=rust expandtab ts=4 sw=4
