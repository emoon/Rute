[org_name(QMetaMethod)]
enum Access {
    Private,
    Protected,
    Public,
}

[org_name(QMetaMethod)]
enum MethodType {
    Method,
    Signal,
    Slot,
    Constructor,
}

[org_name(QMetaMethod)]
enum Attributes {
    Compatibility,
    Cloned,
    Scriptable,
}


struct MetaMethod {
    method_signature() -> ByteArray,
    name() -> ByteArray,
    type_name() -> char?,
    return_type() -> i32,
    parameter_count() -> i32,
    parameter_type(index: i32) -> i32,
    get_parameter_types(types: *i32),
    parameter_types() -> [ByteArray],
    parameter_names() -> [ByteArray],
    tag() -> char?,
    access() -> MetaMethod::Access,
    method_type() -> MetaMethod::MethodType,
    method_index() -> i32,
    revision() -> i32,
    enclosing_meta_object() -> MetaObject?,
    invoke(object: *ObjectType, connection_type: Rute::ConnectionType, return_value: GenericReturnArgumentType, val0: GenericArgumentType, val1: GenericArgumentType, val2: GenericArgumentType, val3: GenericArgumentType, val4: GenericArgumentType, val5: GenericArgumentType, val6: GenericArgumentType, val7: GenericArgumentType, val8: GenericArgumentType, val9: GenericArgumentType) -> bool,
    invoke(object: *ObjectType, return_value: GenericReturnArgumentType, val0: GenericArgumentType, val1: GenericArgumentType, val2: GenericArgumentType, val3: GenericArgumentType, val4: GenericArgumentType, val5: GenericArgumentType, val6: GenericArgumentType, val7: GenericArgumentType, val8: GenericArgumentType, val9: GenericArgumentType) -> bool,
    invoke(object: *ObjectType, connection_type: Rute::ConnectionType, val0: GenericArgumentType, val1: GenericArgumentType, val2: GenericArgumentType, val3: GenericArgumentType, val4: GenericArgumentType, val5: GenericArgumentType, val6: GenericArgumentType, val7: GenericArgumentType, val8: GenericArgumentType, val9: GenericArgumentType) -> bool,
    invoke(object: *ObjectType, val0: GenericArgumentType, val1: GenericArgumentType, val2: GenericArgumentType, val3: GenericArgumentType, val4: GenericArgumentType, val5: GenericArgumentType, val6: GenericArgumentType, val7: GenericArgumentType, val8: GenericArgumentType, val9: GenericArgumentType) -> bool,
    invoke_on_gadget(gadget: *void, return_value: GenericReturnArgumentType, val0: GenericArgumentType, val1: GenericArgumentType, val2: GenericArgumentType, val3: GenericArgumentType, val4: GenericArgumentType, val5: GenericArgumentType, val6: GenericArgumentType, val7: GenericArgumentType, val8: GenericArgumentType, val9: GenericArgumentType) -> bool,
    invoke_on_gadget(gadget: *void, val0: GenericArgumentType, val1: GenericArgumentType, val2: GenericArgumentType, val3: GenericArgumentType, val4: GenericArgumentType, val5: GenericArgumentType, val6: GenericArgumentType, val7: GenericArgumentType, val8: GenericArgumentType, val9: GenericArgumentType) -> bool,
    is_valid() -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
