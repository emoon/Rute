/// 
/// A QMetaMethod has a methodType(), a methodSignature(), a list of
/// parameterTypes() and parameterNames(), a return typeName(), a
/// tag(), and an access() specifier. You can use invoke() to invoke
/// the method on an arbitrary QObject.
/// 
/// **See also:** [`MetaObject`]
/// [`MetaEnum`]
/// [`MetaProperty`]
/// {Qt's Property System}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct MetaMethod {
    /// 
    /// Returns the signature of this method (e.g.,
    /// `setValue(double)` ).
    /// 
    /// **See also:** [`parameter_types()`]
    /// [`parameter_names()`]
    method_signature() -> ByteArray,
    /// 
    /// Returns the name of this method.
    /// 
    /// **See also:** [`method_signature()`]
    /// [`parameter_count()`]
    name() -> ByteArray,
    /// 
    /// Returns the return type name of this method.
    /// 
    /// **See also:** [`return_type()`]
    /// [`MetaType::type`]
    type_name() -> char?,
    /// 
    /// Returns the return type of this method.
    /// 
    /// The return value is one of the types that are registered
    /// with QMetaType, or QMetaType::UnknownType if the type is not registered.
    /// 
    /// **See also:** [`parameter_type()`]
    /// [`MetaType`]
    /// [`type_name()`]
    return_type() -> i32,
    /// 
    /// Returns the number of parameters of this method.
    /// 
    /// **See also:** [`parameter_type()`]
    /// [`parameter_names()`]
    parameter_count() -> i32,
    /// 
    /// Returns the type of the parameter at the given *index.*
    /// 
    /// The return value is one of the types that are registered
    /// with QMetaType, or QMetaType::UnknownType if the type is not registered.
    /// 
    /// **See also:** [`parameter_count()`]
    /// [`return_type()`]
    /// [`MetaType`]
    /// 
    /// Returns a list of parameter types.
    /// 
    /// **See also:** [`parameter_names()`]
    /// [`method_signature()`]
    parameter_type(index: i32) -> i32,
    get_parameter_types(types: *i32),
    /// 
    /// Returns a list of parameter types.
    /// 
    /// **See also:** [`parameter_names()`]
    /// [`method_signature()`]
    parameter_types() -> [ByteArray],
    /// 
    /// Returns a list of parameter names.
    /// 
    /// **See also:** [`parameter_types()`]
    /// [`method_signature()`]
    parameter_names() -> [ByteArray],
    /// 
    /// Returns the tag associated with this method.
    /// 
    /// Tags are special macros recognized by `moc` that make it
    /// possible to add extra information about a method.
    /// 
    /// Tag information can be added in the following
    /// way in the function declaration:
    /// 
    /// ```
    /// // In the class MainWindow declaration
    /// #ifndef Q_MOC_RUN
    /// // define the tag text as empty, so the compiler doesn't see it
    /// #  define MY_CUSTOM_TAG
    /// #endif
    /// ...
    /// private slots:
    /// MY_CUSTOM_TAG void testFunc();
    /// ```
    /// 
    /// and the information can be accessed by using:
    /// 
    /// ```
    /// MainWindow win;
    /// win.show();
    /// 
    /// int functionIndex = win.metaObject()->indexOfSlot("testFunc()");
    /// QMetaMethod mm = win.metaObject()->method(functionIndex);
    /// qDebug() << mm.tag(); // prints MY_CUSTOM_TAG
    /// ```
    /// 
    /// For the moment, `moc` will extract and record all tags, but it will not
    /// handle any of them specially. You can use the tags to annotate your methods
    /// differently, and treat them according to the specific needs of your
    /// application.
    /// 
    /// **Note**: Since Qt 5.0, `moc` expands preprocessor macros, so it is necessary
    /// to surround the definition with `#ifndef` `Q_MOC_RUN,` as shown in the
    /// example above. This was not required in Qt 4. The code as shown above works
    /// with Qt 4 too.
    tag() -> char?,
    /// 
    /// Returns the access specification of this method (private,
    /// protected, or public).
    /// 
    /// **Note**: Signals are always public, but you should regard that as an
    /// implementation detail. It is almost always a bad idea to emit a signal from
    /// outside its class.
    /// 
    /// **See also:** [`method_type()`]
    access() -> MetaMethod::Access,
    /// 
    /// Returns the type of this method (signal, slot, or method).
    /// 
    /// **See also:** [`access()`]
    method_type() -> MetaMethod::MethodType,
    /// 
    /// Returns this method's index.
    method_index() -> i32,
    /// 
    /// Returns the method revision if one was
    /// specified by Q_REVISION, otherwise returns 0.
    revision() -> i32,
    enclosing_meta_object() -> MetaObject?,
    /// 
    /// Invokes this method on the object *object.* Returns `true` if the member could be invoked.
    /// Returns `false` if there is no such member or the parameters did not match.
    /// 
    /// The invocation can be either synchronous or asynchronous, depending on the
    /// *connectionType:*
    /// 
    /// * If *connectionType* is Qt::DirectConnection, the member will be invoked immediately.
    /// * If *connectionType* is Qt::QueuedConnection, a QEvent will be posted and the member is invoked as soon as the application enters the main event loop.
    /// * If *connectionType* is Qt::AutoConnection, the member is invoked synchronously if *object* lives in the same thread as the caller; otherwise it will invoke the member asynchronously.
    /// 
    /// The return value of this method call is placed in *returnValue.* If the invocation is asynchronous, the return value cannot
    /// be evaluated. You can pass up to ten arguments ( *val0,* *val1,*
    /// *val2,* *val3,* *val4,* *val5,* *val6,* *val7,* *val8,*
    /// and *val9)* to this method call.
    /// 
    /// QGenericArgument and QGenericReturnArgument are internal
    /// helper classes. Because signals and slots can be dynamically
    /// invoked, you must enclose the arguments using the Q_ARG() and
    /// Q_RETURN_ARG() macros. Q_ARG() takes a type name and a
    /// const reference of that type; Q_RETURN_ARG() takes a type name
    /// and a non-const reference.
    /// 
    /// To asynchronously invoke the
    /// [animateClick()](QPushButton::animateClick())
    /// slot on a
    /// QPushButton:
    /// 
    /// With asynchronous method invocations, the parameters must be of
    /// types that are known to Qt's meta-object system, because Qt needs
    /// to copy the arguments to store them in an event behind the
    /// scenes. If you try to use a queued connection and get the error
    /// message
    /// 
    /// call qRegisterMetaType() to register the data type before you
    /// call QMetaMethod::invoke().
    /// 
    /// To synchronously invoke the `compute(QString,` int, double) slot on
    /// some arbitrary object `obj` retrieve its return value:
    /// 
    /// QMetaObject::normalizedSignature() is used here to ensure that the format
    /// of the signature is what invoke() expects. E.g. extra whitespace is
    /// removed.
    /// 
    /// If the slot does not take exactly one QString, one int
    /// and one double in the specified order, the call will fail.
    /// 
    /// **Warning**: this method will not test the validity of the arguments: *object*
    /// must be an instance of the class of the QMetaObject of which this QMetaMethod
    /// has been constructed with. The arguments must have the same type as the ones
    /// expected by the method, else, the behaviour is undefined.
    /// 
    /// **See also:** [`q_arg()`]
    /// [`q_return_arg()`]
    /// [`q_register_meta_type()`]
    /// [`MetaObject::invoke_method`]
    /// QGenericReturnArgument returnValue,
    /// QGenericArgument val0 = QGenericArgument(0),
    /// QGenericArgument val1 = QGenericArgument(),
    /// QGenericArgument val2 = QGenericArgument(),
    /// QGenericArgument val3 = QGenericArgument(),
    /// QGenericArgument val4 = QGenericArgument(),
    /// QGenericArgument val5 = QGenericArgument(),
    /// QGenericArgument val6 = QGenericArgument(),
    /// QGenericArgument val7 = QGenericArgument(),
    /// QGenericArgument val8 = QGenericArgument(),
    /// QGenericArgument val9 = QGenericArgument()) const
    /// **Overloads** invoke()
    /// This overload always invokes this method using the connection type Qt::AutoConnection.
    /// Qt::ConnectionType connectionType,
    /// QGenericArgument val0 = QGenericArgument(0),
    /// QGenericArgument val1 = QGenericArgument(),
    /// QGenericArgument val2 = QGenericArgument(),
    /// QGenericArgument val3 = QGenericArgument(),
    /// QGenericArgument val4 = QGenericArgument(),
    /// QGenericArgument val5 = QGenericArgument(),
    /// QGenericArgument val6 = QGenericArgument(),
    /// QGenericArgument val7 = QGenericArgument(),
    /// QGenericArgument val8 = QGenericArgument(),
    /// QGenericArgument val9 = QGenericArgument()) const
    /// 
    /// **Overloads** invoke()
    /// This overload can be used if the return value of the member is of no interest.
    /// 
    /// QGenericArgument val0 = QGenericArgument(0),
    /// QGenericArgument val1 = QGenericArgument(),
    /// QGenericArgument val2 = QGenericArgument(),
    /// QGenericArgument val3 = QGenericArgument(),
    /// QGenericArgument val4 = QGenericArgument(),
    /// QGenericArgument val5 = QGenericArgument(),
    /// QGenericArgument val6 = QGenericArgument(),
    /// QGenericArgument val7 = QGenericArgument(),
    /// QGenericArgument val8 = QGenericArgument(),
    /// QGenericArgument val9 = QGenericArgument()) const
    /// 
    /// **Overloads** invoke()
    /// This overload invokes this method using the
    /// connection type Qt::AutoConnection and ignores return values.
    /// 
    /// Invokes this method on a Q_GADGET. Returns `true` if the member could be invoked.
    /// Returns `false` if there is no such member or the parameters did not match.
    /// 
    /// The pointer *gadget* must point to an instance of the gadget class.
    /// 
    /// The invocation is always synchronous.
    /// 
    /// The return value of this method call is placed in *returnValue.* You can pass up to ten arguments ( *val0,* *val1,*
    /// *val2,* *val3,* *val4,* *val5,* *val6,* *val7,* *val8,*
    /// and *val9)* to this method call.
    /// 
    /// **Warning**: this method will not test the validity of the arguments: *gadget*
    /// must be an instance of the class of the QMetaObject of which this QMetaMethod
    /// has been constructed with. The arguments must have the same type as the ones
    /// expected by the method, else, the behavior is undefined.
    /// 
    /// **See also:** [`q_arg()`]
    /// [`q_return_arg()`]
    /// [`q_register_meta_type()`]
    /// [`MetaObject::invoke_method`]
    /// 
    /// QGenericArgument val0 = QGenericArgument(0),
    /// QGenericArgument val1 = QGenericArgument(),
    /// QGenericArgument val2 = QGenericArgument(),
    /// QGenericArgument val3 = QGenericArgument(),
    /// QGenericArgument val4 = QGenericArgument(),
    /// QGenericArgument val5 = QGenericArgument(),
    /// QGenericArgument val6 = QGenericArgument(),
    /// QGenericArgument val7 = QGenericArgument(),
    /// QGenericArgument val8 = QGenericArgument(),
    /// QGenericArgument val9 = QGenericArgument()) const
    /// 
    /// **Overloads**
    /// This overload invokes this method for a *gadget* and ignores return values.
    invoke(object: *ObjectType, connection_type: Rute::ConnectionType, return_value: GenericReturnArgumentType, val0: GenericArgumentType, val1: GenericArgumentType, val2: GenericArgumentType, val3: GenericArgumentType, val4: GenericArgumentType, val5: GenericArgumentType, val6: GenericArgumentType, val7: GenericArgumentType, val8: GenericArgumentType, val9: GenericArgumentType) -> bool,
    /// 
    /// Invokes this method on the object *object.* Returns `true` if the member could be invoked.
    /// Returns `false` if there is no such member or the parameters did not match.
    /// 
    /// The invocation can be either synchronous or asynchronous, depending on the
    /// *connectionType:*
    /// 
    /// * If *connectionType* is Qt::DirectConnection, the member will be invoked immediately.
    /// * If *connectionType* is Qt::QueuedConnection, a QEvent will be posted and the member is invoked as soon as the application enters the main event loop.
    /// * If *connectionType* is Qt::AutoConnection, the member is invoked synchronously if *object* lives in the same thread as the caller; otherwise it will invoke the member asynchronously.
    /// 
    /// The return value of this method call is placed in *returnValue.* If the invocation is asynchronous, the return value cannot
    /// be evaluated. You can pass up to ten arguments ( *val0,* *val1,*
    /// *val2,* *val3,* *val4,* *val5,* *val6,* *val7,* *val8,*
    /// and *val9)* to this method call.
    /// 
    /// QGenericArgument and QGenericReturnArgument are internal
    /// helper classes. Because signals and slots can be dynamically
    /// invoked, you must enclose the arguments using the Q_ARG() and
    /// Q_RETURN_ARG() macros. Q_ARG() takes a type name and a
    /// const reference of that type; Q_RETURN_ARG() takes a type name
    /// and a non-const reference.
    /// 
    /// To asynchronously invoke the
    /// [animateClick()](QPushButton::animateClick())
    /// slot on a
    /// QPushButton:
    /// 
    /// With asynchronous method invocations, the parameters must be of
    /// types that are known to Qt's meta-object system, because Qt needs
    /// to copy the arguments to store them in an event behind the
    /// scenes. If you try to use a queued connection and get the error
    /// message
    /// 
    /// call qRegisterMetaType() to register the data type before you
    /// call QMetaMethod::invoke().
    /// 
    /// To synchronously invoke the `compute(QString,` int, double) slot on
    /// some arbitrary object `obj` retrieve its return value:
    /// 
    /// QMetaObject::normalizedSignature() is used here to ensure that the format
    /// of the signature is what invoke() expects. E.g. extra whitespace is
    /// removed.
    /// 
    /// If the slot does not take exactly one QString, one int
    /// and one double in the specified order, the call will fail.
    /// 
    /// **Warning**: this method will not test the validity of the arguments: *object*
    /// must be an instance of the class of the QMetaObject of which this QMetaMethod
    /// has been constructed with. The arguments must have the same type as the ones
    /// expected by the method, else, the behaviour is undefined.
    /// 
    /// **See also:** [`q_arg()`]
    /// [`q_return_arg()`]
    /// [`q_register_meta_type()`]
    /// [`MetaObject::invoke_method`]
    /// QGenericReturnArgument returnValue,
    /// QGenericArgument val0 = QGenericArgument(0),
    /// QGenericArgument val1 = QGenericArgument(),
    /// QGenericArgument val2 = QGenericArgument(),
    /// QGenericArgument val3 = QGenericArgument(),
    /// QGenericArgument val4 = QGenericArgument(),
    /// QGenericArgument val5 = QGenericArgument(),
    /// QGenericArgument val6 = QGenericArgument(),
    /// QGenericArgument val7 = QGenericArgument(),
    /// QGenericArgument val8 = QGenericArgument(),
    /// QGenericArgument val9 = QGenericArgument()) const
    /// **Overloads** invoke()
    /// This overload always invokes this method using the connection type Qt::AutoConnection.
    /// Qt::ConnectionType connectionType,
    /// QGenericArgument val0 = QGenericArgument(0),
    /// QGenericArgument val1 = QGenericArgument(),
    /// QGenericArgument val2 = QGenericArgument(),
    /// QGenericArgument val3 = QGenericArgument(),
    /// QGenericArgument val4 = QGenericArgument(),
    /// QGenericArgument val5 = QGenericArgument(),
    /// QGenericArgument val6 = QGenericArgument(),
    /// QGenericArgument val7 = QGenericArgument(),
    /// QGenericArgument val8 = QGenericArgument(),
    /// QGenericArgument val9 = QGenericArgument()) const
    /// 
    /// **Overloads** invoke()
    /// This overload can be used if the return value of the member is of no interest.
    /// 
    /// QGenericArgument val0 = QGenericArgument(0),
    /// QGenericArgument val1 = QGenericArgument(),
    /// QGenericArgument val2 = QGenericArgument(),
    /// QGenericArgument val3 = QGenericArgument(),
    /// QGenericArgument val4 = QGenericArgument(),
    /// QGenericArgument val5 = QGenericArgument(),
    /// QGenericArgument val6 = QGenericArgument(),
    /// QGenericArgument val7 = QGenericArgument(),
    /// QGenericArgument val8 = QGenericArgument(),
    /// QGenericArgument val9 = QGenericArgument()) const
    /// 
    /// **Overloads** invoke()
    /// This overload invokes this method using the
    /// connection type Qt::AutoConnection and ignores return values.
    /// 
    /// Invokes this method on a Q_GADGET. Returns `true` if the member could be invoked.
    /// Returns `false` if there is no such member or the parameters did not match.
    /// 
    /// The pointer *gadget* must point to an instance of the gadget class.
    /// 
    /// The invocation is always synchronous.
    /// 
    /// The return value of this method call is placed in *returnValue.* You can pass up to ten arguments ( *val0,* *val1,*
    /// *val2,* *val3,* *val4,* *val5,* *val6,* *val7,* *val8,*
    /// and *val9)* to this method call.
    /// 
    /// **Warning**: this method will not test the validity of the arguments: *gadget*
    /// must be an instance of the class of the QMetaObject of which this QMetaMethod
    /// has been constructed with. The arguments must have the same type as the ones
    /// expected by the method, else, the behavior is undefined.
    /// 
    /// **See also:** [`q_arg()`]
    /// [`q_return_arg()`]
    /// [`q_register_meta_type()`]
    /// [`MetaObject::invoke_method`]
    /// 
    /// QGenericArgument val0 = QGenericArgument(0),
    /// QGenericArgument val1 = QGenericArgument(),
    /// QGenericArgument val2 = QGenericArgument(),
    /// QGenericArgument val3 = QGenericArgument(),
    /// QGenericArgument val4 = QGenericArgument(),
    /// QGenericArgument val5 = QGenericArgument(),
    /// QGenericArgument val6 = QGenericArgument(),
    /// QGenericArgument val7 = QGenericArgument(),
    /// QGenericArgument val8 = QGenericArgument(),
    /// QGenericArgument val9 = QGenericArgument()) const
    /// 
    /// **Overloads**
    /// This overload invokes this method for a *gadget* and ignores return values.
    [org_name(invoke)]
    invoke_2(object: *ObjectType, return_value: GenericReturnArgumentType, val0: GenericArgumentType, val1: GenericArgumentType, val2: GenericArgumentType, val3: GenericArgumentType, val4: GenericArgumentType, val5: GenericArgumentType, val6: GenericArgumentType, val7: GenericArgumentType, val8: GenericArgumentType, val9: GenericArgumentType) -> bool,
    /// 
    /// Invokes this method on the object *object.* Returns `true` if the member could be invoked.
    /// Returns `false` if there is no such member or the parameters did not match.
    /// 
    /// The invocation can be either synchronous or asynchronous, depending on the
    /// *connectionType:*
    /// 
    /// * If *connectionType* is Qt::DirectConnection, the member will be invoked immediately.
    /// * If *connectionType* is Qt::QueuedConnection, a QEvent will be posted and the member is invoked as soon as the application enters the main event loop.
    /// * If *connectionType* is Qt::AutoConnection, the member is invoked synchronously if *object* lives in the same thread as the caller; otherwise it will invoke the member asynchronously.
    /// 
    /// The return value of this method call is placed in *returnValue.* If the invocation is asynchronous, the return value cannot
    /// be evaluated. You can pass up to ten arguments ( *val0,* *val1,*
    /// *val2,* *val3,* *val4,* *val5,* *val6,* *val7,* *val8,*
    /// and *val9)* to this method call.
    /// 
    /// QGenericArgument and QGenericReturnArgument are internal
    /// helper classes. Because signals and slots can be dynamically
    /// invoked, you must enclose the arguments using the Q_ARG() and
    /// Q_RETURN_ARG() macros. Q_ARG() takes a type name and a
    /// const reference of that type; Q_RETURN_ARG() takes a type name
    /// and a non-const reference.
    /// 
    /// To asynchronously invoke the
    /// [animateClick()](QPushButton::animateClick())
    /// slot on a
    /// QPushButton:
    /// 
    /// With asynchronous method invocations, the parameters must be of
    /// types that are known to Qt's meta-object system, because Qt needs
    /// to copy the arguments to store them in an event behind the
    /// scenes. If you try to use a queued connection and get the error
    /// message
    /// 
    /// call qRegisterMetaType() to register the data type before you
    /// call QMetaMethod::invoke().
    /// 
    /// To synchronously invoke the `compute(QString,` int, double) slot on
    /// some arbitrary object `obj` retrieve its return value:
    /// 
    /// QMetaObject::normalizedSignature() is used here to ensure that the format
    /// of the signature is what invoke() expects. E.g. extra whitespace is
    /// removed.
    /// 
    /// If the slot does not take exactly one QString, one int
    /// and one double in the specified order, the call will fail.
    /// 
    /// **Warning**: this method will not test the validity of the arguments: *object*
    /// must be an instance of the class of the QMetaObject of which this QMetaMethod
    /// has been constructed with. The arguments must have the same type as the ones
    /// expected by the method, else, the behaviour is undefined.
    /// 
    /// **See also:** [`q_arg()`]
    /// [`q_return_arg()`]
    /// [`q_register_meta_type()`]
    /// [`MetaObject::invoke_method`]
    /// QGenericReturnArgument returnValue,
    /// QGenericArgument val0 = QGenericArgument(0),
    /// QGenericArgument val1 = QGenericArgument(),
    /// QGenericArgument val2 = QGenericArgument(),
    /// QGenericArgument val3 = QGenericArgument(),
    /// QGenericArgument val4 = QGenericArgument(),
    /// QGenericArgument val5 = QGenericArgument(),
    /// QGenericArgument val6 = QGenericArgument(),
    /// QGenericArgument val7 = QGenericArgument(),
    /// QGenericArgument val8 = QGenericArgument(),
    /// QGenericArgument val9 = QGenericArgument()) const
    /// **Overloads** invoke()
    /// This overload always invokes this method using the connection type Qt::AutoConnection.
    /// Qt::ConnectionType connectionType,
    /// QGenericArgument val0 = QGenericArgument(0),
    /// QGenericArgument val1 = QGenericArgument(),
    /// QGenericArgument val2 = QGenericArgument(),
    /// QGenericArgument val3 = QGenericArgument(),
    /// QGenericArgument val4 = QGenericArgument(),
    /// QGenericArgument val5 = QGenericArgument(),
    /// QGenericArgument val6 = QGenericArgument(),
    /// QGenericArgument val7 = QGenericArgument(),
    /// QGenericArgument val8 = QGenericArgument(),
    /// QGenericArgument val9 = QGenericArgument()) const
    /// 
    /// **Overloads** invoke()
    /// This overload can be used if the return value of the member is of no interest.
    /// 
    /// QGenericArgument val0 = QGenericArgument(0),
    /// QGenericArgument val1 = QGenericArgument(),
    /// QGenericArgument val2 = QGenericArgument(),
    /// QGenericArgument val3 = QGenericArgument(),
    /// QGenericArgument val4 = QGenericArgument(),
    /// QGenericArgument val5 = QGenericArgument(),
    /// QGenericArgument val6 = QGenericArgument(),
    /// QGenericArgument val7 = QGenericArgument(),
    /// QGenericArgument val8 = QGenericArgument(),
    /// QGenericArgument val9 = QGenericArgument()) const
    /// 
    /// **Overloads** invoke()
    /// This overload invokes this method using the
    /// connection type Qt::AutoConnection and ignores return values.
    /// 
    /// Invokes this method on a Q_GADGET. Returns `true` if the member could be invoked.
    /// Returns `false` if there is no such member or the parameters did not match.
    /// 
    /// The pointer *gadget* must point to an instance of the gadget class.
    /// 
    /// The invocation is always synchronous.
    /// 
    /// The return value of this method call is placed in *returnValue.* You can pass up to ten arguments ( *val0,* *val1,*
    /// *val2,* *val3,* *val4,* *val5,* *val6,* *val7,* *val8,*
    /// and *val9)* to this method call.
    /// 
    /// **Warning**: this method will not test the validity of the arguments: *gadget*
    /// must be an instance of the class of the QMetaObject of which this QMetaMethod
    /// has been constructed with. The arguments must have the same type as the ones
    /// expected by the method, else, the behavior is undefined.
    /// 
    /// **See also:** [`q_arg()`]
    /// [`q_return_arg()`]
    /// [`q_register_meta_type()`]
    /// [`MetaObject::invoke_method`]
    /// 
    /// QGenericArgument val0 = QGenericArgument(0),
    /// QGenericArgument val1 = QGenericArgument(),
    /// QGenericArgument val2 = QGenericArgument(),
    /// QGenericArgument val3 = QGenericArgument(),
    /// QGenericArgument val4 = QGenericArgument(),
    /// QGenericArgument val5 = QGenericArgument(),
    /// QGenericArgument val6 = QGenericArgument(),
    /// QGenericArgument val7 = QGenericArgument(),
    /// QGenericArgument val8 = QGenericArgument(),
    /// QGenericArgument val9 = QGenericArgument()) const
    /// 
    /// **Overloads**
    /// This overload invokes this method for a *gadget* and ignores return values.
    [org_name(invoke)]
    invoke_3(object: *ObjectType, connection_type: Rute::ConnectionType, val0: GenericArgumentType, val1: GenericArgumentType, val2: GenericArgumentType, val3: GenericArgumentType, val4: GenericArgumentType, val5: GenericArgumentType, val6: GenericArgumentType, val7: GenericArgumentType, val8: GenericArgumentType, val9: GenericArgumentType) -> bool,
    /// 
    /// Invokes this method on the object *object.* Returns `true` if the member could be invoked.
    /// Returns `false` if there is no such member or the parameters did not match.
    /// 
    /// The invocation can be either synchronous or asynchronous, depending on the
    /// *connectionType:*
    /// 
    /// * If *connectionType* is Qt::DirectConnection, the member will be invoked immediately.
    /// * If *connectionType* is Qt::QueuedConnection, a QEvent will be posted and the member is invoked as soon as the application enters the main event loop.
    /// * If *connectionType* is Qt::AutoConnection, the member is invoked synchronously if *object* lives in the same thread as the caller; otherwise it will invoke the member asynchronously.
    /// 
    /// The return value of this method call is placed in *returnValue.* If the invocation is asynchronous, the return value cannot
    /// be evaluated. You can pass up to ten arguments ( *val0,* *val1,*
    /// *val2,* *val3,* *val4,* *val5,* *val6,* *val7,* *val8,*
    /// and *val9)* to this method call.
    /// 
    /// QGenericArgument and QGenericReturnArgument are internal
    /// helper classes. Because signals and slots can be dynamically
    /// invoked, you must enclose the arguments using the Q_ARG() and
    /// Q_RETURN_ARG() macros. Q_ARG() takes a type name and a
    /// const reference of that type; Q_RETURN_ARG() takes a type name
    /// and a non-const reference.
    /// 
    /// To asynchronously invoke the
    /// [animateClick()](QPushButton::animateClick())
    /// slot on a
    /// QPushButton:
    /// 
    /// With asynchronous method invocations, the parameters must be of
    /// types that are known to Qt's meta-object system, because Qt needs
    /// to copy the arguments to store them in an event behind the
    /// scenes. If you try to use a queued connection and get the error
    /// message
    /// 
    /// call qRegisterMetaType() to register the data type before you
    /// call QMetaMethod::invoke().
    /// 
    /// To synchronously invoke the `compute(QString,` int, double) slot on
    /// some arbitrary object `obj` retrieve its return value:
    /// 
    /// QMetaObject::normalizedSignature() is used here to ensure that the format
    /// of the signature is what invoke() expects. E.g. extra whitespace is
    /// removed.
    /// 
    /// If the slot does not take exactly one QString, one int
    /// and one double in the specified order, the call will fail.
    /// 
    /// **Warning**: this method will not test the validity of the arguments: *object*
    /// must be an instance of the class of the QMetaObject of which this QMetaMethod
    /// has been constructed with. The arguments must have the same type as the ones
    /// expected by the method, else, the behaviour is undefined.
    /// 
    /// **See also:** [`q_arg()`]
    /// [`q_return_arg()`]
    /// [`q_register_meta_type()`]
    /// [`MetaObject::invoke_method`]
    /// QGenericReturnArgument returnValue,
    /// QGenericArgument val0 = QGenericArgument(0),
    /// QGenericArgument val1 = QGenericArgument(),
    /// QGenericArgument val2 = QGenericArgument(),
    /// QGenericArgument val3 = QGenericArgument(),
    /// QGenericArgument val4 = QGenericArgument(),
    /// QGenericArgument val5 = QGenericArgument(),
    /// QGenericArgument val6 = QGenericArgument(),
    /// QGenericArgument val7 = QGenericArgument(),
    /// QGenericArgument val8 = QGenericArgument(),
    /// QGenericArgument val9 = QGenericArgument()) const
    /// **Overloads** invoke()
    /// This overload always invokes this method using the connection type Qt::AutoConnection.
    /// Qt::ConnectionType connectionType,
    /// QGenericArgument val0 = QGenericArgument(0),
    /// QGenericArgument val1 = QGenericArgument(),
    /// QGenericArgument val2 = QGenericArgument(),
    /// QGenericArgument val3 = QGenericArgument(),
    /// QGenericArgument val4 = QGenericArgument(),
    /// QGenericArgument val5 = QGenericArgument(),
    /// QGenericArgument val6 = QGenericArgument(),
    /// QGenericArgument val7 = QGenericArgument(),
    /// QGenericArgument val8 = QGenericArgument(),
    /// QGenericArgument val9 = QGenericArgument()) const
    /// 
    /// **Overloads** invoke()
    /// This overload can be used if the return value of the member is of no interest.
    /// 
    /// QGenericArgument val0 = QGenericArgument(0),
    /// QGenericArgument val1 = QGenericArgument(),
    /// QGenericArgument val2 = QGenericArgument(),
    /// QGenericArgument val3 = QGenericArgument(),
    /// QGenericArgument val4 = QGenericArgument(),
    /// QGenericArgument val5 = QGenericArgument(),
    /// QGenericArgument val6 = QGenericArgument(),
    /// QGenericArgument val7 = QGenericArgument(),
    /// QGenericArgument val8 = QGenericArgument(),
    /// QGenericArgument val9 = QGenericArgument()) const
    /// 
    /// **Overloads** invoke()
    /// This overload invokes this method using the
    /// connection type Qt::AutoConnection and ignores return values.
    /// 
    /// Invokes this method on a Q_GADGET. Returns `true` if the member could be invoked.
    /// Returns `false` if there is no such member or the parameters did not match.
    /// 
    /// The pointer *gadget* must point to an instance of the gadget class.
    /// 
    /// The invocation is always synchronous.
    /// 
    /// The return value of this method call is placed in *returnValue.* You can pass up to ten arguments ( *val0,* *val1,*
    /// *val2,* *val3,* *val4,* *val5,* *val6,* *val7,* *val8,*
    /// and *val9)* to this method call.
    /// 
    /// **Warning**: this method will not test the validity of the arguments: *gadget*
    /// must be an instance of the class of the QMetaObject of which this QMetaMethod
    /// has been constructed with. The arguments must have the same type as the ones
    /// expected by the method, else, the behavior is undefined.
    /// 
    /// **See also:** [`q_arg()`]
    /// [`q_return_arg()`]
    /// [`q_register_meta_type()`]
    /// [`MetaObject::invoke_method`]
    /// 
    /// QGenericArgument val0 = QGenericArgument(0),
    /// QGenericArgument val1 = QGenericArgument(),
    /// QGenericArgument val2 = QGenericArgument(),
    /// QGenericArgument val3 = QGenericArgument(),
    /// QGenericArgument val4 = QGenericArgument(),
    /// QGenericArgument val5 = QGenericArgument(),
    /// QGenericArgument val6 = QGenericArgument(),
    /// QGenericArgument val7 = QGenericArgument(),
    /// QGenericArgument val8 = QGenericArgument(),
    /// QGenericArgument val9 = QGenericArgument()) const
    /// 
    /// **Overloads**
    /// This overload invokes this method for a *gadget* and ignores return values.
    [org_name(invoke)]
    invoke_4(object: *ObjectType, val0: GenericArgumentType, val1: GenericArgumentType, val2: GenericArgumentType, val3: GenericArgumentType, val4: GenericArgumentType, val5: GenericArgumentType, val6: GenericArgumentType, val7: GenericArgumentType, val8: GenericArgumentType, val9: GenericArgumentType) -> bool,
    /// 
    /// Invokes this method on a Q_GADGET. Returns `true` if the member could be invoked.
    /// Returns `false` if there is no such member or the parameters did not match.
    /// 
    /// The pointer *gadget* must point to an instance of the gadget class.
    /// 
    /// The invocation is always synchronous.
    /// 
    /// The return value of this method call is placed in *returnValue.* You can pass up to ten arguments ( *val0,* *val1,*
    /// *val2,* *val3,* *val4,* *val5,* *val6,* *val7,* *val8,*
    /// and *val9)* to this method call.
    /// 
    /// **Warning**: this method will not test the validity of the arguments: *gadget*
    /// must be an instance of the class of the QMetaObject of which this QMetaMethod
    /// has been constructed with. The arguments must have the same type as the ones
    /// expected by the method, else, the behavior is undefined.
    /// 
    /// **See also:** [`q_arg()`]
    /// [`q_return_arg()`]
    /// [`q_register_meta_type()`]
    /// [`MetaObject::invoke_method`]
    /// 
    /// QGenericArgument val0 = QGenericArgument(0),
    /// QGenericArgument val1 = QGenericArgument(),
    /// QGenericArgument val2 = QGenericArgument(),
    /// QGenericArgument val3 = QGenericArgument(),
    /// QGenericArgument val4 = QGenericArgument(),
    /// QGenericArgument val5 = QGenericArgument(),
    /// QGenericArgument val6 = QGenericArgument(),
    /// QGenericArgument val7 = QGenericArgument(),
    /// QGenericArgument val8 = QGenericArgument(),
    /// QGenericArgument val9 = QGenericArgument()) const
    /// 
    /// **Overloads**
    /// This overload invokes this method for a *gadget* and ignores return values.
    invoke_on_gadget(gadget: *void, return_value: GenericReturnArgumentType, val0: GenericArgumentType, val1: GenericArgumentType, val2: GenericArgumentType, val3: GenericArgumentType, val4: GenericArgumentType, val5: GenericArgumentType, val6: GenericArgumentType, val7: GenericArgumentType, val8: GenericArgumentType, val9: GenericArgumentType) -> bool,
    /// 
    /// Invokes this method on a Q_GADGET. Returns `true` if the member could be invoked.
    /// Returns `false` if there is no such member or the parameters did not match.
    /// 
    /// The pointer *gadget* must point to an instance of the gadget class.
    /// 
    /// The invocation is always synchronous.
    /// 
    /// The return value of this method call is placed in *returnValue.* You can pass up to ten arguments ( *val0,* *val1,*
    /// *val2,* *val3,* *val4,* *val5,* *val6,* *val7,* *val8,*
    /// and *val9)* to this method call.
    /// 
    /// **Warning**: this method will not test the validity of the arguments: *gadget*
    /// must be an instance of the class of the QMetaObject of which this QMetaMethod
    /// has been constructed with. The arguments must have the same type as the ones
    /// expected by the method, else, the behavior is undefined.
    /// 
    /// **See also:** [`q_arg()`]
    /// [`q_return_arg()`]
    /// [`q_register_meta_type()`]
    /// [`MetaObject::invoke_method`]
    /// 
    /// QGenericArgument val0 = QGenericArgument(0),
    /// QGenericArgument val1 = QGenericArgument(),
    /// QGenericArgument val2 = QGenericArgument(),
    /// QGenericArgument val3 = QGenericArgument(),
    /// QGenericArgument val4 = QGenericArgument(),
    /// QGenericArgument val5 = QGenericArgument(),
    /// QGenericArgument val6 = QGenericArgument(),
    /// QGenericArgument val7 = QGenericArgument(),
    /// QGenericArgument val8 = QGenericArgument(),
    /// QGenericArgument val9 = QGenericArgument()) const
    /// 
    /// **Overloads**
    /// This overload invokes this method for a *gadget* and ignores return values.
    [org_name(invokeOnGadget)]
    invoke_on_gadget_2(gadget: *void, val0: GenericArgumentType, val1: GenericArgumentType, val2: GenericArgumentType, val3: GenericArgumentType, val4: GenericArgumentType, val5: GenericArgumentType, val6: GenericArgumentType, val7: GenericArgumentType, val8: GenericArgumentType, val9: GenericArgumentType) -> bool,
    /// 
    /// Returns `true` if this method is valid (can be introspected and
    /// invoked), otherwise returns `false.`
    is_valid() -> bool,
}

[org_name(QMetaMethod)]
enum Access {
    /// 
    Private,
    /// 
    Protected,
    /// 
    Public,
}

[org_name(QMetaMethod)]
enum MethodType {
    /// The function is a plain member function.
    Method,
    /// The function is a signal.
    Signal,
    /// The function is a slot.
    Slot,
    /// The function is a constructor.
    Constructor,
}

[org_name(QMetaMethod)]
enum Attributes {
    /// 
    Compatibility,
    /// 
    Cloned,
    /// 
    Scriptable,
}

// vim: syntax=rust expandtab ts=4 sw=4
