/// 
/// Qt uses QImageIOHandler for reading and writing images through
/// QImageReader and QImageWriter. You can also derive from this class
/// to write your own image format handler using Qt's plugin mechanism.
/// 
/// Call setDevice() to assign a device to the handler, and
/// setFormat() to assign a format to it. One QImageIOHandler may
/// support more than one image format. canRead() returns `true` if an
/// image can be read from the device, and read() and write() return
/// true if reading or writing an image was completed successfully.
/// 
/// QImageIOHandler also has support for animations formats, through
/// the functions loopCount(), imageCount(), nextImageDelay() and
/// currentImageNumber().
/// 
/// In order to determine what options an image handler supports, Qt
/// will call supportsOption() and setOption(). Make sure to
/// reimplement these functions if you can provide support for any of
/// the options in the ImageOption enum.
/// 
/// To write your own image handler, you must at least reimplement
/// canRead() and read(). Then create a QImageIOPlugin that
/// can create the handler. Finally, install your plugin, and
/// QImageReader and QImageWriter will then automatically load the
/// plugin, and start using it.
/// 
/// **See also:** [`ImageIOPlugin`]
/// [`ImageReader`]
/// [`ImageWriter`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct ImageIOHandler {
    /// 
    /// Sets the device of the QImageIOHandler to *device.* The image
    /// handler will use this device when reading and writing images.
    /// 
    /// The device can only be set once and must be set before calling
    /// canRead(), read(), write(), etc. If you need to read multiple
    /// files, construct multiple instances of the appropriate
    /// QImageIOHandler subclass.
    /// 
    /// **See also:** [`device()`]
    set_device(device: *IODeviceType),
    /// 
    /// Returns the device currently assigned to the QImageIOHandler. If
    /// not device has been assigned, 0 is returned.
    device() -> IODevice?,
    /// 
    /// Sets the format of the QImageIOHandler to *format.* The format is
    /// most useful for handlers that support multiple image formats.
    /// 
    /// **See also:** [`format()`]
    /// 
    /// Sets the format of the QImageIOHandler to *format.* The format is
    /// most useful for handlers that support multiple image formats.
    /// 
    /// This function is declared const so that it can be called from canRead().
    /// 
    /// **See also:** [`format()`]
    set_format(format: &ByteArrayType),
    /// 
    /// Sets the format of the QImageIOHandler to *format.* The format is
    /// most useful for handlers that support multiple image formats.
    /// 
    /// **See also:** [`format()`]
    /// 
    /// Sets the format of the QImageIOHandler to *format.* The format is
    /// most useful for handlers that support multiple image formats.
    /// 
    /// This function is declared const so that it can be called from canRead().
    /// 
    /// **See also:** [`format()`]
    [org_name(setFormat)]
    set_format_2(format: &ByteArrayType),
    /// 
    /// Returns the format that is currently assigned to
    /// QImageIOHandler. If no format has been assigned, an empty string
    /// is returned.
    /// 
    /// **See also:** [`set_format()`]
    format() -> ByteArray,
    /// 
    /// Use format() instead.
    [event] name() -> ByteArray,
    /// 
    /// Returns `true` if an image can be read from the device (i.e., the
    /// image format is supported, the device can be read from and the
    /// initial header information suggests that the image can be read);
    /// otherwise returns `false.`
    /// 
    /// When reimplementing canRead(), make sure that the I/O device
    /// (device()) is left in its original state (e.g., by using peek()
    /// rather than read()).
    /// 
    /// **See also:** [`read()`]
    /// [`IODevice::peek`]
    [event] can_read() -> bool,
    /// 
    /// Read an image from the device, and stores it in *image.*
    /// Returns `true` if the image is successfully read; otherwise returns
    /// false.
    /// 
    /// For image formats that support incremental loading, and for animation
    /// formats, the image handler can assume that *image* points to the
    /// previous frame.
    /// 
    /// **See also:** [`can_read()`]
    [event] read(image: *ImageType) -> bool,
    /// 
    /// Writes the image *image* to the assigned device. Returns `true` on
    /// success; otherwise returns `false.`
    /// 
    /// The default implementation does nothing, and simply returns `false.`
    [event] write(image: &ImageType) -> bool,
    /// 
    /// Returns the value assigned to *option* as a QVariant. The type of
    /// the value depends on the option. For example, option(Size) returns
    /// a QSize variant.
    /// 
    /// **See also:** [`set_option()`]
    /// [`supports_option()`]
    [event] option(option: ImageIOHandler::ImageOption) -> Variant,
    /// 
    /// Sets the option *option* with the value *value.*
    /// 
    /// **See also:** [`option()`]
    /// ImageOption
    [event] set_option(option: ImageIOHandler::ImageOption, value: &VariantType),
    /// 
    /// Returns `true` if the QImageIOHandler supports the option *option;*
    /// otherwise returns `false.` For example, if the QImageIOHandler
    /// supports the [Size](Size)
    /// option, supportsOption(Size) must return
    /// true.
    /// 
    /// **See also:** [`set_option()`]
    /// [`option()`]
    [event] supports_option(option: ImageIOHandler::ImageOption) -> bool,
    /// 
    /// For image formats that support animation, this function jumps to the
    /// next image.
    /// 
    /// The default implementation does nothing, and returns `false.`
    [event] jump_to_next_image() -> bool,
    /// 
    /// For image formats that support animation, this function jumps to the image
    /// whose sequence number is *imageNumber.* The next call to read() will
    /// attempt to read this image.
    /// 
    /// The default implementation does nothing, and returns `false.`
    [event] jump_to_image(image_number: i32) -> bool,
    /// 
    /// For image formats that support animation, this function returns
    /// the number of times the animation should loop. If the image format
    /// does not support animation, 0 is returned.
    [event] loop_count() -> i32,
    /// 
    /// For image formats that support animation, this function returns
    /// the number of images in the animation. If the image format does
    /// not support animation, or if it is unable to determine the number
    /// of images, 0 is returned.
    /// 
    /// The default implementation returns 1 if canRead() returns `true;`
    /// otherwise 0 is returned.
    [event] image_count() -> i32,
    /// 
    /// For image formats that support animation, this function returns
    /// the number of milliseconds to wait until reading the next
    /// image. If the image format does not support animation, 0 is
    /// returned.
    [event] next_image_delay() -> i32,
    /// 
    /// For image formats that support animation, this function returns
    /// the sequence number of the current image in the animation. If
    /// this function is called before any image is read(), -1 is
    /// returned. The number of the first image in the sequence is 0.
    /// 
    /// If the image format does not support animation, 0 is returned.
    /// 
    /// **See also:** [`read()`]
    [event] current_image_number() -> i32,
    /// 
    /// Returns the rect of the current image. If no rect is defined for the
    /// image, and empty QRect() is returned.
    /// 
    /// This function is useful for animations, where only parts of the frame
    /// may be updated at a time.
    [event] current_image_rect() -> Rect,
}

[org_name(QImageIOHandler)]
enum ImageOption {
    /// The original size of an image. A handler that supports this option is expected to read the size of the image from the image metadata, and return this size from option() as a QSize.
    Size = 0,
    /// The clip rect, or ROI (Region Of Interest). A handler that supports this option is expected to only read the provided QRect area from the original image in read(), before any other transformation is applied.
    ClipRect = 1,
    /// The image description. Some image formats, such as GIF and PNG, allow embedding of text or comments into the image data (e.g., for storing copyright information). It's common that the text is stored in key-value pairs, but some formats store all text in one continuous block. QImageIOHandler returns the text as one QString, where keys and values are separated by a ':', and keys-value pairs are separated by two newlines (\\n\\n). For example, "Title: Sunset\\n\\nAuthor: Jim Smith\\nSarah Jones\\n\\n". Formats that store text in a single block can use "Description" as the key.
    Description = 2,
    /// The scaled clip rect (or ROI, Region Of Interest) of the image. A handler that supports this option is expected to apply the provided clip rect (a QRect), after applying any scaling (ScaleSize) or regular clipping (ClipRect). If the handler does not support this option, QImageReader will apply the scaled clip rect after the image has been read.
    ScaledClipRect = 3,
    /// The scaled size of the image. A handler that supports this option is expected to scale the image to the provided size (a QSize), after applying any clip rect transformation (ClipRect). If the handler does not support this option, QImageReader will perform the scaling after the image has been read.
    ScaledSize = 4,
    /// The compression ratio of the image data. A handler that supports this option is expected to set its compression rate depending on the value of this option (an int) when writing.
    CompressionRatio = 5,
    /// The gamma level of the image. A handler that supports this option is expected to set the image gamma level depending on the value of this option (a float) when writing.
    Gamma = 6,
    /// The quality level of the image. A handler that supports this option is expected to set the image quality level depending on the value of this option (an int) when writing.
    Quality = 7,
    /// The name of the image. A handler that supports this option is expected to read the name from the image metadata and return this as a QString, or when writing an image it is expected to store the name in the image metadata.
    Name = 8,
    /// The subtype of the image. A handler that supports this option can use the subtype value to help when reading and writing images. For example, a PPM handler may have a subtype value of "ppm" or "ppmraw".
    SubType = 9,
    /// A handler that supports this option is expected to read the image in several passes, as if it was an animation. QImageReader will treat the image as an animation.
    IncrementalReading = 10,
    /// The endianness of the image. Certain image formats can be stored as BigEndian or LittleEndian. A handler that supports Endianness uses the value of this option to determine how the image should be stored.
    Endianness = 11,
    /// Image formats that support animation return true for this value in supportsOption(); otherwise, false is returned.
    Animation = 12,
    /// Certain image formats allow the background color to be specified. A handler that supports BackgroundColor initializes the background color to this option (a QColor) when reading an image.
    BackgroundColor = 13,
    /// The image's data format returned by the handler. This can be any of the formats listed in QImage::Format.
    ImageFormat = 14,
    /// Image formats that support different saving variants should return a list of supported variant names (QList<QByteArray>) in this option.
    SupportedSubTypes = 15,
    OptimizedWrite = 16,
    ProgressiveScanWrite = 17,
    ImageTransformation = 18,
    TransformedByDefault = 19,
}

[org_name(QImageIOHandler)]
enum Transformation {
    /// No transformation should be applied.
    TransformationNone = 0,
    /// Mirror the image horizontally.
    TransformationMirror = 1,
    /// Mirror the image vertically.
    TransformationFlip = 2,
    /// Rotate the image 180 degrees. This is the same as mirroring it both horizontally and vertically.
    TransformationRotate180 = 3,
    /// Rotate the image 90 degrees.
    TransformationRotate90 = 4,
    /// Mirror the image horizontally and then rotate it 90 degrees.
    TransformationMirrorAndRotate90 = 5,
    /// Mirror the image vertically and then rotate it 90 degrees.
    TransformationFlipAndRotate90 = 6,
    /// Rotate the image 270 degrees. This is the same as mirroring it both horizontally, vertically and then rotating it 90 degrees.
    TransformationRotate270 = 7,
}

// vim: syntax=rust expandtab ts=4 sw=4
