/// 
/// QMouseEventTransition is part of [The State Machine Framework](The%20State%20Machine%20Framework)
/// 
/// 
/// **See also:** [`State::add_transition`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct MouseEventTransition : EventTransition {
    /// 
    /// 
    /// Returns the button that this mouse event transition checks for.
    button() -> Rute::MouseButton,
    /// 
    /// Sets the *button* that this mouse event transition will check for.
    set_button(button: Rute::MouseButton),
    /// 
    /// 
    /// Returns the keyboard modifier mask that this mouse event transition checks
    /// for.
    modifier_mask() -> Rute::KeyboardModifiers,
    /// 
    /// Sets the keyboard modifier mask that this mouse event transition will
    /// check for to *modifierMask.*
    set_modifier_mask(modifiers: Rute::KeyboardModifiers),
    /// 
    /// Returns the hit test path for this mouse event transition.
    hit_test_path() -> PainterPath,
    /// 
    /// Sets the hit test path for this mouse event transition to *path.*
    /// If a valid path has been set, the transition will only trigger if the mouse
    /// event position (QMouseEvent::pos()) is inside the path.
    /// 
    /// **See also:** [`PainterPath::contains`]
    set_hit_test_path(path: &PainterPathType),
    /// 
    [event] on_transition(event: *EventType),
    /// 
    [event] event_test(event: *EventType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
