///     \class QTextBrowser
///     \brief The QTextBrowser class provides a rich text browser with hypertext navigation.
/// 
///     \ingroup richtext-processing
///     \inmodule QtWidgets
/// 
///     This class extends QTextEdit (in read-only mode), adding some navigation
///     functionality so that users can follow links in hypertext documents.
/// 
///     If you want to provide your users with an editable rich text editor,
///     use QTextEdit. If you want a text browser without hypertext navigation
///     use QTextEdit, and use QTextEdit::setReadOnly() to disable
///     editing. If you just need to display a small piece of rich text
///     use QLabel.
/// 
///     \section1 Document Source and Contents
/// 
///     The contents of QTextEdit are set with setHtml() or setPlainText(),
///     but QTextBrowser also implements the setSource() function, making it
///     possible to use a named document as the source text. The name is looked
///     up in a list of search paths and in the directory of the current document
///     factory.
/// 
///     If a document name ends with
///     an anchor (for example, "\c #anchor"), the text browser automatically
///     scrolls to that position (using scrollToAnchor()). When the user clicks
///     on a hyperlink, the browser will call setSource() itself with the link's
///     \c href value as argument. You can track the current source by connecting
///     to the sourceChanged() signal.
/// 
///     \section1 Navigation
/// 
///     QTextBrowser provides backward() and forward() slots which you can
///     use to implement Back and Forward buttons. The home() slot sets
///     the text to the very first document displayed. The anchorClicked()
///     signal is emitted when the user clicks an anchor. To override the
///     default navigation behavior of the browser, call the setSource()
///     function to supply new document text in a slot connected to this
///     signal.
/// 
///     If you want to load documents stored in the Qt resource system use
///     \c{qrc} as the scheme in the URL to load. For example, for the document
///     resource path \c{:/docs/index.html} use \c{qrc:/docs/index.html} as
///     the URL with setSource().
/// 
///     \sa QTextEdit, QTextDocument
struct TextBrowser : TextEdit {
    source() -> Url,
    search_paths() -> [String],
    set_search_paths(paths: &[String]),
    [event] load_resource(type: i32, name: &UrlType) -> Variant,
    is_backward_available() -> bool,
    is_forward_available() -> bool,
    clear_history(),
    history_title(arg0: i32) -> String,
    history_url(arg0: i32) -> Url,
    backward_history_count() -> i32,
    forward_history_count() -> i32,
    open_external_links() -> bool,
    set_open_external_links(open: bool),
    open_links() -> bool,
    set_open_links(open: bool),
    [event] set_source(name: &UrlType),
    [event] backward(),
    [event] forward(),
    [event] home(),
    [event] reload(),
    [signal] backward_available(arg0: bool),
    [signal] forward_available(arg0: bool),
    [signal] history_changed(),
    [signal] source_changed(arg0: &UrlType),
    [signal] highlighted(arg0: &UrlType),
    [signal] highlighted(arg0: String),
    [signal] anchor_clicked(arg0: &UrlType),
    [event] event(e: *EventType) -> bool,
    [event] key_press_event(ev: *KeyEventType),
    [event] mouse_move_event(ev: *MouseEventType),
    [event] mouse_press_event(ev: *MouseEventType),
    [event] mouse_release_event(ev: *MouseEventType),
    [event] focus_out_event(ev: *FocusEventType),
    [event] focus_next_prev_child(next: bool) -> bool,
    [event] paint_event(e: *PaintEventType),
}

// vim: syntax=rust expandtab ts=4 sw=4
