/// 
/// This class extends QTextEdit (in read-only mode), adding some navigation
/// functionality so that users can follow links in hypertext documents.
/// 
/// If you want to provide your users with an editable rich text editor,
/// use QTextEdit. If you want a text browser without hypertext navigation
/// use QTextEdit, and use QTextEdit::setReadOnly() to disable
/// editing. If you just need to display a small piece of rich text
/// use QLabel.
/// 
/// # Document Source and Contents
/// 
/// The contents of QTextEdit are set with setHtml() or setPlainText(),
/// but QTextBrowser also implements the setSource() function, making it
/// possible to use a named document as the source text. The name is looked
/// up in a list of search paths and in the directory of the current document
/// factory.
/// 
/// If a document name ends with
/// an anchor (for example, ), the text browser automatically
/// scrolls to that position (using scrollToAnchor()). When the user clicks
/// on a hyperlink, the browser will call setSource() itself with the link's
/// `href` value as argument. You can track the current source by connecting
/// to the sourceChanged() signal.
/// 
/// # Navigation
/// 
/// QTextBrowser provides backward() and forward() slots which you can
/// use to implement Back and Forward buttons. The home() slot sets
/// the text to the very first document displayed. The anchorClicked()
/// signal is emitted when the user clicks an anchor. To override the
/// default navigation behavior of the browser, call the setSource()
/// function to supply new document text in a slot connected to this
/// signal.
/// 
/// If you want to load documents stored in the Qt resource system use
/// `qrc` as the scheme in the URL to load. For example, for the document
/// resource path `:/docs/index.html` use `qrc:/docs/index.html` as
/// the URL with setSource().
/// 
/// **See also:** QTextEdit
/// QTextDocument
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct TextBrowser : TextEdit {
    /// 
    /// This is a an invalid url if no document is displayed or if the
    /// source is unknown.
    /// 
    /// When setting this property QTextBrowser tries to find a document
    /// with the specified name in the paths of the searchPaths property
    /// and directory of the current source, unless the value is an absolute
    /// file path. It also checks for optional anchors and scrolls the document
    /// accordingly
    /// 
    /// If the first tag in the document is `<qt type=detail>` , the
    /// document is displayed as a popup rather than as new document in
    /// the browser window itself. Otherwise, the document is displayed
    /// normally in the text browser with the text set to the contents of
    /// the named document with setHtml().
    /// 
    /// By default, this property contains an empty URL.
    /// 
    /// This signal is emitted when the source has changed, *src*
    /// being the new source.
    /// 
    /// Source changes happen both programmatically when calling
    /// setSource(), forward(), backword() or home() or when the user
    /// clicks on links or presses the equivalent key sequences.
    source() -> Url,
    /// 
    /// QTextBrowser uses this list to locate images and documents.
    /// 
    /// By default, this property contains an empty string list.
    search_paths() -> [String],
    set_search_paths(paths: &[String]),
    /// 
    /// This function is called when the document is loaded and for
    /// each image in the document. The *type* indicates the type of resource
    /// to be loaded. An invalid QVariant is returned if the resource cannot be
    /// loaded.
    /// 
    /// The default implementation ignores *type* and tries to locate
    /// the resources by interpreting *name* as a file name. If it is
    /// not an absolute path it tries to find the file in the paths of
    /// the [searchPaths](searchPaths)
    /// property and in the same directory as the
    /// current source. On success, the result is a QVariant that stores
    /// a QByteArray with the contents of the file.
    /// 
    /// If you reimplement this function, you can return other QVariant
    /// types. The table below shows which variant types are supported
    /// depending on the resource type:
    /// 
    /// * ResourceType
    /// * QVariant::Type
    /// * QTextDocument::HtmlResource
    /// * QString or QByteArray
    /// * QTextDocument::ImageResource
    /// * QImage, QPixmap or QByteArray
    /// * QTextDocument::StyleSheetResource
    /// * QString or QByteArray
    [event] load_resource(type: i32, name: &UrlType) -> Variant,
    /// 
    /// Returns `true` if the text browser can go backward in the document history
    /// using backward().
    /// 
    /// **See also:** backwardAvailable()
    /// backward()
    is_backward_available() -> bool,
    /// 
    /// Returns `true` if the text browser can go forward in the document history
    /// using forward().
    /// 
    /// **See also:** forwardAvailable()
    /// forward()
    is_forward_available() -> bool,
    /// 
    /// Clears the history of visited documents and disables the forward and
    /// backward navigation.
    /// 
    /// **See also:** backward()
    /// forward()
    clear_history(),
    /// 
    /// Returns the documentTitle() of the HistoryItem.
    /// 
    /// * Input
    /// * Return
    /// * *i* < 0
    /// * [backward()](backward())
    /// history
    /// * *i* == 0
    /// * current, see QTextBrowser::source()
    /// * *i* > 0
    /// * [forward()](forward())
    /// history
    /// 
    history_title(arg0: i32) -> String,
    /// 
    /// Returns the url of the HistoryItem.
    /// 
    /// * Input
    /// * Return
    /// * *i* < 0
    /// * [backward()](backward())
    /// history
    /// * *i* == 0
    /// * current, see QTextBrowser::source()
    /// * *i* > 0
    /// * [forward()](forward())
    /// history
    /// 
    history_url(arg0: i32) -> Url,
    /// 
    /// Returns the number of locations backward in the history.
    /// 
    backward_history_count() -> i32,
    /// 
    /// Returns the number of locations forward in the history.
    /// 
    forward_history_count() -> i32,
    /// 
    /// Specifies whether QTextBrowser should automatically open links to external
    /// sources using QDesktopServices::openUrl() instead of emitting the
    /// anchorClicked signal. Links are considered external if their scheme is
    /// neither file or qrc.
    /// 
    /// The default value is false.
    open_external_links() -> bool,
    set_open_external_links(open: bool),
    /// 
    /// This property specifies whether QTextBrowser should automatically open links the user tries to
    /// activate by mouse or keyboard.
    /// 
    /// Regardless of the value of this property the anchorClicked signal is always emitted.
    /// 
    /// The default value is true.
    open_links() -> bool,
    set_open_links(open: bool),
    [event] set_source(name: &UrlType),
    /// 
    /// This signal is emitted when the availability of backward()
    /// changes. *available* is false when the user is at home();
    /// otherwise it is true.
    /// 
    /// Changes the document displayed to the previous document in the
    /// list of documents built by navigating links. Does nothing if there
    /// is no previous document.
    /// 
    /// **See also:** forward()
    /// backwardAvailable()
    /// 
    /// Returns the number of locations backward in the history.
    /// 
    [event] backward(),
    /// 
    /// This signal is emitted when the availability of forward() changes.
    /// *available* is true after the user navigates backward() and false
    /// when the user navigates or goes forward().
    /// 
    /// Changes the document displayed to the next document in the list of
    /// documents built by navigating links. Does nothing if there is no
    /// next document.
    /// 
    /// **See also:** backward()
    /// forwardAvailable()
    /// 
    /// Returns the number of locations forward in the history.
    /// 
    [event] forward(),
    /// 
    /// Changes the document displayed to be the first document from
    /// the history.
    [event] home(),
    /// 
    /// Reloads the current set source.
    [event] reload(),
    /// 
    /// This signal is emitted when the availability of backward()
    /// changes. *available* is false when the user is at home();
    /// otherwise it is true.
    [signal] backward_available(arg0: bool),
    /// 
    /// This signal is emitted when the availability of forward() changes.
    /// *available* is true after the user navigates backward() and false
    /// when the user navigates or goes forward().
    [signal] forward_available(arg0: bool),
    /// 
    /// This signal is emitted when the history changes.
    /// 
    /// **See also:** historyTitle()
    /// historyUrl()
    [signal] history_changed(),
    /// 
    /// This signal is emitted when the source has changed, *src*
    /// being the new source.
    /// 
    /// Source changes happen both programmatically when calling
    /// setSource(), forward(), backword() or home() or when the user
    /// clicks on links or presses the equivalent key sequences.
    [signal] source_changed(arg0: &UrlType),
    /// 
    /// This signal is emitted when the user has selected but not
    /// activated an anchor in the document. The URL referred to by the
    /// anchor is passed in *link.*
    /// **Overloads**
    /// Convenience signal that allows connecting to a slot
    /// that takes just a QString, like for example QStatusBar's
    /// message().
    [signal] highlighted(arg0: &UrlType),
    /// 
    /// This signal is emitted when the user has selected but not
    /// activated an anchor in the document. The URL referred to by the
    /// anchor is passed in *link.*
    /// **Overloads**
    /// Convenience signal that allows connecting to a slot
    /// that takes just a QString, like for example QStatusBar's
    /// message().
    [signal] highlighted_2(arg0: String),
    /// 
    /// This signal is emitted when the user clicks an anchor. The
    /// URL referred to by the anchor is passed in *link.*
    /// 
    /// Note that the browser will automatically handle navigation to the
    /// location specified by *link* unless the openLinks property
    /// is set to false or you call setSource() in a slot connected.
    /// This mechanism is used to override the default navigation features of the browser.
    [signal] anchor_clicked(arg0: &UrlType),
    /// 
    [event] event(e: *EventType) -> bool,
    /// 
    /// The event *ev* is used to provide the following keyboard shortcuts:
    /// * Keypress
    /// * Action
    /// * Alt+Left Arrow
    /// * [backward()](backward())
    /// 
    /// * Alt+Right Arrow
    /// * [forward()](forward())
    /// 
    /// * Alt+Up Arrow
    /// * [home()](home())
    /// 
    [event] key_press_event(ev: *KeyEventType),
    /// 
    [event] mouse_move_event(ev: *MouseEventType),
    /// 
    [event] mouse_press_event(ev: *MouseEventType),
    /// 
    [event] mouse_release_event(ev: *MouseEventType),
    /// 
    [event] focus_out_event(ev: *FocusEventType),
    /// 
    [event] focus_next_prev_child(next: bool) -> bool,
    /// 
    [event] paint_event(e: *PaintEventType),
}

// vim: syntax=rust expandtab ts=4 sw=4
