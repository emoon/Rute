enum GraphicsItemFlag {
    ItemIsMovable,
    ItemIsSelectable,
    ItemIsFocusable,
    ItemClipsToShape,
    ItemClipsChildrenToShape,
    ItemIgnoresTransformations,
    ItemIgnoresParentOpacity,
    ItemDoesntPropagateOpacityToChildren,
    ItemStacksBehindParent,
    ItemUsesExtendedStyleOption,
    ItemHasNoContents,
    ItemSendsGeometryChanges,
    ItemAcceptsInputMethod,
    ItemNegativeZStacksBehindParent,
    ItemIsPanel,
    ItemIsFocusScope,
    ItemSendsScenePositionChanges,
    ItemStopsClickFocusPropagation,
    ItemStopsFocusHandling,
    ItemContainsChildrenInShape,
}

enum GraphicsItemChange {
    ItemPositionChange,
    ItemMatrixChange,
    ItemVisibleChange,
    ItemEnabledChange,
    ItemSelectedChange,
    ItemParentChange,
    ItemChildAddedChange,
    ItemChildRemovedChange,
    ItemTransformChange,
    ItemPositionHasChanged,
    ItemTransformHasChanged,
    ItemSceneChange,
    ItemVisibleHasChanged,
    ItemEnabledHasChanged,
    ItemSelectedHasChanged,
    ItemParentHasChanged,
    ItemSceneHasChanged,
    ItemCursorChange,
    ItemCursorHasChanged,
    ItemToolTipChange,
    ItemToolTipHasChanged,
    ItemFlagsChange,
    ItemFlagsHaveChanged,
    ItemZValueChange,
    ItemZValueHasChanged,
    ItemOpacityChange,
    ItemOpacityHasChanged,
    ItemScenePositionHasChanged,
    ItemRotationChange,
    ItemRotationHasChanged,
    ItemScaleChange,
    ItemScaleHasChanged,
    ItemTransformOriginPointChange,
    ItemTransformOriginPointHasChanged,
}

enum CacheMode {
    NoCache,
    ItemCoordinateCache,
    DeviceCoordinateCache,
}

enum PanelModality {
    NonModal,
    PanelModal,
    SceneModal,
}

enum GraphicsItemFixMeEnums {
    Type,
    UserType,
}

enum Extension {
    UserExtension,
}


struct GraphicsItem {
    scene() -> GraphicsScene?,
    parent_item() -> GraphicsItem?,
    top_level_item() -> GraphicsItem?,
    parent_object() -> GraphicsObject?,
    parent_widget() -> GraphicsWidget?,
    top_level_widget() -> GraphicsWidget?,
    window() -> GraphicsWidget?,
    panel() -> GraphicsItem?,
    set_parent_item(parent: &GraphicsItemType),
    child_items() -> [GraphicsItem?],
    is_widget() -> bool,
    is_window() -> bool,
    is_panel() -> bool,
    to_graphics_object() -> GraphicsObject?,
    to_graphics_object() -> GraphicsObject?,
    group() -> GraphicsItemGroup?,
    set_group(group: &GraphicsItemGroupType),
    flags() -> GraphicsItemFlags,
    set_flag(flag: GraphicsItem::GraphicsItemFlag, enabled: bool),
    set_flags(flags: GraphicsItemFlags),
    cache_mode() -> GraphicsItem::CacheMode,
    set_cache_mode(mode: GraphicsItem::CacheMode, cache_size: &SizeType),
    panel_modality() -> GraphicsItem::PanelModality,
    set_panel_modality(panel_modality: GraphicsItem::PanelModality),
    is_blocked_by_modal_panel(blocking_panel: &GraphicsItemType) -> bool,
    tool_tip() -> String,
    set_tool_tip(tool_tip: String),
    cursor() -> Cursor,
    set_cursor(cursor: &CursorType),
    has_cursor() -> bool,
    unset_cursor(),
    is_visible() -> bool,
    is_visible_to(parent: &GraphicsItemType) -> bool,
    set_visible(visible: bool),
    hide(),
    show(),
    is_enabled() -> bool,
    set_enabled(enabled: bool),
    is_selected() -> bool,
    set_selected(selected: bool),
    accept_drops() -> bool,
    set_accept_drops(on: bool),
    opacity() -> f32,
    effective_opacity() -> f32,
    set_opacity(opacity: f32),
    graphics_effect() -> GraphicsEffect?,
    set_graphics_effect(effect: &GraphicsEffectType),
    accepted_mouse_buttons() -> Rute::MouseButtons,
    set_accepted_mouse_buttons(buttons: Rute::MouseButtons),
    accept_hover_events() -> bool,
    set_accept_hover_events(enabled: bool),
    accept_touch_events() -> bool,
    set_accept_touch_events(enabled: bool),
    filters_child_events() -> bool,
    set_filters_child_events(enabled: bool),
    handles_child_events() -> bool,
    set_handles_child_events(enabled: bool),
    is_active() -> bool,
    set_active(active: bool),
    has_focus() -> bool,
    set_focus(focus_reason: Rute::FocusReason),
    clear_focus(),
    focus_proxy() -> GraphicsItem?,
    set_focus_proxy(item: &GraphicsItemType),
    focus_item() -> GraphicsItem?,
    focus_scope_item() -> GraphicsItem?,
    grab_mouse(),
    ungrab_mouse(),
    grab_keyboard(),
    ungrab_keyboard(),
    pos() -> PointF,
    x() -> f32,
    set_x(x: f32),
    y() -> f32,
    set_y(y: f32),
    scene_pos() -> PointF,
    set_pos(pos: &PointFType),
    set_pos(x: f32, y: f32),
    move_by(dx: f32, dy: f32),
    ensure_visible(rect: &RectFType, xmargin: i32, ymargin: i32),
    ensure_visible(x: f32, y: f32, w: f32, h: f32, xmargin: i32, ymargin: i32),
    scene_transform() -> Transform,
    device_transform(viewport_transform: &TransformType) -> Transform,
    item_transform(other: &GraphicsItemType, ok: &bool) -> Transform,
    set_transform(matrix: &TransformType, combine: bool),
    reset_transform(),
    set_rotation(angle: f32),
    rotation() -> f32,
    set_scale(scale: f32),
    scale() -> f32,
    set_transformations(transformations: [&GraphicsTransformType]),
    set_transform_origin_point(origin: &PointFType),
    set_transform_origin_point(ax: f32, ay: f32),
    [override] advance(phase: i32),
    z_value() -> f32,
    set_z_value(z: f32),
    stack_before(sibling: &GraphicsItemType),
    [override] bounding_rect() -> RectF,
    children_bounding_rect() -> RectF,
    scene_bounding_rect() -> RectF,
    [override] shape() -> PainterPath,
    is_clipped() -> bool,
    clip_path() -> PainterPath,
    [override] contains(point: &PointFType) -> bool,
    [override] collides_with_item(other: &GraphicsItemType, mode: Rute::ItemSelectionMode) -> bool,
    [override] collides_with_path(path: &PainterPathType, mode: Rute::ItemSelectionMode) -> bool,
    colliding_items(mode: Rute::ItemSelectionMode) -> [GraphicsItem?],
    is_obscured(rect: &RectFType) -> bool,
    is_obscured(x: f32, y: f32, w: f32, h: f32) -> bool,
    [override] is_obscured_by(item: &GraphicsItemType) -> bool,
    [override] opaque_area() -> PainterPath,
    bounding_region(item_to_device_transform: &TransformType) -> Region,
    bounding_region_granularity() -> f32,
    set_bounding_region_granularity(granularity: f32),
    [override] paint(painter: &PainterType, option: &StyleOptionGraphicsItemType, widget: &WidgetType),
    update(rect: &RectFType),
    update(x: f32, y: f32, width: f32, height: f32),
    scroll(dx: f32, dy: f32, rect: &RectFType),
    map_to_item(item: &GraphicsItemType, point: &PointFType) -> PointF,
    map_to_parent(point: &PointFType) -> PointF,
    map_to_scene(point: &PointFType) -> PointF,
    map_to_item(item: &GraphicsItemType, rect: &RectFType) -> PolygonF,
    map_to_parent(rect: &RectFType) -> PolygonF,
    map_to_scene(rect: &RectFType) -> PolygonF,
    map_rect_to_item(item: &GraphicsItemType, rect: &RectFType) -> RectF,
    map_rect_to_parent(rect: &RectFType) -> RectF,
    map_rect_to_scene(rect: &RectFType) -> RectF,
    map_to_item(item: &GraphicsItemType, polygon: &PolygonFType) -> PolygonF,
    map_to_parent(polygon: &PolygonFType) -> PolygonF,
    map_to_scene(polygon: &PolygonFType) -> PolygonF,
    map_to_item(item: &GraphicsItemType, path: &PainterPathType) -> PainterPath,
    map_to_parent(path: &PainterPathType) -> PainterPath,
    map_to_scene(path: &PainterPathType) -> PainterPath,
    map_from_item(item: &GraphicsItemType, point: &PointFType) -> PointF,
    map_from_parent(point: &PointFType) -> PointF,
    map_from_scene(point: &PointFType) -> PointF,
    map_from_item(item: &GraphicsItemType, rect: &RectFType) -> PolygonF,
    map_from_parent(rect: &RectFType) -> PolygonF,
    map_from_scene(rect: &RectFType) -> PolygonF,
    map_rect_from_item(item: &GraphicsItemType, rect: &RectFType) -> RectF,
    map_rect_from_parent(rect: &RectFType) -> RectF,
    map_rect_from_scene(rect: &RectFType) -> RectF,
    map_from_item(item: &GraphicsItemType, polygon: &PolygonFType) -> PolygonF,
    map_from_parent(polygon: &PolygonFType) -> PolygonF,
    map_from_scene(polygon: &PolygonFType) -> PolygonF,
    map_from_item(item: &GraphicsItemType, path: &PainterPathType) -> PainterPath,
    map_from_parent(path: &PainterPathType) -> PainterPath,
    map_from_scene(path: &PainterPathType) -> PainterPath,
    map_to_item(item: &GraphicsItemType, x: f32, y: f32) -> PointF,
    map_to_parent(x: f32, y: f32) -> PointF,
    map_to_scene(x: f32, y: f32) -> PointF,
    map_to_item(item: &GraphicsItemType, x: f32, y: f32, w: f32, h: f32) -> PolygonF,
    map_to_parent(x: f32, y: f32, w: f32, h: f32) -> PolygonF,
    map_to_scene(x: f32, y: f32, w: f32, h: f32) -> PolygonF,
    map_rect_to_item(item: &GraphicsItemType, x: f32, y: f32, w: f32, h: f32) -> RectF,
    map_rect_to_parent(x: f32, y: f32, w: f32, h: f32) -> RectF,
    map_rect_to_scene(x: f32, y: f32, w: f32, h: f32) -> RectF,
    map_from_item(item: &GraphicsItemType, x: f32, y: f32) -> PointF,
    map_from_parent(x: f32, y: f32) -> PointF,
    map_from_scene(x: f32, y: f32) -> PointF,
    map_from_item(item: &GraphicsItemType, x: f32, y: f32, w: f32, h: f32) -> PolygonF,
    map_from_parent(x: f32, y: f32, w: f32, h: f32) -> PolygonF,
    map_from_scene(x: f32, y: f32, w: f32, h: f32) -> PolygonF,
    map_rect_from_item(item: &GraphicsItemType, x: f32, y: f32, w: f32, h: f32) -> RectF,
    map_rect_from_parent(x: f32, y: f32, w: f32, h: f32) -> RectF,
    map_rect_from_scene(x: f32, y: f32, w: f32, h: f32) -> RectF,
    is_ancestor_of(child: &GraphicsItemType) -> bool,
    common_ancestor_item(other: &GraphicsItemType) -> GraphicsItem?,
    is_under_mouse() -> bool,
    data(key: i32) -> Variant,
    set_data(key: i32, value: &VariantType),
    input_method_hints() -> Rute::InputMethodHints,
    set_input_method_hints(hints: Rute::InputMethodHints),
    [override] type() -> i32,
    install_scene_event_filter(filter_item: &GraphicsItemType),
    remove_scene_event_filter(filter_item: &GraphicsItemType),
    update_micro_focus(),
    [override] scene_event_filter(watched: &GraphicsItemType, event: &EventType) -> bool,
    [override] scene_event(event: &EventType) -> bool,
    [override] context_menu_event(event: &GraphicsSceneContextMenuEventType),
    [override] drag_enter_event(event: &GraphicsSceneDragDropEventType),
    [override] drag_leave_event(event: &GraphicsSceneDragDropEventType),
    [override] drag_move_event(event: &GraphicsSceneDragDropEventType),
    [override] drop_event(event: &GraphicsSceneDragDropEventType),
    [override] focus_in_event(event: &FocusEventType),
    [override] focus_out_event(event: &FocusEventType),
    [override] hover_enter_event(event: &GraphicsSceneHoverEventType),
    [override] hover_move_event(event: &GraphicsSceneHoverEventType),
    [override] hover_leave_event(event: &GraphicsSceneHoverEventType),
    [override] key_press_event(event: &KeyEventType),
    [override] key_release_event(event: &KeyEventType),
    [override] mouse_press_event(event: &GraphicsSceneMouseEventType),
    [override] mouse_move_event(event: &GraphicsSceneMouseEventType),
    [override] mouse_release_event(event: &GraphicsSceneMouseEventType),
    [override] mouse_double_click_event(event: &GraphicsSceneMouseEventType),
    [override] wheel_event(event: &GraphicsSceneWheelEventType),
    [override] input_method_event(event: &InputMethodEventType),
    [override] input_method_query(query: Rute::InputMethodQuery) -> Variant,
    [override] item_change(change: GraphicsItem::GraphicsItemChange, value: &VariantType) -> Variant,
    [override] supports_extension(extension: GraphicsItem::Extension) -> bool,
    [override] set_extension(extension: GraphicsItem::Extension, variant: &VariantType),
    [override] extension(variant: &VariantType) -> Variant,
    add_to_index(),
    remove_from_index(),
}

// vim: syntax=rust expandtab ts=4 sw=4
