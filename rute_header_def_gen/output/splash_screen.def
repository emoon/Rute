///    \class QSplashScreen
///    \brief The QSplashScreen widget provides a splash screen that can
///    be shown during application startup.
/// 
///    \inmodule QtWidgets
/// 
///    A splash screen is a widget that is usually displayed when an
///    application is being started. Splash screens are often used for
///    applications that have long start up times (e.g. database or
///    networking applications that take time to establish connections) to
///    provide the user with feedback that the application is loading.
/// 
///    The splash screen appears in the center of the screen. It may be
///    useful to add the Qt::WindowStaysOnTopHint to the splash widget's
///    window flags if you want to keep it above all the other windows on
///    the desktop.
/// 
///    Some X11 window managers do not support the "stays on top" flag. A
///    solution is to set up a timer that periodically calls raise() on
///    the splash screen to simulate the "stays on top" effect.
/// 
///    The most common usage is to show a splash screen before the main
///    widget is displayed on the screen. This is illustrated in the
///    following code snippet in which a splash screen is displayed and
///    some initialization tasks are performed before the application's
///    main window is shown:
/// 
///    \snippet qsplashscreen/main.cpp 0
///    \dots
///    \snippet qsplashscreen/main.cpp 1
/// 
///    The user can hide the splash screen by clicking on it with the
///    mouse. Since the splash screen is typically displayed before the
///    event loop has started running, it is necessary to periodically
///    call QApplication::processEvents() to receive the mouse clicks.
/// 
///    It is sometimes useful to update the splash screen with messages,
///    for example, announcing connections established or modules loaded
///    as the application starts up:
/// 
///    \snippet code/src_gui_widgets_qsplashscreen.cpp 0
/// 
///    QSplashScreen supports this with the showMessage() function. If you
///    wish to do your own drawing you can get a pointer to the pixmap
///    used in the splash screen with pixmap().  Alternatively, you can
///    subclass QSplashScreen and reimplement drawContents().
struct SplashScreen : Widget {
    set_pixmap(pixmap: &PixmapType),
    pixmap() -> Pixmap,
    finish(w: *WidgetType),
    repaint(),
    message() -> String,
    show_message(message: String, alignment: i32, color: &ColorType),
    clear_message(),
    [signal] message_changed(message: String),
    [event] event(e: *EventType) -> bool,
    [event] draw_contents(painter: *PainterType),
    [event] mouse_press_event(arg0: *MouseEventType),
}

// vim: syntax=rust expandtab ts=4 sw=4
