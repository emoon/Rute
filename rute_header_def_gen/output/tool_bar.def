/// 
/// Toolbar buttons are added by adding *actions,* using addAction()
/// or insertAction(). Groups of buttons can be separated using
/// addSeparator() or insertSeparator(). If a toolbar button is not
/// appropriate, a widget can be inserted instead using addWidget() or
/// insertWidget(). Examples of suitable widgets are QSpinBox,
/// QDoubleSpinBox, and QComboBox. When a toolbar button is pressed, it
/// emits the actionTriggered() signal.
/// 
/// A toolbar can be fixed in place in a particular area (e.g., at the
/// top of the window), or it can be movable between toolbar areas;
/// see setMovable(), isMovable(), allowedAreas() and isAreaAllowed().
/// 
/// When a toolbar is resized in such a way that it is too small to
/// show all the items it contains, an extension button will appear as
/// the last item in the toolbar. Pressing the extension button will
/// pop up a menu containing the items that do not currently fit in
/// the toolbar.
/// 
/// When a QToolBar is not a child of a QMainWindow, it loses the ability
/// to populate the extension pop up with widgets added to the toolbar using
/// addWidget(). Please use widget actions created by inheriting QWidgetAction
/// and implementing QWidgetAction::createWidget() instead.
/// 
/// **See also:** [`ToolButton`]
/// [`Menu`]
/// [`Action`]
/// {Application Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct ToolBar : Widget {
    set_movable(movable: bool),
    is_movable() -> bool,
    set_allowed_areas(areas: Rute::ToolBarAreas),
    /// 
    /// This signal is emitted when the collection of allowed areas for the
    /// toolbar is changed. The new areas in which the toolbar can be positioned
    /// are specified by *allowedAreas.*
    /// 
    /// **See also:** allowedAreas
    /// 
    /// The default is Qt::AllToolBarAreas.
    /// 
    /// This property only makes sense if the toolbar is in a
    /// QMainWindow.
    /// 
    /// **See also:** movable
    allowed_areas() -> Rute::ToolBarAreas,
    /// 
    /// Returns `true` if this toolbar is dockable in the given *area;*
    /// otherwise returns `false.`
    is_area_allowed(area: Rute::ToolBarArea) -> bool,
    set_orientation(orientation: Rute::Orientation),
    /// 
    /// This signal is emitted when the orientation of the toolbar changes.
    /// The *orientation* parameter holds the toolbar's new orientation.
    /// 
    /// **See also:** orientation
    /// 
    /// The default is Qt::Horizontal.
    /// 
    /// This function should not be used when the toolbar is managed
    /// by QMainWindow. You can use QMainWindow::addToolBar() or
    /// QMainWindow::insertToolBar() if you wish to move a toolbar that
    /// is already added to a main window to another Qt::ToolBarArea.
    orientation() -> Rute::Orientation,
    /// 
    /// Removes all actions from the toolbar.
    /// 
    /// **See also:** [`remove_action()`]
    clear(),
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar.
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar.
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar. The action's [triggered()](QAction::triggered())
    /// 
    /// signal is connected to *member* in *receiver.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to *member* in *receiver.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *method* of the *receiver.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *functor.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *functor.*
    /// 
    /// If *context* is destroyed, the functor will not be called.
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *method* of the *receiver.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *functor.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *functor.*
    /// 
    /// If *context* is destroyed, the functor will not be called.
    add_action(text: String) -> Action?,
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar.
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar.
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar. The action's [triggered()](QAction::triggered())
    /// 
    /// signal is connected to *member* in *receiver.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to *member* in *receiver.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *method* of the *receiver.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *functor.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *functor.*
    /// 
    /// If *context* is destroyed, the functor will not be called.
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *method* of the *receiver.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *functor.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *functor.*
    /// 
    /// If *context* is destroyed, the functor will not be called.
    [org_name(addAction)]
    add_action_2(icon: &IconType, text: String) -> Action?,
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar.
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar.
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar. The action's [triggered()](QAction::triggered())
    /// 
    /// signal is connected to *member* in *receiver.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to *member* in *receiver.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *method* of the *receiver.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *functor.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *functor.*
    /// 
    /// If *context* is destroyed, the functor will not be called.
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *method* of the *receiver.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *functor.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *functor.*
    /// 
    /// If *context* is destroyed, the functor will not be called.
    [org_name(addAction)]
    add_action_3(text: String, receiver: *ObjectType, member: *char) -> Action?,
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar.
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar.
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar. The action's [triggered()](QAction::triggered())
    /// 
    /// signal is connected to *member* in *receiver.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to *member* in *receiver.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *method* of the *receiver.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *functor.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *text.* This action is added to
    /// the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *functor.*
    /// 
    /// If *context* is destroyed, the functor will not be called.
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *method* of the *receiver.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *functor.*
    /// 
    /// **Overloads**
    /// Creates a new action with the given *icon* and *text.* This
    /// action is added to the end of the toolbar. The action's
    /// [triggered()](QAction::triggered())
    /// signal is connected to the
    /// *functor.*
    /// 
    /// If *context* is destroyed, the functor will not be called.
    [org_name(addAction)]
    add_action_4(icon: &IconType, text: String, receiver: *ObjectType, member: *char) -> Action?,
    /// 
    /// Adds a separator to the end of the toolbar.
    /// 
    /// **See also:** [`insert_separator()`]
    add_separator() -> Action?,
    /// 
    /// Inserts a separator into the toolbar in front of the toolbar
    /// item associated with the *before* action.
    /// 
    /// **See also:** [`add_separator()`]
    insert_separator(before: *ActionType) -> Action?,
    /// 
    /// Adds the given *widget* to the toolbar as the toolbar's last
    /// item.
    /// 
    /// The toolbar takes ownership of *widget.*
    /// 
    /// If you add a QToolButton with this method, the toolbar's
    /// Qt::ToolButtonStyle will not be respected.
    /// 
    /// **Note**: You should use QAction::setVisible() to change the
    /// visibility of the widget. Using QWidget::setVisible(),
    /// QWidget::show() and QWidget::hide() does not work.
    /// 
    /// **See also:** [`insert_widget()`]
    add_widget(widget: *WidgetType) -> Action?,
    /// 
    /// Inserts the given *widget* in front of the toolbar item
    /// associated with the *before* action.
    /// 
    /// Note: You should use QAction::setVisible() to change the
    /// visibility of the widget. Using QWidget::setVisible(),
    /// QWidget::show() and QWidget::hide() does not work.
    /// 
    /// **See also:** [`add_widget()`]
    insert_widget(before: *ActionType, widget: *WidgetType) -> Action?,
    /// 
    /// Returns the action at point *p.* This function returns zero if no
    /// action was found.
    /// 
    /// **See also:** [`Widget::child_at`]
    /// **Overloads**
    /// Returns the action at the point *x,* *y.* This function returns
    /// zero if no action was found.
    action_at(p: &PointType) -> Action?,
    /// 
    /// Returns the action at point *p.* This function returns zero if no
    /// action was found.
    /// 
    /// **See also:** [`Widget::child_at`]
    /// **Overloads**
    /// Returns the action at the point *x,* *y.* This function returns
    /// zero if no action was found.
    [org_name(actionAt)]
    action_at_2(x: i32, y: i32) -> Action?,
    /// 
    /// Returns a checkable action that can be used to show or hide this
    /// toolbar.
    /// 
    /// The action's text is set to the toolbar's window title.
    /// 
    /// **See also:** [`Action::text()`]
    /// [`Widget::window_title()`]
    toggle_view_action() -> Action?,
    /// 
    /// This signal is emitted when the icon size is changed. The *iconSize* parameter holds the toolbar's new icon size.
    /// 
    /// **See also:** iconSize
    /// [`MainWindow::icon_size()`]
    /// 
    /// The default size is determined by the application's style and is
    /// derived from the QStyle::PM_ToolBarIconSize pixel metric. It is
    /// the maximum size an icon can have. Icons of smaller size will not
    /// be scaled up.
    icon_size() -> Size,
    /// 
    /// This signal is emitted when the tool button style is changed. The
    /// *toolButtonStyle* parameter holds the toolbar's new tool button
    /// style.
    /// 
    /// **See also:** toolButtonStyle
    /// [`MainWindow::tool_button_style()`]
    /// 
    /// This property defines the style of all tool buttons that are added
    /// as [QAction](QAction)
    /// s. Note that if you add a QToolButton with the
    /// addWidget() method, it will not get this button style.
    /// 
    /// To have the style of toolbuttons follow the system settings, set this property to Qt::ToolButtonFollowStyle.
    /// On Unix, the user settings from the desktop environment will be used.
    /// On other platforms, Qt::ToolButtonFollowStyle means icon only.
    /// 
    /// The default is Qt::ToolButtonIconOnly.
    tool_button_style() -> Rute::ToolButtonStyle,
    /// 
    /// Returns the widget associated with the specified *action.*
    /// 
    /// **See also:** [`add_widget()`]
    widget_for_action(action: *ActionType) -> Widget?,
    is_floatable() -> bool,
    set_floatable(floatable: bool),
    is_floating() -> bool,
    set_icon_size(icon_size: &SizeType),
    set_tool_button_style(tool_button_style: Rute::ToolButtonStyle),
    /// 
    /// This signal is emitted when an action in this toolbar is triggered.
    /// This happens when the action's tool button is pressed, or when the
    /// action is triggered in some other way outside the toolbar. The parameter
    /// holds the triggered *action.*
    [signal] action_triggered(action: *ActionType),
    /// 
    /// This signal is emitted when the toolbar becomes movable or fixed.
    /// If the toolbar can be moved, *movable* is true; otherwise it is
    /// false.
    /// 
    /// **See also:** movable
    [signal] movable_changed(movable: bool),
    /// 
    /// This signal is emitted when the collection of allowed areas for the
    /// toolbar is changed. The new areas in which the toolbar can be positioned
    /// are specified by *allowedAreas.*
    /// 
    /// **See also:** allowedAreas
    [signal] allowed_areas_changed(allowed_areas: Rute::ToolBarAreas),
    /// 
    /// This signal is emitted when the orientation of the toolbar changes.
    /// The *orientation* parameter holds the toolbar's new orientation.
    /// 
    /// **See also:** orientation
    [signal] orientation_changed(orientation: Rute::Orientation),
    /// 
    /// This signal is emitted when the icon size is changed. The *iconSize* parameter holds the toolbar's new icon size.
    /// 
    /// **See also:** iconSize
    /// [`MainWindow::icon_size()`]
    [signal] icon_size_changed(icon_size: &SizeType),
    /// 
    /// This signal is emitted when the tool button style is changed. The
    /// *toolButtonStyle* parameter holds the toolbar's new tool button
    /// style.
    /// 
    /// **See also:** toolButtonStyle
    /// [`MainWindow::tool_button_style()`]
    [signal] tool_button_style_changed(tool_button_style: Rute::ToolButtonStyle),
    /// 
    /// This signal is emitted when the [floating](floating)
    /// property changes.
    /// The *topLevel* parameter is true if the toolbar is now floating;
    /// otherwise it is false.
    /// 
    /// **See also:** [`is_window()`]
    [signal] top_level_changed(top_level: bool),
    /// 
    /// This signal is emitted when the toolbar becomes *visible* (or
    /// invisible). This happens when the widget is hidden or shown.
    [signal] visibility_changed(visible: bool),
    /// 
    [event] action_event(event: *ActionEventType),
    /// 
    [event] change_event(event: *EventType),
    /// 
    [event] paint_event(event: *PaintEventType),
    /// 
    [event] event(event: *EventType) -> bool,
    init_style_option(option: *StyleOptionToolBarType),
}

// vim: syntax=rust expandtab ts=4 sw=4
