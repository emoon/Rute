struct ToolBar : Widget {
    set_movable(movable: bool),
    is_movable() -> bool,
    set_allowed_areas(areas: Rute::ToolBarAreas),
    allowed_areas() -> Rute::ToolBarAreas,
    is_area_allowed(area: Rute::ToolBarArea) -> bool,
    set_orientation(orientation: Rute::Orientation),
    orientation() -> Rute::Orientation,
    clear(),
    add_action(text: String) -> &ActionType,
    add_action(icon: &IconType, text: String) -> &ActionType,
    add_action(text: String, receiver: &ObjectType, member: &char) -> &ActionType,
    add_action(icon: &IconType, text: String, receiver: &ObjectType, member: &char) -> &ActionType,
    insert_separator(before: &ActionType) -> &ActionType,
    add_widget(widget: &WidgetType) -> &ActionType,
    insert_widget(before: &ActionType, widget: &WidgetType) -> &ActionType,
    action_at(p: &PointType) -> &ActionType,
    action_at(x: i32, y: i32) -> &ActionType,
    toggle_view_action() -> &ActionType,
    icon_size() -> SizeType,
    tool_button_style() -> Rute::ToolButtonStyle,
    widget_for_action(action: &ActionType) -> &WidgetType,
    is_floatable() -> bool,
    set_floatable(floatable: bool),
    is_floating() -> bool,
    set_icon_size(icon_size: &SizeType),
    set_tool_button_style(tool_button_style: Rute::ToolButtonStyle),
    [callback] action_triggered(action: &ActionType),
    [callback] movable_changed(movable: bool),
    [callback] allowed_areas_changed(allowed_areas: Rute::ToolBarAreas),
    [callback] orientation_changed(orientation: Rute::Orientation),
    [callback] icon_size_changed(icon_size: &SizeType),
    [callback] tool_button_style_changed(tool_button_style: Rute::ToolButtonStyle),
    [callback] top_level_changed(top_level: bool),
    [callback] visibility_changed(visible: bool),
    action_event(event: &ActionEventType),
    change_event(event: &EventType),
    paint_event(event: &PaintEventType),
    event(event: &EventType) -> bool,
    init_style_option(option: &StyleOptionToolBarType),
}

// vim: syntax=rust expandtab ts=4 sw=4
