///     \class QGlyphRun
///     \brief The QGlyphRun class provides direct access to the internal glyphs in a font.
///     \since 4.8
///     \inmodule QtGui
/// 
///     \ingroup text
///     \ingroup shared
/// 
///     When Qt displays a string of text encoded in Unicode, it will first convert the Unicode points
///     into a list of glyph indexes and a list of positions based on one or more fonts. The Unicode
///     representation of the text and the QFont object will in this case serve as a convenient
///     abstraction that hides the details of what actually takes place when displaying the text
///     on-screen. For instance, by the time the text actually reaches the screen, it may be represented
///     by a set of fonts in addition to the one specified by the user, e.g. in case the originally
///     selected font did not support all the writing systems contained in the text.
/// 
///     Under certain circumstances, it can be useful as an application developer to have more low-level
///     control over which glyphs in a specific font are drawn to the screen. This could for instance
///     be the case in applications that use an external font engine and text shaper together with Qt.
///     QGlyphRun provides an interface to the raw data needed to get text on the screen. It
///     contains a list of glyph indexes, a position for each glyph and a font.
/// 
///     It is the user's responsibility to ensure that the selected font actually contains the
///     provided glyph indexes.
/// 
///     QTextLayout::glyphRuns() or QTextFragment::glyphRuns() can be used to convert unicode encoded
///     text into a list of QGlyphRun objects, and QPainter::drawGlyphRun() can be used to draw the
///     glyphs.
/// 
///     \note Please note that QRawFont is considered local to the thread in which it is constructed.
///     This in turn means that a new QRawFont will have to be created and set on the QGlyphRun if it is
///     moved to a different thread. If the QGlyphRun contains a reference to a QRawFont from a different
///     thread than the current, it will not be possible to draw the glyphs using a QPainter, as the
///     QRawFont is considered invalid and inaccessible in this case.
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QGlyphRun)]
enum GlyphRunFlag {
    Overline,
    Underline,
    StrikeOut,
    RightToLeft,
    SplitLigature,
}


struct GlyphRun {
    swap(other: &GlyphRunType),
    ///     Returns the font selected for this QGlyphRun object.
    /// 
    ///     \sa setRawFont()
    raw_font() -> RawFont,
    ///     Sets the font in which to look up the glyph indexes to the \a rawFont
    ///     specified.
    /// 
    ///     \sa rawFont(), setGlyphIndexes()
    set_raw_font(raw_font: &RawFontType),
    set_raw_data(glyph_index_array: *u32, glyph_position_array: *PointFType, size: i32),
    ///     Returns the glyph indexes for this QGlyphRun object.
    /// 
    ///     \sa setGlyphIndexes(), setPositions()
    glyph_indexes() -> [u32],
    ///     Set the glyph indexes for this QGlyphRun object to \a glyphIndexes. The glyph indexes must
    ///     be valid for the selected font.
    set_glyph_indexes(glyph_indexes: [u32]),
    ///     Returns the position of the edge of the baseline for each glyph in this set of glyph indexes.
    positions() -> [PointF],
    ///     Sets the positions of the edge of the baseline for each glyph in this set of glyph indexes to
    ///     \a positions.
    set_positions(positions: [PointFType]),
    ///     Clears all data in the QGlyphRun object.
    clear(),
    ///   Indicates that this QGlyphRun should be painted with an overline decoration if \a overline is true.
    ///   Otherwise the QGlyphRun should be painted with no overline decoration.
    /// 
    ///   \sa overline(), setFlag(), setFlags()
    set_overline(overline: bool),
    ///    Returns \c true if this QGlyphRun should be painted with an overline decoration.
    /// 
    ///    \sa setOverline(), flags()
    overline() -> bool,
    ///   Indicates that this QGlyphRun should be painted with an underline decoration if \a underline is
    ///   true. Otherwise the QGlyphRun should be painted with no underline decoration.
    /// 
    ///   \sa underline(), setFlag(), setFlags()
    set_underline(underline: bool),
    ///    Returns \c true if this QGlyphRun should be painted with an underline decoration.
    /// 
    ///    \sa setUnderline(), flags()
    underline() -> bool,
    ///   Indicates that this QGlyphRun contains glyphs that should be ordered from the right to left
    ///   if \a rightToLeft is true. Otherwise the order of the glyphs is assumed to be left to right.
    /// 
    ///   \since 5.0
    ///   \sa isRightToLeft(), setFlag(), setFlags()
    set_right_to_left(on: bool),
    ///   Returns \c true if this QGlyphRun contains glyphs that are painted from the right to the left.
    /// 
    ///   \since 5.0
    ///   \sa setRightToLeft(), flags()
    is_right_to_left() -> bool,
    ///   If \a enabled is true, then \a flag is enabled; otherwise, it is disabled.
    /// 
    ///   \since 5.0
    ///   \sa flags(), setFlags()
    set_flag(flag: GlyphRun::GlyphRunFlag, enabled: bool),
    ///   Sets the flags of this QGlyphRun to \a flags.
    /// 
    ///   \since 5.0
    ///   \sa setFlag(), flags()
    set_flags(flags: GlyphRun::GlyphRunFlags),
    ///   Returns the flags set for this QGlyphRun.
    /// 
    ///   \since 5.0
    ///   \sa setFlag(), setFlag()
    flags() -> GlyphRun::GlyphRunFlags,
    ///   Sets the bounding rect of the glyphs in this QGlyphRun to be \a boundingRect. This rectangle
    ///   will be returned by boundingRect() unless it is empty, in which case the bounding rectangle of the
    ///   glyphs in the glyph run will be returned instead.
    /// 
    ///   \note Unless you are implementing text shaping, you should not have to use this function.
    ///   It is used specifically when the QGlyphRun should represent an area which is smaller than the
    ///   area of the glyphs it contains. This could happen e.g. if the glyph run is retrieved by calling
    ///   QTextLayout::glyphRuns() and the specified range only includes part of a ligature (where two or
    ///   more characters are combined to a single glyph.) When this is the case, the bounding rect should
    ///   only include the appropriate part of the ligature glyph, based on a calculation of the average
    ///   width of the characters in the ligature.
    /// 
    ///   In order to support such a case (an example is selections which should be drawn with a different
    ///   color than the main text color), it is necessary to clip the painting mechanism to the rectangle
    ///   returned from boundingRect() to avoid drawing the entire ligature glyph.
    /// 
    ///   \sa boundingRect()
    /// 
    ///   \since 5.0
    set_bounding_rect(bounding_rect: &RectFType),
    ///   Returns the smallest rectangle that contains all glyphs in this QGlyphRun. If a bounding rect
    ///   has been set using setBoundingRect(), then this will be returned. Otherwise the bounding rect
    ///   will be calculated based on the font metrics of the glyphs in the glyph run.
    /// 
    ///   \since 5.0
    bounding_rect() -> RectF,
    ///   Returns \c true if the QGlyphRun does not contain any glyphs.
    /// 
    ///   \since 5.0
    is_empty() -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
