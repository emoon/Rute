
struct Vector3D {
    is_null() -> bool,
    x() -> f32,
    y() -> f32,
    z() -> f32,
    set_x(x: f32),
    set_y(y: f32),
    set_z(z: f32),
    length() -> f32,
    length_squared() -> f32,
    normalized() -> Vector3D,
    normalize(),
    [static] dot_product(v1: &Vector3DType, v2: &Vector3DType) -> f32,
    [static] cross_product(v1: &Vector3DType, v2: &Vector3DType) -> Vector3D,
    [static] normal(v1: &Vector3DType, v2: &Vector3DType) -> Vector3D,
    [static] normal(v1: &Vector3DType, v2: &Vector3DType, v3: &Vector3DType) -> Vector3D,
    project(model_view: &Matrix4x4Type, projection: &Matrix4x4Type, viewport: &RectType) -> Vector3D,
    unproject(model_view: &Matrix4x4Type, projection: &Matrix4x4Type, viewport: &RectType) -> Vector3D,
    distance_to_point(point: &Vector3DType) -> f32,
    distance_to_plane(plane: &Vector3DType, normal: &Vector3DType) -> f32,
    distance_to_plane(plane1: &Vector3DType, plane2: &Vector3DType, plane3: &Vector3DType) -> f32,
    distance_to_line(point: &Vector3DType, direction: &Vector3DType) -> f32,
    to_vector2_d() -> Vector2D,
    to_vector4_d() -> Vector4D,
    to_point() -> Point,
    to_point_f() -> PointF,
}

// vim: syntax=rust expandtab ts=4 sw=4
