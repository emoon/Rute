/// 
/// Vectors are one of the main building blocks of 3D representation and
/// drawing. They consist of three coordinates, traditionally called
/// x, y, and z.
/// 
/// The QVector3D class can also be used to represent vertices in 3D space.
/// We therefore do not need to provide a separate vertex class.
/// 
/// **See also:** QVector2D
/// QVector4D
/// QQuaternion
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct Vector3D {
    /// 
    /// Returns `true` if the x, y, and z coordinates are set to 0.0,
    /// otherwise returns `false.`
    is_null() -> bool,
    /// 
    /// Returns the x coordinate of this point.
    /// 
    /// **See also:** setX()
    /// y()
    /// z()
    x() -> f32,
    /// 
    /// Returns the y coordinate of this point.
    /// 
    /// **See also:** setY()
    /// x()
    /// z()
    y() -> f32,
    /// 
    /// Returns the z coordinate of this point.
    /// 
    /// **See also:** setZ()
    /// x()
    /// y()
    z() -> f32,
    /// 
    /// Sets the x coordinate of this point to the given *x* coordinate.
    /// 
    /// **See also:** x()
    /// setY()
    /// setZ()
    set_x(x: f32),
    /// 
    /// Sets the y coordinate of this point to the given *y* coordinate.
    /// 
    /// **See also:** y()
    /// setX()
    /// setZ()
    set_y(y: f32),
    /// 
    /// Sets the z coordinate of this point to the given *z* coordinate.
    /// 
    /// **See also:** z()
    /// setX()
    /// setY()
    set_z(z: f32),
    /// 
    /// Returns the length of the vector from the origin.
    /// 
    /// **See also:** lengthSquared()
    /// normalized()
    /// 
    /// Returns the squared length of the vector from the origin.
    /// This is equivalent to the dot product of the vector with itself.
    /// 
    /// **See also:** length()
    /// dotProduct()
    length() -> f32,
    /// 
    /// Returns the squared length of the vector from the origin.
    /// This is equivalent to the dot product of the vector with itself.
    /// 
    /// **See also:** length()
    /// dotProduct()
    length_squared() -> f32,
    /// 
    /// Returns the normalized unit vector form of this vector.
    /// 
    /// If this vector is null, then a null vector is returned. If the length
    /// of the vector is very close to 1, then the vector will be returned as-is.
    /// Otherwise the normalized form of the vector of length 1 will be returned.
    /// 
    /// **See also:** length()
    /// normalize()
    normalized() -> Vector3D,
    /// 
    /// Returns the normalized unit vector form of this vector.
    /// 
    /// If this vector is null, then a null vector is returned. If the length
    /// of the vector is very close to 1, then the vector will be returned as-is.
    /// Otherwise the normalized form of the vector of length 1 will be returned.
    /// 
    /// **See also:** length()
    /// normalize()
    /// 
    /// Normalizes the currect vector in place. Nothing happens if this
    /// vector is a null vector or the length of the vector is very close to 1.
    /// 
    /// **See also:** length()
    /// normalized()
    normalize(),
    /// 
    /// Returns the dot product of *v1* and *v2.*
    [static] dot_product(v1: &Vector3DType, v2: &Vector3DType) -> f32,
    /// 
    /// Returns the cross-product of vectors *v1* and *v2,* which corresponds
    /// to the normal vector of a plane defined by *v1* and *v2.*
    /// 
    /// **See also:** normal()
    [static] cross_product(v1: &Vector3DType, v2: &Vector3DType) -> Vector3D,
    /// 
    /// Returns the normalized unit vector form of this vector.
    /// 
    /// If this vector is null, then a null vector is returned. If the length
    /// of the vector is very close to 1, then the vector will be returned as-is.
    /// Otherwise the normalized form of the vector of length 1 will be returned.
    /// 
    /// **See also:** length()
    /// normalize()
    /// 
    /// Normalizes the currect vector in place. Nothing happens if this
    /// vector is a null vector or the length of the vector is very close to 1.
    /// 
    /// **See also:** length()
    /// normalized()
    /// 
    /// Returns the normal vector of a plane defined by vectors *v1* and *v2,*
    /// normalized to be a unit vector.
    /// 
    /// Use crossProduct() to compute the cross-product of *v1* and *v2* if you
    /// do not need the result to be normalized to a unit vector.
    /// 
    /// **See also:** crossProduct()
    /// distanceToPlane()
    /// 
    /// **Overloads**
    /// Returns the normal vector of a plane defined by vectors
    /// *v2* - *v1* and *v3* - *v1,* normalized to be a unit vector.
    /// 
    /// Use crossProduct() to compute the cross-product of *v2* - *v1* and
    /// *v3* - *v1* if you do not need the result to be normalized to a
    /// unit vector.
    /// 
    /// **See also:** crossProduct()
    /// distanceToPlane()
    [static] normal(v1: &Vector3DType, v2: &Vector3DType) -> Vector3D,
    /// 
    /// Returns the normalized unit vector form of this vector.
    /// 
    /// If this vector is null, then a null vector is returned. If the length
    /// of the vector is very close to 1, then the vector will be returned as-is.
    /// Otherwise the normalized form of the vector of length 1 will be returned.
    /// 
    /// **See also:** length()
    /// normalize()
    /// 
    /// Normalizes the currect vector in place. Nothing happens if this
    /// vector is a null vector or the length of the vector is very close to 1.
    /// 
    /// **See also:** length()
    /// normalized()
    /// 
    /// Returns the normal vector of a plane defined by vectors *v1* and *v2,*
    /// normalized to be a unit vector.
    /// 
    /// Use crossProduct() to compute the cross-product of *v1* and *v2* if you
    /// do not need the result to be normalized to a unit vector.
    /// 
    /// **See also:** crossProduct()
    /// distanceToPlane()
    /// 
    /// **Overloads**
    /// Returns the normal vector of a plane defined by vectors
    /// *v2* - *v1* and *v3* - *v1,* normalized to be a unit vector.
    /// 
    /// Use crossProduct() to compute the cross-product of *v2* - *v1* and
    /// *v3* - *v1* if you do not need the result to be normalized to a
    /// unit vector.
    /// 
    /// **See also:** crossProduct()
    /// distanceToPlane()
    [static] normal(v1: &Vector3DType, v2: &Vector3DType, v3: &Vector3DType) -> Vector3D,
    /// 
    /// Returns the window coordinates of this vector initially in object/model
    /// coordinates using the model view matrix *modelView,* the projection matrix
    /// *projection* and the viewport dimensions *viewport.*
    /// 
    /// When transforming from clip to normalized space, a division by the w
    /// component on the vector components takes place. To prevent dividing by 0 if
    /// w equals to 0, it is set to 1.
    /// 
    /// **Note**: the returned y coordinates are in OpenGL orientation. OpenGL expects
    /// the bottom to be 0 whereas for Qt top is 0.
    /// 
    /// **See also:** unproject()
    project(model_view: &Matrix4x4Type, projection: &Matrix4x4Type, viewport: &RectType) -> Vector3D,
    /// 
    /// Returns the object/model coordinates of this vector initially in window
    /// coordinates using the model view matrix *modelView,* the projection matrix
    /// *projection* and the viewport dimensions *viewport.*
    /// 
    /// When transforming from clip to normalized space, a division by the w
    /// component of the vector components takes place. To prevent dividing by 0 if
    /// w equals to 0, it is set to 1.
    /// 
    /// **Note**: y coordinates in *viewport* should use OpenGL orientation. OpenGL
    /// expects the bottom to be 0 whereas for Qt top is 0.
    /// 
    /// **See also:** project()
    unproject(model_view: &Matrix4x4Type, projection: &Matrix4x4Type, viewport: &RectType) -> Vector3D,
    /// 
    /// Returns the distance from this vertex to a point defined by
    /// the vertex *point.*
    /// 
    /// **See also:** distanceToPlane()
    /// distanceToLine()
    distance_to_point(point: &Vector3DType) -> f32,
    /// 
    /// Returns the distance from this vertex to a plane defined by
    /// the vertex *plane* and a *normal* unit vector. The *normal*
    /// parameter is assumed to have been normalized to a unit vector.
    /// 
    /// The return value will be negative if the vertex is below the plane,
    /// or zero if it is on the plane.
    /// 
    /// **See also:** normal()
    /// distanceToLine()
    /// 
    /// **Overloads**
    /// Returns the distance from this vertex a plane defined by
    /// the vertices *plane1,* *plane2* and *plane3.*
    /// 
    /// The return value will be negative if the vertex is below the plane,
    /// or zero if it is on the plane.
    /// 
    /// The two vectors that define the plane are *plane2* - *plane1*
    /// and *plane3* - *plane1.*
    /// 
    /// **See also:** normal()
    /// distanceToLine()
    distance_to_plane(plane: &Vector3DType, normal: &Vector3DType) -> f32,
    /// 
    /// Returns the distance from this vertex to a plane defined by
    /// the vertex *plane* and a *normal* unit vector. The *normal*
    /// parameter is assumed to have been normalized to a unit vector.
    /// 
    /// The return value will be negative if the vertex is below the plane,
    /// or zero if it is on the plane.
    /// 
    /// **See also:** normal()
    /// distanceToLine()
    /// 
    /// **Overloads**
    /// Returns the distance from this vertex a plane defined by
    /// the vertices *plane1,* *plane2* and *plane3.*
    /// 
    /// The return value will be negative if the vertex is below the plane,
    /// or zero if it is on the plane.
    /// 
    /// The two vectors that define the plane are *plane2* - *plane1*
    /// and *plane3* - *plane1.*
    /// 
    /// **See also:** normal()
    /// distanceToLine()
    distance_to_plane(plane1: &Vector3DType, plane2: &Vector3DType, plane3: &Vector3DType) -> f32,
    /// 
    /// Returns the distance that this vertex is from a line defined
    /// by *point* and the unit vector *direction.*
    /// 
    /// If *direction* is a null vector, then it does not define a line.
    /// In that case, the distance from *point* to this vertex is returned.
    /// 
    /// **See also:** distanceToPlane()
    distance_to_line(point: &Vector3DType, direction: &Vector3DType) -> f32,
    /// 
    /// Returns the 2D vector form of this 3D vector, dropping the z coordinate.
    /// 
    /// **See also:** toVector4D()
    /// toPoint()
    to_vector2_d() -> Vector2D,
    /// 
    /// Returns the 4D form of this 3D vector, with the w coordinate set to zero.
    /// 
    /// **See also:** toVector2D()
    /// toPoint()
    to_vector4_d() -> Vector4D,
    /// 
    /// Returns the QPoint form of this 3D vector. The z coordinate
    /// is dropped.
    /// 
    /// **See also:** toPointF()
    /// toVector2D()
    /// 
    /// Returns the QPointF form of this 3D vector. The z coordinate
    /// is dropped.
    /// 
    /// **See also:** toPoint()
    /// toVector2D()
    to_point() -> Point,
    /// 
    /// Returns the QPointF form of this 3D vector. The z coordinate
    /// is dropped.
    /// 
    /// **See also:** toPoint()
    /// toVector2D()
    to_point_f() -> PointF,
}

// vim: syntax=rust expandtab ts=4 sw=4
