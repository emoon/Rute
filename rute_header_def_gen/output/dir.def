/// 
/// A QDir is used to manipulate path names, access information
/// regarding paths and files, and manipulate the underlying file
/// system. It can also be used to access Qt's [resource system](resource%20system)
/// 
/// 
/// Qt uses as a universal directory separator in the same way
/// that is used as a path separator in URLs. If you always use
/// as a directory separator, Qt will translate your paths to
/// conform to the underlying operating system.
/// 
/// A QDir can point to a file using either a relative or an absolute
/// path. Absolute paths begin with the directory separator
/// (optionally preceded by a drive specification under Windows).
/// Relative file names begin with a directory name or a file name and
/// specify a path relative to the current directory.
/// 
/// Examples of absolute paths:
/// 
/// On Windows, the second example above will be translated to
/// `C:\Documents and Settings` when used to access files.
/// 
/// Examples of relative paths:
/// 
/// You can use the isRelative() or isAbsolute() functions to check if
/// a QDir is using a relative or an absolute file path. Call
/// makeAbsolute() to convert a relative QDir to an absolute one.
/// 
/// # Navigation and Directory Operations
/// 
/// A directory's path can be obtained with the path() function, and
/// a new path set with the setPath() function. The absolute path to
/// a directory is found by calling absolutePath().
/// 
/// The name of a directory is found using the dirName() function. This
/// typically returns the last element in the absolute path that specifies
/// the location of the directory. However, it can also return if
/// the QDir represents the current directory.
/// 
/// The path for a directory can also be changed with the cd() and cdUp()
/// functions, both of which operate like familiar shell commands.
/// When cd() is called with the name of an existing directory, the QDir
/// object changes directory so that it represents that directory instead.
/// The cdUp() function changes the directory of the QDir object so that
/// it refers to its parent directory; i.e. cd("..") is equivalent to
/// cdUp().
/// 
/// Directories can be created with mkdir(), renamed with rename(), and
/// removed with rmdir().
/// 
/// You can test for the presence of a directory with a given name by
/// using exists(), and the properties of a directory can be tested with
/// isReadable(), isAbsolute(), isRelative(), and isRoot().
/// 
/// The refresh() function re-reads the directory's data from disk.
/// 
/// # Files and Directory Contents
/// 
/// Directories contain a number of entries, representing files,
/// directories, and symbolic links. The number of entries in a
/// directory is returned by count().
/// A string list of the names of all the entries in a directory can be
/// obtained with entryList(). If you need information about each
/// entry, use entryInfoList() to obtain a list of QFileInfo objects.
/// 
/// Paths to files and directories within a directory can be
/// constructed using filePath() and absoluteFilePath().
/// The filePath() function returns a path to the specified file
/// or directory relative to the path of the QDir object;
/// absoluteFilePath() returns an absolute path to the specified
/// file or directory. Neither of these functions checks for the
/// existence of files or directory; they only construct paths.
/// 
/// Files can be removed by using the remove() function. Directories
/// cannot be removed in the same way as files; use rmdir() to remove
/// them instead.
/// 
/// It is possible to reduce the number of entries returned by
/// entryList() and entryInfoList() by applying filters to a QDir object.
/// You can apply a name filter to specify a pattern with wildcards that
/// file names need to match, an attribute filter that selects properties
/// of entries and can distinguish between files and directories, and a
/// sort order.
/// 
/// Name filters are lists of strings that are passed to setNameFilters().
/// Attribute filters consist of a bitwise OR combination of Filters, and
/// these are specified when calling setFilter().
/// The sort order is specified using setSorting() with a bitwise OR
/// combination of SortFlags.
/// 
/// You can test to see if a filename matches a filter using the match()
/// function.
/// 
/// Filter and sort order flags may also be specified when calling
/// entryList() and entryInfoList() in order to override previously defined
/// behavior.
/// 
/// # The Current Directory and Other Special Paths
/// 
/// Access to some common directories is provided with a number of static
/// functions that return QDir objects. There are also corresponding functions
/// for these that return strings:
/// 
/// * QDir
/// * QString
/// * Return Value
/// * current()
/// * currentPath()
/// * The application's working directory
/// * home()
/// * homePath()
/// * The user's home directory
/// * root()
/// * rootPath()
/// * The root directory
/// * temp()
/// * tempPath()
/// * The system's temporary directory
/// 
/// The setCurrent() static function can also be used to set the application's
/// working directory.
/// 
/// If you want to find the directory containing the application's executable,
/// see [QCoreApplication::applicationDirPath()](QCoreApplication::applicationDirPath())
/// 
/// 
/// The drives() static function provides a list of root directories for each
/// device that contains a filing system. On Unix systems this returns a list
/// containing a single root directory ; on Windows the list will usually
/// contain `C:/` , and possibly other drive letters such as `D:/` , depending
/// on the configuration of the user's system.
/// 
/// # Path Manipulation and Strings
/// 
/// Paths containing elements that reference the current directory at that
/// point in the path, elements that reference the parent directory, and
/// symbolic links can be reduced to a canonical form using the canonicalPath()
/// function.
/// 
/// Paths can also be simplified by using cleanPath() to remove redundant
/// and elements.
/// 
/// It is sometimes necessary to be able to show a path in the native
/// representation for the user's platform. The static toNativeSeparators()
/// function returns a copy of the specified path in which each directory
/// separator is replaced by the appropriate separator for the underlying
/// operating system.
/// 
/// # Examples
/// 
/// Check if a directory exists:
/// 
/// (We could also use the static convenience function
/// QFile::exists().)
/// 
/// Traversing directories and reading a file:
/// 
/// A program that lists all the files in the current directory
/// (excluding symbolic links), sorted by size, smallest first:
/// 
/// **See also:** [`FileInfo`]
/// [`File`]
/// [`FileDialog`]
/// [`CoreApplication::application_dir_path`]
/// {Find Files Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Dir {
    /// 
    /// Swaps this QDir instance with *other.* This function is very fast
    /// and never fails.
    swap(other: &DirType),
    /// 
    /// Sets the path of the directory to *path.* The path is cleaned of
    /// redundant , and of multiple separators. No check is made
    /// to see whether a directory with this path actually exists; but you
    /// can check for yourself using exists().
    /// 
    /// The path can be either absolute or relative. Absolute paths begin
    /// with the directory separator (optionally preceded by a drive
    /// specification under Windows). Relative file names begin with a
    /// directory name or a file name and specify a path relative to the
    /// current directory. An example of an absolute path is the string
    /// , a relative path might look like .
    /// 
    /// **See also:** [`path()`]
    /// [`absolute_path()`]
    /// [`exists()`]
    /// [`clean_path()`]
    /// [`dir_name()`]
    /// [`absolute_file_path()`]
    /// [`is_relative()`]
    /// [`make_absolute()`]
    set_path(path: String),
    /// 
    /// Returns the path. This may contain symbolic links, but never
    /// contains redundant , or multiple separators.
    /// 
    /// The returned path can be either absolute or relative (see
    /// setPath()).
    /// 
    /// **See also:** [`set_path()`]
    /// [`absolute_path()`]
    /// [`exists()`]
    /// [`clean_path()`]
    /// [`dir_name()`]
    /// [`absolute_file_path()`]
    /// [`to_native_separators()`]
    /// [`make_absolute()`]
    path() -> String,
    /// 
    /// Returns the absolute path (a path that starts with or with a
    /// drive specification), which may contain symbolic links, but never
    /// contains redundant , or multiple separators.
    /// 
    /// **See also:** [`set_path()`]
    /// [`canonical_path()`]
    /// [`exists()`]
    /// [`clean_path()`]
    /// [`dir_name()`]
    /// [`absolute_file_path()`]
    absolute_path() -> String,
    /// 
    /// Returns the canonical path, i.e. a path without symbolic links or
    /// redundant or elements.
    /// 
    /// On systems that do not have symbolic links this function will
    /// always return the same string that absolutePath() returns. If the
    /// canonical path does not exist (normally due to dangling symbolic
    /// links) canonicalPath() returns an empty string.
    /// 
    /// Example:
    /// 
    /// **See also:** [`path()`]
    /// [`absolute_path()`]
    /// [`exists()`]
    /// [`clean_path()`]
    /// [`dir_name()`]
    /// [`absolute_file_path()`]
    canonical_path() -> String,
    /// 
    /// Use QDir::addSearchPath() with a prefix instead.
    /// 
    /// Adds *path* to the search paths searched in to find resources
    /// that are not specified with an absolute path. The default search
    /// path is to search only in the root ( `:/` ).
    /// 
    /// **See also:** {The Qt Resource System}
    [static] add_resource_search_path(path: String),
    /// 
    /// Sets or replaces Qt's search paths for file names with the prefix *prefix*
    /// to *searchPaths.*
    /// 
    /// To specify a prefix for a file name, prepend the prefix followed by a single
    /// colon (e.g., , ). *prefix* can only
    /// contain letters or numbers (e.g., it cannot contain a colon, nor a slash).
    /// 
    /// Qt uses this search path to locate files with a known prefix. The search
    /// path entries are tested in order, starting with the first entry.
    /// 
    /// File name prefix must be at least 2 characters long to avoid conflicts with
    /// Windows drive letters.
    /// 
    /// Search paths may contain paths to [The Qt Resource System](The%20Qt%20Resource%20System)
    /// 
    [static] set_search_paths(prefix: String, search_paths: &[String]),
    /// 
    /// Adds *path* to the search path for *prefix.*
    /// 
    /// **See also:** [`set_search_paths()`]
    [static] add_search_path(prefix: String, path: String),
    /// 
    /// Returns the search paths for *prefix.*
    /// 
    /// **See also:** [`set_search_paths()`]
    /// [`add_search_path()`]
    [static] search_paths(prefix: String) -> [String],
    /// 
    /// Returns the name of the directory; this is *not* the same as the
    /// path, e.g. a directory with the name , might have the path
    /// . If the directory has no name (e.g. it is the
    /// root directory) an empty string is returned.
    /// 
    /// No check is made to ensure that a directory with this name
    /// actually exists; but see exists().
    /// 
    /// **See also:** [`path()`]
    /// [`file_path()`]
    /// [`absolute_path()`]
    /// [`absolute_file_path()`]
    dir_name() -> String,
    /// 
    /// Returns the path name of a file in the directory. Does *not*
    /// check if the file actually exists in the directory; but see
    /// exists(). If the QDir is relative the returned path name will also
    /// be relative. Redundant multiple separators or and
    /// directories in *fileName* are not removed (see cleanPath()).
    /// 
    /// **See also:** [`dir_name()`]
    /// [`absolute_file_path()`]
    /// [`is_relative()`]
    /// [`canonical_path()`]
    file_path(file_name: String) -> String,
    /// 
    /// Returns the absolute path name of a file in the directory. Does *not* check if the file actually exists in the directory; but see
    /// exists(). Redundant multiple separators or and
    /// directories in *fileName* are not removed (see cleanPath()).
    /// 
    /// **See also:** [`relative_file_path()`]
    /// [`file_path()`]
    /// [`canonical_path()`]
    absolute_file_path(file_name: String) -> String,
    /// 
    /// Returns the path to *fileName* relative to the directory.
    /// 
    /// **See also:** [`absolute_file_path()`]
    /// [`file_path()`]
    /// [`canonical_path()`]
    relative_file_path(file_name: String) -> String,
    /// 
    /// Returns *pathName* with the '/' separators converted to
    /// separators that are appropriate for the underlying operating
    /// system.
    /// 
    /// On Windows, toNativeSeparators("c:/winnt/system32") returns
    /// 
    /// 
    /// The returned string may be the same as the argument on some
    /// operating systems, for example on Unix.
    /// 
    /// **See also:** [`from_native_separators()`]
    /// [`separator()`]
    [static] to_native_separators(path_name: String) -> String,
    /// 
    /// Returns *pathName* using '/' as file separator. On Windows,
    /// for instance, fromNativeSeparators(" `c:\\winnt\\system32` c:/winnt/system32".
    /// 
    /// The returned string may be the same as the argument on some
    /// operating systems, for example on Unix.
    /// 
    /// **See also:** [`to_native_separators()`]
    /// [`separator()`]
    [static] from_native_separators(path_name: String) -> String,
    /// 
    /// Changes the QDir's directory to *dirName.*
    /// 
    /// Returns `true` if the new directory exists;
    /// otherwise returns `false.` Note that the logical cd() operation is
    /// not performed if the new directory does not exist.
    /// 
    /// Calling cd("..") is equivalent to calling cdUp().
    /// 
    /// **See also:** [`cd_up()`]
    /// [`is_readable()`]
    /// [`exists()`]
    /// [`path()`]
    /// 
    /// Changes directory by moving one directory up from the QDir's
    /// current directory.
    /// 
    /// Returns `true` if the new directory exists;
    /// otherwise returns `false.` Note that the logical cdUp() operation is
    /// not performed if the new directory does not exist.
    /// 
    /// **See also:** [`cd()`]
    /// [`is_readable()`]
    /// [`exists()`]
    /// [`path()`]
    cd(dir_name: String) -> bool,
    /// 
    /// Changes directory by moving one directory up from the QDir's
    /// current directory.
    /// 
    /// Returns `true` if the new directory exists;
    /// otherwise returns `false.` Note that the logical cdUp() operation is
    /// not performed if the new directory does not exist.
    /// 
    /// **See also:** [`cd()`]
    /// [`is_readable()`]
    /// [`exists()`]
    /// [`path()`]
    cd_up() -> bool,
    /// 
    /// Returns the string list set by setNameFilters()
    name_filters() -> [String],
    /// 
    /// Sets the name filters used by entryList() and entryInfoList() to the
    /// list of filters specified by *nameFilters.*
    /// 
    /// Each name filter is a wildcard (globbing) filter that understands
    /// `*` and `?` wildcards. (See [QRegExp wildcard matching](QRegExp%20wildcard%20matching)
    /// .)
    /// 
    /// For example, the following code sets three name filters on a QDir
    /// to ensure that only files with extensions typically used for C++
    /// source files are listed:
    /// 
    /// **See also:** [`name_filters()`]
    /// [`set_filter()`]
    set_name_filters(name_filters: &[String]),
    /// 
    /// Returns the value set by setFilter()
    filter() -> Dir::Filters,
    /// 
    /// Sets the filter used by entryList() and entryInfoList() to *filters.* The filter is used to specify the kind of files that
    /// should be returned by entryList() and entryInfoList(). See
    /// [QDir::Filter](QDir::Filter)
    /// 
    /// 
    /// **See also:** [`filter()`]
    /// [`set_name_filters()`]
    set_filter(filter: Dir::Filters),
    /// 
    /// Returns the value set by setSorting()
    /// 
    /// **See also:** [`set_sorting()`]
    /// SortFlag
    sorting() -> Dir::SortFlags,
    /// 
    /// Sets the sort order used by entryList() and entryInfoList().
    /// 
    /// The *sort* is specified by OR-ing values from the enum
    /// [QDir::SortFlag](QDir::SortFlag)
    /// 
    /// 
    /// **See also:** [`sorting()`]
    /// SortFlag
    set_sorting(sort: Dir::SortFlags),
    /// 
    /// Returns the total number of directories and files in the directory.
    /// 
    /// Equivalent to entryList().count().
    /// 
    /// **See also:** [`operator()`]
    /// [`entry_list()`]
    count() -> uint,
    /// 
    /// Returns whether the directory is empty.
    /// 
    /// Equivalent to `count() == 0` with filters
    /// `QDir::AllEntries | QDir::NoDotAndDotDot` , but faster as it just checks
    /// whether the directory contains at least one entry.
    /// 
    /// **Note**: Unless you set the *filters* flags to include `QDir::NoDotAndDotDot`
    /// (as the default value does), no directory is empty.
    /// 
    /// **See also:** [`count()`]
    /// [`entry_list()`]
    /// [`set_filter()`]
    is_empty(filters: Dir::Filters) -> bool,
    /// 
    /// Creates a sub-directory called *dirName.*
    /// 
    /// Returns `true` on success; otherwise returns `false.`
    /// 
    /// If the directory already exists when this function is called, it will return false.
    /// 
    /// **See also:** [`rmdir()`]
    mkdir(dir_name: String) -> bool,
    /// 
    /// Removes the directory specified by *dirName.*
    /// 
    /// The directory must be empty for rmdir() to succeed.
    /// 
    /// Returns `true` if successful; otherwise returns `false.`
    /// 
    /// **See also:** [`mkdir()`]
    rmdir(dir_name: String) -> bool,
    /// 
    /// Creates the directory path *dirPath.*
    /// 
    /// The function will create all parent directories necessary to
    /// create the directory.
    /// 
    /// Returns `true` if successful; otherwise returns `false.`
    /// 
    /// If the path already exists when this function is called, it will return true.
    /// 
    /// **See also:** [`rmpath()`]
    mkpath(dir_path: String) -> bool,
    /// 
    /// Removes the directory path *dirPath.*
    /// 
    /// The function will remove all parent directories in *dirPath,*
    /// provided that they are empty. This is the opposite of
    /// mkpath(dirPath).
    /// 
    /// Returns `true` if successful; otherwise returns `false.`
    /// 
    /// **See also:** [`mkpath()`]
    rmpath(dir_path: String) -> bool,
    /// 
    /// Removes the directory, including all its contents.
    /// 
    /// Returns `true` if successful, otherwise false.
    /// 
    /// If a file or directory cannot be removed, removeRecursively() keeps going
    /// and attempts to delete as many files and sub-directories as possible,
    /// then returns `false.`
    /// 
    /// If the directory was already removed, the method returns `true`
    /// (expected result already reached).
    /// 
    /// Note: this function is meant for removing a small application-internal
    /// directory (such as a temporary directory), but not user-visible
    /// directories. For user-visible operations, it is rather recommended
    /// to report errors more precisely to the user, to offer solutions
    /// in case of errors, to show progress during the deletion since it
    /// could take several minutes, etc.
    remove_recursively() -> bool,
    /// 
    /// Returns `true` if the directory is readable *and* we can open files
    /// by name; otherwise returns `false.`
    /// 
    /// **Warning**: A false value from this function is not a guarantee that
    /// files in the directory are not accessible.
    /// 
    /// **See also:** [`FileInfo::is_readable`]
    is_readable() -> bool,
    /// 
    /// **Overloads**
    /// Returns `true` if the directory exists; otherwise returns `false.`
    /// (If a file with the same name is found this function will return false).
    /// 
    /// The overload of this function that accepts an argument is used to test
    /// for the presence of files and directories within a directory.
    /// 
    /// **See also:** [`FileInfo::exists`]
    /// [`File::exists`]
    /// 
    /// Returns `true` if the file called *name* exists; otherwise returns
    /// false.
    /// 
    /// Unless *name* contains an absolute file path, the file name is assumed
    /// to be relative to the directory itself, so this function is typically used
    /// to check for the presence of files within a directory.
    /// 
    /// **See also:** [`FileInfo::exists`]
    /// [`File::exists`]
    exists() -> bool,
    /// 
    /// Returns `true` if the directory is the root directory; otherwise
    /// returns `false.`
    /// 
    /// Note: If the directory is a symbolic link to the root directory
    /// this function returns `false.` If you want to test for this use
    /// canonicalPath(), e.g.
    /// 
    /// **See also:** [`root()`]
    /// [`root_path()`]
    is_root() -> bool,
    /// 
    /// Returns `true` if *path* is relative; returns `false` if it is
    /// absolute.
    /// 
    /// **See also:** [`is_relative()`]
    /// [`is_absolute_path()`]
    /// [`make_absolute()`]
    [static] is_relative_path(path: String) -> bool,
    /// 
    /// Returns `true` if *path* is absolute; returns `false` if it is
    /// relative.
    /// 
    /// **See also:** [`is_absolute()`]
    /// [`is_relative_path()`]
    /// [`make_absolute()`]
    /// [`clean_path()`]
    [static] is_absolute_path(path: String) -> bool,
    /// 
    /// Returns `true` if the directory path is relative; otherwise returns
    /// false. (Under Unix a path is relative if it does not start with a
    /// ).
    /// 
    /// **See also:** [`make_absolute()`]
    /// [`is_absolute()`]
    /// [`is_absolute_path()`]
    /// [`clean_path()`]
    /// 
    /// Returns `true` if *path* is relative; returns `false` if it is
    /// absolute.
    /// 
    /// **See also:** [`is_relative()`]
    /// [`is_absolute_path()`]
    /// [`make_absolute()`]
    is_relative() -> bool,
    /// 
    /// Returns `true` if the directory's path is absolute; otherwise
    /// returns `false.` See isAbsolutePath().
    /// 
    /// **See also:** [`is_relative()`]
    /// [`make_absolute()`]
    /// [`clean_path()`]
    /// 
    /// Returns `true` if *path* is absolute; returns `false` if it is
    /// relative.
    /// 
    /// **See also:** [`is_absolute()`]
    /// [`is_relative_path()`]
    /// [`make_absolute()`]
    /// [`clean_path()`]
    is_absolute() -> bool,
    /// 
    /// Converts the directory path to an absolute path. If it is already
    /// absolute nothing happens. Returns `true` if the conversion
    /// succeeded; otherwise returns `false.`
    /// 
    /// **See also:** [`is_absolute()`]
    /// [`is_absolute_path()`]
    /// [`is_relative()`]
    /// [`clean_path()`]
    make_absolute() -> bool,
    /// 
    /// Removes the directory, including all its contents.
    /// 
    /// Returns `true` if successful, otherwise false.
    /// 
    /// If a file or directory cannot be removed, removeRecursively() keeps going
    /// and attempts to delete as many files and sub-directories as possible,
    /// then returns `false.`
    /// 
    /// If the directory was already removed, the method returns `true`
    /// (expected result already reached).
    /// 
    /// Note: this function is meant for removing a small application-internal
    /// directory (such as a temporary directory), but not user-visible
    /// directories. For user-visible operations, it is rather recommended
    /// to report errors more precisely to the user, to offer solutions
    /// in case of errors, to show progress during the deletion since it
    /// could take several minutes, etc.
    /// 
    /// Removes the file, *fileName.*
    /// 
    /// Returns `true` if the file is removed successfully; otherwise
    /// returns `false.`
    remove(file_name: String) -> bool,
    /// 
    /// Renames a file or directory from *oldName* to *newName,* and returns
    /// true if successful; otherwise returns `false.`
    /// 
    /// On most file systems, rename() fails only if *oldName* does not
    /// exist, or if a file with the new name already exists.
    /// However, there are also other reasons why rename() can
    /// fail. For example, on at least one file system rename() fails if
    /// *newName* points to an open file.
    /// 
    /// If *oldName* is a file (not a directory) that can't be renamed
    /// right away, Qt will try to copy *oldName* to *newName* and remove
    /// *oldName.*
    /// 
    /// **See also:** [`File::rename`]
    rename(old_name: String, new_name: String) -> bool,
    /// 
    /// **Overloads**
    /// Returns `true` if the directory exists; otherwise returns `false.`
    /// (If a file with the same name is found this function will return false).
    /// 
    /// The overload of this function that accepts an argument is used to test
    /// for the presence of files and directories within a directory.
    /// 
    /// **See also:** [`FileInfo::exists`]
    /// [`File::exists`]
    /// 
    /// Returns `true` if the file called *name* exists; otherwise returns
    /// false.
    /// 
    /// Unless *name* contains an absolute file path, the file name is assumed
    /// to be relative to the directory itself, so this function is typically used
    /// to check for the presence of files within a directory.
    /// 
    /// **See also:** [`FileInfo::exists`]
    /// [`File::exists`]
    [org_name(exists)]
    exists_2(name: String) -> bool,
    /// 
    /// Returns a list of the root directories on this system.
    /// 
    /// On Windows this returns a list of QFileInfo objects containing ,
    /// , etc. On other operating systems, it returns a list containing
    /// just one root directory (i.e. ).
    /// 
    /// **See also:** [`root()`]
    /// [`root_path()`]
    [static] drives() -> FileInfoList,
    /// 
    /// Returns the native path list separator: ':' under Unix
    /// and ';' under Windows.
    /// 
    /// **See also:** [`separator()`]
    [static] list_separator() -> Char,
    /// 
    /// Returns the native directory separator: under Unix
    /// and under Windows.
    /// 
    /// You do not need to use this function to build file paths. If you
    /// always use , Qt will translate your paths to conform to the
    /// underlying operating system. If you want to display paths to the
    /// user using their operating system's separator use
    /// toNativeSeparators().
    /// 
    /// **See also:** [`list_separator()`]
    [static] separator() -> Char,
    /// 
    /// Sets the application's current working directory to *path.*
    /// Returns `true` if the directory was successfully changed; otherwise
    /// returns `false.`
    /// 
    /// **See also:** [`current()`]
    /// [`current_path()`]
    /// [`home()`]
    /// [`root()`]
    /// [`temp()`]
    [static] set_current(path: String) -> bool,
    /// 
    /// Returns the application's current directory.
    /// 
    /// The directory is constructed using the absolute path of the current directory,
    /// ensuring that its path() will be the same as its absolutePath().
    /// 
    /// **See also:** [`current_path()`]
    /// [`set_current()`]
    /// [`home()`]
    /// [`root()`]
    /// [`temp()`]
    /// 
    /// Returns the absolute path of the application's current directory. The
    /// current directory is the last directory set with QDir::setCurrent() or, if
    /// that was never called, the directory at which this application was started
    /// at by the parent process.
    /// 
    /// **See also:** [`current()`]
    /// [`set_current()`]
    /// [`home_path()`]
    /// [`root_path()`]
    /// [`temp_path()`]
    /// [`CoreApplication::application_dir_path`]
    [static] current() -> Dir,
    /// 
    /// Returns the absolute path of the application's current directory. The
    /// current directory is the last directory set with QDir::setCurrent() or, if
    /// that was never called, the directory at which this application was started
    /// at by the parent process.
    /// 
    /// **See also:** [`current()`]
    /// [`set_current()`]
    /// [`home_path()`]
    /// [`root_path()`]
    /// [`temp_path()`]
    /// [`CoreApplication::application_dir_path`]
    [static] current_path() -> String,
    /// 
    /// Returns the user's home directory.
    /// 
    /// The directory is constructed using the absolute path of the home directory,
    /// ensuring that its path() will be the same as its absolutePath().
    /// 
    /// See homePath() for details.
    /// 
    /// **See also:** [`drives()`]
    /// [`current()`]
    /// [`root()`]
    /// [`temp()`]
    /// 
    /// Returns the absolute path of the user's home directory.
    /// 
    /// Under Windows this function will return the directory of the
    /// current user's profile. Typically, this is:
    /// 
    /// Use the toNativeSeparators() function to convert the separators to
    /// the ones that are appropriate for the underlying operating system.
    /// 
    /// If the directory of the current user's profile does not exist or
    /// cannot be retrieved, the following alternatives will be checked (in
    /// the given order) until an existing and available path is found:
    /// 
    /// * The path specified by the `USERPROFILE` environment variable.
    /// * The path formed by concatenating the `HOMEDRIVE` and `HOMEPATH` environment variables.
    /// * The path specified by the `HOME` environment variable.
    /// * The path returned by the rootPath() function (which uses the `SystemDrive` environment variable)
    /// * The `C:/` directory.
    /// 
    /// Under non-Windows operating systems the `HOME` environment
    /// variable is used if it exists, otherwise the path returned by the
    /// rootPath().
    /// 
    /// **See also:** [`home()`]
    /// [`current_path()`]
    /// [`root_path()`]
    /// [`temp_path()`]
    [static] home() -> Dir,
    /// 
    /// Returns the absolute path of the user's home directory.
    /// 
    /// Under Windows this function will return the directory of the
    /// current user's profile. Typically, this is:
    /// 
    /// Use the toNativeSeparators() function to convert the separators to
    /// the ones that are appropriate for the underlying operating system.
    /// 
    /// If the directory of the current user's profile does not exist or
    /// cannot be retrieved, the following alternatives will be checked (in
    /// the given order) until an existing and available path is found:
    /// 
    /// * The path specified by the `USERPROFILE` environment variable.
    /// * The path formed by concatenating the `HOMEDRIVE` and `HOMEPATH` environment variables.
    /// * The path specified by the `HOME` environment variable.
    /// * The path returned by the rootPath() function (which uses the `SystemDrive` environment variable)
    /// * The `C:/` directory.
    /// 
    /// Under non-Windows operating systems the `HOME` environment
    /// variable is used if it exists, otherwise the path returned by the
    /// rootPath().
    /// 
    /// **See also:** [`home()`]
    /// [`current_path()`]
    /// [`root_path()`]
    /// [`temp_path()`]
    [static] home_path() -> String,
    /// 
    /// Returns the root directory.
    /// 
    /// The directory is constructed using the absolute path of the root directory,
    /// ensuring that its path() will be the same as its absolutePath().
    /// 
    /// See rootPath() for details.
    /// 
    /// **See also:** [`drives()`]
    /// [`current()`]
    /// [`home()`]
    /// [`temp()`]
    /// 
    /// Returns the absolute path of the root directory.
    /// 
    /// For Unix operating systems this returns . For Windows file
    /// systems this normally returns .
    /// 
    /// **See also:** [`root()`]
    /// [`drives()`]
    /// [`current_path()`]
    /// [`home_path()`]
    /// [`temp_path()`]
    [static] root() -> Dir,
    /// 
    /// Returns the absolute path of the root directory.
    /// 
    /// For Unix operating systems this returns . For Windows file
    /// systems this normally returns .
    /// 
    /// **See also:** [`root()`]
    /// [`drives()`]
    /// [`current_path()`]
    /// [`home_path()`]
    /// [`temp_path()`]
    [static] root_path() -> String,
    /// 
    /// Returns the system's temporary directory.
    /// 
    /// The directory is constructed using the absolute path of the temporary directory,
    /// ensuring that its path() will be the same as its absolutePath().
    /// 
    /// See tempPath() for details.
    /// 
    /// **See also:** [`drives()`]
    /// [`current()`]
    /// [`home()`]
    /// [`root()`]
    /// 
    /// Returns the absolute path of the system's temporary directory.
    /// 
    /// On Unix/Linux systems this is the path in the `TMPDIR` environment
    /// variable or `/tmp` if `TMPDIR` is not defined. On Windows this is
    /// usually the path in the `TEMP` or `TMP` environment
    /// variable.
    /// The path returned by this method doesn't end with a directory separator
    /// unless it is the root directory (of a drive).
    /// 
    /// **See also:** [`temp()`]
    /// [`current_path()`]
    /// [`home_path()`]
    /// [`root_path()`]
    [static] temp() -> Dir,
    /// 
    /// Returns the absolute path of the system's temporary directory.
    /// 
    /// On Unix/Linux systems this is the path in the `TMPDIR` environment
    /// variable or `/tmp` if `TMPDIR` is not defined. On Windows this is
    /// usually the path in the `TEMP` or `TMP` environment
    /// variable.
    /// The path returned by this method doesn't end with a directory separator
    /// unless it is the root directory (of a drive).
    /// 
    /// **See also:** [`temp()`]
    /// [`current_path()`]
    /// [`home_path()`]
    /// [`root_path()`]
    [static] temp_path() -> String,
    /// 
    /// **Overloads**
    /// Returns `true` if the *fileName* matches any of the wildcard (glob)
    /// patterns in the list of *filters;* otherwise returns `false.` The
    /// matching is case insensitive.
    /// 
    /// **See also:** {QRegExp wildcard matching}
    /// [`RegExp::exact_match`]
    /// [`entry_list()`]
    /// [`entry_info_list()`]
    /// 
    /// Returns `true` if the *fileName* matches the wildcard (glob)
    /// pattern *filter;* otherwise returns `false.` The *filter* may
    /// contain multiple patterns separated by spaces or semicolons.
    /// The matching is case insensitive.
    /// 
    /// **See also:** {QRegExp wildcard matching}
    /// [`RegExp::exact_match`]
    /// [`entry_list()`]
    /// [`entry_info_list()`]
    [static] match(filters: &[String], file_name: String) -> bool,
    /// 
    /// **Overloads**
    /// Returns `true` if the *fileName* matches any of the wildcard (glob)
    /// patterns in the list of *filters;* otherwise returns `false.` The
    /// matching is case insensitive.
    /// 
    /// **See also:** {QRegExp wildcard matching}
    /// [`RegExp::exact_match`]
    /// [`entry_list()`]
    /// [`entry_info_list()`]
    /// 
    /// Returns `true` if the *fileName* matches the wildcard (glob)
    /// pattern *filter;* otherwise returns `false.` The *filter* may
    /// contain multiple patterns separated by spaces or semicolons.
    /// The matching is case insensitive.
    /// 
    /// **See also:** {QRegExp wildcard matching}
    /// [`RegExp::exact_match`]
    /// [`entry_list()`]
    /// [`entry_info_list()`]
    [org_name(match)]
    [static] match_2(filter: String, file_name: String) -> bool,
    /// 
    /// Returns *path* with directory separators normalized (converted to ) and
    /// redundant ones removed, and s and s resolved (as far as possible).
    /// 
    /// Symbolic links are kept. This function does not return the
    /// canonical path, but rather the simplest version of the input.
    /// For example, becomes , becomes
    /// and becomes .
    /// 
    /// **See also:** [`absolute_path()`]
    /// [`canonical_path()`]
    [static] clean_path(path: String) -> String,
    /// 
    /// Refreshes the directory information.
    refresh(),
}

[org_name(QDir)]
enum Filter {
    /// List directories that match the filters.
    Dirs = 1,
    /// List files.
    Files = 2,
    /// List disk drives (ignored under Unix).
    Drives = 4,
    /// Do not list symbolic links (ignored by operating systems that don't support symbolic links).
    NoSymLinks = 8,
    /// List directories, files, drives and symlinks (this does not list broken symlinks unless you specify System).
    AllEntries = 7,
    TypeMask = 15,
    /// List files for which the application has read access. The Readable value needs to be combined with Dirs or Files.
    Readable = 16,
    /// List files for which the application has write access. The Writable value needs to be combined with Dirs or Files.
    Writable = 32,
    /// List files for which the application has execute access. The Executable value needs to be combined with Dirs or Files.
    Executable = 64,
    PermissionMask = 112,
    /// Only list files that have been modified (ignored on Unix).
    Modified = 128,
    /// List hidden files (on Unix, files starting with a ".").
    Hidden = 256,
    /// List system files (on Unix, FIFOs, sockets and device files are included; on Windows, `.lnk` files are included)
    System = 512,
    AccessMask = 1008,
    /// List all directories; i.e. don't apply the filters to directory names.
    AllDirs = 1024,
    /// The filter should be case sensitive.
    CaseSensitive = 2048,
    /// Do not list the special entry ".".
    NoDot = 8192,
    /// Do not list the special entry "..".
    NoDotDot = 16384,
    /// Do not list the special entries "." and "..".
    NoDotAndDotDot = 24576,
    NoFilter = 4294967295,
}

[org_name(QDir)]
enum SortFlag {
    /// Sort by name.
    Name = 0,
    /// Sort by time (modification time).
    Time = 1,
    /// Sort by file size.
    Size = 2,
    /// Do not sort.
    Unsorted = 3,
    SortByMask = 3,
    /// Put the directories first, then the files.
    DirsFirst = 4,
    /// Reverse the sort order.
    Reversed = 8,
    /// Sort case-insensitively.
    IgnoreCase = 16,
    /// Put the files first, then the directories.
    DirsLast = 32,
    /// Sort items appropriately using the current locale settings.
    LocaleAware = 64,
    /// Sort by file type (extension).
    Type = 128,
    /// Not sorted by default.
    NoSort = 4294967295,
}

// vim: syntax=rust expandtab ts=4 sw=4
