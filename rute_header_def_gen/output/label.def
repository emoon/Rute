///     \class QLabel
///     \brief The QLabel widget provides a text or image display.
/// 
///     \ingroup basicwidgets
///     \inmodule QtWidgets
/// 
///     \image windows-label.png
/// 
///     QLabel is used for displaying text or an image. No user
///     interaction functionality is provided. The visual appearance of
///     the label can be configured in various ways, and it can be used
///     for specifying a focus mnemonic key for another widget.
/// 
///     A QLabel can contain any of the following content types:
/// 
///     \table
///     \header \li Content \li Setting
///     \row \li Plain text
///          \li Pass a QString to setText().
///     \row \li Rich text
///          \li Pass a QString that contains rich text to setText().
///     \row \li A pixmap
///          \li Pass a QPixmap to setPixmap().
///     \row \li A movie
///          \li Pass a QMovie to setMovie().
///     \row \li A number
///          \li Pass an \e int or a \e double to setNum(), which converts
///             the number to plain text.
///     \row \li Nothing
///          \li The same as an empty plain text. This is the default. Set
///             by clear().
///     \endtable
/// 
///     \warning When passing a QString to the constructor or calling setText(),
///     make sure to sanitize your input, as QLabel tries to guess whether it
///     displays the text as plain text or as rich text, a subset of HTML 4
///     markup. You may want to call
///     setTextFormat() explicitly, e.g. in case you expect the text to be in
///     plain format but cannot control the text source (for instance when
///     displaying data loaded from the Web).
/// 
///     When the content is changed using any of these functions, any
///     previous content is cleared.
/// 
///     By default, labels display \l{alignment}{left-aligned, vertically-centered}
///     text and images, where any tabs in the text to be displayed are
///     \l{Qt::TextExpandTabs}{automatically expanded}. However, the look
///     of a QLabel can be adjusted and fine-tuned in several ways.
/// 
///     The positioning of the content within the QLabel widget area can
///     be tuned with setAlignment() and setIndent(). Text content can
///     also wrap lines along word boundaries with setWordWrap(). For
///     example, this code sets up a sunken panel with a two-line text in
///     the bottom right corner (both lines being flush with the right
///     side of the label):
/// 
///     \snippet code/src_gui_widgets_qlabel.cpp 0
/// 
///     The properties and functions QLabel inherits from QFrame can also
///     be used to specify the widget frame to be used for any given label.
/// 
///     A QLabel is often used as a label for an interactive widget. For
///     this use QLabel provides a useful mechanism for adding an
///     mnemonic (see QKeySequence) that will set the keyboard focus to
///     the other widget (called the QLabel's "buddy"). For example:
/// 
///     \snippet code/src_gui_widgets_qlabel.cpp 1
/// 
///     In this example, keyboard focus is transferred to the label's
///     buddy (the QLineEdit) when the user presses Alt+P. If the buddy
///     was a button (inheriting from QAbstractButton), triggering the
///     mnemonic would emulate a button click.
/// 
///     \sa QLineEdit, QTextEdit, QPixmap, QMovie,
///         {fowler}{GUI Design Handbook: Label}
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Label : Frame {
    text() -> String,
    pixmap() -> Pixmap?,
    ///     Returns the label's picture or nullptr if the label doesn't have a
    ///     picture.
    picture() -> Picture?,
    ///     Returns a pointer to the label's movie, or nullptr if no movie has been
    ///     set.
    /// 
    ///     \sa setMovie()
    movie() -> Movie?,
    ///     \property QLabel::textFormat
    ///     \brief the label's text format
    /// 
    ///     See the Qt::TextFormat enum for an explanation of the possible
    ///     options.
    /// 
    ///     The default format is Qt::AutoText.
    /// 
    ///     \sa text()
    text_format() -> Rute::TextFormat,
    set_text_format(arg0: Rute::TextFormat),
    alignment() -> Rute::Alignment,
    ///     \property QLabel::alignment
    ///     \brief the alignment of the label's contents
    /// 
    ///     By default, the contents of the label are left-aligned and vertically-centered.
    /// 
    ///     \sa text
    set_alignment(arg0: Rute::Alignment),
    ///     \property QLabel::wordWrap
    ///     \brief the label's word-wrapping policy
    /// 
    ///     If this property is \c true then label text is wrapped where
    ///     necessary at word-breaks; otherwise it is not wrapped at all.
    /// 
    ///     By default, word wrap is disabled.
    /// 
    ///     \sa text
    set_word_wrap(on: bool),
    word_wrap() -> bool,
    indent() -> i32,
    ///     \property QLabel::indent
    ///     \brief the label's text indent in pixels
    /// 
    ///     If a label displays text, the indent applies to the left edge if
    ///     alignment() is Qt::AlignLeft, to the right edge if alignment() is
    ///     Qt::AlignRight, to the top edge if alignment() is Qt::AlignTop, and
    ///     to the bottom edge if alignment() is Qt::AlignBottom.
    /// 
    ///     If indent is negative, or if no indent has been set, the label
    ///     computes the effective indent as follows: If frameWidth() is 0,
    ///     the effective indent becomes 0. If frameWidth() is greater than 0,
    ///     the effective indent becomes half the width of the "x" character
    ///     of the widget's current font().
    /// 
    ///     By default, the indent is -1, meaning that an effective indent is
    ///     calculating in the manner described above.
    /// 
    ///     \sa alignment, margin, frameWidth(), font()
    set_indent(arg0: i32),
    ///     \property QLabel::margin
    ///     \brief the width of the margin
    /// 
    ///     The margin is the distance between the innermost pixel of the
    ///     frame and the outermost pixel of contents.
    /// 
    ///     The default margin is 0.
    /// 
    ///     \sa indent
    margin() -> i32,
    set_margin(arg0: i32),
    ///     \property QLabel::scaledContents
    ///     \brief whether the label will scale its contents to fill all
    ///     available space.
    /// 
    ///     When enabled and the label shows a pixmap, it will scale the
    ///     pixmap to fill the available space.
    /// 
    ///     This property's default is false.
    has_scaled_contents() -> bool,
    set_scaled_contents(arg0: bool),
    [event] size_hint() -> Size,
    ///   \reimp
    [event] minimum_size_hint() -> Size,
    ///     Sets this label's buddy to \a buddy.
    /// 
    ///     When the user presses the shortcut key indicated by this label,
    ///     the keyboard focus is transferred to the label's buddy widget.
    /// 
    ///     The buddy mechanism is only available for QLabels that contain
    ///     text in which one character is prefixed with an ampersand, '&'.
    ///     This character is set as the shortcut key. See the \l
    ///     QKeySequence::mnemonic() documentation for details (to display an
    ///     actual ampersand, use '&&').
    /// 
    ///     In a dialog, you might create two data entry widgets and a label
    ///     for each, and set up the geometry layout so each label is just to
    ///     the left of its data entry widget (its "buddy"), for example:
    ///     \snippet code/src_gui_widgets_qlabel.cpp 2
    /// 
    ///     With the code above, the focus jumps to the Name field when the
    ///     user presses Alt+N, and to the Phone field when the user presses
    ///     Alt+P.
    /// 
    ///     To unset a previously set buddy, call this function with \a buddy
    ///     set to nullptr.
    /// 
    ///     \sa buddy(), setText(), QShortcut, setAlignment()
    set_buddy(arg0: *WidgetType),
    ///     Returns this label's buddy, or nullptr if no buddy is currently set.
    /// 
    ///     \sa setBuddy()
    buddy() -> Widget?,
    ///   \reimp
    [event] height_for_width(arg0: i32) -> i32,
    ///     \property QLabel::openExternalLinks
    ///     \since 4.2
    /// 
    ///     Specifies whether QLabel should automatically open links using
    ///     QDesktopServices::openUrl() instead of emitting the
    ///     linkActivated() signal.
    /// 
    ///     \b{Note:} The textInteractionFlags set on the label need to include
    ///     either LinksAccessibleByMouse or LinksAccessibleByKeyboard.
    /// 
    ///     The default value is false.
    /// 
    ///     \sa textInteractionFlags()
    open_external_links() -> bool,
    set_open_external_links(open: bool),
    ///     \property QLabel::textInteractionFlags
    ///     \since 4.2
    /// 
    ///     Specifies how the label should interact with user input if it displays text.
    /// 
    ///     If the flags contain Qt::LinksAccessibleByKeyboard the focus policy is also
    ///     automatically set to Qt::StrongFocus. If Qt::TextSelectableByKeyboard is set
    ///     then the focus policy is set to Qt::ClickFocus.
    /// 
    ///     The default value is Qt::LinksAccessibleByMouse.
    set_text_interaction_flags(flags: Rute::TextInteractionFlags),
    text_interaction_flags() -> Rute::TextInteractionFlags,
    ///     Selects text from position \a start and for \a length characters.
    /// 
    ///     \sa selectedText()
    /// 
    ///     \b{Note:} The textInteractionFlags set on the label need to include
    ///     either TextSelectableByMouse or TextSelectableByKeyboard.
    /// 
    ///     \since 4.7
    set_selection(arg0: i32, arg1: i32),
    ///     \property QLabel::hasSelectedText
    ///     \brief whether there is any text selected
    /// 
    ///     hasSelectedText() returns \c true if some or all of the text has been
    ///     selected by the user; otherwise returns \c false.
    /// 
    ///     By default, this property is \c false.
    /// 
    ///     \sa selectedText()
    /// 
    ///     \b{Note:} The textInteractionFlags set on the label need to include
    ///     either TextSelectableByMouse or TextSelectableByKeyboard.
    /// 
    ///     \since 4.7
    has_selected_text() -> bool,
    ///     \property QLabel::selectedText
    ///     \brief the selected text
    /// 
    ///     If there is no selected text this property's value is
    ///     an empty string.
    /// 
    ///     By default, this property contains an empty string.
    /// 
    ///     \sa hasSelectedText()
    /// 
    ///     \b{Note:} The textInteractionFlags set on the label need to include
    ///     either TextSelectableByMouse or TextSelectableByKeyboard.
    /// 
    ///     \since 4.7
    selected_text() -> String,
    ///     selectionStart() returns the index of the first selected character in the
    ///     label or -1 if no text is selected.
    /// 
    ///     \sa selectedText()
    /// 
    ///     \b{Note:} The textInteractionFlags set on the label need to include
    ///     either TextSelectableByMouse or TextSelectableByKeyboard.
    /// 
    ///     \since 4.7
    selection_start() -> i32,
    ///     \property QLabel::text
    ///     \brief the label's text
    /// 
    ///     If no text has been set this will return an empty string. Setting
    ///     the text clears any previous content.
    /// 
    ///     The text will be interpreted either as plain text or as rich
    ///     text, depending on the text format setting; see setTextFormat().
    ///     The default setting is Qt::AutoText; i.e. QLabel will try to
    ///     auto-detect the format of the text set.
    ///     See \l {Supported HTML Subset} for the definition of rich text.
    /// 
    ///     If a buddy has been set, the buddy mnemonic key is updated
    ///     from the new text.
    /// 
    ///     Note that QLabel is well-suited to display small rich text
    ///     documents, such as small documents that get their document
    ///     specific settings (font, text color, link color) from the label's
    ///     palette and font properties. For large documents, use QTextEdit
    ///     in read-only mode instead. QTextEdit can also provide a scroll bar
    ///     when necessary.
    /// 
    ///     \note This function enables mouse tracking if \a text contains rich
    ///     text.
    /// 
    ///     \sa setTextFormat(), setBuddy(), alignment
    set_text(arg0: String),
    ///     \property QLabel::pixmap
    ///     \brief the label's pixmap
    /// 
    ///     If no pixmap has been set this will return nullptr.
    /// 
    ///     Setting the pixmap clears any previous content. The buddy
    ///     shortcut, if any, is disabled.
    set_pixmap(arg0: &PixmapType),
    ///     Sets the label contents to \a picture. Any previous content is
    ///     cleared.
    /// 
    ///     The buddy shortcut, if any, is disabled.
    /// 
    ///     \sa picture(), setBuddy()
    set_picture(arg0: &PictureType),
    ///     Sets the label contents to \a movie. Any previous content is
    ///     cleared. The label does NOT take ownership of the movie.
    /// 
    ///     The buddy shortcut, if any, is disabled.
    /// 
    ///     \sa movie(), setBuddy()
    set_movie(movie: *MovieType),
    ///     \overload
    /// 
    ///     Sets the label contents to plain text containing the textual
    ///     representation of double \a num. Any previous content is cleared.
    ///     Does nothing if the double's string representation is the same as
    ///     the current contents of the label.
    /// 
    ///     The buddy shortcut, if any, is disabled.
    /// 
    ///     \sa setText(), QString::setNum(), setBuddy()
    set_num(arg0: i32),
    ///     \overload
    /// 
    ///     Sets the label contents to plain text containing the textual
    ///     representation of double \a num. Any previous content is cleared.
    ///     Does nothing if the double's string representation is the same as
    ///     the current contents of the label.
    /// 
    ///     The buddy shortcut, if any, is disabled.
    /// 
    ///     \sa setText(), QString::setNum(), setBuddy()
    set_num(arg0: double),
    ///     Clears any label contents.
    clear(),
    [signal] link_activated(link: String),
    [signal] link_hovered(link: String),
    [event] event(e: *EventType) -> bool,
    [event] key_press_event(ev: *KeyEventType),
    [event] paint_event(arg0: *PaintEventType),
    ///   \reimp
    [event] change_event(arg0: *EventType),
    [event] mouse_press_event(ev: *MouseEventType),
    [event] mouse_move_event(ev: *MouseEventType),
    [event] mouse_release_event(ev: *MouseEventType),
    [event] context_menu_event(ev: *ContextMenuEventType),
    ///     \reimp
    [event] focus_in_event(ev: *FocusEventType),
    ///     \reimp
    [event] focus_out_event(ev: *FocusEventType),
    [event] focus_next_prev_child(next: bool) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
