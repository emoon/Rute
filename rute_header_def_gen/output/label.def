/// 
/// ![windows-label.png](windows-label.png)
/// 
/// QLabel is used for displaying text or an image. No user
/// interaction functionality is provided. The visual appearance of
/// the label can be configured in various ways, and it can be used
/// for specifying a focus mnemonic key for another widget.
/// 
/// A QLabel can contain any of the following content types:
/// 
/// * Content
/// * Setting
/// * Plain text
/// * Pass a QString to setText().
/// * Rich text
/// * Pass a QString that contains rich text to setText().
/// * A pixmap
/// * Pass a QPixmap to setPixmap().
/// * A movie
/// * Pass a QMovie to setMovie().
/// * A number
/// * Pass an *int* or a *double* to setNum(), which converts the number to plain text.
/// * Nothing
/// * The same as an empty plain text. This is the default. Set by clear().
/// 
/// **Warning**: When passing a QString to the constructor or calling setText(),
/// make sure to sanitize your input, as QLabel tries to guess whether it
/// displays the text as plain text or as rich text, a subset of HTML 4
/// markup. You may want to call
/// setTextFormat() explicitly, e.g. in case you expect the text to be in
/// plain format but cannot control the text source (for instance when
/// displaying data loaded from the Web).
/// 
/// When the content is changed using any of these functions, any
/// previous content is cleared.
/// 
/// By default, labels display [left-aligned, vertically-centered](alignment)
/// 
/// text and images, where any tabs in the text to be displayed are
/// [automatically expanded](Qt::TextExpandTabs)
/// . However, the look
/// of a QLabel can be adjusted and fine-tuned in several ways.
/// 
/// The positioning of the content within the QLabel widget area can
/// be tuned with setAlignment() and setIndent(). Text content can
/// also wrap lines along word boundaries with setWordWrap(). For
/// example, this code sets up a sunken panel with a two-line text in
/// the bottom right corner (both lines being flush with the right
/// side of the label):
/// 
/// The properties and functions QLabel inherits from QFrame can also
/// be used to specify the widget frame to be used for any given label.
/// 
/// A QLabel is often used as a label for an interactive widget. For
/// this use QLabel provides a useful mechanism for adding an
/// mnemonic (see QKeySequence) that will set the keyboard focus to
/// the other widget (called the QLabel's ). For example:
/// 
/// In this example, keyboard focus is transferred to the label's
/// buddy (the QLineEdit) when the user presses Alt+P. If the buddy
/// was a button (inheriting from QAbstractButton), triggering the
/// mnemonic would emulate a button click.
/// 
/// **See also:** QLineEdit
/// QTextEdit
/// QPixmap
/// QMovie
/// {fowler}{GUI Design Handbook: Label}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Label : Frame {
    /// 
    /// If no text has been set this will return an empty string. Setting
    /// the text clears any previous content.
    /// 
    /// The text will be interpreted either as plain text or as rich
    /// text, depending on the text format setting; see setTextFormat().
    /// The default setting is Qt::AutoText; i.e. QLabel will try to
    /// auto-detect the format of the text set.
    /// See [Supported HTML Subset](Supported%20HTML%20Subset)
    /// for the definition of rich text.
    /// 
    /// If a buddy has been set, the buddy mnemonic key is updated
    /// from the new text.
    /// 
    /// Note that QLabel is well-suited to display small rich text
    /// documents, such as small documents that get their document
    /// specific settings (font, text color, link color) from the label's
    /// palette and font properties. For large documents, use QTextEdit
    /// in read-only mode instead. QTextEdit can also provide a scroll bar
    /// when necessary.
    /// 
    /// **Note**: This function enables mouse tracking if *text* contains rich
    /// text.
    /// 
    /// **See also:** setTextFormat()
    /// setBuddy()
    /// alignment
    /// 
    /// Specifies how the label should interact with user input if it displays text.
    /// 
    /// If the flags contain Qt::LinksAccessibleByKeyboard the focus policy is also
    /// automatically set to Qt::StrongFocus. If Qt::TextSelectableByKeyboard is set
    /// then the focus policy is set to Qt::ClickFocus.
    /// 
    /// The default value is Qt::LinksAccessibleByMouse.
    /// 
    /// See the Qt::TextFormat enum for an explanation of the possible
    /// options.
    /// 
    /// The default format is Qt::AutoText.
    /// 
    /// **See also:** text()
    text() -> String,
    /// 
    /// If no pixmap has been set this will return nullptr.
    /// 
    /// Setting the pixmap clears any previous content. The buddy
    /// shortcut, if any, is disabled.
    pixmap() -> Pixmap?,
    /// 
    /// Returns the label's picture or nullptr if the label doesn't have a
    /// picture.
    picture() -> Picture?,
    /// 
    /// Returns a pointer to the label's movie, or nullptr if no movie has been
    /// set.
    /// 
    /// **See also:** setMovie()
    movie() -> Movie?,
    /// 
    /// See the Qt::TextFormat enum for an explanation of the possible
    /// options.
    /// 
    /// The default format is Qt::AutoText.
    /// 
    /// **See also:** text()
    text_format() -> Rute::TextFormat,
    set_text_format(arg0: Rute::TextFormat),
    /// 
    /// By default, the contents of the label are left-aligned and vertically-centered.
    /// 
    /// **See also:** text
    alignment() -> Rute::Alignment,
    set_alignment(arg0: Rute::Alignment),
    set_word_wrap(on: bool),
    /// 
    /// If this property is `true` then label text is wrapped where
    /// necessary at word-breaks; otherwise it is not wrapped at all.
    /// 
    /// By default, word wrap is disabled.
    /// 
    /// **See also:** text
    word_wrap() -> bool,
    /// 
    /// If a label displays text, the indent applies to the left edge if
    /// alignment() is Qt::AlignLeft, to the right edge if alignment() is
    /// Qt::AlignRight, to the top edge if alignment() is Qt::AlignTop, and
    /// to the bottom edge if alignment() is Qt::AlignBottom.
    /// 
    /// If indent is negative, or if no indent has been set, the label
    /// computes the effective indent as follows: If frameWidth() is 0,
    /// the effective indent becomes 0. If frameWidth() is greater than 0,
    /// the effective indent becomes half the width of the character
    /// of the widget's current font().
    /// 
    /// By default, the indent is -1, meaning that an effective indent is
    /// calculating in the manner described above.
    /// 
    /// **See also:** alignment
    /// margin
    /// frameWidth()
    /// font()
    indent() -> i32,
    set_indent(arg0: i32),
    /// 
    /// The margin is the distance between the innermost pixel of the
    /// frame and the outermost pixel of contents.
    /// 
    /// The default margin is 0.
    /// 
    /// **See also:** indent
    margin() -> i32,
    set_margin(arg0: i32),
    has_scaled_contents() -> bool,
    set_scaled_contents(arg0: bool),
    /// 
    [event] size_hint() -> Size,
    /// 
    [event] minimum_size_hint() -> Size,
    /// 
    /// Sets this label's buddy to *buddy.*
    /// 
    /// When the user presses the shortcut key indicated by this label,
    /// the keyboard focus is transferred to the label's buddy widget.
    /// 
    /// The buddy mechanism is only available for QLabels that contain
    /// text in which one character is prefixed with an ampersand, '&'.
    /// This character is set as the shortcut key. See the [QKeySequence::mnemonic()](QKeySequence::mnemonic())
    /// documentation for details (to display an
    /// actual ampersand, use '&&').
    /// 
    /// In a dialog, you might create two data entry widgets and a label
    /// for each, and set up the geometry layout so each label is just to
    /// the left of its data entry widget (its ), for example:
    /// 
    /// With the code above, the focus jumps to the Name field when the
    /// user presses Alt+N, and to the Phone field when the user presses
    /// Alt+P.
    /// 
    /// To unset a previously set buddy, call this function with *buddy*
    /// set to nullptr.
    /// 
    /// **See also:** buddy()
    /// setText()
    /// QShortcut
    /// setAlignment()
    set_buddy(arg0: *WidgetType),
    /// 
    /// Returns this label's buddy, or nullptr if no buddy is currently set.
    /// 
    /// **See also:** setBuddy()
    buddy() -> Widget?,
    /// 
    [event] height_for_width(arg0: i32) -> i32,
    /// 
    /// Specifies whether QLabel should automatically open links using
    /// QDesktopServices::openUrl() instead of emitting the
    /// linkActivated() signal.
    /// 
    /// **Note:** The textInteractionFlags set on the label need to include
    /// either LinksAccessibleByMouse or LinksAccessibleByKeyboard.
    /// 
    /// The default value is false.
    /// 
    /// **See also:** textInteractionFlags()
    open_external_links() -> bool,
    set_open_external_links(open: bool),
    set_text_interaction_flags(flags: Rute::TextInteractionFlags),
    /// 
    /// Specifies how the label should interact with user input if it displays text.
    /// 
    /// If the flags contain Qt::LinksAccessibleByKeyboard the focus policy is also
    /// automatically set to Qt::StrongFocus. If Qt::TextSelectableByKeyboard is set
    /// then the focus policy is set to Qt::ClickFocus.
    /// 
    /// The default value is Qt::LinksAccessibleByMouse.
    text_interaction_flags() -> Rute::TextInteractionFlags,
    /// 
    /// Selects text from position *start* and for *length* characters.
    /// 
    /// **See also:** selectedText()
    /// 
    /// **Note:** The textInteractionFlags set on the label need to include
    /// either TextSelectableByMouse or TextSelectableByKeyboard.
    /// 
    set_selection(arg0: i32, arg1: i32),
    /// 
    /// hasSelectedText() returns `true` if some or all of the text has been
    /// selected by the user; otherwise returns `false.`
    /// 
    /// By default, this property is `false.`
    /// 
    /// **See also:** selectedText()
    /// 
    /// **Note:** The textInteractionFlags set on the label need to include
    /// either TextSelectableByMouse or TextSelectableByKeyboard.
    /// 
    has_selected_text() -> bool,
    /// 
    /// If there is no selected text this property's value is
    /// an empty string.
    /// 
    /// By default, this property contains an empty string.
    /// 
    /// **See also:** hasSelectedText()
    /// 
    /// **Note:** The textInteractionFlags set on the label need to include
    /// either TextSelectableByMouse or TextSelectableByKeyboard.
    /// 
    selected_text() -> String,
    /// 
    /// selectionStart() returns the index of the first selected character in the
    /// label or -1 if no text is selected.
    /// 
    /// **See also:** selectedText()
    /// 
    /// **Note:** The textInteractionFlags set on the label need to include
    /// either TextSelectableByMouse or TextSelectableByKeyboard.
    /// 
    selection_start() -> i32,
    set_text(arg0: String),
    set_pixmap(arg0: &PixmapType),
    /// 
    /// Sets the label contents to *picture.* Any previous content is
    /// cleared.
    /// 
    /// The buddy shortcut, if any, is disabled.
    /// 
    /// **See also:** picture()
    /// setBuddy()
    set_picture(arg0: &PictureType),
    /// 
    /// Sets the label contents to *movie.* Any previous content is
    /// cleared. The label does NOT take ownership of the movie.
    /// 
    /// The buddy shortcut, if any, is disabled.
    /// 
    /// **See also:** movie()
    /// setBuddy()
    set_movie(movie: *MovieType),
    /// 
    /// Sets the label contents to plain text containing the textual
    /// representation of integer *num.* Any previous content is cleared.
    /// Does nothing if the integer's string representation is the same as
    /// the current contents of the label.
    /// 
    /// The buddy shortcut, if any, is disabled.
    /// 
    /// **See also:** setText()
    /// QString::setNum()
    /// setBuddy()
    /// 
    /// **Overloads**
    /// Sets the label contents to plain text containing the textual
    /// representation of double *num.* Any previous content is cleared.
    /// Does nothing if the double's string representation is the same as
    /// the current contents of the label.
    /// 
    /// The buddy shortcut, if any, is disabled.
    /// 
    /// **See also:** setText()
    /// QString::setNum()
    /// setBuddy()
    set_num(arg0: i32),
    /// 
    /// Sets the label contents to plain text containing the textual
    /// representation of integer *num.* Any previous content is cleared.
    /// Does nothing if the integer's string representation is the same as
    /// the current contents of the label.
    /// 
    /// The buddy shortcut, if any, is disabled.
    /// 
    /// **See also:** setText()
    /// QString::setNum()
    /// setBuddy()
    /// 
    /// **Overloads**
    /// Sets the label contents to plain text containing the textual
    /// representation of double *num.* Any previous content is cleared.
    /// Does nothing if the double's string representation is the same as
    /// the current contents of the label.
    /// 
    /// The buddy shortcut, if any, is disabled.
    /// 
    /// **See also:** setText()
    /// QString::setNum()
    /// setBuddy()
    set_num(arg0: double),
    /// 
    /// Clears any label contents.
    clear(),
    /// 
    /// This signal is emitted when the user clicks a link. The URL
    /// referred to by the anchor is passed in *link.*
    /// 
    /// **See also:** linkHovered()
    [signal] link_activated(link: String),
    /// 
    /// This signal is emitted when the user hovers over a link. The URL
    /// referred to by the anchor is passed in *link.*
    /// 
    /// **See also:** linkActivated()
    [signal] link_hovered(link: String),
    /// 
    [event] event(e: *EventType) -> bool,
    /// 
    [event] key_press_event(ev: *KeyEventType),
    /// 
    [event] paint_event(arg0: *PaintEventType),
    /// 
    [event] change_event(arg0: *EventType),
    /// 
    [event] mouse_press_event(ev: *MouseEventType),
    /// 
    [event] mouse_move_event(ev: *MouseEventType),
    /// 
    [event] mouse_release_event(ev: *MouseEventType),
    /// 
    [event] context_menu_event(ev: *ContextMenuEventType),
    /// 
    [event] focus_in_event(ev: *FocusEventType),
    /// 
    [event] focus_out_event(ev: *FocusEventType),
    /// 
    [event] focus_next_prev_child(next: bool) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
