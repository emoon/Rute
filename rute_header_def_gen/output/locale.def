/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct Locale {
    qt_check_for_qgadget_macro(),
    /// 
    /// Swaps locale *other* with this locale. This operation is very fast and
    /// never fails.
    swap(other: &LocaleType),
    /// 
    /// Returns the language of this locale.
    /// 
    /// **See also:** [`script()`]
    /// [`country()`]
    /// [`language_to_string()`]
    /// [`bcp47_name()`]
    /// 
    /// Returns a QString containing the name of *language.*
    /// 
    /// **See also:** [`country_to_string()`]
    /// [`script_to_string()`]
    /// [`bcp47_name()`]
    language() -> Locale::Language,
    /// 
    /// Returns the script of this locale.
    /// 
    /// **See also:** [`language()`]
    /// [`country()`]
    /// [`language_to_string()`]
    /// [`script_to_string()`]
    /// [`bcp47_name()`]
    /// 
    /// Returns a QString containing the name of *script.*
    /// 
    /// **See also:** [`language_to_string()`]
    /// [`country_to_string()`]
    /// [`script()`]
    /// [`bcp47_name()`]
    script() -> Locale::Script,
    /// 
    /// Returns the language and country of this locale as a
    /// string of the form , where
    /// language is a lowercase, two-letter ISO 639 language code,
    /// and country is an uppercase, two- or three-letter ISO 3166 country code.
    /// 
    /// Note that even if QLocale object was constructed with an explicit script,
    /// name() will not contain it for compatibility reasons. Use bcp47Name() instead
    /// if you need a full locale name.
    /// 
    /// **See also:** [`q_locale()`]
    /// [`language()`]
    /// [`script()`]
    /// [`country()`]
    /// [`bcp47_name()`]
    name() -> String,
    /// 
    /// Returns the dash-separated language, script and country (and possibly other BCP47 fields)
    /// of this locale as a string.
    /// 
    /// Unlike the uiLanguages() the returned value of the bcp47Name() represents
    /// the locale name of the QLocale data but not the language the user-interface
    /// should be in.
    /// 
    /// This function tries to conform the locale name to BCP47.
    /// 
    /// **See also:** [`language()`]
    /// [`country()`]
    /// [`script()`]
    /// [`ui_languages()`]
    bcp47_name() -> String,
    /// 
    /// Returns a native name of the language for the locale. For example
    /// for Swiss-German locale.
    /// 
    /// **See also:** [`native_country_name()`]
    /// [`language_to_string()`]
    native_language_name() -> String,
    /// 
    /// Returns the short int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_u_short()`]
    /// [`to_string()`]
    /// 
    /// Returns the short int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_u_short()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the short int represented by the localized string *s.*
    /// 
    /// If the conversion fails, the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_u_short()`]
    /// [`to_string()`]
    /// 
    to_short(s: String, ok: *bool) -> short,
    /// 
    /// Returns the unsigned short int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_short()`]
    /// [`to_string()`]
    /// 
    /// Returns the unsigned short int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_short()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the unsigned short int represented by the localized string *s.*
    /// 
    /// If the conversion fails, the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_short()`]
    /// [`to_string()`]
    /// 
    to_u_short(s: String, ok: *bool) -> ushort,
    /// 
    /// Returns the int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_u_int()`]
    /// [`to_string()`]
    /// 
    /// Returns the int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_u_int()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the int represented by the localized string *s.*
    /// 
    /// If the conversion fails, the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_u_int()`]
    /// [`to_string()`]
    /// 
    to_int(s: String, ok: *bool) -> i32,
    /// 
    /// Returns the unsigned int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_int()`]
    /// [`to_string()`]
    /// 
    /// Returns the unsigned int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_int()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the unsigned int represented by the localized string *s.*
    /// 
    /// If the conversion fails, the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_int()`]
    /// [`to_string()`]
    /// 
    to_u_int(s: String, ok: *bool) -> uint,
    /// 
    /// Returns the long long int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_int()`]
    /// [`to_u_long_long()`]
    /// [`to_double()`]
    /// [`to_string()`]
    /// 
    /// Returns the long long int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_int()`]
    /// [`to_u_long_long()`]
    /// [`to_double()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the long long int represented by the localized string *s.*
    /// 
    /// If the conversion fails, the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_int()`]
    /// [`to_u_long_long()`]
    /// [`to_double()`]
    /// [`to_string()`]
    /// 
    to_long_long(s: String, ok: *bool) -> i64,
    /// 
    /// Returns the unsigned long long int represented by the localized
    /// string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_long_long()`]
    /// [`to_int()`]
    /// [`to_double()`]
    /// [`to_string()`]
    /// 
    /// Returns the unsigned long long int represented by the localized
    /// string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_long_long()`]
    /// [`to_int()`]
    /// [`to_double()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the unsigned long long int represented by the localized
    /// string *s.*
    /// 
    /// If the conversion fails, the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_long_long()`]
    /// [`to_int()`]
    /// [`to_double()`]
    /// [`to_string()`]
    /// 
    to_u_long_long(s: String, ok: *bool) -> qulonglong,
    /// 
    /// Returns the float represented by the localized string *s,* or 0.0
    /// if the conversion failed.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function does not fall back to the 'C' locale if the string
    /// cannot be interpreted in this locale.
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_double()`]
    /// [`to_int()`]
    /// [`to_string()`]
    /// 
    /// Returns the float represented by the localized string *s,* or 0.0
    /// if the conversion failed.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function does not fall back to the 'C' locale if the string
    /// cannot be interpreted in this locale.
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_double()`]
    /// [`to_int()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the float represented by the localized string *s,* or 0.0
    /// if the conversion failed.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_double()`]
    /// [`to_int()`]
    /// [`to_string()`]
    /// 
    to_float(s: String, ok: *bool) -> f32,
    /// 
    /// Returns the double represented by the localized string *s,* or
    /// 0.0 if the conversion failed.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function does not fall back to the 'C' locale if the string
    /// cannot be interpreted in this locale.
    /// 
    /// Notice that the last conversion returns 1234.0, because '.' is the
    /// thousands group separator in the German locale.
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_float()`]
    /// [`to_int()`]
    /// [`to_string()`]
    /// 
    /// Returns the double represented by the localized string *s,* or
    /// 0.0 if the conversion failed.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function does not fall back to the 'C' locale if the string
    /// cannot be interpreted in this locale.
    /// 
    /// Notice that the last conversion returns 1234.0, because '.' is the
    /// thousands group separator in the German locale.
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_float()`]
    /// [`to_int()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the double represented by the localized string *s,* or
    /// 0.0 if the conversion failed.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// Unlike QString::toDouble(), this function does not fall back to
    /// the locale if the string cannot be interpreted in this
    /// locale.
    /// 
    /// Notice that the last conversion returns 1234.0, because '.' is the
    /// thousands group separator in the German locale.
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_float()`]
    /// [`to_int()`]
    /// [`to_string()`]
    /// 
    to_double(s: String, ok: *bool) -> double,
    /// 
    /// Returns the short int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_u_short()`]
    /// [`to_string()`]
    /// 
    /// Returns the short int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_u_short()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the short int represented by the localized string *s.*
    /// 
    /// If the conversion fails, the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_u_short()`]
    /// [`to_string()`]
    /// 
    [org_name(toShort)]
    to_short_2(s: &StringRefType, ok: *bool) -> short,
    /// 
    /// Returns the unsigned short int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_short()`]
    /// [`to_string()`]
    /// 
    /// Returns the unsigned short int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_short()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the unsigned short int represented by the localized string *s.*
    /// 
    /// If the conversion fails, the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_short()`]
    /// [`to_string()`]
    /// 
    [org_name(toUShort)]
    to_u_short_2(s: &StringRefType, ok: *bool) -> ushort,
    /// 
    /// Returns the int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_u_int()`]
    /// [`to_string()`]
    /// 
    /// Returns the int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_u_int()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the int represented by the localized string *s.*
    /// 
    /// If the conversion fails, the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_u_int()`]
    /// [`to_string()`]
    /// 
    [org_name(toInt)]
    to_int_2(s: &StringRefType, ok: *bool) -> i32,
    /// 
    /// Returns the unsigned int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_int()`]
    /// [`to_string()`]
    /// 
    /// Returns the unsigned int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_int()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the unsigned int represented by the localized string *s.*
    /// 
    /// If the conversion fails, the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_int()`]
    /// [`to_string()`]
    /// 
    [org_name(toUInt)]
    to_u_int_2(s: &StringRefType, ok: *bool) -> uint,
    /// 
    /// Returns the long long int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_int()`]
    /// [`to_u_long_long()`]
    /// [`to_double()`]
    /// [`to_string()`]
    /// 
    /// Returns the long long int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_int()`]
    /// [`to_u_long_long()`]
    /// [`to_double()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the long long int represented by the localized string *s.*
    /// 
    /// If the conversion fails, the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_int()`]
    /// [`to_u_long_long()`]
    /// [`to_double()`]
    /// [`to_string()`]
    /// 
    [org_name(toLongLong)]
    to_long_long_2(s: &StringRefType, ok: *bool) -> i64,
    /// 
    /// Returns the unsigned long long int represented by the localized
    /// string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_long_long()`]
    /// [`to_int()`]
    /// [`to_double()`]
    /// [`to_string()`]
    /// 
    /// Returns the unsigned long long int represented by the localized
    /// string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_long_long()`]
    /// [`to_int()`]
    /// [`to_double()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the unsigned long long int represented by the localized
    /// string *s.*
    /// 
    /// If the conversion fails, the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_long_long()`]
    /// [`to_int()`]
    /// [`to_double()`]
    /// [`to_string()`]
    /// 
    [org_name(toULongLong)]
    to_u_long_long_2(s: &StringRefType, ok: *bool) -> qulonglong,
    /// 
    /// Returns the float represented by the localized string *s,* or 0.0
    /// if the conversion failed.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function does not fall back to the 'C' locale if the string
    /// cannot be interpreted in this locale.
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_double()`]
    /// [`to_int()`]
    /// [`to_string()`]
    /// 
    /// Returns the float represented by the localized string *s,* or 0.0
    /// if the conversion failed.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function does not fall back to the 'C' locale if the string
    /// cannot be interpreted in this locale.
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_double()`]
    /// [`to_int()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the float represented by the localized string *s,* or 0.0
    /// if the conversion failed.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_double()`]
    /// [`to_int()`]
    /// [`to_string()`]
    /// 
    [org_name(toFloat)]
    to_float_2(s: &StringRefType, ok: *bool) -> f32,
    /// 
    /// Returns the double represented by the localized string *s,* or
    /// 0.0 if the conversion failed.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function does not fall back to the 'C' locale if the string
    /// cannot be interpreted in this locale.
    /// 
    /// Notice that the last conversion returns 1234.0, because '.' is the
    /// thousands group separator in the German locale.
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_float()`]
    /// [`to_int()`]
    /// [`to_string()`]
    /// 
    /// Returns the double represented by the localized string *s,* or
    /// 0.0 if the conversion failed.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function does not fall back to the 'C' locale if the string
    /// cannot be interpreted in this locale.
    /// 
    /// Notice that the last conversion returns 1234.0, because '.' is the
    /// thousands group separator in the German locale.
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_float()`]
    /// [`to_int()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the double represented by the localized string *s,* or
    /// 0.0 if the conversion failed.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// Unlike QString::toDouble(), this function does not fall back to
    /// the locale if the string cannot be interpreted in this
    /// locale.
    /// 
    /// Notice that the last conversion returns 1234.0, because '.' is the
    /// thousands group separator in the German locale.
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_float()`]
    /// [`to_int()`]
    /// [`to_string()`]
    /// 
    [org_name(toDouble)]
    to_double_2(s: &StringRefType, ok: *bool) -> double,
    /// 
    /// Returns the short int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_u_short()`]
    /// [`to_string()`]
    /// 
    /// Returns the short int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_u_short()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the short int represented by the localized string *s.*
    /// 
    /// If the conversion fails, the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_u_short()`]
    /// [`to_string()`]
    /// 
    [org_name(toShort)]
    to_short_3(s: StringViewType, ok: *bool) -> short,
    /// 
    /// Returns the unsigned short int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_short()`]
    /// [`to_string()`]
    /// 
    /// Returns the unsigned short int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_short()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the unsigned short int represented by the localized string *s.*
    /// 
    /// If the conversion fails, the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_short()`]
    /// [`to_string()`]
    /// 
    [org_name(toUShort)]
    to_u_short_3(s: StringViewType, ok: *bool) -> ushort,
    /// 
    /// Returns the int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_u_int()`]
    /// [`to_string()`]
    /// 
    /// Returns the int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_u_int()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the int represented by the localized string *s.*
    /// 
    /// If the conversion fails, the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_u_int()`]
    /// [`to_string()`]
    /// 
    [org_name(toInt)]
    to_int_3(s: StringViewType, ok: *bool) -> i32,
    /// 
    /// Returns the unsigned int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_int()`]
    /// [`to_string()`]
    /// 
    /// Returns the unsigned int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_int()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the unsigned int represented by the localized string *s.*
    /// 
    /// If the conversion fails, the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_int()`]
    /// [`to_string()`]
    /// 
    [org_name(toUInt)]
    to_u_int_3(s: StringViewType, ok: *bool) -> uint,
    /// 
    /// Returns the long long int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_int()`]
    /// [`to_u_long_long()`]
    /// [`to_double()`]
    /// [`to_string()`]
    /// 
    /// Returns the long long int represented by the localized string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_int()`]
    /// [`to_u_long_long()`]
    /// [`to_double()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the long long int represented by the localized string *s.*
    /// 
    /// If the conversion fails, the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_int()`]
    /// [`to_u_long_long()`]
    /// [`to_double()`]
    /// [`to_string()`]
    /// 
    [org_name(toLongLong)]
    to_long_long_3(s: StringViewType, ok: *bool) -> i64,
    /// 
    /// Returns the unsigned long long int represented by the localized
    /// string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_long_long()`]
    /// [`to_int()`]
    /// [`to_double()`]
    /// [`to_string()`]
    /// 
    /// Returns the unsigned long long int represented by the localized
    /// string *s.*
    /// 
    /// If the conversion fails the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_long_long()`]
    /// [`to_int()`]
    /// [`to_double()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the unsigned long long int represented by the localized
    /// string *s.*
    /// 
    /// If the conversion fails, the function returns 0.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_long_long()`]
    /// [`to_int()`]
    /// [`to_double()`]
    /// [`to_string()`]
    /// 
    [org_name(toULongLong)]
    to_u_long_long_3(s: StringViewType, ok: *bool) -> qulonglong,
    /// 
    /// Returns the float represented by the localized string *s,* or 0.0
    /// if the conversion failed.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function does not fall back to the 'C' locale if the string
    /// cannot be interpreted in this locale.
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_double()`]
    /// [`to_int()`]
    /// [`to_string()`]
    /// 
    /// Returns the float represented by the localized string *s,* or 0.0
    /// if the conversion failed.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function does not fall back to the 'C' locale if the string
    /// cannot be interpreted in this locale.
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_double()`]
    /// [`to_int()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the float represented by the localized string *s,* or 0.0
    /// if the conversion failed.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_double()`]
    /// [`to_int()`]
    /// [`to_string()`]
    /// 
    [org_name(toFloat)]
    to_float_3(s: StringViewType, ok: *bool) -> f32,
    /// 
    /// Returns the double represented by the localized string *s,* or
    /// 0.0 if the conversion failed.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function does not fall back to the 'C' locale if the string
    /// cannot be interpreted in this locale.
    /// 
    /// Notice that the last conversion returns 1234.0, because '.' is the
    /// thousands group separator in the German locale.
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_float()`]
    /// [`to_int()`]
    /// [`to_string()`]
    /// 
    /// Returns the double represented by the localized string *s,* or
    /// 0.0 if the conversion failed.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// This function does not fall back to the 'C' locale if the string
    /// cannot be interpreted in this locale.
    /// 
    /// Notice that the last conversion returns 1234.0, because '.' is the
    /// thousands group separator in the German locale.
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_float()`]
    /// [`to_int()`]
    /// [`to_string()`]
    /// 
    /// 
    /// Returns the double represented by the localized string *s,* or
    /// 0.0 if the conversion failed.
    /// 
    /// If *ok* is not `nullptr,` failure is reported by setting * *ok*
    /// to `false,` and success by setting * *ok* to `true.`
    /// 
    /// Unlike QString::toDouble(), this function does not fall back to
    /// the locale if the string cannot be interpreted in this
    /// locale.
    /// 
    /// Notice that the last conversion returns 1234.0, because '.' is the
    /// thousands group separator in the German locale.
    /// 
    /// This function ignores leading and trailing whitespace.
    /// 
    /// **See also:** [`to_float()`]
    /// [`to_int()`]
    /// [`to_string()`]
    /// 
    [org_name(toDouble)]
    to_double_3(s: StringViewType, ok: *bool) -> double,
    /// 
    /// Returns the date format used for the current locale.
    /// 
    /// If *format* is LongFormat the format will be a long version.
    /// Otherwise it uses a shorter version.
    /// 
    /// **See also:** [`Date::to_string`]
    /// [`Date::from_string`]
    date_format(format: Locale::FormatType) -> String,
    /// 
    /// Returns the time format used for the current locale.
    /// 
    /// If *format* is LongFormat the format will be a long version.
    /// Otherwise it uses a shorter version.
    /// 
    /// **See also:** [`Time::to_string`]
    /// [`Time::from_string`]
    time_format(format: Locale::FormatType) -> String,
    /// 
    /// Returns the date time format used for the current locale.
    /// 
    /// If *format* is ShortFormat the format will be a short version.
    /// Otherwise it uses a longer version.
    /// 
    /// **See also:** [`DateTime::to_string`]
    /// [`DateTime::from_string`]
    date_time_format(format: Locale::FormatType) -> String,
    to_date(string: String, arg0: Locale::FormatType) -> Date,
    to_time(string: String, arg0: Locale::FormatType) -> Time,
    to_date_time(string: String, format: Locale::FormatType) -> DateTime,
    [org_name(toDate)]
    to_date_2(string: String, format: String) -> Date,
    [org_name(toTime)]
    to_time_2(string: String, format: String) -> Time,
    [org_name(toDateTime)]
    to_date_time_2(string: String, format: String) -> DateTime,
    /// 
    /// Returns the decimal point character of this locale.
    decimal_point() -> Char,
    /// 
    /// Returns the group separator character of this locale.
    group_separator() -> Char,
    /// 
    /// Returns the percent character of this locale.
    percent() -> Char,
    /// 
    /// Returns the zero digit character of this locale.
    zero_digit() -> Char,
    /// 
    /// Returns the negative sign character of this locale.
    negative_sign() -> Char,
    /// 
    /// Returns the positive sign character of this locale.
    positive_sign() -> Char,
    /// 
    /// Returns the exponential character of this locale.
    exponential() -> Char,
    /// 
    /// Returns the localized name of *month,* in the format specified
    /// by *type.*
    /// 
    /// **See also:** [`day_name()`]
    /// [`standalone_month_name()`]
    month_name(arg0: i32, format: Locale::FormatType) -> String,
    /// 
    /// Returns the localized name of *month* that is used as a
    /// standalone text, in the format specified by *type.*
    /// 
    /// If the locale information doesn't specify the standalone month
    /// name then return value is the same as in monthName().
    /// 
    /// **See also:** [`month_name()`]
    /// [`standalone_day_name()`]
    standalone_month_name(arg0: i32, format: Locale::FormatType) -> String,
    /// 
    /// Returns the localized name of the *day* (where 1 represents
    /// Monday, 2 represents Tuesday and so on), in the format specified
    /// by *type.*
    /// 
    /// **See also:** [`month_name()`]
    /// [`standalone_day_name()`]
    day_name(arg0: i32, format: Locale::FormatType) -> String,
    /// 
    /// Returns the localized name of the *day* (where 1 represents
    /// Monday, 2 represents Tuesday and so on) that is used as a
    /// standalone text, in the format specified by *type.*
    /// 
    /// If the locale information does not specify the standalone day
    /// name then return value is the same as in dayName().
    /// 
    /// **See also:** [`day_name()`]
    /// [`standalone_month_name()`]
    standalone_day_name(arg0: i32, format: Locale::FormatType) -> String,
    /// 
    /// Returns the first day of the week according to the current locale.
    first_day_of_week() -> Rute::DayOfWeek,
    /// 
    /// Returns a list of days that are considered weekdays according to the current locale.
    weekdays() -> List<Qt::DayOfWeek>,
    /// 
    /// Returns the localized name of the suffix for times specified using
    /// the conventions of the 12-hour clock.
    /// 
    /// **See also:** [`pm_text()`]
    am_text() -> String,
    /// 
    /// Returns the localized name of the suffix for times specified using
    /// the conventions of the 12-hour clock.
    /// 
    /// **See also:** [`am_text()`]
    pm_text() -> String,
    /// 
    /// Returns the measurement system for the locale.
    measurement_system() -> Locale::MeasurementSystem,
    /// 
    /// Returns the text direction of the language.
    text_direction() -> Rute::LayoutDirection,
    /// 
    /// Returns an uppercase copy of *str.*
    /// 
    /// If Qt Core is using the ICU libraries, they will be used to perform
    /// the transformation according to the rules of the current locale.
    /// Otherwise the conversion may be done in a platform-dependent manner,
    /// with QString::toUpper() as a generic fallback.
    /// 
    /// **See also:** [`String::to_upper`]
    to_upper(str: String) -> String,
    /// 
    /// Returns a lowercase copy of *str.*
    /// 
    /// If Qt Core is using the ICU libraries, they will be used to perform
    /// the transformation according to the rules of the current locale.
    /// Otherwise the conversion may be done in a platform-dependent manner,
    /// with QString::toLower() as a generic fallback.
    /// 
    /// **See also:** [`String::to_lower`]
    to_lower(str: String) -> String,
    /// 
    /// Returns a currency symbol according to the *format.*
    currency_symbol(arg0: Locale::CurrencySymbolFormat) -> String,
    /// 
    /// Converts a size in bytes to a human-readable localized string, comprising a
    /// number and a quantified unit. The quantifier is chosen such that the number
    /// is at least one, and as small as possible. For example if *bytes* is
    /// 16384, *precision* is 2, and *format* is [DataSizeIecFormat](DataSizeIecFormat)
    /// (the
    /// default), this function returns ; for 1330409069609 bytes it
    /// returns ; and so on. If *format* is [DataSizeIecFormat](DataSizeIecFormat)
    /// or
    /// [DataSizeTraditionalFormat,](DataSizeTraditionalFormat,)
    /// the given number of bytes is divided by a
    /// power of 1024, with result less than 1024; for [DataSizeSIFormat,](DataSizeSIFormat,)
    /// it is
    /// divided by a power of 1000, with result less than 1000.
    /// `DataSizeIecFormat` uses the new IEC standard quantifiers Ki, Mi and so on,
    /// whereas `DataSizeSIFormat` uses the older SI quantifiers k, M, etc., and
    /// `DataSizeTraditionalFormat` abuses them.
    formatted_data_size(bytes: i64, precision: i32, format: Locale::DataSizeFormats) -> String,
    /// 
    /// Returns an ordered list of locale names for translation purposes in
    /// preference order (like , , ).
    /// 
    /// The return value represents locale names that the user expects to see the
    /// UI translation in.
    /// 
    /// Most like you do not need to use this function directly, but just pass the
    /// QLocale object to the QTranslator::load() function.
    /// 
    /// The first item in the list is the most preferred one.
    /// 
    /// **See also:** [`Translator`]
    /// [`bcp47_name()`]
    ui_languages() -> [String],
    /// 
    /// Sets the global default locale to *locale.* These
    /// values are used when a QLocale object is constructed with
    /// no arguments. If this function is not called, the system's
    /// locale is used.
    /// 
    /// **Warning**: In a multithreaded application, the default locale
    /// should be set at application startup, before any non-GUI threads
    /// are created.
    /// 
    /// **See also:** [`system()`]
    /// [`c()`]
    [static] set_default(locale: &LocaleType),
    /// 
    /// Returns a string that represents a join of a given *list* of strings with
    /// a separator defined by the locale.
    /// 
    /// Returns the country of this locale.
    /// 
    /// **See also:** [`language()`]
    /// [`script()`]
    /// [`country_to_string()`]
    /// [`bcp47_name()`]
    /// 
    /// Returns a QString containing the name of *country.*
    /// 
    /// **See also:** [`language_to_string()`]
    /// [`script_to_string()`]
    /// [`country()`]
    /// [`bcp47_name()`]
    /// 
    /// Returns a QLocale object initialized to the locale.
    /// 
    /// **See also:** [`system()`]
    /// 
    /// Returns the list of countries that have entries for *language* in Qt's locale
    /// database. If the result is an empty list, then *language* is not represented in
    /// Qt's locale database.
    /// 
    /// **See also:** [`matching_locales()`]
    /// 
    /// Returns a currency symbol according to the *format.*
    [static] c() -> Locale,
    /// 
    /// Returns a QLocale object initialized to the system locale.
    /// 
    /// On Windows and Mac, this locale will use the decimal/grouping characters and date/time
    /// formats specified in the system configuration panel.
    /// 
    /// **See also:** [`c()`]
    [static] system() -> Locale,
    /// 
    /// Returns a list of valid locale objects that match the given *language,* *script* and *country.*
    /// 
    /// Getting a list of all locales:
    /// QList<QLocale> allLocales = QLocale::matchingLocales(QLocale::AnyLanguage, QLocale::AnyScript, QLocale::AnyCountry);
    /// 
    /// Getting a list of locales suitable for Russia:
    /// QList<QLocale> locales = QLocale::matchingLocales(QLocale::AnyLanguage, QLocale::AnyScript, QLocale::Russia);
    [static] matching_locales(language: Locale::Language, script: Locale::Script, country: Locale::Country) -> [Locale],
    /// 
    /// Sets the *options* related to number conversions for this
    /// QLocale instance.
    set_number_options(options: Locale::NumberOptions),
    /// 
    /// Returns the options related to number conversions for this
    /// QLocale instance.
    /// 
    /// By default, no options are set for the standard locales.
    number_options() -> Locale::NumberOptions,
    /// 
    /// Returns a string that represents a join of a given *list* of strings with
    /// a separator defined by the locale.
    create_separated_list(strl: &[String]) -> String,
}

[org_name(QLocale)]
enum Language {
    AnyLanguage = 0,
    C = 1,
    Abkhazian = 2,
    Oromo = 3,
    Afar = 4,
    Afrikaans = 5,
    Albanian = 6,
    Amharic = 7,
    Arabic = 8,
    Armenian = 9,
    Assamese = 10,
    Aymara = 11,
    Azerbaijani = 12,
    Bashkir = 13,
    Basque = 14,
    Bengali = 15,
    Dzongkha = 16,
    Bihari = 17,
    Bislama = 18,
    Breton = 19,
    Bulgarian = 20,
    Burmese = 21,
    Belarusian = 22,
    Khmer = 23,
    Catalan = 24,
    Chinese = 25,
    Corsican = 26,
    Croatian = 27,
    Czech = 28,
    Danish = 29,
    Dutch = 30,
    English = 31,
    Esperanto = 32,
    Estonian = 33,
    Faroese = 34,
    Fijian = 35,
    Finnish = 36,
    French = 37,
    WesternFrisian = 38,
    Gaelic = 39,
    Galician = 40,
    Georgian = 41,
    German = 42,
    Greek = 43,
    Greenlandic = 44,
    Guarani = 45,
    Gujarati = 46,
    Hausa = 47,
    Hebrew = 48,
    Hindi = 49,
    Hungarian = 50,
    Icelandic = 51,
    Indonesian = 52,
    Interlingua = 53,
    Interlingue = 54,
    Inuktitut = 55,
    Inupiak = 56,
    Irish = 57,
    Italian = 58,
    Japanese = 59,
    Javanese = 60,
    Kannada = 61,
    Kashmiri = 62,
    Kazakh = 63,
    Kinyarwanda = 64,
    Kirghiz = 65,
    Korean = 66,
    Kurdish = 67,
    Rundi = 68,
    Lao = 69,
    Latin = 70,
    Latvian = 71,
    Lingala = 72,
    Lithuanian = 73,
    Macedonian = 74,
    Malagasy = 75,
    Malay = 76,
    Malayalam = 77,
    Maltese = 78,
    Maori = 79,
    Marathi = 80,
    Marshallese = 81,
    Mongolian = 82,
    NauruLanguage = 83,
    Nepali = 84,
    NorwegianBokmal = 85,
    Occitan = 86,
    Oriya = 87,
    Pashto = 88,
    Persian = 89,
    Polish = 90,
    Portuguese = 91,
    Punjabi = 92,
    Quechua = 93,
    Romansh = 94,
    Romanian = 95,
    Russian = 96,
    Samoan = 97,
    Sango = 98,
    Sanskrit = 99,
    Serbian = 100,
    Ossetic = 101,
    SouthernSotho = 102,
    Tswana = 103,
    Shona = 104,
    Sindhi = 105,
    Sinhala = 106,
    Swati = 107,
    Slovak = 108,
    Slovenian = 109,
    Somali = 110,
    Spanish = 111,
    Sundanese = 112,
    Swahili = 113,
    Swedish = 114,
    Sardinian = 115,
    Tajik = 116,
    Tamil = 117,
    Tatar = 118,
    Telugu = 119,
    Thai = 120,
    Tibetan = 121,
    Tigrinya = 122,
    Tongan = 123,
    Tsonga = 124,
    Turkish = 125,
    Turkmen = 126,
    Tahitian = 127,
    Uighur = 128,
    Ukrainian = 129,
    Urdu = 130,
    Uzbek = 131,
    Vietnamese = 132,
    Volapuk = 133,
    Welsh = 134,
    Wolof = 135,
    Xhosa = 136,
    Yiddish = 137,
    Yoruba = 138,
    Zhuang = 139,
    Zulu = 140,
    NorwegianNynorsk = 141,
    Bosnian = 142,
    Divehi = 143,
    Manx = 144,
    Cornish = 145,
    Akan = 146,
    Konkani = 147,
    Ga = 148,
    Igbo = 149,
    Kamba = 150,
    Syriac = 151,
    Blin = 152,
    Geez = 153,
    Koro = 154,
    Sidamo = 155,
    Atsam = 156,
    Tigre = 157,
    Jju = 158,
    Friulian = 159,
    Venda = 160,
    Ewe = 161,
    Walamo = 162,
    Hawaiian = 163,
    Tyap = 164,
    Nyanja = 165,
    Filipino = 166,
    SwissGerman = 167,
    SichuanYi = 168,
    Kpelle = 169,
    LowGerman = 170,
    SouthNdebele = 171,
    NorthernSotho = 172,
    NorthernSami = 173,
    Taroko = 174,
    Gusii = 175,
    Taita = 176,
    Fulah = 177,
    Kikuyu = 178,
    Samburu = 179,
    Sena = 180,
    NorthNdebele = 181,
    Rombo = 182,
    Tachelhit = 183,
    Kabyle = 184,
    Nyankole = 185,
    Bena = 186,
    Vunjo = 187,
    Bambara = 188,
    Embu = 189,
    Cherokee = 190,
    Morisyen = 191,
    Makonde = 192,
    Langi = 193,
    Ganda = 194,
    Bemba = 195,
    Kabuverdianu = 196,
    Meru = 197,
    Kalenjin = 198,
    Nama = 199,
    Machame = 200,
    Colognian = 201,
    Masai = 202,
    Soga = 203,
    Luyia = 204,
    Asu = 205,
    Teso = 206,
    Saho = 207,
    KoyraChiini = 208,
    Rwa = 209,
    Luo = 210,
    Chiga = 211,
    CentralMoroccoTamazight = 212,
    KoyraboroSenni = 213,
    Shambala = 214,
    Bodo = 215,
    Avaric = 216,
    Chamorro = 217,
    Chechen = 218,
    Church = 219,
    Chuvash = 220,
    Cree = 221,
    Haitian = 222,
    Herero = 223,
    HiriMotu = 224,
    Kanuri = 225,
    Komi = 226,
    Kongo = 227,
    Kwanyama = 228,
    Limburgish = 229,
    LubaKatanga = 230,
    Luxembourgish = 231,
    Navaho = 232,
    Ndonga = 233,
    Ojibwa = 234,
    Pali = 235,
    Walloon = 236,
    Aghem = 237,
    Basaa = 238,
    Zarma = 239,
    Duala = 240,
    JolaFonyi = 241,
    Ewondo = 242,
    Bafia = 243,
    MakhuwaMeetto = 244,
    Mundang = 245,
    Kwasio = 246,
    Nuer = 247,
    Sakha = 248,
    Sangu = 249,
    CongoSwahili = 250,
    Tasawaq = 251,
    Vai = 252,
    Walser = 253,
    Yangben = 254,
    Avestan = 255,
    Asturian = 256,
    Ngomba = 257,
    Kako = 258,
    Meta = 259,
    Ngiemboon = 260,
    Aragonese = 261,
    Akkadian = 262,
    AncientEgyptian = 263,
    AncientGreek = 264,
    Aramaic = 265,
    Balinese = 266,
    Bamun = 267,
    BatakToba = 268,
    Buginese = 269,
    Buhid = 270,
    Carian = 271,
    Chakma = 272,
    ClassicalMandaic = 273,
    Coptic = 274,
    Dogri = 275,
    EasternCham = 276,
    EasternKayah = 277,
    Etruscan = 278,
    Gothic = 279,
    Hanunoo = 280,
    Ingush = 281,
    LargeFloweryMiao = 282,
    Lepcha = 283,
    Limbu = 284,
    Lisu = 285,
    Lu = 286,
    Lycian = 287,
    Lydian = 288,
    Mandingo = 289,
    Manipuri = 290,
    Meroitic = 291,
    NorthernThai = 292,
    OldIrish = 293,
    OldNorse = 294,
    OldPersian = 295,
    OldTurkish = 296,
    Pahlavi = 297,
    Parthian = 298,
    Phoenician = 299,
    PrakritLanguage = 300,
    Rejang = 301,
    Sabaean = 302,
    Samaritan = 303,
    Santali = 304,
    Saurashtra = 305,
    Sora = 306,
    Sylheti = 307,
    Tagbanwa = 308,
    TaiDam = 309,
    TaiNua = 310,
    Ugaritic = 311,
    Akoose = 312,
    Lakota = 313,
    StandardMoroccanTamazight = 314,
    Mapuche = 315,
    CentralKurdish = 316,
    LowerSorbian = 317,
    UpperSorbian = 318,
    Kenyang = 319,
    Mohawk = 320,
    Nko = 321,
    Prussian = 322,
    Kiche = 323,
    SouthernSami = 324,
    LuleSami = 325,
    InariSami = 326,
    SkoltSami = 327,
    Warlpiri = 328,
    ManichaeanMiddlePersian = 329,
    Mende = 330,
    AncientNorthArabian = 331,
    LinearA = 332,
    HmongNjua = 333,
    Ho = 334,
    Lezghian = 335,
    Bassa = 336,
    Mono = 337,
    TedimChin = 338,
    Maithili = 339,
    Ahom = 340,
    AmericanSignLanguage = 341,
    ArdhamagadhiPrakrit = 342,
    Bhojpuri = 343,
    HieroglyphicLuwian = 344,
    LiteraryChinese = 345,
    Mazanderani = 346,
    Mru = 347,
    Newari = 348,
    NorthernLuri = 349,
    Palauan = 350,
    Papiamento = 351,
    Saraiki = 352,
    TokelauLanguage = 353,
    TokPisin = 354,
    TuvaluLanguage = 355,
    UncodedLanguages = 356,
    Cantonese = 357,
    Osage = 358,
    Tangut = 359,
    Norwegian = 85,
    Moldavian = 95,
    SerboCroatian = 100,
    Tagalog = 166,
    Twi = 146,
    Afan = 3,
    Byelorussian = 22,
    Bhutani = 16,
    Cambodian = 23,
    Kurundi = 68,
    RhaetoRomance = 94,
    Chewa = 165,
    Frisian = 38,
    Uigur = 128,
    LastLanguage = 359,
}

[org_name(QLocale)]
enum Script {
    AnyScript = 0,
    ArabicScript = 1,
    CyrillicScript = 2,
    DeseretScript = 3,
    GurmukhiScript = 4,
    SimplifiedHanScript = 5,
    TraditionalHanScript = 6,
    LatinScript = 7,
    MongolianScript = 8,
    TifinaghScript = 9,
    ArmenianScript = 10,
    BengaliScript = 11,
    CherokeeScript = 12,
    DevanagariScript = 13,
    EthiopicScript = 14,
    GeorgianScript = 15,
    GreekScript = 16,
    GujaratiScript = 17,
    HebrewScript = 18,
    JapaneseScript = 19,
    KhmerScript = 20,
    KannadaScript = 21,
    KoreanScript = 22,
    LaoScript = 23,
    MalayalamScript = 24,
    MyanmarScript = 25,
    OriyaScript = 26,
    TamilScript = 27,
    TeluguScript = 28,
    ThaanaScript = 29,
    ThaiScript = 30,
    TibetanScript = 31,
    SinhalaScript = 32,
    SyriacScript = 33,
    YiScript = 34,
    VaiScript = 35,
    AvestanScript = 36,
    BalineseScript = 37,
    BamumScript = 38,
    BatakScript = 39,
    BopomofoScript = 40,
    BrahmiScript = 41,
    BugineseScript = 42,
    BuhidScript = 43,
    CanadianAboriginalScript = 44,
    CarianScript = 45,
    ChakmaScript = 46,
    ChamScript = 47,
    CopticScript = 48,
    CypriotScript = 49,
    EgyptianHieroglyphsScript = 50,
    FraserScript = 51,
    GlagoliticScript = 52,
    GothicScript = 53,
    HanScript = 54,
    HangulScript = 55,
    HanunooScript = 56,
    ImperialAramaicScript = 57,
    InscriptionalPahlaviScript = 58,
    InscriptionalParthianScript = 59,
    JavaneseScript = 60,
    KaithiScript = 61,
    KatakanaScript = 62,
    KayahLiScript = 63,
    KharoshthiScript = 64,
    LannaScript = 65,
    LepchaScript = 66,
    LimbuScript = 67,
    LinearBScript = 68,
    LycianScript = 69,
    LydianScript = 70,
    MandaeanScript = 71,
    MeiteiMayekScript = 72,
    MeroiticScript = 73,
    MeroiticCursiveScript = 74,
    NkoScript = 75,
    NewTaiLueScript = 76,
    OghamScript = 77,
    OlChikiScript = 78,
    OldItalicScript = 79,
    OldPersianScript = 80,
    OldSouthArabianScript = 81,
    OrkhonScript = 82,
    OsmanyaScript = 83,
    PhagsPaScript = 84,
    PhoenicianScript = 85,
    PollardPhoneticScript = 86,
    RejangScript = 87,
    RunicScript = 88,
    SamaritanScript = 89,
    SaurashtraScript = 90,
    SharadaScript = 91,
    ShavianScript = 92,
    SoraSompengScript = 93,
    CuneiformScript = 94,
    SundaneseScript = 95,
    SylotiNagriScript = 96,
    TagalogScript = 97,
    TagbanwaScript = 98,
    TaiLeScript = 99,
    TaiVietScript = 100,
    TakriScript = 101,
    UgariticScript = 102,
    BrailleScript = 103,
    HiraganaScript = 104,
    CaucasianAlbanianScript = 105,
    BassaVahScript = 106,
    DuployanScript = 107,
    ElbasanScript = 108,
    GranthaScript = 109,
    PahawhHmongScript = 110,
    KhojkiScript = 111,
    LinearAScript = 112,
    MahajaniScript = 113,
    ManichaeanScript = 114,
    MendeKikakuiScript = 115,
    ModiScript = 116,
    MroScript = 117,
    OldNorthArabianScript = 118,
    NabataeanScript = 119,
    PalmyreneScript = 120,
    PauCinHauScript = 121,
    OldPermicScript = 122,
    PsalterPahlaviScript = 123,
    SiddhamScript = 124,
    KhudawadiScript = 125,
    TirhutaScript = 126,
    VarangKshitiScript = 127,
    AhomScript = 128,
    AnatolianHieroglyphsScript = 129,
    HatranScript = 130,
    MultaniScript = 131,
    OldHungarianScript = 132,
    SignWritingScript = 133,
    AdlamScript = 134,
    BhaiksukiScript = 135,
    MarchenScript = 136,
    NewaScript = 137,
    OsageScript = 138,
    TangutScript = 139,
    HanWithBopomofoScript = 140,
    JamoScript = 141,
    SimplifiedChineseScript = 5,
    TraditionalChineseScript = 6,
    LastScript = 141,
}

[org_name(QLocale)]
enum Country {
    AnyCountry = 0,
    Afghanistan = 1,
    Albania = 2,
    Algeria = 3,
    AmericanSamoa = 4,
    Andorra = 5,
    Angola = 6,
    Anguilla = 7,
    Antarctica = 8,
    AntiguaAndBarbuda = 9,
    Argentina = 10,
    Armenia = 11,
    Aruba = 12,
    Australia = 13,
    Austria = 14,
    Azerbaijan = 15,
    Bahamas = 16,
    Bahrain = 17,
    Bangladesh = 18,
    Barbados = 19,
    Belarus = 20,
    Belgium = 21,
    Belize = 22,
    Benin = 23,
    Bermuda = 24,
    Bhutan = 25,
    Bolivia = 26,
    BosniaAndHerzegowina = 27,
    Botswana = 28,
    BouvetIsland = 29,
    Brazil = 30,
    BritishIndianOceanTerritory = 31,
    Brunei = 32,
    Bulgaria = 33,
    BurkinaFaso = 34,
    Burundi = 35,
    Cambodia = 36,
    Cameroon = 37,
    Canada = 38,
    CapeVerde = 39,
    CaymanIslands = 40,
    CentralAfricanRepublic = 41,
    Chad = 42,
    Chile = 43,
    China = 44,
    ChristmasIsland = 45,
    CocosIslands = 46,
    Colombia = 47,
    Comoros = 48,
    CongoKinshasa = 49,
    CongoBrazzaville = 50,
    CookIslands = 51,
    CostaRica = 52,
    IvoryCoast = 53,
    Croatia = 54,
    Cuba = 55,
    Cyprus = 56,
    CzechRepublic = 57,
    Denmark = 58,
    Djibouti = 59,
    Dominica = 60,
    DominicanRepublic = 61,
    EastTimor = 62,
    Ecuador = 63,
    Egypt = 64,
    ElSalvador = 65,
    EquatorialGuinea = 66,
    Eritrea = 67,
    Estonia = 68,
    Ethiopia = 69,
    FalklandIslands = 70,
    FaroeIslands = 71,
    Fiji = 72,
    Finland = 73,
    France = 74,
    Guernsey = 75,
    FrenchGuiana = 76,
    FrenchPolynesia = 77,
    FrenchSouthernTerritories = 78,
    Gabon = 79,
    Gambia = 80,
    Georgia = 81,
    Germany = 82,
    Ghana = 83,
    Gibraltar = 84,
    Greece = 85,
    Greenland = 86,
    Grenada = 87,
    Guadeloupe = 88,
    Guam = 89,
    Guatemala = 90,
    Guinea = 91,
    GuineaBissau = 92,
    Guyana = 93,
    Haiti = 94,
    HeardAndMcDonaldIslands = 95,
    Honduras = 96,
    HongKong = 97,
    Hungary = 98,
    Iceland = 99,
    India = 100,
    Indonesia = 101,
    Iran = 102,
    Iraq = 103,
    Ireland = 104,
    Israel = 105,
    Italy = 106,
    Jamaica = 107,
    Japan = 108,
    Jordan = 109,
    Kazakhstan = 110,
    Kenya = 111,
    Kiribati = 112,
    NorthKorea = 113,
    SouthKorea = 114,
    Kuwait = 115,
    Kyrgyzstan = 116,
    Laos = 117,
    Latvia = 118,
    Lebanon = 119,
    Lesotho = 120,
    Liberia = 121,
    Libya = 122,
    Liechtenstein = 123,
    Lithuania = 124,
    Luxembourg = 125,
    Macau = 126,
    Macedonia = 127,
    Madagascar = 128,
    Malawi = 129,
    Malaysia = 130,
    Maldives = 131,
    Mali = 132,
    Malta = 133,
    MarshallIslands = 134,
    Martinique = 135,
    Mauritania = 136,
    Mauritius = 137,
    Mayotte = 138,
    Mexico = 139,
    Micronesia = 140,
    Moldova = 141,
    Monaco = 142,
    Mongolia = 143,
    Montserrat = 144,
    Morocco = 145,
    Mozambique = 146,
    Myanmar = 147,
    Namibia = 148,
    NauruCountry = 149,
    Nepal = 150,
    Netherlands = 151,
    CuraSao = 152,
    NewCaledonia = 153,
    NewZealand = 154,
    Nicaragua = 155,
    Niger = 156,
    Nigeria = 157,
    Niue = 158,
    NorfolkIsland = 159,
    NorthernMarianaIslands = 160,
    Norway = 161,
    Oman = 162,
    Pakistan = 163,
    Palau = 164,
    PalestinianTerritories = 165,
    Panama = 166,
    PapuaNewGuinea = 167,
    Paraguay = 168,
    Peru = 169,
    Philippines = 170,
    Pitcairn = 171,
    Poland = 172,
    Portugal = 173,
    PuertoRico = 174,
    Qatar = 175,
    Reunion = 176,
    Romania = 177,
    Russia = 178,
    Rwanda = 179,
    SaintKittsAndNevis = 180,
    SaintLucia = 181,
    SaintVincentAndTheGrenadines = 182,
    Samoa = 183,
    SanMarino = 184,
    SaoTomeAndPrincipe = 185,
    SaudiArabia = 186,
    Senegal = 187,
    Seychelles = 188,
    SierraLeone = 189,
    Singapore = 190,
    Slovakia = 191,
    Slovenia = 192,
    SolomonIslands = 193,
    Somalia = 194,
    SouthAfrica = 195,
    SouthGeorgiaAndTheSouthSandwichIslands = 196,
    Spain = 197,
    SriLanka = 198,
    SaintHelena = 199,
    SaintPierreAndMiquelon = 200,
    Sudan = 201,
    Suriname = 202,
    SvalbardAndJanMayenIslands = 203,
    Swaziland = 204,
    Sweden = 205,
    Switzerland = 206,
    Syria = 207,
    Taiwan = 208,
    Tajikistan = 209,
    Tanzania = 210,
    Thailand = 211,
    Togo = 212,
    TokelauCountry = 213,
    Tonga = 214,
    TrinidadAndTobago = 215,
    Tunisia = 216,
    Turkey = 217,
    Turkmenistan = 218,
    TurksAndCaicosIslands = 219,
    TuvaluCountry = 220,
    Uganda = 221,
    Ukraine = 222,
    UnitedArabEmirates = 223,
    UnitedKingdom = 224,
    UnitedStates = 225,
    UnitedStatesMinorOutlyingIslands = 226,
    Uruguay = 227,
    Uzbekistan = 228,
    Vanuatu = 229,
    VaticanCityState = 230,
    Venezuela = 231,
    Vietnam = 232,
    BritishVirginIslands = 233,
    UnitedStatesVirginIslands = 234,
    WallisAndFutunaIslands = 235,
    WesternSahara = 236,
    Yemen = 237,
    CanaryIslands = 238,
    Zambia = 239,
    Zimbabwe = 240,
    ClippertonIsland = 241,
    Montenegro = 242,
    Serbia = 243,
    SaintBarthelemy = 244,
    SaintMartin = 245,
    LatinAmericaAndTheCaribbean = 246,
    AscensionIsland = 247,
    AlandIslands = 248,
    DiegoGarcia = 249,
    CeutaAndMelilla = 250,
    IsleOfMan = 251,
    Jersey = 252,
    TristanDaCunha = 253,
    SouthSudan = 254,
    Bonaire = 255,
    SintMaarten = 256,
    Kosovo = 257,
    EuropeanUnion = 258,
    OutlyingOceania = 259,
    Tokelau = 213,
    Tuvalu = 220,
    DemocraticRepublicOfCongo = 49,
    PeoplesRepublicOfCongo = 50,
    DemocraticRepublicOfKorea = 113,
    RepublicOfKorea = 114,
    RussianFederation = 178,
    SyrianArabRepublic = 207,
    LastCountry = 259,
}

[org_name(QLocale)]
enum MeasurementSystem {
    MetricSystem = 0,
    ImperialUSSystem = 1,
    ImperialUKSystem = 2,
    ImperialSystem = 1,
}

[org_name(QLocale)]
enum FormatType {
    LongFormat = 0,
    ShortFormat = 1,
    NarrowFormat = 2,
}

[org_name(QLocale)]
enum NumberOption {
    DefaultNumberOptions = 0,
    OmitGroupSeparator = 1,
    RejectGroupSeparator = 2,
    OmitLeadingZeroInExponent = 4,
    RejectLeadingZeroInExponent = 8,
    IncludeTrailingZeroesAfterDot = 16,
    RejectTrailingZeroesAfterDot = 32,
}

[org_name(QLocale)]
enum FloatingPointPrecisionOption {
    FloatingPointShortest = 4294967168,
}

[org_name(QLocale)]
enum CurrencySymbolFormat {
    /// a ISO-4217 code of the currency.
    CurrencyIsoCode = 0,
    /// a currency symbol.
    CurrencySymbol = 1,
    /// a user readable name of the currency.
    CurrencyDisplayName = 2,
}

[org_name(QLocale)]
enum DataSizeFormat {
    DataSizeBase1000 = 1,
    DataSizeSIQuantifiers = 2,
    /// format using base 1024 and IEC prefixes: KiB, MiB, GiB, ...
    DataSizeIecFormat = 0,
    /// format using base 1024 and SI prefixes: kB, MB, GB, ...
    DataSizeTraditionalFormat = 2,
    /// format using base 1000 and SI prefixes: kB, MB, GB, ...
    DataSizeSIFormat = 3,
}

[org_name(QLocale)]
enum QuotationStyle {
    StandardQuotation = 0,
    AlternateQuotation = 1,
}

// vim: syntax=rust expandtab ts=4 sw=4
