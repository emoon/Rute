///     \class QMatrix
///     \brief The QMatrix class specifies 2D transformations of a
///     coordinate system.
///     \obsolete
/// 
///     \ingroup painting
///     \inmodule QtGui
/// 
///     A matrix specifies how to translate, scale, shear or rotate the
///     coordinate system, and is typically used when rendering graphics.
///     QMatrix, in contrast to QTransform, does not allow perspective
///     transformations. QTransform is the recommended transformation
///     class in Qt.
/// 
///     A QMatrix object can be built using the setMatrix(), scale(),
///     rotate(), translate() and shear() functions.  Alternatively, it
///     can be built by applying \l {QMatrix#Basic Matrix
///     Operations}{basic matrix operations}. The matrix can also be
///     defined when constructed, and it can be reset to the identity
///     matrix (the default) using the reset() function.
/// 
///     The QMatrix class supports mapping of graphic primitives: A given
///     point, line, polygon, region, or painter path can be mapped to the
///     coordinate system defined by \e this matrix using the map()
///     function. In case of a rectangle, its coordinates can be
///     transformed using the mapRect() function. A rectangle can also be
///     transformed into a \e polygon (mapped to the coordinate system
///     defined by \e this matrix), using the mapToPolygon() function.
/// 
///     QMatrix provides the isIdentity() function which returns \c true if
///     the matrix is the identity matrix, and the isInvertible() function
///     which returns \c true if the matrix is non-singular (i.e. AB = BA =
///     I). The inverted() function returns an inverted copy of \e this
///     matrix if it is invertible (otherwise it returns the identity
///     matrix). In addition, QMatrix provides the determinant() function
///     returning the matrix's determinant.
/// 
///     Finally, the QMatrix class supports matrix multiplication, and
///     objects of the class can be streamed as well as compared.
/// 
///     \tableofcontents
/// 
///     \section1 Rendering Graphics
/// 
///     When rendering graphics, the matrix defines the transformations
///     but the actual transformation is performed by the drawing routines
///     in QPainter.
/// 
///     By default, QPainter operates on the associated device's own
///     coordinate system.  The standard coordinate system of a
///     QPaintDevice has its origin located at the top-left position. The
///     \e x values increase to the right; \e y values increase
///     downward. For a complete description, see the \l {Coordinate
///     System}{coordinate system} documentation.
/// 
///     QPainter has functions to translate, scale, shear and rotate the
///     coordinate system without using a QMatrix. For example:
/// 
///     \table 100%
///     \row
///     \li \inlineimage qmatrix-simpletransformation.png
///     \li
///     \snippet matrix/matrix.cpp 0
///     \endtable
/// 
///     Although these functions are very convenient, it can be more
///     efficient to build a QMatrix and call QPainter::setMatrix() if you
///     want to perform more than a single transform operation. For
///     example:
/// 
///     \table 100%
///     \row
///     \li \inlineimage qmatrix-combinedtransformation.png
///     \li
///     \snippet matrix/matrix.cpp 1
///     \endtable
/// 
///     \section1 Basic Matrix Operations
/// 
///     \image qmatrix-representation.png
/// 
///     A QMatrix object contains a 3 x 3 matrix.  The \c dx and \c dy
///     elements specify horizontal and vertical translation. The \c m11
///     and \c m22 elements specify horizontal and vertical scaling. And
///     finally, the \c m21 and \c m12 elements specify horizontal and
///     vertical \e shearing.
/// 
///     QMatrix transforms a point in the plane to another point using the
///     following formulas:
/// 
///     \snippet code/src_gui_painting_qmatrix.cpp 0
/// 
///     The point \e (x, y) is the original point, and \e (x', y') is the
///     transformed point. \e (x', y') can be transformed back to \e (x,
///     y) by performing the same operation on the inverted() matrix.
/// 
///     The various matrix elements can be set when constructing the
///     matrix, or by using the setMatrix() function later on. They can also
///     be manipulated using the translate(), rotate(), scale() and
///     shear() convenience functions, The currently set values can be
///     retrieved using the m11(), m12(), m21(), m22(), dx() and dy()
///     functions.
/// 
///     Translation is the simplest transformation. Setting \c dx and \c
///     dy will move the coordinate system \c dx units along the X axis
///     and \c dy units along the Y axis.  Scaling can be done by setting
///     \c m11 and \c m22. For example, setting \c m11 to 2 and \c m22 to
///     1.5 will double the height and increase the width by 50%.  The
///     identity matrix has \c m11 and \c m22 set to 1 (all others are set
///     to 0) mapping a point to itself. Shearing is controlled by \c m12
///     and \c m21. Setting these elements to values different from zero
///     will twist the coordinate system. Rotation is achieved by
///     carefully setting both the shearing factors and the scaling
///     factors.
/// 
///     Here's the combined transformations example using basic matrix
///     operations:
/// 
///     \table 100%
///     \row
///     \li \inlineimage qmatrix-combinedtransformation.png
///     \li
///     \snippet matrix/matrix.cpp 2
///     \endtable
/// 
///     \sa QPainter, QTransform, {Coordinate System},
///         {painting/affine}{Affine Transformations Example}, {Transformations Example}

struct Matrix {
    m11() -> f32,
    m12() -> f32,
    m21() -> f32,
    m22() -> f32,
    dx() -> f32,
    dy() -> f32,
    ///     \overload
    /// 
    ///     Creates and returns a QPainterPath object that is a copy of the
    ///     given \a path, mapped into the coordinate system defined by this
    ///     matrix.
    map(x: i32, y: i32, tx: *i32, ty: *i32),
    ///     \overload
    /// 
    ///     Creates and returns a QPainterPath object that is a copy of the
    ///     given \a path, mapped into the coordinate system defined by this
    ///     matrix.
    map(x: f32, y: f32, tx: *f32, ty: *f32),
    ///     \fn QRectF QMatrix::mapRect(const QRectF &rectangle) const
    /// 
    ///     Creates and returns a QRectF object that is a copy of the given \a
    ///     rectangle, mapped into the coordinate system defined by this
    ///     matrix.
    /// 
    ///     The rectangle's coordinates are transformed using the following
    ///     formulas:
    /// 
    ///     \snippet code/src_gui_painting_qmatrix.cpp 2
    /// 
    ///     If rotation or shearing has been specified, this function returns
    ///     the \e bounding rectangle. To retrieve the exact region the given
    ///     \a rectangle maps to, use the mapToPolygon() function instead.
    /// 
    ///     \sa mapToPolygon(), {QMatrix#Basic Matrix Operations}{Basic Matrix
    ///     Operations}
    map_rect(arg0: &RectType) -> Rect,
    ///     \fn QRectF QMatrix::mapRect(const QRectF &rectangle) const
    /// 
    ///     Creates and returns a QRectF object that is a copy of the given \a
    ///     rectangle, mapped into the coordinate system defined by this
    ///     matrix.
    /// 
    ///     The rectangle's coordinates are transformed using the following
    ///     formulas:
    /// 
    ///     \snippet code/src_gui_painting_qmatrix.cpp 2
    /// 
    ///     If rotation or shearing has been specified, this function returns
    ///     the \e bounding rectangle. To retrieve the exact region the given
    ///     \a rectangle maps to, use the mapToPolygon() function instead.
    /// 
    ///     \sa mapToPolygon(), {QMatrix#Basic Matrix Operations}{Basic Matrix
    ///     Operations}
    map_rect(arg0: &RectFType) -> RectF,
    ///     \overload
    /// 
    ///     Creates and returns a QPainterPath object that is a copy of the
    ///     given \a path, mapped into the coordinate system defined by this
    ///     matrix.
    map(p: &PointType) -> Point,
    ///     \overload
    /// 
    ///     Creates and returns a QPainterPath object that is a copy of the
    ///     given \a path, mapped into the coordinate system defined by this
    ///     matrix.
    map(p: &PointFType) -> PointF,
    ///     \overload
    /// 
    ///     Creates and returns a QPainterPath object that is a copy of the
    ///     given \a path, mapped into the coordinate system defined by this
    ///     matrix.
    map(l: &LineType) -> Line,
    ///     \overload
    /// 
    ///     Creates and returns a QPainterPath object that is a copy of the
    ///     given \a path, mapped into the coordinate system defined by this
    ///     matrix.
    map(l: &LineFType) -> LineF,
    ///     \overload
    /// 
    ///     Creates and returns a QPainterPath object that is a copy of the
    ///     given \a path, mapped into the coordinate system defined by this
    ///     matrix.
    map(a: &PolygonFType) -> PolygonF,
    ///     \overload
    /// 
    ///     Creates and returns a QPainterPath object that is a copy of the
    ///     given \a path, mapped into the coordinate system defined by this
    ///     matrix.
    map(a: &PolygonType) -> Polygon,
    ///     \overload
    /// 
    ///     Creates and returns a QPainterPath object that is a copy of the
    ///     given \a path, mapped into the coordinate system defined by this
    ///     matrix.
    map(r: &RegionType) -> Region,
    ///     \overload
    /// 
    ///     Creates and returns a QPainterPath object that is a copy of the
    ///     given \a path, mapped into the coordinate system defined by this
    ///     matrix.
    map(p: &PainterPathType) -> PainterPath,
    ///     \fn QPolygon QMatrix::mapToPolygon(const QRect &rectangle) const
    /// 
    ///     Creates and returns a QPolygon representation of the given \a
    ///     rectangle, mapped into the coordinate system defined by this
    ///     matrix.
    /// 
    ///     The rectangle's coordinates are transformed using the following
    ///     formulas:
    /// 
    ///     \snippet code/src_gui_painting_qmatrix.cpp 3
    /// 
    ///     Polygons and rectangles behave slightly differently when
    ///     transformed (due to integer rounding), so
    ///     \c{matrix.map(QPolygon(rectangle))} is not always the same as
    ///     \c{matrix.mapToPolygon(rectangle)}.
    /// 
    ///     \sa mapRect(), {QMatrix#Basic Matrix Operations}{Basic Matrix
    ///     Operations}
    map_to_polygon(r: &RectType) -> Polygon,
    ///     Resets the matrix to an identity matrix, i.e. all elements are set
    ///     to zero, except \c m11 and \c m22 (specifying the scale) which are
    ///     set to 1.
    /// 
    ///     \sa QMatrix(), isIdentity(), {QMatrix#Basic Matrix
    ///     Operations}{Basic Matrix Operations}
    reset(),
    is_identity() -> bool,
    scale(sx: f32, sy: f32) -> Matrix?,
    shear(sh: f32, sv: f32) -> Matrix?,
    rotate(a: f32) -> Matrix?,
    is_invertible() -> bool,
    determinant() -> f32,
    ///     Returns an inverted copy of this matrix.
    /// 
    ///     If the matrix is singular (not invertible), the returned matrix is
    ///     the identity matrix. If \a invertible is valid (i.e. not 0), its
    ///     value is set to true if the matrix is invertible, otherwise it is
    ///     set to false.
    /// 
    ///     \sa isInvertible()
    inverted(invertible: *bool) -> Matrix,
}

// vim: syntax=rust expandtab ts=4 sw=4
