enum PatternOption {
    NoPatternOption,
    CaseInsensitiveOption,
    DotMatchesEverythingOption,
    MultilineOption,
    ExtendedPatternSyntaxOption,
    InvertedGreedinessOption,
    DontCaptureOption,
    UseUnicodePropertiesOption,
    OptimizeOnFirstUsageOption,
    DontAutomaticallyOptimizeOption,
}

enum MatchType {
    NormalMatch,
    PartialPreferCompleteMatch,
    PartialPreferFirstMatch,
    NoMatch,
}

enum MatchOption {
    NoMatchOption,
    AnchoredMatchOption,
    DontCheckSubjectStringMatchOption,
}


struct RegularExpression {
    pattern_options() -> PatternOptions,
    set_pattern_options(options: PatternOptions),
    swap(other: &RegularExpressionType),
    pattern() -> String,
    set_pattern(pattern: String),
    is_valid() -> bool,
    pattern_error_offset() -> i32,
    capture_count() -> i32,
    named_capture_groups() -> [String],
    match(subject: String, offset: i32, match_type: RegularExpression::MatchType, match_options: MatchOptions) -> RegularExpressionMatch,
    match(subject_ref: &StringRefType, offset: i32, match_type: RegularExpression::MatchType, match_options: MatchOptions) -> RegularExpressionMatch,
    global_match(subject: String, offset: i32, match_type: RegularExpression::MatchType, match_options: MatchOptions) -> RegularExpressionMatchIterator,
    global_match(subject_ref: &StringRefType, offset: i32, match_type: RegularExpression::MatchType, match_options: MatchOptions) -> RegularExpressionMatchIterator,
    optimize(),
    [static] escape(str: String) -> String,
}

// vim: syntax=rust expandtab ts=4 sw=4
