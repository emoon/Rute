/// 
/// For an overview of Qt's Undo Framework, see the
/// [overview document](Overview%20of%20Qt's%20Undo%20Framework)
/// 
/// 
/// A QUndoCommand represents a single editing action on a document; for example,
/// inserting or deleting a block of text in a text editor. QUndoCommand can apply
/// a change to the document with redo() and undo the change with undo(). The
/// implementations for these functions must be provided in a derived class.
/// 
/// A QUndoCommand has an associated text(). This is a short string
/// describing what the command does. It is used to update the text
/// properties of the stack's undo and redo actions; see
/// QUndoStack::createUndoAction() and QUndoStack::createRedoAction().
/// 
/// QUndoCommand objects are owned by the stack they were pushed on.
/// QUndoStack deletes a command if it has been undone and a new command is pushed. For example:
/// 
/// In effect, when a command is pushed, it becomes the top-most command
/// on the stack.
/// 
/// To support command compression, QUndoCommand has an id() and the virtual function
/// mergeWith(). These functions are used by QUndoStack::push().
/// 
/// To support command macros, a QUndoCommand object can have any number of child
/// commands. Undoing or redoing the parent command will cause the child
/// commands to be undone or redone. A command can be assigned
/// to a parent explicitly in the constructor. In this case, the command
/// will be owned by the parent.
/// 
/// The parent in this case is usually an empty command, in that it doesn't
/// provide its own implementation of undo() and redo(). Instead, it uses
/// the base implementations of these functions, which simply call undo() or
/// redo() on all its children. The parent should, however, have a meaningful
/// text().
/// 
/// Another way to create macros is to use the convenience functions
/// QUndoStack::beginMacro() and QUndoStack::endMacro().
/// 
/// **See also:** [`UndoStack`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct UndoCommand {
    /// 
    /// Reverts a change to the document. After undo() is called, the state of
    /// the document should be the same as before redo() was called. This function must
    /// be implemented in the derived class. Calling QUndoStack::push(),
    /// QUndoStack::undo() or QUndoStack::redo() from this function leads to
    /// undefined beahavior.
    /// 
    /// The default implementation calls undo() on all child commands in reverse order.
    /// 
    /// **See also:** [`redo()`]
    [event] undo(),
    /// 
    /// Applies a change to the document. This function must be implemented in
    /// the derived class. Calling QUndoStack::push(),
    /// QUndoStack::undo() or QUndoStack::redo() from this function leads to
    /// undefined beahavior.
    /// 
    /// The default implementation calls redo() on all child commands.
    /// 
    /// **See also:** [`undo()`]
    [event] redo(),
    /// 
    /// Returns a short text string describing what this command does; for example,
    /// 
    /// 
    /// The text is used for names of items in QUndoView.
    /// 
    /// **See also:** [`action_text()`]
    /// [`set_text()`]
    /// [`UndoStack::create_undo_action`]
    /// [`UndoStack::create_redo_action`]
    text() -> String,
    /// 
    /// Returns a short text string describing what this command does; for example,
    /// 
    /// 
    /// The text is used when the text properties of the stack's undo and redo
    /// actions are updated.
    /// 
    /// **See also:** [`text()`]
    /// [`set_text()`]
    /// [`UndoStack::create_undo_action`]
    /// [`UndoStack::create_redo_action`]
    action_text() -> String,
    /// 
    /// Sets the command's text to be the *text* specified.
    /// 
    /// The specified text should be a short user-readable string describing what this
    /// command does.
    /// 
    /// If you need to have two different strings for text() and actionText(), separate
    /// them with and pass into this function. Even if you do not use this feature
    /// for English strings during development, you can still let translators use two
    /// different strings in order to match specific languages' needs.
    /// The described feature and the function actionText() are available since Qt 4.8.
    /// 
    /// **See also:** [`text()`]
    /// [`action_text()`]
    /// [`UndoStack::create_undo_action`]
    /// [`UndoStack::create_redo_action`]
    set_text(text: String),
    /// 
    /// Returns whether the command is obsolete.
    /// 
    /// The boolean is used for the automatic removal of commands that are not necessary in the
    /// stack anymore. The isObsolete function is checked in the functions QUndoStack::push(),
    /// QUndoStack::undo(), QUndoStack::redo(), and QUndoStack::setIndex().
    /// 
    /// **See also:** [`set_obsolete()`]
    /// [`merge_with()`]
    /// [`UndoStack::push`]
    /// [`UndoStack::undo`]
    /// [`UndoStack::redo`]
    is_obsolete() -> bool,
    /// 
    /// Sets whether the command is obsolete to *obsolete.*
    /// 
    /// **See also:** [`is_obsolete()`]
    /// [`merge_with()`]
    /// [`UndoStack::push`]
    /// [`UndoStack::undo`]
    /// [`UndoStack::redo`]
    set_obsolete(obsolete: bool),
    /// 
    /// Returns the ID of this command.
    /// 
    /// A command ID is used in command compression. It must be an integer unique to
    /// this command's class, or -1 if the command doesn't support compression.
    /// 
    /// If the command supports compression this function must be overridden in the
    /// derived class to return the correct ID. The base implementation returns -1.
    /// 
    /// QUndoStack::push() will only try to merge two commands if they have the
    /// same ID, and the ID is not -1.
    /// 
    /// **See also:** [`merge_with()`]
    /// [`UndoStack::push`]
    [event] id() -> i32,
    /// 
    /// Attempts to merge this command with *command.* Returns `true` on
    /// success; otherwise returns `false.`
    /// 
    /// If this function returns `true,` calling this command's redo() must have the same
    /// effect as redoing both this command and *command.*
    /// Similarly, calling this command's undo() must have the same effect as undoing
    /// *command* and this command.
    /// 
    /// QUndoStack will only try to merge two commands if they have the same id, and
    /// the id is not -1.
    /// 
    /// The default implementation returns `false.`
    /// 
    /// **See also:** [`id()`]
    /// [`UndoStack::push`]
    [event] merge_with(other: *UndoCommandType) -> bool,
    /// 
    /// Returns the number of child commands in this command.
    /// 
    /// **See also:** [`child()`]
    child_count() -> i32,
    /// 
    /// Returns the number of child commands in this command.
    /// 
    /// **See also:** [`child()`]
    /// 
    /// Returns the child command at *index.*
    /// 
    /// **See also:** [`child_count()`]
    /// [`UndoStack::command`]
    child(index: i32) -> UndoCommand?,
}

// vim: syntax=rust expandtab ts=4 sw=4
