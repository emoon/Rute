///     \class QUndoCommand
///     \brief The QUndoCommand class is the base class of all commands stored on a QUndoStack.
///     \since 4.2
/// 
///     \inmodule QtWidgets
/// 
///     For an overview of Qt's Undo Framework, see the
///     \l{Overview of Qt's Undo Framework}{overview document}.
/// 
///     A QUndoCommand represents a single editing action on a document; for example,
///     inserting or deleting a block of text in a text editor. QUndoCommand can apply
///     a change to the document with redo() and undo the change with undo(). The
///     implementations for these functions must be provided in a derived class.
/// 
///     \snippet code/src_gui_util_qundostack.cpp 0
/// 
///     A QUndoCommand has an associated text(). This is a short string
///     describing what the command does. It is used to update the text
///     properties of the stack's undo and redo actions; see
///     QUndoStack::createUndoAction() and QUndoStack::createRedoAction().
/// 
///     QUndoCommand objects are owned by the stack they were pushed on.
///     QUndoStack deletes a command if it has been undone and a new command is pushed. For example:
/// 
/// \snippet code/src_gui_util_qundostack.cpp 1
/// 
///     In effect, when a command is pushed, it becomes the top-most command
///     on the stack.
/// 
///     To support command compression, QUndoCommand has an id() and the virtual function
///     mergeWith(). These functions are used by QUndoStack::push().
/// 
///     To support command macros, a QUndoCommand object can have any number of child
///     commands. Undoing or redoing the parent command will cause the child
///     commands to be undone or redone. A command can be assigned
///     to a parent explicitly in the constructor. In this case, the command
///     will be owned by the parent.
/// 
///     The parent in this case is usually an empty command, in that it doesn't
///     provide its own implementation of undo() and redo(). Instead, it uses
///     the base implementations of these functions, which simply call undo() or
///     redo() on all its children. The parent should, however, have a meaningful
///     text().
/// 
///     \snippet code/src_gui_util_qundostack.cpp 2
/// 
///     Another way to create macros is to use the convenience functions
///     QUndoStack::beginMacro() and QUndoStack::endMacro().
/// 
///     \sa QUndoStack
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct UndoCommand {
    ///     Reverts a change to the document. After undo() is called, the state of
    ///     the document should be the same as before redo() was called. This function must
    ///     be implemented in the derived class. Calling QUndoStack::push(),
    ///     QUndoStack::undo() or QUndoStack::redo() from this function leads to
    ///     undefined beahavior.
    /// 
    ///     The default implementation calls undo() on all child commands in reverse order.
    /// 
    ///     \sa redo()
    [event] undo(),
    ///     Applies a change to the document. This function must be implemented in
    ///     the derived class. Calling QUndoStack::push(),
    ///     QUndoStack::undo() or QUndoStack::redo() from this function leads to
    ///     undefined beahavior.
    /// 
    ///     The default implementation calls redo() on all child commands.
    /// 
    ///     \sa undo()
    [event] redo(),
    ///     Returns a short text string describing what this command does; for example,
    ///     "insert text".
    /// 
    ///     The text is used for names of items in QUndoView.
    /// 
    ///     \sa actionText(), setText(), QUndoStack::createUndoAction(), QUndoStack::createRedoAction()
    text() -> String,
    ///     \since 4.8
    /// 
    ///     Returns a short text string describing what this command does; for example,
    ///     "insert text".
    /// 
    ///     The text is used when the text properties of the stack's undo and redo
    ///     actions are updated.
    /// 
    ///     \sa text(), setText(), QUndoStack::createUndoAction(), QUndoStack::createRedoAction()
    action_text() -> String,
    ///     Sets the command's text to be the \a text specified.
    /// 
    ///     The specified text should be a short user-readable string describing what this
    ///     command does.
    /// 
    ///     If you need to have two different strings for text() and actionText(), separate
    ///     them with "\\n" and pass into this function. Even if you do not use this feature
    ///     for English strings during development, you can still let translators use two
    ///     different strings in order to match specific languages' needs.
    ///     The described feature and the function actionText() are available since Qt 4.8.
    /// 
    ///     \sa text(), actionText(), QUndoStack::createUndoAction(), QUndoStack::createRedoAction()
    set_text(text: String),
    ///     \since 5.9
    /// 
    ///     Returns whether the command is obsolete.
    /// 
    ///     The boolean is used for the automatic removal of commands that are not necessary in the
    ///     stack anymore. The isObsolete function is checked in the functions QUndoStack::push(),
    ///     QUndoStack::undo(), QUndoStack::redo(), and QUndoStack::setIndex().
    /// 
    ///     \sa setObsolete(), mergeWith(), QUndoStack::push(), QUndoStack::undo(), QUndoStack::redo()
    is_obsolete() -> bool,
    ///     \since 5.9
    /// 
    ///     Sets whether the command is obsolete to \a obsolete.
    /// 
    ///     \sa isObsolete(), mergeWith(), QUndoStack::push(), QUndoStack::undo(), QUndoStack::redo()
    set_obsolete(obsolete: bool),
    ///     Returns the ID of this command.
    /// 
    ///     A command ID is used in command compression. It must be an integer unique to
    ///     this command's class, or -1 if the command doesn't support compression.
    /// 
    ///     If the command supports compression this function must be overridden in the
    ///     derived class to return the correct ID. The base implementation returns -1.
    /// 
    ///     QUndoStack::push() will only try to merge two commands if they have the
    ///     same ID, and the ID is not -1.
    /// 
    ///     \sa mergeWith(), QUndoStack::push()
    [event] id() -> i32,
    ///     Attempts to merge this command with \a command. Returns \c true on
    ///     success; otherwise returns \c false.
    /// 
    ///     If this function returns \c true, calling this command's redo() must have the same
    ///     effect as redoing both this command and \a command.
    ///     Similarly, calling this command's undo() must have the same effect as undoing
    ///     \a command and this command.
    /// 
    ///     QUndoStack will only try to merge two commands if they have the same id, and
    ///     the id is not -1.
    /// 
    ///     The default implementation returns \c false.
    /// 
    ///     \snippet code/src_gui_util_qundostack.cpp 3
    /// 
    ///     \sa id(), QUndoStack::push()
    [event] merge_with(other: *UndoCommandType) -> bool,
    ///     \since 4.4
    /// 
    ///     Returns the number of child commands in this command.
    /// 
    ///     \sa child()
    child_count() -> i32,
    ///     \since 4.4
    /// 
    ///     Returns the child command at \a index.
    /// 
    ///     \sa childCount(), QUndoStack::command()
    child(index: i32) -> UndoCommand?,
}

// vim: syntax=rust expandtab ts=4 sw=4
