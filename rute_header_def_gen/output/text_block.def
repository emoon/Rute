///     \class QTextBlock
///     \reentrant
/// 
///     \brief The QTextBlock class provides a container for text fragments in a
///     QTextDocument.
///     \inmodule QtGui
/// 
///     \ingroup richtext-processing
/// 
///     A text block encapsulates a block or paragraph of text in a QTextDocument.
///     QTextBlock provides read-only access to the block/paragraph structure of
///     QTextDocuments. It is mainly of use if you want to implement your own
///     layouts for the visual representation of a QTextDocument, or if you want to
///     iterate over a document and write out the contents in your own custom
///     format.
/// 
///     Text blocks are created by their parent documents. If you need to create
///     a new text block, or modify the contents of a document while examining its
///     contents, use the cursor-based interface provided by QTextCursor instead.
/// 
///     Each text block is located at a specific position() in a document().
///     The contents of the block can be obtained by using the text() function.
///     The length() function determines the block's size within the document
///     (including formatting characters).
///     The visual properties of the block are determined by its text layout(),
///     its charFormat(), and its blockFormat().
/// 
///     The next() and previous() functions enable iteration over consecutive
///     valid blocks in a document under the condition that the document is not
///     modified by other means during the iteration process. Note that, although
///     blocks are returned in sequence, adjacent blocks may come from different
///     places in the document structure. The validity of a block can be determined
///     by calling isValid().
/// 
///     QTextBlock provides comparison operators to make it easier to work with
///     blocks: \l operator==() compares two block for equality, \l operator!=()
///     compares two blocks for inequality, and \l operator<() determines whether
///     a block precedes another in the same document.
/// 
///     \image qtextblock-sequence.png
/// 
///     \sa QTextBlockFormat, QTextCharFormat, QTextFragment
///  */
/// 

struct TextBlock {
    ///     \fn bool QTextBlock::isValid() const
    /// 
    ///     Returns \c true if this text block is valid; otherwise returns \c false.
    is_valid() -> bool,
    position() -> i32,
    length() -> i32,
    contains(position: i32) -> bool,
    layout() -> TextLayout?,
    clear_layout(),
    block_format() -> TextBlockFormat,
    ///     Returns an index into the document's internal list of block formats
    ///     for the text block's format.
    /// 
    ///     \sa QTextDocument::allFormats()
    block_format_index() -> i32,
    char_format() -> TextCharFormat,
    ///     Returns an index into the document's internal list of character formats
    ///     for the text block's character format.
    /// 
    ///     \sa QTextDocument::allFormats()
    char_format_index() -> i32,
    ///   \since 4.7
    /// 
    ///   Returns the resolved text direction.
    /// 
    ///   If the block has no explicit direction set, it will resolve the
    ///   direction from the blocks content. Returns either Qt::LeftToRight
    ///   or Qt::RightToLeft.
    /// 
    ///   \sa QTextFormat::layoutDirection(), QString::isRightToLeft(), Qt::LayoutDirection
    text_direction() -> Rute::LayoutDirection,
    text() -> String,
    ///     \since 5.3
    /// 
    ///     Returns the block's text format options as a list of continuous ranges
    ///     of QTextCharFormat. The range's character format is used when inserting text
    ///     within the range boundaries.
    /// 
    ///     \sa charFormat(), blockFormat()
    text_formats() -> Vector<QTextLayout::FormatRange>,
    ///     Returns the text document this text block belongs to, or 0 if the
    ///     text block does not belong to any document.
    document() -> TextDocument?,
    ///     If the block represents a list item, returns the list that the item belongs
    ///     to; otherwise returns 0.
    text_list() -> TextList?,
    ///     \since 4.1
    /// 
    ///     Returns a pointer to a QTextBlockUserData object if previously set with
    ///     setUserData() or a null pointer.
    user_data() -> TextBlockUserData?,
    ///     \since 4.1
    /// 
    ///     Attaches the given \a data object to the text block.
    /// 
    ///     QTextBlockUserData can be used to store custom settings.  The
    ///     ownership is passed to the underlying text document, i.e. the
    ///     provided QTextBlockUserData object will be deleted if the
    ///     corresponding text block gets deleted. The user data object is
    ///     not stored in the undo history, so it will not be available after
    ///     undoing the deletion of a text block.
    /// 
    ///     For example, if you write a programming editor in an IDE, you may
    ///     want to let your user set breakpoints visually in your code for an
    ///     integrated debugger. In a programming editor a line of text
    ///     usually corresponds to one QTextBlock. The QTextBlockUserData
    ///     interface allows the developer to store data for each QTextBlock,
    ///     like for example in which lines of the source code the user has a
    ///     breakpoint set. Of course this could also be stored externally,
    ///     but by storing it inside the QTextDocument, it will for example be
    ///     automatically deleted when the user deletes the associated
    ///     line. It's really just a way to store custom information in the
    ///     QTextDocument without using custom properties in QTextFormat which
    ///     would affect the undo/redo stack.
    set_user_data(data: *TextBlockUserDataType),
    ///     \since 4.1
    /// 
    ///     Returns the integer value previously set with setUserState() or -1.
    user_state() -> i32,
    ///     \since 4.1
    /// 
    ///     Stores the specified \a state integer value in the text block. This may be
    ///     useful for example in a syntax highlighter to store a text parsing state.
    set_user_state(state: i32),
    ///     \since 4.4
    /// 
    ///     Returns the blocks revision.
    /// 
    ///     \sa setRevision(), QTextDocument::revision()
    revision() -> i32,
    ///     \since 4.4
    /// 
    ///     Sets a blocks revision to \a rev.
    /// 
    ///     \sa revision(), QTextDocument::revision()
    set_revision(rev: i32),
    ///     \since 4.4
    /// 
    ///     Returns \c true if the block is visible; otherwise returns \c false.
    /// 
    ///     \sa setVisible()
    is_visible() -> bool,
    ///     \since 4.4
    /// 
    ///     Sets the block's visibility to \a visible.
    /// 
    ///     \sa isVisible()
    set_visible(visible: bool),
    /// \since 4.4
    /// 
    ///     Returns the number of this block, or -1 if the block is invalid.
    /// 
    ///     \sa QTextCursor::blockNumber()
    /// 
    block_number() -> i32,
    /// \since 4.5
    /// 
    ///     Returns the first line number of this block, or -1 if the block is invalid.
    ///     Unless the layout supports it, the line number is identical to the block number.
    /// 
    ///     \sa QTextBlock::blockNumber()
    /// 
    first_line_number() -> i32,
    /// \since 4.5
    /// 
    /// Sets the line count to \a count.
    /// 
    /// \sa lineCount()
    set_line_count(count: i32),
    line_count() -> i32,
    ///     Returns a text block iterator pointing to the beginning of the
    ///     text block.
    /// 
    ///     \sa end()
    begin() -> TextBlock::iterator,
    ///     Returns a text block iterator pointing to the end of the text
    ///     block.
    /// 
    ///     \sa begin(), next(), previous()
    end() -> TextBlock::iterator,
    ///     Returns the text block in the document after this block, or an empty
    ///     text block if this is the last one.
    /// 
    ///     Note that the next block may be in a different frame or table to this block.
    /// 
    ///     \sa previous(), begin(), end()
    next() -> TextBlock,
    ///     Returns the text block in the document before this block, or an empty text
    ///     block if this is the first one.
    /// 
    ///     Note that the previous block may be in a different frame or table to this block.
    /// 
    ///     \sa next(), begin(), end()
    previous() -> TextBlock,
    doc_handle() -> TextDocumentPrivate?,
    fragment_index() -> i32,
}

// vim: syntax=rust expandtab ts=4 sw=4
