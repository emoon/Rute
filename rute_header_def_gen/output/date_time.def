/// 
/// A QDateTime object contains a calendar date and a clock time (a
/// ). It is a combination of the QDate and QTime classes.
/// It can read the current datetime from the system clock. It
/// provides functions for comparing datetimes and for manipulating a
/// datetime by adding a number of seconds, days, months, or years.
/// 
/// A QDateTime object is typically created either by giving a date
/// and time explicitly in the constructor, or by using the static
/// function currentDateTime() that returns a QDateTime object set
/// to the system clock's time. The date and time can be changed with
/// setDate() and setTime(). A datetime can also be set using the
/// setTime_t() function that takes a POSIX-standard value. The fromString()
/// function returns a QDateTime, given a string and a date format
/// used to interpret the date within the string.
/// 
/// The date() and time() functions provide access to the date and
/// time parts of the datetime. The same information is provided in
/// textual format by the toString() function.
/// 
/// QDateTime provides a full set of operators to compare two
/// QDateTime objects, where smaller means earlier and larger means
/// later.
/// 
/// You can increment (or decrement) a datetime by a given number of
/// milliseconds using addMSecs(), seconds using addSecs(), or days
/// using addDays(). Similarly, you can use addMonths() and addYears().
/// The daysTo() function returns the number of days between two datetimes,
/// secsTo() returns the number of seconds between two datetimes, and
/// msecsTo() returns the number of milliseconds between two datetimes.
/// 
/// QDateTime can store datetimes as [local time](Qt::LocalTime)
/// or
/// as [UTC](Qt::UTC)
/// . QDateTime::currentDateTime() returns a
/// QDateTime expressed as local time; use toUTC() to convert it to
/// UTC. You can also use timeSpec() to find out if a QDateTime
/// object stores a UTC time or a local time. Operations such as
/// addSecs() and secsTo() are aware of daylight-saving time (DST).
/// 
/// **Note**: QDateTime does not account for leap seconds.
/// 
/// # Remarks
/// 
/// ## No Year 0
/// 
/// There is no year 0. Dates in that year are considered invalid. The
/// year -1 is the year or
/// The day before 1 January 1 CE is 31 December 1 BCE.
/// 
/// ## Range of Valid Dates
/// 
/// The range of valid values able to be stored in QDateTime is dependent on
/// the internal storage implementation. QDateTime is currently stored in a
/// qint64 as a serial msecs value encoding the date and time. This restricts
/// the date range to about +/- 292 million years, compared to the QDate range
/// of +/- 2 billion years. Care must be taken when creating a QDateTime with
/// extreme values that you do not overflow the storage. The exact range of
/// supported values varies depending on the Qt::TimeSpec and time zone.
/// 
/// ## Use of System Timezone
/// 
/// QDateTime uses the system's time zone information to determine the
/// offset of local time from UTC. If the system is not configured
/// correctly or not up-to-date, QDateTime will give wrong results as
/// well.
/// 
/// ## Daylight-Saving Time (DST)
/// 
/// QDateTime takes into account the system's time zone information
/// when dealing with DST. On modern Unix systems, this means it
/// applies the correct historical DST data whenever possible. On
/// Windows, where the system doesn't support historical DST data,
/// historical accuracy is not maintained with respect to DST.
/// 
/// The range of valid dates taking DST into account is 1970-01-01 to
/// the present, and rules are in place for handling DST correctly
/// until 2037-12-31, but these could change. For dates falling
/// outside that range, QDateTime makes a *best guess* using the
/// rules for year 1970 or 2037, but we can't guarantee accuracy. This
/// means QDateTime doesn't take into account changes in a locale's
/// time zone before 1970, even if the system's time zone database
/// supports that information.
/// 
/// QDateTime takes into consideration the Standard Time to Daylight-Saving Time
/// transition. For example if the transition is at 2am and the clock goes
/// forward to 3am, then there is a hour from 02:00:00 to 02:59:59.999
/// which QDateTime considers to be invalid. Any date maths performed
/// will take this missing hour into account and return a valid result.
/// 
/// ## Offset From UTC
/// 
/// A Qt::TimeSpec of Qt::OffsetFromUTC is also supported. This allows you
/// to define a QDateTime relative to UTC at a fixed offset of a given number
/// of seconds from UTC. For example, an offset of +3600 seconds is one hour
/// ahead of UTC and is usually written in ISO standard notation as
/// . Daylight-Saving Time never applies with this TimeSpec.
/// 
/// There is no explicit size restriction to the offset seconds, but there is
/// an implicit limit imposed when using the toString() and fromString()
/// methods which use a format of [+|-]hh:mm, effectively limiting the range
/// to +/- 99 hours and 59 minutes and whole minutes only. Note that currently
/// no time zone lies outside the range of +/- 14 hours.
/// 
/// ## Time Zone Support
/// 
/// A Qt::TimeSpec of Qt::TimeZone is also supported in conjunction with the
/// QTimeZone class. This allows you to define a datetime in a named time zone
/// adhering to a consistent set of daylight-saving transition rules. For
/// example a time zone of will apply the daylight-saving
/// rules as used in Germany since 1970. Note that the transition rules
/// applied depend on the platform support. See the QTimeZone documentation
/// for more details.
/// 
/// **See also:** [`Date`]
/// [`Time`]
/// [`DateTimeEdit`]
/// [`TimeZone`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct DateTime {
    /// 
    /// Swaps this datetime with *other.* This operation is very fast
    /// and never fails.
    swap(other: &DateTimeType),
    /// 
    /// Returns `true` if both the date and the time are null; otherwise
    /// returns `false.` A null datetime is invalid.
    /// 
    /// **See also:** [`Date::is_null`]
    /// [`Time::is_null`]
    /// [`is_valid()`]
    is_null() -> bool,
    /// 
    /// Returns `true` if both the date and the time are valid and they are valid in
    /// the current Qt::TimeSpec, otherwise returns `false.`
    /// 
    /// If the timeSpec() is Qt::LocalTime or Qt::TimeZone then the date and time are
    /// checked to see if they fall in the Standard Time to Daylight-Saving Time transition
    /// hour, i.e. if the transition is at 2am and the clock goes forward to 3am
    /// then the time from 02:00:00 to 02:59:59.999 is considered to be invalid.
    /// 
    /// **See also:** [`Date::is_valid`]
    /// [`Time::is_valid`]
    is_valid() -> bool,
    /// 
    /// Returns the date part of the datetime.
    /// 
    /// **See also:** [`set_date()`]
    /// [`time()`]
    /// [`time_spec()`]
    date() -> Date,
    /// 
    /// Returns the time part of the datetime.
    /// 
    /// **See also:** [`set_time()`]
    /// [`date()`]
    /// [`time_spec()`]
    /// 
    /// Returns the time specification of the datetime.
    /// 
    /// **See also:** [`set_time_spec()`]
    /// [`date()`]
    /// [`time()`]
    /// [`t::time_spec()`]
    /// 
    /// Returns the time zone of the datetime.
    /// 
    /// If the timeSpec() is Qt::LocalTime then an instance of the current system
    /// time zone will be returned. Note however that if you copy this time zone
    /// the instance will not remain in sync if the system time zone changes.
    /// 
    /// **See also:** [`set_time_zone()`]
    /// [`t::time_spec()`]
    /// 
    /// Returns the Time Zone Abbreviation for the datetime.
    /// 
    /// If the timeSpec() is Qt::UTC this will be .
    /// 
    /// If the timeSpec() is Qt::OffsetFromUTC this will be in the format
    /// 
    /// 
    /// If the timeSpec() is Qt::LocalTime then the host system is queried for the
    /// correct abbreviation.
    /// 
    /// Note that abbreviations may or may not be localized.
    /// 
    /// Note too that the abbreviation is not guaranteed to be a unique value,
    /// i.e. different time zones may have the same abbreviation.
    /// 
    /// **See also:** [`time_spec()`]
    time() -> Time,
    /// 
    /// Returns the time specification of the datetime.
    /// 
    /// **See also:** [`set_time_spec()`]
    /// [`date()`]
    /// [`time()`]
    /// [`t::time_spec()`]
    time_spec() -> Rute::TimeSpec,
    /// 
    /// Returns the current Offset From UTC in seconds.
    /// 
    /// If the timeSpec() is Qt::OffsetFromUTC this will be the value originally set.
    /// 
    /// If the timeSpec() is Qt::TimeZone this will be the offset effective in the
    /// Time Zone including any Daylight-Saving Offset.
    /// 
    /// If the timeSpec() is Qt::LocalTime this will be the difference between the
    /// Local Time and UTC including any Daylight-Saving Offset.
    /// 
    /// If the timeSpec() is Qt::UTC this will be 0.
    /// 
    /// **See also:** [`set_offset_from_utc()`]
    offset_from_utc() -> i32,
    /// 
    /// Returns the time zone of the datetime.
    /// 
    /// If the timeSpec() is Qt::LocalTime then an instance of the current system
    /// time zone will be returned. Note however that if you copy this time zone
    /// the instance will not remain in sync if the system time zone changes.
    /// 
    /// **See also:** [`set_time_zone()`]
    /// [`t::time_spec()`]
    /// 
    /// Returns the Time Zone Abbreviation for the datetime.
    /// 
    /// If the timeSpec() is Qt::UTC this will be .
    /// 
    /// If the timeSpec() is Qt::OffsetFromUTC this will be in the format
    /// 
    /// 
    /// If the timeSpec() is Qt::LocalTime then the host system is queried for the
    /// correct abbreviation.
    /// 
    /// Note that abbreviations may or may not be localized.
    /// 
    /// Note too that the abbreviation is not guaranteed to be a unique value,
    /// i.e. different time zones may have the same abbreviation.
    /// 
    /// **See also:** [`time_spec()`]
    time_zone() -> TimeZone,
    /// 
    /// Returns the Time Zone Abbreviation for the datetime.
    /// 
    /// If the timeSpec() is Qt::UTC this will be .
    /// 
    /// If the timeSpec() is Qt::OffsetFromUTC this will be in the format
    /// 
    /// 
    /// If the timeSpec() is Qt::LocalTime then the host system is queried for the
    /// correct abbreviation.
    /// 
    /// Note that abbreviations may or may not be localized.
    /// 
    /// Note too that the abbreviation is not guaranteed to be a unique value,
    /// i.e. different time zones may have the same abbreviation.
    /// 
    /// **See also:** [`time_spec()`]
    time_zone_abbreviation() -> String,
    /// 
    /// Returns if this datetime falls in Daylight-Saving Time.
    /// 
    /// If the Qt::TimeSpec is not Qt::LocalTime or Qt::TimeZone then will always
    /// return false.
    /// 
    /// **See also:** [`time_spec()`]
    is_daylight_time() -> bool,
    /// 
    /// Returns the datetime as the number of milliseconds that have passed
    /// since 1970-01-01T00:00:00.000, Coordinated Universal Time (Qt::UTC).
    /// 
    /// On systems that do not support time zones, this function will
    /// behave as if local time were Qt::UTC.
    /// 
    /// The behavior for this function is undefined if the datetime stored in
    /// this object is not valid. However, for all valid dates, this function
    /// returns a unique value.
    /// 
    /// **See also:** [`to_secs_since_epoch()`]
    /// [`set_m_secs_since_epoch()`]
    to_m_secs_since_epoch() -> i64,
    /// 
    /// Returns the datetime as the number of seconds that have passed since
    /// 1970-01-01T00:00:00.000, Coordinated Universal Time (Qt::UTC).
    /// 
    /// On systems that do not support time zones, this function will
    /// behave as if local time were Qt::UTC.
    /// 
    /// The behavior for this function is undefined if the datetime stored in
    /// this object is not valid. However, for all valid dates, this function
    /// returns a unique value.
    /// 
    /// **See also:** [`to_m_secs_since_epoch()`]
    /// [`set_secs_since_epoch()`]
    to_secs_since_epoch() -> i64,
    /// 
    /// Sets the date part of this datetime to *date.* If no time is set yet, it
    /// is set to midnight. If *date* is invalid, this QDateTime becomes invalid.
    /// 
    /// **See also:** [`date()`]
    /// [`set_time()`]
    /// [`set_time_spec()`]
    set_date(date: &DateType),
    /// 
    /// Sets the time part of this datetime to *time.* If *time* is not valid,
    /// this function sets it to midnight. Therefore, it's possible to clear any
    /// set time in a QDateTime by setting it to a default QTime:
    /// 
    /// ```
    /// QDateTime dt = QDateTime::currentDateTime();
    /// dt.setTime(QTime());
    /// ```
    /// 
    /// **See also:** [`time()`]
    /// [`set_date()`]
    /// [`set_time_spec()`]
    /// 
    /// Sets the time specification used in this datetime to *spec.*
    /// The datetime will refer to a different point in time.
    /// 
    /// If *spec* is Qt::OffsetFromUTC then the timeSpec() will be set
    /// to Qt::UTC, i.e. an effective offset of 0.
    /// 
    /// If *spec* is Qt::TimeZone then the spec will be set to Qt::LocalTime,
    /// i.e. the current system time zone.
    /// 
    /// Example:
    /// 
    /// **See also:** [`time_spec()`]
    /// [`set_date()`]
    /// [`set_time()`]
    /// [`set_time_zone()`]
    /// [`t::time_spec()`]
    /// 
    /// Sets the time zone used in this datetime to *toZone.*
    /// The datetime will refer to a different point in time.
    /// 
    /// If *toZone* is invalid then the datetime will be invalid.
    /// 
    /// **See also:** [`time_zone()`]
    /// [`t::time_spec()`]
    /// 
    /// Sets the date and time given the number of *seconds* that have
    /// passed since 1970-01-01T00:00:00, Coordinated Universal Time
    /// (Qt::UTC). On systems that do not support time zones this function
    /// will behave as if local time were Qt::UTC.
    /// 
    /// **Note**: This function is deprecated. For new code, use setSecsSinceEpoch().
    /// 
    /// **See also:** [`to_time_t()`]
    set_time(time: &TimeType),
    /// 
    /// Sets the time specification used in this datetime to *spec.*
    /// The datetime will refer to a different point in time.
    /// 
    /// If *spec* is Qt::OffsetFromUTC then the timeSpec() will be set
    /// to Qt::UTC, i.e. an effective offset of 0.
    /// 
    /// If *spec* is Qt::TimeZone then the spec will be set to Qt::LocalTime,
    /// i.e. the current system time zone.
    /// 
    /// Example:
    /// 
    /// **See also:** [`time_spec()`]
    /// [`set_date()`]
    /// [`set_time()`]
    /// [`set_time_zone()`]
    /// [`t::time_spec()`]
    set_time_spec(spec: Rute::TimeSpec),
    /// 
    /// Sets the timeSpec() to Qt::OffsetFromUTC and the offset to *offsetSeconds.*
    /// The datetime will refer to a different point in time.
    /// 
    /// The maximum and minimum offset is 14 positive or negative hours. If
    /// *offsetSeconds* is larger or smaller than that, then the result is
    /// undefined.
    /// 
    /// If *offsetSeconds* is 0 then the timeSpec() will be set to Qt::UTC.
    /// 
    /// **See also:** [`is_valid()`]
    /// [`offset_from_utc()`]
    set_offset_from_utc(offset_seconds: i32),
    /// 
    /// Sets the time zone used in this datetime to *toZone.*
    /// The datetime will refer to a different point in time.
    /// 
    /// If *toZone* is invalid then the datetime will be invalid.
    /// 
    /// **See also:** [`time_zone()`]
    /// [`t::time_spec()`]
    set_time_zone(to_zone: &TimeZoneType),
    /// 
    /// Sets the date and time given the number of milliseconds *msecs* that have
    /// passed since 1970-01-01T00:00:00.000, Coordinated Universal Time
    /// (Qt::UTC). On systems that do not support time zones this function
    /// will behave as if local time were Qt::UTC.
    /// 
    /// Note that passing the minimum of `qint64`
    /// ( `std::numeric_limits<qint64>::min()` ) to *msecs* will result in
    /// undefined behavior.
    /// 
    /// **See also:** [`to_m_secs_since_epoch()`]
    /// [`set_secs_since_epoch()`]
    set_m_secs_since_epoch(msecs: i64),
    /// 
    /// Sets the date and time given the number of seconds *secs* that have
    /// passed since 1970-01-01T00:00:00.000, Coordinated Universal Time
    /// (Qt::UTC). On systems that do not support time zones this function
    /// will behave as if local time were Qt::UTC.
    /// 
    /// **See also:** [`to_secs_since_epoch()`]
    /// [`set_m_secs_since_epoch()`]
    set_secs_since_epoch(secs: i64),
    /// 
    /// Returns a QDateTime object containing a datetime *ndays* days
    /// later than the datetime of this object (or earlier if *ndays* is
    /// negative).
    /// 
    /// If the timeSpec() is Qt::LocalTime and the resulting
    /// date and time fall in the Standard Time to Daylight-Saving Time transition
    /// hour then the result will be adjusted accordingly, i.e. if the transition
    /// is at 2am and the clock goes forward to 3am and the result falls between
    /// 2am and 3am then the result will be adjusted to fall after 3am.
    /// 
    /// **See also:** [`days_to()`]
    /// [`add_months()`]
    /// [`add_years()`]
    /// [`add_secs()`]
    add_days(days: i64) -> DateTime,
    /// 
    /// Returns a QDateTime object containing a datetime *nmonths* months
    /// later than the datetime of this object (or earlier if *nmonths*
    /// is negative).
    /// 
    /// If the timeSpec() is Qt::LocalTime and the resulting
    /// date and time fall in the Standard Time to Daylight-Saving Time transition
    /// hour then the result will be adjusted accordingly, i.e. if the transition
    /// is at 2am and the clock goes forward to 3am and the result falls between
    /// 2am and 3am then the result will be adjusted to fall after 3am.
    /// 
    /// **See also:** [`days_to()`]
    /// [`add_days()`]
    /// [`add_years()`]
    /// [`add_secs()`]
    add_months(months: i32) -> DateTime,
    /// 
    /// Returns a QDateTime object containing a datetime *nyears* years
    /// later than the datetime of this object (or earlier if *nyears* is
    /// negative).
    /// 
    /// If the timeSpec() is Qt::LocalTime and the resulting
    /// date and time fall in the Standard Time to Daylight-Saving Time transition
    /// hour then the result will be adjusted accordingly, i.e. if the transition
    /// is at 2am and the clock goes forward to 3am and the result falls between
    /// 2am and 3am then the result will be adjusted to fall after 3am.
    /// 
    /// **See also:** [`days_to()`]
    /// [`add_days()`]
    /// [`add_months()`]
    /// [`add_secs()`]
    add_years(years: i32) -> DateTime,
    /// 
    /// Returns a QDateTime object containing a datetime *s* seconds
    /// later than the datetime of this object (or earlier if *s* is
    /// negative).
    /// 
    /// If this datetime is invalid, an invalid datetime will be returned.
    /// 
    /// **See also:** [`add_m_secs()`]
    /// [`secs_to()`]
    /// [`add_days()`]
    /// [`add_months()`]
    /// [`add_years()`]
    add_secs(secs: i64) -> DateTime,
    /// 
    /// Returns a QDateTime object containing a datetime *msecs* miliseconds
    /// later than the datetime of this object (or earlier if *msecs* is
    /// negative).
    /// 
    /// If this datetime is invalid, an invalid datetime will be returned.
    /// 
    /// **See also:** [`add_secs()`]
    /// [`msecs_to()`]
    /// [`add_days()`]
    /// [`add_months()`]
    /// [`add_years()`]
    add_m_secs(msecs: i64) -> DateTime,
    /// 
    /// Returns a copy of this datetime converted to the given time
    /// *spec.*
    /// 
    /// If *spec* is Qt::OffsetFromUTC then it is set to Qt::UTC. To set to a
    /// spec of Qt::OffsetFromUTC use toOffsetFromUtc().
    /// 
    /// If *spec* is Qt::TimeZone then it is set to Qt::LocalTime,
    /// i.e. the local Time Zone.
    /// 
    /// Example:
    /// 
    /// **See also:** [`time_spec()`]
    /// [`to_time_zone()`]
    /// [`to_utc()`]
    /// [`to_local_time()`]
    to_time_spec(spec: Rute::TimeSpec) -> DateTime,
    /// 
    /// Returns a datetime containing the date and time information in
    /// this datetime, but specified using the Qt::LocalTime definition.
    /// 
    /// Example:
    /// 
    /// **See also:** [`to_time_spec()`]
    to_local_time() -> DateTime,
    /// 
    /// Returns a datetime containing the date and time information in
    /// this datetime, but specified using the Qt::UTC definition.
    /// 
    /// Example:
    /// 
    /// **See also:** [`to_time_spec()`]
    to_utc() -> DateTime,
    /// 
    /// Returns a copy of this datetime converted to a spec of Qt::OffsetFromUTC
    /// with the given *offsetSeconds.*
    /// 
    /// If the *offsetSeconds* equals 0 then a UTC datetime will be returned
    /// 
    /// **See also:** [`set_offset_from_utc()`]
    /// [`offset_from_utc()`]
    /// [`to_time_spec()`]
    to_offset_from_utc(offset_seconds: i32) -> DateTime,
    /// 
    /// Returns a copy of this datetime converted to the given *timeZone*
    /// 
    /// **See also:** [`time_zone()`]
    /// [`to_time_spec()`]
    to_time_zone(to_zone: &TimeZoneType) -> DateTime,
    /// 
    /// Returns the number of days from this datetime to the *other*
    /// datetime. The number of days is counted as the number of times
    /// midnight is reached between this datetime to the *other*
    /// datetime. This means that a 10 minute difference from 23:55 to
    /// 0:05 the next day counts as one day.
    /// 
    /// If the *other* datetime is earlier than this datetime,
    /// the value returned is negative.
    /// 
    /// Example:
    /// 
    /// **See also:** [`add_days()`]
    /// [`secs_to()`]
    /// [`msecs_to()`]
    days_to(arg0: &DateTimeType) -> i64,
    /// 
    /// Returns the number of seconds from this datetime to the *other*
    /// datetime. If the *other* datetime is earlier than this datetime,
    /// the value returned is negative.
    /// 
    /// Before performing the comparison, the two datetimes are converted
    /// to Qt::UTC to ensure that the result is correct if daylight-saving
    /// (DST) applies to one of the two datetimes but not the other.
    /// 
    /// Returns 0 if either datetime is invalid.
    /// 
    /// Example:
    /// 
    /// **See also:** [`add_secs()`]
    /// [`days_to()`]
    /// [`Time::secs_to`]
    secs_to(arg0: &DateTimeType) -> i64,
    /// 
    /// Returns the number of milliseconds from this datetime to the *other*
    /// datetime. If the *other* datetime is earlier than this datetime,
    /// the value returned is negative.
    /// 
    /// Before performing the comparison, the two datetimes are converted
    /// to Qt::UTC to ensure that the result is correct if daylight-saving
    /// (DST) applies to one of the two datetimes and but not the other.
    /// 
    /// Returns 0 if either datetime is invalid.
    /// 
    /// **See also:** [`add_m_secs()`]
    /// [`days_to()`]
    /// [`Time::msecs_to`]
    msecs_to(arg0: &DateTimeType) -> i64,
    set_utc_offset(seconds: i32),
    utc_offset() -> i32,
    /// 
    /// Returns the current datetime, as reported by the system clock, in
    /// the local time zone.
    /// 
    /// **See also:** [`current_date_time_utc()`]
    /// [`Date::current_date`]
    /// [`Time::current_time`]
    /// [`to_time_spec()`]
    /// 
    /// Returns the current datetime, as reported by the system clock, in
    /// UTC.
    /// 
    /// **See also:** [`current_date_time()`]
    /// [`Date::current_date`]
    /// [`Time::current_time`]
    /// [`to_time_spec()`]
    [static] current_date_time() -> DateTime,
    /// 
    /// Returns the current datetime, as reported by the system clock, in
    /// UTC.
    /// 
    /// **See also:** [`current_date_time()`]
    /// [`Date::current_date`]
    /// [`Time::current_time`]
    /// [`to_time_spec()`]
    [static] current_date_time_utc() -> DateTime,
    /// 
    /// Returns the datetime as the number of seconds that have passed
    /// since 1970-01-01T00:00:00, Coordinated Universal Time (Qt::UTC).
    /// 
    /// On systems that do not support time zones, this function will
    /// behave as if local time were Qt::UTC.
    /// 
    /// **Note**: This function returns a 32-bit unsigned integer and is deprecated.
    /// 
    /// If the date is outside the range 1970-01-01T00:00:00 to
    /// 2106-02-07T06:28:14, this function returns -1 cast to an unsigned integer
    /// (i.e., 0xFFFFFFFF).
    /// 
    /// To get an extended range, use toMSecsSinceEpoch() or toSecsSinceEpoch().
    /// 
    /// **See also:** [`to_secs_since_epoch()`]
    /// [`to_m_secs_since_epoch()`]
    /// [`set_time_t()`]
    to_time_t() -> uint,
    /// 
    /// Sets the date and time given the number of *seconds* that have
    /// passed since 1970-01-01T00:00:00, Coordinated Universal Time
    /// (Qt::UTC). On systems that do not support time zones this function
    /// will behave as if local time were Qt::UTC.
    /// 
    /// **Note**: This function is deprecated. For new code, use setSecsSinceEpoch().
    /// 
    /// **See also:** [`to_time_t()`]
    set_time_t(secs_since1_jan1970_utc: uint),
    /// 
    /// Returns a datetime whose date and time are the number of *seconds*
    /// that have passed since 1970-01-01T00:00:00, Coordinated Universal
    /// Time (Qt::UTC) and converted to Qt::LocalTime. On systems that do not
    /// support time zones, the time will be set as if local time were Qt::UTC.
    /// 
    /// **Note**: This function is deprecated. Please use fromSecsSinceEpoch() in new
    /// code.
    /// 
    /// **See also:** [`to_time_t()`]
    /// [`set_time_t()`]
    /// 
    /// Returns a datetime whose date and time are the number of *seconds*
    /// that have passed since 1970-01-01T00:00:00, Coordinated Universal
    /// Time (Qt::UTC) and converted to the given *spec.*
    /// 
    /// If the *spec* is not Qt::OffsetFromUTC then the *offsetSeconds* will be
    /// ignored. If the *spec* is Qt::OffsetFromUTC and the *offsetSeconds* is 0
    /// then the spec will be set to Qt::UTC, i.e. an offset of 0 seconds.
    /// 
    /// **Note**: This function is deprecated. Please use fromSecsSinceEpoch() in new
    /// code.
    /// 
    /// **See also:** [`to_time_t()`]
    /// [`set_time_t()`]
    /// 
    /// Returns a datetime whose date and time are the number of *seconds*
    /// that have passed since 1970-01-01T00:00:00, Coordinated Universal
    /// Time (Qt::UTC) and with the given *timeZone.*
    /// 
    /// **Note**: This function is deprecated. Please use fromSecsSinceEpoch() in new
    /// code.
    /// 
    /// **See also:** [`to_time_t()`]
    /// [`set_time_t()`]
    [static] from_time_t(secs_since1_jan1970_utc: uint) -> DateTime,
    /// 
    /// Returns a datetime whose date and time are the number of *seconds*
    /// that have passed since 1970-01-01T00:00:00, Coordinated Universal
    /// Time (Qt::UTC) and converted to Qt::LocalTime. On systems that do not
    /// support time zones, the time will be set as if local time were Qt::UTC.
    /// 
    /// **Note**: This function is deprecated. Please use fromSecsSinceEpoch() in new
    /// code.
    /// 
    /// **See also:** [`to_time_t()`]
    /// [`set_time_t()`]
    /// 
    /// Returns a datetime whose date and time are the number of *seconds*
    /// that have passed since 1970-01-01T00:00:00, Coordinated Universal
    /// Time (Qt::UTC) and converted to the given *spec.*
    /// 
    /// If the *spec* is not Qt::OffsetFromUTC then the *offsetSeconds* will be
    /// ignored. If the *spec* is Qt::OffsetFromUTC and the *offsetSeconds* is 0
    /// then the spec will be set to Qt::UTC, i.e. an offset of 0 seconds.
    /// 
    /// **Note**: This function is deprecated. Please use fromSecsSinceEpoch() in new
    /// code.
    /// 
    /// **See also:** [`to_time_t()`]
    /// [`set_time_t()`]
    /// 
    /// Returns a datetime whose date and time are the number of *seconds*
    /// that have passed since 1970-01-01T00:00:00, Coordinated Universal
    /// Time (Qt::UTC) and with the given *timeZone.*
    /// 
    /// **Note**: This function is deprecated. Please use fromSecsSinceEpoch() in new
    /// code.
    /// 
    /// **See also:** [`to_time_t()`]
    /// [`set_time_t()`]
    [org_name(fromTime_t)]
    [static] from_time_t_2(secs_since1_jan1970_utc: uint, spec: Rute::TimeSpec, offset_from_utc: i32) -> DateTime,
    /// 
    /// Returns a datetime whose date and time are the number of *seconds*
    /// that have passed since 1970-01-01T00:00:00, Coordinated Universal
    /// Time (Qt::UTC) and converted to Qt::LocalTime. On systems that do not
    /// support time zones, the time will be set as if local time were Qt::UTC.
    /// 
    /// **Note**: This function is deprecated. Please use fromSecsSinceEpoch() in new
    /// code.
    /// 
    /// **See also:** [`to_time_t()`]
    /// [`set_time_t()`]
    /// 
    /// Returns a datetime whose date and time are the number of *seconds*
    /// that have passed since 1970-01-01T00:00:00, Coordinated Universal
    /// Time (Qt::UTC) and converted to the given *spec.*
    /// 
    /// If the *spec* is not Qt::OffsetFromUTC then the *offsetSeconds* will be
    /// ignored. If the *spec* is Qt::OffsetFromUTC and the *offsetSeconds* is 0
    /// then the spec will be set to Qt::UTC, i.e. an offset of 0 seconds.
    /// 
    /// **Note**: This function is deprecated. Please use fromSecsSinceEpoch() in new
    /// code.
    /// 
    /// **See also:** [`to_time_t()`]
    /// [`set_time_t()`]
    /// 
    /// Returns a datetime whose date and time are the number of *seconds*
    /// that have passed since 1970-01-01T00:00:00, Coordinated Universal
    /// Time (Qt::UTC) and with the given *timeZone.*
    /// 
    /// **Note**: This function is deprecated. Please use fromSecsSinceEpoch() in new
    /// code.
    /// 
    /// **See also:** [`to_time_t()`]
    /// [`set_time_t()`]
    [org_name(fromTime_t)]
    [static] from_time_t_3(secs_since1_jan1970_utc: uint, time_zone: &TimeZoneType) -> DateTime,
    /// 
    /// Returns a datetime whose date and time are the number of milliseconds, *msecs,*
    /// that have passed since 1970-01-01T00:00:00.000, Coordinated Universal
    /// Time (Qt::UTC), and converted to Qt::LocalTime. On systems that do not
    /// support time zones, the time will be set as if local time were Qt::UTC.
    /// 
    /// Note that there are possible values for *msecs* that lie outside the valid
    /// range of QDateTime, both negative and positive. The behavior of this
    /// function is undefined for those values.
    /// 
    /// **See also:** [`to_m_secs_since_epoch()`]
    /// [`set_m_secs_since_epoch()`]
    /// 
    /// Returns a datetime whose date and time are the number of milliseconds *msecs*
    /// that have passed since 1970-01-01T00:00:00.000, Coordinated Universal
    /// Time (Qt::UTC) and converted to the given *spec.*
    /// 
    /// Note that there are possible values for *msecs* that lie outside the valid
    /// range of QDateTime, both negative and positive. The behavior of this
    /// function is undefined for those values.
    /// 
    /// If the *spec* is not Qt::OffsetFromUTC then the *offsetSeconds* will be
    /// ignored. If the *spec* is Qt::OffsetFromUTC and the *offsetSeconds* is 0
    /// then the spec will be set to Qt::UTC, i.e. an offset of 0 seconds.
    /// 
    /// If *spec* is Qt::TimeZone then the spec will be set to Qt::LocalTime,
    /// i.e. the current system time zone.
    /// 
    /// **See also:** [`to_m_secs_since_epoch()`]
    /// [`set_m_secs_since_epoch()`]
    /// 
    /// Returns a datetime whose date and time are the number of milliseconds *msecs*
    /// that have passed since 1970-01-01T00:00:00.000, Coordinated Universal
    /// Time (Qt::UTC) and with the given *timeZone.*
    /// 
    /// **See also:** [`from_secs_since_epoch()`]
    [static] from_m_secs_since_epoch(msecs: i64) -> DateTime,
    /// 
    /// Returns a datetime whose date and time are the number of milliseconds, *msecs,*
    /// that have passed since 1970-01-01T00:00:00.000, Coordinated Universal
    /// Time (Qt::UTC), and converted to Qt::LocalTime. On systems that do not
    /// support time zones, the time will be set as if local time were Qt::UTC.
    /// 
    /// Note that there are possible values for *msecs* that lie outside the valid
    /// range of QDateTime, both negative and positive. The behavior of this
    /// function is undefined for those values.
    /// 
    /// **See also:** [`to_m_secs_since_epoch()`]
    /// [`set_m_secs_since_epoch()`]
    /// 
    /// Returns a datetime whose date and time are the number of milliseconds *msecs*
    /// that have passed since 1970-01-01T00:00:00.000, Coordinated Universal
    /// Time (Qt::UTC) and converted to the given *spec.*
    /// 
    /// Note that there are possible values for *msecs* that lie outside the valid
    /// range of QDateTime, both negative and positive. The behavior of this
    /// function is undefined for those values.
    /// 
    /// If the *spec* is not Qt::OffsetFromUTC then the *offsetSeconds* will be
    /// ignored. If the *spec* is Qt::OffsetFromUTC and the *offsetSeconds* is 0
    /// then the spec will be set to Qt::UTC, i.e. an offset of 0 seconds.
    /// 
    /// If *spec* is Qt::TimeZone then the spec will be set to Qt::LocalTime,
    /// i.e. the current system time zone.
    /// 
    /// **See also:** [`to_m_secs_since_epoch()`]
    /// [`set_m_secs_since_epoch()`]
    /// 
    /// Returns a datetime whose date and time are the number of milliseconds *msecs*
    /// that have passed since 1970-01-01T00:00:00.000, Coordinated Universal
    /// Time (Qt::UTC) and with the given *timeZone.*
    /// 
    /// **See also:** [`from_secs_since_epoch()`]
    [org_name(fromMSecsSinceEpoch)]
    [static] from_m_secs_since_epoch_2(msecs: i64, spec: Rute::TimeSpec, offset_from_utc: i32) -> DateTime,
    /// 
    /// Returns a datetime whose date and time are the number of seconds *secs*
    /// that have passed since 1970-01-01T00:00:00.000, Coordinated Universal
    /// Time (Qt::UTC) and converted to the given *spec.*
    /// 
    /// Note that there are possible values for *secs* that lie outside the valid
    /// range of QDateTime, both negative and positive. The behavior of this
    /// function is undefined for those values.
    /// 
    /// If the *spec* is not Qt::OffsetFromUTC then the *offsetSeconds* will be
    /// ignored. If the *spec* is Qt::OffsetFromUTC and the *offsetSeconds* is 0
    /// then the spec will be set to Qt::UTC, i.e. an offset of 0 seconds.
    /// 
    /// If *spec* is Qt::TimeZone then the spec will be set to Qt::LocalTime,
    /// i.e. the current system time zone.
    /// 
    /// **See also:** [`to_secs_since_epoch()`]
    /// [`set_secs_since_epoch()`]
    /// 
    /// Returns a datetime whose date and time are the number of seconds *secs*
    /// that have passed since 1970-01-01T00:00:00.000, Coordinated Universal
    /// Time (Qt::UTC) and with the given *timeZone.*
    /// 
    /// **See also:** [`from_m_secs_since_epoch()`]
    [static] from_secs_since_epoch(secs: i64, spe: Rute::TimeSpec, offset_from_utc: i32) -> DateTime,
    /// 
    /// Returns a datetime whose date and time are the number of milliseconds, *msecs,*
    /// that have passed since 1970-01-01T00:00:00.000, Coordinated Universal
    /// Time (Qt::UTC), and converted to Qt::LocalTime. On systems that do not
    /// support time zones, the time will be set as if local time were Qt::UTC.
    /// 
    /// Note that there are possible values for *msecs* that lie outside the valid
    /// range of QDateTime, both negative and positive. The behavior of this
    /// function is undefined for those values.
    /// 
    /// **See also:** [`to_m_secs_since_epoch()`]
    /// [`set_m_secs_since_epoch()`]
    /// 
    /// Returns a datetime whose date and time are the number of milliseconds *msecs*
    /// that have passed since 1970-01-01T00:00:00.000, Coordinated Universal
    /// Time (Qt::UTC) and converted to the given *spec.*
    /// 
    /// Note that there are possible values for *msecs* that lie outside the valid
    /// range of QDateTime, both negative and positive. The behavior of this
    /// function is undefined for those values.
    /// 
    /// If the *spec* is not Qt::OffsetFromUTC then the *offsetSeconds* will be
    /// ignored. If the *spec* is Qt::OffsetFromUTC and the *offsetSeconds* is 0
    /// then the spec will be set to Qt::UTC, i.e. an offset of 0 seconds.
    /// 
    /// If *spec* is Qt::TimeZone then the spec will be set to Qt::LocalTime,
    /// i.e. the current system time zone.
    /// 
    /// **See also:** [`to_m_secs_since_epoch()`]
    /// [`set_m_secs_since_epoch()`]
    /// 
    /// Returns a datetime whose date and time are the number of milliseconds *msecs*
    /// that have passed since 1970-01-01T00:00:00.000, Coordinated Universal
    /// Time (Qt::UTC) and with the given *timeZone.*
    /// 
    /// **See also:** [`from_secs_since_epoch()`]
    [org_name(fromMSecsSinceEpoch)]
    [static] from_m_secs_since_epoch_3(msecs: i64, time_zone: &TimeZoneType) -> DateTime,
    /// 
    /// Returns a datetime whose date and time are the number of seconds *secs*
    /// that have passed since 1970-01-01T00:00:00.000, Coordinated Universal
    /// Time (Qt::UTC) and converted to the given *spec.*
    /// 
    /// Note that there are possible values for *secs* that lie outside the valid
    /// range of QDateTime, both negative and positive. The behavior of this
    /// function is undefined for those values.
    /// 
    /// If the *spec* is not Qt::OffsetFromUTC then the *offsetSeconds* will be
    /// ignored. If the *spec* is Qt::OffsetFromUTC and the *offsetSeconds* is 0
    /// then the spec will be set to Qt::UTC, i.e. an offset of 0 seconds.
    /// 
    /// If *spec* is Qt::TimeZone then the spec will be set to Qt::LocalTime,
    /// i.e. the current system time zone.
    /// 
    /// **See also:** [`to_secs_since_epoch()`]
    /// [`set_secs_since_epoch()`]
    /// 
    /// Returns a datetime whose date and time are the number of seconds *secs*
    /// that have passed since 1970-01-01T00:00:00.000, Coordinated Universal
    /// Time (Qt::UTC) and with the given *timeZone.*
    /// 
    /// **See also:** [`from_m_secs_since_epoch()`]
    [org_name(fromSecsSinceEpoch)]
    [static] from_secs_since_epoch_2(secs: i64, time_zone: &TimeZoneType) -> DateTime,
    /// 
    /// Returns the number of milliseconds since 1970-01-01T00:00:00 Universal
    /// Coordinated Time. This number is like the POSIX time_t variable, but
    /// expressed in milliseconds instead.
    /// 
    /// **See also:** [`current_date_time()`]
    /// [`current_date_time_utc()`]
    /// [`to_time_t()`]
    /// [`to_time_spec()`]
    [static] current_m_secs_since_epoch() -> i64,
    /// 
    /// Returns the number of seconds since 1970-01-01T00:00:00 Universal
    /// Coordinated Time.
    /// 
    /// **See also:** [`current_m_secs_since_epoch()`]
    [static] current_secs_since_epoch() -> i64,
}

// vim: syntax=rust expandtab ts=4 sw=4
