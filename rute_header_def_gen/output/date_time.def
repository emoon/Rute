///     \class QDateTime
///     \inmodule QtCore
///     \ingroup shared
///     \reentrant
///     \brief The QDateTime class provides date and time functions.
/// 
/// 
///     A QDateTime object contains a calendar date and a clock time (a
///     "datetime"). It is a combination of the QDate and QTime classes.
///     It can read the current datetime from the system clock. It
///     provides functions for comparing datetimes and for manipulating a
///     datetime by adding a number of seconds, days, months, or years.
/// 
///     A QDateTime object is typically created either by giving a date
///     and time explicitly in the constructor, or by using the static
///     function currentDateTime() that returns a QDateTime object set
///     to the system clock's time. The date and time can be changed with
///     setDate() and setTime(). A datetime can also be set using the
///     setTime_t() function that takes a POSIX-standard "number of
///     seconds since 00:00:00 on January 1, 1970" value. The fromString()
///     function returns a QDateTime, given a string and a date format
///     used to interpret the date within the string.
/// 
///     The date() and time() functions provide access to the date and
///     time parts of the datetime. The same information is provided in
///     textual format by the toString() function.
/// 
///     QDateTime provides a full set of operators to compare two
///     QDateTime objects, where smaller means earlier and larger means
///     later.
/// 
///     You can increment (or decrement) a datetime by a given number of
///     milliseconds using addMSecs(), seconds using addSecs(), or days
///     using addDays(). Similarly, you can use addMonths() and addYears().
///     The daysTo() function returns the number of days between two datetimes,
///     secsTo() returns the number of seconds between two datetimes, and
///     msecsTo() returns the number of milliseconds between two datetimes.
/// 
///     QDateTime can store datetimes as \l{Qt::LocalTime}{local time} or
///     as \l{Qt::UTC}{UTC}. QDateTime::currentDateTime() returns a
///     QDateTime expressed as local time; use toUTC() to convert it to
///     UTC. You can also use timeSpec() to find out if a QDateTime
///     object stores a UTC time or a local time. Operations such as
///     addSecs() and secsTo() are aware of daylight-saving time (DST).
/// 
///     \note QDateTime does not account for leap seconds.
/// 
///     \section1 Remarks
/// 
///     \section2 No Year 0
/// 
///     There is no year 0. Dates in that year are considered invalid. The
///     year -1 is the year "1 before Christ" or "1 before current era."
///     The day before 1 January 1 CE is 31 December 1 BCE.
/// 
///     \section2 Range of Valid Dates
/// 
///     The range of valid values able to be stored in QDateTime is dependent on
///     the internal storage implementation. QDateTime is currently stored in a
///     qint64 as a serial msecs value encoding the date and time.  This restricts
///     the date range to about +/- 292 million years, compared to the QDate range
///     of +/- 2 billion years.  Care must be taken when creating a QDateTime with
///     extreme values that you do not overflow the storage.  The exact range of
///     supported values varies depending on the Qt::TimeSpec and time zone.
/// 
///     \section2 Use of System Timezone
/// 
///     QDateTime uses the system's time zone information to determine the
///     offset of local time from UTC. If the system is not configured
///     correctly or not up-to-date, QDateTime will give wrong results as
///     well.
/// 
///     \section2 Daylight-Saving Time (DST)
/// 
///     QDateTime takes into account the system's time zone information
///     when dealing with DST. On modern Unix systems, this means it
///     applies the correct historical DST data whenever possible. On
///     Windows, where the system doesn't support historical DST data,
///     historical accuracy is not maintained with respect to DST.
/// 
///     The range of valid dates taking DST into account is 1970-01-01 to
///     the present, and rules are in place for handling DST correctly
///     until 2037-12-31, but these could change. For dates falling
///     outside that range, QDateTime makes a \e{best guess} using the
///     rules for year 1970 or 2037, but we can't guarantee accuracy. This
///     means QDateTime doesn't take into account changes in a locale's
///     time zone before 1970, even if the system's time zone database
///     supports that information.
/// 
///     QDateTime takes into consideration the Standard Time to Daylight-Saving Time
///     transition.  For example if the transition is at 2am and the clock goes
///     forward to 3am, then there is a "missing" hour from 02:00:00 to 02:59:59.999
///     which QDateTime considers to be invalid.  Any date maths performed
///     will take this missing hour into account and return a valid result.
/// 
///     \section2 Offset From UTC
/// 
///     A Qt::TimeSpec of Qt::OffsetFromUTC is also supported. This allows you
///     to define a QDateTime relative to UTC at a fixed offset of a given number
///     of seconds from UTC.  For example, an offset of +3600 seconds is one hour
///     ahead of UTC and is usually written in ISO standard notation as
///     "UTC+01:00".  Daylight-Saving Time never applies with this TimeSpec.
/// 
///     There is no explicit size restriction to the offset seconds, but there is
///     an implicit limit imposed when using the toString() and fromString()
///     methods which use a format of [+|-]hh:mm, effectively limiting the range
///     to +/- 99 hours and 59 minutes and whole minutes only.  Note that currently
///     no time zone lies outside the range of +/- 14 hours.
/// 
///     \section2 Time Zone Support
/// 
///     A Qt::TimeSpec of Qt::TimeZone is also supported in conjunction with the
///     QTimeZone class.  This allows you to define a datetime in a named time zone
///     adhering to a consistent set of daylight-saving transition rules.  For
///     example a time zone of "Europe/Berlin" will apply the daylight-saving
///     rules as used in Germany since 1970.  Note that the transition rules
///     applied depend on the platform support.  See the QTimeZone documentation
///     for more details.
/// 
///     \sa QDate, QTime, QDateTimeEdit, QTimeZone
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct DateTime {
    swap(other: &DateTimeType),
    ///     Returns \c true if both the date and the time are null; otherwise
    ///     returns \c false. A null datetime is invalid.
    /// 
    ///     \sa QDate::isNull(), QTime::isNull(), isValid()
    is_null() -> bool,
    ///     Returns \c true if both the date and the time are valid and they are valid in
    ///     the current Qt::TimeSpec, otherwise returns \c false.
    /// 
    ///     If the timeSpec() is Qt::LocalTime or Qt::TimeZone then the date and time are
    ///     checked to see if they fall in the Standard Time to Daylight-Saving Time transition
    ///     hour, i.e. if the transition is at 2am and the clock goes forward to 3am
    ///     then the time from 02:00:00 to 02:59:59.999 is considered to be invalid.
    /// 
    ///     \sa QDate::isValid(), QTime::isValid()
    is_valid() -> bool,
    ///     Returns the date part of the datetime.
    /// 
    ///     \sa setDate(), time(), timeSpec()
    date() -> Date,
    ///     Returns the time part of the datetime.
    /// 
    ///     \sa setTime(), date(), timeSpec()
    time() -> Time,
    ///     Returns the time specification of the datetime.
    /// 
    ///     \sa setTimeSpec(), date(), time(), Qt::TimeSpec
    time_spec() -> Rute::TimeSpec,
    ///     \since 5.2
    /// 
    ///     Returns the current Offset From UTC in seconds.
    /// 
    ///     If the timeSpec() is Qt::OffsetFromUTC this will be the value originally set.
    /// 
    ///     If the timeSpec() is Qt::TimeZone this will be the offset effective in the
    ///     Time Zone including any Daylight-Saving Offset.
    /// 
    ///     If the timeSpec() is Qt::LocalTime this will be the difference between the
    ///     Local Time and UTC including any Daylight-Saving Offset.
    /// 
    ///     If the timeSpec() is Qt::UTC this will be 0.
    /// 
    ///     \sa setOffsetFromUtc()
    offset_from_utc() -> i32,
    ///     \since 5.2
    /// 
    ///     Returns the time zone of the datetime.
    /// 
    ///     If the timeSpec() is Qt::LocalTime then an instance of the current system
    ///     time zone will be returned. Note however that if you copy this time zone
    ///     the instance will not remain in sync if the system time zone changes.
    /// 
    ///     \sa setTimeZone(), Qt::TimeSpec
    time_zone() -> TimeZone,
    ///     \since 5.2
    /// 
    ///     Returns the Time Zone Abbreviation for the datetime.
    /// 
    ///     If the timeSpec() is Qt::UTC this will be "UTC".
    /// 
    ///     If the timeSpec() is Qt::OffsetFromUTC this will be in the format
    ///     "UTC[+-]00:00".
    /// 
    ///     If the timeSpec() is Qt::LocalTime then the host system is queried for the
    ///     correct abbreviation.
    /// 
    ///     Note that abbreviations may or may not be localized.
    /// 
    ///     Note too that the abbreviation is not guaranteed to be a unique value,
    ///     i.e. different time zones may have the same abbreviation.
    /// 
    ///     \sa timeSpec()
    time_zone_abbreviation() -> String,
    ///     \since 5.2
    /// 
    ///     Returns if this datetime falls in Daylight-Saving Time.
    /// 
    ///     If the Qt::TimeSpec is not Qt::LocalTime or Qt::TimeZone then will always
    ///     return false.
    /// 
    ///     \sa timeSpec()
    is_daylight_time() -> bool,
    ///     \since 4.7
    /// 
    ///     Returns the datetime as the number of milliseconds that have passed
    ///     since 1970-01-01T00:00:00.000, Coordinated Universal Time (Qt::UTC).
    /// 
    ///     On systems that do not support time zones, this function will
    ///     behave as if local time were Qt::UTC.
    /// 
    ///     The behavior for this function is undefined if the datetime stored in
    ///     this object is not valid. However, for all valid dates, this function
    ///     returns a unique value.
    /// 
    ///     \sa toSecsSinceEpoch(), setMSecsSinceEpoch()
    to_m_secs_since_epoch() -> i64,
    ///     \since 5.8
    /// 
    ///     Returns the datetime as the number of seconds that have passed since
    ///     1970-01-01T00:00:00.000, Coordinated Universal Time (Qt::UTC).
    /// 
    ///     On systems that do not support time zones, this function will
    ///     behave as if local time were Qt::UTC.
    /// 
    ///     The behavior for this function is undefined if the datetime stored in
    ///     this object is not valid. However, for all valid dates, this function
    ///     returns a unique value.
    /// 
    ///     \sa toMSecsSinceEpoch(), setSecsSinceEpoch()
    to_secs_since_epoch() -> i64,
    ///     Sets the date part of this datetime to \a date. If no time is set yet, it
    ///     is set to midnight. If \a date is invalid, this QDateTime becomes invalid.
    /// 
    ///     \sa date(), setTime(), setTimeSpec()
    set_date(date: &DateType),
    ///     Sets the time part of this datetime to \a time. If \a time is not valid,
    ///     this function sets it to midnight. Therefore, it's possible to clear any
    ///     set time in a QDateTime by setting it to a default QTime:
    /// 
    ///     \code
    ///         QDateTime dt = QDateTime::currentDateTime();
    ///         dt.setTime(QTime());
    ///     \endcode
    /// 
    ///     \sa time(), setDate(), setTimeSpec()
    set_time(time: &TimeType),
    ///     Sets the time specification used in this datetime to \a spec.
    ///     The datetime will refer to a different point in time.
    /// 
    ///     If \a spec is Qt::OffsetFromUTC then the timeSpec() will be set
    ///     to Qt::UTC, i.e. an effective offset of 0.
    /// 
    ///     If \a spec is Qt::TimeZone then the spec will be set to Qt::LocalTime,
    ///     i.e. the current system time zone.
    /// 
    ///     Example:
    ///     \snippet code/src_corelib_tools_qdatetime.cpp 19
    /// 
    ///     \sa timeSpec(), setDate(), setTime(), setTimeZone(), Qt::TimeSpec
    set_time_spec(spec: Rute::TimeSpec),
    ///     \since 5.2
    /// 
    ///     Sets the timeSpec() to Qt::OffsetFromUTC and the offset to \a offsetSeconds.
    ///     The datetime will refer to a different point in time.
    /// 
    ///     The maximum and minimum offset is 14 positive or negative hours.  If
    ///     \a offsetSeconds is larger or smaller than that, then the result is
    ///     undefined.
    /// 
    ///     If \a offsetSeconds is 0 then the timeSpec() will be set to Qt::UTC.
    /// 
    ///     \sa isValid(), offsetFromUtc()
    set_offset_from_utc(offset_seconds: i32),
    ///     \since 5.2
    /// 
    ///     Sets the time zone used in this datetime to \a toZone.
    ///     The datetime will refer to a different point in time.
    /// 
    ///     If \a toZone is invalid then the datetime will be invalid.
    /// 
    ///     \sa timeZone(), Qt::TimeSpec
    set_time_zone(to_zone: &TimeZoneType),
    ///     \since 4.7
    /// 
    ///     Sets the date and time given the number of milliseconds \a msecs that have
    ///     passed since 1970-01-01T00:00:00.000, Coordinated Universal Time
    ///     (Qt::UTC). On systems that do not support time zones this function
    ///     will behave as if local time were Qt::UTC.
    /// 
    ///     Note that passing the minimum of \c qint64
    ///     (\c{std::numeric_limits<qint64>::min()}) to \a msecs will result in
    ///     undefined behavior.
    /// 
    ///     \sa toMSecsSinceEpoch(), setSecsSinceEpoch()
    set_m_secs_since_epoch(msecs: i64),
    ///     \since 5.8
    /// 
    ///     Sets the date and time given the number of seconds \a secs that have
    ///     passed since 1970-01-01T00:00:00.000, Coordinated Universal Time
    ///     (Qt::UTC). On systems that do not support time zones this function
    ///     will behave as if local time were Qt::UTC.
    /// 
    ///     \sa toSecsSinceEpoch(), setMSecsSinceEpoch()
    set_secs_since_epoch(secs: i64),
    ///     Returns a QDateTime object containing a datetime \a ndays days
    ///     later than the datetime of this object (or earlier if \a ndays is
    ///     negative).
    /// 
    ///     If the timeSpec() is Qt::LocalTime and the resulting
    ///     date and time fall in the Standard Time to Daylight-Saving Time transition
    ///     hour then the result will be adjusted accordingly, i.e. if the transition
    ///     is at 2am and the clock goes forward to 3am and the result falls between
    ///     2am and 3am then the result will be adjusted to fall after 3am.
    /// 
    ///     \sa daysTo(), addMonths(), addYears(), addSecs()
    add_days(days: i64) -> DateTime,
    ///     Returns a QDateTime object containing a datetime \a nmonths months
    ///     later than the datetime of this object (or earlier if \a nmonths
    ///     is negative).
    /// 
    ///     If the timeSpec() is Qt::LocalTime and the resulting
    ///     date and time fall in the Standard Time to Daylight-Saving Time transition
    ///     hour then the result will be adjusted accordingly, i.e. if the transition
    ///     is at 2am and the clock goes forward to 3am and the result falls between
    ///     2am and 3am then the result will be adjusted to fall after 3am.
    /// 
    ///     \sa daysTo(), addDays(), addYears(), addSecs()
    add_months(months: i32) -> DateTime,
    ///     Returns a QDateTime object containing a datetime \a nyears years
    ///     later than the datetime of this object (or earlier if \a nyears is
    ///     negative).
    /// 
    ///     If the timeSpec() is Qt::LocalTime and the resulting
    ///     date and time fall in the Standard Time to Daylight-Saving Time transition
    ///     hour then the result will be adjusted accordingly, i.e. if the transition
    ///     is at 2am and the clock goes forward to 3am and the result falls between
    ///     2am and 3am then the result will be adjusted to fall after 3am.
    /// 
    ///     \sa daysTo(), addDays(), addMonths(), addSecs()
    add_years(years: i32) -> DateTime,
    ///     Returns a QDateTime object containing a datetime \a s seconds
    ///     later than the datetime of this object (or earlier if \a s is
    ///     negative).
    /// 
    ///     If this datetime is invalid, an invalid datetime will be returned.
    /// 
    ///     \sa addMSecs(), secsTo(), addDays(), addMonths(), addYears()
    add_secs(secs: i64) -> DateTime,
    ///     Returns a QDateTime object containing a datetime \a msecs miliseconds
    ///     later than the datetime of this object (or earlier if \a msecs is
    ///     negative).
    /// 
    ///     If this datetime is invalid, an invalid datetime will be returned.
    /// 
    ///     \sa addSecs(), msecsTo(), addDays(), addMonths(), addYears()
    add_m_secs(msecs: i64) -> DateTime,
    ///     \fn QDateTime QDateTime::toTimeSpec(Qt::TimeSpec spec) const
    /// 
    ///     Returns a copy of this datetime converted to the given time
    ///     \a spec.
    /// 
    ///     If \a spec is Qt::OffsetFromUTC then it is set to Qt::UTC.  To set to a
    ///     spec of Qt::OffsetFromUTC use toOffsetFromUtc().
    /// 
    ///     If \a spec is Qt::TimeZone then it is set to Qt::LocalTime,
    ///     i.e. the local Time Zone.
    /// 
    ///     Example:
    ///     \snippet code/src_corelib_tools_qdatetime.cpp 16
    /// 
    ///     \sa timeSpec(), toTimeZone(), toUTC(), toLocalTime()
    to_time_spec(spec: Rute::TimeSpec) -> DateTime,
    to_local_time() -> DateTime,
    to_utc() -> DateTime,
    ///     \since 5.2
    /// 
    ///     \fn QDateTime QDateTime::toOffsetFromUtc(int offsetSeconds) const
    /// 
    ///     Returns a copy of this datetime converted to a spec of Qt::OffsetFromUTC
    ///     with the given \a offsetSeconds.
    /// 
    ///     If the \a offsetSeconds equals 0 then a UTC datetime will be returned
    /// 
    ///     \sa setOffsetFromUtc(), offsetFromUtc(), toTimeSpec()
    to_offset_from_utc(offset_seconds: i32) -> DateTime,
    ///     \since 5.2
    /// 
    ///     Returns a copy of this datetime converted to the given \a timeZone
    /// 
    ///     \sa timeZone(), toTimeSpec()
    to_time_zone(to_zone: &TimeZoneType) -> DateTime,
    ///     Returns the number of days from this datetime to the \a other
    ///     datetime. The number of days is counted as the number of times
    ///     midnight is reached between this datetime to the \a other
    ///     datetime. This means that a 10 minute difference from 23:55 to
    ///     0:05 the next day counts as one day.
    /// 
    ///     If the \a other datetime is earlier than this datetime,
    ///     the value returned is negative.
    /// 
    ///     Example:
    ///     \snippet code/src_corelib_tools_qdatetime.cpp 15
    /// 
    ///     \sa addDays(), secsTo(), msecsTo()
    days_to(arg0: &DateTimeType) -> i64,
    ///     Returns the number of seconds from this datetime to the \a other
    ///     datetime. If the \a other datetime is earlier than this datetime,
    ///     the value returned is negative.
    /// 
    ///     Before performing the comparison, the two datetimes are converted
    ///     to Qt::UTC to ensure that the result is correct if daylight-saving
    ///     (DST) applies to one of the two datetimes but not the other.
    /// 
    ///     Returns 0 if either datetime is invalid.
    /// 
    ///     Example:
    ///     \snippet code/src_corelib_tools_qdatetime.cpp 11
    /// 
    ///     \sa addSecs(), daysTo(), QTime::secsTo()
    secs_to(arg0: &DateTimeType) -> i64,
    ///     Returns the number of milliseconds from this datetime to the \a other
    ///     datetime. If the \a other datetime is earlier than this datetime,
    ///     the value returned is negative.
    /// 
    ///     Before performing the comparison, the two datetimes are converted
    ///     to Qt::UTC to ensure that the result is correct if daylight-saving
    ///     (DST) applies to one of the two datetimes and but not the other.
    /// 
    ///     Returns 0 if either datetime is invalid.
    /// 
    ///     \sa addMSecs(), daysTo(), QTime::msecsTo()
    msecs_to(arg0: &DateTimeType) -> i64,
    set_utc_offset(seconds: i32),
    ///     \since 4.4
    ///     \internal
    ///     \obsolete
    /// 
    ///     This method was added in 4.4 but never documented as public. It was replaced
    ///     in 5.1 with public method offsetFromUTC() for consistency with QTimeZone.
    /// 
    ///     This method should never be made public.
    /// 
    ///     \sa offsetFromUTC()
    utc_offset() -> i32,
    [static] current_date_time() -> DateTime,
    [static] current_date_time_utc() -> DateTime,
    ///     \deprecated
    /// 
    ///     Returns the datetime as the number of seconds that have passed
    ///     since 1970-01-01T00:00:00, Coordinated Universal Time (Qt::UTC).
    /// 
    ///     On systems that do not support time zones, this function will
    ///     behave as if local time were Qt::UTC.
    /// 
    ///     \note This function returns a 32-bit unsigned integer and is deprecated.
    /// 
    ///     If the date is outside the range 1970-01-01T00:00:00 to
    ///     2106-02-07T06:28:14, this function returns -1 cast to an unsigned integer
    ///     (i.e., 0xFFFFFFFF).
    /// 
    ///     To get an extended range, use toMSecsSinceEpoch() or toSecsSinceEpoch().
    /// 
    ///     \sa toSecsSinceEpoch(), toMSecsSinceEpoch(), setTime_t()
    to_time_t() -> uint,
    ///     \fn void QDateTime::setTime_t(uint seconds)
    ///     \deprecated
    /// 
    ///     Sets the date and time given the number of \a seconds that have
    ///     passed since 1970-01-01T00:00:00, Coordinated Universal Time
    ///     (Qt::UTC). On systems that do not support time zones this function
    ///     will behave as if local time were Qt::UTC.
    /// 
    ///     \note This function is deprecated. For new code, use setSecsSinceEpoch().
    /// 
    ///     \sa toTime_t()
    set_time_t(secs_since1_jan1970_utc: uint),
    ///     \since 5.2
    ///     \deprecated
    /// 
    ///     Returns a datetime whose date and time are the number of \a seconds
    ///     that have passed since 1970-01-01T00:00:00, Coordinated Universal
    ///     Time (Qt::UTC) and with the given \a timeZone.
    /// 
    ///     \note This function is deprecated. Please use fromSecsSinceEpoch() in new
    ///     code.
    /// 
    ///     \sa toTime_t(), setTime_t()
    [static] from_time_t(secs_since1_jan1970_utc: uint) -> DateTime,
    ///     \since 5.2
    ///     \deprecated
    /// 
    ///     Returns a datetime whose date and time are the number of \a seconds
    ///     that have passed since 1970-01-01T00:00:00, Coordinated Universal
    ///     Time (Qt::UTC) and with the given \a timeZone.
    /// 
    ///     \note This function is deprecated. Please use fromSecsSinceEpoch() in new
    ///     code.
    /// 
    ///     \sa toTime_t(), setTime_t()
    [static] from_time_t(secs_since1_jan1970_utc: uint, spec: Rute::TimeSpec, offset_from_utc: i32) -> DateTime,
    ///     \since 5.2
    ///     \deprecated
    /// 
    ///     Returns a datetime whose date and time are the number of \a seconds
    ///     that have passed since 1970-01-01T00:00:00, Coordinated Universal
    ///     Time (Qt::UTC) and with the given \a timeZone.
    /// 
    ///     \note This function is deprecated. Please use fromSecsSinceEpoch() in new
    ///     code.
    /// 
    ///     \sa toTime_t(), setTime_t()
    [static] from_time_t(secs_since1_jan1970_utc: uint, time_zone: &TimeZoneType) -> DateTime,
    ///     \since 5.2
    /// 
    ///     Returns a datetime whose date and time are the number of milliseconds \a msecs
    ///     that have passed since 1970-01-01T00:00:00.000, Coordinated Universal
    ///     Time (Qt::UTC) and with the given \a timeZone.
    /// 
    ///     \sa fromSecsSinceEpoch()
    [static] from_m_secs_since_epoch(msecs: i64) -> DateTime,
    ///     \since 5.2
    /// 
    ///     Returns a datetime whose date and time are the number of milliseconds \a msecs
    ///     that have passed since 1970-01-01T00:00:00.000, Coordinated Universal
    ///     Time (Qt::UTC) and with the given \a timeZone.
    /// 
    ///     \sa fromSecsSinceEpoch()
    [static] from_m_secs_since_epoch(msecs: i64, spec: Rute::TimeSpec, offset_from_utc: i32) -> DateTime,
    ///     \since 5.8
    /// 
    ///     Returns a datetime whose date and time are the number of seconds \a secs
    ///     that have passed since 1970-01-01T00:00:00.000, Coordinated Universal
    ///     Time (Qt::UTC) and with the given \a timeZone.
    /// 
    ///     \sa fromMSecsSinceEpoch()
    [static] from_secs_since_epoch(secs: i64, spe: Rute::TimeSpec, offset_from_utc: i32) -> DateTime,
    ///     \since 5.2
    /// 
    ///     Returns a datetime whose date and time are the number of milliseconds \a msecs
    ///     that have passed since 1970-01-01T00:00:00.000, Coordinated Universal
    ///     Time (Qt::UTC) and with the given \a timeZone.
    /// 
    ///     \sa fromSecsSinceEpoch()
    [static] from_m_secs_since_epoch(msecs: i64, time_zone: &TimeZoneType) -> DateTime,
    ///     \since 5.8
    /// 
    ///     Returns a datetime whose date and time are the number of seconds \a secs
    ///     that have passed since 1970-01-01T00:00:00.000, Coordinated Universal
    ///     Time (Qt::UTC) and with the given \a timeZone.
    /// 
    ///     \sa fromMSecsSinceEpoch()
    [static] from_secs_since_epoch(secs: i64, time_zone: &TimeZoneType) -> DateTime,
    [static] current_m_secs_since_epoch() -> i64,
    [static] current_secs_since_epoch() -> i64,
}

// vim: syntax=rust expandtab ts=4 sw=4
