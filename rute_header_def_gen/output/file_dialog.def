[org_name(QFileDialog)]
enum ViewMode {
    Detail,
    List,
}

[org_name(QFileDialog)]
enum FileMode {
    AnyFile,
    ExistingFile,
    Directory,
    ExistingFiles,
    DirectoryOnly,
}

[org_name(QFileDialog)]
enum AcceptMode {
    AcceptOpen,
    AcceptSave,
}

[org_name(QFileDialog)]
enum DialogLabel {
    LookIn,
    FileName,
    FileType,
    Accept,
    Reject,
}

[org_name(QFileDialog)]
enum Option {
    ShowDirsOnly,
    DontResolveSymlinks,
    DontConfirmOverwrite,
    DontUseSheet,
    DontUseNativeDialog,
    ReadOnly,
    HideNameFilterDetails,
    DontUseCustomDirectoryIcons,
}

struct FileDialog : Dialog {
    set_directory(directory: String),
    set_directory(directory: &DirType),
    directory() -> Dir,
    set_directory_url(directory: &UrlType),
    directory_url() -> Url,
    select_file(filename: String),
    selected_files() -> [String],
    select_url(url: &UrlType),
    selected_urls() -> [Url],
    set_name_filter_details_visible(enabled: bool),
    is_name_filter_details_visible() -> bool,
    set_name_filter(filter: String),
    set_name_filters(filters: &[String]),
    name_filters() -> [String],
    select_name_filter(filter: String),
    selected_mime_type_filter() -> String,
    selected_name_filter() -> String,
    set_mime_type_filters(filters: &[String]),
    mime_type_filters() -> [String],
    select_mime_type_filter(filter: String),
    filter() -> Dir::Filters,
    set_filter(filters: Dir::Filters),
    set_view_mode(mode: FileDialog::ViewMode),
    view_mode() -> FileDialog::ViewMode,
    set_file_mode(mode: FileDialog::FileMode),
    file_mode() -> FileDialog::FileMode,
    set_accept_mode(mode: FileDialog::AcceptMode),
    accept_mode() -> FileDialog::AcceptMode,
    set_read_only(enabled: bool),
    is_read_only() -> bool,
    set_resolve_symlinks(enabled: bool),
    resolve_symlinks() -> bool,
    set_sidebar_urls(urls: [UrlType]),
    sidebar_urls() -> [Url],
    save_state() -> ByteArray,
    restore_state(state: &ByteArrayType) -> bool,
    set_confirm_overwrite(enabled: bool),
    confirm_overwrite() -> bool,
    set_default_suffix(suffix: String),
    default_suffix() -> String,
    set_history(paths: &[String]),
    history() -> [String],
    set_item_delegate(delegate: *AbstractItemDelegateType),
    item_delegate() -> AbstractItemDelegate?,
    set_icon_provider(provider: *FileIconProviderType),
    icon_provider() -> FileIconProvider?,
    set_label_text(label: FileDialog::DialogLabel, text: String),
    label_text(label: FileDialog::DialogLabel) -> String,
    set_supported_schemes(schemes: &[String]),
    supported_schemes() -> [String],
    set_proxy_model(model: *AbstractProxyModelType),
    proxy_model() -> AbstractProxyModel?,
    set_option(option: FileDialog::Option, on: bool),
    test_option(option: FileDialog::Option) -> bool,
    set_options(options: FileDialog::Options),
    options() -> FileDialog::Options,
    open(receiver: *ObjectType, member: *char),
    [event] set_visible(visible: bool),
    [signal] file_selected(file: String),
    [signal] files_selected(files: &[String]),
    [signal] current_changed(path: String),
    [signal] directory_entered(directory: String),
    [signal] url_selected(url: &UrlType),
    [signal] urls_selected(urls: [UrlType]),
    [signal] current_url_changed(url: &UrlType),
    [signal] directory_url_entered(directory: &UrlType),
    [signal] filter_selected(filter: String),
    [static] get_open_file_name(parent: *WidgetType, caption: String, dir: String, filter: String, selected_filter: String, options: FileDialog::Options) -> String,
    [static] get_open_file_url(parent: *WidgetType, caption: String, dir: &UrlType, filter: String, selected_filter: String, options: FileDialog::Options, supported_schemes: &[String]) -> Url,
    [static] get_save_file_name(parent: *WidgetType, caption: String, dir: String, filter: String, selected_filter: String, options: FileDialog::Options) -> String,
    [static] get_save_file_url(parent: *WidgetType, caption: String, dir: &UrlType, filter: String, selected_filter: String, options: FileDialog::Options, supported_schemes: &[String]) -> Url,
    [static] get_existing_directory(parent: *WidgetType, caption: String, dir: String, options: FileDialog::Options) -> String,
    [static] get_existing_directory_url(parent: *WidgetType, caption: String, dir: &UrlType, options: FileDialog::Options, supported_schemes: &[String]) -> Url,
    [static] get_open_file_names(parent: *WidgetType, caption: String, dir: String, filter: String, selected_filter: String, options: FileDialog::Options) -> [String],
    [static] get_open_file_urls(parent: *WidgetType, caption: String, dir: &UrlType, filter: String, selected_filter: String, options: FileDialog::Options, supported_schemes: &[String]) -> [Url],
    [event] done(result: i32),
    [event] accept(),
    [event] change_event(e: *EventType),
}

// vim: syntax=rust expandtab ts=4 sw=4
