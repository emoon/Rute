/// 
/// The QFileDialog class enables a user to traverse the file system in
/// order to select one or many files or a directory.
/// 
/// The easiest way to create a QFileDialog is to use the static functions.
/// 
/// In the above example, a modal QFileDialog is created using a static
/// function. The dialog initially displays the contents of the
/// directory, and displays files matching the patterns given in the
/// string . The parent of the file dialog
/// is set to *this,* and the window title is set to .
/// 
/// If you want to use multiple filters, separate each one with
/// *two* semicolons. For example:
/// 
/// You can create your own QFileDialog without using the static
/// functions. By calling setFileMode(), you can specify what the user must
/// select in the dialog:
/// 
/// In the above example, the mode of the file dialog is set to
/// AnyFile, meaning that the user can select any file, or even specify a
/// file that doesn't exist. This mode is useful for creating a
/// file dialog. Use ExistingFile if the user must select an
/// existing file, or [Directory](Directory)
/// if only a directory may be selected.
/// See the [QFileDialog::FileMode](QFileDialog::FileMode)
/// enum for the complete list of modes.
/// 
/// The fileMode property contains the mode of operation for the dialog;
/// this indicates what types of objects the user is expected to select.
/// Use setNameFilter() to set the dialog's file filter. For example:
/// 
/// In the above example, the filter is set to `"Images (*.png *.xpm *.jpg)"` ,
/// this means that only files with the extension `png,` `xpm,`
/// or `jpg` will be shown in the QFileDialog. You can apply
/// several filters by using setNameFilters(). Use selectNameFilter() to select
/// one of the filters you've given as the file dialog's default filter.
/// 
/// The file dialog has two view modes: [List](QFileDialog::)
/// and
/// [Detail](QFileDialog::)
/// 
/// [List](QFileDialog::)
/// presents the contents of the current directory
/// as a list of file and directory names. [Detail](QFileDialog::)
/// also
/// displays a list of file and directory names, but provides additional
/// information alongside each name, such as the file size and modification
/// date. Set the mode with setViewMode():
/// 
/// The last important function you will need to use when creating your
/// own file dialog is selectedFiles().
/// 
/// In the above example, a modal file dialog is created and shown. If
/// the user clicked OK, the file they selected is put in `fileName.`
/// 
/// The dialog's working directory can be set with setDirectory().
/// Each file in the current directory can be selected using
/// the selectFile() function.
/// 
/// The [Standard Dialogs](dialogs/standarddialogs)
/// example shows
/// how to use QFileDialog as well as other built-in Qt dialogs.
/// 
/// By default, a platform-native file dialog will be used if the platform has
/// one. In that case, the widgets which would otherwise be used to construct the
/// dialog will not be instantiated, so related accessors such as layout() and
/// itemDelegate() will return null. You can set the [DontUseNativeDialog](DontUseNativeDialog)
/// option to
/// ensure that the widget-based implementation will be used instead of the
/// native dialog.
/// 
/// **See also:** [`Dir`]
/// [`FileInfo`]
/// [`File`]
/// [`ColorDialog`]
/// [`FontDialog`]
/// {Standard Dialogs Example}
/// {Application Example}
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct FileDialog : Dialog {
    /// 
    /// **Overloads**
    /// 
    /// Sets the file dialog's current *directory.*
    /// 
    /// **Note**: On iOS, if you set *directory* to [QStandardPaths::standardLocations(QStandardPaths::PicturesLocation).last()](QStandardPaths::standardLocations())
    /// 
    /// a native image picker dialog will be used for accessing the user's photo album.
    /// The filename returned can be loaded using QFile and related APIs.
    /// For this to be enabled, the Info.plist assigned to QMAKE_INFO_PLIST in the
    /// project file must contain the key `NSPhotoLibraryUsageDescription.` See
    /// Info.plist documentation from Apple for more information regarding this key.
    /// This feature was added in Qt 5.5.
    /// 
    /// Sets the file dialog's current *directory* url.
    /// 
    /// **Note**: The non-native QFileDialog supports only local files.
    /// 
    /// **Note**: On Windows, it is possible to pass URLs representing
    /// one of the *virtual folders* , such as or .
    /// This is done by passing a QUrl using the scheme `clsid` followed
    /// by the CLSID value with the curly braces removed. For example the URL
    /// `clsid:374DE290-123F-4565-9164-39C4925E467B` denotes the download
    /// location. For a complete list of possible values, see the MSDN documentation on
    /// [KNOWNFOLDERID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378457.aspx)
    /// 
    /// This feature was added in Qt 5.5.
    /// 
    /// **See also:** [`Uuid`]
    set_directory(directory: String),
    /// 
    /// **Overloads**
    /// 
    /// Sets the file dialog's current *directory.*
    /// 
    /// **Note**: On iOS, if you set *directory* to [QStandardPaths::standardLocations(QStandardPaths::PicturesLocation).last()](QStandardPaths::standardLocations())
    /// 
    /// a native image picker dialog will be used for accessing the user's photo album.
    /// The filename returned can be loaded using QFile and related APIs.
    /// For this to be enabled, the Info.plist assigned to QMAKE_INFO_PLIST in the
    /// project file must contain the key `NSPhotoLibraryUsageDescription.` See
    /// Info.plist documentation from Apple for more information regarding this key.
    /// This feature was added in Qt 5.5.
    /// 
    /// Sets the file dialog's current *directory* url.
    /// 
    /// **Note**: The non-native QFileDialog supports only local files.
    /// 
    /// **Note**: On Windows, it is possible to pass URLs representing
    /// one of the *virtual folders* , such as or .
    /// This is done by passing a QUrl using the scheme `clsid` followed
    /// by the CLSID value with the curly braces removed. For example the URL
    /// `clsid:374DE290-123F-4565-9164-39C4925E467B` denotes the download
    /// location. For a complete list of possible values, see the MSDN documentation on
    /// [KNOWNFOLDERID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378457.aspx)
    /// 
    /// This feature was added in Qt 5.5.
    /// 
    /// **See also:** [`Uuid`]
    [org_name(setDirectory)]
    set_directory_2(directory: &DirType),
    /// 
    /// This signal is emitted for local operations when the user enters
    /// a *directory.*
    /// 
    /// This signal is emitted when the user enters a *directory.*
    /// 
    /// 
    /// Returns the directory currently being displayed in the dialog.
    /// 
    /// Returns the url of the directory currently being displayed in the dialog.
    /// 
    directory() -> Dir,
    /// 
    /// Sets the file dialog's current *directory* url.
    /// 
    /// **Note**: The non-native QFileDialog supports only local files.
    /// 
    /// **Note**: On Windows, it is possible to pass URLs representing
    /// one of the *virtual folders* , such as or .
    /// This is done by passing a QUrl using the scheme `clsid` followed
    /// by the CLSID value with the curly braces removed. For example the URL
    /// `clsid:374DE290-123F-4565-9164-39C4925E467B` denotes the download
    /// location. For a complete list of possible values, see the MSDN documentation on
    /// [KNOWNFOLDERID](https://msdn.microsoft.com/en-us/library/windows/desktop/dd378457.aspx)
    /// 
    /// This feature was added in Qt 5.5.
    /// 
    /// **See also:** [`Uuid`]
    set_directory_url(directory: &UrlType),
    /// 
    /// This signal is emitted when the user enters a *directory.*
    /// 
    /// 
    /// Returns the url of the directory currently being displayed in the dialog.
    /// 
    directory_url() -> Url,
    /// 
    /// Selects the given *filename* in the file dialog.
    /// 
    /// **See also:** [`selected_files()`]
    select_file(filename: String),
    /// 
    /// Returns a list of strings containing the absolute paths of the
    /// selected files in the dialog. If no files are selected, or
    /// the mode is not ExistingFiles or ExistingFile, selectedFiles() contains the current path in the viewport.
    /// 
    /// **See also:** [`selected_name_filter()`]
    /// [`select_file()`]
    selected_files() -> [String],
    /// 
    /// Selects the given *url* in the file dialog.
    /// 
    /// **Note**: The non-native QFileDialog supports only local files.
    /// 
    /// **See also:** [`selected_urls()`]
    select_url(url: &UrlType),
    /// 
    /// Returns a list of urls containing the selected files in the dialog.
    /// If no files are selected, or the mode is not ExistingFiles or
    /// ExistingFile, selectedUrls() contains the current path in the viewport.
    /// 
    /// **See also:** [`selected_name_filter()`]
    /// [`select_url()`]
    selected_urls() -> [Url],
    set_name_filter_details_visible(enabled: bool),
    is_name_filter_details_visible() -> bool,
    /// 
    /// Sets the filter used in the file dialog to the given *filter.*
    /// 
    /// If *filter* contains a pair of parentheses containing one or more
    /// filename-wildcard patterns, separated by spaces, then only the
    /// text contained in the parentheses is used as the filter. This means
    /// that these calls are all equivalent:
    /// 
    /// **See also:** [`set_mime_type_filters()`]
    /// [`set_name_filters()`]
    /// 
    /// Sets the *filters* used in the file dialog.
    /// 
    /// Note that the filter ***.*** is not portable, because the historical
    /// assumption that the file extension determines the file type is not
    /// consistent on every operating system. It is possible to have a file with no
    /// dot in its name (for example, `Makefile).` In a native Windows file
    /// dialog, ***.*** will match such files, while in other types of file dialogs
    /// it may not. So it is better to use ***** if you mean to select any file.
    /// 
    /// [setMimeTypeFilters()](setMimeTypeFilters())
    /// has the advantage of providing all possible name
    /// filters for each file type. For example, JPEG images have three possible
    /// extensions; if your application can open such files, selecting the
    /// `image/jpeg` mime type as a filter will allow you to open all of them.
    set_name_filter(filter: String),
    /// 
    /// Sets the *filters* used in the file dialog.
    /// 
    /// Note that the filter ***.*** is not portable, because the historical
    /// assumption that the file extension determines the file type is not
    /// consistent on every operating system. It is possible to have a file with no
    /// dot in its name (for example, `Makefile).` In a native Windows file
    /// dialog, ***.*** will match such files, while in other types of file dialogs
    /// it may not. So it is better to use ***** if you mean to select any file.
    /// 
    /// [setMimeTypeFilters()](setMimeTypeFilters())
    /// has the advantage of providing all possible name
    /// filters for each file type. For example, JPEG images have three possible
    /// extensions; if your application can open such files, selecting the
    /// `image/jpeg` mime type as a filter will allow you to open all of them.
    set_name_filters(filters: &[String]),
    /// 
    /// Returns the file type filters that are in operation on this file
    /// dialog.
    name_filters() -> [String],
    /// 
    /// Sets the current file type *filter.* Multiple filters can be
    /// passed in *filter* by separating them with semicolons or spaces.
    /// 
    /// **See also:** [`set_name_filter()`]
    /// [`set_name_filters()`]
    /// [`selected_name_filter()`]
    select_name_filter(filter: String),
    /// 
    /// * * **Returns** The mimetype of the file that the user selected in the file dialog.
    selected_mime_type_filter() -> String,
    /// 
    /// Returns the filter that the user selected in the file dialog.
    /// 
    /// **See also:** [`selected_files()`]
    selected_name_filter() -> String,
    /// 
    /// Sets the *filters* used in the file dialog, from a list of MIME types.
    /// 
    /// Convenience method for setNameFilters().
    /// Uses QMimeType to create a name filter from the glob patterns and description
    /// defined in each MIME type.
    /// 
    /// Use application/octet-stream for the filter, since that
    /// is the base MIME type for all files.
    /// 
    /// Calling setMimeTypeFilters overrides any previously set name filters,
    /// and changes the return value of nameFilters().
    /// 
    set_mime_type_filters(filters: &[String]),
    /// 
    /// Returns the MIME type filters that are in operation on this file
    /// dialog.
    mime_type_filters() -> [String],
    /// 
    /// Sets the current MIME type *filter.*
    /// 
    select_mime_type_filter(filter: String),
    /// 
    /// This signal is emitted when the user selects a *filter.*
    /// 
    /// Returns the filter that is used when displaying files.
    /// 
    /// **See also:** [`set_filter()`]
    filter() -> Dir::Filters,
    /// 
    /// Sets the filter used by the model to *filters.* The filter is used
    /// to specify the kind of files that should be shown.
    /// 
    /// **See also:** [`filter()`]
    set_filter(filters: Dir::Filters),
    set_view_mode(mode: FileDialog::ViewMode),
    /// 
    /// By default, the `Detail` mode is used to display information about
    /// files and directories.
    /// 
    /// **See also:** ViewMode
    view_mode() -> FileDialog::ViewMode,
    set_file_mode(mode: FileDialog::FileMode),
    /// 
    /// The file mode defines the number and type of items that the user is
    /// expected to select in the dialog.
    /// 
    /// By default, this property is set to AnyFile.
    /// 
    /// This function will set the labels for the FileName and
    /// [Accept](QFileDialog::)
    /// [DialogLabel](DialogLabel)
    /// s. It is possible to set
    /// custom text after the call to setFileMode().
    /// 
    /// **See also:** FileMode
    file_mode() -> FileDialog::FileMode,
    set_accept_mode(mode: FileDialog::AcceptMode),
    /// 
    /// The action mode defines whether the dialog is for opening or saving files.
    /// 
    /// By default, this property is set to [AcceptOpen](AcceptOpen)
    /// 
    /// 
    /// **See also:** AcceptMode
    accept_mode() -> FileDialog::AcceptMode,
    set_read_only(enabled: bool),
    is_read_only() -> bool,
    set_resolve_symlinks(enabled: bool),
    /// 
    /// If this property is set to true, the file dialog will resolve
    /// shortcuts or symbolic links.
    /// 
    /// Use setOption(DontResolveSymlinks, ! *enabled)* or
    /// !testOption(DontResolveSymlinks).
    resolve_symlinks() -> bool,
    /// 
    /// Sets the *urls* that are located in the sidebar.
    /// 
    /// For instance:
    /// 
    /// The file dialog will then look like this:
    /// 
    /// ![filedialogurls.png](filedialogurls.png)
    /// 
    /// **See also:** [`sidebar_urls()`]
    set_sidebar_urls(urls: [UrlType]),
    /// 
    /// Returns a list of urls that are currently in the sidebar
    sidebar_urls() -> [Url],
    /// 
    /// Saves the state of the dialog's layout, history and current directory.
    /// 
    /// Typically this is used in conjunction with QSettings to remember the size
    /// for a future session. A version number is stored as part of the data.
    save_state() -> ByteArray,
    /// 
    /// Restores the dialogs's layout, history and current directory to the *state* specified.
    /// 
    /// Typically this is used in conjunction with QSettings to restore the size
    /// from a past session.
    /// 
    /// Returns `false` if there are errors
    restore_state(state: &ByteArrayType) -> bool,
    set_confirm_overwrite(enabled: bool),
    /// 
    /// Use setOption(DontConfirmOverwrite, ! *enabled)* or
    /// !testOption(DontConfirmOverwrite) instead.
    confirm_overwrite() -> bool,
    set_default_suffix(suffix: String),
    /// 
    /// This property specifies a string that will be added to the
    /// filename if it has no suffix already. The suffix is typically
    /// used to indicate the file type (e.g. indicates a text
    /// file).
    /// 
    /// If the first character is a dot ('.'), it is removed.
    default_suffix() -> String,
    /// 
    /// Sets the browsing history of the filedialog to contain the given
    /// *paths.*
    set_history(paths: &[String]),
    /// 
    /// Returns the browsing history of the filedialog as a list of paths.
    history() -> [String],
    /// 
    /// Sets the item delegate used to render items in the views in the
    /// file dialog to the given *delegate.*
    /// 
    /// **Warning**: You should not share the same instance of a delegate between views.
    /// Doing so can cause incorrect or unintuitive editing behavior since each
    /// view connected to a given delegate may receive the [closeEditor()](QAbstractItemDelegate::)
    /// 
    /// signal, and attempt to access, modify or close an editor that has already been closed.
    /// 
    /// Note that the model used is QFileSystemModel. It has custom item data roles, which is
    /// described by the [Roles](QFileSystemModel::)
    /// enum. You can use a QFileIconProvider if
    /// you only want custom icons.
    /// 
    /// **See also:** [`item_delegate()`]
    /// [`set_icon_provider()`]
    /// [`FileSystemModel`]
    set_item_delegate(delegate: *AbstractItemDelegateType),
    /// 
    /// Returns the item delegate used to render the items in the views in the filedialog.
    item_delegate() -> AbstractItemDelegate?,
    /// 
    /// Sets the icon provider used by the filedialog to the specified *provider.*
    set_icon_provider(provider: *FileIconProviderType),
    /// 
    /// Returns the icon provider used by the filedialog.
    icon_provider() -> FileIconProvider?,
    /// 
    /// Sets the *text* shown in the filedialog in the specified *label.*
    set_label_text(label: FileDialog::DialogLabel, text: String),
    /// 
    /// Returns the text shown in the filedialog in the specified *label.*
    label_text(label: FileDialog::DialogLabel) -> String,
    set_supported_schemes(schemes: &[String]),
    /// 
    /// Setting this property allows to restrict the type of URLs the
    /// user will be able to select. It is a way for the application to declare
    /// the protocols it will support to fetch the file content. An empty list
    /// means that no restriction is applied (the default).
    /// Supported for local files ("file" scheme) is implicit and always enabled;
    /// it is not necessary to include it in the restriction.
    supported_schemes() -> [String],
    /// 
    /// Sets the model for the views to the given *proxyModel.* This is useful if you
    /// want to modify the underlying model; for example, to add columns, filter
    /// data or add drives.
    /// 
    /// Any existing proxy model will be removed, but not deleted. The file dialog
    /// will take ownership of the *proxyModel.*
    /// 
    /// **See also:** [`proxy_model()`]
    set_proxy_model(model: *AbstractProxyModelType),
    /// 
    /// Returns the proxy model used by the file dialog. By default no proxy is set.
    /// 
    /// **See also:** [`set_proxy_model()`]
    proxy_model() -> AbstractProxyModel?,
    /// 
    /// Sets the given *option* to be enabled if *on* is true; otherwise,
    /// clears the given *option.*
    /// 
    /// **See also:** options
    /// [`test_option()`]
    set_option(option: FileDialog::Option, on: bool),
    /// 
    /// Returns `true` if the given *option* is enabled; otherwise, returns
    /// false.
    /// 
    /// **See also:** options
    /// [`set_option()`]
    test_option(option: FileDialog::Option) -> bool,
    set_options(options: FileDialog::Options),
    /// 
    /// By default, all options are disabled.
    /// 
    /// Options should be set before showing the dialog. Setting them while the
    /// dialog is visible is not guaranteed to have an immediate effect on the
    /// dialog (depending on the option and on the platform).
    /// 
    /// **See also:** [`set_option()`]
    /// [`test_option()`]
    options() -> FileDialog::Options,
    /// 
    /// **Overloads**
    /// 
    /// This function connects one of its signals to the slot specified by *receiver*
    /// and *member.* The specific signal depends is filesSelected() if fileMode is
    /// ExistingFiles and fileSelected() if fileMode is anything else.
    /// 
    /// The signal will be disconnected from the slot when the dialog is closed.
    open(receiver: *ObjectType, member: *char),
    /// 
    [event] set_visible(visible: bool),
    /// 
    /// When the selection changes for local operations and the dialog is
    /// accepted, this signal is emitted with the (possibly empty)
    /// selected *file.*
    /// 
    /// **See also:** [`current_changed()`]
    /// [`Dialog::accepted()`]
    [signal] file_selected(file: String),
    /// 
    /// When the selection changes for local operations and the dialog is
    /// accepted, this signal is emitted with the (possibly empty) list
    /// of *selected* files.
    /// 
    /// **See also:** [`current_changed()`]
    /// [`Dialog::accepted()`]
    [signal] files_selected(files: &[String]),
    /// 
    /// When the current file changes for local operations, this signal is
    /// emitted with the new file name as the *path* parameter.
    /// 
    /// **See also:** [`files_selected()`]
    [signal] current_changed(path: String),
    /// 
    /// This signal is emitted for local operations when the user enters
    /// a *directory.*
    [signal] directory_entered(directory: String),
    /// 
    /// When the selection changes and the dialog is accepted, this signal is
    /// emitted with the (possibly empty) selected *url.*
    /// 
    /// **See also:** [`current_url_changed()`]
    /// [`Dialog::accepted()`]
    [signal] url_selected(url: &UrlType),
    /// 
    /// When the selection changes and the dialog is accepted, this signal is
    /// emitted with the (possibly empty) list of selected *urls.*
    /// 
    /// **See also:** [`current_url_changed()`]
    /// [`Dialog::accepted()`]
    [signal] urls_selected(urls: [UrlType]),
    /// 
    /// When the current file changes, this signal is emitted with the
    /// new file URL as the *url* parameter.
    /// 
    /// **See also:** [`urls_selected()`]
    [signal] current_url_changed(url: &UrlType),
    /// 
    /// This signal is emitted when the user enters a *directory.*
    /// 
    [signal] directory_url_entered(directory: &UrlType),
    /// 
    /// This signal is emitted when the user selects a *filter.*
    [signal] filter_selected(filter: String),
    /// 
    /// This is a convenience static function that returns an existing file
    /// selected by the user. If the user presses Cancel, it returns a null string.
    /// 
    /// The function creates a modal file dialog with the given *parent* widget.
    /// If *parent* is not 0, the dialog will be shown centered over the parent
    /// widget.
    /// 
    /// The file dialog's working directory will be set to *dir.* If *dir*
    /// includes a file name, the file will be selected. Only files that match the
    /// given *filter* are shown. The filter selected is set to *selectedFilter.*
    /// The parameters *dir,* *selectedFilter,* and *filter* may be empty
    /// strings. If you want multiple filters, separate them with ';;', for
    /// example:
    /// 
    /// ```
    /// "Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files (*.xml)"
    /// ```
    /// 
    /// The *options* argument holds various options about how to run the dialog,
    /// see the QFileDialog::Option enum for more information on the flags you can
    /// pass.
    /// 
    /// The dialog's caption is set to *caption.* If *caption* is not specified
    /// then a default caption will be used.
    /// 
    /// On Windows, and MacOS , this static function will use the
    /// native file dialog and not a QFileDialog.
    /// 
    /// On Windows the dialog will spin a blocking modal event loop that will not
    /// dispatch any QTimers, and if *parent* is not 0 then it will position the
    /// dialog just below the parent's title bar.
    /// 
    /// On Unix/X11, the normal behavior of the file dialog is to resolve and
    /// follow symlinks. For example, if `/usr/tmp` is a symlink to `/var/tmp` ,
    /// the file dialog will change to `/var/tmp` after entering `/usr/tmp` . If
    /// *options* includes DontResolveSymlinks, the file dialog will treat
    /// symlinks as regular directories.
    /// 
    /// **Warning**: Do not delete *parent* during the execution of the dialog. If you
    /// want to do this, you should create the dialog yourself using one of the
    /// QFileDialog constructors.
    /// 
    /// **See also:** [`get_open_file_names()`]
    /// [`get_save_file_name()`]
    /// [`get_existing_directory()`]
    /// 
    /// This is a convenience static function that will return one or more existing
    /// files selected by the user.
    /// 
    /// This function creates a modal file dialog with the given *parent* widget.
    /// If *parent* is not 0, the dialog will be shown centered over the parent
    /// widget.
    /// 
    /// The file dialog's working directory will be set to *dir.* If *dir*
    /// includes a file name, the file will be selected. The filter is set to
    /// *filter* so that only those files which match the filter are shown. The
    /// filter selected is set to *selectedFilter.* The parameters *dir,*
    /// *selectedFilter* and *filter* may be empty strings. If you need multiple
    /// filters, separate them with ';;', for instance:
    /// 
    /// ```
    /// "Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files (*.xml)"
    /// ```
    /// 
    /// The dialog's caption is set to *caption.* If *caption* is not specified
    /// then a default caption will be used.
    /// 
    /// On Windows, and MacOS , this static function will use the
    /// native file dialog and not a QFileDialog.
    /// 
    /// On Windows the dialog will spin a blocking modal event loop that will not
    /// dispatch any QTimers, and if *parent* is not 0 then it will position the
    /// dialog just below the parent's title bar.
    /// 
    /// On Unix/X11, the normal behavior of the file dialog is to resolve and
    /// follow symlinks. For example, if `/usr/tmp` is a symlink to `/var/tmp` ,
    /// the file dialog will change to `/var/tmp` after entering `/usr/tmp` .
    /// The *options* argument holds various options about how to run the dialog,
    /// see the QFileDialog::Option enum for more information on the flags you can
    /// pass.
    /// 
    /// **Warning**: Do not delete *parent* during the execution of the dialog. If you
    /// want to do this, you should create the dialog yourself using one of the
    /// QFileDialog constructors.
    /// 
    /// **See also:** [`get_open_file_name()`]
    /// [`get_save_file_name()`]
    /// [`get_existing_directory()`]
    [static] get_open_file_name(parent: *WidgetType, caption: String, dir: String, filter: String, selected_filter: String, options: FileDialog::Options) -> String,
    /// 
    /// This is a convenience static function that returns an existing file
    /// selected by the user. If the user presses Cancel, it returns an
    /// empty url.
    /// 
    /// The function is used similarly to QFileDialog::getOpenFileName(). In
    /// particular *parent,* *caption,* *dir,* *filter,* *selectedFilter*
    /// and *options* are used in the exact same way.
    /// 
    /// The main difference with QFileDialog::getOpenFileName() comes from
    /// the ability offered to the user to select a remote file. That's why
    /// the return type and the type of *dir* is QUrl.
    /// 
    /// The *supportedSchemes* argument allows to restrict the type of URLs the
    /// user will be able to select. It is a way for the application to declare
    /// the protocols it will support to fetch the file content. An empty list
    /// means that no restriction is applied (the default).
    /// Supported for local files ("file" scheme) is implicit and always enabled;
    /// it is not necessary to include it in the restriction.
    /// 
    /// When possible, this static function will use the native file dialog and
    /// not a QFileDialog. On platforms which don't support selecting remote
    /// files, Qt will allow to select only local files.
    /// 
    /// **See also:** [`get_open_file_name()`]
    /// [`get_open_file_urls()`]
    /// [`get_save_file_url()`]
    /// [`get_existing_directory_url()`]
    /// 
    /// This is a convenience static function that will return one or more existing
    /// files selected by the user. If the user presses Cancel, it returns an
    /// empty list.
    /// 
    /// The function is used similarly to QFileDialog::getOpenFileNames(). In
    /// particular *parent,* *caption,* *dir,* *filter,* *selectedFilter*
    /// and *options* are used in the exact same way.
    /// 
    /// The main difference with QFileDialog::getOpenFileNames() comes from
    /// the ability offered to the user to select remote files. That's why
    /// the return type and the type of *dir* are respectively QList<QUrl>
    /// and QUrl.
    /// 
    /// The *supportedSchemes* argument allows to restrict the type of URLs the
    /// user will be able to select. It is a way for the application to declare
    /// the protocols it will support to fetch the file content. An empty list
    /// means that no restriction is applied (the default).
    /// Supported for local files ("file" scheme) is implicit and always enabled;
    /// it is not necessary to include it in the restriction.
    /// 
    /// When possible, this static function will use the native file dialog and
    /// not a QFileDialog. On platforms which don't support selecting remote
    /// files, Qt will allow to select only local files.
    /// 
    /// **See also:** [`get_open_file_names()`]
    /// [`get_open_file_url()`]
    /// [`get_save_file_url()`]
    /// [`get_existing_directory_url()`]
    [static] get_open_file_url(parent: *WidgetType, caption: String, dir: &UrlType, filter: String, selected_filter: String, options: FileDialog::Options, supported_schemes: &[String]) -> Url,
    /// 
    /// This is a convenience static function that will return a file name selected
    /// by the user. The file does not have to exist.
    /// 
    /// It creates a modal file dialog with the given *parent* widget. If
    /// *parent* is not 0, the dialog will be shown centered over the parent
    /// widget.
    /// 
    /// The file dialog's working directory will be set to *dir.* If *dir*
    /// includes a file name, the file will be selected. Only files that match the
    /// *filter* are shown. The filter selected is set to *selectedFilter.* The
    /// parameters *dir,* *selectedFilter,* and *filter* may be empty strings.
    /// Multiple filters are separated with ';;'. For instance:
    /// 
    /// ```
    /// "Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files (*.xml)"
    /// ```
    /// 
    /// The *options* argument holds various options about how to run the dialog,
    /// see the QFileDialog::Option enum for more information on the flags you can
    /// pass.
    /// 
    /// The default filter can be chosen by setting *selectedFilter* to the
    /// desired value.
    /// 
    /// The dialog's caption is set to *caption.* If *caption* is not specified,
    /// a default caption will be used.
    /// 
    /// On Windows, and MacOS , this static function will use the
    /// native file dialog and not a QFileDialog.
    /// 
    /// On Windows the dialog will spin a blocking modal event loop that will not
    /// dispatch any QTimers, and if *parent* is not 0 then it will position the
    /// dialog just below the parent's title bar. On MacOS , with its native file
    /// dialog, the filter argument is ignored.
    /// 
    /// On Unix/X11, the normal behavior of the file dialog is to resolve and
    /// follow symlinks. For example, if `/usr/tmp` is a symlink to `/var/tmp` ,
    /// the file dialog will change to `/var/tmp` after entering `/usr/tmp` . If
    /// *options* includes DontResolveSymlinks the file dialog will treat symlinks
    /// as regular directories.
    /// 
    /// **Warning**: Do not delete *parent* during the execution of the dialog. If you
    /// want to do this, you should create the dialog yourself using one of the
    /// QFileDialog constructors.
    /// 
    /// **See also:** [`get_open_file_name()`]
    /// [`get_open_file_names()`]
    /// [`get_existing_directory()`]
    [static] get_save_file_name(parent: *WidgetType, caption: String, dir: String, filter: String, selected_filter: String, options: FileDialog::Options) -> String,
    /// 
    /// This is a convenience static function that returns a file selected by
    /// the user. The file does not have to exist. If the user presses Cancel,
    /// it returns an empty url.
    /// 
    /// The function is used similarly to QFileDialog::getSaveFileName(). In
    /// particular *parent,* *caption,* *dir,* *filter,* *selectedFilter*
    /// and *options* are used in the exact same way.
    /// 
    /// The main difference with QFileDialog::getSaveFileName() comes from
    /// the ability offered to the user to select a remote file. That's why
    /// the return type and the type of *dir* is QUrl.
    /// 
    /// The *supportedSchemes* argument allows to restrict the type of URLs the
    /// user will be able to select. It is a way for the application to declare
    /// the protocols it will support to save the file content. An empty list
    /// means that no restriction is applied (the default).
    /// Supported for local files ("file" scheme) is implicit and always enabled;
    /// it is not necessary to include it in the restriction.
    /// 
    /// When possible, this static function will use the native file dialog and
    /// not a QFileDialog. On platforms which don't support selecting remote
    /// files, Qt will allow to select only local files.
    /// 
    /// **See also:** [`get_save_file_name()`]
    /// [`get_open_file_url()`]
    /// [`get_open_file_urls()`]
    /// [`get_existing_directory_url()`]
    [static] get_save_file_url(parent: *WidgetType, caption: String, dir: &UrlType, filter: String, selected_filter: String, options: FileDialog::Options, supported_schemes: &[String]) -> Url,
    /// 
    /// This is a convenience static function that will return an existing
    /// directory selected by the user.
    /// 
    /// This function creates a modal file dialog with the given *parent* widget.
    /// If *parent* is not 0, the dialog will be shown centered over the parent
    /// widget.
    /// 
    /// The dialog's working directory is set to *dir,* and the caption is set to
    /// *caption.* Either of these may be an empty string in which case the
    /// current directory and a default caption will be used respectively.
    /// 
    /// The *options* argument holds various options about how to run the dialog,
    /// see the QFileDialog::Option enum for more information on the flags you can
    /// pass. To ensure a native file dialog, [ShowDirsOnly](QFileDialog::)
    /// must
    /// be set.
    /// 
    /// On Windows and MacOS , this static function will use the
    /// native file dialog and not a QFileDialog. However, the native Windows file
    /// dialog does not support displaying files in the directory chooser. You need
    /// to pass [DontUseNativeDialog](QFileDialog::)
    /// to display files using a
    /// QFileDialog.
    /// 
    /// On Unix/X11, the normal behavior of the file dialog is to resolve and
    /// follow symlinks. For example, if `/usr/tmp` is a symlink to `/var/tmp` ,
    /// the file dialog will change to `/var/tmp` after entering `/usr/tmp` . If
    /// *options* includes DontResolveSymlinks, the file dialog will treat
    /// symlinks as regular directories.
    /// 
    /// On Windows, the dialog will spin a blocking modal event loop that will not
    /// dispatch any QTimers, and if *parent* is not 0 then it will position the
    /// dialog just below the parent's title bar.
    /// 
    /// **Warning**: Do not delete *parent* during the execution of the dialog. If you
    /// want to do this, you should create the dialog yourself using one of the
    /// QFileDialog constructors.
    /// 
    /// **See also:** [`get_open_file_name()`]
    /// [`get_open_file_names()`]
    /// [`get_save_file_name()`]
    /// 
    /// This is a convenience static function that will return an existing
    /// directory selected by the user. If the user presses Cancel, it
    /// returns an empty url.
    /// 
    /// The function is used similarly to QFileDialog::getExistingDirectory().
    /// In particular *parent,* *caption,* *dir* and *options* are used
    /// in the exact same way.
    /// 
    /// The main difference with QFileDialog::getExistingDirectory() comes from
    /// the ability offered to the user to select a remote directory. That's why
    /// the return type and the type of *dir* is QUrl.
    /// 
    /// The *supportedSchemes* argument allows to restrict the type of URLs the
    /// user will be able to select. It is a way for the application to declare
    /// the protocols it will support to fetch the file content. An empty list
    /// means that no restriction is applied (the default).
    /// Supported for local files ("file" scheme) is implicit and always enabled;
    /// it is not necessary to include it in the restriction.
    /// 
    /// When possible, this static function will use the native file dialog and
    /// not a QFileDialog. On platforms which don't support selecting remote
    /// files, Qt will allow to select only local files.
    /// 
    /// **See also:** [`get_existing_directory()`]
    /// [`get_open_file_url()`]
    /// [`get_open_file_urls()`]
    /// [`get_save_file_url()`]
    [static] get_existing_directory(parent: *WidgetType, caption: String, dir: String, options: FileDialog::Options) -> String,
    /// 
    /// This is a convenience static function that will return an existing
    /// directory selected by the user. If the user presses Cancel, it
    /// returns an empty url.
    /// 
    /// The function is used similarly to QFileDialog::getExistingDirectory().
    /// In particular *parent,* *caption,* *dir* and *options* are used
    /// in the exact same way.
    /// 
    /// The main difference with QFileDialog::getExistingDirectory() comes from
    /// the ability offered to the user to select a remote directory. That's why
    /// the return type and the type of *dir* is QUrl.
    /// 
    /// The *supportedSchemes* argument allows to restrict the type of URLs the
    /// user will be able to select. It is a way for the application to declare
    /// the protocols it will support to fetch the file content. An empty list
    /// means that no restriction is applied (the default).
    /// Supported for local files ("file" scheme) is implicit and always enabled;
    /// it is not necessary to include it in the restriction.
    /// 
    /// When possible, this static function will use the native file dialog and
    /// not a QFileDialog. On platforms which don't support selecting remote
    /// files, Qt will allow to select only local files.
    /// 
    /// **See also:** [`get_existing_directory()`]
    /// [`get_open_file_url()`]
    /// [`get_open_file_urls()`]
    /// [`get_save_file_url()`]
    [static] get_existing_directory_url(parent: *WidgetType, caption: String, dir: &UrlType, options: FileDialog::Options, supported_schemes: &[String]) -> Url,
    /// 
    /// This is a convenience static function that will return one or more existing
    /// files selected by the user.
    /// 
    /// This function creates a modal file dialog with the given *parent* widget.
    /// If *parent* is not 0, the dialog will be shown centered over the parent
    /// widget.
    /// 
    /// The file dialog's working directory will be set to *dir.* If *dir*
    /// includes a file name, the file will be selected. The filter is set to
    /// *filter* so that only those files which match the filter are shown. The
    /// filter selected is set to *selectedFilter.* The parameters *dir,*
    /// *selectedFilter* and *filter* may be empty strings. If you need multiple
    /// filters, separate them with ';;', for instance:
    /// 
    /// ```
    /// "Images (*.png *.xpm *.jpg);;Text files (*.txt);;XML files (*.xml)"
    /// ```
    /// 
    /// The dialog's caption is set to *caption.* If *caption* is not specified
    /// then a default caption will be used.
    /// 
    /// On Windows, and MacOS , this static function will use the
    /// native file dialog and not a QFileDialog.
    /// 
    /// On Windows the dialog will spin a blocking modal event loop that will not
    /// dispatch any QTimers, and if *parent* is not 0 then it will position the
    /// dialog just below the parent's title bar.
    /// 
    /// On Unix/X11, the normal behavior of the file dialog is to resolve and
    /// follow symlinks. For example, if `/usr/tmp` is a symlink to `/var/tmp` ,
    /// the file dialog will change to `/var/tmp` after entering `/usr/tmp` .
    /// The *options* argument holds various options about how to run the dialog,
    /// see the QFileDialog::Option enum for more information on the flags you can
    /// pass.
    /// 
    /// **Warning**: Do not delete *parent* during the execution of the dialog. If you
    /// want to do this, you should create the dialog yourself using one of the
    /// QFileDialog constructors.
    /// 
    /// **See also:** [`get_open_file_name()`]
    /// [`get_save_file_name()`]
    /// [`get_existing_directory()`]
    [static] get_open_file_names(parent: *WidgetType, caption: String, dir: String, filter: String, selected_filter: String, options: FileDialog::Options) -> [String],
    /// 
    /// This is a convenience static function that will return one or more existing
    /// files selected by the user. If the user presses Cancel, it returns an
    /// empty list.
    /// 
    /// The function is used similarly to QFileDialog::getOpenFileNames(). In
    /// particular *parent,* *caption,* *dir,* *filter,* *selectedFilter*
    /// and *options* are used in the exact same way.
    /// 
    /// The main difference with QFileDialog::getOpenFileNames() comes from
    /// the ability offered to the user to select remote files. That's why
    /// the return type and the type of *dir* are respectively QList<QUrl>
    /// and QUrl.
    /// 
    /// The *supportedSchemes* argument allows to restrict the type of URLs the
    /// user will be able to select. It is a way for the application to declare
    /// the protocols it will support to fetch the file content. An empty list
    /// means that no restriction is applied (the default).
    /// Supported for local files ("file" scheme) is implicit and always enabled;
    /// it is not necessary to include it in the restriction.
    /// 
    /// When possible, this static function will use the native file dialog and
    /// not a QFileDialog. On platforms which don't support selecting remote
    /// files, Qt will allow to select only local files.
    /// 
    /// **See also:** [`get_open_file_names()`]
    /// [`get_open_file_url()`]
    /// [`get_save_file_url()`]
    /// [`get_existing_directory_url()`]
    [static] get_open_file_urls(parent: *WidgetType, caption: String, dir: &UrlType, filter: String, selected_filter: String, options: FileDialog::Options, supported_schemes: &[String]) -> [Url],
    /// 
    [event] done(result: i32),
    /// 
    /// The action mode defines whether the dialog is for opening or saving files.
    /// 
    /// By default, this property is set to [AcceptOpen](AcceptOpen)
    /// 
    /// 
    /// **See also:** AcceptMode
    /// 
    [event] accept(),
    /// 
    [event] change_event(e: *EventType),
}

[org_name(QFileDialog)]
enum ViewMode {
    /// Displays an icon, a name, and details for each item in
    Detail,
    /// Displays only an icon and a name for each item in the
    List,
}

[org_name(QFileDialog)]
enum FileMode {
    /// The name of a file, whether it exists or not.
    AnyFile,
    /// The name of a single existing file.
    ExistingFile,
    /// The name of a directory. Both files and
    Directory,
    /// The names of zero or more existing files.
    ExistingFiles,
    /// Use
    DirectoryOnly,
}

[org_name(QFileDialog)]
enum AcceptMode {
    /// 
    AcceptOpen,
    /// 
    AcceptSave,
}

[org_name(QFileDialog)]
enum DialogLabel {
    /// 
    LookIn,
    /// 
    FileName,
    /// 
    FileType,
    /// 
    Accept,
    /// 
    Reject,
}

[org_name(QFileDialog)]
enum Option {
    /// Only show directories in the file dialog. By
    ShowDirsOnly,
    /// Don't resolve symlinks in the file
    DontResolveSymlinks,
    /// Don't ask for confirmation if an
    DontConfirmOverwrite,
    /// In previous versions of Qt, the static
    DontUseSheet,
    /// Don't use the native file dialog. By
    DontUseNativeDialog,
    /// Indicates that the model is readonly.
    ReadOnly,
    /// Indicates if the file name filter details are
    HideNameFilterDetails,
    /// Always use the default directory icon.
    DontUseCustomDirectoryIcons,
}

// vim: syntax=rust expandtab ts=4 sw=4
