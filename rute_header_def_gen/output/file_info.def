/// 
/// QFileInfo provides information about a file's name and position
/// (path) in the file system, its access rights and whether it is a
/// directory or symbolic link, etc. The file's size and last
/// modified/read times are also available. QFileInfo can also be
/// used to obtain information about a Qt [resource](resource%0A%20%20%20%20system)
/// 
/// 
/// A QFileInfo can point to a file with either a relative or an
/// absolute file path. Absolute file paths begin with the directory
/// separator (or with a drive specification on Windows). Relative
/// file names begin with a directory name or a file name and specify
/// a path relative to the current working directory. An example of an
/// absolute path is the string . A relative path might
/// look like . You can use the function isRelative() to
/// check whether a QFileInfo is using a relative or an absolute file
/// path. You can call the function makeAbsolute() to convert a
/// relative QFileInfo's path to an absolute path.
/// 
/// The file that the QFileInfo works on is set in the constructor or
/// later with setFile(). Use exists() to see if the file exists and
/// size() to get its size.
/// 
/// The file's type is obtained with isFile(), isDir() and
/// isSymLink(). The symLinkTarget() function provides the name of the file
/// the symlink points to.
/// 
/// On Unix (including MacOS and iOS), the symlink has the same size() has
/// the file it points to, because Unix handles symlinks
/// transparently; similarly, opening a symlink using QFile
/// effectively opens the link's target. For example:
/// 
/// On Windows, symlinks (shortcuts) are `.lnk` files. The reported
/// size() is that of the symlink (not the link's target), and
/// opening a symlink using QFile opens the `.lnk` file. For
/// example:
/// 
/// Elements of the file's name can be extracted with path() and
/// fileName(). The fileName()'s parts can be extracted with
/// baseName(), suffix() or completeSuffix(). QFileInfo objects to
/// directories created by Qt classes will not have a trailing file
/// separator. If you wish to use trailing separators in your own file
/// info objects, just append one to the file name given to the constructors
/// or setFile().
/// 
/// The file's dates are returned by created(), lastModified(), lastRead() and
/// fileTime(). Information about the file's access permissions is
/// obtained with isReadable(), isWritable() and isExecutable(). The
/// file's ownership is available from owner(), ownerId(), group() and
/// groupId(). You can examine a file's permissions and ownership in a
/// single statement using the permission() function.
/// 
/// **Note**: On NTFS file systems, ownership and permissions checking is
/// disabled by default for performance reasons. To enable it,
/// include the following line:
/// 
/// Permission checking is then turned on and off by incrementing and
/// decrementing `qt_ntfs_permission_lookup` by 1.
/// 
/// # Performance Issues
/// 
/// Some of QFileInfo's functions query the file system, but for
/// performance reasons, some functions only operate on the
/// file name itself. For example: To return the absolute path of
/// a relative file name, absolutePath() has to query the file system.
/// The path() function, however, can work on the file name directly,
/// and so it is faster.
/// 
/// **Note**: To speed up performance, QFileInfo caches information about
/// the file.
/// 
/// Because files can be changed by other users or programs, or
/// even by other parts of the same program, there is a function that
/// refreshes the file information: refresh(). If you want to switch
/// off a QFileInfo's caching and force it to access the file system
/// every time you request information from it call setCaching(false).
/// 
/// **See also:** [`Dir`]
/// [`File`]
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct FileInfo {
    /// 
    /// Swaps this file info with *other.* This function is very fast and
    /// never fails.
    swap(other: &FileInfoType),
    /// 
    /// Sets the file that the QFileInfo provides information about to *file.*
    /// 
    /// The *file* can also include an absolute or relative file path.
    /// Absolute paths begin with the directory separator (e.g. under
    /// Unix) or a drive specification (under Windows). Relative file
    /// names begin with a directory name or a file name and specify a
    /// path relative to the current directory.
    /// 
    /// Example:
    /// 
    /// **See also:** [`is_relative()`]
    /// [`Dir::set_current`]
    /// [`Dir::is_relative_path`]
    /// 
    /// **Overloads**
    /// Sets the file that the QFileInfo provides information about to *file.*
    /// 
    /// If *file* includes a relative path, the QFileInfo will also have
    /// a relative path.
    /// 
    /// **See also:** [`is_relative()`]
    /// 
    /// **Overloads**
    /// Sets the file that the QFileInfo provides information about to *file* in directory *dir.*
    /// 
    /// If *file* includes a relative path, the QFileInfo will also
    /// have a relative path.
    /// 
    /// **See also:** [`is_relative()`]
    set_file(file: String),
    /// 
    /// Sets the file that the QFileInfo provides information about to *file.*
    /// 
    /// The *file* can also include an absolute or relative file path.
    /// Absolute paths begin with the directory separator (e.g. under
    /// Unix) or a drive specification (under Windows). Relative file
    /// names begin with a directory name or a file name and specify a
    /// path relative to the current directory.
    /// 
    /// Example:
    /// 
    /// **See also:** [`is_relative()`]
    /// [`Dir::set_current`]
    /// [`Dir::is_relative_path`]
    /// 
    /// **Overloads**
    /// Sets the file that the QFileInfo provides information about to *file.*
    /// 
    /// If *file* includes a relative path, the QFileInfo will also have
    /// a relative path.
    /// 
    /// **See also:** [`is_relative()`]
    /// 
    /// **Overloads**
    /// Sets the file that the QFileInfo provides information about to *file* in directory *dir.*
    /// 
    /// If *file* includes a relative path, the QFileInfo will also
    /// have a relative path.
    /// 
    /// **See also:** [`is_relative()`]
    [org_name(setFile)]
    set_file_2(file: &FileType),
    /// 
    /// Sets the file that the QFileInfo provides information about to *file.*
    /// 
    /// The *file* can also include an absolute or relative file path.
    /// Absolute paths begin with the directory separator (e.g. under
    /// Unix) or a drive specification (under Windows). Relative file
    /// names begin with a directory name or a file name and specify a
    /// path relative to the current directory.
    /// 
    /// Example:
    /// 
    /// **See also:** [`is_relative()`]
    /// [`Dir::set_current`]
    /// [`Dir::is_relative_path`]
    /// 
    /// **Overloads**
    /// Sets the file that the QFileInfo provides information about to *file.*
    /// 
    /// If *file* includes a relative path, the QFileInfo will also have
    /// a relative path.
    /// 
    /// **See also:** [`is_relative()`]
    /// 
    /// **Overloads**
    /// Sets the file that the QFileInfo provides information about to *file* in directory *dir.*
    /// 
    /// If *file* includes a relative path, the QFileInfo will also
    /// have a relative path.
    /// 
    /// **See also:** [`is_relative()`]
    [org_name(setFile)]
    set_file_3(dir: &DirType, file: String),
    /// 
    /// Returns `true` if the file exists; otherwise returns `false.`
    /// 
    /// **Note**: If the file is a symlink that points to a non-existing
    /// file, false is returned.
    /// 
    /// Returns `true` if the *file* exists; otherwise returns `false.`
    /// 
    /// **Note**: If *file* is a symlink that points to a non-existing
    /// file, false is returned.
    /// 
    /// **Note**: Using this function is faster than using
    /// `QFileInfo(file).exists()` for file system access.
    exists() -> bool,
    /// 
    /// Returns `true` if the file exists; otherwise returns `false.`
    /// 
    /// **Note**: If the file is a symlink that points to a non-existing
    /// file, false is returned.
    /// 
    /// Returns `true` if the *file* exists; otherwise returns `false.`
    /// 
    /// **Note**: If *file* is a symlink that points to a non-existing
    /// file, false is returned.
    /// 
    /// **Note**: Using this function is faster than using
    /// `QFileInfo(file).exists()` for file system access.
    [org_name(exists)]
    [static] exists_2(file: String) -> bool,
    /// 
    /// Refreshes the information about the file, i.e. reads in information
    /// from the file system the next time a cached property is fetched.
    refresh(),
    /// 
    /// Returns the file name, including the path (which may be absolute
    /// or relative).
    /// 
    /// **See also:** [`absolute_file_path()`]
    /// [`canonical_file_path()`]
    /// [`is_relative()`]
    file_path() -> String,
    /// 
    /// Returns an absolute path including the file name.
    /// 
    /// The absolute path name consists of the full path and the file
    /// name. On Unix this will always begin with the root, '/',
    /// directory. On Windows this will always begin 'D:/' where D is a
    /// drive letter, except for network shares that are not mapped to a
    /// drive letter, in which case the path will begin '//sharename/'.
    /// QFileInfo will uppercase drive letters. Note that QDir does not do
    /// this. The code snippet below shows this.
    /// 
    /// This function returns the same as filePath(), unless isRelative()
    /// is true. In contrast to canonicalFilePath(), symbolic links or
    /// redundant or elements are not necessarily removed.
    /// 
    /// **Warning**: If filePath() is empty the behavior of this function
    /// is undefined.
    /// 
    /// **See also:** [`file_path()`]
    /// [`canonical_file_path()`]
    /// [`is_relative()`]
    absolute_file_path() -> String,
    /// 
    /// Returns the canonical path including the file name, i.e. an absolute
    /// path without symbolic links or redundant or elements.
    /// 
    /// If the file does not exist, canonicalFilePath() returns an empty
    /// string.
    /// 
    /// **See also:** [`file_path()`]
    /// [`absolute_file_path()`]
    /// [`dir()`]
    canonical_file_path() -> String,
    /// 
    /// Returns the name of the file, excluding the path.
    /// 
    /// Example:
    /// 
    /// Note that, if this QFileInfo object is given a path ending in a
    /// slash, the name of the file is considered empty.
    /// 
    /// **See also:** [`is_relative()`]
    /// [`file_path()`]
    /// [`base_name()`]
    /// [`suffix()`]
    file_name() -> String,
    /// 
    /// Returns the base name of the file without the path.
    /// 
    /// The base name consists of all characters in the file up to (but
    /// not including) the *first* '.' character.
    /// 
    /// Example:
    /// 
    /// The base name of a file is computed equally on all platforms, independent
    /// of file naming conventions (e.g., on Unix has an empty base
    /// name, and the suffix is ).
    /// 
    /// **See also:** [`file_name()`]
    /// [`suffix()`]
    /// [`complete_suffix()`]
    /// [`complete_base_name()`]
    base_name() -> String,
    /// 
    /// Returns the complete base name of the file without the path.
    /// 
    /// The complete base name consists of all characters in the file up
    /// to (but not including) the *last* '.' character.
    /// 
    /// Example:
    /// 
    /// **See also:** [`file_name()`]
    /// [`suffix()`]
    /// [`complete_suffix()`]
    /// [`base_name()`]
    complete_base_name() -> String,
    /// 
    /// Returns the suffix (extension) of the file.
    /// 
    /// The suffix consists of all characters in the file after (but not
    /// including) the last '.'.
    /// 
    /// Example:
    /// 
    /// The suffix of a file is computed equally on all platforms, independent of
    /// file naming conventions (e.g., on Unix has an empty base name,
    /// and the suffix is ).
    /// 
    /// **See also:** [`file_name()`]
    /// [`complete_suffix()`]
    /// [`base_name()`]
    /// [`complete_base_name()`]
    suffix() -> String,
    /// 
    /// Returns the name of the bundle.
    /// 
    /// On MacOS and iOS this returns the proper localized name for a bundle if the
    /// path isBundle(). On all other platforms an empty QString is returned.
    /// 
    /// Example:
    /// 
    /// **See also:** [`is_bundle()`]
    /// [`file_path()`]
    /// [`base_name()`]
    /// [`suffix()`]
    bundle_name() -> String,
    /// 
    /// Returns the complete suffix (extension) of the file.
    /// 
    /// The complete suffix consists of all characters in the file after
    /// (but not including) the first '.'.
    /// 
    /// Example:
    /// 
    /// **See also:** [`file_name()`]
    /// [`suffix()`]
    /// [`base_name()`]
    /// [`complete_base_name()`]
    complete_suffix() -> String,
    /// 
    /// Returns the file's path. This doesn't include the file name.
    /// 
    /// Note that, if this QFileInfo object is given a path ending in a
    /// slash, the name of the file is considered empty and this function
    /// will return the entire path.
    /// 
    /// **See also:** [`file_path()`]
    /// [`absolute_path()`]
    /// [`canonical_path()`]
    /// [`dir()`]
    /// [`file_name()`]
    /// [`is_relative()`]
    path() -> String,
    /// 
    /// Returns a file's path absolute path. This doesn't include the
    /// file name.
    /// 
    /// On Unix the absolute path will always begin with the root, '/',
    /// directory. On Windows this will always begin 'D:/' where D is a
    /// drive letter, except for network shares that are not mapped to a
    /// drive letter, in which case the path will begin '//sharename/'.
    /// 
    /// In contrast to canonicalPath() symbolic links or redundant or
    /// elements are not necessarily removed.
    /// 
    /// **Warning**: If filePath() is empty the behavior of this function
    /// is undefined.
    /// 
    /// **See also:** [`absolute_file_path()`]
    /// [`path()`]
    /// [`canonical_path()`]
    /// [`file_name()`]
    /// [`is_relative()`]
    absolute_path() -> String,
    /// 
    /// Returns the file's path canonical path (excluding the file name),
    /// i.e. an absolute path without symbolic links or redundant or elements.
    /// 
    /// If the file does not exist, canonicalPath() returns an empty string.
    /// 
    /// **See also:** [`path()`]
    /// [`absolute_path()`]
    canonical_path() -> String,
    /// 
    /// Returns the path of the object's parent directory as a QDir object.
    /// 
    /// **Note:** The QDir returned always corresponds to the object's
    /// parent directory, even if the QFileInfo represents a directory.
    /// 
    /// For each of the following, dir() returns the QDir
    /// `"~/examples/191697"` .
    /// 
    /// For each of the following, dir() returns the QDir
    /// `"."` .
    /// 
    /// **See also:** [`absolute_path()`]
    /// [`file_path()`]
    /// [`file_name()`]
    /// [`is_relative()`]
    /// [`absolute_dir()`]
    dir() -> Dir,
    /// 
    /// Returns the file's absolute path as a QDir object.
    /// 
    /// **See also:** [`dir()`]
    /// [`file_path()`]
    /// [`file_name()`]
    /// [`is_relative()`]
    absolute_dir() -> Dir,
    /// 
    /// Returns `true` if the user can read the file; otherwise returns `false.`
    /// 
    /// **Note**: If the [NTFS permissions](NTFS%20permissions)
    /// check has not been enabled, the result
    /// on Windows will merely reflect whether the file exists.
    /// 
    /// **See also:** [`is_writable()`]
    /// [`is_executable()`]
    /// [`permission()`]
    is_readable() -> bool,
    /// 
    /// Returns `true` if the user can write to the file; otherwise returns `false.`
    /// 
    /// **Note**: If the [NTFS permissions](NTFS%20permissions)
    /// check has not been enabled, the result on
    /// Windows will merely reflect whether the file is marked as Read Only.
    /// 
    /// **See also:** [`is_readable()`]
    /// [`is_executable()`]
    /// [`permission()`]
    is_writable() -> bool,
    /// 
    /// Returns `true` if the file is executable; otherwise returns `false.`
    /// 
    /// **See also:** [`is_readable()`]
    /// [`is_writable()`]
    /// [`permission()`]
    is_executable() -> bool,
    /// 
    /// Returns `true` if this is a `hidden' file; otherwise returns `false.`
    /// 
    /// **Note:** This function returns `true` for the special entries
    /// and on Unix, even though QDir::entryList threats them as shown.
    is_hidden() -> bool,
    /// 
    /// Returns `true` if the file path can be used directly with native APIs.
    /// Returns `false` if the file is otherwise supported by a virtual file system
    /// inside Qt, such as [the Qt Resource System](the%20Qt%20Resource%20System)
    /// 
    /// 
    /// **Note:** Native paths may still require conversion of path separators
    /// and character encoding, depending on platform and input requirements of the
    /// native API.
    /// 
    /// **See also:** [`Dir::to_native_separators`]
    /// [`File::encode_name`]
    /// [`file_path()`]
    /// [`absolute_file_path()`]
    /// [`canonical_file_path()`]
    is_native_path() -> bool,
    /// 
    /// Returns `true` if the file path name is relative, otherwise returns
    /// false if the path is absolute (e.g. under Unix a path is absolute
    /// if it begins with a ).
    /// 
    /// **See also:** [`is_absolute()`]
    is_relative() -> bool,
    /// 
    /// Returns `true` if the file path name is absolute, otherwise returns
    /// false if the path is relative.
    /// 
    /// **See also:** [`is_relative()`]
    is_absolute() -> bool,
    /// 
    /// Converts the file's path to an absolute path if it is not already in that form.
    /// Returns `true` to indicate that the path was converted; otherwise returns `false`
    /// to indicate that the path was already absolute.
    /// 
    /// **See also:** [`file_path()`]
    /// [`is_relative()`]
    make_absolute() -> bool,
    /// 
    /// Returns `true` if this object points to a file or to a symbolic
    /// link to a file. Returns `false` if the
    /// object points to something which isn't a file, such as a directory.
    /// 
    /// **See also:** [`is_dir()`]
    /// [`is_sym_link()`]
    /// [`is_bundle()`]
    is_file() -> bool,
    /// 
    /// Returns `true` if this object points to a directory or to a symbolic
    /// link to a directory; otherwise returns `false.`
    /// 
    /// **See also:** [`is_file()`]
    /// [`is_sym_link()`]
    /// [`is_bundle()`]
    is_dir() -> bool,
    /// 
    /// Returns `true` if this object points to a symbolic link;
    /// otherwise returns `false.`
    /// 
    /// Symbolic links exist on Unix (including MacOS and iOS) and Windows
    /// and are typically created by the `ln -s` or `mklink` commands,
    /// respectively. Opening a symbolic link effectively opens
    /// the [link's target](symLinkTarget())
    /// 
    /// 
    /// In addition, true will be returned for shortcuts ( `*.lnk` files) on
    /// Windows. Opening those will open the `.lnk` file itself.
    /// 
    /// Example:
    /// 
    /// **Note**: If the symlink points to a non existing file, exists() returns
    /// false.
    /// 
    /// **See also:** [`is_file()`]
    /// [`is_dir()`]
    /// [`sym_link_target()`]
    is_sym_link() -> bool,
    /// 
    /// Returns `true` if the object points to a directory or to a symbolic
    /// link to a directory, and that directory is the root directory; otherwise
    /// returns `false.`
    is_root() -> bool,
    /// 
    /// Returns `true` if this object points to a bundle or to a symbolic
    /// link to a bundle on MacOS and iOS; otherwise returns `false.`
    /// 
    /// **See also:** [`is_dir()`]
    /// [`is_sym_link()`]
    /// [`is_file()`]
    is_bundle() -> bool,
    /// 
    /// Use symLinkTarget() instead.
    read_link() -> String,
    /// 
    /// Returns the absolute path to the file or directory a symbolic link
    /// points to, or an empty string if the object isn't a symbolic
    /// link.
    /// 
    /// This name may not represent an existing file; it is only a string.
    /// QFileInfo::exists() returns `true` if the symlink points to an
    /// existing file.
    /// 
    /// **See also:** [`exists()`]
    /// [`is_sym_link()`]
    /// [`is_dir()`]
    /// [`is_file()`]
    sym_link_target() -> String,
    /// 
    /// Returns the owner of the file. On systems where files
    /// do not have owners, or if an error occurs, an empty string is
    /// returned.
    /// 
    /// This function can be time consuming under Unix (in the order of
    /// milliseconds). On Windows, it will return an empty string unless
    /// the [NTFS permissions](NTFS%20permissions)
    /// check has been enabled.
    /// 
    /// **See also:** [`owner_id()`]
    /// [`group()`]
    /// [`group_id()`]
    /// 
    /// Returns the id of the owner of the file.
    /// 
    /// On Windows and on systems where files do not have owners this
    /// function returns ((uint) -2).
    /// 
    /// **See also:** [`owner()`]
    /// [`group()`]
    /// [`group_id()`]
    owner() -> String,
    /// 
    /// Returns the id of the owner of the file.
    /// 
    /// On Windows and on systems where files do not have owners this
    /// function returns ((uint) -2).
    /// 
    /// **See also:** [`owner()`]
    /// [`group()`]
    /// [`group_id()`]
    owner_id() -> uint,
    /// 
    /// Returns the group of the file. On Windows, on systems where files
    /// do not have groups, or if an error occurs, an empty string is
    /// returned.
    /// 
    /// This function can be time consuming under Unix (in the order of
    /// milliseconds).
    /// 
    /// **See also:** [`group_id()`]
    /// [`owner()`]
    /// [`owner_id()`]
    /// 
    /// Returns the id of the group the file belongs to.
    /// 
    /// On Windows and on systems where files do not have groups this
    /// function always returns (uint) -2.
    /// 
    /// **See also:** [`group()`]
    /// [`owner()`]
    /// [`owner_id()`]
    group() -> String,
    /// 
    /// Returns the id of the group the file belongs to.
    /// 
    /// On Windows and on systems where files do not have groups this
    /// function always returns (uint) -2.
    /// 
    /// **See also:** [`group()`]
    /// [`owner()`]
    /// [`owner_id()`]
    group_id() -> uint,
    /// 
    /// Tests for file permissions. The *permissions* argument can be
    /// several flags of type QFile::Permissions OR-ed together to check
    /// for permission combinations.
    /// 
    /// On systems where files do not have permissions this function
    /// always returns `true.`
    /// 
    /// **Note**: The result might be inaccurate on Windows if the
    /// [NTFS permissions](NTFS%20permissions)
    /// check has not been enabled.
    /// 
    /// Example:
    /// 
    /// **See also:** [`is_readable()`]
    /// [`is_writable()`]
    /// [`is_executable()`]
    /// 
    /// Returns the complete OR-ed together combination of
    /// QFile::Permissions for the file.
    /// 
    /// **Note**: The result might be inaccurate on Windows if the
    /// [NTFS permissions](NTFS%20permissions)
    /// check has not been enabled.
    permission(permissions: File::Permissions) -> bool,
    /// 
    /// Returns the complete OR-ed together combination of
    /// QFile::Permissions for the file.
    /// 
    /// **Note**: The result might be inaccurate on Windows if the
    /// [NTFS permissions](NTFS%20permissions)
    /// check has not been enabled.
    permissions() -> File::Permissions,
    /// 
    /// Returns the file size in bytes. If the file does not exist or cannot be
    /// fetched, 0 is returned.
    /// 
    /// **See also:** [`exists()`]
    size() -> i64,
    /// 
    /// Returns the date and time when the file was created, the time its metadata
    /// was last changed or the time of last modification, whichever one of the
    /// three is available (in that order).
    /// 
    /// This function is deprecated. Instead, use the birthTime() function to get
    /// the time the file was created, metadataChangeTime() to get the time its
    /// metadata was last changed, or lastModified() to get the time it was last modified.
    /// 
    /// **See also:** [`birth_time()`]
    /// [`metadata_change_time()`]
    /// [`last_modified()`]
    /// [`last_read()`]
    created() -> DateTime,
    /// 
    /// Returns the date and time when the file was created / born.
    /// 
    /// If the file birth time is not available, this function returns an invalid
    /// QDateTime.
    /// 
    /// **See also:** [`last_modified()`]
    /// [`last_read()`]
    /// [`metadata_change_time()`]
    birth_time() -> DateTime,
    /// 
    /// Returns the date and time when the file metadata was changed. A metadata
    /// change occurs when the file is created, but it also occurs whenever the
    /// user writes or sets inode information (for example, changing the file
    /// permissions).
    /// 
    /// **See also:** [`last_modified()`]
    /// [`last_read()`]
    metadata_change_time() -> DateTime,
    /// 
    /// Returns the date and local time when the file was last modified.
    /// 
    /// **See also:** [`birth_time()`]
    /// [`last_read()`]
    /// [`metadata_change_time()`]
    /// [`file_time()`]
    last_modified() -> DateTime,
    /// 
    /// Returns the date and local time when the file was last read (accessed).
    /// 
    /// On platforms where this information is not available, returns the
    /// same as lastModified().
    /// 
    /// **See also:** [`birth_time()`]
    /// [`last_modified()`]
    /// [`metadata_change_time()`]
    /// [`file_time()`]
    last_read() -> DateTime,
    /// 
    /// Returns the file time specified by *time.* If the time cannot be
    /// determined, an invalid date time is returned.
    /// 
    /// **See also:** [`File::file_time()`]
    /// [`DateTime::is_valid`]
    file_time(time: File::FileTime) -> DateTime,
    /// 
    /// Returns `true` if caching is enabled; otherwise returns `false.`
    /// 
    /// **See also:** [`set_caching()`]
    /// [`refresh()`]
    caching() -> bool,
    /// 
    /// If *enable* is true, enables caching of file information. If *enable* is false caching is disabled.
    /// 
    /// When caching is enabled, QFileInfo reads the file information from
    /// the file system the first time it's needed, but generally not
    /// later.
    /// 
    /// Caching is enabled by default.
    /// 
    /// **See also:** [`refresh()`]
    /// [`caching()`]
    set_caching(on: bool),
}

// vim: syntax=rust expandtab ts=4 sw=4
