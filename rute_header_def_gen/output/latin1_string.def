
struct Latin1String {
    latin1() -> char?,
    size() -> i32,
    data() -> char?,
    is_null() -> bool,
    is_empty() -> bool,
    at(i: i32) -> Latin1Char,
    front() -> Latin1Char,
    back() -> Latin1Char,
    starts_with(s: StringViewType, cs: Rute::CaseSensitivity) -> bool,
    starts_with(s: Latin1StringType, cs: Rute::CaseSensitivity) -> bool,
    starts_with(c: CharType) -> bool,
    starts_with(c: CharType, cs: Rute::CaseSensitivity) -> bool,
    ends_with(s: StringViewType, cs: Rute::CaseSensitivity) -> bool,
    ends_with(s: Latin1StringType, cs: Rute::CaseSensitivity) -> bool,
    ends_with(c: CharType) -> bool,
    ends_with(c: CharType, cs: Rute::CaseSensitivity) -> bool,
    begin() -> Latin1String::const_iterator,
    cbegin() -> Latin1String::const_iterator,
    end() -> Latin1String::const_iterator,
    ///     \fn QLatin1String::const_iterator QLatin1String::end() const
    ///     \since 5.10
    /// 
    ///     Returns a const \l{STL-style iterators}{STL-style iterator} pointing to the imaginary
    ///     character after the last character in the list.
    /// 
    ///     This function is provided for STL compatibility.
    /// 
    ///     \sa begin(), cend(), rend()
    cend() -> Latin1String::const_iterator,
    rbegin() -> i32,
    crbegin() -> i32,
    rend() -> i32,
    crend() -> i32,
    ///     \fn QLatin1String::const_reverse_iterator QLatin1String::crend() const
    ///     \since 5.10
    /// 
    ///     Same as rend().
    /// 
    ///     This function is provided for STL compatibility.
    /// 
    ///     \sa crbegin(), rend(), cend()
    mid(pos: i32) -> Latin1String,
    ///     \fn QLatin1String::const_reverse_iterator QLatin1String::crend() const
    ///     \since 5.10
    /// 
    ///     Same as rend().
    /// 
    ///     This function is provided for STL compatibility.
    /// 
    ///     \sa crbegin(), rend(), cend()
    mid(pos: i32, n: i32) -> Latin1String,
    left(n: i32) -> Latin1String,
    right(n: i32) -> Latin1String,
    chopped(n: i32) -> Latin1String,
    chop(n: i32),
}

// vim: syntax=rust expandtab ts=4 sw=4
