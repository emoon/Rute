#[org_name(QTextLayout)]
enum CursorMode {
    SkipCharacters,
    SkipWords,
}


struct TextLayout {
    set_font(f: &FontType),
    font() -> Font,
    set_raw_font(raw_font: &RawFontType),
    set_text(string: String),
    text() -> String,
    set_text_option(option: &TextOptionType),
    text_option() -> TextOption?,
    set_preedit_area(position: i32, text: String),
    preedit_area_position() -> i32,
    preedit_area_text() -> String,
    set_additional_formats(overrides: onst QList<QTextLayout::FormatRange> &),
    additional_formats() -> List<QTextLayout::FormatRange>,
    clear_additional_formats(),
    set_formats(overrides: onst QVector<QTextLayout::FormatRange> &),
    formats() -> Vector<QTextLayout::FormatRange>,
    clear_formats(),
    set_cache_enabled(enable: bool),
    cache_enabled() -> bool,
    set_cursor_move_style(style: Rute::CursorMoveStyle),
    cursor_move_style() -> Rute::CursorMoveStyle,
    begin_layout(),
    end_layout(),
    clear_layout(),
    create_line() -> TextLine,
    line_count() -> i32,
    line_at(i: i32) -> TextLine,
    line_for_text_position(pos: i32) -> TextLine,
    is_valid_cursor_position(pos: i32) -> bool,
    next_cursor_position(old_pos: i32, mode: TextLayout::CursorMode) -> i32,
    previous_cursor_position(old_pos: i32, mode: TextLayout::CursorMode) -> i32,
    left_cursor_position(old_pos: i32) -> i32,
    right_cursor_position(old_pos: i32) -> i32,
    draw(p: &PainterType, pos: &PointFType, selections: onst QVector<QTextLayout::FormatRange> &, clip: &RectFType),
    draw_cursor(p: &PainterType, pos: &PointFType, cursor_position: i32),
    draw_cursor(p: &PainterType, pos: &PointFType, cursor_position: i32, width: i32),
    position() -> PointF,
    set_position(p: &PointFType),
    bounding_rect() -> RectF,
    minimum_width() -> f32,
    maximum_width() -> f32,
    glyph_runs(from: i32, length: i32) -> [GlyphRun],
    engine() -> TextEngine?,
    set_flags(flags: i32),
}

// vim: syntax=rust expandtab ts=4 sw=4
