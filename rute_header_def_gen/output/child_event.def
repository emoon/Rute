/// 
/// Child events are sent immediately to objects when children are
/// added or removed.
/// 
/// In both cases you can only rely on the child being a QObject (or,
/// if QObject::isWidgetType() returns `true,` a QWidget). This is
/// because in the QEvent::ChildAdded case the child is not yet fully
/// constructed; in the QEvent::ChildRemoved case it might have
/// already been destructed.
/// 
/// The handler for these events is QObject::childEvent().
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct ChildEvent : Event {
    /// 
    /// Returns the child object that was added or removed.
    child() -> Object?,
    /// 
    /// Returns `true` if type() is QEvent::ChildAdded; otherwise returns
    /// false.
    added() -> bool,
    /// 
    /// Returns `true` if type() is QEvent::ChildPolished; otherwise returns
    /// false.
    polished() -> bool,
    /// 
    /// Returns `true` if type() is QEvent::ChildRemoved; otherwise returns
    /// false.
    removed() -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
