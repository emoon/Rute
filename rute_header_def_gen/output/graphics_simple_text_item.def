///     \class QGraphicsSimpleTextItem
///     \brief The QGraphicsSimpleTextItem class provides a simple text path item
///     that you can add to a QGraphicsScene.
///     \since 4.2
///     \ingroup graphicsview-api
///     \inmodule QtWidgets
/// 
///     To set the item's text, you can either pass a QString to
///     QGraphicsSimpleTextItem's constructor, or call setText() to change the
///     text later. To set the text fill color, call setBrush().
/// 
///     The simple text item can have both a fill and an outline; setBrush() will
///     set the text fill (i.e., text color), and setPen() sets the pen that will
///     be used to draw the text outline. (The latter can be slow, especially for
///     complex pens, and items with long text content.) If all you want is to
///     draw a simple line of text, you should call setBrush() only, and leave the
///     pen unset; QGraphicsSimpleTextItem's pen is by default Qt::NoPen.
/// 
///     QGraphicsSimpleTextItem uses the text's formatted size and the associated
///     font to provide a reasonable implementation of boundingRect(), shape(),
///     and contains(). You can set the font by calling setFont().
/// 
///     QGraphicsSimpleText does not display rich text; instead, you can use
///     QGraphicsTextItem, which provides full text control capabilities.
/// 
///     \image graphicsview-simpletextitem.png
/// 
///     \sa QGraphicsTextItem, QGraphicsPathItem, QGraphicsRectItem,
///     QGraphicsEllipseItem, QGraphicsPixmapItem, QGraphicsPolygonItem,
///     QGraphicsLineItem, {Graphics View Framework}
/// The documentation provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QGraphicsSimpleTextItem)]
enum GraphicsSimpleTextItemFixMeEnums {
    Type,
}

struct GraphicsSimpleTextItem : AbstractGraphicsShapeItem {
    ///     Sets the item's text to \a text. The text will be displayed as
    ///     plain text. Newline characters ('\\n') as well as characters of
    ///     type QChar::LineSeparator will cause item to break the text into
    ///     multiple lines.
    set_text(text: String),
    ///     Returns the item's text.
    text() -> String,
    ///     Sets the font that is used to draw the item's text to \a font.
    set_font(font: &FontType),
    ///     Returns the font that is used to draw the item's text.
    font() -> Font,
    ///     \reimp
    [event] bounding_rect() -> RectF,
    ///     \reimp
    [event] shape() -> PainterPath,
    ///     \reimp
    [event] contains(point: &PointFType) -> bool,
    ///     \reimp
    [event] paint(painter: *PainterType, option: *StyleOptionGraphicsItemType, widget: *WidgetType),
    ///     \reimp
    [event] is_obscured_by(item: *GraphicsItemType) -> bool,
    ///     \reimp
    [event] opaque_area() -> PainterPath,
    ///     \reimp
    [event] type() -> i32,
    ///     \internal
    [event] supports_extension(extension: GraphicsItem::Extension) -> bool,
    ///     \internal
    [event] set_extension(extension: GraphicsItem::Extension, variant: &VariantType),
    ///     \internal
    [event] extension(variant: &VariantType) -> Variant,
}

// vim: syntax=rust expandtab ts=4 sw=4
