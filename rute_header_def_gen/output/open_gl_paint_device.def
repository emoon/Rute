/// 
/// The QOpenGLPaintDevice uses the **current** QOpenGL context to render
/// QPainter draw commands. The context is captured upon construction. It
/// requires support for OpenGL (ES) 2.0 or higher.
/// 
/// # Performance
/// 
/// The QOpenGLPaintDevice is almost always hardware accelerated and
/// has the potential of being much faster than software
/// rasterization. However, it is more sensitive to state changes, and
/// therefore requires the drawing commands to be carefully ordered to
/// achieve optimal performance.
/// 
/// # Antialiasing and Quality
/// 
/// Antialiasing in the OpenGL paint engine is done using
/// multisampling. Most hardware require significantly more memory to
/// do multisampling and the resulting quality is not on par with the
/// quality of the software paint engine. The OpenGL paint engine's
/// strength lies in its performance, not its visual rendering
/// quality.
/// 
/// # State Changes
/// 
/// When painting to a QOpenGLPaintDevice using QPainter, the state of
/// the current OpenGL context will be altered by the paint engine to
/// reflect its needs. Applications should not rely upon the OpenGL
/// state being reset to its original conditions, particularly the
/// current shader program, OpenGL viewport, texture units, and
/// drawing modes.
/// 
/// # Mixing QPainter and OpenGL
/// 
/// When intermixing QPainter and OpenGL, it is important to notify
/// QPainter that the OpenGL state may have been cluttered so it can
/// restore its internal state. This is achieved by calling [QPainter::beginNativePainting()](QPainter::beginNativePainting())
/// before starting the OpenGL
/// rendering and calling [QPainter::endNativePainting()](QPainter::endNativePainting())
/// after
/// finishing.
/// 
/// **See also:** {OpenGL Window Example}
/// 
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
struct OpenGLPaintDevice : PaintDevice {
    [event] dev_type() -> i32,
    /// 
    [event] paint_engine() -> PaintEngine?,
    /// 
    /// Returns the OpenGL context associated with the paint device.
    context() -> OpenGLContext?,
    /// 
    /// Returns the pixel size of the paint device.
    /// 
    /// **See also:** [`set_size()`]
    size() -> Size,
    /// 
    /// Sets the pixel size of the paint device to *size.*
    /// 
    /// **See also:** [`size()`]
    set_size(size: &SizeType),
    /// 
    /// Sets the device pixel ratio for the paint device to *devicePixelRatio.*
    set_device_pixel_ratio(device_pixel_ratio: f32),
    /// 
    /// Returns the number of pixels per meter horizontally.
    /// 
    /// **See also:** [`set_dots_per_meter_x()`]
    dots_per_meter_x() -> f32,
    /// 
    /// Returns the number of pixels per meter vertically.
    /// 
    /// **See also:** [`set_dots_per_meter_y()`]
    dots_per_meter_y() -> f32,
    /// 
    /// Sets the number of pixels per meter horizontally to *dpmx.*
    /// 
    /// **See also:** [`dots_per_meter_x()`]
    set_dots_per_meter_x(arg0: f32),
    /// 
    /// Sets the number of pixels per meter vertically to *dpmy.*
    /// 
    /// **See also:** [`dots_per_meter_y()`]
    set_dots_per_meter_y(arg0: f32),
    /// 
    /// Sets whether painting should be flipped around the Y-axis or not to *flipped.*
    /// 
    /// **See also:** [`paint_flipped()`]
    set_paint_flipped(flipped: bool),
    /// 
    /// Returns `true` if painting is flipped around the Y-axis.
    /// 
    /// **See also:** [`set_paint_flipped()`]
    paint_flipped() -> bool,
    /// 
    /// This virtual method is provided as a callback to allow re-binding a target
    /// frame buffer object or context when different QOpenGLPaintDevice instances
    /// are issuing draw calls alternately.
    /// 
    /// [beginNativePainting()](QPainter::beginNativePainting())
    /// will also trigger
    /// this method.
    /// 
    /// The default implementation does nothing.
    [event] ensure_active_target(),
}

// vim: syntax=rust expandtab ts=4 sw=4
