/// 
/// A QPolygonF is a QVector<QPointF>. The easiest way to add points
/// to a QPolygonF is to use its streaming operator, as illustrated
/// below:
/// 
/// In addition to the functions provided by QVector, QPolygonF
/// provides the boundingRect() and translate() functions for geometry
/// operations. Use the QMatrix::map() function for more general
/// transformations of QPolygonFs.
/// 
/// QPolygonF also provides the isClosed() function to determine
/// whether a polygon's start and end points are the same, and the
/// toPolygon() function returning an integer precision copy of this
/// polygon.
/// 
/// The QPolygonF class is [implicitly
/// shared](Implicit%20Data%20Sharing)
/// 
/// 
/// **See also:** QVector
/// QPolygon
/// QLineF
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.

struct PolygonF {
    /// 
    /// Swaps polygon *other* with this polygon. This operation is very
    /// fast and never fails.
    swap(other: &PolygonFType),
    /// 
    /// Creates and returns a QPolygon by converting each QPointF to a
    /// QPoint.
    /// 
    /// **See also:** QPointF::toPoint()
    to_polygon() -> Polygon,
    /// 
    /// Returns `true` if the polygon is closed; otherwise returns `false.`
    /// 
    /// A polygon is said to be closed if its start point and end point are equal.
    /// 
    /// **See also:** QVector::first()
    /// QVector::last()
    is_closed() -> bool,
    /// 
    /// Returns the bounding rectangle of the polygon, or QRectF(0,0,0,0)
    /// if the polygon is empty.
    /// 
    /// **See also:** QVector::isEmpty()
    bounding_rect() -> RectF,
    /// 
    /// Returns `true` if the given *point* is inside the polygon according to
    /// the specified *fillRule;* otherwise returns `false.`
    contains_point(pt: &PointFType, fill_rule: Rute::FillRule) -> bool,
    /// 
    /// Returns a polygon which is the union of this polygon and *r.*
    /// 
    /// Set operations on polygons will treat the polygons as
    /// areas. Non-closed polygons will be treated as implicitly closed.
    /// 
    /// **See also:** intersected()
    /// subtracted()
    united(r: &PolygonFType) -> PolygonF,
    /// 
    /// Returns a polygon which is the intersection of this polygon and *r.*
    /// 
    /// Set operations on polygons will treat the polygons as
    /// areas. Non-closed polygons will be treated as implicitly closed.
    /// 
    /// **See also:** intersects()
    intersected(r: &PolygonFType) -> PolygonF,
    /// 
    /// Returns `true` if the current polygon intersects at any point the given polygon *p.*
    /// Also returns `true` if the current polygon contains or is contained by any part of *p.*
    /// 
    /// Set operations on polygons will treat the polygons as
    /// areas. Non-closed polygons will be treated as implicitly closed.
    /// 
    /// **See also:** intersected()
    intersects(r: &PolygonFType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
