struct CoreApplication : Object {
    arguments() -> StringListType,
    set_organization_domain(org_domain: String),
    organization_domain() -> String,
    set_organization_name(org_name: String),
    organization_name() -> String,
    set_application_name(application: String),
    application_name() -> String,
    set_application_version(version: String),
    application_version() -> String,
    set_setuid_allowed(allow: bool),
    is_setuid_allowed() -> bool,
    instance() -> &CoreApplicationType,
    exec() -> i32,
    process_events(flags: EventLoop::ProcessEventsFlags),
    process_events(flags: EventLoop::ProcessEventsFlags, maxtime: i32),
    exit(retcode: i32),
    send_event(receiver: &ObjectType, event: &EventType) -> bool,
    post_event(receiver: &ObjectType, event: &EventType, priority: i32),
    send_posted_events(receiver: &ObjectType, event_type: i32),
    remove_posted_events(receiver: &ObjectType, event_type: i32),
    has_pending_events() -> bool,
    event_dispatcher() -> &AbstractEventDispatcherType,
    set_event_dispatcher(event_dispatcher: &AbstractEventDispatcherType),
    notify(arg0: &ObjectType, arg1: &EventType) -> bool,
    starting_up() -> bool,
    closing_down() -> bool,
    application_dir_path() -> String,
    application_file_path() -> String,
    application_pid() -> i64,
    set_library_paths(arg0: &StringListType),
    library_paths() -> StringListType,
    add_library_path(arg0: String),
    remove_library_path(arg0: String),
    install_translator(message_file: &TranslatorType) -> bool,
    remove_translator(message_file: &TranslatorType) -> bool,
    flush(),
    install_native_event_filter(filter_obj: &AbstractNativeEventFilterType),
    remove_native_event_filter(filter_obj: &AbstractNativeEventFilterType),
    is_quit_lock_enabled() -> bool,
    set_quit_lock_enabled(enabled: bool),
    quit(),
    [callback] about_to_quit(arg0: CoreApplication::QPrivateSignal),
    [callback] organization_name_changed(),
    [callback] organization_domain_changed(),
    [callback] application_name_changed(),
    [callback] application_version_changed(),
    event(arg0: &EventType) -> bool,
    compress_event(arg0: &EventType, receiver: &ObjectType, arg1: &PostEventListType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
