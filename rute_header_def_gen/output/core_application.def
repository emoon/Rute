struct CoreApplication : Object {
    arguments() -> StringListType,
    set_organization_domain(String org_domain),
    organization_domain() -> String,
    set_organization_name(String org_name),
    organization_name() -> String,
    set_application_name(String application),
    application_name() -> String,
    set_application_version(String version),
    application_version() -> String,
    set_setuid_allowed(bool allow),
    is_setuid_allowed() -> bool,
    instance() -> &CoreApplicationType,
    exec() -> i32,
    process_events(EventLoop::ProcessEventsFlags flags),
    process_events(EventLoop::ProcessEventsFlags flags, i32 maxtime),
    exit(i32 retcode),
    send_event(&ObjectType receiver, &EventType event) -> bool,
    post_event(&ObjectType receiver, &EventType event, i32 priority),
    send_posted_events(&ObjectType receiver, i32 event_type),
    remove_posted_events(&ObjectType receiver, i32 event_type),
    has_pending_events() -> bool,
    event_dispatcher() -> &AbstractEventDispatcherType,
    set_event_dispatcher(&AbstractEventDispatcherType event_dispatcher),
    notify(&ObjectType arg0, &EventType arg1) -> bool,
    starting_up() -> bool,
    closing_down() -> bool,
    application_dir_path() -> String,
    application_file_path() -> String,
    application_pid() -> qint64,
    set_library_paths(&StringListType arg0),
    library_paths() -> StringListType,
    add_library_path(String arg0),
    remove_library_path(String arg0),
    install_translator(&TranslatorType message_file) -> bool,
    remove_translator(&TranslatorType message_file) -> bool,
    flush(),
    install_native_event_filter(&AbstractNativeEventFilterType filter_obj),
    remove_native_event_filter(&AbstractNativeEventFilterType filter_obj),
    is_quit_lock_enabled() -> bool,
    set_quit_lock_enabled(bool enabled),
    quit(),
    about_to_quit(CoreApplication::QPrivateSignal arg0),
    organization_name_changed(),
    organization_domain_changed(),
    application_name_changed(),
    application_version_changed(),
    event(&EventType arg0) -> bool,
    compress_event(&EventType arg0, &ObjectType receiver, &PostEventListType arg1) -> bool,
    send_spontaneous_event(&ObjectType receiver, &EventType event) -> bool,
    notify_internal(&ObjectType receiver, &EventType event) -> bool,
    notify_internal2(&ObjectType receiver, &EventType arg0) -> bool,
    forward_event(&ObjectType receiver, &EventType event, &EventType originating_event) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
