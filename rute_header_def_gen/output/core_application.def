[org_name(QCoreApplication)]
enum CoreApplicationFixMeEnums {
    ApplicationFlags,
}

struct CoreApplication : Object {
    [static] arguments() -> [String],
    [static] set_organization_domain(org_domain: String),
    [static] organization_domain() -> String,
    [static] set_organization_name(org_name: String),
    [static] organization_name() -> String,
    [static] set_application_name(application: String),
    [static] application_name() -> String,
    [static] set_application_version(version: String),
    [static] application_version() -> String,
    [static] set_setuid_allowed(allow: bool),
    [static] is_setuid_allowed() -> bool,
    [static] instance() -> CoreApplication?,
    [static] exec() -> i32,
    [static] process_events(flags: EventLoop::ProcessEventsFlags),
    [static] process_events(flags: EventLoop::ProcessEventsFlags, maxtime: i32),
    [static] exit(retcode: i32),
    [static] send_event(receiver: *ObjectType, event: *EventType) -> bool,
    [static] post_event(receiver: *ObjectType, event: *EventType, priority: i32),
    [static] send_posted_events(receiver: *ObjectType, event_type: i32),
    [static] remove_posted_events(receiver: *ObjectType, event_type: i32),
    [static] has_pending_events() -> bool,
    [static] event_dispatcher() -> AbstractEventDispatcher?,
    [static] set_event_dispatcher(event_dispatcher: *AbstractEventDispatcherType),
    [replace] notify(arg0: *ObjectType, arg1: *EventType) -> bool,
    [static] starting_up() -> bool,
    [static] closing_down() -> bool,
    [static] application_dir_path() -> String,
    [static] application_file_path() -> String,
    [static] application_pid() -> i64,
    [static] set_library_paths(arg0: &[String]),
    [static] library_paths() -> [String],
    [static] add_library_path(arg0: String),
    [static] remove_library_path(arg0: String),
    [static] install_translator(message_file: *TranslatorType) -> bool,
    [static] remove_translator(message_file: *TranslatorType) -> bool,
    [static] flush(),
    install_native_event_filter(filter_obj: *AbstractNativeEventFilterType),
    remove_native_event_filter(filter_obj: *AbstractNativeEventFilterType),
    [static] is_quit_lock_enabled() -> bool,
    [static] set_quit_lock_enabled(enabled: bool),
    [static] quit(),
    [event] about_to_quit(arg0: CoreApplication::QPrivateSignal),
    [event] organization_name_changed(),
    [event] organization_domain_changed(),
    [event] application_name_changed(),
    [event] application_version_changed(),
    [replace] event(arg0: *EventType) -> bool,
    [replace] compress_event(arg0: *EventType, receiver: *ObjectType, arg1: *PostEventListType) -> bool,
}

// vim: syntax=rust expandtab ts=4 sw=4
