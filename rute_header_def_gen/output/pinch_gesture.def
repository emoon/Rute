/// 
/// A pinch gesture is a form of touch user input in which the user typically
/// touches two points on the input device with a thumb and finger, before moving
/// them closer together or further apart to change the scale factor, zoom, or level
/// of detail of the user interface.
/// 
/// For an overview of gesture handling in Qt and information on using gestures
/// in your applications, see the [Gestures in Widgets and Graphics View](Gestures%20in%20Widgets%20and%20Graphics%20View)
/// document.
/// 
/// ![pinchgesture.png](pinchgesture.png)
/// 
/// Instead of repeatedly applying the same pinching gesture, the user may
/// continue to touch the input device in one place, and apply a second touch
/// to a new point, continuing the gesture. When this occurs, gesture events
/// will continue to be delivered to the target object, containing an instance
/// of QPinchGesture in the Qt::GestureUpdated state.
/// 
/// **See also:** QPanGesture
/// QSwipeGesture
/// # Licence
///
/// The documentation is an adoption of the original [Qt Documentation](http://doc.qt.io/) and provided herein is licensed under the terms of the [GNU Free Documentation License version 1.3](http://www.gnu.org/licenses/fdl.html) as published by the Free Software Foundation.
[org_name(QPinchGesture)]
enum ChangeFlag {
    ScaleFactorChanged,
    RotationAngleChanged,
    CenterPointChanged,
}

struct PinchGesture : Gesture {
    /// 
    /// This property indicates which of the other properties has changed since the
    /// gesture has started. You can use this information to determine which aspect
    /// of your user interface needs to be updated.
    /// 
    /// **See also:** changeFlags
    /// scaleFactor
    /// rotationAngle
    /// centerPoint
    total_change_flags() -> PinchGesture::ChangeFlags,
    set_total_change_flags(value: PinchGesture::ChangeFlags),
    /// 
    /// This property indicates which of the other properties has changed since
    /// the previous gesture event included information about this gesture. You
    /// can use this information to determine which aspect of your user interface
    /// needs to be updated.
    /// 
    /// **See also:** totalChangeFlags
    /// scaleFactor
    /// rotationAngle
    /// centerPoint
    change_flags() -> PinchGesture::ChangeFlags,
    set_change_flags(value: PinchGesture::ChangeFlags),
    /// 
    /// **See also:** centerPoint
    /// lastCenterPoint
    start_center_point() -> PointF,
    /// 
    /// **See also:** centerPoint
    /// startCenterPoint
    last_center_point() -> PointF,
    /// 
    /// The center point is the midpoint between the two input points in the gesture.
    /// 
    /// **See also:** startCenterPoint
    /// lastCenterPoint
    center_point() -> PointF,
    set_start_center_point(value: &PointFType),
    set_last_center_point(value: &PointFType),
    set_center_point(value: &PointFType),
    /// 
    /// The total scale factor measures the total change in scale factor from the
    /// original value to the current scale factor.
    /// 
    /// **See also:** scaleFactor
    /// lastScaleFactor
    total_scale_factor() -> f32,
    /// 
    /// The last scale factor contains the scale factor reported in the
    /// [scaleFactor](scaleFactor)
    /// property when a previous gesture event included
    /// information about this gesture.
    /// 
    /// If no previous event was delivered with information about this gesture
    /// (i.e., this gesture object contains information about the first movement
    /// in the gesture) then this property contains zero.
    /// 
    /// **See also:** scaleFactor
    /// totalScaleFactor
    last_scale_factor() -> f32,
    /// 
    /// The scale factor measures the scale factor associated with the distance
    /// between two of the user's inputs on a touch device.
    /// 
    /// **See also:** totalScaleFactor
    /// lastScaleFactor
    scale_factor() -> f32,
    set_total_scale_factor(value: f32),
    set_last_scale_factor(value: f32),
    set_scale_factor(value: f32),
    /// 
    /// This total angle measures the complete angle covered by the gesture. Usually, this
    /// is equal to the value held by the [rotationAngle](rotationAngle)
    /// property, except in the case where
    /// the user performs multiple rotations by removing and repositioning one of the touch
    /// points, as described above. In this case, the total angle will be the sum of the
    /// rotation angles for the multiple stages of the gesture.
    /// 
    /// **See also:** rotationAngle
    /// lastRotationAngle
    total_rotation_angle() -> f32,
    /// 
    /// The last rotation angle is the angle as reported in the [rotationAngle](rotationAngle)
    /// property
    /// when a previous gesture event was delivered for this gesture.
    /// 
    /// **See also:** rotationAngle
    /// totalRotationAngle
    last_rotation_angle() -> f32,
    /// 
    /// **See also:** totalRotationAngle
    /// lastRotationAngle
    rotation_angle() -> f32,
    set_total_rotation_angle(value: f32),
    set_last_rotation_angle(value: f32),
    set_rotation_angle(value: f32),
}

// vim: syntax=rust expandtab ts=4 sw=4
