///     \class QPinchGesture
///     \since 4.6
///     \brief The QPinchGesture class describes a pinch gesture made by the user.
///     \ingroup touch
///     \ingroup gestures
///     \inmodule QtWidgets
/// 
///     A pinch gesture is a form of touch user input in which the user typically
///     touches two points on the input device with a thumb and finger, before moving
///     them closer together or further apart to change the scale factor, zoom, or level
///     of detail of the user interface.
/// 
///     For an overview of gesture handling in Qt and information on using gestures
///     in your applications, see the \l{Gestures in Widgets and Graphics View} document.
/// 
///     \image pinchgesture.png
/// 
///     Instead of repeatedly applying the same pinching gesture, the user may
///     continue to touch the input device in one place, and apply a second touch
///     to a new point, continuing the gesture. When this occurs, gesture events
///     will continue to be delivered to the target object, containing an instance
///     of QPinchGesture in the Qt::GestureUpdated state.
/// 
///     \sa QPanGesture, QSwipeGesture
[org_name(QPinchGesture)]
enum ChangeFlag {
    ScaleFactorChanged,
    RotationAngleChanged,
    CenterPointChanged,
}

struct PinchGesture : Gesture {
    total_change_flags() -> PinchGesture::ChangeFlags,
    set_total_change_flags(value: PinchGesture::ChangeFlags),
    change_flags() -> PinchGesture::ChangeFlags,
    set_change_flags(value: PinchGesture::ChangeFlags),
    start_center_point() -> PointF,
    last_center_point() -> PointF,
    center_point() -> PointF,
    set_start_center_point(value: &PointFType),
    set_last_center_point(value: &PointFType),
    set_center_point(value: &PointFType),
    total_scale_factor() -> f32,
    last_scale_factor() -> f32,
    scale_factor() -> f32,
    set_total_scale_factor(value: f32),
    set_last_scale_factor(value: f32),
    set_scale_factor(value: f32),
    total_rotation_angle() -> f32,
    last_rotation_angle() -> f32,
    rotation_angle() -> f32,
    set_total_rotation_angle(value: f32),
    set_last_rotation_angle(value: f32),
    set_rotation_angle(value: f32),
}

// vim: syntax=rust expandtab ts=4 sw=4
